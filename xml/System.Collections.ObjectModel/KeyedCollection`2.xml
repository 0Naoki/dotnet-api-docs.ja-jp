<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="081a8839059eeefd055349f66dc042fca18a52a4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36644946" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">
      <span data-ttu-id="0ab2d-101">コレクション内のキーの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0ab2d-101">The type of keys in the collection.</span>
      </span>
    </typeparam>
    <typeparam name="TItem">
      <span data-ttu-id="0ab2d-102">コレクション内の項目の型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0ab2d-102">The type of items in the collection.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="0ab2d-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0ab2d-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-104"><xref:System.Collections.ObjectModel.KeyedCollection%602>両方 o (1) が検索インデックスが作成され、o (1) に匹敵する検索キー指定されたクラスが用意されています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-104">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1).</span></span> <span data-ttu-id="0ab2d-105">型が抽象型、または抽象基本クラスは、それぞれの構築ジェネリック型のための抽象型は、の無限がより正確に設定します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-105">It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class.</span></span> <span data-ttu-id="0ab2d-106">使用する<xref:System.Collections.ObjectModel.KeyedCollection%602>、適切な構築された型から、そのコレクション型を派生します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-106">To use <xref:System.Collections.ObjectModel.KeyedCollection%602>, derive your collection type from the appropriate constructed type.</span></span>  
  
 <span data-ttu-id="0ab2d-107"><xref:System.Collections.ObjectModel.KeyedCollection%602>クラスは、基にしたコレクションの間でのハイブリッド、<xref:System.Collections.Generic.IList%601>ジェネリック インターフェイス型とコレクションに基づいて、<xref:System.Collections.Generic.IDictionary%602>ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-107">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class is a hybrid between a collection based on the <xref:System.Collections.Generic.IList%601> generic interface and a collection based on the <xref:System.Collections.Generic.IDictionary%602> generic interface.</span></span> <span data-ttu-id="0ab2d-108">基づくコレクションと同様に、<xref:System.Collections.Generic.IList%601>ジェネリック インターフェイスは、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のインデックス付きのリストです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-108">Like collections based on the <xref:System.Collections.Generic.IList%601> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> is an indexed list of items.</span></span> <span data-ttu-id="0ab2d-109">基づくコレクションと同様に、<xref:System.Collections.Generic.IDictionary%602>ジェネリック インターフェイスは、<xref:System.Collections.ObjectModel.KeyedCollection%602>の各要素に関連付けられているキーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-109">Like collections based on the <xref:System.Collections.Generic.IDictionary%602> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> has a key associated with each element.</span></span>  
  
 <span data-ttu-id="0ab2d-110">ディクショナリの要素とは異なり<xref:System.Collections.ObjectModel.KeyedCollection%602>キー/値ペアではありません; 代わりに、要素全体は値であり、キーが値に埋め込まれました。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-110">Unlike dictionaries, an element of <xref:System.Collections.ObjectModel.KeyedCollection%602> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.</span></span>  <span data-ttu-id="0ab2d-111">派生したコレクションの要素など、 `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` Visual Basic で)"John doe さん Jr"があります。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-111">For example, an element of a collection derived from `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` in Visual Basic) might be "John Doe Jr."</span></span> <span data-ttu-id="0ab2d-112">この値は"John doe さん Jr"</span><span class="sxs-lookup"><span data-stu-id="0ab2d-112">where the value is "John Doe Jr."</span></span> <span data-ttu-id="0ab2d-113">キーが"Doe"です。整数キーを含む従業員レコードのコレクションはから派生するでした`KeyedCollection\<int,Employee>`です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-113">and the key is "Doe"; or a collection of employee records containing integer keys could be derived from `KeyedCollection\<int,Employee>`.</span></span> <span data-ttu-id="0ab2d-114">抽象<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>メソッドは、要素からキーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-114">The abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method extracts the key from the element.</span></span>  
  
 <span data-ttu-id="0ab2d-115">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602>で入手できる検索ディクショナリが含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-115">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that you can obtain with the <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> property.</span></span>  <span data-ttu-id="0ab2d-116">アイテムを追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-116">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="0ab2d-117">作成するときに、ディクショナリの作成のしきい値を指定することによってこの動作がオーバーライドされる、<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-117">This behavior is overridden by specifying a dictionary creation threshold when you create the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="0ab2d-118">検索ディクショナリの要素の数は、そのしきい値を超えています。 最初に作成されます。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-118">The lookup dictionary is created the first time the number of elements exceeds that threshold.</span></span>  <span data-ttu-id="0ab2d-119">しきい値として – 1 を指定する場合、検索ディクショナリが作成されません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-119">If you specify –1 as the threshold, the lookup dictionary is never created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ab2d-120">場合、コレクション内のすべてのアイテムへの参照がある内部検索ディクショナリを使用すると`TItem`、参照型では、場合、コレクション内のすべての項目のコピーまたは`TItem`は値型です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-120">When the internal lookup dictionary is used, it contains references to all the items in the collection if `TItem` is a reference type, or copies of all the items in the collection if `TItem` is a value type.</span></span> <span data-ttu-id="0ab2d-121">したがって、検索ディクショナリを使用できない可能性があります適切な場合`TItem`は値型です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-121">Thus, using the lookup dictionary may not be appropriate if `TItem` is a value type.</span></span>  
  
 <span data-ttu-id="0ab2d-122">使用してインデックスまたはキーによって項目にアクセスすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-122">You can access an item by its index or key by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="0ab2d-123">、キーのない項目を追加することができますが、これらの項目は、インデックスによってのみアクセスされることができます。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-123">You can add items without a key, but these items can subsequently be accessed only by index.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-124">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-124">This section contains two code examples.</span></span> <span data-ttu-id="0ab2d-125">最初の例から派生するために必要最小限のコード<xref:System.Collections.ObjectModel.KeyedCollection%602>、継承されたメソッドの多くを示しています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-125">The first example shows the minimum code required to derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and demonstrates many of the inherited methods.</span></span> <span data-ttu-id="0ab2d-126">2 番目の例は、の保護されたメソッドをオーバーライドする方法を示しています。<xref:System.Collections.ObjectModel.KeyedCollection%602>カスタム動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-126">The second example shows how to override the protected methods of <xref:System.Collections.ObjectModel.KeyedCollection%602> to provide custom behavior.</span></span>  
  
 <span data-ttu-id="0ab2d-127">**例 1**</span><span class="sxs-lookup"><span data-stu-id="0ab2d-127">**Example 1**</span></span>  
  
 <span data-ttu-id="0ab2d-128">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-128">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="0ab2d-129">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-129">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="0ab2d-130">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-130">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="0ab2d-131">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-131">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="0ab2d-132">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-132">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 <span data-ttu-id="0ab2d-133">**例 2**</span><span class="sxs-lookup"><span data-stu-id="0ab2d-133">**Example 2**</span></span>  
  
 <span data-ttu-id="0ab2d-134">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-134">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="0ab2d-135">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-135">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="0ab2d-136">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-136">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="0ab2d-137">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-137">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="0ab2d-138">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-138">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="0ab2d-139">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-139">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="0ab2d-140">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-140">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="0ab2d-141">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-141">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0ab2d-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0ab2d-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-144">A<xref:System.Collections.ObjectModel.KeyedCollection%602>これで作成されたコンス トラクターから取得した、キーの種類の既定のジェネリック等値比較子を使用して<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-144">A <xref:System.Collections.ObjectModel.KeyedCollection%602> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0ab2d-145">異なるジェネリック等値比較子を指定するには、使用、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29>コンス トラクターまたは<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-145">To specify a different generic equality comparer, use the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor or the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="0ab2d-146">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-146">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="0ab2d-147">アイテムを追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-147">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="0ab2d-148">使用してこの動作をオーバーライドすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターとディクショナリの作成のしきい値を指定します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-148">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ab2d-149"><xref:System.Collections.ObjectModel.KeyedCollection%602>クラスは抽象クラスです (`MustInherit` Visual Basic で)、それを使用するために、そこから派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-149">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="0ab2d-150">派生型のコンス トラクターで呼び出して、適切な<xref:System.Collections.ObjectModel.KeyedCollection%602>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-150">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="0ab2d-151">等値比較演算子またはコンス トラクター内のディクショナリ作成のしきい値などの機能を公開する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-151">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="0ab2d-152">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-152">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-153">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-153">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="0ab2d-154">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-154">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="0ab2d-155">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-155">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="0ab2d-156">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-156">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="0ab2d-157">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-157">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="0ab2d-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ab2d-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-160">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-160">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="0ab2d-161">アイテムを追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-161">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="0ab2d-162">使用してこの動作をオーバーライドすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターとディクショナリの作成のしきい値を指定します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-162">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ab2d-163"><xref:System.Collections.ObjectModel.KeyedCollection%602>クラスは抽象クラスです (`MustInherit` Visual Basic で)、それを使用するために、そこから派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-163">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="0ab2d-164">派生型のコンス トラクターで呼び出して、適切な<xref:System.Collections.ObjectModel.KeyedCollection%602>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-164">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="0ab2d-165">等値比較演算子またはコンス トラクター内のディクショナリ作成のしきい値などの機能を公開する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-165">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="0ab2d-166">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-166">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="0ab2d-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          </span>
        </param>
        <param name="dictionaryCreationThreshold">
          <span data-ttu-id="0ab2d-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ab2d-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-170">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-170">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="0ab2d-171">アイテムを追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-171">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="0ab2d-172">このコンス トラクターでは、その動作をオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-172">This constructor allows you to override that behavior.</span></span> <span data-ttu-id="0ab2d-173">最初の要素が追加されたときに、ディクショナリを作成する場合は 0、2 番目の要素が追加されると、ディクショナリを作成する場合は 1 を指定します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-173">Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on.</span></span> <span data-ttu-id="0ab2d-174">しきい値として – 1 を指定する場合、検索ディクショナリが作成されません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-174">If you specify –1 as the threshold, the lookup dictionary is never created.</span></span>  
  
 <span data-ttu-id="0ab2d-175">非常に小規模なコレクション検索ディクショナリによって指定された検索の速度の向上がありますすべきディクショナリで必要な追加のメモリ。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-175">For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary.</span></span> <span data-ttu-id="0ab2d-176">しきい値を設定するには、トレードオフするタイミングを決定することができます。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-176">Setting a threshold allows you to decide when to make that tradeoff.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ab2d-177"><xref:System.Collections.ObjectModel.KeyedCollection%602>クラスは抽象クラスです (`MustInherit` Visual Basic で)、それを使用するために、そこから派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-177">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="0ab2d-178">派生型のコンス トラクターで呼び出して、適切な<xref:System.Collections.ObjectModel.KeyedCollection%602>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-178">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="0ab2d-179">等値比較演算子またはコンス トラクター内のディクショナリ作成のしきい値などの機能を公開する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-179">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="0ab2d-180">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-180">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-181">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-181">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="0ab2d-182">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-182">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="0ab2d-183">コード例では、 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 0 の場合のしきい値を持つコンス トラクターは内部辞書で最初に、オブジェクトが作成されるように、コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-183">The code example uses the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</span></span>  
  
 <span data-ttu-id="0ab2d-184">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-184">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="0ab2d-185">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-185">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="0ab2d-186">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-186">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="0ab2d-187">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-187">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="0ab2d-188">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-188">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="0ab2d-189">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-189">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0ab2d-190">
            <paramref name="dictionaryCreationThreshold" /> is less than –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-190">
              <paramref name="dictionaryCreationThreshold" /> is less than –1.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="0ab2d-191">The element to change the key of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-191">The element to change the key of.</span>
          </span>
        </param>
        <param name="newKey">
          <span data-ttu-id="0ab2d-192">The new key for <c>item</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-192">The new key for <c>item</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ab2d-193">Changes the key associated with the specified element in the lookup dictionary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-193">Changes the key associated with the specified element in the lookup dictionary.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-194">このメソッドに埋め込まれたキーを変更していない`item`; 検索ディクショナリに保存されているキーを置き換えるだけです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-194">This method does not modify the key embedded in `item`; it simply replaces the key saved in the lookup dictionary.</span></span>  <span data-ttu-id="0ab2d-195">したがって場合、`newKey`に埋め込まれているキーとは異なる`item`、アクセスすることはできません`item`によって返されたキーを使用して<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-195">Therefore, if `newKey` is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="0ab2d-196">このメソッドは、何も行わない場合、<xref:System.Collections.ObjectModel.KeyedCollection%602>検索ディクショナリではありません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-196">This method does nothing if the <xref:System.Collections.ObjectModel.KeyedCollection%602> does not have a lookup dictionary.</span></span>  
  
 <span data-ttu-id="0ab2d-197">内のすべてのキー、<xref:System.Collections.ObjectModel.KeyedCollection%602>一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-197">Every key in a <xref:System.Collections.ObjectModel.KeyedCollection%602> must be unique.</span></span> <span data-ttu-id="0ab2d-198">キーには`null`します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-198">A key cannot be `null`.</span></span>  
  
 <span data-ttu-id="0ab2d-199">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-199">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="0ab2d-200">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="0ab2d-200">Notes for Implementers</span></span>  
 <span data-ttu-id="0ab2d-201">アイテムに埋め込まれているキーを変更する前に検索ディクショナリのキーを更新するには、このメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-201">Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary.</span></span> <span data-ttu-id="0ab2d-202">ディクショナリの作成のしきい値が-1 の場合は、このメソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-202">If the dictionary creation threshold is –1, calling this method is not necessary.</span></span>  
  
 <span data-ttu-id="0ab2d-203">公開しない、<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>メソッドを派生クラスのパブリック メソッドとして。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-203">Do not expose the <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method as a public method of a derived class.</span></span> <span data-ttu-id="0ab2d-204">このメソッドの不正使用では、項目のキーを持つ同期検索ディクショナリを格納します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-204">Misuse of this method puts the lookup dictionary out of sync with item keys.</span></span> <span data-ttu-id="0ab2d-205">たとえば、キーを設定`null`検索ディクショナリをアイテムに対して複数のキーを追加し、別の値に設定するとします。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-205">For example, setting the key to `null` and then setting it to another value adds multiple keys for an item to the lookup dictionary.</span></span> <span data-ttu-id="0ab2d-206">変更可能な項目のキーを許可するには、内部的には、このメソッドを公開します。 検索ディクショナリのキーを変更するこのメソッドを使用する項目のキーが変更されたときにします。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-206">Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-207">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-207">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="0ab2d-208">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-208">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="0ab2d-209">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-209">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="0ab2d-210">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-210">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="0ab2d-211">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-211">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="0ab2d-212">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-212">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="0ab2d-213">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-213">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="0ab2d-214">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-214">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ab2d-215">
            <paramref name="item" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-215">
              <paramref name="item" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="0ab2d-216">-or-  <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-216">-or-  <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0ab2d-217">
            <paramref name="item" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-217">
              <paramref name="item" /> is not found.</span>
          </span>
          <span data-ttu-id="0ab2d-218">-or-  <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-218">-or-  <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0ab2d-219">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-219">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-220">検索ディクショナリがある場合、このメソッドはそれをクリアが削除されません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-220">If there is a lookup dictionary, this method clears it but does not delete it.</span></span>  
  
 <span data-ttu-id="0ab2d-221">かどうかの要素の数がしきい値を超えました、ディクショナリの作成と<xref:System.Collections.ObjectModel.KeyedCollection%602>は検索ディクショナリを使用して、引き続き場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-221">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="0ab2d-222">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-222">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="0ab2d-223">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="0ab2d-223">Notes for Implementers</span></span>  
 <span data-ttu-id="0ab2d-224">動作をカスタマイズするには、このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>から継承されたメソッド、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-224">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="0ab2d-225">このメソッドを基になるコレクションをクリアし、検索ディクショナリをオフにするの基本クラス実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-225">Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-226">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>コレクションからすべてのオブジェクトをクリアするためのカスタム動作を提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-226">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> method to provide custom behavior for clearing all objects from the collection.</span></span> <span data-ttu-id="0ab2d-227">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-227">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="0ab2d-228">例 1</span><span class="sxs-lookup"><span data-stu-id="0ab2d-228">Example 1</span></span>  
  
 <span data-ttu-id="0ab2d-229">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-229">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="0ab2d-230">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-230">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="0ab2d-231">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-231">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="0ab2d-232">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-232">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="0ab2d-233">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-233">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="0ab2d-234">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-234">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="0ab2d-235">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-235">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="0ab2d-236">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-236">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="0ab2d-237">例 2</span><span class="sxs-lookup"><span data-stu-id="0ab2d-237">Example 2</span></span>  
  
 <span data-ttu-id="0ab2d-238">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-238">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="0ab2d-239">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-239">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="0ab2d-240">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-240">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="0ab2d-241">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-241">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="0ab2d-242">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-242">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="0ab2d-243">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-243">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="0ab2d-244">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-244">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="0ab2d-245">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-245">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ab2d-246">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-246">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ab2d-247">実装、<see cref="T:System.Collections.Generic.IEqualityComparer`1" />ジェネリック インターフェイスのコレクション内のキーの等価性を判断するために使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-247">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface that is used to determine equality of keys in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-248">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-248">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="0ab2d-249">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-249">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ab2d-250">Determines whether the collection contains an element with the specified key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-250">Determines whether the collection contains an element with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0ab2d-251">
            <see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-251">
              <see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-252">場合、<xref:System.Collections.ObjectModel.KeyedCollection%602>検索ディクショナリを持つ`key`ディクショナリを検索するために使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-252">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to search the dictionary.</span></span> <span data-ttu-id="0ab2d-253">使用して、各要素のキーを抽出検索ディクショナリがない場合、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>メソッド、指定したキーと比較します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-253">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="0ab2d-254">場合、このメソッドは、o (1) 操作に、 <xref:System.Collections.ObjectModel.KeyedCollection%602> ; 検索ディクショナリがそれ以外の場合これは、O (`n`) 操作、場所`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-254">This method is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-255">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-255">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="0ab2d-256">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-256">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="0ab2d-257">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-257">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="0ab2d-258">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-258">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="0ab2d-259">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-259">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ab2d-260">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-260">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ab2d-261">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-261">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ab2d-262">検索ディクショナリ、 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />; 存在する場合、それ以外の場合、<see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-262">The lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, if it exists; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-263">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-263">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="0ab2d-264">アイテムを追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-264">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="0ab2d-265">使用してこの動作をオーバーライドすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターとディクショナリの作成のしきい値を指定します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-265">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
 <span data-ttu-id="0ab2d-266">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-266">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-267">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-267">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="0ab2d-268">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-268">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="0ab2d-269">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-269">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="0ab2d-270">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-270">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="0ab2d-271">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-271">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="0ab2d-272">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-272">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="0ab2d-273">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-273">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="0ab2d-274">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-274">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="0ab2d-275">The element from which to extract the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-275">The element from which to extract the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ab2d-276">When implemented in a derived class, extracts the key from the specified element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-276">When implemented in a derived class, extracts the key from the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0ab2d-277">The key for the specified element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-277">The key for the specified element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-278">検索ディクショナリのキーに埋め込まれているキーと異なる場合`item`、アクセスすることはできません`item`によって返されたキーを使用して<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-278">If the key in the lookup dictionary is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="0ab2d-279">返すには、このメソッドを実装することができます`null`キーを持たない項目を格納するコレクションは、この場合、項目にアクセスできる、インデックスでのみです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-279">You can implement this method to return `null` for a collection that contains items without keys, in which case the items can be accessed only by their index.</span></span> <span data-ttu-id="0ab2d-280">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-280">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="0ab2d-281">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="0ab2d-281">Notes for Implementers</span></span>  
 <span data-ttu-id="0ab2d-282">ディクショナリ内の項目からキーを抽出する方法にディクショナリを提供するには、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-282">You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.</span></span>  
  
 <span data-ttu-id="0ab2d-283">このメソッドは、内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-283">This method is called internally.</span></span> <span data-ttu-id="0ab2d-284">パブリックにする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-284">It is not necessary for it to be public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-285">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-285">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="0ab2d-286">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-286">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="0ab2d-287">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-287">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="0ab2d-288">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-288">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="0ab2d-289">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-289">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="0ab2d-290">The zero-based index at which <c>item</c> should be inserted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-290">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="0ab2d-291">The object to insert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-291">The object to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ab2d-292">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-292">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-293">場合`index`と等しい<xref:System.Collections.ObjectModel.Collection%601.Count%2A>、`item`の末尾に追加された、<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-293">If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span>  
  
 <span data-ttu-id="0ab2d-294">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-294">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="0ab2d-295"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> によって呼び出される、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>と<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-295"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> is called by the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="0ab2d-296">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="0ab2d-296">Notes for Implementers</span></span>  
 <span data-ttu-id="0ab2d-297">動作をカスタマイズするには、このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>と<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>から継承されたメソッド、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-297">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="0ab2d-298">基になるコレクションに項目を挿入し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-298">Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-299">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドを追加またはコレクションにオブジェクトを挿入するためのカスタム動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-299">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method to provide custom behavior for adding or inserting objects into the collection.</span></span> <span data-ttu-id="0ab2d-300">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-300">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="0ab2d-301">例 1</span><span class="sxs-lookup"><span data-stu-id="0ab2d-301">Example 1</span></span>  
  
 <span data-ttu-id="0ab2d-302">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-302">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="0ab2d-303">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-303">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="0ab2d-304">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-304">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="0ab2d-305">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-305">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="0ab2d-306">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-306">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="0ab2d-307">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-307">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="0ab2d-308">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-308">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="0ab2d-309">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-309">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="0ab2d-310">例 2</span><span class="sxs-lookup"><span data-stu-id="0ab2d-310">Example 2</span></span>  
  
 <span data-ttu-id="0ab2d-311">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-311">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="0ab2d-312">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-312">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="0ab2d-313">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-313">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="0ab2d-314">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-314">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="0ab2d-315">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-315">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="0ab2d-316">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-316">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="0ab2d-317">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-317">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="0ab2d-318">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-318">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="0ab2d-319">
            <paramref name="index" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-319">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="0ab2d-320">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-320">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="0ab2d-321">The key of the element to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-321">The key of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ab2d-322">Gets the element with the specified key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-322">Gets the element with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ab2d-323">指定したキーを持つ要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-323">The element with the specified key.</span>
          </span>
          <span data-ttu-id="0ab2d-324">指定したキーを持つ要素が見つからない場合は、例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-324">If an element with the specified key is not found, an exception is thrown.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-325">このプロパティは、次の構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。 `myCollection[key]` (`myCollection(key)` Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-325">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ab2d-326">このプロパティは、継承された異なる<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>プロパティを取得し、数値インデックスで要素を設定します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-326">This property is distinct from the inherited <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which gets and sets elements by numeric index.</span></span> <span data-ttu-id="0ab2d-327">ただし場合、`TKey`の種類は<xref:System.Int32>、このプロパティは、継承されたプロパティをマスクします。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-327">However, if `TKey` is of type <xref:System.Int32>, this property masks the inherited property.</span></span> <span data-ttu-id="0ab2d-328">その場合は、キャストによって継承されたプロパティにアクセスすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602>その基本型にします。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-328">In that case, you can access the inherited property by casting the <xref:System.Collections.ObjectModel.KeyedCollection%602> to its base type.</span></span> <span data-ttu-id="0ab2d-329">たとえば、 `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` Visual basic で`KeyedCollection<int, MyType^>`C++ で) にキャストできます`Collection<MyType>`(`Collection(Of MyType)` Visual basic で`Collection<MyType^>`C++ で)。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-329">For example, `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` in Visual Basic, `KeyedCollection<int, MyType^>` in C++) can be cast to `Collection<MyType>` (`Collection(Of MyType)` in Visual Basic, `Collection<MyType^>` in C++).</span></span>  
  
 <span data-ttu-id="0ab2d-330">場合、<xref:System.Collections.ObjectModel.KeyedCollection%602>検索ディクショナリを持つ`key`ディクショナリから要素を取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-330">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to retrieve the element from the dictionary.</span></span>  <span data-ttu-id="0ab2d-331">使用して、各要素のキーを抽出検索ディクショナリがない場合、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>メソッド、指定したキーと比較します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-331">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="0ab2d-332">C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-332">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="0ab2d-333">Visual Basic は、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-333">Visual Basic implements <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="0ab2d-334">場合は、o (1) 操作には、このプロパティの値を取得、<xref:System.Collections.ObjectModel.KeyedCollection%602>が検索ディクショナリです。 それ以外の場合これは、O (`n`) 操作、場所`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-334">Retrieving the value of this property is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-335">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-335">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="0ab2d-336">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-336">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="0ab2d-337">このコード例では、両方を呼び出します、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>プロパティは読み取り専用としてキーを取得、および<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>プロパティが設定可能なのインデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-337">The code example calls both the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only and retrieves by key, and the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which is settable and retrieves by index.</span></span> <span data-ttu-id="0ab2d-338">派生コレクション内のオブジェクトの整数キー、インデックス検索に使用される整数と区別することがある場合、後者のプロパティにアクセスする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-338">It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</span></span>  
  
 <span data-ttu-id="0ab2d-339">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-339">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="0ab2d-340">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-340">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="0ab2d-341">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-341">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ab2d-342">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-342">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="0ab2d-343">An element with the specified key does not exist in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-343">An element with the specified key does not exist in the collection.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="0ab2d-344">The key of the element to remove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-344">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ab2d-345">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-345">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0ab2d-346">
            <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-346">
              <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0ab2d-347">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-347">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-348">要素のキーは、検索ディクショナリからも削除されます。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-348">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="0ab2d-349">かどうかの要素の数がしきい値を超えました、ディクショナリの作成と<xref:System.Collections.ObjectModel.KeyedCollection%602>は検索ディクショナリを使用して、引き続き場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-349">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ab2d-350">このメソッドの動作をカスタマイズするには、上書き、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-350">To customize the behavior of this method, override the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method.</span></span>  
  
 <span data-ttu-id="0ab2d-351">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-351">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-352">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-352">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="0ab2d-353">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-353">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="0ab2d-354">例を示します<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>から継承されたメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602>、指定したキーを持つ項目を削除しても、<xref:System.Collections.ObjectModel.Collection%601.Remove%2A>と<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A>から継承されたメソッド<xref:System.Collections.ObjectModel.Collection%601>インデックスとオブジェクトによってをそれぞれ削除します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-354">The example demonstrates <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> method inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602>, which removes the item with a specified key, and also the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> methods inherited from <xref:System.Collections.ObjectModel.Collection%601>, which remove by object and by index respectively.</span></span>  
  
 <span data-ttu-id="0ab2d-355">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-355">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="0ab2d-356">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-356">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="0ab2d-357">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-357">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ab2d-358">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-358">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="0ab2d-359">The index of the element to remove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-359">The index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ab2d-360">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-360">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-361">要素のキーは、検索ディクショナリからも削除されます。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-361">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="0ab2d-362">かどうかの要素の数がしきい値を超えました、ディクショナリの作成と<xref:System.Collections.ObjectModel.KeyedCollection%602>は検索ディクショナリを使用して、引き続き場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-362">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="0ab2d-363">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-363">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="0ab2d-364">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="0ab2d-364">Notes for Implementers</span></span>  
 <span data-ttu-id="0ab2d-365">動作をカスタマイズするには、このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29>と<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29>から継承されたメソッド、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスは、および<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-365">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class, and the <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> method.</span></span>  
  
 <span data-ttu-id="0ab2d-366">基になるコレクションから項目を削除し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-366">Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-367">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>をコレクションからオブジェクトを削除するカスタム動作を提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-367">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method to provide custom behavior for removing objects from the collection.</span></span> <span data-ttu-id="0ab2d-368">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-368">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="0ab2d-369">例 1</span><span class="sxs-lookup"><span data-stu-id="0ab2d-369">Example 1</span></span>  
  
 <span data-ttu-id="0ab2d-370">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-370">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="0ab2d-371">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-371">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="0ab2d-372">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-372">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="0ab2d-373">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-373">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="0ab2d-374">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-374">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="0ab2d-375">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-375">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="0ab2d-376">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-376">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="0ab2d-377">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-377">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="0ab2d-378">例 2</span><span class="sxs-lookup"><span data-stu-id="0ab2d-378">Example 2</span></span>  
  
 <span data-ttu-id="0ab2d-379">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-379">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="0ab2d-380">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-380">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="0ab2d-381">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-381">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="0ab2d-382">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-382">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="0ab2d-383">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-383">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="0ab2d-384">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-384">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="0ab2d-385">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-385">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="0ab2d-386">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-386">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="0ab2d-387">The zero-based index of the item to be replaced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-387">The zero-based index of the item to be replaced.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="0ab2d-388">The new item.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-388">The new item.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ab2d-389">Replaces the item at the specified index with the specified item.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ab2d-389">Replaces the item at the specified index with the specified item.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ab2d-390">検索ディクショナリは、それに従って更新されます。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-390">The lookup dictionary is updated accordingly.</span></span> <span data-ttu-id="0ab2d-391">つまり、置き換えられる項目のキーは検索ディクショナリから削除され、新しい項目のキーが追加されます。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-391">That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</span></span>  
  
 <span data-ttu-id="0ab2d-392">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-392">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="0ab2d-393">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="0ab2d-393">Notes for Implementers</span></span>  
 <span data-ttu-id="0ab2d-394">設定の動作をカスタマイズするには、このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティから継承、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-394">Override this method to provide customized behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ab2d-395">このメソッドではの動作には影響しません、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>プロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-395">This method does not affect the behavior of the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only.</span></span>  
  
 <span data-ttu-id="0ab2d-396">基になるコレクションの項目を設定し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-396">Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ab2d-397">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>設定のカスタム動作を提供するメソッドを<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-397">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> method to provide custom behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="0ab2d-398">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-398">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="0ab2d-399">例 1</span><span class="sxs-lookup"><span data-stu-id="0ab2d-399">Example 1</span></span>  
  
 <span data-ttu-id="0ab2d-400">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-400">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="0ab2d-401">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-401">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="0ab2d-402">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-402">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="0ab2d-403">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-403">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="0ab2d-404">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-404">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="0ab2d-405">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-405">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="0ab2d-406">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-406">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="0ab2d-407">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-407">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="0ab2d-408">例 2</span><span class="sxs-lookup"><span data-stu-id="0ab2d-408">Example 2</span></span>  
  
 <span data-ttu-id="0ab2d-409">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-409">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="0ab2d-410">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-410">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="0ab2d-411">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-411">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="0ab2d-412">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-412">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="0ab2d-413">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-413">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="0ab2d-414">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-414">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="0ab2d-415">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-415">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="0ab2d-416">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="0ab2d-416">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="item" Type="TItem&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>