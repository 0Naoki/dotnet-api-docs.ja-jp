<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3e875a9577a18b1a2e8a1486c326f4e68c6db6c9" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57948173" /></Metadata><TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">コレクション内のキーの型。</typeparam>
    <typeparam name="TItem">コレクション内の項目の型。</typeparam>
    <summary>キーが値に埋め込まれているコレクションの抽象基本クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ObjectModel.KeyedCollection%602>両方 o (1) が検索インデックスが作成され、キーの取得の o (1) に匹敵するクラスを提供します。 型が抽象型、または抽象基本クラスは、それぞれの構築ジェネリック型のための抽象型は、無限がより正確に設定します。 使用する<xref:System.Collections.ObjectModel.KeyedCollection%602>コレクション型を適切に構築された型から派生します。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602>クラスに基づいてコレクションの間のハイブリッドは、<xref:System.Collections.Generic.IList%601>ジェネリック インターフェイスおよびコレクションに基づいて、<xref:System.Collections.Generic.IDictionary%602>ジェネリック インターフェイス。 基づくコレクションなどの<xref:System.Collections.Generic.IList%601>ジェネリック インターフェイスは、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のインデックス付きリストです。 基づくコレクションなどの<xref:System.Collections.Generic.IDictionary%602>ジェネリック インターフェイスは、<xref:System.Collections.ObjectModel.KeyedCollection%602>は各要素に関連付けられたキーがあります。  
  
 ディクショナリの要素とは異なり<xref:System.Collections.ObjectModel.KeyedCollection%602>キー/値ペアではありません; 代わりに、全体の要素は、値と値の中で、キーが埋め込まれています。  たとえばから派生したコレクションの要素`KeyedCollection\<String,String>`(`KeyedCollection(Of String, String)` Visual Basic で)"John Doe Jr。"があります。 値が"John Doe Jr" で、キーが"Doe";整数キーを含む従業員レコードのコレクションから派生または`KeyedCollection\<int,Employee>`します。 抽象<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>メソッドは、要素からキーを抽出します。  
  
 既定で、<xref:System.Collections.ObjectModel.KeyedCollection%602>で入手できます。 検索ディクショナリが含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A>プロパティ。  項目を追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索の検索ディクショナリに保存します。 作成するときに、ディクショナリの作成のしきい値を指定することでこの動作がオーバーライドされる、<xref:System.Collections.ObjectModel.KeyedCollection%602>します。 検索ディクショナリが要素の数は、そのしきい値を超えています。 最初に作成されます。  しきい値として-1 を指定する場合は、参照辞書は作成されません。  
  
> [!NOTE]
>  場合、コレクション内のすべてのアイテムへの参照があるときに、内部検索ディクショナリを使用すると、 `TItem` 、参照型では、場合に、コレクション内のすべての項目のコピーまたは`TItem`は値型です。 したがって、検索ディクショナリを使用して適切ではない場合`TItem`は値型です。  
  
 インデックスまたはキーによって項目を使用してアクセスすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>プロパティ。 キーがない項目を追加することができますが、これらの項目のインデックスによってのみアクセスできます。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初の例では、最小限のコードから派生するために必要な<xref:System.Collections.ObjectModel.KeyedCollection%602>、継承されたメソッドの多くを示しています。 2 番目の例は、の保護されたメソッドをオーバーライドする方法を示しています。<xref:System.Collections.ObjectModel.KeyedCollection%602>カスタム動作を提供します。  
  
 **例 1**  
  
 このコード例はコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライド、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドと、パブリック コンス トラクターを提供します。 コード例にも示します多くのプロパティとメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラス。  
  
 `SimpleOrder`クラスは非常に単純な要求一覧を含む`OrderItem`注文の品目を表すオブジェクト。 キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 **例 2**  
  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、と<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および。既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。 この例で提供されるカスタムの動作がという名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 コード例は、作成、`SimpleOrder`から派生したクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>簡単な注文形式を表します。 注文書を含む`OrderItem`注文のアイテムを表すオブジェクトします。 コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。  
  
 コード例では、カスタム動作を示してでプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラス。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>既定の等値比較子を使用する <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Collections.ObjectModel.KeyedCollection%602>これで作成されたコンス トラクターから取得した、キーの種類の既定の汎用の等値比較子を使用して<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>します。 異なるジェネリック等値比較子を指定するには、使用、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29>コンス トラクターまたは<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクター。  
  
 既定で、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。 項目を追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索の検索ディクショナリに保存します。 使用してこの動作をオーバーライドすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターとディクショナリの作成のしきい値を指定します。  
  
> [!NOTE]
>  <xref:System.Collections.ObjectModel.KeyedCollection%602>クラスが抽象クラス (`MustInherit` Visual basic)、それを使用するには、そこから派生する必要があります。 派生型のコンス トラクターで呼び出して、適切な<xref:System.Collections.ObjectModel.KeyedCollection%602>コンス トラクター。 等値比較演算子またはコンス トラクター内ディクショナリの作成のしきい値などの機能を公開する必要はありません。  
  
 このコンス トラクターは、o (1) 操作です。  
  
   
  
## Examples  
 このコード例はコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライド、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドと、パブリック コンス トラクターを提供します。 コード例にも示します多くのプロパティとメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラス。  
  
 `SimpleOrder`クラスは非常に単純な要求一覧を含む`OrderItem`注文の品目を表すオブジェクト。 キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">キーを比較する場合に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。または、<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> から取得する、キーの型の既定の等値比較子を使用する場合は <see langword="null" />。</param>
        <summary>指定した等値比較子を使用する <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定で、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。 項目を追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索の検索ディクショナリに保存します。 使用してこの動作をオーバーライドすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターとディクショナリの作成のしきい値を指定します。  
  
> [!NOTE]
>  <xref:System.Collections.ObjectModel.KeyedCollection%602>クラスが抽象クラス (`MustInherit` Visual basic)、それを使用するには、そこから派生する必要があります。 派生型のコンス トラクターで呼び出して、適切な<xref:System.Collections.ObjectModel.KeyedCollection%602>コンス トラクター。 等値比較演算子またはコンス トラクター内ディクショナリの作成のしきい値などの機能を公開する必要はありません。  
  
 このコンス トラクターは、o (1) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">キーを比較する場合に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。または、<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> から取得する、キーの型の既定の等値比較子を使用する場合は <see langword="null" />。</param>
        <param name="dictionaryCreationThreshold">検索ディクショナリを作成せずにコレクションが保有できる要素数 (0 を指定すると最初の項目の追加時に検索ディクショナリが作成される)。検索ディクショナリを作成しない場合は -1。</param>
        <summary>指定した等値比較子を使用し、指定したしきい値を超えた場合に検索ディクショナリを作成する、<see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定で、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。 項目を追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索の検索ディクショナリに保存します。 このコンス トラクターを使用すると、動作をオーバーライドできます。 最初の要素が追加されたときに、ディクショナリを作成するには 0 と 2 番目の要素が追加されたときに、ディクショナリを作成する場合は 1 を指定します。 しきい値として-1 を指定する場合は、参照辞書は作成されません。  
  
 非常に小規模なコレクション、参照辞書によって提供される検索速度の向上は、ディクショナリに必要な追加メモリ価値はないかもしれません。 しきい値を設定してトレードオフするタイミングを決定することができます。  
  
> [!NOTE]
>  <xref:System.Collections.ObjectModel.KeyedCollection%602>クラスが抽象クラス (`MustInherit` Visual basic)、それを使用するには、そこから派生する必要があります。 派生型のコンス トラクターで呼び出して、適切な<xref:System.Collections.ObjectModel.KeyedCollection%602>コンス トラクター。 等値比較演算子またはコンス トラクター内ディクショナリの作成のしきい値などの機能を公開する必要はありません。  
  
 このコンス トラクターは、o (1) 操作です。  
  
   
  
## Examples  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、と<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および。既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。 この例で提供されるカスタムの動作がという名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 コード例では、 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 0 の場合のしきい値を含むコンス トラクターは内部ディクショナリには、最初に、オブジェクトが作成されるように、コレクションに追加されます。  
  
 コード例は、作成、`SimpleOrder`から派生したクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>簡単な注文形式を表します。 注文書を含む`OrderItem`注文のアイテムを表すオブジェクトします。 コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。  
  
 コード例では、カスタム動作を示してでプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラス。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dictionaryCreationThreshold" /> が -1 未満です。</exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">変更するキーの要素。</param>
        <param name="newKey"><paramref name="item" /> の新しいキー。</param>
        <summary>検索ディクショナリの指定した要素に関連付けられたキーを変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、埋め込まれているキーを変更しません`item`; 検索ディクショナリに保存されているキーを置き換えるだけです。  そのため場合、`newKey`に埋め込まれているキーとは異なる`item`、アクセスできない`item`によって返されるキーを使用して<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>します。  
  
 このメソッドは何も行いません場合、<xref:System.Collections.ObjectModel.KeyedCollection%602>検索ディクショナリではありません。  
  
 内のすべてのキーを<xref:System.Collections.ObjectModel.KeyedCollection%602>で一意である必要があります。 キーには`null`します。  
  
 このメソッドは、o (1) 操作です。  
  
## <a name="notes-for-implementers"></a>実装についてのメモ  
 キーの変更は、アイテムに埋め込まれている、前に検索ディクショナリのキーを更新するには、このメソッドを呼び出す必要があります。 ディクショナリの作成のしきい値が-1 の場合は、このメソッドを呼び出す必要はありません。  
  
 公開しないで、<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>メソッドを派生クラスのパブリック メソッドとして。 このメソッドの不正使用では、項目のキーを持つ同期検索ディクショナリを配置します。 たとえば、キーを設定`null`検索ディクショナリに項目に対して複数のキーを追加し、もう 1 つの値に設定するとします。 変更可能な項目のキーを許可するには、内部的には、このメソッドを公開します。項目のキーが変更されたときにこのメソッドを使用して検索ディクショナリのキーを変更します。  
  
   
  
## Examples  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および、保護されたをオーバーライドする方法をサポートするメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドと。コレクションです。  
  
 コード例は、作成、`MutableKeys`から派生するコレクション、 <xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラス。 `MutableKey`クラスには、設定可能な`Key`プロパティ。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子を呼び出す、 `internal` (`Friend` Visual Basic で)`ChangeKey`新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッド。 そうである場合は、例外がスローされ、プロパティの値は変更されません。  
  
 間の接続を維持するために、`MutableKey`オブジェクトと`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐために、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールド。 このフィールドを追加して、コレクションから項目を削除するなどのカスタム動作を提供する保護されたメソッドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッド。 項目がコレクションに追加され、項目が削除されるとオフになっている場合は、フィールドが設定されます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="item" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="key" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="item" /> が見つかりません。  
  
または 
 <paramref name="key" /> は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> に既に存在します。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> からすべての要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 検索ディクショナリがある場合、このメソッドはそれをクリアが削除されません。  
  
 要素の数が、ディクショナリの作成のしきい値を超えましたかどうか、<xref:System.Collections.ObjectModel.KeyedCollection%602>は検索ディクショナリを使用する場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用する続行されます。  
  
 このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。  
  
## <a name="notes-for-implementers"></a>実装についてのメモ  
 動作をカスタマイズするには、このメソッドをオーバーライド、<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>から継承されたメソッド、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスです。  
  
 基になるコレクションをクリアして、検索ディクショナリをクリアするこのメソッドの基本クラス実装を呼び出します。  
  
   
  
## Examples  
 このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>メソッドをコレクションからすべてのオブジェクトをクリアするためのカスタム動作を指定します。 最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。  
  
 例 1  
  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、と<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および。既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。 この例で提供されるカスタムの動作がという名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 コード例は、作成、`SimpleOrder`から派生したクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>簡単な注文形式を表します。 注文書を含む`OrderItem`注文のアイテムを表すオブジェクトします。 コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。  
  
 コード例では、カスタム動作を示してでプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラス。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および、保護されたをオーバーライドする方法をサポートするメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドと。コレクションです。  
  
 コード例は、作成、`MutableKeys`から派生するコレクション、 <xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラス。 `MutableKey`クラスには、設定可能な`Key`プロパティ。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子を呼び出す、 `internal` (`Friend` Visual Basic で)`ChangeKey`新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッド。 そうである場合は、例外がスローされ、プロパティの値は変更されません。  
  
 間の接続を維持するために、`MutableKey`オブジェクトと`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐために、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールド。 このフィールドを追加して、コレクションから項目を削除するなどのカスタム動作を提供する保護されたメソッドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッド。 項目がコレクションに追加され、項目が削除されるとオフになっている場合は、フィールドが設定されます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションの複数のキーの値が等しいかどうかを確認するために使用される、ジェネリック等値比較子を取得します。</summary>
        <value>コレクションの複数のキーの値が等しいかどうかを確認するために使用される <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内で検索されるキー。</param>
        <summary>指定したキーの要素がコレクションに含まれているかどうかを確認します。</summary>
        <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Collections.ObjectModel.KeyedCollection%602>検索ディクショナリを持つ`key`ディクショナリを検索するために使用します。 使用して各要素のキーを抽出する検索ディクショナリがない場合、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>メソッドと、指定したキーと比較します。  
  
 場合、このメソッドは o (1) 操作、<xref:System.Collections.ObjectModel.KeyedCollection%602>が検索ディクショナリ。 それ以外の場合これは、O (`n`) 操作、場所`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。  
  
   
  
## Examples  
 このコード例はコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライド、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドと、パブリック コンス トラクターを提供します。 コード例にも示します多くのプロパティとメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラス。  
  
 `SimpleOrder`クラスは非常に単純な要求一覧を含む`OrderItem`注文の品目を表すオブジェクト。 キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の検索ディクショナリを取得します。</summary>
        <value>存在する場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の検索ディクショナリ。それ以外の場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定で、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。 項目を追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索の検索ディクショナリに保存します。 使用してこの動作をオーバーライドすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターとディクショナリの作成のしきい値を指定します。  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
   
  
## Examples  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および、保護されたをオーバーライドする方法をサポートするメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドと。コレクションです。  
  
 コード例は、作成、`MutableKeys`から派生するコレクション、 <xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラス。 `MutableKey`クラスには、設定可能な`Key`プロパティ。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子を呼び出す、 `internal` (`Friend` Visual Basic で)`ChangeKey`新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッド。 そうである場合は、例外がスローされ、プロパティの値は変更されません。  
  
 間の接続を維持するために、`MutableKey`オブジェクトと`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐために、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールド。 このフィールドを追加して、コレクションから項目を削除するなどのカスタム動作を提供する保護されたメソッドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッド。 項目がコレクションに追加され、項目が削除されるとオフになっている場合は、フィールドが設定されます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">キーの抽出元要素。</param>
        <summary>派生クラスで実装された場合、指定した要素からキーを抽出します。</summary>
        <returns>指定した要素のキー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 検索ディクショナリのキーがキーに埋め込まれていると異なる場合`item`、アクセスできない`item`によって返されるキーを使用して<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>します。  
  
 返すには、このメソッドを実装する`null`キーを持たない項目を格納するコレクションの場合、項目にアクセスできる、インデックスを使用してのみです。 このメソッドは、o (1) 操作です。  
  
## <a name="notes-for-implementers"></a>実装についてのメモ  
 ディクショナリ内の項目からキーを抽出する方法を提供するには、このメソッドをオーバーライドする必要があります。  
  
 このメソッドは、内部的に呼び出されます。 パブリックにする必要はありません。  
  
   
  
## Examples  
 このコード例はコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライド、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドと、パブリック コンス トラクターを提供します。 コード例にも示します多くのプロパティとメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラス。  
  
 `SimpleOrder`クラスは非常に単純な要求一覧を含む`OrderItem`注文の品目を表すオブジェクト。 キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index"><paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
        <param name="item">挿入するオブジェクト。</param>
        <summary>
  <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`index`と等しい<xref:System.Collections.ObjectModel.Collection%601.Count%2A>、`item`の末尾に追加されますが、<xref:System.Collections.ObjectModel.KeyedCollection%602>します。  
  
 このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> によって呼び出される、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>と<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>メソッド。  
  
## <a name="notes-for-implementers"></a>実装についてのメモ  
 動作をカスタマイズするには、このメソッドをオーバーライド、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>と<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>から継承されたメソッド、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスです。  
  
 基になるコレクションに項目を挿入し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。  
  
   
  
## Examples  
 このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドを追加またはオブジェクトのコレクションに挿入するためのカスタム動作を指定します。 最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。  
  
 例 1  
  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、と<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および。既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。 この例で提供されるカスタムの動作がという名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 コード例は、作成、`SimpleOrder`から派生したクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>簡単な注文形式を表します。 注文書を含む`OrderItem`注文のアイテムを表すオブジェクトします。 コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。  
  
 コード例では、カスタム動作を示してでプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラス。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および、保護されたをオーバーライドする方法をサポートするメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドと。コレクションです。  
  
 コード例は、作成、`MutableKeys`から派生するコレクション、 <xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラス。 `MutableKey`クラスには、設定可能な`Key`プロパティ。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子を呼び出す、 `internal` (`Friend` Visual Basic で)`ChangeKey`新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッド。 そうである場合は、例外がスローされ、プロパティの値は変更されません。  
  
 間の接続を維持するために、`MutableKey`オブジェクトと`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐために、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールド。 このフィールドを追加して、コレクションから項目を削除するなどのカスタム動作を提供する保護されたメソッドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッド。 項目がコレクションに追加され、項目が削除されるとオフになっている場合は、フィールドが設定されます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が 0 未満です。  
  
または 
 <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">取得する要素のキー。</param>
        <summary>指定したキーを持つ要素を取得します。</summary>
        <value>指定したキーを持つ要素。 指定したキーを持つ要素が見つからない場合は、例外がスローされます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、次の構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。 `myCollection[key]` (`myCollection(key)` Visual Basic で)。  
  
> [!NOTE]
>  このプロパティは、継承された異なる<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>プロパティを取得し、数値インデックスを使用して要素を設定します。 ただし場合、`TKey`の種類は<xref:System.Int32>、このプロパティは、継承されたプロパティをマスクします。 その場合は、キャストすることによって継承されたプロパティにアクセスすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602>その基本型にします。 たとえば、 `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` Visual basic で`KeyedCollection<int, MyType^>`C++ で) にキャストできる`Collection<MyType>`(`Collection(Of MyType)` Visual basic で`Collection<MyType^>`C++ で)。  
  
 場合、<xref:System.Collections.ObjectModel.KeyedCollection%602>検索ディクショナリを持つ`key`ディクショナリから要素を取得するために使用します。  使用して各要素のキーを抽出する検索ディクショナリがない場合、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>メソッドと、指定したキーと比較します。  
  
 C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>プロパティ。 Visual Basic は、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。  
  
 O (1) 操作は、このプロパティの値を取得する場合、<xref:System.Collections.ObjectModel.KeyedCollection%602>が検索ディクショナリ。 それ以外の場合これは、O (`n`) 操作、場所`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。  
  
   
  
## Examples  
 このコード例はコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライド、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドと、パブリック コンス トラクターを提供します。 コード例にも示します多くのプロパティとメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラス。  
  
 コード例では、両方を呼び出します、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>プロパティは読み取り専用としてキーを取得、および<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>プロパティは設定可能としてインデックスを取得します。 派生コレクション内のオブジェクトがある整数キー、インデックス検索に使用される整数と区別することに後者のプロパティにアクセスする方法を示します。  
  
 `SimpleOrder`クラスは非常に単純な要求一覧を含む`OrderItem`注文の品目を表すオブジェクト。 キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーを持つ要素がコレクション内に存在しません。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">削除する要素のキー。</param>
        <summary>指定したキーを持つ要素を <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> から削除します。</summary>
        <returns>要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<see langword="false" /> が <paramref name="key" /> に見つからない場合にも <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素のキーは、検索ディクショナリからも削除されます。  
  
 要素の数が、ディクショナリの作成のしきい値を超えましたかどうか、<xref:System.Collections.ObjectModel.KeyedCollection%602>は検索ディクショナリを使用する場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用する続行されます。  
  
> [!NOTE]
>  このメソッドの動作をカスタマイズするには、オーバーライド、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>メソッド。  
  
 このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。  
  
   
  
## Examples  
 このコード例はコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライド、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドと、パブリック コンス トラクターを提供します。 コード例にも示します多くのプロパティとメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラス。  
  
 例を示します<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>から継承されたメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602>、指定したキーを持つ項目を削除して、<xref:System.Collections.ObjectModel.Collection%601.Remove%2A>と<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A>メソッドから継承<xref:System.Collections.ObjectModel.Collection%601>、オブジェクトおよびインデックスをそれぞれ削除します。  
  
 `SimpleOrder`クラスは非常に単純な要求一覧を含む`OrderItem`注文の品目を表すオブジェクト。 キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する要素のインデックス。</param>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の指定したインデックスにある要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素のキーは、検索ディクショナリからも削除されます。  
  
 要素の数が、ディクショナリの作成のしきい値を超えましたかどうか、<xref:System.Collections.ObjectModel.KeyedCollection%602>は検索ディクショナリを使用する場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用する続行されます。  
  
 このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。  
  
## <a name="notes-for-implementers"></a>実装についてのメモ  
 動作をカスタマイズするには、このメソッドをオーバーライド、<xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29>と<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29>から継承されたメソッド、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスは、および<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29>メソッド。  
  
 基になるコレクションから項目を削除し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。  
  
   
  
## Examples  
 このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>メソッドをコレクションからオブジェクトを削除するためのカスタム動作を指定します。 最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。  
  
 例 1  
  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、と<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および。既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。 この例で提供されるカスタムの動作がという名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 コード例は、作成、`SimpleOrder`から派生したクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>簡単な注文形式を表します。 注文書を含む`OrderItem`注文のアイテムを表すオブジェクトします。 コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。  
  
 コード例では、カスタム動作を示してでプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラス。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および、保護されたをオーバーライドする方法をサポートするメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドと。コレクションです。  
  
 コード例は、作成、`MutableKeys`から派生するコレクション、 <xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラス。 `MutableKey`クラスには、設定可能な`Key`プロパティ。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子を呼び出す、 `internal` (`Friend` Visual Basic で)`ChangeKey`新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッド。 そうである場合は、例外がスローされ、プロパティの値は変更されません。  
  
 間の接続を維持するために、`MutableKey`オブジェクトと`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐために、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールド。 このフィールドを追加して、コレクションから項目を削除するなどのカスタム動作を提供する保護されたメソッドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッド。 項目がコレクションに追加され、項目が削除されるとオフになっている場合は、フィールドが設定されます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">置き換えられる項目の 0 から始まるインデックス。</param>
        <param name="item">新しい項目。</param>
        <summary>指定したインデックス位置の項目を、指定した項目で置き換えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 検索ディクショナリが適宜更新されます。 つまり、置き換えられる項目のキーは、検索ディクショナリから削除され、新しい項目のキーが追加されます。  
  
 このメソッドは、o (1) 操作です。  
  
## <a name="notes-for-implementers"></a>実装についてのメモ  
 設定の動作をカスタマイズするには、このメソッドをオーバーライド、<xref:System.Collections.ObjectModel.Collection%601.Item%2A>から継承されたプロパティ、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスです。  
  
> [!NOTE]
>  このメソッドではの動作には影響しません、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>は読み取り専用プロパティ。  
  
 基になるコレクションの項目を設定し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。  
  
   
  
## Examples  
 このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>設定のカスタム動作を提供するメソッド、<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>プロパティ。 最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。  
  
 例 1  
  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、と<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および。既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。 この例で提供されるカスタムの動作がという名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 コード例は、作成、`SimpleOrder`から派生したクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>簡単な注文形式を表します。 注文書を含む`OrderItem`注文のアイテムを表すオブジェクトします。 コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。  
  
 コード例では、カスタム動作を示してでプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラス。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および、保護されたをオーバーライドする方法をサポートするメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドと。コレクションです。  
  
 コード例は、作成、`MutableKeys`から派生するコレクション、 <xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラス。 `MutableKey`クラスには、設定可能な`Key`プロパティ。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子を呼び出す、 `internal` (`Friend` Visual Basic で)`ChangeKey`新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッド。 そうである場合は、例外がスローされ、プロパティの値は変更されません。  
  
 間の接続を維持するために、`MutableKey`オブジェクトと`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐために、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールド。 このフィールドを追加して、コレクションから項目を削除するなどのカスタム動作を提供する保護されたメソッドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッド。 項目がコレクションに追加され、項目が削除されるとオフになっている場合は、フィールドが設定されます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="item" Type="TItem" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>