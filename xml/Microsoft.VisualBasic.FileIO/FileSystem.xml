<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileIO.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4d54134cd8f60933b55014a55198345e51b40b2a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37712008" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ドライブ、ファイル、ディレクトリを操作するためのプロパティとメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem`オブジェクト。  
  
|終了|解決方法については、|  
|-|-|  
|テキスト ファイルからの読み取り|[方法: テキスト ファイルからデータを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
|区切りテキスト ファイルからの読み取り|[方法: コンマ区切りのテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|固定幅テキスト ファイルからの読み取り|[方法: 固定幅のテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|複数の書式を持つテキスト ファイルからの読み取り|[方法: 複数の書式を持つテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
|バイナリ ファイルからの読み取り|[方法: バイナリ ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
|テキスト ファイルから読み取り、 <xref:System.IO.StreamReader>|[方法: StreamReader を使用してファイルからテキストを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
|テキスト ファイルへの書き込み|[方法: ファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|テキスト ファイルに追加します。|[方法: テキスト ファイルに追記する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
|バイナリ ファイルへの書き込み|[方法: バイナリ ファイルに書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
|内のテキスト ファイルに書き込む、 **[マイ ドキュメント]** ディレクトリ|[方法: My Documents ディレクトリのファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-in-the-my-documents-directory.md)|  
|テキスト ファイルに書き込み、 `StreamWriter`|[方法: StreamWriter を使用してファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
|特定のパターンを持つファイルをコピーします。|[方法: 特定のパターンを持つファイルをディレクトリにコピーする](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md)|  
|ファイルを同じディレクトリにコピーします。|[方法: ファイルのコピーを同じディレクトリに作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|ファイルを別のディレクトリにコピーします。|[方法: ファイルのコピーを別のディレクトリに作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
|ファイルを作成します。|[方法: ファイルを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-file.md)|  
|ファイルの削除|[方法: ファイルを削除する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
|特定のパターンを持つファイルを検索します。|[方法: 特定のパターンに一致するファイルを検索する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
|ファイルを移動します。|[方法: ファイルを移動する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
|ファイル名の変更します。|[方法: ファイルの名前を変更する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
|ディレクトリを別のディレクトリにコピーします。|[方法: ディレクトリを別のディレクトリにコピーする](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
|ディレクトリの作成|[方法: ディレクトリを作成する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
|特定のパターンに一致するサブディレクトリを検索します。|[方法: 特定のパターンに一致するサブディレクトリを検索する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
|ディレクトリ内のファイルのコレクションを取得します。|[方法: ディレクトリにあるファイルのコレクションを取得する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|読み取り、 **[マイ ドキュメント]** ディレクトリ|[方法: My Documents ディレクトリの内容を取得する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-retrieve-the-contents-of-the-my-documents-directory.md)|  
|ファイル パスを解析します。|[方法: ファイル パスを解析する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 この例を確認するかどうかフォルダー`C:\backup\logs`が存在し、そのプロパティを確認します。  
  
 [!code-vb[VbVbcnMyFileSystem#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#23)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystem ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystem();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [オブジェクト (Visual Basic)](http://msdn.microsoft.com/library/651c73e4-dca8-402b-9c6b-e3902b3a3f4b)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CombinePath">
      <MemberSignature Language="C#" Value="public static string CombinePath (string baseDirectory, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CombinePath(string baseDirectory, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CombinePath (baseDirectory As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CombinePath(System::String ^ baseDirectory, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="static member CombinePath : string * string -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CombinePath (baseDirectory, relativePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseDirectory" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseDirectory">
          <see langword="String" />。 結合する 1 つ目のパス。</param>
        <param name="relativePath">
          <see langword="String" />。 結合する 2 つ目のパス。</param>
        <summary>2 つのパスを結合し、適切な形式のパスを返します。</summary>
        <returns>指定されたパスの組み合わせ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、正しく書式設定されたパスを作成する余分なスラッシュ文字を削除します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CombinePath`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ディレクトリ パスとファイル名を結合します。|[方法: Visual Basic でファイル パスを解析](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 この例では、正しく書式設定されたパスを作成するディレクトリ パスとファイル名を結合します。  
  
 [!code-vb[VbRefFile#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#3)]  
  
 この例では、正しく書式設定されたパスを作成する 2 つのパスを結合します。  
  
 [!code-vb[VbRefFile#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#4)]  
  
 この例を返します`C:\Dir1\Dir2\Dir4\Dir5\File.txt`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="baseDirectory" /> または <paramref name="relativePath" /> のパスの形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="static member CopyDirectory : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーするディレクトリ。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに例外スローされる可能性が発生する特定のファイルでします。 このような例外がスローされたときに統合の単一の例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>をファイルまたはディレクトリのパスがキーとに特定の例外メッセージが含まれている、対応する値。 使用`For…Each`エントリを列挙します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ディレクトリのコピー|[方法: Visual Basic での別のディレクトリにディレクトリをコピー](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 次の例は、ディレクトリの内容をコピー`TestDirectory1`に`TestDirectory2`、既存のファイルを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 置換`C:\TestDirectory1`と`C:\TestDirectory2`パスとコピーするディレクトリとそれをコピーする場所の名前に置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="static member CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーするディレクトリ。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに例外スローされる可能性が発生する特定のファイルでします。 このような例外がスローされたときに統合の単一の例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>をファイルまたはディレクトリのパスがキーとに特定の例外メッセージが含まれている、対応する値。 使用`For…Each`エントリを列挙します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ディレクトリのコピー|[方法: Visual Basic での別のディレクトリにディレクトリをコピー](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 次の例は、ディレクトリの内容をコピー`TestDirectory1`に`TestDirectory2`、既存のファイルを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 置換`C:\TestDirectory1`と`C:\TestDirectory2`パスとコピーするディレクトリとそれをコピーする場所の名前に置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="ShowUI" /> が <see langword="UIOption.AllDialogs" /> に設定されている場合にユーザーが操作を取り消したか、ディレクトリ内の 1 つ以上のファイルをコピーできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="static member CopyDirectory : string * string * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーするディレクトリ。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
        <param name="overwrite">既存のファイルを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに例外スローされる可能性が発生する、マージ中に既存のファイルなどの特定のファイルによって`overwrite`に設定されている`False`します。 このような例外がスローされたときに統合の単一の例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>をファイルまたはディレクトリのパスがキーとに特定の例外メッセージが含まれている、対応する値。 使用`For…Each`エントリを列挙します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ディレクトリのコピー|[方法: Visual Basic での別のディレクトリにディレクトリをコピー](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 次の例は、ディレクトリの内容をコピー`TestDirectory1`に`TestDirectory2`、既存のファイルを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 置換`C:\TestDirectory1`と`C:\TestDirectory2`パスとコピーするディレクトリとそれをコピーする場所の名前に置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーするディレクトリ。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先の場所。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">操作中にユーザーが **[キャンセル]** をクリックした場合の処理を指定します。 既定値は <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> です。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに例外スローされる可能性が発生する特定のファイルでします。 このような例外がスローされたときに統合の単一の例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>をファイルまたはディレクトリのパスがキーとに特定の例外メッセージが含まれている、対応する値。 使用`For…Each`エントリを列挙します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ディレクトリのコピー|[方法: Visual Basic での別のディレクトリにディレクトリをコピー](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 次の例は、ディレクトリの内容をコピー`TestDirectory1`に`TestDirectory2`、既存のファイルを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 置換`C:\TestDirectory1`と`C:\TestDirectory2`パスとコピーするディレクトリとそれをコピーする場所の名前に置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> または <paramref name="sourceDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">コピー元のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー元とコピー先のパスが同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のフォルダー名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">コピー先のファイルは存在しますが、アクセスできません。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="ShowUI" /> が <see langword="UIOption.AllDialogs" /> に設定されている場合にユーザーが操作を取り消したか、ディレクトリ内の 1 つ以上のファイルをコピーできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルを新しい場所にコピーします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="static member CopyFile : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyFile (sourceFileName, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイル。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所。</param>
        <summary>ファイルを新しい場所にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` (アクセス制御エントリ) の Ace は保持されません。 新しく作成されたファイルを作成するディレクトリから既定の Ace を継承します。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを同じディレクトリにコピーします。|[方法: Visual Basic での同じディレクトリにファイルのコピーを作成します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|別のディレクトリにファイルをコピーします。|[方法: Visual Basic での別のディレクトリにファイルのコピーを作成します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 この例は、ファイルをコピー`Test.txt`ディレクトリに`TestFiles2`既存のファイルを上書きすることがなく。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 この例は、ファイルをコピー`Test.txt`ディレクトリに`TestFiles2`その名前を変更および`NewFile.txt`します。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー先のディレクトリにある同じ名前のファイルが使用中です。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="static member CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyFile (sourceFileName, destinationFileName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイル。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>ファイルを新しい場所にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` (アクセス制御エントリ) の Ace は保持されません。 新しく作成されたファイルを作成するディレクトリから既定の Ace を継承します。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを同じディレクトリにコピーします。|[方法: Visual Basic での同じディレクトリにファイルのコピーを作成します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|別のディレクトリにファイルをコピーします。|[方法: Visual Basic での別のディレクトリにファイルのコピーを作成します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 この例は、ファイルをコピー`Test.txt`ディレクトリに`TestFiles2`既存のファイルを上書きすることがなく。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 この例は、ファイルをコピー`Test.txt`ディレクトリに`TestFiles2`その名前を変更および`NewFile.txt`します。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">移動先にファイルが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="static member CopyFile : string * string * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイル。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所。</param>
        <param name="overwrite">既存のファイルを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>ファイルを新しい場所にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` (アクセス制御エントリ) の Ace は保持されません。 新しく作成されたファイルを作成するディレクトリから既定の Ace を継承します。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを同じディレクトリにコピーします。|[方法: Visual Basic での同じディレクトリにファイルのコピーを作成します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|別のディレクトリにファイルをコピーします。|[方法: Visual Basic での別のディレクトリにファイルのコピーを作成します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 この例は、ファイルをコピー`Test.txt`ディレクトリに`TestFiles2`既存のファイルを上書きすることがなく。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 この例は、ファイルをコピー`Test.txt`ディレクトリに`TestFiles2`その名前を変更および`NewFile.txt`します。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">移動先にファイルが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CopyFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイル。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">操作中にユーザーが **[キャンセル]** をクリックした場合の処理を指定します。 既定値は <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> です。</param>
        <summary>ファイルを新しい場所にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` (アクセス制御エントリ) の Ace は保持されません。 新しく作成されたファイルを作成するディレクトリから既定の Ace を継承します。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを同じディレクトリにコピーします。|[方法: Visual Basic での同じディレクトリにファイルのコピーを作成します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|別のディレクトリにファイルをコピーします。|[方法: Visual Basic での別のディレクトリにファイルのコピーを作成します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 この例は、ファイルをコピー`Test.txt`ディレクトリに`TestFiles2`既存のファイルを上書きすることがなく。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 この例は、ファイルをコピー`Test.txt`ディレクトリに`TestFiles2`その名前を変更および`NewFile.txt`します。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> にパス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> または <paramref name="sourceFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">移動先にファイルが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="UICancelOption" /> が <see langword="ThrowException" /> に設定されている場合にユーザーが操作を取り消したか、不特定の I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static void CreateDirectory (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CreateDirectory(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateDirectory (directory As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateDirectory(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="static member CreateDirectory : string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">ディレクトリの名前および場所。</param>
        <summary>ディレクトリを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリが既にある場合、例外はスローされません。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CreateDirectory`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ディレクトリの作成|[方法: Visual Basic でディレクトリを作成します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
  
   
  
## Examples  
 この例は、ディレクトリを作成`NewDirectory`の`C:\Documents and Settings\All Users\Documents`します。  
  
 [!code-vb[VbVbcnMyFileSystem#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ディレクトリ名が不正な場合。 たとえば、無効な文字が含まれているか、空白のみであることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">ディレクトリ名が長すぎます。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (":") だけが指定されている場合 </exception>
        <exception cref="T:System.IO.IOException">作成するディレクトリの親ディレクトリが読み取り専用です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーがディレクトリを作成するためのアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="M:System.IO.Directory.CreateDirectory(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDirectory">
      <MemberSignature Language="C#" Value="public static string CurrentDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string CurrentDirectory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CurrentDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDirectory : string with get, set" Usage="Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のディレクトリを取得または設定します。</summary>
        <value>ファイル I/O 操作の現在のディレクトリ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CurrentDirectory` システム全体の環境変数です。  
  
   
  
## Examples  
 この例では、現在のディレクトリを取得し、メッセージ ボックスに表示されます。  
  
 [!code-vb[VbVbcnMyFileSystem#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#18)]  
  
 この例では、現在のディレクトリを設定`C:\TestDirectory`します。  
  
 [!code-vb[VbVbcnMyFileSystem#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">パスが無効です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリを削除します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteDirectory (directory As String, onDirectoryNotEmpty As DeleteDirectoryOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="F#" Value="static member DeleteDirectory : string * Microsoft.VisualBasic.FileIO.DeleteDirectoryOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory (directory, onDirectoryNotEmpty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="onDirectoryNotEmpty" Type="Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Parameters>
      <Docs>
        <param name="directory">削除するディレクトリ。</param>
        <param name="onDirectoryNotEmpty">削除対象のディレクトリ内にファイルまたはディレクトリが存在する場合の処理を指定します。 既定値は <see langword="DeleteDirectoryOption.DeleteAllContents" /> です。</param>
        <summary>ディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 例では、ディレクトリを削除します。`OldDirectory`が空の場合のみです。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 この例では、ディレクトリを削除します。`OldDirectory`とそのすべての内容。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 この例では、ディレクトリを削除します。`OldDirectory`すべて、その内容の確認、削除の確認をユーザーがに内容を送信しないと、**ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 この例では、ディレクトリを削除します。`OldDirectory`とに送信する、その内容をすべて、**ごみ箱**、は、操作の進行状況を表示しません。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが長さ 0 の文字列であるか、形式に誤りがあるか、空白だけが含まれているか、または無効な文字 (ワイルドカード文字を含む) が含まれています。 パスがデバイス パスです (\\\\.\\ で始まる)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルが指定されています。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用中です。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (:) が含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消したか、ディレクトリを削除できませんでした。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="static member DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory (directory, showUI, recycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="directory">削除するディレクトリ。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうかを指定します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <summary>ディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`と`recycle`パラメーターがユーザーの Windows サービスなど、対話型ではないアプリケーションでサポートされていません。  
  
   
  
## Examples  
 例では、ディレクトリを削除します。`OldDirectory`が空の場合のみです。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 この例では、ディレクトリを削除します。`OldDirectory`とそのすべての内容。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 この例では、ディレクトリを削除します。`OldDirectory`すべて、その内容の確認、削除の確認をユーザーがに内容を送信しないと、**ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 この例では、ディレクトリを削除します。`OldDirectory`とに送信する、その内容をすべて、**ごみ箱**、は、操作の進行状況を表示しません。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが長さ 0 の文字列であるか、形式に誤りがあるか、空白だけが含まれているか、または無効な文字 (ワイルドカード文字を含む) が含まれています。 パスがデバイス パスです (\\\\.\\ で始まる)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルが指定されています。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用中です。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (:) が含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消したか、ディレクトリを削除できませんでした。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory (directory, showUI, recycle, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="directory">削除するディレクトリ。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうかを指定します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <param name="onUserCancel">ユーザーが **[キャンセル]** をクリックした場合に例外をスローするかどうかを指定します。</param>
        <summary>ディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`、 `recycle`、および`onUserCancel`パラメーターがユーザーの Windows サービスなど、対話型ではないアプリケーションでサポートされていません。  
  
   
  
## Examples  
 例では、ディレクトリを削除します。`OldDirectory`が空の場合のみです。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 この例では、ディレクトリを削除します。`OldDirectory`とそのすべての内容。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 この例では、ディレクトリを削除します。`OldDirectory`すべて、その内容の確認、削除の確認をユーザーがに内容を送信しないと、**ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 この例では、ディレクトリを削除します。`OldDirectory`とに送信する、その内容をすべて、**ごみ箱**、は、操作の進行状況を表示しません。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが長さ 0 の文字列であるか、形式に誤りがあるか、空白だけが含まれているか、または無効な文字 (ワイルドカード文字を含む) が含まれています。 パスがデバイス パスです (\\\\.\\ で始まる)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルが指定されています。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用中です。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名にコロン (:) が含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消したか、ディレクトリを削除できませんでした。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルを削除します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public static void DeleteFile (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteFile(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteFile (file As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteFile(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member DeleteFile : string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">削除対象のファイルの名前とパス。</param>
        <summary>ファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.DeleteFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを削除するには|[方法: Visual Basic でファイルを削除](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 この例は、ファイルを削除します。`Test.txt`します。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 この例は、ファイルを削除します。`Test.txt`でき、ユーザーがファイルを削除するかを確認します。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 この例は、ファイルを削除します。`Test.txt`に送信し、**ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さ 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、ファイルを指定する必要がある場所の末尾にスラッシュが付いているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.IOException">ファイルが使用中です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーがファイルの削除に必要なアクセス許可を保持していないか、ファイルが読み取り専用です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public static void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="static member DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile (file, showUI, recycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="file">削除対象のファイルの名前とパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうか。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <summary>ファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`と`recycle`パラメーターがユーザーの Windows サービスなど、対話型ではないアプリケーションでサポートされていません。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.DeleteFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを削除するには|[方法: Visual Basic でファイルを削除](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 この例は、ファイルを削除します。`Test.txt`します。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 この例は、ファイルを削除します。`Test.txt`でき、ユーザーがファイルを削除するかを確認します。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 この例は、ファイルを削除します。`Test.txt`に送信し、**ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さ 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、ファイルを指定する必要がある場所の末尾にスラッシュが付いているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.IOException">ファイルが使用中です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーがファイルの削除に必要なアクセス許可を保持していないか、ファイルが読み取り専用です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public static void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile (file, showUI, recycle, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="file">削除対象のファイルの名前とパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除したファイルを **[ごみ箱]** に送るかどうか。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <param name="onUserCancel">ユーザーによって操作が取り消された場合に、例外をスローするかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
        <summary>ファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`、 `recycle`、および`onUserCancel`パラメーターがユーザーの Windows サービスなど、対話型ではないアプリケーションでサポートされていません。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.DeleteFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを削除するには|[方法: Visual Basic でファイルを削除](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 この例は、ファイルを削除します。`Test.txt`します。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 この例は、ファイルを削除します。`Test.txt`でき、ユーザーがファイルを削除するかを確認します。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 この例は、ファイルを削除します。`Test.txt`に送信し、**ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さ 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、ファイルを指定する必要がある場所の末尾にスラッシュが付いているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.IO.IOException">ファイルが使用中です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーがファイルの削除に必要なアクセス許可を保持していないか、ファイルが読み取り専用です。</exception>
        <exception cref="T:System.OperationCanceledException">ユーザーが操作を取り消し、かつ <paramref name="onUserCancel" /> が <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> に設定されています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public static bool DirectoryExists (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool DirectoryExists(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DirectoryExists (directory As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DirectoryExists(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="static member DirectoryExists : string -&gt; bool" Usage="Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">ディレクトリのパス。</param>
        <summary>指定されたディレクトリが存在する場合、<see langword="True" /> を返します。</summary>
        <returns>ディレクトリが存在する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 この例では判断かどうか、ディレクトリ`C:\backup\logs`が存在し、そのプロパティをチェックします。  
  
 [!code-vb[VbRefFile#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="Drives">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt; Drives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.DriveInfo&gt; Drives" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.FileSystem.Drives" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Drives As ReadOnlyCollection(Of DriveInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ Drives { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Drives : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.Drives" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>利用可能なすべてのドライブ名の読み取り専用コレクションを返します。</summary>
        <value>
          <see cref="T:System.IO.DriveInfo" /> オブジェクトとして使用できるすべてのドライブの読み取り専用コレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、すべての論理ドライブを返します。  
  
   
  
## Examples  
 この例では、メッセージ ボックスに、利用可能なドライブの名前を表示します。  
  
 [!code-vb[VbRefFile#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None" />
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <altmember cref="T:System.IO.DriveInfo" />
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public static bool FileExists (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool FileExists(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FileExists (file As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool FileExists(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member FileExists : string -&gt; bool" Usage="Microsoft.VisualBasic.FileIO.FileSystem.FileExists file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">ファイルの名前とパス。</param>
        <summary>指定されたファイルが存在する場合、<see langword="True" /> を返します。</summary>
        <returns>ファイルが存在する場合は <see langword="True" /> を返します。それ以外の場合は <see langword="False" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションが指定のファイルを読み取るための十分なアクセス許可を持たない場合、`FileExists`メソッドを返します。 `False`、パスの有無にかかわらず、メソッドは例外をスローしません。  
  
   
  
## Examples  
 この例は、表示するかどうか、ファイル`Check.txt`が存在し、メッセージ ボックスに情報を提供します。  
  
 [!code-vb[VbRefFile#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名がバックスラッシュ (\\) で終わっています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindInFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたテキストが格納されたファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType);" />
      <MemberSignature Language="F#" Value="static member FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles (directory, containsText, ignoreCase, searchType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <param name="containsText">検索文字列。</param>
        <param name="ignoreCase">検索時に大文字と小文字を区別する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="True" /> です。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <summary>指定されたテキストが格納されたファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定されたテキストを含んでいるファイルの名前の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.FindInFiles`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ディレクトリ固有の文字列を含むファイルを検索します。|[チュートリアル: Visual Basic によるファイルとディレクトリの操作](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 この例は、ディレクトリを検索`C:\TestDir`文字列を含むすべてのファイルの`"sample string"`で結果を表示および`ListBox1`します。  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 作業をするために、プロジェクトを含める必要があります、`ListBox`という`ListBox1`します。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">パスが有効ではありません。原因として、長さが 0 の文字列であるか、空白のみが含まれているか、無効な文字が含まれているか、デバイス パスである (先頭が <c>\\.\</c> である) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">指定されたディレクトリ パスにコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] fileWildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption, ParamArray fileWildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ fileWildcards);" />
      <MemberSignature Language="F#" Value="static member FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles (directory, containsText, ignoreCase, searchType, fileWildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="fileWildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <param name="containsText">検索文字列。</param>
        <param name="ignoreCase">検索時に大文字と小文字を区別する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="True" /> です。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <param name="fileWildcards">検索に使用するパターン。</param>
        <summary>指定されたテキストが格納されたファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定されたテキストを含んでいるファイルの名前の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.FindInFiles`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ディレクトリ固有の文字列を含むファイルを検索します。|[チュートリアル: Visual Basic によるファイルとディレクトリの操作](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 この例は、ディレクトリを検索`C:\TestDir`文字列を含むすべてのファイルの`"sample string"`で結果を表示および`ListBox1`します。  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 作業をするために、プロジェクトを含める必要があります、`ListBox`という`ListBox1`します。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">パスが有効ではありません。原因として、長さが 0 の文字列であるか、空白のみが含まれているか、無効な文字が含まれているか、デバイス パスである (先頭が <c>\\.\</c> である) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">指定されたディレクトリ パスにコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリに含まれるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">ディレクトリの名前とパス。</param>
        <summary>ディレクトリに含まれるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
        <returns>指定されたディレクトリに存在するサブディレクトリのパス名の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.GetDirectories`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|特定のパターンを持つサブディレクトリを検索|[方法: Visual Basic で特定のパターンに一致するサブディレクトリを検索](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 次の例では、すべてのディレクトリを返しますという単語を含むディレクトリ構造に`Logs`、名前にし、追加する`ListBox1`します。  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 この例が必要です、`ListBox`という`ListBox1`フォーム上。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories (directory, searchType, wildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">ディレクトリの名前とパス。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <param name="wildcards">名前の検索に使用するパターン。</param>
        <summary>ディレクトリに含まれるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
        <returns>指定されたディレクトリに存在するサブディレクトリのパス名の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `wildcards` パラメーターを使用して、特定のパターンを指定できます。 サブディレクトリの内容を検索対象に含めるには、`searchType` パラメーターを `SearchAllSubDirectories` に設定します。  
  
 指定したパターンに一致するディレクトリが見つからなかった場合は、空のコレクションが返されます。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.GetDirectories`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|特定のパターンを持つサブディレクトリを検索|[方法: Visual Basic で特定のパターンに一致するサブディレクトリを検索](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 次の例では、すべてのディレクトリを返しますという単語を含むディレクトリ構造に`Logs`、名前にし、追加する`ListBox1`します。  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 この例が必要です、`ListBox`という`ListBox1`フォーム上。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">指定したワイルドカード文字の中に、<see langword="Nothing" />、空の文字列、または空白のみが含まれています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定されたディレクトリが既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryInfo">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo GetDirectoryInfo (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.DirectoryInfo GetDirectoryInfo(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryInfo (directory As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ GetDirectoryInfo(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryInfo : string -&gt; System.IO.DirectoryInfo" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">
          <see langword="String" />。 ディレクトリのパス。</param>
        <summary>指定したパスの <see cref="T:System.IO.DirectoryInfo" /> オブジェクトを返します。</summary>
        <returns>指定されたパスの <see cref="T:System.IO.DirectoryInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリが存在しない場合、例外はスローされません、初めてまでプロパティ、<xref:System.IO.DirectoryInfo>オブジェクトにアクセスします。  
  
   
  
## Examples  
 この例の取得、<xref:System.IO.DirectoryInfo>ディレクトリ オブジェクト`C:\Documents and Settings`とディレクトリの作成時、最終アクセス時刻、および最終書き込み時刻が表示されます。  
  
 [!code-vb[VbRefFile#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ パスにコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetDriveInfo">
      <MemberSignature Language="C#" Value="public static System.IO.DriveInfo GetDriveInfo (string drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.DriveInfo GetDriveInfo(string drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDriveInfo (drive As String) As DriveInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DriveInfo ^ GetDriveInfo(System::String ^ drive);" />
      <MemberSignature Language="F#" Value="static member GetDriveInfo : string -&gt; System.IO.DriveInfo" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DriveInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="drive">確認するドライブ。</param>
        <summary>指定したドライブの <see cref="T:System.IO.DriveInfo" /> オブジェクトを返します。</summary>
        <returns>指定されたドライブの <see cref="T:System.IO.DriveInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.DriveInfo>クラスは、ドライブをモデル化され、ドライブ情報に対してクエリを実行するメソッドとプロパティを提供します。 使用<xref:System.IO.DriveInfo>どのドライブがあるし、はドライブの種類を決定します。 容量と、ドライブの空き領域を決定するプロパティをクエリすることもできます。  
  
   
  
## Examples  
 この例では取得、<xref:System.IO.DriveInfo>オブジェクト C ドライブのドライブについての情報を表示するこれを使用しています。  
  
 [!code-vb[VbRefFile#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#11)]  
  
 別のドライブの種類については、次を参照してください。<xref:System.IO.DriveType>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="drive" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.IO.DriveInfo" />
        <altmember cref="T:System.IO.DriveType" />
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public static System.IO.FileInfo GetFileInfo (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.FileInfo GetFileInfo(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileInfo (file As String) As FileInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileInfo ^ GetFileInfo(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member GetFileInfo : string -&gt; System.IO.FileInfo" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">ファイルの名前とパス。</param>
        <summary>指定したファイルの <see cref="T:System.IO.FileInfo" /> オブジェクトを返します。</summary>
        <returns>指定されたファイルの <see cref="T:System.IO.FileInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ファイルが存在しない; 場合に、例外がスローされません。代わりに、スローされる初めて、オブジェクトのプロパティにアクセスします。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.GetFileInfo`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルの名前とパスを決定します。|[方法: Visual Basic でファイル パスを解析](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 この例では取得、<xref:System.IO.FileInfo?displayProperty=nameWithType>オブジェクト ファイルの`MyLogFile.log`ファイルの完全な名前、最終アクセス時刻、および長さを報告するために使用するとします。  
  
 [!code-vb[VbRefFile#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パス名が不適切である場合。 たとえば、無効な文字が含まれている場合や、空白のみの場合などがあります。 ファイル名の末尾にスラッシュ記号が付いています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.NotSupportedException">パス文字列の途中にコロンが含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスが長すぎます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">当該ファイルに対して、ユーザーがアクセス制御リスト (ACL: access control list) のアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.IO.FileInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリ内のファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetFiles directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <summary>ディレクトリ内のファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定されたディレクトリから取得されたファイル名の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.GetFiles`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ディレクトリ内のファイルのコレクションを取得します。|[方法: Visual Basic でディレクトリ内のファイルのコレクションを取得します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|ディレクトリにファイルを特定のパターンを検索します。|[方法: Visual Basic で特定のパターンを持つファイルを検索](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 次の例では、ディレクトリ内のすべてのファイルが返され、`ListBox1` に追加されます。  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 この例が必要です、`ListBox`という`ListBox1`フォーム上。  
  
 この例は、拡張機能を使用してディレクトリ内のすべてのファイルを返します`.txt`に追加します`ListBox1`します。  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 この例が必要です、`ListBox`という`ListBox1`フォーム上。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">検索対象のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="directory" /> が既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetFiles (directory, searchType, wildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <param name="wildcards">検索に使用するパターン。</param>
        <summary>ディレクトリ内のファイル名を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定されたディレクトリから取得されたファイル名の読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.GetFiles`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ディレクトリ内のファイルのコレクションを取得します。|[方法: Visual Basic でディレクトリ内のファイルのコレクションを取得します。](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|ディレクトリにファイルを特定のパターンを検索します。|[方法: Visual Basic で特定のパターンを持つファイルを検索](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 次の例では、ディレクトリ内のすべてのファイルが返され、`ListBox1` に追加されます。  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 この例が必要です、`ListBox`という`ListBox1`フォーム上。  
  
 この例は、拡張機能を使用してディレクトリ内のすべてのファイルを返します`.txt`に追加します`ListBox1`します。  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 この例が必要です、`ListBox`という`ListBox1`フォーム上。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">検索対象のディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="directory" /> が既存のファイルを指しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetName : string -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">必須。 解析対象のパス。 <see langword="String" />。</param>
        <summary>指定されたパスからファイル名を解析し、取り出します。</summary>
        <returns>指定されたパスのファイル名部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、文字列操作です。`FileSystem`は説明しません。  
  
 `GetName`メソッドは、パスの末尾にスラッシュ記号を無視します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.GetFileName`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイル パスを解析します。|[方法: Visual Basic でファイル パスを解析](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 次の例では、ファイルのパスを解析し、ファイルの名前を返します。  
  
 [!code-vb[VbVbcnMyFileSystem#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#21)]  
  
 パスを置き換える`C:\Testdirectory\Testfile`を解析するパスを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParentPath">
      <MemberSignature Language="C#" Value="public static string GetParentPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetParentPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParentPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetParentPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetParentPath : string -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">確認するパス。</param>
        <summary>指定されたパスの親パスを返します。</summary>
        <returns>指定されたパスの親パス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、文字列操作です。ファイル システムはチェックされません。  
  
   
  
## Examples  
 この例では、親のパスを取得します。`C:\Backups\Tmp\Test`します。  
  
 [!code-vb[VbRefFile#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスがルート パスであるため、親パスが存在しません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public static string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempFileName();" />
      <MemberSignature Language="F#" Value="static member GetTempFileName : unit -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一意な名前を持つ 0 バイトの一時ファイルをディスク上に作成し、そのファイルへの完全パスを返します。</summary>
        <returns>一時ファイルの完全パスを保持する <see langword="String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、一時ファイルを作成できます。  
  
   
  
## Examples  
 この例では、一時ファイルを作成し、そのパスを返します。  
  
 [!code-vb[VbVbcnMyFileSystem#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリの場所を移動します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="static member MoveDirectory : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
        <summary>ディレクトリの場所を移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリが存在しないディレクトリ内を移動しようとすると、対象になる構造が作成されます。  
  
   
  
## Examples  
 この例の移動`Directory1`内`Directory2`します。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例の移動`Directory1`内で`Directory2`、既に存在する場合は、ディレクトリを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">移動先がルート ディレクトリであるか、移動元と移動先のパスが同じです。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="static member MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>ディレクトリの場所を移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリが存在しないディレクトリ内を移動しようとすると、対象になる構造が作成されます。  
  
   
  
## Examples  
 この例の移動`Directory1`内`Directory2`します。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例の移動`Directory1`内で`Directory2`、既に存在する場合は、ディレクトリを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ターゲット ディレクトリが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="static member MoveDirectory : string * string * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
        <param name="overwrite">既存のディレクトリを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>ディレクトリの場所を移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリが存在しないディレクトリ内を移動しようとすると、対象になる構造が作成されます。  
  
   
  
## Examples  
 この例の移動`Directory1`内`Directory2`します。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例の移動`Directory1`内で`Directory2`、既に存在する場合は、ディレクトリを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ターゲット ディレクトリが既に存在し、<paramref name="overwrite" /> が <see langword="False" /> に設定されています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動するディレクトリのパス。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先となるディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">ユーザーによって操作が取り消された場合に、例外をスローするかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
        <summary>ディレクトリの場所を移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディレクトリが存在しないディレクトリ内を移動しようとすると、対象になる構造が作成されます。  
  
   
  
## Examples  
 この例の移動`Directory1`内`Directory2`します。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例の移動`Directory1`内で`Directory2`、既に存在する場合は、ディレクトリを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、またはパスがデバイス パスである (\\\\.\\ で始まっている) ことが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="onUserCancel" /> が <see langword="ThrowException" /> に設定されており、ファイルのサブディレクトリをコピーできません。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="onUserCancel" /> が <see langword="ThrowException" /> に設定されている場合にユーザーが操作を取り消したか、操作を完了できませんでした。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作が巡回しています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルを新しい場所に移動します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="static member MoveFile : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveFile (sourceFileName, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパス。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲット構造体が存在しない場合は作成されます。  
  
 `MoveFile`メソッドには、同じボリューム内のファイルを移動する場合にのみ (アクセス制御エントリ) の Ace が保持されます。 これには、継承された Ace には、直接の Ace (直接 Ace が優先継承された Ace) を移動したときになりますが含まれます。 ボリューム間でファイルを移動すると場合の Ace はコピーされません。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.MoveFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを移動します。|[方法: Visual Basic でファイルを移動](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 この例は、ファイルを移動`Test.txt`から`TestDir1`に`TestDir2`します。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例は、ファイルを移動`Test.txt`から`TestDir1`に`TestDir2`その名前を変更および`Test2.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="static member MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveFile (sourceFileName, destinationFileName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパス。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲット構造体が存在しない場合は作成されます。  
  
 `MoveFile`メソッドには、同じボリューム内のファイルを移動する場合にのみ (アクセス制御エントリ) の Ace が保持されます。 これには、継承された Ace には、直接の Ace (直接 Ace が優先継承された Ace) を移動したときになりますが含まれます。 ボリューム間でファイルを移動すると場合の Ace はコピーされません。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.MoveFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを移動します。|[方法: Visual Basic でファイルを移動](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 この例は、ファイルを移動`Test.txt`から`TestDir1`に`TestDir2`します。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例は、ファイルを移動`Test.txt`から`TestDir1`に`TestDir2`その名前を変更および`Test2.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="static member MoveFile : string * string * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパス。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <param name="overwrite">既存のファイルを上書きする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲット構造体が存在しない場合は作成されます。  
  
 `MoveFile`メソッドには、同じボリューム内のファイルを移動する場合にのみ (アクセス制御エントリ) の Ace が保持されます。 これには、継承された Ace には、直接の Ace (直接 Ace が優先継承された Ace) を移動したときになりますが含まれます。 ボリューム間でファイルを移動すると場合の Ace はコピーされません。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.MoveFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを移動します。|[方法: Visual Basic でファイルを移動](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 この例は、ファイルを移動`Test.txt`から`TestDir1`に`TestDir2`します。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例は、ファイルを移動`Test.txt`から`TestDir1`に`TestDir2`その名前を変更および`Test2.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="static member MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.MoveFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパス。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">ユーザーによって操作が取り消された場合に、例外をスローするかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲット構造体が存在しない場合は作成されます。  
  
 `MoveFile`メソッドには、同じボリューム内のファイルを移動する場合にのみ (アクセス制御エントリ) の Ace が保持されます。 これには、継承された Ace には、直接の Ace (直接 Ace が優先継承された Ace) を移動したときになりますが含まれます。 ボリューム間でファイルを移動すると場合の Ace はコピーされません。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.MoveFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを移動します。|[方法: Visual Basic でファイルを移動](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 この例は、ファイルを移動`Test.txt`から`TestDir1`に`TestDir2`します。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例は、ファイルを移動`Test.txt`から`TestDir1`に`TestDir2`その名前を変更および`Test2.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルが有効でないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="onUserCancel" /> が <see langword="ThrowException" /> に設定されている場合に、ユーザーが操作を取り消したか、不特定の I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">すべての環境変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリ変数へのアクセスを制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">ユーザー インターフェイスと、クリップボードに関連するアクセス許可を制御します。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFieldParser">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenTextFieldParser (file As String) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member OpenTextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">
          <see langword="TextFieldParser" /> で開くファイル。</param>
        <summary>
          <see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
        <returns>指定されたファイルを読み取るための <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.OpenTextFieldParser`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|区切りテキスト ファイルからの読み取り|[方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|固定幅テキスト ファイルからの読み取り|[方法: Visual Basic で固定幅テキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|複数の書式を持つテキスト ファイルからの読み取り|[方法: Visual Basic での複数の書式を持つテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 この例を開いて、`TextFieldParser.reader`オブジェクトからの読み取りを使用して`C:\TestFolder1\Test1.txt`します。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定の書式を使用して行を解析できません。 例外の原因となった行が例外メッセージで報告され、その行に含まれているテキストには <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティが代入されます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenTextFieldParser (file As String, ParamArray fieldWidths As Integer()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="static member OpenTextFieldParser : string * int[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser (file, fieldWidths)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">
          <see langword="TextFieldParser" /> で開くファイル。</param>
        <param name="fieldWidths">フィールドの幅。</param>
        <summary>
          <see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
        <returns>指定されたファイルを読み取るための <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.OpenTextFieldParser`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|区切りテキスト ファイルからの読み取り|[方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|固定幅テキスト ファイルからの読み取り|[方法: Visual Basic で固定幅テキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|複数の書式を持つテキスト ファイルからの読み取り|[方法: Visual Basic での複数の書式を持つテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 この例を開いて、`TextFieldParser.reader`オブジェクトからの読み取りを使用して`C:\TestFolder1\Test1.txt`します。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定の書式を使用して行を解析できません。 例外の原因となった行が例外メッセージで報告され、その行に含まれているテキストには <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティが代入されます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenTextFieldParser (file As String, ParamArray delimiters As String()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="static member OpenTextFieldParser : string * string[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser (file, delimiters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">
          <see langword="TextFieldParser" /> で開くファイル。</param>
        <param name="delimiters">フィールドの区切り記号。</param>
        <summary>
          <see langword="OpenTextFieldParser" /> メソッドを使用すると、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを作成できます。このオブジェクトは、ログなどの構造化されたテキスト ファイルを容易かつ効率的に解析できるようにします。 <see langword="TextFieldParser" /> オブジェクトは、区切り形式および固定幅の、どちらのファイルの読み込みにも使用できます。</summary>
        <returns>指定されたファイルを読み取るための <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.OpenTextFieldParser`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|区切りテキスト ファイルからの読み取り|[方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|固定幅テキスト ファイルからの読み取り|[方法: Visual Basic で固定幅テキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|複数の書式を持つテキスト ファイルからの読み取り|[方法: Visual Basic での複数の書式を持つテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 この例を開いて、`TextFieldParser.reader`オブジェクトからの読み取りを使用して`C:\TestFolder1\Test1.txt`します。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定の書式を使用して行を解析できません。 例外の原因となった行が例外メッセージで報告され、その行に含まれているテキストには <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティが代入されます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">コードに適用されるセキュリティのアクセス許可のセットについて説明します。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileReader">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.StreamReader" /> オブジェクトを開いてファイルから読み取ります。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenTextFileReader (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamReader OpenTextFileReader(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenTextFileReader (file As String) As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member OpenTextFileReader : string -&gt; System.IO.StreamReader" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイル。</param>
        <summary>
          <see cref="T:System.IO.StreamReader" /> オブジェクトを開いてファイルから読み取ります。</summary>
        <returns>ファイルから読み取る <see cref="T:System.IO.StreamReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 テキスト ファイルだけを読み取ることができます、<xref:System.IO.StreamReader>します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.OpenTextFileReader`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを開く、 <xref:System.IO.StreamReader>|[方法: StreamReader (Visual Basic) 使用してファイルからテキストを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 この例は、ファイルを開き`Testfile.txt`、そこから行を読み取り、および、内の行が表示されます、`MessageBox`します。  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名がバックスラッシュ (\\) で終わっています。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定されたファイルが見つかりません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがファイルの読み取りに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamReader OpenTextFileReader(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="static member OpenTextFileReader : string * System.Text.Encoding -&gt; System.IO.StreamReader" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader (file, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイル。</param>
        <param name="encoding">ファイルの内容に使用されるエンコーディング。 既定値は ASCII です。</param>
        <summary>
          <see cref="T:System.IO.StreamReader" /> オブジェクトを開いてファイルから読み取ります。</summary>
        <returns>ファイルから読み取る <see cref="T:System.IO.StreamReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 テキスト ファイルだけを読み取ることができます、<xref:System.IO.StreamReader>します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.OpenTextFileReader`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルを開く、 <xref:System.IO.StreamReader>|[方法: StreamReader (Visual Basic) 使用してファイルからテキストを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 この例は、ファイルを開き`Testfile.txt`、そこから行を読み取り、および、内の行が表示されます、`MessageBox`します。  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名がバックスラッシュ (\\) で終わっています。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定されたファイルが見つかりません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがファイルの読み取りに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileWriter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.StreamWriter" /> オブジェクトを開いて指定されたファイルに書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenTextFileWriter (string file, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamWriter OpenTextFileWriter(string file, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenTextFileWriter (file As String, append As Boolean) As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append);" />
      <MemberSignature Language="F#" Value="static member OpenTextFileWriter : string * bool -&gt; System.IO.StreamWriter" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter (file, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">書き込み先のファイル。</param>
        <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>
          <see cref="T:System.IO.StreamWriter" /> オブジェクトを開いて指定されたファイルに書き込みます。</summary>
        <returns>指定したファイルに書き込む <see cref="T:System.IO.StreamWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OpenTextFileWriter`メソッドとファイルのストリームを初期化しますを開きを返します、<xref:System.IO.StreamWriter>そのストリーム オブジェクト。 必要な数だけストリームに書き込みできが完了したら、閉じます。  
  
> [!NOTE]
>  呼び出す必要があります、<xref:System.IO.StreamWriter.Close%2A>メソッドを<xref:System.IO.StreamWriter>を基になるストリームにすべてのデータが正しく書き込まれることを確認するオブジェクト。  
  
 ファイルにいくつかの文字列だけを記述する場合がありますを使用する方が簡単、<xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A>メソッド。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.OpenTextFileWriter`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルにテキストを記述します。 `StreamWriter`|[方法: Visual Basic での StreamWriter を持つファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 この例が表示されます、<xref:System.IO.StreamWriter>で、`My.Computer.FileSystem.OpenTextFileWriter`メソッドを持つテキスト ファイルに文字列を書き込むを使用して、`WriteLine`メソッドの`StreamWriter`クラス。  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名の末尾にスラッシュが付いています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamWriter OpenTextFileWriter(string file, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="static member OpenTextFileWriter : string * bool * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter (file, append, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">書き込み先のファイル。</param>
        <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <param name="encoding">ファイルへの書き込み時に使用するエンコーディング。 既定値は ASCII です。</param>
        <summary>
          <see cref="T:System.IO.StreamWriter" /> を開いて指定されたファイルに書き込みます。</summary>
        <returns>指定したファイルに書き込む <see cref="T:System.IO.StreamWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OpenTextFileWriter`メソッドとファイルのストリームを初期化しますを開きを返します、<xref:System.IO.StreamWriter>そのストリーム オブジェクト。 必要な数だけストリームに書き込みできが完了したら、閉じます。  
  
> [!NOTE]
>  呼び出す必要があります、<xref:System.IO.StreamWriter.Close%2A>メソッドを<xref:System.IO.StreamWriter>を基になるストリームにすべてのデータが正しく書き込まれることを確認するオブジェクト。  
  
 ファイルにいくつかの文字列だけを記述する場合がありますを使用する方が簡単、<xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A>メソッド。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.OpenTextFileWriter`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイルにテキストを記述します。 `StreamWriter`|[方法: Visual Basic での StreamWriter を持つファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 この例が表示されます、<xref:System.IO.StreamWriter>で、`My.Computer.FileSystem.OpenTextFileWriter`メソッドを持つテキスト ファイルに文字列を書き込むを使用して、`WriteLine`メソッドの`StreamWriter`クラス。  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名の末尾にスラッシュが付いています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public static byte[] ReadAllBytes (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int8[] ReadAllBytes(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadAllBytes (file As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ ReadAllBytes(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member ReadAllBytes : string -&gt; byte[]" Usage="Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイル。</param>
        <summary>テキスト ファイルの内容をバイト配列として返します。</summary>
        <returns>ファイルの内容を保持する <see langword="Byte" /> 配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllBytes`のメソッド、`My.Computer.FileSystem`オブジェクトは、バイナリ ファイルから読み取ることができます。 ファイルの内容は、バイト配列として返されます。  
  
 ファイル名からファイルの内容を判断しないでください。 たとえば、Form1.vb というファイルは Visual Basic のソース ファイルではない可能性もあります。 アプリケーションでデータを使用する前に、入力をすべて検証してください。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.ReadAllBytes`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|バイナリ ファイルからの読み取り|[方法: Visual Basic でバイナリ ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
  
   
  
## Examples  
 この例で、ファイルから読み取ります `C:/Documents and Settings/selfportrait.jpg.`  
  
 [!code-vb[VbVbcnMyFileSystem#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>テキスト ファイルの内容を <see langword="String" /> として返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public static string ReadAllText (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ReadAllText(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadAllText (file As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadAllText(System::String ^ file);" />
      <MemberSignature Language="F#" Value="static member ReadAllText : string -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイルの名前とパス。</param>
        <summary>テキスト ファイルの内容を <see langword="String" /> として返します。</summary>
        <returns>ファイルの内容を保持する <see langword="String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` オブジェクトの `My.Computer.FileSystem` メソッドを使用すると、テキスト ファイルを読み取ることができます。 ファイルの内容は、文字列として返されます。  
  
 ファイルのエンコーディングを指定できるかどうか、ファイルの内容が ASCII または utf-8 などのエンコード方式でを指定します。 拡張文字を含むファイルから読み取る場合の別のオーバー ロードを使用してファイルのエンコードを指定する必要があります、<xref:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText%2A>メソッド。  
  
 ファイル名からファイルの内容を判断しないでください。 たとえば、Form1.vb というファイルは Visual Basic のソース ファイルではない可能性もあります。 アプリケーションでデータを使用する前に、入力をすべて検証してください。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.ReadAllText`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|テキスト ファイルからの読み取り|[方法: Visual Basic でテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 この例の内容を読み取り`Test.txt`を文字列にし、メッセージ ボックスに表示します。  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 この例は、ASCII ファイルの内容を読み取り`Test.txt`を文字列にし、メッセージ ボックスに表示します。  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public static string ReadAllText (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ReadAllText(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadAllText(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="static member ReadAllText : string * System.Text.Encoding -&gt; string" Usage="Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText (file, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイルの名前とパス。</param>
        <param name="encoding">ファイルの読み取り時に使用する文字エンコーディング。 既定値は、UTF-8 です。</param>
        <summary>テキスト ファイルの内容を <see langword="String" /> として返します。</summary>
        <returns>ファイルの内容を保持する <see langword="String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` オブジェクトの `My.Computer.FileSystem` メソッドを使用すると、テキスト ファイルを読み取ることができます。 ファイルの内容は、文字列として返されます。  
  
 ファイルのエンコーディングを指定できるかどうか、ファイルの内容が ASCII または utf-8 などのエンコード方式でを指定します。 拡張文字を含むファイルから読み取る場合は、ファイルのエンコーディングを指定する必要があります。  
  
 ファイル名からファイルの内容を判断しないでください。 たとえば、Form1.vb というファイルは Visual Basic のソース ファイルではない可能性もあります。 アプリケーションでデータを使用する前に、入力をすべて検証してください。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.ReadAllText`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|テキスト ファイルからの読み取り|[方法: Visual Basic でテキスト ファイルを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 この例の内容を読み取り`Test.txt`を文字列にし、メッセージ ボックスに表示します。  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 この例は、ASCII ファイルの内容を読み取り`Test.txt`を文字列にし、メッセージ ボックスに表示します。  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
      </Docs>
    </Member>
    <Member MemberName="RenameDirectory">
      <MemberSignature Language="C#" Value="public static void RenameDirectory (string directory, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RenameDirectory(string directory, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RenameDirectory (directory As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RenameDirectory(System::String ^ directory, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="static member RenameDirectory : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory (directory, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">名前を変更するディレクトリのパスおよび名前。</param>
        <param name="newName">ディレクトリの新しい名前。</param>
        <summary>ディレクトリ名を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ディレクトリを移動には使用できません。使用して、`MoveDirectory`メソッドを移動し、ディレクトリの名前を変更します。  
  
   
  
## Examples  
 この例の名前を変更、`Test`ディレクトリを`SecondTest`します。  
  
 [!code-vb[VbVbcnMyFileSystem#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="newName" /> にパス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> は <see langword="Nothing" />です。  または、<paramref name="newName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="newName" /> で指定したのと同じ名前のファイルまたはディレクトリが既に存在します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RenameFile">
      <MemberSignature Language="C#" Value="public static void RenameFile (string file, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RenameFile(string file, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RenameFile (file As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RenameFile(System::String ^ file, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="static member RenameFile : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.RenameFile (file, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">名前を変更するファイル。</param>
        <param name="newName">新しいファイル名。</param>
        <summary>ファイル名を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ファイルを移動する目的には使用できません。ファイルを移動して名前を変更するには、<xref:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile%2A> メソッドを使用してください。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.RenameFile`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|ファイル名の変更します。|[方法: Visual Basic でファイルの名前を変更](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
  
   
  
## Examples  
 この例のファイルを変更する`Test.txt`に`SecondTest.txt`します。  
  
 [!code-vb[VbVbcnMyFileSystem#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#1)]  
  
 変更"`C:\Test.txt`"名前を変更するファイルのパスとファイル名にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="newName" /> にパス情報が含まれているか、末尾にバックスラッシュ (\\) が付いています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" />です。  または、<paramref name="newName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="newName" /> で指定したのと同じ名前のファイルまたはディレクトリが既に存在します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public static void WriteAllBytes (string file, byte[] data, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteAllBytes(string file, unsigned int8[] data, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteAllBytes (file As String, data As Byte(), append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllBytes(System::String ^ file, cli::array &lt;System::Byte&gt; ^ data, bool append);" />
      <MemberSignature Language="F#" Value="static member WriteAllBytes : string * byte[] * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes (file, data, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">書き込み先のファイルのパスと名前。</param>
        <param name="data">ファイルに書き込むデータ。</param>
        <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。 既定値は <see langword="False" /> です。</param>
        <summary>バイナリ ファイルにデータを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ファイル名を除く、指定したパスが有効でない場合、<xref:System.IO.DirectoryNotFoundException>例外がスローされます。 パスが有効では、ファイルが存在しない場合、ファイルが作成されます。  
  
> [!NOTE]
>  `WriteAllBytes`メソッド ファイルを開き、それを書き込みます、それを閉じます。 使用するコード、`WriteAllBytes`メソッドにコードを使用するよりも簡単ですが、<xref:System.IO.BinaryWriter>オブジェクト。 ただし、ループを使用してファイルにデータを追加する場合、<xref:System.IO.BinaryWriter>オブジェクトは、ファイルの開閉を 1 回のみがあるため、パフォーマンスが向上を提供できます。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.WriteAllBytes`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|バイナリ ファイルへの書き込み|[方法: Visual Basic でバイナリ ファイルに書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
  
   
  
## Examples  
 この例は、データの配列を追加します。`CustomerData`ファイル`CollectedData`します。  
  
 [!code-vb[VbVbcnMyFileSystem#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルにテキストを書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public static void WriteAllText (string file, string text, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteAllText(string file, string text, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteAllText (file As String, text As String, append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllText(System::String ^ file, System::String ^ text, bool append);" />
      <MemberSignature Language="F#" Value="static member WriteAllText : string * string * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText (file, text, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">書き込み先のファイル。</param>
        <param name="text">ファイルに書き込まれるテキスト。</param>
        <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。</param>
        <summary>ファイルにテキストを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utf-8 エンコーディングは、ファイルへの書き込みに使用されます。 別のエンコードを指定するには、異なるオーバー ロードを使用、<xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A>メソッド。  
  
 指定したファイルが存在しない場合は、作成されます。  
  
 指定したエンコーディングが一致しない場合、ファイルの既存のエンコーディングを指定したコーディングは無視されます。  
  
> [!NOTE]
>  `WriteAllText`メソッド ファイルを開き、それを書き込みます、それを閉じます。 使用するコード、`WriteAllText`メソッドにコードを使用するよりも簡単ですが、<xref:System.IO.StreamWriter>オブジェクト。 ただし、ループを使用してファイルに文字列を追加する場合、<xref:System.IO.StreamWriter>を開き、1 回、ファイルを閉じるだけで済むために、オブジェクトはパフォーマンスの向上を提供できます。 詳細については、<xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter%2A> メソッドを参照してください。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.WriteAllText`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|テキストのファイルへの書き込み|[方法: Visual Basic でファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|ファイルへのテキストの追加|[方法: Visual Basic でテキスト ファイルに追記するには](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 この例は、行を書き込みます`"This is new text to be added."`ファイル`Test.txt`ファイルの既存のテキストを上書きします。  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 この例で、ファイルの名前、`Documents and Settings`フォルダー `FileList.txt`、読みやすいように各間返す改行を挿入します。  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText" />
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public static void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteAllText(string file, string text, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllText(System::String ^ file, System::String ^ text, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="static member WriteAllText : string * string * bool * System.Text.Encoding -&gt; unit" Usage="Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText (file, text, append, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">書き込み先のファイル。</param>
        <param name="text">ファイルに書き込まれるテキスト。</param>
        <param name="append">ファイルの内容を追記する場合は <see langword="True" />。ファイルの内容を上書きする場合は <see langword="False" />。</param>
        <param name="encoding">ファイルへの書き込み時に使用するエンコーディングを指定します。</param>
        <summary>ファイルにテキストを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したファイルが存在しない場合は、作成されます。  
  
 指定したエンコーディングが一致しない場合、ファイルの既存のエンコーディングを指定したコーディングは無視されます。  
  
> [!NOTE]
>  `WriteAllText`メソッド ファイルを開き、それを書き込みます、それを閉じます。 使用するコード、`WriteAllText`メソッドにコードを使用するよりも簡単ですが、<xref:System.IO.StreamWriter>オブジェクト。 ただし、ループを使用してファイルに文字列を追加する場合、<xref:System.IO.StreamWriter>を開き、1 回、ファイルを閉じるだけで済むために、オブジェクトはパフォーマンスの向上を提供できます。 詳細については、<xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter%2A> メソッドを参照してください。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.WriteAllText`メソッド。  
  
|終了|解決方法については、|  
|-|-|  
|テキストのファイルへの書き込み|[方法: Visual Basic でファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|ファイルへのテキストの追加|[方法: Visual Basic でテキスト ファイルに追記するには](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 この例は、行を書き込みます`"This is new text to be added."`ファイル`Test.txt`ファイルの既存のテキストを上書きします。  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 この例で、ファイルの名前、`Documents and Settings`フォルダー `FileList.txt`、読みやすいように各間返す改行を挿入します。  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが無効です。原因として、パスが長さが 0 の文字列であるか、パスに空白しか含まれていないか、パスに無効な文字が含まれているか、パスがデバイス パスである (\\\\.\\ で始まっている) か、またはパスがスラッシュで終わっていることが考えられます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">他のプロセスがファイルを使用しているか、I/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスがシステム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイル名またはディレクトリ名にコロン (:) が含まれているか、形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むための十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーがパスを参照するのに必要なアクセス許可を保持していません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">ファイルとフォルダーにアクセスする機能を制御します。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
  </Members>
</Type>