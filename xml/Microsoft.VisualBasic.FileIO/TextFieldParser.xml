<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="251998b4c7a9190590f9c7993a8dcb43382f15e8" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56393139" /></Metadata><TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <TypeSignature Language="F#" Value="type TextFieldParser = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1403c-101">構造化テキスト ファイルの解析に使用するメソッドとプロパティを提供します。</span><span class="sxs-lookup"><span data-stu-id="1403c-101">Provides methods and properties for parsing structured text files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-102">`TextFieldParser`オブジェクトがメソッドを提供し、構造化テキスト ファイルを解析するためのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="1403c-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="1403c-103">テキスト ファイルの解析、`TextFieldParser`は、テキスト ファイルを反復処理に似ています中に、`ReadFields`テキストのフィールドを抽出する方法は、文字列の分割に似ています。</span><span class="sxs-lookup"><span data-stu-id="1403c-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="1403c-104">`TextFieldParser` 2 種類のファイルを解析することができます: 区切られた形式か固定幅。</span><span class="sxs-lookup"><span data-stu-id="1403c-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="1403c-105">いくつかのプロパティなど`Delimiters`と`HasFieldsEnclosedInQuotes`はのみ意味のある区切りファイルを使用する場合に、`FieldWidths`プロパティは、固定幅ファイルを扱う場合にのみ意味します。</span><span class="sxs-lookup"><span data-stu-id="1403c-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="1403c-106">次の表に、関連するタスクの例については、`Microsoft.VisualBasic.FileIO.TextFieldParser`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1403c-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="1403c-107">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-107">To</span></span>|<span data-ttu-id="1403c-108">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-109">区切りテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-109">Read from a delimited text file</span></span>|[<span data-ttu-id="1403c-110">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="1403c-111">固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="1403c-112">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="1403c-113">複数の書式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="1403c-114">方法: 複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-115">この例は、タブ区切りテキスト ファイルを使って解析`Bigfile`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-116">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-116">Objects (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-117">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-117">Parsing Text Files with the TextFieldParser Object</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="1403c-118">例外のトラブルシューティング。Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="1403c-118">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1403c-119"><see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1403c-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-120">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-120">Objects (Visual Basic)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1403c-121"><see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-121"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="1403c-122">解析するストリーム。</span><span class="sxs-lookup"><span data-stu-id="1403c-122">The stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="1403c-123"><see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1403c-123">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-124">新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1403c-124">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1403c-125"><paramref name="stream" /> は <see langword="Nothing" />です。</span><span class="sxs-lookup"><span data-stu-id="1403c-125"><paramref name="stream" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1403c-126"><paramref name="stream" /> から読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="1403c-126"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-127">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-127">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-128">方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-128">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-129">方法: Visual Basic で固定幅テキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-129">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-130">方法: Visual Basic で複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-130">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.TextReader -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1403c-131"><see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-131"><see cref="T:System.IO.TextReader" />.</span></span> <span data-ttu-id="1403c-132">解析する <see cref="T:System.IO.TextReader" /> ストリーム。</span><span class="sxs-lookup"><span data-stu-id="1403c-132">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="1403c-133"><see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1403c-133">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-134">新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`reader`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1403c-134">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1403c-135"><paramref name="reader" /> は <see langword="Nothing" />です。</span><span class="sxs-lookup"><span data-stu-id="1403c-135"><paramref name="reader" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-136">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-136">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-137">方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-137">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-138">方法: Visual Basic で固定幅テキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-138">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-139">方法: Visual Basic で複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-139">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="1403c-140"><see langword="String" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-140"><see langword="String" />.</span></span> <span data-ttu-id="1403c-141">解析するファイルの絶対パス。</span><span class="sxs-lookup"><span data-stu-id="1403c-141">The complete path of the file to be parsed.</span></span></param>
        <summary><span data-ttu-id="1403c-142"><see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1403c-142">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-143">新たに作成`TextFieldParser`によって指定されたファイルを解析するオブジェクト、`path`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1403c-143">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1403c-144"><paramref name="path" /> が空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="1403c-144"><paramref name="path" /> is an empty string.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-145">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-145">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-146">方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-146">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-147">方法: Visual Basic で固定幅テキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-147">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-148">方法: Visual Basic で複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-148">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1403c-149"><see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-149"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="1403c-150">解析するストリーム。</span><span class="sxs-lookup"><span data-stu-id="1403c-150">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="1403c-151"><see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-151"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="1403c-152">ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="1403c-152">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="1403c-153">既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-153">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="1403c-154"><see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1403c-154">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-155">新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1403c-155">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1403c-156">特定のカルチャ設定と一連の文字をコンパイルして、同じ文字を別のカルチャ設定を取得すると、文字は解釈されないことしがスローされる例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1403c-156">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1403c-157"><paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-157"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1403c-158"><paramref name="stream" /> から読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="1403c-158"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-159">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-159">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-160">方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-160">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-161">方法: Visual Basic で固定幅テキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-161">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-162">方法: Visual Basic で複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-162">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="1403c-163"><see langword="String" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-163"><see langword="String" />.</span></span> <span data-ttu-id="1403c-164">解析するファイルの絶対パス。</span><span class="sxs-lookup"><span data-stu-id="1403c-164">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="1403c-165"><see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-165"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="1403c-166">ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="1403c-166">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="1403c-167">既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-167">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="1403c-168"><see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1403c-168">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-169">新たに作成`TextFieldParser`によって指定されたファイルを解析するオブジェクト、`path`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1403c-169">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1403c-170">特定のカルチャ設定と一連の文字をコンパイルして、同じ文字を別のカルチャ設定を取得すると、文字は解釈されないことしがスローされる例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1403c-170">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1403c-171"><paramref name="path" /> が空の文字列であるか、<paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-171"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-172">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-172">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-173">方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-173">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-174">方法: Visual Basic で固定幅テキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-174">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-175">方法: Visual Basic で複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-175">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1403c-176"><see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-176"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="1403c-177">解析するストリーム。</span><span class="sxs-lookup"><span data-stu-id="1403c-177">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="1403c-178"><see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-178"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="1403c-179">ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="1403c-179">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="1403c-180">既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-180">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="1403c-181"><see langword="Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-181"><see langword="Boolean" />.</span></span> <span data-ttu-id="1403c-182">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="1403c-182">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="1403c-183">既定値は <see langword="True" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-183">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="1403c-184"><see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1403c-184">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-185">新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1403c-185">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="1403c-186">場合、`detectEncoding`パラメーターが`True`、このコンス トラクターは、ファイルまたはストリームの最初の 3 バイトを調べることで、エンコードの検出を試みます。</span><span class="sxs-lookup"><span data-stu-id="1403c-186">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="1403c-187">自動的に認識 utf-8、リトル エンディアン Unicode、および big endian Unicode テキスト ファイルが適切なバイト オーダー マークで始まる場合。</span><span class="sxs-lookup"><span data-stu-id="1403c-187">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="1403c-188">それ以外の場合で指定されたエンコーディング`defaultEncoding`使用されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-188">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1403c-189">特定のカルチャ設定と一連の文字をコンパイルして、同じ文字を別のカルチャ設定を取得すると、文字は解釈されないことしがスローされる例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1403c-189">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1403c-190"><paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-190"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1403c-191"><paramref name="stream" /> から読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="1403c-191"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-192">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-192">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-193">方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-193">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-194">方法: Visual Basic で固定幅テキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-194">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-195">方法: Visual Basic で複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-195">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="1403c-196"><see langword="String" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-196"><see langword="String" />.</span></span> <span data-ttu-id="1403c-197">解析するファイルの絶対パス。</span><span class="sxs-lookup"><span data-stu-id="1403c-197">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="1403c-198"><see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-198"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="1403c-199">ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="1403c-199">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="1403c-200">既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-200">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="1403c-201"><see langword="Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-201"><see langword="Boolean" />.</span></span> <span data-ttu-id="1403c-202">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="1403c-202">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="1403c-203">既定値は <see langword="True" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-203">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="1403c-204"><see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1403c-204">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-205">新たに作成`TextFieldParser`によって指定されたファイルを解析するオブジェクト、`path`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1403c-205">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="1403c-206">場合、`detectEncoding`パラメーターが`True`、このコンス トラクターは、ファイルまたはストリームの最初の 3 バイトを調べることで、エンコードの検出を試みます。</span><span class="sxs-lookup"><span data-stu-id="1403c-206">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="1403c-207">自動的に認識 utf-8、リトル エンディアン Unicode、および big endian Unicode テキスト ファイルが適切なバイト オーダー マークで始まる場合。</span><span class="sxs-lookup"><span data-stu-id="1403c-207">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="1403c-208">それ以外の場合で指定されたエンコーディング`defaultEncoding`使用されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-208">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1403c-209">特定のカルチャ設定と一連の文字をコンパイルして、同じ文字を別のカルチャ設定を取得すると、文字は解釈されないことしがスローされる例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1403c-209">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1403c-210"><paramref name="path" /> が空の文字列であるか、<paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-210"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-211">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-211">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-212">方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-212">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-213">方法: Visual Basic で固定幅テキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-213">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-214">方法: Visual Basic で複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-214">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1403c-215"><see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-215"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="1403c-216">解析するストリーム。</span><span class="sxs-lookup"><span data-stu-id="1403c-216">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="1403c-217"><see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-217"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="1403c-218">ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="1403c-218">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="1403c-219">既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-219">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="1403c-220"><see langword="Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-220"><see langword="Boolean" />.</span></span> <span data-ttu-id="1403c-221">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="1403c-221">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="1403c-222">既定値は <see langword="True" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-222">Default is <see langword="True" />.</span></span></param>
        <param name="leaveOpen"><span data-ttu-id="1403c-223"><see langword="Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-223"><see langword="Boolean" />.</span></span> <span data-ttu-id="1403c-224"><see langword="TextFieldParser" /> オブジェクトを閉じるときに、<paramref name="stream" /> を開いたままにするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="1403c-224">Indicates whether to leave <paramref name="stream" /> open when the <see langword="TextFieldParser" /> object is closed.</span></span> <span data-ttu-id="1403c-225">既定値は <see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-225">Default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="1403c-226"><see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1403c-226">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-227">新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1403c-227">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="1403c-228">場合、`detectEncoding`パラメーターが`True`、このコンス トラクターは、ファイルまたはストリームの最初の 3 バイトを調べることで、エンコードの検出を試みます。</span><span class="sxs-lookup"><span data-stu-id="1403c-228">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="1403c-229">自動的に認識 utf-8、リトル エンディアン Unicode、および big endian Unicode テキスト ファイルが適切なバイト オーダー マークで始まる場合。</span><span class="sxs-lookup"><span data-stu-id="1403c-229">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="1403c-230">それ以外の場合で指定されたエンコーディング`defaultEncoding`使用されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-230">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1403c-231">特定のカルチャ設定と一連の文字をコンパイルして、同じ文字を別のカルチャ設定を取得すると、文字は解釈されないことしがスローされる例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1403c-231">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1403c-232"><paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</span><span class="sxs-lookup"><span data-stu-id="1403c-232"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1403c-233"><paramref name="stream" /> から読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="1403c-233"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-234">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-234">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-235">方法: Visual Basic でコンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-235">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-236">方法: Visual Basic で固定幅テキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-236">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-237">方法: Visual Basic で複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-237">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="textFieldParser.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1403c-238">現在の <see langword="TextFieldParser" /> オブジェクトを閉じます。</span><span class="sxs-lookup"><span data-stu-id="1403c-238">Closes the current <see langword="TextFieldParser" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1403c-239">この例を閉じ、`TextFieldParser.FileReader`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-239">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-240">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-240">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-241">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-241">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommentTokens : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1403c-242">コメント トークンを定義します。</span><span class="sxs-lookup"><span data-stu-id="1403c-242">Defines comment tokens.</span></span> <span data-ttu-id="1403c-243">コメント トークンとは、コメント行であることを示すために、行頭に配置される文字列です。コメント トークンの配置された行は、パーサーによって無視されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-243">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span></span></summary>
        <value><span data-ttu-id="1403c-244"><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトのすべてのコメント トークンを格納する文字列配列。</span><span class="sxs-lookup"><span data-stu-id="1403c-244">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-245">これは、高度なメンバーの場合。クリックしない限り、intellisense が表示されない、**すべて**タブ。</span><span class="sxs-lookup"><span data-stu-id="1403c-245">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="1403c-246">長さ 0 のコメント トークンは無視されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-246">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1403c-247">この例では、ことを指定します、 `TextFieldParser`、`FileReader`単一引用符 (') で始まる行を無視する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1403c-247">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1403c-248">コメント トークンに空白が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1403c-248">A comment token includes white space.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-249">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-249">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-250">方法: Visual Basic でコンマ区切りのテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-250">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-251">方法: Visual Basic で固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-251">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-252">方法: Visual Basic での複数の書式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-252">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiters : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1403c-253">テキスト ファイルの区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="1403c-253">Defines the delimiters for a text file.</span></span></summary>
        <value><span data-ttu-id="1403c-254"><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトのすべてのフィールド区切り記号を格納する文字列配列。</span><span class="sxs-lookup"><span data-stu-id="1403c-254">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-255">このプロパティは意味のある場合にのみ、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>プロパティに設定されて`FieldType.Delimited`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-255">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="1403c-256">テキスト ファイルで行うことができますの区切り記号を定義する、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1403c-256">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="1403c-257">次の表に、関連するタスクの例、`Delimiters`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1403c-257">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="1403c-258">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-258">To</span></span>|<span data-ttu-id="1403c-259">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-259">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-260">区切りテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-260">Read from a delimited text file</span></span>|[<span data-ttu-id="1403c-261">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-261">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-262">この例では、ことを指定しますの区切り記号、`TextFieldParser`オブジェクト、`FileReader`コンマ (,) です。</span><span class="sxs-lookup"><span data-stu-id="1403c-262">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1403c-263">区切り記号の値は、改行文字、空の文字列、または <see langword="Nothing" /> に設定されています。</span><span class="sxs-lookup"><span data-stu-id="1403c-263">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-264">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-264">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-265">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-265">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1403c-266"><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトによって使用されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="1403c-266">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-267">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-267">Objects (Visual Basic)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="textFieldParser.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1403c-268"><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトによって使用されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="1403c-268">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-269">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-269">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="textFieldParser.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="1403c-270">ブール型。</span><span class="sxs-lookup"><span data-stu-id="1403c-270">Boolean.</span></span> <span data-ttu-id="1403c-271">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="True" />。アンマネージド リソースだけを解放する場合は <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-271"><see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="1403c-272"><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトによって使用されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="1403c-272">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-273">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-273">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EndOfData : bool" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1403c-274">現在のカーソル位置とファイルの終端との間に、空行またはコメント行以外のデータが存在しない場合、<see langword="True" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="1403c-274">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span></span></summary>
        <value><span data-ttu-id="1403c-275">読み取るデータが他にない場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-275"><see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-276">このプロパティは、読み取られるデータの末尾を決定するファイルから読み取るときに使用できます。</span><span class="sxs-lookup"><span data-stu-id="1403c-276">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="1403c-277">次の表に、関連するタスクの例については、`EndOfData`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1403c-277">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="1403c-278">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-278">To</span></span>|<span data-ttu-id="1403c-279">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-279">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-280">区切り記号入りファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-280">Read from a delimited file</span></span>|[<span data-ttu-id="1403c-281">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-281">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="1403c-282">固定幅ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-282">Read from a fixed-width file</span></span>|[<span data-ttu-id="1403c-283">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-283">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-284">この例では、`EndofData`プロパティを使用して、ファイル内のすべてのフィールドをループ処理、 `TextFieldReader`、`FileReader`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-284">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-285">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-285">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLine : string" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1403c-286">直前に発生した <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外の原因となった行を返します。</span><span class="sxs-lookup"><span data-stu-id="1403c-286">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="1403c-287">直前に発生した <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外の原因となった行。</span><span class="sxs-lookup"><span data-stu-id="1403c-287">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-288">ない場合は<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外がスローされたが、空の文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-288">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="1403c-289"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>例外の原因となった行の数を表示するプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="1403c-289">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="1403c-290">次の表に、関連するタスクの例については、`ErrorLine`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1403c-290">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="1403c-291">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-291">To</span></span>|<span data-ttu-id="1403c-292">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-292">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-293">区切り記号入りファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-293">Read from a delimited file</span></span>|[<span data-ttu-id="1403c-294">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-294">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="1403c-295">固定幅ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-295">Read from a fixed-width file</span></span>|[<span data-ttu-id="1403c-296">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-296">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-297">この例では、`ErrorLine`現在を原因となった行を表示するプロパティを<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外。</span><span class="sxs-lookup"><span data-stu-id="1403c-297">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-298">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-298">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-299">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-299">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-300">方法: Visual Basic での複数の書式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-300">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-301">方法: Visual Basic で固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-301">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-302">方法: Visual Basic でコンマ区切りのテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-302">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="1403c-303">Try...Catch...Finally ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-303">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1403c-304">直前の <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外が発生した行の番号を返します。</span><span class="sxs-lookup"><span data-stu-id="1403c-304">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="1403c-305">直前の <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外が発生した行の番号。</span><span class="sxs-lookup"><span data-stu-id="1403c-305">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-306">ない場合は<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外がスローされなかった、-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-306">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="1403c-307"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A>例外の原因となった行の数を表示するプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="1403c-307">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="1403c-308">行番号を決定するときに、空白行とコメントは無視されません。</span><span class="sxs-lookup"><span data-stu-id="1403c-308">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="1403c-309">次の表に、関連するタスクの例については、`ErrorLineNumber`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1403c-309">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="1403c-310">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-310">To</span></span>|<span data-ttu-id="1403c-311">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-311">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-312">区切り記号入りファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-312">Read from a delimited file</span></span>|[<span data-ttu-id="1403c-313">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-313">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="1403c-314">固定幅ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-314">Read from a fixed-width file</span></span>|[<span data-ttu-id="1403c-315">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-315">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-316">この例では、`ErrorLineNumber`現在を原因となった行の場所を表示するプロパティを<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外。</span><span class="sxs-lookup"><span data-stu-id="1403c-316">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-317">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-317">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-318">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-318">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-319">方法: Visual Basic での複数の書式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-319">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-320">方法: Visual Basic で固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-320">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-321">方法: Visual Basic でコンマ区切りのテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-321">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="1403c-322">Try...Catch...Finally ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-322">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FieldWidths : int[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1403c-323">解析するテキスト ファイルの各列の幅を表します。</span><span class="sxs-lookup"><span data-stu-id="1403c-323">Denotes the width of each column in the text file being parsed.</span></span></summary>
        <value><span data-ttu-id="1403c-324">解析するテキスト ファイルの各列の幅を格納する整数配列。</span><span class="sxs-lookup"><span data-stu-id="1403c-324">An integer array that contains the width of each column in the text file that is being parsed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-325">このプロパティは意味のある場合にのみ、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>プロパティに設定されて`FieldType.FixedWidth`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-325">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="1403c-326">配列の最後のエントリが 0 に等しいまたはそれよりも小さい場合は、フィールドは可変幅であると見なされます。</span><span class="sxs-lookup"><span data-stu-id="1403c-326">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="1403c-327"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>メソッドがフィールドの幅を設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="1403c-327">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="1403c-328">次の表に、関連するタスクの例については、`FieldWidths`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1403c-328">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="1403c-329">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-329">To</span></span>|<span data-ttu-id="1403c-330">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-330">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-331">固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-331">Read from a fixed-width text file</span></span>|[<span data-ttu-id="1403c-332">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-332">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-333">この例は、ファイルを読み取って`ParserText.txt`、最初の列は幅が 5 文字、2 つ目は、10、3 番目は 11、および 4 つ目が可変幅の幅を指定します。</span><span class="sxs-lookup"><span data-stu-id="1403c-333">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1403c-334">配列の最後のエントリ以外の場所で、幅の値がゼロ以下です。</span><span class="sxs-lookup"><span data-stu-id="1403c-334">A width value in any location other than the last entry of the array is less than or equal to zero.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-335">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-335">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-336">方法: Visual Basic で固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-336">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-337">方法: Visual Basic でコンマ区切りのテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-337">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-338">方法: Visual Basic での複数の書式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-338">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-339">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-339">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="1403c-340">例外のトラブルシューティング。Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="1403c-340">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="textFieldParser.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1403c-341"><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトがガベージ コレクションにより収集される前にリソースを解放し、その他のクリーンアップ操作を実行できるようにします。</span><span class="sxs-lookup"><span data-stu-id="1403c-341">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-342">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-342">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HasFieldsEnclosedInQuotes : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1403c-343">区切り記号入りファイルを解析する場合に、フィールドが引用符で囲まれているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="1403c-343">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span></span></summary>
        <value><span data-ttu-id="1403c-344">フィールドが引用符で囲まれている場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-344"><see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-345">これは、高度なメンバーの場合。クリックしない限り、intellisense が表示されない、**すべて**タブ。</span><span class="sxs-lookup"><span data-stu-id="1403c-345">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="1403c-346">プロパティが場合`True`パーサーは、フィールドが引用符で囲まれていることを想定しています ("") 行の終わりを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="1403c-346">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="1403c-347">たとえば、フィールドが引用符で囲まれた場合`abc, "field2a,field2b", field3`このプロパティは、 `True`、場合は引用符で囲まれたすべてのテキストが返される以外の場合は、この例を返します`abc|field2a,field2b|field3`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-347">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="1403c-348">このプロパティを設定`False`とこの例の戻り値、`abc|"field2a|field2b"|field3`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-348">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1403c-349">この例の設定、`HasFieldsEnclosedInQuotes`プロパティを`True`の`myReader`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-349">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-350">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-350">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1403c-351">現在の行番号を返します。ストリームから取り出す文字がなくなった場合は -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="1403c-351">Returns the current line number, or returns -1 if no more characters are available in the stream.</span></span></summary>
        <value><span data-ttu-id="1403c-352">現在の行番号。</span><span class="sxs-lookup"><span data-stu-id="1403c-352">The current line number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-353">これは、高度なメンバーの場合。クリックしない限り、intellisense が表示されない、**すべて**タブ。</span><span class="sxs-lookup"><span data-stu-id="1403c-353">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="1403c-354">行番号を決定するときに、空白行とコメントは無視されません。</span><span class="sxs-lookup"><span data-stu-id="1403c-354">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1403c-355">この例では、テキスト ファイルの名前"Jones"を検索し、どのような目的の行で発生するを報告します。</span><span class="sxs-lookup"><span data-stu-id="1403c-355">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-356">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-356">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberSignature Language="F#" Value="member this.PeekChars : int -&gt; string" Usage="textFieldParser.PeekChars numberOfChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars"><span data-ttu-id="1403c-357"><see langword="Int32" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-357"><see langword="Int32" />.</span></span> <span data-ttu-id="1403c-358">読み取る文字数。</span><span class="sxs-lookup"><span data-stu-id="1403c-358">Number of characters to read.</span></span> <span data-ttu-id="1403c-359">必須です。</span><span class="sxs-lookup"><span data-stu-id="1403c-359">Required.</span></span></param>
        <summary><span data-ttu-id="1403c-360">カーソルを進めずに、指定された文字数を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="1403c-360">Reads the specified number of characters without advancing the cursor.</span></span></summary>
        <returns><span data-ttu-id="1403c-361">指定数の読み取られた文字を格納する文字列。</span><span class="sxs-lookup"><span data-stu-id="1403c-361">A string that contains the specified number of characters read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-362">`numberOfChars`値には、行の文字の合計数より小さくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1403c-362">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="1403c-363">によって返される文字列ではそうでない場合`PeekChars`行の長さに切り詰められます。</span><span class="sxs-lookup"><span data-stu-id="1403c-363">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="1403c-364">空白行は無視されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-364">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="1403c-365">行末の文字は返されません。</span><span class="sxs-lookup"><span data-stu-id="1403c-365">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="1403c-366">`PeekChars`解析メソッドは実行されません。 区切られたフィールド内の行末の文字は、行の実際の終了として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-366">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="1403c-367">次の表に、関連するタスクの例については、`PeekChars`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1403c-367">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="1403c-368">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-368">To</span></span>|<span data-ttu-id="1403c-369">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-370">解析する前に、フィールドの形式を決定します。</span><span class="sxs-lookup"><span data-stu-id="1403c-370">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="1403c-371">方法: 複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-371">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-372">この例では`PeekChars`をデータの末尾を見つけて、その時点で、ファイルの解析を停止します。</span><span class="sxs-lookup"><span data-stu-id="1403c-372">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1403c-373"><paramref name="numberOfChars" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="1403c-373"><paramref name="numberOfChars" /> is less than 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-374">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-374">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-375">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-375">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="1403c-376">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-376">Reading from Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberSignature Language="F#" Value="member this.ReadFields : unit -&gt; string[]" Usage="textFieldParser.ReadFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1403c-377">現在行のすべてのフィールドを読み込んで文字列の配列として返し、次のデータが格納されている行にカーソルを進めます。</span><span class="sxs-lookup"><span data-stu-id="1403c-377">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span></span></summary>
        <returns><span data-ttu-id="1403c-378">現在の行のフィールド値を格納する文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="1403c-378">An array of strings that contains field values for the current line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-379">複数の形式でテキスト ファイルを解析できるようにするために、`ReadFields`メソッドの値が調査`TextFieldType`、`Delimiters`と`FieldWidths`指定されている場合は、毎回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-379">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="1403c-380">ユーザーが正しく構成する必要があります、`TextFieldType`と`FieldWidths`または`Delimiters`に応じてのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="1403c-380">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="1403c-381">場合`TextFieldType`に設定されている`Delimited`、および`Delimiters`が設定されていない場合、または`TextFieldType`に設定されている`FixedWidth`と`FieldWidths`例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1403c-381">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="1403c-382">場合`ReadFields`空白行は、検出するがスキップされ、次の空白行が返されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-382">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="1403c-383">場合、`ReadFields`メソッドは、現在の行を解析できません、その例外が発生し、次の行に移動しません。</span><span class="sxs-lookup"><span data-stu-id="1403c-383">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="1403c-384">これにより、行をもう一度解析しようとするアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="1403c-384">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="1403c-385">次の表に、関連するタスクの例については、`ReadFields`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1403c-385">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="1403c-386">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-386">To</span></span>|<span data-ttu-id="1403c-387">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-387">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-388">区切り記号入りファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-388">Read from a delimited file</span></span>|[<span data-ttu-id="1403c-389">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-389">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="1403c-390">固定幅ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-390">Read from a fixed-width file</span></span>|[<span data-ttu-id="1403c-391">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-391">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-392">この例では、`ReadFields`メソッドをコンマ区切りファイルから読み取る`ParserText.txt`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-392">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="1403c-393">例では、書き込み、フィールドを`Testfile.txt`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-393">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException"><span data-ttu-id="1403c-394">指定された形式を使ってフィールドを解析できません。</span><span class="sxs-lookup"><span data-stu-id="1403c-394">A field cannot be parsed by using the specified format.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="1403c-395"><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="1403c-395">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="1403c-396"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="1403c-396">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-397">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-397">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-398">方法: Visual Basic でコンマ区切りのテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-398">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-399">方法: Visual Basic で固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-399">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-400">方法: Visual Basic での複数の書式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-400">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-401">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-401">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="member this.ReadLine : unit -&gt; string" Usage="textFieldParser.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1403c-402">現在の行を文字列として返し、カーソルを次の行に進めます。</span><span class="sxs-lookup"><span data-stu-id="1403c-402">Returns the current line as a string and advances the cursor to the next line.</span></span></summary>
        <returns><span data-ttu-id="1403c-403">ファイルまたはストリームの現在の行。</span><span class="sxs-lookup"><span data-stu-id="1403c-403">The current line from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-404">`ReadLine`解析メソッドは実行されません。 区切られたフィールド内の行末の文字は、行の実際の終了として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-404">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="1403c-405">`Nothing` ファイルの終わりに達したかどうかに返されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-405">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1403c-406">この例を読み取り、ファイル、`ParserText.txt`に書き込むと`Testfile.txt`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-406">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="1403c-407">場合`Testfile.txt`が存在しないによって作成される、`WriteAllText`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1403c-407">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="1403c-408">この例では、1 つの文字列としてのフィールドを書き込みます各行が、目的のファイルに独自の行に表示する、`VbCrLf`各行の末尾に文字を追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1403c-408">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-409">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-409">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-410">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-410">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberSignature Language="F#" Value="member this.ReadToEnd : unit -&gt; string" Usage="textFieldParser.ReadToEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1403c-411">テキスト ファイルの残りの部分を読み込み、文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="1403c-411">Reads the remainder of the text file and returns it as a string.</span></span></summary>
        <returns><span data-ttu-id="1403c-412">ファイルまたはストリームの残りのテキスト。</span><span class="sxs-lookup"><span data-stu-id="1403c-412">The remaining text from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-413">これは、高度なメンバーの場合。クリックしない限り、intellisense が表示されない、**すべて**タブ。</span><span class="sxs-lookup"><span data-stu-id="1403c-413">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="1403c-414">Nothing 詳細で、ファイルの末尾に達しているために、読み取ることがある場合`Nothing`が返されます。</span><span class="sxs-lookup"><span data-stu-id="1403c-414">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="1403c-415">`ReadToEnd`メソッドは、空白行とコメントは無視されません。</span><span class="sxs-lookup"><span data-stu-id="1403c-415">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1403c-416">この例では、`ReadToEnd`メソッド全体のファイルを読み取る`ParserText.txt`ファイルに書き込む`Testfile.txt`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-416">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="1403c-417">場合`Testfile.txt`が存在しないによって作成される、`WriteAllText`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1403c-417">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-418">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-418">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-419">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-419">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.SetDelimiters : string[] -&gt; unit" Usage="textFieldParser.SetDelimiters delimiters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters"><span data-ttu-id="1403c-420"><see langword="String" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="1403c-420">Array of type <see langword="String" />.</span></span></param>
        <summary><span data-ttu-id="1403c-421">リーダーの区切り記号を指定された値に設定し、フィールドの種類を <see langword="Delimited" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="1403c-421">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-422">既存の内容、`Delimiters`このメソッドが設定されている場合、プロパティはクリアされます。</span><span class="sxs-lookup"><span data-stu-id="1403c-422">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="1403c-423">このメソッドでは、配列を作成せずに区切り記号を設定する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="1403c-423">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="1403c-424">次の表に、関連するタスクの例、`SetDelimiters`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1403c-424">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="1403c-425">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-425">To</span></span>|<span data-ttu-id="1403c-426">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-426">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-427">テキスト ファイルを解析します。</span><span class="sxs-lookup"><span data-stu-id="1403c-427">Parse a text file</span></span>|[<span data-ttu-id="1403c-428">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-428">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-429">この例は、テキスト フィールドのパーサーを開き、として区切り記号を定義して`vbTab`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-429">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="1403c-430">パスを置き換える`C:\logs\test.log`パスおよび解析するファイルの名前を使用します。</span><span class="sxs-lookup"><span data-stu-id="1403c-430">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1403c-431">区切り記号の長さが 0 です。</span><span class="sxs-lookup"><span data-stu-id="1403c-431">A delimiter is zero-length.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-432">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-432">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-433">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-433">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-434">方法: Visual Basic でコンマ区切りのテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-434">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.SetFieldWidths : int[] -&gt; unit" Usage="textFieldParser.SetFieldWidths fieldWidths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths"><span data-ttu-id="1403c-435"><see langword="Integer" /> の配列。</span><span class="sxs-lookup"><span data-stu-id="1403c-435">Array of <see langword="Integer" />.</span></span></param>
        <summary><span data-ttu-id="1403c-436">リーダーの区切り記号を指定の値に設定します。</span><span class="sxs-lookup"><span data-stu-id="1403c-436">Sets the delimiters for the reader to the specified values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-437">既存の内容、`Delimiters`これを設定すると、プロパティはクリアされます。</span><span class="sxs-lookup"><span data-stu-id="1403c-437">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="1403c-438">このメソッドでは、配列を作成せずに区切り記号を設定する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="1403c-438">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="1403c-439">次の表に、関連するタスクの例、`SetFieldWidths`メソッド。</span><span class="sxs-lookup"><span data-stu-id="1403c-439">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="1403c-440">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-440">To</span></span>|<span data-ttu-id="1403c-441">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-441">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-442">テキスト ファイルを解析します。</span><span class="sxs-lookup"><span data-stu-id="1403c-442">Parse a text file.</span></span>|[<span data-ttu-id="1403c-443">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-443">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-444">この例がテキスト フィールドのパーサーを開き、として、フィールドの幅を定義して`5`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-444">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="1403c-445">パスを置き換える`C:\logs\test.log`パスおよび解析するファイルの名前を使用します。</span><span class="sxs-lookup"><span data-stu-id="1403c-445">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="1403c-446">次の例がテキスト フィールドのパーサーを開き、としてのフィールド幅を定義して`5`、 `10`、および変数。</span><span class="sxs-lookup"><span data-stu-id="1403c-446">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="1403c-447">パスを置き換える`C:\logs\test.log`パスおよび解析するファイルの名前を使用します。</span><span class="sxs-lookup"><span data-stu-id="1403c-447">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-448">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-448">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-449">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-449">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberSignature Language="F#" Value="member this.TextFieldType : Microsoft.VisualBasic.FileIO.FieldType with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1403c-450">解析対象のファイルが区切り形式か固定幅形式かを示します。</span><span class="sxs-lookup"><span data-stu-id="1403c-450">Indicates whether the file to be parsed is delimited or fixed-width.</span></span></summary>
        <value><span data-ttu-id="1403c-451">解析対象のファイルが区切り形式か固定幅形式かを示す <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> 値。</span><span class="sxs-lookup"><span data-stu-id="1403c-451">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-452">このプロパティの既定値は区切られます。</span><span class="sxs-lookup"><span data-stu-id="1403c-452">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="1403c-453">次の表に、関連するタスクの例については、`TextFieldType`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1403c-453">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="1403c-454">終了</span><span class="sxs-lookup"><span data-stu-id="1403c-454">To</span></span>|<span data-ttu-id="1403c-455">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="1403c-455">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1403c-456">区切りテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-456">Read from a delimited text file</span></span>|[<span data-ttu-id="1403c-457">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-457">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="1403c-458">固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-458">Read from a fixed-width text file</span></span>|[<span data-ttu-id="1403c-459">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-459">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="1403c-460">複数の書式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-460">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="1403c-461">方法: 複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="1403c-461">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="1403c-462">この例で作成、 `TextFieldParser`、 `FileReader`、区切られているを指定します。</span><span class="sxs-lookup"><span data-stu-id="1403c-462">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="1403c-463">この例で作成、 `TextFieldParser`、 `FileReader`、固定幅であるを指定します。</span><span class="sxs-lookup"><span data-stu-id="1403c-463">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-464">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-464">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-465">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-465">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-466">方法: Visual Basic でコンマ区切りのテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-466">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-467">方法: Visual Basic で固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-467">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-468">方法: Visual Basic での複数の書式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-468">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="1403c-469">例外のトラブルシューティング。Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="1403c-469">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TrimWhiteSpace : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1403c-470">フィールド値から前後の空白をトリムするかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="1403c-470">Indicates whether leading and trailing white space should be trimmed from field values.</span></span></summary>
        <value><span data-ttu-id="1403c-471">フィールド値から前後の空白をトリムする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="1403c-471"><see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1403c-472">このプロパティの既定値は `True` です。</span><span class="sxs-lookup"><span data-stu-id="1403c-472">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1403c-473">この例で作成、 `TextFieldParser`、 `FileReader`、設定と、`TrimWhiteSpace`プロパティを`True`します。</span><span class="sxs-lookup"><span data-stu-id="1403c-473">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="1403c-474">オブジェクト (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1403c-474">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="1403c-475">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="1403c-475">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="1403c-476">方法: Visual Basic でコンマ区切りのテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-476">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="1403c-477">方法: Visual Basic で固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-477">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="1403c-478">方法: Visual Basic での複数の書式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="1403c-478">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>