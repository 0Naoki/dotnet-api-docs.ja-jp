<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34fefd8e673d5edb9c2fb81e0c3d6c92c4fe6c0b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="5ac76-101">構造化テキスト ファイルの解析に使用するメソッドとプロパティを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="5ac76-101">Provides methods and properties for parsing structured text files.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-102">`TextFieldParser`オブジェクトがメソッドを提供し、構造化テキスト ファイルを解析するためのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="5ac76-103">持つテキスト ファイルの解析、`TextFieldParser`はテキスト ファイルを反復処理に似ています中に、`ReadFields`テキストのフィールドを抽出する方法は、文字列の分割に似ています。</span><span class="sxs-lookup"><span data-stu-id="5ac76-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="5ac76-104">`TextFieldParser` 2 種類のファイルを解析することができます。 区切り記号または固定幅。</span><span class="sxs-lookup"><span data-stu-id="5ac76-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="5ac76-105">一部のプロパティなど`Delimiters`と`HasFieldsEnclosedInQuotes`のみ意味が区切られたファイルを使用する場合に、`FieldWidths`プロパティは、固定幅のファイルを扱うときにのみ意味します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="5ac76-106">次の表に、関連するタスクの例については、`Microsoft.VisualBasic.FileIO.TextFieldParser`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5ac76-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="5ac76-107">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-107">To</span></span>|<span data-ttu-id="5ac76-108">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-109">区切られたテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-109">Read from a delimited text file</span></span>|[<span data-ttu-id="5ac76-110">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="5ac76-111">固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="5ac76-112">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="5ac76-113">複数の形式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="5ac76-114">方法: 複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-115">この例をタブ区切りのテキスト ファイルを使って解析`Bigfile`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-116">
            <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-116">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="5ac76-117">
            <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-117">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="5ac76-118">解析するストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-118">The stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-119">
            <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-120">新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5ac76-120">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5ac76-121">
            <paramref name="stream" /> は <see langword="Nothing" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-121">
              <paramref name="stream" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ac76-122">
            <paramref name="stream" /> から読み取ることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-122">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="5ac76-123">
            <see cref="T:System.IO.TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-123">
              <see cref="T:System.IO.TextReader" />.</span>
          </span>
          <span data-ttu-id="5ac76-124">解析する <see cref="T:System.IO.TextReader" /> ストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-124">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-125">
            <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-125">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-126">新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`reader`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5ac76-126">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5ac76-127">
            <paramref name="reader" /> は <see langword="Nothing" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-127">
              <paramref name="reader" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="5ac76-128">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-128">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="5ac76-129">解析するファイルの絶対パス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-129">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-130">
            <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-130">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-131">新たに作成`TextFieldParser`によって指定されたファイルを解析するオブジェクト、`path`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5ac76-131">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5ac76-132">
            <paramref name="path" /> が空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-132">
              <paramref name="path" /> is an empty string.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="5ac76-133">
            <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-133">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="5ac76-134">解析するストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-134">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="5ac76-135">
            <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-135">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="5ac76-136">ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-136">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="5ac76-137">既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-137">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-138">
            <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-138">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-139">新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5ac76-139">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5ac76-140">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字解釈されないことし、例外をスローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ac76-140">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5ac76-141">
            <paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-141">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ac76-142">
            <paramref name="stream" /> から読み取ることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-142">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="5ac76-143">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-143">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="5ac76-144">解析するファイルの絶対パス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-144">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="5ac76-145">
            <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-145">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="5ac76-146">ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-146">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="5ac76-147">既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-147">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-148">
            <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-148">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-149">新たに作成`TextFieldParser`によって指定されたファイルを解析するオブジェクト、`path`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5ac76-149">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5ac76-150">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字解釈されないことし、例外をスローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ac76-150">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5ac76-151">
            <paramref name="path" /> が空の文字列であるか、<paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-151">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="5ac76-152">
            <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-152">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="5ac76-153">解析するストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-153">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="5ac76-154">
            <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-154">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="5ac76-155">ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-155">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="5ac76-156">既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-156">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="5ac76-157">
            <see langword="Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-157">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="5ac76-158">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-158">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="5ac76-159">既定値は <see langword="True" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-159">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-160">
            <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-160">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-161">新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5ac76-161">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="5ac76-162">場合、`detectEncoding`パラメーターは`True`、このコンス トラクターは、ファイルまたはストリームの最初の 3 バイトで確認して、エンコーディングの検出を試みます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-162">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="5ac76-163">自動的に認識し、utf-8、リトル エンディアン Unicode、ビッグ エンディアン Unicode テキスト ファイルが適切なバイト順マークで始まる場合。</span><span class="sxs-lookup"><span data-stu-id="5ac76-163">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="5ac76-164">それ以外の場合で指定されたエンコーディング`defaultEncoding`を使用します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-164">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5ac76-165">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字解釈されないことし、例外をスローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ac76-165">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5ac76-166">
            <paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-166">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ac76-167">
            <paramref name="stream" /> から読み取ることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-167">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="5ac76-168">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-168">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="5ac76-169">解析するファイルの絶対パス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-169">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="5ac76-170">
            <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-170">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="5ac76-171">ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-171">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="5ac76-172">既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-172">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="5ac76-173">
            <see langword="Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-173">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="5ac76-174">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-174">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="5ac76-175">既定値は <see langword="True" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-175">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-176">
            <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-176">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-177">新たに作成`TextFieldParser`によって指定されたファイルを解析するオブジェクト、`path`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5ac76-177">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="5ac76-178">場合、`detectEncoding`パラメーターは`True`、このコンス トラクターは、ファイルまたはストリームの最初の 3 バイトで確認して、エンコーディングの検出を試みます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-178">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="5ac76-179">自動的に認識し、utf-8、リトル エンディアン Unicode、ビッグ エンディアン Unicode テキスト ファイルが適切なバイト順マークで始まる場合。</span><span class="sxs-lookup"><span data-stu-id="5ac76-179">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="5ac76-180">それ以外の場合で指定されたエンコーディング`defaultEncoding`を使用します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-180">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5ac76-181">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字解釈されないことし、例外をスローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ac76-181">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5ac76-182">
            <paramref name="path" /> が空の文字列であるか、<paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-182">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="5ac76-183">
            <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-183">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="5ac76-184">解析するストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-184">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="5ac76-185">
            <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-185">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="5ac76-186">ファイルからエンコーディングを判断できない場合に使用する文字エンコーディング。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-186">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="5ac76-187">既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-187">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="5ac76-188">
            <see langword="Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-188">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="5ac76-189">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-189">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="5ac76-190">既定値は <see langword="True" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-190">Default is <see langword="True" />.</span>
          </span>
        </param>
        <param name="leaveOpen">
          <span data-ttu-id="5ac76-191">
            <see langword="Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-191">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="5ac76-192">
            <see langword="TextFieldParser" /> オブジェクトを閉じる際に、<c>stream</c> を開いたままにするかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-192">Indicates whether to leave <c>stream</c> open when the <see langword="TextFieldParser" /> object is closed.</span>
          </span>
          <span data-ttu-id="5ac76-193">既定値は <see langword="False" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-193">Default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-194">
            <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-194">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-195">新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5ac76-195">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="5ac76-196">場合、`detectEncoding`パラメーターは`True`、このコンス トラクターは、ファイルまたはストリームの最初の 3 バイトで確認して、エンコーディングの検出を試みます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-196">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="5ac76-197">自動的に認識し、utf-8、リトル エンディアン Unicode、ビッグ エンディアン Unicode テキスト ファイルが適切なバイト順マークで始まる場合。</span><span class="sxs-lookup"><span data-stu-id="5ac76-197">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="5ac76-198">それ以外の場合で指定されたエンコーディング`defaultEncoding`を使用します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-198">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5ac76-199">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字解釈されないことし、例外をスローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5ac76-199">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5ac76-200">
            <paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-200">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ac76-201">
            <paramref name="stream" /> から読み取ることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-201">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-202">現在の <see langword="TextFieldParser" /> オブジェクトを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-202">Closes the current <see langword="TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5ac76-203">この例を閉じ、`TextFieldParser.FileReader`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-203">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-204">コメント トークンを定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-204">Defines comment tokens.</span>
          </span>
          <span data-ttu-id="5ac76-205">コメント トークンとは、コメント行であることを示すために、行頭に配置される文字列です。コメント トークンの配置された行は、パーサーによって無視されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-205">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ac76-206">
            <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトのすべてのコメント トークンを格納する文字列配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-206">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-207">これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-207">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="5ac76-208">長さ 0 のコメント トークンは無視されます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-208">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-209">この例を指定するため、 `TextFieldParser`、`FileReader`単一引用符 (') で始まる行を無視する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ac76-209">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ac76-210">コメント トークンに空白が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-210">A comment token includes white space.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-211">テキスト ファイルの区切り記号を定義します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-211">Defines the delimiters for a text file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ac76-212">
            <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトのすべてのフィールド区切り記号を格納する文字列配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-212">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-213">このプロパティは意味のある場合にのみ、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>プロパティに設定されている`FieldType.Delimited`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-213">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="5ac76-214">テキスト ファイルで行うことができますの区切り記号を定義する、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-214">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="5ac76-215">次の表に、関連するタスクの例、`Delimiters`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-215">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="5ac76-216">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-216">To</span></span>|<span data-ttu-id="5ac76-217">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-217">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-218">区切られたテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-218">Read from a delimited text file</span></span>|[<span data-ttu-id="5ac76-219">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-219">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-220">この例では、ことを指定の区切り記号、`TextFieldParser`オブジェクト、 `FileReader`、コンマ (,) です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-220">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ac76-221">区切り記号の値は、改行文字、空の文字列、または <see langword="Nothing" /> に設定されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-221">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-222">
            <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトによって使用されているリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-222">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-223">
            <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトによって使用されているリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-223">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="5ac76-224">ブール型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-224">Boolean.</span>
          </span>
          <span data-ttu-id="5ac76-225">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="True" />。アンマネージ リソースだけを解放する場合は <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-225">
              <see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-226">
            <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトによって使用されているリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-226">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-227">現在のカーソル位置とファイルの終端との間に、空行またはコメント行以外のデータが存在しない場合、<see langword="True" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-227">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ac76-228">読み取るデータが他にない場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-228">
              <see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-229">このプロパティは、読み取られるデータの end を特定のファイルから読み取るときに使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-229">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="5ac76-230">次の表に、関連するタスクの例については、`EndOfData`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-230">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="5ac76-231">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-231">To</span></span>|<span data-ttu-id="5ac76-232">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-232">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-233">区切り記号入りファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-233">Read from a delimited file</span></span>|[<span data-ttu-id="5ac76-234">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-234">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="5ac76-235">固定幅ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-235">Read from a fixed-width file</span></span>|[<span data-ttu-id="5ac76-236">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-236">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-237">この例では、`EndofData`プロパティを使用して、ファイルのすべてのフィールドをループ処理、 `TextFieldReader`、`FileReader`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-237">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-238">直前に発生した <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外の原因となった行を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-238">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ac76-239">直前に発生した <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外の原因となった行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-239">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-240">ない場合は<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外がスローされると、空の文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-240">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="5ac76-241"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>例外が発生した行の数を表示するプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-241">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="5ac76-242">次の表に、関連するタスクの例については、`ErrorLine`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-242">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="5ac76-243">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-243">To</span></span>|<span data-ttu-id="5ac76-244">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-244">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-245">区切り記号入りファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-245">Read from a delimited file</span></span>|[<span data-ttu-id="5ac76-246">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-246">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="5ac76-247">固定幅ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-247">Read from a fixed-width file</span></span>|[<span data-ttu-id="5ac76-248">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-248">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-249">この例では、`ErrorLine`現在が発生した行を表示するプロパティを<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外。</span><span class="sxs-lookup"><span data-stu-id="5ac76-249">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-250">直前の <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外が発生した行の番号を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-250">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ac76-251">直前の <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外が発生した行の番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-251">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-252">ない場合は<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外がスローされました、-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-252">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="5ac76-253"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A>例外が発生した行の数を表示するプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-253">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="5ac76-254">行番号を調べるときに、空白行とコメントは無視されません。</span><span class="sxs-lookup"><span data-stu-id="5ac76-254">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="5ac76-255">次の表に、関連するタスクの例については、`ErrorLineNumber`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-255">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="5ac76-256">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-256">To</span></span>|<span data-ttu-id="5ac76-257">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-257">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-258">区切り記号入りファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-258">Read from a delimited file</span></span>|[<span data-ttu-id="5ac76-259">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-259">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="5ac76-260">固定幅ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-260">Read from a fixed-width file</span></span>|[<span data-ttu-id="5ac76-261">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-261">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-262">この例では、`ErrorLineNumber`現在が発生した行の場所を表示するプロパティを<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外。</span><span class="sxs-lookup"><span data-stu-id="5ac76-262">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-263">解析するテキスト ファイルの各列の幅を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-263">Denotes the width of each column in the text file being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ac76-264">解析するテキスト ファイルの各列の幅を格納する整数配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-264">An integer array that contains the width of each column in the text file that is being parsed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-265">このプロパティは意味のある場合にのみ、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>プロパティに設定されている`FieldType.FixedWidth`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-265">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="5ac76-266">配列の最後のエントリが 0 に等しいまたはそれよりも小さい場合は、フィールドが可変幅であると見なされます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-266">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="5ac76-267"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>メソッドを使用してのフィールドの幅を設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-267">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="5ac76-268">次の表に、関連するタスクの例については、`FieldWidths`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-268">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="5ac76-269">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-269">To</span></span>|<span data-ttu-id="5ac76-270">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-270">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-271">固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-271">Read from a fixed-width text file</span></span>|[<span data-ttu-id="5ac76-272">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-272">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-273">この例は、ファイルを読み取って`ParserText.txt`、最初の列は 5 文字分の幅、10 秒が、3 つ目は、11、および 4 つ目は、可変幅の幅を指定します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-273">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ac76-274">配列の最後のエントリ以外の場所で、幅の値がゼロ以下です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-274">A width value in any location other than the last entry of the array is less than or equal to zero.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-275">
            <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトがガベージ コレクションにより収集される前にリソースを解放し、その他のクリーンアップ操作を実行できるようにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-275">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-276">区切り記号入りファイルを解析する場合に、フィールドが引用符で囲まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-276">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ac76-277">フィールドが引用符で囲まれている場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-277">
              <see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-278">これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-278">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="5ac76-279">プロパティが場合`True`パーサーは、フィールドが引用符で囲まれていることを想定しています ("") 行の終わりを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-279">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="5ac76-280">たとえば、フィールドを引用符で囲まれた場合`abc, "field2a,field2b", field3`し、このプロパティは`True`が引用符で囲まれたすべてのテキストが返されます。 この例と戻り`abc|field2a,field2b|field3`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-280">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="5ac76-281">このプロパティを設定`False`と次の例の戻り値、`abc|"field2a|field2b"|field3`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-281">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-282">この例では設定、`HasFieldsEnclosedInQuotes`プロパティを`True`の`myReader`します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-282">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-283">現在の行番号を返します。ストリームから取り出す文字がなくなった場合は -1 を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-283">Returns the current line number, or returns -1 if no more characters are available in the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ac76-284">現在の行番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-284">The current line number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-285">これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-285">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="5ac76-286">行番号を調べるときに、空白行とコメントは無視されません。</span><span class="sxs-lookup"><span data-stu-id="5ac76-286">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-287">この例では、テキスト ファイルの名前"Jones"を検索し、どのような行で発生するを報告します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-287">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <span data-ttu-id="5ac76-288">
            <see langword="Int32" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-288">
              <see langword="Int32" />.</span>
          </span>
          <span data-ttu-id="5ac76-289">読み取る文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-289">Number of characters to read.</span>
          </span>
          <span data-ttu-id="5ac76-290">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-290">Required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-291">カーソルを進めずに、指定された文字数を読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-291">Reads the specified number of characters without advancing the cursor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ac76-292">指定数の読み取られた文字を格納する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-292">A string that contains the specified number of characters read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-293">`numberOfChars`値には、行の文字の合計数より小さくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ac76-293">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="5ac76-294">ない場合は、によって返される文字列`PeekChars`行の長さに切り詰められます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-294">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="5ac76-295">空白行は無視されます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-295">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="5ac76-296">行末の文字は返されません。</span><span class="sxs-lookup"><span data-stu-id="5ac76-296">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="5ac76-297">`PeekChars`解析メソッドは実行されません。 区切られたフィールド内の行末の文字は、行の実際の末尾として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-297">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="5ac76-298">次の表に、関連するタスクの例については、`PeekChars`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-298">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="5ac76-299">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-299">To</span></span>|<span data-ttu-id="5ac76-300">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-300">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-301">解析する前に、フィールドの形式を決定します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-301">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="5ac76-302">方法: 複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-302">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-303">この例では`PeekChars`をデータの末尾を見つけて、その時点で、ファイルの解析を停止します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-303">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ac76-304">
            <paramref name="numberOfChars" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-304">
              <paramref name="numberOfChars" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-305">現在行のすべてのフィールドを読み込んで文字列の配列として返し、次のデータが格納されている行にカーソルを進めます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-305">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ac76-306">現在の行のフィールド値を格納する文字列の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-306">An array of strings that contains field values for the current line.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-307">複数の形式でテキスト ファイルを解析できるようにするために、`ReadFields`メソッドの値が調査`TextFieldType`、 `Delimiters`、および`FieldWidths`が指定されている場合が呼び出されるたび。</span><span class="sxs-lookup"><span data-stu-id="5ac76-307">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="5ac76-308">ユーザーが正しく構成する必要があります、`TextFieldType`と`FieldWidths`または`Delimiters`に応じてのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-308">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="5ac76-309">場合`TextFieldType`に設定されている`Delimited`、および`Delimiters`が設定されていない場合、または`TextFieldType`に設定されている`FixedWidth`と`FieldWidths`例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-309">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="5ac76-310">場合`ReadFields`、空白行を検出したはスキップされ、次の空白行が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-310">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="5ac76-311">場合、`ReadFields`メソッドは、現在の行を解析できません、例外が発生し、次の行に移動しません。</span><span class="sxs-lookup"><span data-stu-id="5ac76-311">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="5ac76-312">これにより、もう一度のコマンドラインを解析しようとするアプリケーション。</span><span class="sxs-lookup"><span data-stu-id="5ac76-312">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="5ac76-313">次の表に、関連するタスクの例については、`ReadFields`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-313">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="5ac76-314">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-314">To</span></span>|<span data-ttu-id="5ac76-315">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-315">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-316">区切り記号入りファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-316">Read from a delimited file</span></span>|[<span data-ttu-id="5ac76-317">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-317">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="5ac76-318">固定幅ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-318">Read from a fixed-width file</span></span>|[<span data-ttu-id="5ac76-319">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-319">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-320">この例では、`ReadFields`をコンマ区切りファイルから読み取るメソッド`ParserText.txt`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-320">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="5ac76-321">例では、書き込み、フィールドを`Testfile.txt`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-321">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">
          <span data-ttu-id="5ac76-322">指定された形式を使ってフィールドを解析できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-322">A field cannot be parsed by using the specified format.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="5ac76-323">
            <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-323">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="5ac76-324">
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-324">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span>
          </span>
        </permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-325">現在の行を文字列として返し、カーソルを次の行に進めます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-325">Returns the current line as a string and advances the cursor to the next line.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ac76-326">ファイルまたはストリームの現在の行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-326">The current line from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-327">`ReadLine`解析メソッドは実行されません。 区切られたフィールド内の行末の文字は、行の実際の末尾として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-327">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="5ac76-328">`Nothing` ファイルの末尾に達したかどうかが返されます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-328">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-329">この例は、ファイルを読み取り`ParserText.txt`に書き込むと`Testfile.txt`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-329">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="5ac76-330">場合`Testfile.txt`が存在しないによって作成されて、`WriteAllText`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-330">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="5ac76-331">この例では、1 つの文字列としてのフィールドを書き込みます各行が変換先ファイルの独自の行に表示する、`VbCrLf`文字は、各行の末尾に追加される必要があります。</span><span class="sxs-lookup"><span data-stu-id="5ac76-331">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-332">テキスト ファイルの残りの部分を読み込み、文字列として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-332">Reads the remainder of the text file and returns it as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5ac76-333">ファイルまたはストリームの残りのテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-333">The remaining text from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-334">これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-334">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="5ac76-335">項目詳細で、ファイルの末尾に達しているために、読み取ることがない場合`Nothing`が返されます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-335">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="5ac76-336">`ReadToEnd`メソッドは、空白行とコメントは無視されません。</span><span class="sxs-lookup"><span data-stu-id="5ac76-336">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-337">この例では、`ReadToEnd`ファイル全体を読み取るメソッド`ParserText.txt`ファイルに書き込むと`Testfile.txt`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-337">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="5ac76-338">場合`Testfile.txt`が存在しないによって作成されて、`WriteAllText`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-338">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters">
          <span data-ttu-id="5ac76-339">
            <see langword="String" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-339">Array of type <see langword="String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-340">リーダーの区切り記号を指定された値に設定し、フィールドの種類を <see langword="Delimited" /> に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-340">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-341">既存の内容、`Delimiters`このメソッドが設定されている場合、プロパティはクリアされます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-341">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="5ac76-342">このメソッドは、配列を作成せずに区切り記号を設定する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-342">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="5ac76-343">次の表に、関連するタスクの例、`SetDelimiters`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-343">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="5ac76-344">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-344">To</span></span>|<span data-ttu-id="5ac76-345">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-345">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-346">テキスト ファイルを解析します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-346">Parse a text file</span></span>|[<span data-ttu-id="5ac76-347">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="5ac76-347">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-348">この例で、テキスト フィールドのパーサーを開き、区切り記号としてを定義して`vbTab`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-348">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="5ac76-349">パスに置き換えます`C:\logs\test.log`を解析するファイルの名前とパスにします。</span><span class="sxs-lookup"><span data-stu-id="5ac76-349">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5ac76-350">区切り記号の長さが 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-350">A delimiter is zero-length.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths">
          <span data-ttu-id="5ac76-351">
            <see langword="Integer" /> の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-351">Array of <see langword="Integer" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5ac76-352">リーダーの区切り記号を指定の値に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-352">Sets the delimiters for the reader to the specified values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-353">既存の内容、`Delimiters`プロパティが設定されているときにクリアされます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-353">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="5ac76-354">このメソッドは、配列を作成せずに区切り記号を設定する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-354">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="5ac76-355">次の表に、関連するタスクの例として、`SetFieldWidths`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-355">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="5ac76-356">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-356">To</span></span>|<span data-ttu-id="5ac76-357">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-357">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-358">テキスト ファイルを解析します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-358">Parse a text file.</span></span>|[<span data-ttu-id="5ac76-359">TextFieldParser オブジェクトによるテキスト ファイルの解析</span><span class="sxs-lookup"><span data-stu-id="5ac76-359">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-360">この例は、テキスト フィールドのパーサーを開きし、フィールド幅として定義`5`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-360">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="5ac76-361">パスに置き換えます`C:\logs\test.log`を解析するファイルの名前とパスにします。</span><span class="sxs-lookup"><span data-stu-id="5ac76-361">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="5ac76-362">次の例が、テキスト フィールド パーサーを開き、としてのフィールド幅を定義して`5`、 `10`、および変数。</span><span class="sxs-lookup"><span data-stu-id="5ac76-362">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="5ac76-363">パスに置き換えます`C:\logs\test.log`を解析するファイルの名前とパスにします。</span><span class="sxs-lookup"><span data-stu-id="5ac76-363">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-364">解析対象のファイルが区切り形式か固定幅形式かを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-364">Indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ac76-365">解析対象のファイルが区切り形式か固定幅形式かを示す <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-365">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-366">このプロパティの既定値は区切られます。</span><span class="sxs-lookup"><span data-stu-id="5ac76-366">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="5ac76-367">次の表に、関連するタスクの例については、`TextFieldType`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5ac76-367">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="5ac76-368">終了</span><span class="sxs-lookup"><span data-stu-id="5ac76-368">To</span></span>|<span data-ttu-id="5ac76-369">解決方法については、</span><span class="sxs-lookup"><span data-stu-id="5ac76-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="5ac76-370">区切られたテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-370">Read from a delimited text file</span></span>|[<span data-ttu-id="5ac76-371">方法: コンマ区切りのテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-371">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="5ac76-372">固定幅テキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-372">Read from a fixed-width text file</span></span>|[<span data-ttu-id="5ac76-373">方法: 固定幅のテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-373">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="5ac76-374">複数の形式を持つテキスト ファイルからの読み取り</span><span class="sxs-lookup"><span data-stu-id="5ac76-374">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="5ac76-375">方法: 複数の書式を持つテキスト ファイルを読み取る</span><span class="sxs-lookup"><span data-stu-id="5ac76-375">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-376">この例で作成、 `TextFieldParser`、 `FileReader`、し、それが区切られているを指定します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-376">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="5ac76-377">この例で作成、 `TextFieldParser`、 `FileReader`、固定幅であることを指定します。</span><span class="sxs-lookup"><span data-stu-id="5ac76-377">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5ac76-378">フィールド値から前後の空白をトリムするかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-378">Indicates whether leading and trailing white space should be trimmed from field values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5ac76-379">フィールド値から前後の空白をトリムする場合は <see langword="True" />。それ以外の場合は <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5ac76-379">
              <see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ac76-380">このプロパティの既定値は `True` です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-380">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ac76-381">この例で作成、 `TextFieldParser`、 `FileReader`、設定と、`TrimWhiteSpace`プロパティを`True`です。</span><span class="sxs-lookup"><span data-stu-id="5ac76-381">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>