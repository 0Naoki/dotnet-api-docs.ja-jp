<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="597ab8d6bf17107429c34581026ac8e302c80b5e" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52914666" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>別のソースからのデータを SQL Server テーブルに効率的に一括読み込みすることができます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server には、という名前の人気の高いコマンド プロンプト ユーティリティが含まれています。 **bcp** 1 台のサーバーであるかどうか、またはサーバー間で、1 つのテーブルからデータを移動するためです。 <xref:System.Data.SqlClient.SqlBulkCopy>クラスでは、同様の機能を提供するマネージ コード ソリューションを記述することができます。 SQL Server テーブル (たとえば INSERT ステートメント) にデータを読み込むには、他の方法はありますが、<xref:System.Data.SqlClient.SqlBulkCopy>上に大幅なパフォーマンスの利点を提供しています。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> クラスを使用すると、SQL Server のテーブルにのみデータを書き込むことができます。 ただし、データ ソースは SQL Server には制限はありません。データを読み込むことがあれば、任意のデータ ソースを使用できます、<xref:System.Data.DataTable>インスタンスまたは読み取りを<xref:System.Data.IDataReader>インスタンス。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> 失敗する一括読み込みを<xref:System.Data.DataTable>型の列<xref:System.Data.SqlTypes.SqlDateTime>SQL Server 2008 で SQL Server に型が日付/時刻型のいずれかの列を追加します。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、<xref:System.Data.SqlClient.SqlBulkCopy> クラスを使用してデータを読み込む方法について示しています。 この例で、<xref:System.Data.SqlClient.SqlDataReader>からデータをコピーするために使用、 **Production.Product** SQL Server のテーブル**AdventureWorks**データベースを同じデータベース内の同等のテーブル。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">一括コピー操作を実行するために使用される既に開いている <see cref="T:System.Data.SqlClient.SqlConnection" /> インスタンス。 接続文字列で <see langword="Integrated Security = true" /> を使用しない場合、<see cref="T:System.Data.SqlClient.SqlCredential" /> を使用することによって、接続文字列内でユーザー ID とパスワードをテキストとして指定する場合よりも安全にユーザー ID とパスワードを渡すことができます。</param>
        <summary><see cref="T:System.Data.SqlClient.SqlConnection" /> の指定されたオープン インスタンスを使用して、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、接続が開いて既にあるため、<xref:System.Data.SqlClient.SqlBulkCopy>インスタンスが初期化されて、接続が後に開いたまま、<xref:System.Data.SqlClient.SqlBulkCopy>インスタンスが閉じています。  
  
 場合、`connection`引数が null の場合、<xref:System.ArgumentNullException>がスローされます。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、データの一括読み込みは既に開いている接続を使用する方法を示します。 この例で、<xref:System.Data.SqlClient.SqlDataReader>からデータをコピーするために使用、 **Production.Product** SQL Server のテーブル**AdventureWorks**データベースを同じデータベース内の同等のテーブル。 この例は、デモンストレーション目的のみで提供されます。 使用すべきでない`SqlBulkCopy`実稼働アプリケーションで同じデータベース内の別の 1 つのテーブルからデータを移動します。 SQL Server; に配置されているソース データがないことに注意してください。読み取ることができる任意のデータ ソースを使用することができます、<xref:System.Data.IDataReader>に読み込まれたまたは、<xref:System.Data.DataTable>します。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> インスタンスで使用するために開かれる接続を定義する文字列。 接続文字列で <see langword="Integrated Security = true" /> が使用されない場合、<see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> または <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> と <see cref="T:System.Data.SqlClient.SqlCredential" /> を使用して、接続文字列内にテキストとしてユーザー ID とパスワードを指定する場合よりも安全にユーザー ID とパスワードを渡すことができます。</param>
        <summary>指定された <paramref name="connectionString" /> に基づいて、<see cref="T:System.Data.SqlClient.SqlConnection" /> の新しいインスタンスを初期化して開きます。 コンストラクターは、<see cref="T:System.Data.SqlClient.SqlConnection" /> を使用して、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 接続は、一括コピー操作の最後に自動的に閉じられます。  
  
 場合`connectionString`が null の場合、<xref:System.ArgumentNullException>がスローされます。 場合`connectionString`は空の文字列、<xref:System.ArgumentException>がスローされます。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、文字列として指定する接続を使用して一括で読み込む方法を示します。 接続を閉じるときに自動的に、<xref:System.Data.SqlClient.SqlBulkCopy>インスタンスが閉じています。  
  
 この例では、ソース データが最初に SQL Server テーブルから読み取る、<xref:System.Data.SqlClient.SqlDataReader>インスタンス。 ソース データを SQL Server; 上にある必要はありません。読み取ることができる任意のデータ ソースを使用することができます、<xref:System.Data.IDataReader>に読み込まれたまたは、<xref:System.Data.DataTable>します。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">SQL Server でのバルク コピー操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> インスタンスで使用するために開かれる接続を定義する文字列。 接続文字列で <see langword="Integrated Security = true" /> が使用されない場合、<see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> または <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> と <see cref="T:System.Data.SqlClient.SqlCredential" /> を使用して、接続文字列内にテキストとしてユーザー ID とパスワードを指定する場合よりも安全にユーザー ID とパスワードを渡すことができます。</param>
        <param name="copyOptions">コピー先のテーブルにコピーするデータ ソース行を決定する、<see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 列挙型の値の組み合わせ。</param>
        <summary>指定された <paramref name="connectionString" /> に基づいて、<see cref="T:System.Data.SqlClient.SqlConnection" /> の新しいインスタンスを初期化して開きます。 コンストラクターは、<see cref="T:System.Data.SqlClient.SqlConnection" /> を使用して、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。 <see cref="T:System.Data.SqlClient.SqlConnection" /> インスタンスは、<paramref name="copyOptions" /> パラメーターで指定したオプションに従って動作します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての一括コピー オプションについて詳細な情報を取得できます、<xref:System.Data.SqlClient.SqlBulkCopyOptions>トピック。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、文字列として指定された接続を使用して、一括読み込みを実行する方法を示します。 変換先テーブルを読み込むときに、ソース テーブルの id 列の値を使用するオプションが設定されます。 この例では、ソース データが最初に SQL Server テーブルから読み取る、<xref:System.Data.SqlClient.SqlDataReader>インスタンス。 ソース テーブルと変換先テーブルには、Id 列が含まれます。 既定で新しい値を**Identity**行が追加される各変換先テーブルの列が生成されます。 この例で、オプションが設定を使用する一括読み込み処理を強制する、接続が開かれたときに、 **Identity**代わりに、ソース テーブルから値します。 オプションが、サンプルを実行する方法、一括読み込みの動作を変更する方法を表示する、 **dbo します。BulkCopyDemoMatchingColumns**空テーブル。 すべての行は、ソースから読み込みます。 テーブルを空にせずに、サンプルをもう一度し実行します。 例外がスローされ、コードは、主キー制約違反のための行が追加されなかったことを通知するコンソールにメッセージを書き込みます。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">一括コピーを実行するために使用される、既に開いている <see cref="T:System.Data.SqlClient.SqlConnection" /> インスタンス。 接続文字列で <see langword="Integrated Security = true" /> を使用しない場合、<see cref="T:System.Data.SqlClient.SqlCredential" /> を使用することによって、接続文字列内でユーザー ID とパスワードをテキストとして指定する場合よりも安全にユーザー ID とパスワードを渡すことができます。</param>
        <param name="copyOptions">コピー先のテーブルにコピーするデータ ソース行を決定する、<see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 列挙型の値の組み合わせ。</param>
        <param name="externalTransaction">一括コピーが実行される既存の <see cref="T:System.Data.SqlClient.SqlTransaction" /> インスタンス。</param>
        <summary><see cref="T:System.Data.SqlClient.SqlConnection" /> の指定された既存のオープン インスタンスを使用して、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> インスタンスは、<paramref name="copyOptions" /> パラメーターで指定したオプションに従って動作します。 null 以外の <see cref="T:System.Data.SqlClient.SqlTransaction" /> が指定された場合、コピー操作はトランザクション内で実行されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オプションがあります。 場合`UseInternalTransaction`と`externalTransaction`引数が null でない、 **InvalidArgumentException**がスローされます。  
  
 使用する方法を示す例について`SqlBulkCopy`トランザクションでは、次を参照してください。[トランザクションとバルク コピー操作](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>各バッチ内の行数。 各バッチの最後に、バッチの行がサーバーに送信されます。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> プロパティの整数値。値が設定されていない場合は 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 バッチが完了すると<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>行が処理された、または変換先のデータ ソースに送信する行がありません。  
  
 (既定値) が各を示すゼロ<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作が 1 つのバッチ。  
  
 場合、<xref:System.Data.SqlClient.SqlBulkCopy>インスタンスなしで宣言されていますが、<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>オプション実際には、行は、サーバーに送信されます<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>時間がないトランザクション関連のアクションで行が取得されます。 場合<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>は実際には行の各バッチが個別のトランザクションとして挿入されます。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>プロパティは、いつでもでも設定できます。 一括コピーが進行中の場合、前のバッチ サイズに応じて、現在のバッチのサイズします。 以降のバッチでは、新しいサイズを使用します。 場合、 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 0 は、最初と中に変更された、<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作が既に進行中、操作が 1 つのバッチとしてデータを読み込みます。 その後<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>で同じ操作<xref:System.Data.SqlClient.SqlBulkCopy>インスタンスを使用して、新しい<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>します。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、50 行のバッチに一括で読み込む方法を示します。 示したサンプルをどのように<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>トランザクションとの連携を参照してください[トランザクションとバルク コピー操作](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)します。  
  
 この例では、ソース データが最初に SQL Server テーブルから読み取る、<xref:System.Data.SqlClient.SqlDataReader>インスタンス。 ソース データを SQL Server; 上にある必要はありません。読み取ることができる任意のデータ ソースを使用することができます、<xref:System.Data.IDataReader>に読み込まれたまたは、<xref:System.Data.DataTable>します。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">SQL Server でのバルク コピー操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイムアウトになる前に操作が完了するまでの秒数。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> プロパティの整数値。 既定値は 30 秒です。 値 0 は無制限を意味します。一括コピーは無期限に待機します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 操作がタイムアウトになる場合、トランザクションをコミットしないと、変換先テーブルからすべての行のコピーが削除されます。  
  
   
  
## Examples  
 次のコンソール アプリケーションは、60 秒間にタイムアウトを変更する方法を示します一括データの読み込みをする場合。  
  
 この例では、ソース データが最初に SQL Server テーブルから読み取る、<xref:System.Data.SqlClient.SqlDataReader>インスタンス。 ソース データを SQL Server; 上にある必要はありません。読み取ることができる任意のデータ ソースを使用することができます、<xref:System.Data.IDataReader>に読み込まれたまたは、<xref:System.Data.DataTable>します。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に使用元と変換先のテーブルが同じ SQL Server インスタンスにいる場合は、 [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> インスタンスを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出した後、<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>上、<xref:System.Data.SqlClient.SqlBulkCopy>オブジェクト、その他の操作が成功しません。 呼び出し、<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>メソッドがスローされます、<xref:System.InvalidOperationException>します。  
  
 呼び出す、<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>からメソッド、<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>イベントによって、<xref:System.InvalidOperationException>がスローされます。  
  
 開いているに注意してください<xref:System.Data.SqlClient.SqlBulkCopy>の最後のインスタンスが暗黙的に閉じられて、`using`ブロックします。  
  
   
  
## Examples  
 次の例は、同じ<xref:System.Data.SqlClient.SqlBulkCopy>2 つの変換先テーブルに販売注文とその関連する詳細を追加するインスタンス。 **AdventureWorks** sales order テーブルが大きく、サンプルは、特定のアカウント番号で注文のみを読み取り、変換先テーブルに一括コピーして詳細。 <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>メソッドは、両方の一括コピー操作が完了した後にのみ使用されます。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> は項目のコレクションを返します。 列マッピングは、データ ソース中の列とターゲット中の列の間の関係を定義します。</summary>
        <value>列マッピングのコレクション。 既定では、空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データ ソースと変換先テーブルに含まれる列数の同じと、データ ソース内の各ソース列の序数位置に対応する先の列の序数位置が一致する場合、<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>コレクションが必要ではありません。 ただし、列数が異なる場合、または序数の位置に一貫性がありません、する必要がありますを使用して、<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>を正しい列にデータがコピーされることを確認します。  
  
 一括コピー操作の実行中に、このコレクションにアクセスできるが、変更することはできません。 変更しようとすると、スロー、<xref:System.InvalidOperationException>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー上の宛先テーブルの名前。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティの文字列値。または、値が指定されていない場合は null。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>が設定されていない場合に<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>が呼び出される、<xref:System.ArgumentNullException>がスローされます。  
  
 場合<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>が変更されたときに、<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作が実行されている、変更では、現在の操作には影響しません。 新しい<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>値が、次回使用、<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>メソッドが呼び出されます。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 3 つの部分名は、(`<database>.<owningschema>.<name>`)。 選択した場合、そのデータベースと所有しているスキーマでテーブル名を修飾することができます。 ただし、テーブル名がアンダー スコア (「_」) またはその他の特殊文字を使用する場合は、ように角かっこで囲んでを使用して、名前をエスケープする必要があります (`[<database>.<owningschema>.<name_01>]`)。 詳細については、次を参照してください。[データベース識別子](/sql/relational-databases/databases/database-identifiers)します。  
  
 などの値を使用して、一時テーブルにデータを一括コピーすることができます`tempdb..#table`または`tempdb.<owner>.#table`の<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>プロパティ。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、データの一括読み込みは既に開いている接続を使用する方法を示します。 対象のテーブルが内のテーブル、 **AdventureWorks**データベース。  
  
 この例で、接続が最初に SQL Server テーブルからデータを読み取る使用、<xref:System.Data.SqlClient.SqlDataReader>インスタンス。 ソース データを SQL Server; 上にある必要はありません。読み取ることができる任意のデータ ソースを使用することができます、<xref:System.Data.IDataReader>に読み込まれたまたは、<xref:System.Data.DataTable>します。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.IDataReader" /> オブジェクトからデータをストリーミングする <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトを有効または無効にします。</summary>
        <value><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトが <see cref="T:System.Data.IDataReader" /> オブジェクトからデータをストリーミングできる場合は <see langword="true" />。それ以外の場合は false。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに<xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A>は`true`、<xref:System.Data.SqlClient.SqlBulkCopy>から読み取り、<xref:System.Data.IDataReader>オブジェクトを使用して<xref:System.Data.CommandBehavior.SequentialAccess>、メモリ使用量の最適化を使用して、<xref:System.Data.IDataReader>ストリーミング機能。 False に設定されている場合、<xref:System.Data.SqlClient.SqlBulkCopy>クラスによって返されるすべてのデータを読み込み、 <xref:System.Data.IDataReader> SQL Server または SQL Azure に送信する前にメモリにオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通知イベントを生成する前に処理する行の数を定義します。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> プロパティの整数値。プロパティが設定されていない場合は 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、一括コピー操作の進行状況を示すユーザー インターフェイス コンポーネント向けです。 通知イベントを生成する前に処理する行の数を示します。 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>が進行中で、一括コピー操作中であっても、いつでもでもプロパティを設定できます。 一括コピー操作中に行われた変更は、[次へ] の通知後にも反映されます。 新しい設定は、同じインスタンス上の後続のすべての操作に適用されます。  
  
 場合<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>0 より小さい数値に設定するには、<xref:System.ArgumentOutOfRangeException>がスローされます。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、データの一括読み込みは既に開いている接続を使用する方法を示します。 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>ごとの 50 行がテーブルにコピーされた後、イベント ハンドラーが呼び出されるように、プロパティを設定します。  
  
 この例で、接続が最初に SQL Server テーブルからデータを読み取る使用、<xref:System.Data.SqlClient.SqlDataReader>インスタンス。 一括コピー データを 2 番目の接続を開きます。 SQL Server; に配置されているソース データがないことに注意してください。読み取ることができる任意のデータ ソースを使用することができます、<xref:System.Data.IDataReader>に読み込まれたまたは、<xref:System.Data.DataTable>します。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> プロパティによって指定された行数が処理されるたびに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 なお、設定の<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>と<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>は独立しています。 受信確認を<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>イベントはすべての行がサーバーに送信またはコミットされたことを意味しません。  
  
 SqlBulkCopy.Close を呼び出すことはできません (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) または SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) このイベントから。 これにより、<xref:System.InvalidOperationException>スローされると、<xref:System.Data.SqlClient.SqlBulkCopy>オブジェクトの状態は変更されません。 ユーザーが、イベントから、操作をキャンセルする場合、<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>のプロパティ、<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs>ことができます。 (を参照してください[トランザクションとバルク コピー操作](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)を使用する例については、<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>プロパティです)。  
  
 一括コピー操作の実行中に、接続でトランザクションのアクティビティなどの操作はサポートされていませんし、使用中に、同じ接続を使用しないことをお勧め、<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>イベント。 ただし、別の接続を開くことができます。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、データの一括読み込みは既に開いている接続を使用する方法を示します。 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>ごとの 50 行がテーブルにコピーされた後、イベント ハンドラーが呼び出されるように、プロパティを設定します。  
  
 この例で、接続が最初に SQL Server テーブルからデータを読み取る使用、<xref:System.Data.SqlClient.SqlDataReader>インスタンス。 SQL Server; に配置されているソース データがないことに注意してください。読み取ることができる任意のデータ ソースを使用することができます、<xref:System.Data.IDataReader>に読み込まれたまたは、<xref:System.Data.DataTable>します。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlBulkCopy> を使い終わったら、`Dispose`を呼び出します。 `Dispose`メソッドによって、<xref:System.Data.SqlClient.SqlBulkCopy> は使用不可の状態になります。 `Dispose`呼び出し後は、<xref:System.Data.SqlClient.SqlBulkCopy>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Data.SqlClient.SqlBulkCopy> へのすべての参照を解放する必要があります。  
  
 詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。  
  
> [!NOTE]
>  <xref:System.Data.SqlClient.SqlBulkCopy>への最後の参照を解放する前に、必ず`Dispose`を呼び出してください。 そうしないと、ガベージ コレクターが <xref:System.Data.SqlClient.SqlBulkCopy> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データ ソースから、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定された宛先のテーブルにすべての行をコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、複数のアクティブな結果セット (MARS) が無効になっている<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>ビジー状態の接続を作成します。 MARS が有効になっている場合への呼び出しをインターリーブできます<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>同じ接続での他のコマンドを使用します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">行が宛先テーブルにコピーされる <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <summary>示された <see cref="T:System.Data.Common.DbDataReader" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにすべての行をコピーします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">コピー先テーブルにコピーされる <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <summary>示された <see cref="T:System.Data.DataRow" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにすべての行をコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一括コピー操作の進行中は、関連付けられている変換先<xref:System.Data.SqlClient.SqlConnection>は、ビジー状態のサービスとの接続で他の操作を実行されません。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>コレクションから、マップ、<xref:System.Data.DataRow>先のデータベース テーブルに列。  
  
   
  
## Examples  
 次のコンソール アプリケーションから一括で読み込む方法を示します、<xref:System.Data.DataRow>配列。 対象のテーブルが内のテーブル、 **AdventureWorks**データベース。  
  
 この例で、<xref:System.Data.DataTable>実行時に作成されます。 1 つの行が選択されて、<xref:System.Data.DataTable>変換先テーブルにコピーします。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">行が宛先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <summary>指定された <see cref="T:System.Data.DataTable" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定される宛先テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての行、<xref:System.Data.DataTable>削除されたものを除き、変換先テーブルにコピーされます。  
  
 一括コピー操作の進行中は、関連付けられている変換先<xref:System.Data.SqlClient.SqlConnection>は、ビジー状態のサービスとの接続で他の操作を実行されません。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>コレクションから、マップ、<xref:System.Data.DataTable>先のデータベース テーブルに列。  
  
   
  
## Examples  
 次のコンソール アプリケーションから一括で読み込む方法を示します、<xref:System.Data.DataTable>します。 対象のテーブルが内のテーブル、 **AdventureWorks**データベース。  
  
 この例で、<xref:System.Data.DataTable>実行時に作成され、ソース、`SqlBulkCopy`操作。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">行が宛先テーブルにコピーされる <see cref="T:System.Data.IDataReader" />。</param>
        <summary>指定された <see cref="T:System.Data.IDataReader" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定される宛先テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コピー操作は、リーダーで使用可能な次の行から開始されます。 ほとんどの場合、リーダーはでは返されただけ<xref:System.Data.IDbCommand.ExecuteReader%2A>または同様の呼び出し、[次へ] の使用可能な行が最初の行であるためです。 複数の結果を処理するには、呼び出す<xref:System.Data.IDataReader.NextResult%2A>呼び出し、データ リーダーで<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>もう一度です。  
  
 使用して<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>リーダーの状態を変更します。 メソッドを呼び出す<xref:System.Data.IDataReader.Read%2A>まで、false を返す、操作を中止すると、またはエラーが発生します。 つまり、データ リーダーが、結果セットの最後におそらく、別の状態に含まれるときに、<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作が完了しました。  
  
 一括コピー操作の進行中は、関連付けられている変換先<xref:System.Data.SqlClient.SqlConnection>は、ビジー状態のサービスとの接続で他の操作を実行されません。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>コレクション データからリーダー列、移行先データベース テーブルにマップします。  
  
   
  
## Examples  
 次のコンソール アプリケーションから一括で読み込む方法を示します、<xref:System.Data.SqlClient.SqlDataReader>します。 対象のテーブルが内のテーブル、 **AdventureWorks**データベース。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">行が宛先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 列挙体の値。 行の状態に一致する行のみが、コピー先にコピーされます。</param>
        <summary>提供された <see cref="T:System.Data.DataTable" /> 内の提供された行の状態と一致する行のみを、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定されたコピー先のテーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の行のみ、<xref:System.Data.DataTable>に示されている状態である、`rowState`引数が削除されていないと、変換先テーブルにコピーされます。  
  
> [!NOTE]
>  場合<xref:System.Data.DataRowState.Deleted>が指定されている任意<xref:System.Data.DataRowState.Unchanged>、 <xref:System.Data.DataRowState.Added>、および<xref:System.Data.DataRowState.Modified>行は、サーバーにもコピーされます。 例外は発生しません。  
  
 一括コピー操作の進行中は、関連付けられている変換先<xref:System.Data.SqlClient.SqlConnection>は、ビジー状態のサービスとの接続で他の操作を実行されません。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>コレクションから、マップ、<xref:System.Data.DataTable>先のデータベース テーブルに列。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、一括読み込みの行のみ、<xref:System.Data.DataTable>指定した状態に一致します。 この場合、変更されていない行のみが追加されます。 対象のテーブルが内のテーブル、 **AdventureWorks**データベース。  
  
 この例で、<xref:System.Data.DataTable>実行時、3 つが作成された行が追加されます。 前に、<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>メソッドが実行され、行のいずれかを編集します。 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>メソッドを呼び出すと、 `DataRowState.Unchanged` `rowState`引数、変更されていない 2 つの行のみがコピー先に一括コピーします。  
  
> [!IMPORTANT]
>  このサンプルでは」の説明に従って、作業テーブルを作成していない限りは実行されません[バルク コピー サンプルのセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)します。 使用する構文を示すためにこのコードが提供される**SqlBulkCopy**のみです。 簡単かつ迅速に TRANSACT-SQL の使用が元と変換先のテーブルが同じ SQL Server インスタンスである場合は、`INSERT … SELECT`ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期バージョンの <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />。データ ソースのすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定された宛先テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、複数のアクティブな結果セット (MARS) が無効になっている<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>ビジー状態の接続を作成します。 MARS が有効になっている場合への呼び出しをインターリーブできます<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>同じ接続での他のコマンドを使用します。  
  
 1 つが失敗したときにロールバックが行の数は、いくつかの方法によって異なります。  
  
-   場合<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>を指定します。  
  
-   独自のトランザクションの場合は。  
  
-   <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> の値。  
  
 サーバーの現在のバッチにデータを送信中にエラーがある場合 (で指定された<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) はロールバックされます。 場合<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>が指定されていない独自のトランザクションがあるとは、トランザクション全体がロールバック (をすべての以前バッチを含む)。  
  
 使用<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>サーバーにコピーされた行の数を把握します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">行が宛先テーブルにコピーされる <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />。指定された <see cref="T:System.Data.Common.DbDataReader" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定されたコピー先テーブルにすべての行をコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">コピー先テーブルにコピーされる <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。指定された <see cref="T:System.Data.DataRow" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定されたコピー先テーブルにすべての行をコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework Data provider for SQL Server の非同期プログラミングの詳細については、次を参照してください。[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> を複数回呼び出す。  
  
タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> を呼び出す。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> の実行中に、接続が切断または閉じられます。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">行が宛先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。示された <see cref="T:System.Data.DataTable" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework Data provider for SQL Server の非同期プログラミングの詳細については、次を参照してください。[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> を複数回呼び出す。  
  
タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> を呼び出す。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> の実行中に、接続が切断または閉じられます。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">行が宛先テーブルにコピーされる <see cref="T:System.Data.IDataReader" />。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。示された <see cref="T:System.Data.IDataReader" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework Data provider for SQL Server の非同期プログラミングの詳細については、次を参照してください。[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> を複数回呼び出す。  
  
タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> を呼び出す。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> の実行中に、接続が切断または閉じられます。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられます。  
  
完了した <see cref="T:System.Threading.Tasks.Task" /> が返される前に、<see cref="T:System.Data.IDataReader" /> が閉じられました。  
  
完了した <see cref="T:System.Threading.Tasks.Task" /> が返される前に、<see cref="T:System.Data.IDataReader" /> の関連付けられている接続が閉じられました。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">行が宛先テーブルにコピーされる <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値は、このメソッドを <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" /> と同じにします。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />。指定された <see cref="T:System.Data.Common.DbDataReader" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定されたコピー先テーブルにすべての行をコピーします。</summary>
        <returns><see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rows">コピー先テーブルにコピーされる <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値は、このメソッドを <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じにします。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。指定された <see cref="T:System.Data.DataRow" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定されたコピー先テーブルにすべての行をコピーします。  
  
キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄するように要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework Data provider for SQL Server の非同期プログラミングの詳細については、次を参照してください。[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> を複数回呼び出す。  
  
タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> を呼び出す。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> の実行中に、接続が切断または閉じられます。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">行が宛先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 列挙体の値。 行の状態に一致する行のみが、コピー先にコピーされます。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。提供された <see cref="T:System.Data.DataTable" /> 内の提供された行の状態と一致する行のみを、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定されたコピー先のテーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework Data provider for SQL Server の非同期プログラミングの詳細については、次を参照してください。[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> を複数回呼び出す。  
  
タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> を呼び出す。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> の実行中に、接続が切断または閉じられます。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">行が宛先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値は、このメソッドを <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じにします。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。示された <see cref="T:System.Data.DataTable" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにコピーします。  
  
キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄するように要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework Data provider for SQL Server の非同期プログラミングの詳細については、次を参照してください。[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> を複数回呼び出す。  
  
タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> を呼び出す。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> の実行中に、接続が切断または閉じられます。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">行が宛先テーブルにコピーされる <see cref="T:System.Data.IDataReader" />。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値は、このメソッドを <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じにします。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。示された <see cref="T:System.Data.IDataReader" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにコピーします。  
  
キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄するように要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework Data provider for SQL Server の非同期プログラミングの詳細については、次を参照してください。[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> を複数回呼び出す。  
  
タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> を呼び出す。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> の実行中に、接続が切断または閉じられます。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられます。  
  
完了した <see cref="T:System.Threading.Tasks.Task" /> が返される前に、<see cref="T:System.Data.IDataReader" /> が閉じられました。  
  
完了した <see cref="T:System.Threading.Tasks.Task" /> が返される前に、<see cref="T:System.Data.IDataReader" /> の関連付けられている接続が閉じられました。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">行が宛先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 列挙体の値。 行の状態に一致する行のみが、コピー先にコピーされます。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値は、このメソッドを <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じにします。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。提供された <see cref="T:System.Data.DataTable" /> 内の提供された行の状態と一致する行のみを、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定されたコピー先のテーブルにコピーします。  
  
キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄するように要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework Data provider for SQL Server の非同期プログラミングの詳細については、次を参照してください。[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> を複数回呼び出す。  
  
タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> を呼び出す。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> の実行中に、接続が切断または閉じられます。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
  </Members>
</Type>