<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4caaf2e6bb3af18f4c4cf0168456a2dbe1ee0d16" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69123652" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>SQL Server のテーブルに対し、他のソースからのデータを効率よく一括読み込みできます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server には、1台のサーバーでもサーバー間でも、あるテーブルから別のテーブルにデータを移動するための**bcp**という一般的なコマンドプロンプトユーティリティが含まれています。 クラス<xref:System.Data.SqlClient.SqlBulkCopy>を使用すると、同様の機能を提供するマネージコードソリューションを作成できます。 SQL Server テーブル (INSERT ステートメントなど) にデータを読み込む方法は他にもありますが<xref:System.Data.SqlClient.SqlBulkCopy> 、それに比べてパフォーマンスが非常に優れています。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> クラスを使用すると、SQL Server のテーブルにのみデータを書き込むことができます。 ただし、データソースは SQL Server に限定されません。データを<xref:System.Data.DataTable>インスタンスに読み込んだり、 <xref:System.Data.IDataReader>インスタンスで読み取ることができる限り、任意のデータソースを使用できます。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy>型が SQL Server 2008 に追加<xref:System.Data.DataTable>された<xref:System.Data.SqlTypes.SqlDateTime>日付/時刻型の1つである SQL Server 列に型の列を一括で読み込むと、は失敗します。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、<xref:System.Data.SqlClient.SqlBulkCopy> クラスを使用してデータを読み込む方法について示しています。 この例では、 <xref:System.Data.SqlClient.SqlDataReader> SQL Server **AdventureWorks**データベースの**Production**テーブルから、同じデータベース内の同様のテーブルにデータをコピーするために、が使用されています。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">既に接続の確立されている <see cref="T:System.Data.SqlClient.SqlConnection" /> のインスタンス。一括コピー操作を実行するために使用されます。 接続文字列が <see langword="Integrated Security = true" /> を使用しない場合は、<see cref="T:System.Data.SqlClient.SqlCredential" /> を使用すると、ユーザー ID とパスワードを接続文字列内のテキストとして指定する場合よりも安全に、ユーザー ID とパスワードを渡すことができます。</param>
        <summary>既に接続の確立されている <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> のインスタンスを使用し、<see cref="T:System.Data.SqlClient.SqlConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlBulkCopy>インスタンスが初期化されると接続は既に開かれているため、 <xref:System.Data.SqlClient.SqlBulkCopy>インスタンスを閉じた後も接続は開いたままです。  
  
 引数が null <xref:System.ArgumentNullException>の場合は、がスローされます。 `connection`  
  
   
  
## Examples  
 次のコンソールアプリケーションは、既に開いている接続を使用してデータを一括読み込みする方法を示しています。 この例では、 <xref:System.Data.SqlClient.SqlDataReader> SQL Server **AdventureWorks**データベースの**Production**テーブルから、同じデータベース内の同様のテーブルにデータをコピーするために、が使用されています。 この例は、デモンストレーション目的のみで提供されます。 を使用`SqlBulkCopy`して、実稼働アプリケーションの同じデータベース内のあるテーブルから別のテーブルにデータを移動することはできません。 ソースデータが SQL Server に配置されている必要はないことに注意してください。に読み取る<xref:System.Data.IDataReader>ことができる任意のデータソース、または<xref:System.Data.DataTable>に読み込むことができる任意のデータソースを使用できます。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">接続を定義する文字列。これによって確立された接続が、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> のインスタンスによって使用されます。 接続文字列が <see langword="Integrated Security = true" /> を使用しない場合は、<see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> または <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> と <see cref="T:System.Data.SqlClient.SqlCredential" /> を使用すると、ユーザー ID とパスワードを接続文字列内のテキストとして指定する場合よりも安全に、ユーザー ID とパスワードを渡すことができます。</param>
        <summary>指定された <paramref name="connectionString" /> に基づいて、<see cref="T:System.Data.SqlClient.SqlConnection" /> の新しいインスタンスを初期化し、接続を確立します。 このコンストラクターは、<see cref="T:System.Data.SqlClient.SqlConnection" /> を使用して、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この接続は、一括コピー操作の終了時に自動的に閉じられます。  
  
 が`connectionString` null<xref:System.ArgumentNullException>の場合は、がスローされます。 が`connectionString`空の文字列<xref:System.ArgumentException>の場合は、がスローされます。  
  
   
  
## Examples  
 次のコンソールアプリケーションは、文字列として指定された接続を使用してデータを一括読み込みする方法を示しています。 <xref:System.Data.SqlClient.SqlBulkCopy>インスタンスが閉じられると、接続は自動的に閉じられます。  
  
 この例では、最初にソースデータが SQL Server テーブルから<xref:System.Data.SqlClient.SqlDataReader>インスタンスに読み取られます。 ソースデータが SQL Server に配置されている必要はありません。に読み取る<xref:System.Data.IDataReader>ことができる任意のデータソース、または<xref:System.Data.DataTable>に読み込むことができる任意のデータソースを使用できます。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">SQL Server でのバルク コピー操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">接続を定義する文字列。これによって確立された接続が、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> のインスタンスによって使用されます。 接続文字列が <see langword="Integrated Security = true" /> を使用しない場合は、<see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> または <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> と <see cref="T:System.Data.SqlClient.SqlCredential" /> を使用すると、ユーザー ID とパスワードを接続文字列内のテキストとして指定する場合よりも安全に、ユーザー ID とパスワードを渡すことができます。</param>
        <param name="copyOptions">コピー先のテーブルにコピーするデータ ソース行を決定する、<see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 列挙型の値の組み合わせ。</param>
        <summary>指定された <paramref name="connectionString" /> に基づいて、<see cref="T:System.Data.SqlClient.SqlConnection" /> の新しいインスタンスを初期化し、接続を確立します。 このコンストラクターは、<see cref="T:System.Data.SqlClient.SqlConnection" /> を使用して、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。 <see cref="T:System.Data.SqlClient.SqlConnection" /> のインスタンスは、<paramref name="copyOptions" /> パラメーターに指定されたオプションに従って動作します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての一括コピーオプションの詳細については、 <xref:System.Data.SqlClient.SqlBulkCopyOptions> 「」を参照してください。  
  
   
  
## Examples  
 次のコンソールアプリケーションは、文字列として指定された接続を使用して一括読み込みを実行する方法を示しています。 変換先テーブルを読み込むときに、ソーステーブルの id 列の値を使用するようにオプションが設定されています。 この例では、最初にソースデータが SQL Server テーブルから<xref:System.Data.SqlClient.SqlDataReader>インスタンスに読み取られます。 ソーステーブルとターゲットテーブルにはそれぞれ、Id 列が含まれています。 既定では、追加された行ごとに、 **id**列の新しい値がコピー先テーブルに生成されます。 この例では、接続を開いたときにオプションを設定して、一括読み込みプロセスがソーステーブルからの**id**値を強制的に使用するようにします。 オプションが一括読み込みの動作方法をどのように変更するかを確認するには、dbo でサンプルを実行し**ます。BulkCopyDemoMatchingColumns**テーブルが空です。 ソースからすべての行が読み込まれます。 次に、テーブルを空にせずに、サンプルを再度実行します。 例外がスローされ、主キー制約違反が原因で行が追加されていないことを通知するメッセージが、コードによってコンソールに書き込まれます。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">既に接続の確立されている <see cref="T:System.Data.SqlClient.SqlConnection" /> のインスタンス。一括コピーを実行するために使用されます。 接続文字列で <see langword="Integrated Security = true" />を使用しない場合、 <see cref="T:System.Data.SqlClient.SqlCredential" /> を使用することによって、接続文字列内でユーザー ID とパスワードをテキストとして指定する場合よりも安全にユーザー ID とパスワードを渡すことができます。</param>
        <param name="copyOptions">コピー先のテーブルにコピーするデータ ソース行を決定する、<see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 列挙型の値の組み合わせ。</param>
        <param name="externalTransaction">一括コピーを実行する既存の <see cref="T:System.Data.SqlClient.SqlTransaction" /> インスタンス。</param>
        <summary>既に接続の確立されている <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> のインスタンスを使用し、<see cref="T:System.Data.SqlClient.SqlConnection" /> クラスの新しいインスタンスを初期化します。 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> のインスタンスは、<paramref name="copyOptions" /> パラメーターに指定されたオプションに従って動作します。 指定された <see cref="T:System.Data.SqlClient.SqlTransaction" /> が null でなければ、トランザクション内でコピー操作が実行されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オプションがに`UseInternalTransaction`含ま`externalTransaction`れ、引数が null でない場合は、 **InvalidArgumentException**がスローされます。  
  
 トランザクションでを使用`SqlBulkCopy`する方法を示す例については、「[トランザクションと一括コピーの操作](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッチごとに処理される行数。 各バッチ処理の最後に、そこで処理された行がサーバーに送信されます。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> プロパティの整数値。値が設定されなかった場合はゼロ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 バッチは、行が<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>処理されたとき、または変換先のデータソースに送信する行がなくなったときに完了します。  
  
 ゼロ (既定値) は、各<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作が1つのバッチであることを示します。  
  
 オプションを有効に<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> <xref:System.Data.SqlClient.SqlBulkCopy>せずにインスタンスが宣言されている場合、行は一度にサーバー行に送信されますが、トランザクション関連のアクションは実行され<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>ません。 が<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>有効になっている場合は、各行のバッチが個別のトランザクションとして挿入されます。  
  
 プロパティ<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>は、いつでも設定できます。 一括コピーが既に進行中の場合、現在のバッチは前のバッチサイズに従ってサイズが変更されます。 後続のバッチでは、新しいサイズが使用されます。 が最初<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>にゼロで、 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作が既に進行中のときに変更された場合、その操作はデータを1つのバッチとして読み込みます。 同じ<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> インスタンスに対する後続の操作では、新しいが使用されます。<xref:System.Data.SqlClient.SqlBulkCopy>  
  
   
  
## Examples  
 次のコンソールアプリケーションは、50行のバッチでデータを一括読み込みする方法を示しています。 がトランザクションを操作する<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>方法を示す例については、「[トランザクションと一括コピーの操作](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)」を参照してください。  
  
 この例では、最初にソースデータが SQL Server テーブルから<xref:System.Data.SqlClient.SqlDataReader>インスタンスに読み取られます。 ソースデータが SQL Server に配置されている必要はありません。に読み取る<xref:System.Data.IDataReader>ことができる任意のデータソース、または<xref:System.Data.DataTable>に読み込むことができる任意のデータソースを使用できます。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">SQL Server でのバルク コピー操作</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>操作がタイムアウトするまでの秒数。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> プロパティの整数値。 既定値は 30 秒です。 0 という値は、無制限を示します。バルク コピーは無期限に待機します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 操作がタイムアウトになると、トランザクションはコミットされず、コピーされたすべての行がコピー先テーブルから削除されます。  
  
   
  
## Examples  
 次のコンソールアプリケーションは、データの一括読み込み時にタイムアウトを60秒に変更する方法を示しています。  
  
 この例では、最初にソースデータが SQL Server テーブルから<xref:System.Data.SqlClient.SqlDataReader>インスタンスに読み取られます。 ソースデータが SQL Server に配置されている必要はありません。に読み取る<xref:System.Data.IDataReader>ことができる任意のデータソース、または<xref:System.Data.DataTable>に読み込むことができる任意のデータソースを使用できます。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、ステートメントを[!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT`使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> インスタンスを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトでを<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>呼び出した後、他の操作は成功しません。 <xref:System.Data.SqlClient.SqlBulkCopy> <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>メソッドを呼び出すと、が<xref:System.InvalidOperationException>スローされます。  
  
 イベントからメソッドを呼び出すと、 <xref:System.InvalidOperationException>がスローされます。 <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>  
  
 開い<xref:System.Data.SqlClient.SqlBulkCopy>ているインスタンスは、 `using`ブロックの最後に暗黙的に閉じられることに注意してください。  
  
   
  
## Examples  
 次の例では、 <xref:System.Data.SqlClient.SqlBulkCopy>同じインスタンスを使用して、2つの変換先テーブルに販売注文とそれに関連する詳細を追加します。 **AdventureWorks** sales order テーブルが大きいため、このサンプルでは、特定の勘定番号によって配置された注文のみを読み取り、その注文と詳細をコピー先テーブルに一括コピーします。 メソッド<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>は、両方の一括コピー操作が完了した後にのみ使用されます。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> は項目のコレクションを返します。 列マッピングは、データ ソース中の列とターゲット中の列の間の関係を定義します。</summary>
        <value>列マッピングのコレクション。 既定では、空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データソースとコピー先のテーブルの列数が同じで、データソース内の各ソース列の序数位置が、対応する変換先列の序数位置と一致する場合<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 、コレクションは不要です。 ただし、列数が異なる場合、または序数位置が一致しない場合は、 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>を使用して、データが正しい列にコピーされるようにする必要があります。  
  
 一括コピー操作の実行中は、このコレクションにアクセスできますが、変更することはできません。 これを変更しようとすると<xref:System.InvalidOperationException>、がスローされます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー上のコピー先テーブルの名前。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティの文字列値。何も指定されていない場合は null。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 呼び出さ<xref:System.ArgumentNullException>れたときにが設定されていない場合は、がスローされます。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>の実行中にが変更された場合、変更は現在の操作には影響しません。 新しい<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>値は、次に<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>メソッドが呼び出されたときに使用されます。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>は、3部構成の名前`<database>.<owningschema>.<name>`() です。 選択した場合は、テーブル名をデータベースと所有するスキーマで修飾できます。 ただし、テーブル名にアンダースコア ("_") やその他の特殊文字が使用されている場合は、(`[<database>.<owningschema>.<name_01>]`) のように、前後の角かっこを使用して名前をエスケープする必要があります。 詳細については、「[データベース識別子](/sql/relational-databases/databases/database-identifiers)」を参照してください。  
  
 プロパティに`tempdb..#table`は、や`tempdb.<owner>.#table`などの値を使用して、一時テーブルにデータを一括コピーできます。 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>  
  
   
  
## Examples  
 次のコンソールアプリケーションは、既に開いている接続を使用してデータを一括読み込みする方法を示しています。 コピー先のテーブルは、 **AdventureWorks**データベースのテーブルです。  
  
 この例では、最初に接続を使用して、SQL Server テーブルから<xref:System.Data.SqlClient.SqlDataReader>インスタンスにデータを読み取ります。 ソースデータが SQL Server に配置されている必要はありません。に読み取る<xref:System.Data.IDataReader>ことができる任意のデータソース、または<xref:System.Data.DataTable>に読み込むことができる任意のデータソースを使用できます。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトによる <see cref="T:System.Data.IDataReader" /> オブジェクトからのデータのストリームを有効または無効にします</summary>
        <value><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトが <see cref="T:System.Data.IDataReader" /> オブジェクトからデータをストリーム転送できる場合は <see langword="true" />。それ以外の場合は false。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が<xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A>の`true`場合、<xref:System.Data.SqlClient.SqlBulkCopy>はを<xref:System.Data.IDataReader>使用し<xref:System.Data.CommandBehavior.SequentialAccess>てオブジェクトから読み取り、 <xref:System.Data.IDataReader>ストリーミング機能を使用してメモリ使用量を最適化します。 False に設定されている場合<xref:System.Data.SqlClient.SqlBulkCopy> 、クラスは、SQL Server または SQL Azure <xref:System.Data.IDataReader>に送信する前に、オブジェクトから返されるすべてのデータをメモリに読み込みます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通知イベントを生成するまでに処理する行数を定義します。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> プロパティの整数値。プロパティが設定されていない場合はゼロ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、一括コピー操作の進行状況を示すユーザーインターフェイスコンポーネント向けに設計されています。 通知イベントを生成する前に処理される行の数を示します。 バルクコピー操作の実行中であっても、いつでもプロパティを設定できます。<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 一括コピー操作中に行われた変更は、次の通知後に有効になります。 新しい設定は、同じインスタンス上の後続のすべての操作に適用されます。  
  
 が<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 0<xref:System.ArgumentOutOfRangeException>未満の値に設定されている場合は、がスローされます。  
  
   
  
## Examples  
 次のコンソールアプリケーションは、既に開いている接続を使用してデータを一括読み込みする方法を示しています。 プロパティ<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>は、50行ごとにテーブルにコピーされた後にイベントハンドラーが呼び出されるように設定されています。  
  
 この例では、最初に接続を使用して、SQL Server テーブルから<xref:System.Data.SqlClient.SqlDataReader>インスタンスにデータを読み取ります。 その後、2番目の接続を開いてデータを一括コピーします。 ソースデータが SQL Server に配置されている必要はないことに注意してください。に読み取る<xref:System.Data.IDataReader>ことができる任意のデータソース、または<xref:System.Data.DataTable>に読み込むことができる任意のデータソースを使用できます。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> プロパティに指定された行数が処理されるごとに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> と<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>の設定は独立していることに注意してください。 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>イベントの受信は、行がサーバーに送信されたか、コミットされたことを意味するものではありません。  
  
 このイベントから SqlBulkCopy (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) または SqlConnection (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) を呼び出すことはできません。 これを行うと、 <xref:System.InvalidOperationException>がスローされ、 <xref:System.Data.SqlClient.SqlBulkCopy>オブジェクトの状態は変わりません。 ユーザーがイベント<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>から操作を取り消す必要がある場合は、 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs>のプロパティを使用できます。 ( <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>プロパティを使用する例については、「[トランザクションと一括コピーの操作](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)」を参照してください)。  
  
 トランザクションアクティビティなどのアクションは、一括コピー操作の実行中にはサポートされません。また、 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>イベント中に使用されるのと同じ接続を使用しないことをお勧めします。 ただし、別の接続を開くことはできます。  
  
   
  
## Examples  
 次のコンソールアプリケーションは、既に開いている接続を使用してデータを一括読み込みする方法を示しています。 プロパティ<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>は、50行ごとにテーブルにコピーされた後にイベントハンドラーが呼び出されるように設定されています。  
  
 この例では、最初に接続を使用して、SQL Server テーブルから<xref:System.Data.SqlClient.SqlDataReader>インスタンスにデータを読み取ります。 ソースデータが SQL Server に配置されている必要はないことに注意してください。に読み取る<xref:System.Data.IDataReader>ことができる任意のデータソース、または<xref:System.Data.DataTable>に読み込むことができる任意のデータソースを使用できます。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlBulkCopy> を使い終わったら、`Dispose`を呼び出します。 `Dispose`メソッドによって、<xref:System.Data.SqlClient.SqlBulkCopy> は使用不可の状態になります。 `Dispose`呼び出し後は、<xref:System.Data.SqlClient.SqlBulkCopy>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Data.SqlClient.SqlBulkCopy> へのすべての参照を解放する必要があります。  
  
 詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。  
  
> [!NOTE]
>  <xref:System.Data.SqlClient.SqlBulkCopy>への最後の参照を解放する前に、必ず`Dispose`を呼び出してください。 そうしないと、ガベージ コレクターが <xref:System.Data.SqlClient.SqlBulkCopy> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データ ソースのすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数のアクティブな結果セット (MARS) が無効<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>になっている場合は、によって接続がビジー状態になります。 MARS が有効になっている場合は、 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>同じ接続で他のコマンドを使用してへの呼び出しをインターリーブすることができます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">対象テーブルにコピーする行が格納された <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <summary>指定した <see cref="T:System.Data.Common.DbDataReader" /> 配列のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rows">対象テーブルにコピーされる <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <summary>指定した <see cref="T:System.Data.DataRow" /> 配列のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一括コピー操作の実行中は、関連付けられ<xref:System.Data.SqlClient.SqlConnection>ている宛先がサービスを提供している間、その接続で他の操作を実行することはできません。  
  
 コレクション<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>は、 <xref:System.Data.DataRow>列から変換先データベーステーブルにマップされます。  
  
   
  
## Examples  
 次のコンソールアプリケーションは、 <xref:System.Data.DataRow>配列からデータを一括読み込みする方法を示しています。 コピー先のテーブルは、 **AdventureWorks**データベースのテーブルです。  
  
 この例<xref:System.Data.DataTable>では、実行時にが作成されます。 コピー先のテーブルにコピーする<xref:System.Data.DataTable>には、から1つの行を選択します。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">対象テーブルにコピーする行が格納された <see cref="T:System.Data.DataTable" />。</param>
        <summary>指定した <see cref="T:System.Data.DataTable" /> のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内のすべての<xref:System.Data.DataTable>行は、削除されたテーブルを除き、コピー先のテーブルにコピーされます。  
  
 一括コピー操作の実行中は、関連付けられ<xref:System.Data.SqlClient.SqlConnection>ている宛先がサービスを提供している間、その接続で他の操作を実行することはできません。  
  
 コレクション<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>は、 <xref:System.Data.DataTable>列から変換先データベーステーブルにマップされます。  
  
   
  
## Examples  
 次のコンソールアプリケーションは、 <xref:System.Data.DataTable>からデータを一括読み込みする方法を示しています。 コピー先のテーブルは、 **AdventureWorks**データベースのテーブルです。  
  
 この例<xref:System.Data.DataTable>では、が実行時に作成され、 `SqlBulkCopy`操作のソースとなります。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">対象テーブルにコピーする行が格納された <see cref="T:System.Data.IDataReader" />。</param>
        <summary>指定した <see cref="T:System.Data.IDataReader" /> のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コピー操作は、リーダーで次に使用可能な行から開始します。 ほとんどの場合、リーダーはまたは同様の呼び出し<xref:System.Data.IDbCommand.ExecuteReader%2A>によって返されたので、次に使用可能な行が最初の行になります。 複数の結果を処理する<xref:System.Data.IDataReader.NextResult%2A>には、データリーダーで<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>を呼び出し、を再度呼び出します。  
  
 を使用する<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>と、リーダーの状態が変更されることに注意してください。 メソッドは、false <xref:System.Data.IDataReader.Read%2A>を返すか、操作が中止されるか、またはエラーが発生するまで、を呼び出します。 つまり、データリーダーは、 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作が完了すると、結果セットの最後にあるかのように、別の状態になります。  
  
 一括コピー操作の実行中は、関連付けられ<xref:System.Data.SqlClient.SqlConnection>ている宛先がサービスを提供している間、その接続で他の操作を実行することはできません。  
  
 コレクション<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>は、データリーダーの列からコピー先のデータベーステーブルにマップされます。  
  
   
  
## Examples  
 次のコンソールアプリケーションは、 <xref:System.Data.SqlClient.SqlDataReader>からデータを一括読み込みする方法を示しています。 コピー先のテーブルは、 **AdventureWorks**データベースのテーブルです。  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">対象テーブルにコピーする行が格納された <see cref="T:System.Data.DataTable" />。</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 列挙体の値。 特定の状態に一致する行だけが対象テーブルにコピーされます。</param>
        <summary>指定された <see cref="T:System.Data.DataTable" /> から、特定の状態に一致する行だけを、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引数に示され<xref:System.Data.DataTable> 、削除されていない状態にある内の行のみが、コピー先のテーブルにコピーされます。 `rowState`  
  
> [!NOTE]
>  を<xref:System.Data.DataRowState.Deleted>指定し<xref:System.Data.DataRowState.Unchanged>た場合は<xref:System.Data.DataRowState.Added>、、 <xref:System.Data.DataRowState.Modified> 、およびの行もサーバーにコピーされます。 例外は発生しません。  
  
 一括コピー操作の実行中は、関連付けられ<xref:System.Data.SqlClient.SqlConnection>ている宛先がサービスを提供している間、その接続で他の操作を実行することはできません。  
  
 コレクション<xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>は、 <xref:System.Data.DataTable>列から変換先データベーステーブルにマップされます。  
  
   
  
## Examples  
 次のコンソールアプリケーションは、指定した状態に一致<xref:System.Data.DataTable>する内の行のみを一括読み込みする方法を示しています。 この場合は、変更されていない行のみが追加されます。 コピー先のテーブルは、 **AdventureWorks**データベースのテーブルです。  
  
 この例<xref:System.Data.DataTable>では、実行時にが作成され、3つの行が追加されます。 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>メソッドが実行される前に、行の1つが編集されます。 メソッドは引数`rowState`を`DataRowState.Unchanged`使用して呼び出されるため、変更されていない2つの行のみがコピー先に一括コピーされます。 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>  
  
> [!IMPORTANT]
>  このサンプルは、「[一括コピーの例のセットアップ](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)」で説明されているように作業テーブルを作成しない限り、実行されません。 このコードは、 **SqlBulkCopy**のみを使用する構文を示すために用意されています。 コピー元とコピー先のテーブルが同じ SQL Server インスタンス内にある場合は、transact-sql `INSERT … SELECT`ステートメントを使用してデータをコピーする方が簡単で高速です。  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">一括コピー操作の実行</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データ ソースのすべての行を、<see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティに指定された宛先テーブルにコピーする、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> の非同期バージョン。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数のアクティブな結果セット (MARS) が無効<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>になっている場合は、によって接続がビジー状態になります。 MARS が有効になっている場合は、 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>同じ接続で他のコマンドを使用してへの呼び出しをインターリーブすることができます。  
  
 失敗した場合にロールバックされる行の数は、次のいくつかによって異なります。  
  
-   が<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>指定されている場合。  
  
-   独自のトランザクションがある場合。  
  
-   <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> の値。  
  
 サーバーにデータを送信しているときにエラーが発生した場合は、( <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>で指定された) 現在のバッチがロールバックされます。 が<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>指定されておらず、独自のトランザクションがある場合は、トランザクション全体がロールバックされます (これには、前のすべてのバッチも含まれます)。  
  
 を<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>使用して、サーバーにコピーされた行数を確認します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">対象テーブルにコピーする行が格納された <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> の非同期バージョン。指定した <see cref="T:System.Data.Common.DbDataReader" /> 配列のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">対象テーブルにコピーされる <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> の非同期バージョン。指定した <see cref="T:System.Data.DataRow" /> 配列のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server の .NET Framework Data Provider での非同期プログラミングの詳細については、「[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> を複数回呼び出します。  
  
タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> を呼び出します。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> の実行中、接続は破棄されるか、または閉じられます。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトは、メソッドの実行時に閉じられました。  
  
タスク オブジェクトで返された場合、接続プールのタイムアウトが発生しました。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトは、メソッドの実行前に閉じられます。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">対象テーブルにコピーする行が格納された <see cref="T:System.Data.DataTable" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> の非同期バージョン。指定した <see cref="T:System.Data.DataTable" /> のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server の .NET Framework Data Provider での非同期プログラミングの詳細については、「[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> を複数回呼び出します。  
  
タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> を呼び出します。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> の実行中、接続は破棄されるか、または閉じられます。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトは、メソッドの実行時に閉じられました。  
  
タスク オブジェクトで返された場合、接続プールのタイムアウトが発生しました。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトは、メソッドの実行前に閉じられます。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">対象テーブルにコピーする行が格納された <see cref="T:System.Data.IDataReader" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> の非同期バージョン。指定した <see cref="T:System.Data.IDataReader" /> のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server の .NET Framework Data Provider での非同期プログラミングの詳細については、「[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> を複数回呼び出します。  
  
タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> を呼び出します。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> の実行中、接続は破棄されるか、または閉じられます。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトは、メソッドの実行時に閉じられました。  
  
タスク オブジェクトで返された場合、接続プールのタイムアウトが発生しました。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトは、メソッドの実行前に閉じられます。  
  
完了した <see cref="T:System.Data.IDataReader" /> が返される前に、<see cref="T:System.Threading.Tasks.Task" /> が閉じられました。  
  
完了した <see cref="T:System.Data.IDataReader" /> が返される前に、<see cref="T:System.Threading.Tasks.Task" /> に関連付けられたコネクションが閉じられました。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">対象テーブルにコピーする行が格納された <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値により、このメソッドは <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" /> と同じになります。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> の非同期バージョン。指定した <see cref="T:System.Data.Common.DbDataReader" /> 配列のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <returns><see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">対象テーブルにコピーされる <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値により、このメソッドは <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じになります。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> の非同期バージョン。指定した <see cref="T:System.Data.DataRow" /> 配列のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。  
  
キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄するように要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server の .NET Framework Data Provider での非同期プログラミングの詳細については、「[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> を複数回呼び出します。  
  
タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> を呼び出します。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> の実行中、接続は破棄されるか、または閉じられます。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトは、メソッドの実行時に閉じられました。  
  
タスク オブジェクトで返された場合、接続プールのタイムアウトが発生しました。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトは、メソッドの実行前に閉じられます。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">対象テーブルにコピーする行が格納された <see cref="T:System.Data.DataTable" />。</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 列挙体の値。 特定の状態に一致する行だけが対象テーブルにコピーされます。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> の非同期バージョン。指定された <see cref="T:System.Data.DataTable" /> から、特定の状態に一致する行だけを、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server の .NET Framework Data Provider での非同期プログラミングの詳細については、「[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> を複数回呼び出します。  
  
タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> を呼び出します。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> の実行中、接続は破棄されるか、または閉じられます。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトは、メソッドの実行時に閉じられました。  
  
タスク オブジェクトで返された場合、接続プールのタイムアウトが発生しました。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトは、メソッドの実行前に閉じられます。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">対象テーブルにコピーする行が格納された <see cref="T:System.Data.DataTable" />。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値により、このメソッドは <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じになります。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> の非同期バージョン。指定した <see cref="T:System.Data.DataTable" /> のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。  
  
キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄するように要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server の .NET Framework Data Provider での非同期プログラミングの詳細については、「[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> を複数回呼び出します。  
  
タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> を呼び出します。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> の実行中、接続は破棄されるか、または閉じられます。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトは、メソッドの実行時に閉じられました。  
  
タスク オブジェクトで返された場合、接続プールのタイムアウトが発生しました。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトは、メソッドの実行前に閉じられます。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">対象テーブルにコピーする行が格納された <see cref="T:System.Data.IDataReader" />。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値により、このメソッドは <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じになります。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> の非同期バージョン。指定した <see cref="T:System.Data.IDataReader" /> のすべての行を、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。  
  
キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄するように要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server の .NET Framework Data Provider での非同期プログラミングの詳細については、「[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> を複数回呼び出します。  
  
タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> を呼び出します。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> の実行中、接続は破棄されるか、または閉じられます。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトは、メソッドの実行時に閉じられました。  
  
タスク オブジェクトで返された場合、接続プールのタイムアウトが発生しました。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトは、メソッドの実行前に閉じられます。  
  
完了した <see cref="T:System.Data.IDataReader" /> が返される前に、<see cref="T:System.Threading.Tasks.Task" /> が閉じられました。  
  
完了した <see cref="T:System.Data.IDataReader" /> が返される前に、<see cref="T:System.Threading.Tasks.Task" /> に関連付けられたコネクションが閉じられました。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">対象テーブルにコピーする行が格納された <see cref="T:System.Data.DataTable" />。</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 列挙体の値。 特定の状態に一致する行だけが対象テーブルにコピーされます。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値により、このメソッドは <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じになります。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> の非同期バージョン。指定された <see cref="T:System.Data.DataTable" /> から、特定の状態に一致する行だけを、<see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> プロパティで指定された対象テーブルにコピーします。  
  
キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄するように要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server の .NET Framework Data Provider での非同期プログラミングの詳細については、「[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> を複数回呼び出します。  
  
タスクを完了する前に同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> を呼び出します。  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> の実行中、接続は破棄されるか、または閉じられます。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトは、メソッドの実行時に閉じられました。  
  
タスク オブジェクトで返された場合、接続プールのタイムアウトが発生しました。  
  
タスク オブジェクトで返された場合、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトは、メソッドの実行前に閉じられます。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
