<Type Name="SqlCommandBuilder" FullName="System.Data.SqlClient.SqlCommandBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f98e8b8a8201db8545a634c3df54306e188ae9f9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36680173" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlCommandBuilder : System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommandBuilder extends System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlCommandBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlCommandBuilder&#xA;Inherits DbCommandBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlCommandBuilder sealed : System::Data::Common::DbCommandBuilder" />
  <TypeSignature Language="F#" Value="type SqlCommandBuilder = class&#xA;    inherit DbCommandBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommandBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="37012-101">SQL Server データベースに関連付けられた <see cref="T:System.Data.DataSet" /> への変更を調整するための単一テーブル コマンドを自動的に生成します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="37012-101">Automatically generates single-table commands that are used to reconcile changes made to a <see cref="T:System.Data.DataSet" /> with the associated SQL Server database.</span>
      </span>
      <span data-ttu-id="37012-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="37012-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-103"><xref:System.Data.SqlClient.SqlDataAdapter>に加えられた変更を調整するために必要な TRANSACT-SQL ステートメントを自動的に生成しない、<xref:System.Data.DataSet>関連付けられている SQL Server のインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="37012-103">The <xref:System.Data.SqlClient.SqlDataAdapter> does not automatically generate the Transact-SQL statements required to reconcile changes made to a <xref:System.Data.DataSet> with the associated instance of SQL Server.</span></span> <span data-ttu-id="37012-104">ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>設定した場合、1 つのテーブルの更新プログラム用の TRANSACT-SQL ステートメントを自動的に生成するオブジェクト、<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>のプロパティ、<xref:System.Data.SqlClient.SqlDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="37012-104">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> object to automatically generate Transact-SQL statements for single-table updates if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property of the <xref:System.Data.SqlClient.SqlDataAdapter>.</span></span> <span data-ttu-id="37012-105">次に、追加の Transact SQL ステートメントを設定しないことがによって生成される、<xref:System.Data.SqlClient.SqlCommandBuilder>です。</span><span class="sxs-lookup"><span data-stu-id="37012-105">Then, any additional Transact-SQL statements that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>.</span></span>  
  
 <span data-ttu-id="37012-106"><xref:System.Data.SqlClient.SqlCommandBuilder>自体のリスナーとして登録<xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>を設定する場合に、イベント、<xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="37012-106">The <xref:System.Data.SqlClient.SqlCommandBuilder> registers itself as a listener for <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> events whenever you set the <xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A> property.</span></span> <span data-ttu-id="37012-107">関連付けることができますのみ<xref:System.Data.SqlClient.SqlDataAdapter>または<xref:System.Data.SqlClient.SqlCommandBuilder>互いにオブジェクトを一度に 1 つです。</span><span class="sxs-lookup"><span data-stu-id="37012-107">You can only associate one <xref:System.Data.SqlClient.SqlDataAdapter> or <xref:System.Data.SqlClient.SqlCommandBuilder> object with each other at one time.</span></span>  
  
 <span data-ttu-id="37012-108">INSERT、UPDATE、または DELETE のステートメントを生成する、<xref:System.Data.SqlClient.SqlCommandBuilder>を使用して、<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>自動的に必要な一連のメタデータを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="37012-108">To generate INSERT, UPDATE, or DELETE statements, the <xref:System.Data.SqlClient.SqlCommandBuilder> uses the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property to retrieve a required set of metadata automatically.</span></span> <span data-ttu-id="37012-109">変更した場合、<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>呼び出す必要があります最初の更新の後など、メタデータが取得された後、<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>にメタデータを更新する方法です。</span><span class="sxs-lookup"><span data-stu-id="37012-109">If you change the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> after the metadata has been retrieved, such as after the first update, you should call the <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> method to update the metadata.</span></span>  
  
 <span data-ttu-id="37012-110">`SelectCommand` は少なくとも 1 つの主キーまたは一意の列を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="37012-110">The `SelectCommand` must also return at least one primary key or unique column.</span></span> <span data-ttu-id="37012-111">存在しない場合、 **InvalidOperation**例外が生成され、コマンドは生成されません。</span><span class="sxs-lookup"><span data-stu-id="37012-111">If none are present, an **InvalidOperation** exception is generated, and the commands are not generated.</span></span>  
  
 <span data-ttu-id="37012-112"><xref:System.Data.SqlClient.SqlCommandBuilder>も使用して、 <xref:System.Data.SqlClient.SqlCommand.Connection%2A>、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>、および<xref:System.Data.SqlClient.SqlCommand.Transaction%2A>プロパティによって参照される、<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="37012-112">The <xref:System.Data.SqlClient.SqlCommandBuilder> also uses the <xref:System.Data.SqlClient.SqlCommand.Connection%2A>, <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>, and <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> properties referenced by the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>.</span></span> <span data-ttu-id="37012-113">ユーザーが呼び出す必要があります<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>1 つ以上のこれらのプロパティを変更すると場合、または、<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>自体は置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="37012-113">The user should call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if one or more of these properties are modified, or if the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> itself is replaced.</span></span> <span data-ttu-id="37012-114">それ以外の場合、 <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>、 <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>、および<xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>プロパティは、前回の値を保持します。</span><span class="sxs-lookup"><span data-stu-id="37012-114">Otherwise the <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties retain their previous values.</span></span>  
  
 <span data-ttu-id="37012-115">呼び出す場合<xref:System.ComponentModel.Component.Dispose%2A>、<xref:System.Data.SqlClient.SqlCommandBuilder>関連付けが解除され、 <xref:System.Data.SqlClient.SqlDataAdapter>、され、生成されたコマンドは使用されなくです。</span><span class="sxs-lookup"><span data-stu-id="37012-115">If you call <xref:System.ComponentModel.Component.Dispose%2A>, the <xref:System.Data.SqlClient.SqlCommandBuilder> is disassociated from the <xref:System.Data.SqlClient.SqlDataAdapter>, and the generated commands are no longer used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37012-116">次の例では、<xref:System.Data.SqlClient.SqlCommand>と共に、<xref:System.Data.SqlClient.SqlDataAdapter>と<xref:System.Data.SqlClient.SqlConnection>、データ ソースから行を選択します。</span><span class="sxs-lookup"><span data-stu-id="37012-116">The following example uses the <xref:System.Data.SqlClient.SqlCommand>, along <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlConnection>, to select rows from a data source.</span></span> <span data-ttu-id="37012-117">例には、接続文字列は、TRANSACT-SQL SELECT ステートメントでは、クエリ文字列と、データベース テーブルの名前を指定する文字列が渡されます。</span><span class="sxs-lookup"><span data-stu-id="37012-117">The example is passed a connection string, a query string that is a Transact-SQL SELECT statement, and a string that is the name of the database table.</span></span> <span data-ttu-id="37012-118">作成し、<xref:System.Data.SqlClient.SqlCommandBuilder>です。</span><span class="sxs-lookup"><span data-stu-id="37012-118">The example then creates a <xref:System.Data.SqlClient.SqlCommandBuilder>.</span></span>  
  
 [!code-csharp[Classic WebData SqlCommandBuilder#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/CS/Source.cs#1)]
 [!code-vb[Classic WebData SqlCommandBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/VB/Source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37012-119">
            <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-119">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommandBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="37012-120">
            <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-120">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder (System.Data.SqlClient.SqlDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (adapter As SqlDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommandBuilder(System::Data::SqlClient::SqlDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlCommandBuilder : System.Data.SqlClient.SqlDataAdapter -&gt; System.Data.SqlClient.SqlCommandBuilder" Usage="new System.Data.SqlClient.SqlCommandBuilder adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.SqlClient.SqlDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">
          <span data-ttu-id="37012-121">
            <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-121">The name of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37012-122">関連付ける <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> オブジェクトを指定して、<see cref="T:System.Data.SqlClient.SqlDataAdapter" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-122">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> class with the associated <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-123"><xref:System.Data.SqlClient.SqlCommandBuilder>自体のリスナーとして登録<xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>によって生成されるイベント、<xref:System.Data.SqlClient.SqlDataAdapter>このプロパティで指定します。</span><span class="sxs-lookup"><span data-stu-id="37012-123">The <xref:System.Data.SqlClient.SqlCommandBuilder> registers itself as a listener for <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> events that are generated by the <xref:System.Data.SqlClient.SqlDataAdapter> specified in this property.</span></span>  
  
 <span data-ttu-id="37012-124">新しいインスタンスを作成する場合<xref:System.Data.SqlClient.SqlCommandBuilder>、既存<xref:System.Data.SqlClient.SqlCommandBuilder>これに関連付けられている<xref:System.Data.SqlClient.SqlDataAdapter>を解放します。</span><span class="sxs-lookup"><span data-stu-id="37012-124">When you create a new instance of <xref:System.Data.SqlClient.SqlCommandBuilder>, any existing <xref:System.Data.SqlClient.SqlCommandBuilder> associated with this <xref:System.Data.SqlClient.SqlDataAdapter> is released.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyParameterInfo">
      <MemberSignature Language="C#" Value="protected override void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow datarow, System.Data.StatementType statementType, bool whereClause);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ApplyParameterInfo(class System.Data.Common.DbParameter parameter, class System.Data.DataRow datarow, valuetype System.Data.StatementType statementType, bool whereClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ApplyParameterInfo(System::Data::Common::DbParameter ^ parameter, System::Data::DataRow ^ datarow, System::Data::StatementType statementType, bool whereClause);" />
      <MemberSignature Language="F#" Value="override this.ApplyParameterInfo : System.Data.Common.DbParameter * System.Data.DataRow * System.Data.StatementType * bool -&gt; unit" Usage="sqlCommandBuilder.ApplyParameterInfo (parameter, datarow, statementType, whereClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Common.DbParameter" />
        <Parameter Name="datarow" Type="System.Data.DataRow" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="whereClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <param name="datarow">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="whereClause">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogLocation">
      <MemberSignature Language="C#" Value="public override System.Data.Common.CatalogLocation CatalogLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Common.CatalogLocation CatalogLocation" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogLocation" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CatalogLocation As CatalogLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::Common::CatalogLocation CatalogLocation { System::Data::Common::CatalogLocation get(); void set(System::Data::Common::CatalogLocation value); };" />
      <MemberSignature Language="F#" Value="member this.CatalogLocation : System.Data.Common.CatalogLocation with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.CatalogLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.CatalogLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37012-125">
            <see cref="T:System.Data.Common.CatalogLocation" /> クラスのインスタンスの <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> を設定または取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-125">Sets or gets the <see cref="T:System.Data.Common.CatalogLocation" /> for an instance of the <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> class.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37012-126">
            <see cref="T:System.Data.Common.CatalogLocation" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-126">A <see cref="T:System.Data.Common.CatalogLocation" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogSeparator">
      <MemberSignature Language="C#" Value="public override string CatalogSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CatalogSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CatalogSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CatalogSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CatalogSeparator : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37012-127">
            <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> クラスのインスタンスのカタログの区切り記号として使用する文字列を設定または取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-127">Sets or gets a string used as the catalog separator for an instance of the <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> class.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37012-128">
            <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> クラスのインスタンスで使用するカタログ区切り記号を示す文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-128">A string that indicates the catalog separator for use with an instance of the <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> class.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataAdapter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataAdapter DataAdapter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlDataAdapter DataAdapter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.DataAdapter" />
      <MemberSignature Language="VB.NET" Value="Public Property DataAdapter As SqlDataAdapter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlDataAdapter ^ DataAdapter { System::Data::SqlClient::SqlDataAdapter ^ get(); void set(System::Data::SqlClient::SqlDataAdapter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataAdapter : System.Data.SqlClient.SqlDataAdapter with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.DataAdapter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataAdapter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37012-129">Transact-SQL ステートメントを自動生成する対象の <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> オブジェクトを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-129">Gets or sets a <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> object for which Transact-SQL statements are automatically generated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37012-130">
            <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-130">A <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-131"><xref:System.Data.SqlClient.SqlCommandBuilder>自体のリスナーとして登録<xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>によって生成されるイベント、<xref:System.Data.SqlClient.SqlDataAdapter>このプロパティで指定します。</span><span class="sxs-lookup"><span data-stu-id="37012-131">The <xref:System.Data.SqlClient.SqlCommandBuilder> registers itself as a listener for <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> events that are generated by the <xref:System.Data.SqlClient.SqlDataAdapter> specified in this property.</span></span>  
  
 <span data-ttu-id="37012-132">新しいインスタンスを作成する場合<xref:System.Data.SqlClient.SqlCommandBuilder>、既存<xref:System.Data.SqlClient.SqlCommandBuilder>これに関連付けられている<xref:System.Data.SqlClient.SqlDataAdapter>を解放します。</span><span class="sxs-lookup"><span data-stu-id="37012-132">When you create a new instance of <xref:System.Data.SqlClient.SqlCommandBuilder>, any existing <xref:System.Data.SqlClient.SqlCommandBuilder> associated with this <xref:System.Data.SqlClient.SqlDataAdapter> is released.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveParameters">
      <MemberSignature Language="C#" Value="public static void DeriveParameters (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeriveParameters(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeriveParameters (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeriveParameters(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="static member DeriveParameters : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="System.Data.SqlClient.SqlCommandBuilder.DeriveParameters command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="37012-133">パラメーター情報の取得対象となるストアド プロシージャを参照する <see cref="T:System.Data.SqlClient.SqlCommand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-133">The <see cref="T:System.Data.SqlClient.SqlCommand" /> referencing the stored procedure from which the parameter information is to be derived.</span>
          </span>
          <span data-ttu-id="37012-134">取得したパラメーターは、<see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> の <see cref="T:System.Data.SqlClient.SqlCommand" /> コレクションに追加されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-134">The derived parameters are added to the <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> collection of the <see cref="T:System.Data.SqlClient.SqlCommand" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37012-135">
            <see cref="T:System.Data.SqlClient.SqlCommand" /> で指定したストアド プロシージャからパラメーター情報を取得し、指定した <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> オブジェクトの <see cref="T:System.Data.SqlClient.SqlCommand" /> コレクションにパラメーターを格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-135">Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.SqlClient.SqlCommand" /> and populates the <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> collection of the specified <see cref="T:System.Data.SqlClient.SqlCommand" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-136">`DeriveParameters` 既存のパラメーター情報を上書き、`SqlDbCommand`です。</span><span class="sxs-lookup"><span data-stu-id="37012-136">`DeriveParameters` overwrites any existing parameter information for the `SqlDbCommand`.</span></span>  
  
 <span data-ttu-id="37012-137">`DeriveParameters` 情報を取得するデータベースに追加の呼び出しが必要です。</span><span class="sxs-lookup"><span data-stu-id="37012-137">`DeriveParameters` requires an additional call to the database to obtain the information.</span></span> <span data-ttu-id="37012-138">パラメーター情報が事前にわかっている場合は、情報を明示的に設定して、パラメーター コレクションを設定する方が効率的です。</span><span class="sxs-lookup"><span data-stu-id="37012-138">If the parameter information is known in advance, it is more efficient to populate the parameters collection by setting the information explicitly.</span></span>  
  
 <span data-ttu-id="37012-139">使用できるだけ`DeriveParameters`ストアド プロシージャを使用します。</span><span class="sxs-lookup"><span data-stu-id="37012-139">You can only use `DeriveParameters` with stored procedures.</span></span> <span data-ttu-id="37012-140">使用することはできません`DeriveParameters`拡張ストアド プロシージャでします。</span><span class="sxs-lookup"><span data-stu-id="37012-140">You cannot use `DeriveParameters` with extended stored procedures.</span></span> <span data-ttu-id="37012-141">使用することはできません`DeriveParameters`を設定する、<xref:System.Data.SqlClient.SqlParameterCollection>パラメーター化された SELECT ステートメントなど、任意の TRANSACT-SQL ステートメントを使用します。</span><span class="sxs-lookup"><span data-stu-id="37012-141">You cannot use `DeriveParameters` to populate the <xref:System.Data.SqlClient.SqlParameterCollection> with arbitrary Transact-SQL statements, such as a parameterized SELECT statement.</span></span>  
  
 <span data-ttu-id="37012-142">詳細については、次を参照してください。[構成パラメーターとパラメーターのデータ型](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md)です。</span><span class="sxs-lookup"><span data-stu-id="37012-142">For more information, see [Configuring Parameters and Parameter Data Types](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="37012-143">コマンド テキストが有効なストアド プロシージャ名ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-143">The command text is not a valid stored procedure name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDeleteCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37012-144">データベースで削除処理を実行するための、自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-144">Gets the automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object required to perform deletions on the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-145">アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="37012-145">An application can use the <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.SqlClient.SqlCommand> object to be executed.</span></span>  
  
 <span data-ttu-id="37012-146">使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>変更されたコマンドの基礎として。</span><span class="sxs-lookup"><span data-stu-id="37012-146">You can also use <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> as the basis of a modified command.</span></span> <span data-ttu-id="37012-147">たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>および変更、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値に設定してで明示的に設定する、<xref:System.Data.SqlClient.SqlDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="37012-147">For example, you might call <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> and modify the <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:System.Data.SqlClient.SqlDataAdapter>.</span></span>  
  
 <span data-ttu-id="37012-148">アプリケーションが明示的に呼び出す必要があります、SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>場合は任意の方法でステートメントを変更します。</span><span class="sxs-lookup"><span data-stu-id="37012-148">After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way.</span></span> <span data-ttu-id="37012-149">それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用されます。</span><span class="sxs-lookup"><span data-stu-id="37012-149">Otherwise, the <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> will still be using information from the previous statement, which might not be correct.</span></span> <span data-ttu-id="37012-150">SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="37012-150">The SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.</span></span>  
  
 <span data-ttu-id="37012-151">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="37012-151">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeleteCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetDeleteCommand();" />
      <MemberSignature Language="F#" Value="override this.GetDeleteCommand : unit -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetDeleteCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="37012-152">データベースで削除処理を実行するための、自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-152">Gets the automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object required to perform deletions on the database.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37012-153">削除を実行するための自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-153">The automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object required to perform deletions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-154">アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="37012-154">An application can use the <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.SqlClient.SqlCommand> object to be executed.</span></span>  
  
 <span data-ttu-id="37012-155">使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>変更されたコマンドの基礎として。</span><span class="sxs-lookup"><span data-stu-id="37012-155">You can also use <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> as the basis of a modified command.</span></span> <span data-ttu-id="37012-156">たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>および変更、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値に設定してで明示的に設定する、<xref:System.Data.SqlClient.SqlDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="37012-156">For example, you might call <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> and modify the <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:System.Data.SqlClient.SqlDataAdapter>.</span></span>  
  
 <span data-ttu-id="37012-157">アプリケーションが明示的に呼び出す必要があります、SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>場合は任意の方法でステートメントを変更します。</span><span class="sxs-lookup"><span data-stu-id="37012-157">After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way.</span></span> <span data-ttu-id="37012-158">それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用されます。</span><span class="sxs-lookup"><span data-stu-id="37012-158">Otherwise, the <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> will still be using information from the previous statement, which might not be correct.</span></span> <span data-ttu-id="37012-159">SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="37012-159">The SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.</span></span>  
  
 <span data-ttu-id="37012-160">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="37012-160">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeleteCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetDeleteCommand(bool useColumnsForParameterNames);" />
      <MemberSignature Language="F#" Value="override this.GetDeleteCommand : bool -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetDeleteCommand useColumnsForParameterNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">
          <span data-ttu-id="37012-161">可能であれば、列名に一致するパラメーター名を生成する場合は <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-161">If <see langword="true" />, generate parameter names matching column names if possible.</span>
          </span>
          <span data-ttu-id="37012-162">
            <see langword="false" /> の場合、@p1、@p2 のように生成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-162">If <see langword="false" />, generate @p1, @p2, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37012-163">データベースで削除処理を実行するための、自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-163">Gets the automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object that is required to perform deletions on the database.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37012-164">削除を実行するための自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-164">The automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object that is required to perform deletions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-165">アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="37012-165">An application can use the <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.SqlClient.SqlCommand> object to be executed.</span></span>  
  
 <span data-ttu-id="37012-166">使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>変更されたコマンドの基礎として。</span><span class="sxs-lookup"><span data-stu-id="37012-166">You can also use <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> as the basis of a modified command.</span></span> <span data-ttu-id="37012-167">たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>および変更、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値に設定してで明示的に設定する、<xref:System.Data.SqlClient.SqlDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="37012-167">For example, you might call <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> and modify the <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:System.Data.SqlClient.SqlDataAdapter>.</span></span>  
  
 <span data-ttu-id="37012-168">アプリケーションが明示的に呼び出す必要があります、SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>場合は任意の方法でステートメントを変更します。</span><span class="sxs-lookup"><span data-stu-id="37012-168">After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way.</span></span> <span data-ttu-id="37012-169">それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用されます。</span><span class="sxs-lookup"><span data-stu-id="37012-169">Otherwise, the <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> will still be using information from the previous statement, which might not be correct.</span></span> <span data-ttu-id="37012-170">SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="37012-170">The SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.</span></span>  
  
 <span data-ttu-id="37012-171">使用するパラメーター名を生成するときに、既定の動作は、 @p1、 @p2、さまざまなパラメーターについてです。</span><span class="sxs-lookup"><span data-stu-id="37012-171">The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters.</span></span> <span data-ttu-id="37012-172">渡す`true`の`useColumnsForParameterNames`パラメーターさせることができます、<xref:System.Data.OleDb.OleDbCommandBuilder>を代わりに、列名に基づいたパラメーターを生成します。</span><span class="sxs-lookup"><span data-stu-id="37012-172">Passing `true` for the `useColumnsForParameterNames` parameter lets you force the <xref:System.Data.OleDb.OleDbCommandBuilder> to generate parameters based on the column names instead.</span></span> <span data-ttu-id="37012-173">次は、次の条件が満たされた場合にのみ成功します。</span><span class="sxs-lookup"><span data-stu-id="37012-173">This succeeds only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="37012-174"><xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションが指定されており、その長さが、生成されたパラメーター名以上になるとします。</span><span class="sxs-lookup"><span data-stu-id="37012-174">The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection has been specified and its length is equal to or greater than the generated parameter name.</span></span>  
  
-   <span data-ttu-id="37012-175">生成されたパラメーター名で指定した条件を満たしている、<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>正規表現のコレクション。</span><span class="sxs-lookup"><span data-stu-id="37012-175">The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection regular expression.</span></span>  
  
-   <span data-ttu-id="37012-176">A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションを指定します。</span><span class="sxs-lookup"><span data-stu-id="37012-176">A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection is specified.</span></span>  
  
 <span data-ttu-id="37012-177">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="37012-177">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInsertCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37012-178">データベースで挿入処理を実行するための、自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-178">Gets the automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object that is required to perform insertions on the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-179">アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="37012-179">An application can use the <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.SqlClient.SqlCommand> object to be executed.</span></span>  
  
 <span data-ttu-id="37012-180">使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>変更されたコマンドの基礎として。</span><span class="sxs-lookup"><span data-stu-id="37012-180">You can also use <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> as the basis of a modified command.</span></span> <span data-ttu-id="37012-181">たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>および変更、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値に設定してで明示的に設定する、<xref:System.Data.SqlClient.SqlDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="37012-181">For example, you might call <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> and modify the <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:System.Data.SqlClient.SqlDataAdapter>.</span></span>  
  
 <span data-ttu-id="37012-182">アプリケーションが明示的に呼び出す必要があります: TRANSACT-SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>場合は任意の方法でステートメントを変更します。</span><span class="sxs-lookup"><span data-stu-id="37012-182">After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way.</span></span> <span data-ttu-id="37012-183">それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用されます。</span><span class="sxs-lookup"><span data-stu-id="37012-183">Otherwise, the <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> will still be using information from the previous statement, which might not be correct.</span></span> <span data-ttu-id="37012-184">TRANSACT-SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="37012-184">The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.</span></span>  
  
 <span data-ttu-id="37012-185">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="37012-185">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetInsertCommand();" />
      <MemberSignature Language="F#" Value="override this.GetInsertCommand : unit -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetInsertCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="37012-186">データベースで挿入処理を実行するための、自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-186">Gets the automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object required to perform insertions on the database.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37012-187">挿入を実行するための自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-187">The automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object required to perform insertions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-188">アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="37012-188">An application can use the <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.SqlClient.SqlCommand> object to be executed.</span></span>  
  
 <span data-ttu-id="37012-189">使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>変更されたコマンドの基礎として。</span><span class="sxs-lookup"><span data-stu-id="37012-189">You can also use <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> as the basis of a modified command.</span></span> <span data-ttu-id="37012-190">たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>および変更、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値に設定してで明示的に設定する、<xref:System.Data.SqlClient.SqlDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="37012-190">For example, you might call <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> and modify the <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:System.Data.SqlClient.SqlDataAdapter>.</span></span>  
  
 <span data-ttu-id="37012-191">アプリケーションが明示的に呼び出す必要があります: TRANSACT-SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>場合は任意の方法でステートメントを変更します。</span><span class="sxs-lookup"><span data-stu-id="37012-191">After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way.</span></span> <span data-ttu-id="37012-192">それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用されます。</span><span class="sxs-lookup"><span data-stu-id="37012-192">Otherwise, the <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> will still be using information from the previous statement, which might not be correct.</span></span> <span data-ttu-id="37012-193">TRANSACT-SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="37012-193">The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.</span></span>  
  
 <span data-ttu-id="37012-194">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="37012-194">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetInsertCommand(bool useColumnsForParameterNames);" />
      <MemberSignature Language="F#" Value="override this.GetInsertCommand : bool -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetInsertCommand useColumnsForParameterNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">
          <span data-ttu-id="37012-195">可能であれば、列名に一致するパラメーター名を生成する場合は <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-195">If <see langword="true" />, generate parameter names matching column names if possible.</span>
          </span>
          <span data-ttu-id="37012-196">
            <see langword="false" /> の場合、@p1、@p2 のように生成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-196">If <see langword="false" />, generate @p1, @p2, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37012-197">データベースで挿入処理を実行するための、自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-197">Gets the automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object that is required to perform insertions on the database.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37012-198">挿入を実行するための自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-198">The automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object that is required to perform insertions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-199">アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="37012-199">An application can use the <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.SqlClient.SqlCommand> object to be executed.</span></span>  
  
 <span data-ttu-id="37012-200">使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>変更されたコマンドの基礎として。</span><span class="sxs-lookup"><span data-stu-id="37012-200">You can also use <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> as the basis of a modified command.</span></span> <span data-ttu-id="37012-201">たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>および変更、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値に設定してで明示的に設定する、<xref:System.Data.SqlClient.SqlDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="37012-201">For example, you might call <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> and modify the <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:System.Data.SqlClient.SqlDataAdapter>.</span></span>  
  
 <span data-ttu-id="37012-202">アプリケーションが明示的に呼び出す必要があります: TRANSACT-SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>場合は任意の方法でステートメントを変更します。</span><span class="sxs-lookup"><span data-stu-id="37012-202">After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way.</span></span> <span data-ttu-id="37012-203">それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用されます。</span><span class="sxs-lookup"><span data-stu-id="37012-203">Otherwise, the <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> will still be using information from the previous statement, which might not be correct.</span></span> <span data-ttu-id="37012-204">TRANSACT-SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="37012-204">The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.</span></span>  
  
 <span data-ttu-id="37012-205">使用するパラメーター名を生成するときに、既定の動作は、 @p1、 @p2、さまざまなパラメーターについてです。</span><span class="sxs-lookup"><span data-stu-id="37012-205">The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters.</span></span> <span data-ttu-id="37012-206">渡す`true`の`useColumnsForParameterNames`パラメーターさせることができます、<xref:System.Data.OleDb.OleDbCommandBuilder>を代わりに、列名に基づいたパラメーターを生成します。</span><span class="sxs-lookup"><span data-stu-id="37012-206">Passing `true` for the `useColumnsForParameterNames` parameter lets you force the <xref:System.Data.OleDb.OleDbCommandBuilder> to generate parameters based on the column names instead.</span></span> <span data-ttu-id="37012-207">次は、次の条件が満たされた場合にのみ成功します。</span><span class="sxs-lookup"><span data-stu-id="37012-207">This succeeds only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="37012-208"><xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションが指定されており、その長さが、生成されたパラメーター名以上になるとします。</span><span class="sxs-lookup"><span data-stu-id="37012-208">The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection has been specified and its length is equal to or greater than the generated parameter name.</span></span>  
  
-   <span data-ttu-id="37012-209">生成されたパラメーター名で指定した条件を満たしている、<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>正規表現のコレクション。</span><span class="sxs-lookup"><span data-stu-id="37012-209">The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection regular expression.</span></span>  
  
-   <span data-ttu-id="37012-210">A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションを指定します。</span><span class="sxs-lookup"><span data-stu-id="37012-210">A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection is specified.</span></span>  
  
 <span data-ttu-id="37012-211">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="37012-211">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterName (parameterOrdinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterName(int parameterOrdinal);" />
      <MemberSignature Language="F#" Value="override this.GetParameterName : int -&gt; string" Usage="sqlCommandBuilder.GetParameterName parameterOrdinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterName (parameterName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterName(System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="override this.GetParameterName : string -&gt; string" Usage="sqlCommandBuilder.GetParameterName parameterName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterPlaceholder">
      <MemberSignature Language="C#" Value="protected override string GetParameterPlaceholder (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterPlaceholder(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterPlaceholder (parameterOrdinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterPlaceholder(int parameterOrdinal);" />
      <MemberSignature Language="F#" Value="override this.GetParameterPlaceholder : int -&gt; string" Usage="sqlCommandBuilder.GetParameterPlaceholder parameterOrdinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaTable">
      <MemberSignature Language="C#" Value="protected override System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand srcCommand);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.DataTable GetSchemaTable(class System.Data.Common.DbCommand srcCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSchemaTable (srcCommand As DbCommand) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::DataTable ^ GetSchemaTable(System::Data::Common::DbCommand ^ srcCommand);" />
      <MemberSignature Language="F#" Value="override this.GetSchemaTable : System.Data.Common.DbCommand -&gt; System.Data.DataTable" Usage="sqlCommandBuilder.GetSchemaTable srcCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcCommand" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="srcCommand">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUpdateCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37012-212">データベースで更新処理を実行するための、自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-212">Gets the automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object required to perform updates on the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-213">アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="37012-213">An application can use the <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.SqlClient.SqlCommand> object to be executed.</span></span>  
  
 <span data-ttu-id="37012-214">使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>変更されたコマンドの基礎として。</span><span class="sxs-lookup"><span data-stu-id="37012-214">You can also use <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> as the basis of a modified command.</span></span> <span data-ttu-id="37012-215">たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>および変更、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値に設定してで明示的に設定する、<xref:System.Data.SqlClient.SqlDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="37012-215">For example, you might call <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> and modify the <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:System.Data.SqlClient.SqlDataAdapter>.</span></span>  
  
 <span data-ttu-id="37012-216">アプリケーションが明示的に呼び出す必要があります: TRANSACT-SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>場合は任意の方法でステートメントを変更します。</span><span class="sxs-lookup"><span data-stu-id="37012-216">After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way.</span></span> <span data-ttu-id="37012-217">それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用されます。</span><span class="sxs-lookup"><span data-stu-id="37012-217">Otherwise, the <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> will still be using information from the previous statement, which might not be correct.</span></span> <span data-ttu-id="37012-218">TRANSACT-SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="37012-218">The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.</span></span>  
  
 <span data-ttu-id="37012-219">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="37012-219">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpdateCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetUpdateCommand();" />
      <MemberSignature Language="F#" Value="override this.GetUpdateCommand : unit -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetUpdateCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="37012-220">データベースで更新処理を実行するための、自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-220">Gets the automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object required to perform updates on the database.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37012-221">更新を実行するための自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-221">The automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object that is required to perform updates.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-222">アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="37012-222">An application can use the <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.SqlClient.SqlCommand> object to be executed.</span></span>  
  
 <span data-ttu-id="37012-223">使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>変更されたコマンドの基礎として。</span><span class="sxs-lookup"><span data-stu-id="37012-223">You can also use <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> as the basis of a modified command.</span></span> <span data-ttu-id="37012-224">たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>および変更、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値に設定してで明示的に設定する、<xref:System.Data.SqlClient.SqlDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="37012-224">For example, you might call <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> and modify the <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:System.Data.SqlClient.SqlDataAdapter>.</span></span>  
  
 <span data-ttu-id="37012-225">アプリケーションが明示的に呼び出す必要があります: TRANSACT-SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>場合は任意の方法でステートメントを変更します。</span><span class="sxs-lookup"><span data-stu-id="37012-225">After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way.</span></span> <span data-ttu-id="37012-226">それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用されます。</span><span class="sxs-lookup"><span data-stu-id="37012-226">Otherwise, the <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> will still be using information from the previous statement, which might not be correct.</span></span> <span data-ttu-id="37012-227">TRANSACT-SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="37012-227">The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.</span></span>  
  
 <span data-ttu-id="37012-228">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="37012-228">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpdateCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetUpdateCommand(bool useColumnsForParameterNames);" />
      <MemberSignature Language="F#" Value="override this.GetUpdateCommand : bool -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetUpdateCommand useColumnsForParameterNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">
          <span data-ttu-id="37012-229">可能であれば、列名に一致するパラメーター名を生成する場合は <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-229">If <see langword="true" />, generate parameter names matching column names if possible.</span>
          </span>
          <span data-ttu-id="37012-230">
            <see langword="false" /> の場合、@p1、@p2 のように生成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-230">If <see langword="false" />, generate @p1, @p2, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37012-231">データベースで更新処理を実行するための、自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-231">Gets the automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object required to perform updates on the database.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37012-232">更新を実行するための自動生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-232">The automatically generated <see cref="T:System.Data.SqlClient.SqlCommand" /> object required to perform updates.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-233">アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="37012-233">An application can use the <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:System.Data.SqlClient.SqlCommand> object to be executed.</span></span>  
  
 <span data-ttu-id="37012-234">使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>変更されたコマンドの基礎として。</span><span class="sxs-lookup"><span data-stu-id="37012-234">You can also use <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> as the basis of a modified command.</span></span> <span data-ttu-id="37012-235">たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>および変更、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値に設定してで明示的に設定する、<xref:System.Data.SqlClient.SqlDataAdapter>です。</span><span class="sxs-lookup"><span data-stu-id="37012-235">For example, you might call <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> and modify the <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:System.Data.SqlClient.SqlDataAdapter>.</span></span>  
  
 <span data-ttu-id="37012-236">アプリケーションが明示的に呼び出す必要があります: TRANSACT-SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>場合は任意の方法でステートメントを変更します。</span><span class="sxs-lookup"><span data-stu-id="37012-236">After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way.</span></span> <span data-ttu-id="37012-237">それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用されます。</span><span class="sxs-lookup"><span data-stu-id="37012-237">Otherwise, the <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> will still be using information from the previous statement, which might not be correct.</span></span> <span data-ttu-id="37012-238">TRANSACT-SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>です。</span><span class="sxs-lookup"><span data-stu-id="37012-238">The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.</span></span>  
  
 <span data-ttu-id="37012-239">使用するパラメーター名を生成するときに、既定の動作は、 @p1、 @p2、さまざまなパラメーターについてです。</span><span class="sxs-lookup"><span data-stu-id="37012-239">The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters.</span></span> <span data-ttu-id="37012-240">渡す`true`の`useColumnsForParameterNames`パラメーターさせることができます、<xref:System.Data.OleDb.OleDbCommandBuilder>を代わりに、列名に基づいたパラメーターを生成します。</span><span class="sxs-lookup"><span data-stu-id="37012-240">Passing `true` for the `useColumnsForParameterNames` parameter lets you force the <xref:System.Data.OleDb.OleDbCommandBuilder> to generate parameters based on the column names instead.</span></span> <span data-ttu-id="37012-241">次は、次の条件が満たされた場合にのみ成功します。</span><span class="sxs-lookup"><span data-stu-id="37012-241">This succeeds only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="37012-242"><xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションが指定されており、その長さが、生成されたパラメーター名以上になるとします。</span><span class="sxs-lookup"><span data-stu-id="37012-242">The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection has been specified and its length is equal to or greater than the generated parameter name.</span></span>  
  
-   <span data-ttu-id="37012-243">生成されたパラメーター名で指定した条件を満たしている、<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>正規表現のコレクション。</span><span class="sxs-lookup"><span data-stu-id="37012-243">The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection regular expression.</span></span>  
  
-   <span data-ttu-id="37012-244">A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションを指定します。</span><span class="sxs-lookup"><span data-stu-id="37012-244">A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection is specified.</span></span>  
  
 <span data-ttu-id="37012-245">詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)です。</span><span class="sxs-lookup"><span data-stu-id="37012-245">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand InitializeCommand(class System.Data.Common.DbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function InitializeCommand (command As DbCommand) As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ InitializeCommand(System::Data::Common::DbCommand ^ command);" />
      <MemberSignature Language="F#" Value="override this.InitializeCommand : System.Data.Common.DbCommand -&gt; System.Data.Common.DbCommand" Usage="sqlCommandBuilder.InitializeCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuoteIdentifier">
      <MemberSignature Language="C#" Value="public override string QuoteIdentifier (string unquotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string QuoteIdentifier(string unquotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function QuoteIdentifier (unquotedIdentifier As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ QuoteIdentifier(System::String ^ unquotedIdentifier);" />
      <MemberSignature Language="F#" Value="override this.QuoteIdentifier : string -&gt; string" Usage="sqlCommandBuilder.QuoteIdentifier unquotedIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unquotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unquotedIdentifier">
          <span data-ttu-id="37012-246">引用符で囲まれていない元の ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-246">The original unquoted identifier.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37012-247">カタログの大文字小文字を正しく区別して引用符で囲まれていない ID を指定し、正しく引用符で囲まれた形式でその ID を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-247">Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier.</span>
          </span>
          <span data-ttu-id="37012-248">ID に埋め込まれている引用符は、正しくエスケープされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-248">This includes correctly escaping any embedded quotes in the identifier.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37012-249">引用符で囲まれたバージョンの ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-249">The quoted version of the identifier.</span>
          </span>
          <span data-ttu-id="37012-250">ID 内に埋め込まれている引用符は、正しくエスケープされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-250">Embedded quotes within the identifier are correctly escaped.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuotePrefix">
      <MemberSignature Language="C#" Value="public override string QuotePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuotePrefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property QuotePrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ QuotePrefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QuotePrefix : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.QuotePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37012-251">名前に空白や予約済みトークンなどの文字を含む SQL Server データベース オブジェクト (テーブル、列など) を指定するための開始文字を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-251">Gets or sets the starting character or characters to use when specifying SQL Server database objects, such as tables or columns, whose names contain characters such as spaces or reserved tokens.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37012-252">使用する 1 つ以上の開始文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-252">The starting character or characters to use.</span>
          </span>
          <span data-ttu-id="37012-253">既定値は空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-253">The default is an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="37012-254">変更することはできません、<xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A>、挿入後のプロパティを更新、または削除コマンドが生成されて、その設定を変更するには呼び出した後、 `Update` DataAdapter のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="37012-254">Although you cannot change the <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a DataAdapter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="37012-255">このプロパティは、INSERT、UPDATE、または DELETE の各コマンドの生成後には変更できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-255">This property cannot be changed after an INSERT, UPDATE, or DELETE command has been generated.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteSuffix">
      <MemberSignature Language="C#" Value="public override string QuoteSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuoteSuffix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property QuoteSuffix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ QuoteSuffix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QuoteSuffix : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37012-256">名前に空白や予約済みトークンなどの文字を含む SQL Server データベース オブジェクト (テーブル、列など) を指定するための終了文字を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-256">Gets or sets the ending character or characters to use when specifying SQL Server database objects, such as tables or columns, whose names contain characters such as spaces or reserved tokens.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37012-257">使用する終了文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-257">The ending character or characters to use.</span>
          </span>
          <span data-ttu-id="37012-258">既定値は空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-258">The default is an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="37012-259">変更することはできません、<xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A>、挿入後のプロパティを更新、または削除操作が生成されて、その設定を変更するには呼び出した後、 `Update` DataAdapter のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="37012-259">Although you cannot change the <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> or <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> properties after an insert, update, or delete operation has been generated, you can change their settings after calling the `Update` method of a DataAdapter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="37012-260">このプロパティは、挿入、更新、または削除コマンドの生成後には変更できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-260">This property cannot be changed after an insert, update, or delete command has been generated.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaSeparator">
      <MemberSignature Language="C#" Value="public override string SchemaSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SchemaSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SchemaSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SchemaSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SchemaSeparator : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37012-261">スキーマ識別子と他の識別子との間の区切り記号として使用される文字列を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-261">Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37012-262">スキーマ区切り記号として使用される文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-262">The character to be used as the schema separator.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37012-263">一般に、データベース サーバーは、いくつかの文字を持つ id からスキーマ名を区切ることによって、識別子のスキーマを示します。</span><span class="sxs-lookup"><span data-stu-id="37012-263">Generally, database servers indicate the schema for a identifier by separating the schema name from the identifier with some character.</span></span> <span data-ttu-id="37012-264">たとえば、SQL Server はピリオド、Person.CustomerName、"Person"、スキーマ名があり、識別子は、"CustomerName"などの完全な識別子を作成します。</span><span class="sxs-lookup"><span data-stu-id="37012-264">For example, SQL Server uses a period, creating complete identifiers such as Person.CustomerName, where "Person" is the schema name and "CustomerName" is the identifier.</span></span> <span data-ttu-id="37012-265">このプロパティの設定には、開発者はこの動作を変更することができます。</span><span class="sxs-lookup"><span data-stu-id="37012-265">Setting this property lets developers modify this behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRowUpdatingHandler">
      <MemberSignature Language="C#" Value="protected override void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetRowUpdatingHandler(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetRowUpdatingHandler (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetRowUpdatingHandler(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="override this.SetRowUpdatingHandler : System.Data.Common.DbDataAdapter -&gt; unit" Usage="sqlCommandBuilder.SetRowUpdatingHandler adapter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnquoteIdentifier">
      <MemberSignature Language="C#" Value="public override string UnquoteIdentifier (string quotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string UnquoteIdentifier(string quotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UnquoteIdentifier (quotedIdentifier As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ UnquoteIdentifier(System::String ^ quotedIdentifier);" />
      <MemberSignature Language="F#" Value="override this.UnquoteIdentifier : string -&gt; string" Usage="sqlCommandBuilder.UnquoteIdentifier quotedIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quotedIdentifier">
          <span data-ttu-id="37012-266">埋め込まれている引用符が削除される ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-266">The identifier that will have its embedded quotes removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37012-267">引用符で囲まれた ID を指定して、引用符で囲まれていない正しい形式の ID を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-267">Given a quoted identifier, returns the correct unquoted form of that identifier.</span>
          </span>
          <span data-ttu-id="37012-268">ID に埋め込まれている引用符は、正しくエスケープ解除されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-268">This includes correctly unescaping any embedded quotes in the identifier.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37012-269">埋め込まれていた引用符が適切にエスケープ解除された、引用符で囲まれていない ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="37012-269">The unquoted identifier, with embedded quotes properly unescaped.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>