<Type Name="SqlTransaction" FullName="System.Data.SqlClient.SqlTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="56fb9fe0560c7b212afa8b8463de0e2a74933d52" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlTransaction : System.Data.Common.DbTransaction, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlTransaction extends System.Data.Common.DbTransaction implements class System.Data.IDbTransaction, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlTransaction" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlTransaction&#xA;Inherits DbTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlTransaction sealed : System::Data::Common::DbTransaction, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbTransaction</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="a790b-101">SQL Server データベースで作成する Transact-SQL トランザクションを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a790b-101">Represents a Transact-SQL transaction to be made in a SQL Server database.</span>
      </span>
      <span data-ttu-id="a790b-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a790b-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a790b-103">アプリケーションを作成、<xref:System.Data.SqlClient.SqlTransaction>を呼び出してオブジェクト<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>上、<xref:System.Data.SqlClient.SqlConnection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a790b-103">The application creates a <xref:System.Data.SqlClient.SqlTransaction> object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object.</span></span> <span data-ttu-id="a790b-104">(コミットまたはトランザクションを中止するなど) のトランザクションに関連付けられているすべての後続操作に対して実行され、<xref:System.Data.SqlClient.SqlTransaction>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a790b-104">All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <xref:System.Data.SqlClient.SqlTransaction> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a790b-105">`Try`/`Catch` 例外処理は、コミットまたはロールバック時に常に使用する必要があります、<xref:System.Data.SqlClient.SqlTransaction>です。</span><span class="sxs-lookup"><span data-stu-id="a790b-105">`Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="a790b-106">両方<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>と<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>生成、<xref:System.InvalidOperationException>接続が終了した場合、またはトランザクションが、サーバー上で既にロールバックされている場合。</span><span class="sxs-lookup"><span data-stu-id="a790b-106">Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="a790b-107">詳細については[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]トランザクションを参照してください[明示的なトランザクション](http://msdn.microsoft.com/library/ms175127\(SQL.105\).aspx)と[効率的なトランザクションのコーディング](http://msdn.microsoft.com/library/ms187484\(SQL.105\).aspx)です。</span><span class="sxs-lookup"><span data-stu-id="a790b-107">For more information on [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\(SQL.105\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\(SQL.105\).aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a790b-108">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。</span><span class="sxs-lookup"><span data-stu-id="a790b-108">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="a790b-109">使用する方法も示します、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a790b-109">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="a790b-110">エラーが発生、トランザクションがロールバック最初せずが破棄されるかどうか、またはコミットします。</span><span class="sxs-lookup"><span data-stu-id="a790b-110">The transaction is rolled back on any error, or if it is disposed without first being committed.</span></span> <span data-ttu-id="a790b-111">`Try`/`Catch` エラー処理を使用すると、コミットまたはトランザクションをロールバックしようとするときに、すべてのエラーを処理します。</span><span class="sxs-lookup"><span data-stu-id="a790b-111">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbTransaction.Commit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a790b-112">データベース トランザクションをコミットします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-112">Commits the database transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a790b-113"><xref:System.Data.SqlClient.SqlTransaction.Commit%2A>メソッドは、TRANSACT-SQL の COMMIT TRANSACTION ステートメントに相当します。</span><span class="sxs-lookup"><span data-stu-id="a790b-113">The <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement.</span></span> <span data-ttu-id="a790b-114">ロールバックできませんトランザクション、コミットされたすべての変更に、データベースの一部として必要になるためです。</span><span class="sxs-lookup"><span data-stu-id="a790b-114">You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database.</span></span> <span data-ttu-id="a790b-115">詳細については、SQL Server オンライン ブックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="a790b-115">For more information, see SQL Server Books Online.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a790b-116">`Try`/`Catch` 例外処理は、コミットまたはロールバック時に常に使用する必要があります、<xref:System.Data.SqlClient.SqlTransaction>です。</span><span class="sxs-lookup"><span data-stu-id="a790b-116">`Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="a790b-117">両方`Commit`と<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>生成、<xref:System.InvalidOperationException>接続が終了した場合、またはトランザクションが、サーバー上で既にロールバックされている場合。</span><span class="sxs-lookup"><span data-stu-id="a790b-117">Both `Commit` and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="a790b-118">SQL Server トランザクションの詳細については、SQL Server オンライン ブックの「明示的なトランザクション」および「効率的なトランザクションのコーディング」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a790b-118">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a790b-119">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。</span><span class="sxs-lookup"><span data-stu-id="a790b-119">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="a790b-120">使用する方法も示します、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a790b-120">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="a790b-121">トランザクションはすべてエラーにロールバックします。</span><span class="sxs-lookup"><span data-stu-id="a790b-121">The transaction is rolled back on any error.</span></span> <span data-ttu-id="a790b-122">`Try`/`Catch` エラー処理を使用すると、コミットまたはトランザクションをロールバックしようとするときに、すべてのエラーを処理します。</span><span class="sxs-lookup"><span data-stu-id="a790b-122">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="a790b-123">トランザクションをコミットしようとしてエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-123">An error occurred while trying to commit the transaction.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a790b-124">トランザクションは既にコミットまたはロールバックされています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-124">The transaction has already been committed or rolled back.</span>
          </span>
          <span data-ttu-id="a790b-125">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-125">-or-</span>
          </span>
          <span data-ttu-id="a790b-126">接続が切れています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-126">The connection is broken.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As SqlConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlConnection ^ Connection { System::Data::SqlClient::SqlConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a790b-127">トランザクションに関連付けられた <see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトを取得します。トランザクションが既に無効になっている場合は、<see langword="null" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-127">Gets the <see cref="T:System.Data.SqlClient.SqlConnection" /> object associated with the transaction, or <see langword="null" /> if the transaction is no longer valid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a790b-128">トランザクションに関連付けられる <see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-128">The <see cref="T:System.Data.SqlClient.SqlConnection" /> object associated with the transaction.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a790b-129">1 つのアプリケーションでは、0 個以上のトランザクションで複数のデータベース接続があります。</span><span class="sxs-lookup"><span data-stu-id="a790b-129">A single application may have multiple database connections, each with zero or more transactions.</span></span> <span data-ttu-id="a790b-130">このプロパティでは、によって作成された特定のトランザクションに関連付けられている接続オブジェクトを確認できます。<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a790b-130">This property lets you determine the connection object associated with a particular transaction created by <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.DbConnection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbConnection ^ DbConnection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevel">
      <MemberSignature Language="C#" Value="public override System.Data.IsolationLevel IsolationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.IsolationLevel IsolationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.IsolationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsolationLevel As IsolationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::IsolationLevel IsolationLevel { System::Data::IsolationLevel get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbTransaction.IsolationLevel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a790b-131">このトランザクションの <see cref="T:System.Data.IsolationLevel" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-131">Specifies the <see cref="T:System.Data.IsolationLevel" /> for this transaction.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a790b-132">このトランザクションの <see cref="T:System.Data.IsolationLevel" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-132">The <see cref="T:System.Data.IsolationLevel" /> for this transaction.</span>
          </span>
          <span data-ttu-id="a790b-133">既定値は、<see langword="ReadCommitted" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-133">The default is <see langword="ReadCommitted" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a790b-134">並列トランザクションはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="a790b-134">Parallel transactions are not supported.</span></span> <span data-ttu-id="a790b-135">したがって、<xref:System.Data.IsolationLevel>トランザクション全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a790b-135">Therefore, the <xref:System.Data.IsolationLevel> applies to the whole transaction.</span></span>  
  
 <span data-ttu-id="a790b-136">SQL Server 分離レベルの詳細については、「分離レベルで、データベース エンジン」SQL Server オンライン ブックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="a790b-136">For more information on SQL Server isolation levels, see "Isolation Levels in the Database Engine" in SQL Server Books Online.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rollback">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a790b-137">トランザクションを保留状態からロールバックします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-137">Rolls back a transaction from a pending state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Rollback" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbTransaction.Rollback</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a790b-138">トランザクションを保留状態からロールバックします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-138">Rolls back a transaction from a pending state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a790b-139"><xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドは、TRANSACT-SQL の ROLLBACK TRANSACTION ステートメントに相当します。</span><span class="sxs-lookup"><span data-stu-id="a790b-139">The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement.</span></span> <span data-ttu-id="a790b-140">詳細については、SQL Server オンライン ブックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="a790b-140">For more information, see SQL Server Books Online.</span></span>  
  
 <span data-ttu-id="a790b-141">トランザクションのみロールバック可能を保留状態から (後<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>が呼び出されると、その前に<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>と呼びます)。</span><span class="sxs-lookup"><span data-stu-id="a790b-141">The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called).</span></span> <span data-ttu-id="a790b-142">バックアップ イベントが破棄する前に、トランザクションはロールバックされます`Commit`または`Rollback`と呼びます。</span><span class="sxs-lookup"><span data-stu-id="a790b-142">The transaction is rolled back in the event it is disposed before `Commit` or `Rollback` is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a790b-143">`Try`/`Catch` 例外処理は、トランザクションをロールバックするときに常に使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a790b-143">`Try`/`Catch` exception handling should always be used when rolling back a transaction.</span></span> <span data-ttu-id="a790b-144">A`Rollback`生成、<xref:System.InvalidOperationException>接続が終了した場合、またはトランザクションが、サーバー上で既にロールバックされている場合。</span><span class="sxs-lookup"><span data-stu-id="a790b-144">A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="a790b-145">SQL Server トランザクションの詳細については、SQL Server オンライン ブックの「明示的なトランザクション」および「効率的なトランザクションのコーディング」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a790b-145">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a790b-146">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。</span><span class="sxs-lookup"><span data-stu-id="a790b-146">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="a790b-147">使用する方法も示します、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a790b-147">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="a790b-148">トランザクションはすべてエラーにロールバックします。</span><span class="sxs-lookup"><span data-stu-id="a790b-148">The transaction is rolled back on any error.</span></span> <span data-ttu-id="a790b-149">`Try`/`Catch` エラー処理を使用すると、コミットまたはトランザクションをロールバックしようとするときに、すべてのエラーを処理します。</span><span class="sxs-lookup"><span data-stu-id="a790b-149">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="a790b-150">トランザクションをコミットしようとしてエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-150">An error occurred while trying to commit the transaction.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a790b-151">トランザクションは既にコミットまたはロールバックされています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-151">The transaction has already been committed or rolled back.</span>
          </span>
          <span data-ttu-id="a790b-152">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-152">-or-</span>
          </span>
          <span data-ttu-id="a790b-153">接続が切れています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-153">The connection is broken.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rollback(string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Rollback(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rollback (transactionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback(System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionName">
          <span data-ttu-id="a790b-154">ロールバックするトランザクションの名前、またはロールバック先のセーブポイント。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-154">The name of the transaction to roll back, or the savepoint to which to roll back.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a790b-155">トランザクションまたはセーブポイントの名前を指定して、トランザクションを保留中の状態からロールバックします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-155">Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a790b-156"><xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドは、TRANSACT-SQL の ROLLBACK TRANSACTION ステートメントに相当します。</span><span class="sxs-lookup"><span data-stu-id="a790b-156">The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement.</span></span> <span data-ttu-id="a790b-157">詳細については、「明示的なトランザクション」および「トランザクションのセーブポイント」SQL Server オンライン ブックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="a790b-157">For more information, see "Explicit Transactions" and "Transaction Savepoints" in SQL Server Books Online.</span></span>  
  
 <span data-ttu-id="a790b-158">トランザクションのみロールバック可能を保留状態から (後<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>が呼び出されると、その前に<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>と呼びます)。</span><span class="sxs-lookup"><span data-stu-id="a790b-158">The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called).</span></span> <span data-ttu-id="a790b-159">これを破棄する前に戻る場合は、トランザクションはロールバックされます`Commit`または`Rollback`と呼びます。</span><span class="sxs-lookup"><span data-stu-id="a790b-159">The transaction is rolled back if it is disposed before `Commit` or `Rollback` is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a790b-160">`Try`/`Catch` 例外処理は、トランザクションをロールバックするときに常に使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a790b-160">`Try`/`Catch` exception handling should always be used when rolling back a transaction.</span></span> <span data-ttu-id="a790b-161">A`Rollback`生成、<xref:System.InvalidOperationException>接続が終了した場合、またはトランザクションが、サーバー上で既にロールバックされている場合。</span><span class="sxs-lookup"><span data-stu-id="a790b-161">A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="a790b-162">SQL Server トランザクションの詳細については、SQL Server オンライン ブックの「明示的なトランザクション」および「効率的なトランザクションのコーディング」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a790b-162">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a790b-163">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。</span><span class="sxs-lookup"><span data-stu-id="a790b-163">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="a790b-164">使用する方法も示します、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a790b-164">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="a790b-165">トランザクションはすべてエラーにロールバックします。</span><span class="sxs-lookup"><span data-stu-id="a790b-165">The transaction is rolled back on any error.</span></span> <span data-ttu-id="a790b-166">`Try`/`Catch` エラー処理を使用すると、コミットまたはトランザクションをロールバックしようとするときに、すべてのエラーを処理します。</span><span class="sxs-lookup"><span data-stu-id="a790b-166">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a790b-167">トランザクション ファイル名が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-167">No transaction name was specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a790b-168">トランザクションは既にコミットまたはロールバックされています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-168">The transaction has already been committed or rolled back.</span>
          </span>
          <span data-ttu-id="a790b-169">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-169">-or-</span>
          </span>
          <span data-ttu-id="a790b-170">接続が切れています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-170">The connection is broken.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string savePointName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string savePointName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (savePointName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ savePointName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savePointName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="savePointName">
          <span data-ttu-id="a790b-171">セーブポイントの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-171">The name of the savepoint.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a790b-172">セーブポイントの名前を指定して、トランザクション内にセーブポイントを作成します。セーブポイントは、トランザクションを部分的にロールバックするために使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-172">Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a790b-173"><xref:System.Data.SqlClient.SqlTransaction.Save%2A> メソッドは、TRANSACT-SQL SAVE TRANSACTION ステートメントと同じです。</span><span class="sxs-lookup"><span data-stu-id="a790b-173"><xref:System.Data.SqlClient.SqlTransaction.Save%2A> method is equivalent to the Transact-SQL SAVE TRANSACTION statement.</span></span>  
  
 <span data-ttu-id="a790b-174">使用される値、`savePoint`パラメーターで使用される同じ値を指定できます、`transactionName`の一部の実装のパラメーター、<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a790b-174">The value used in the `savePoint` parameter can be the same value used in the `transactionName` parameter of some implementations of the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method.</span></span>  
  
 <span data-ttu-id="a790b-175">セーブポイントは、トランザクションの一部をロールバックするメカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="a790b-175">Savepoints offer a mechanism to roll back parts of transactions.</span></span> <span data-ttu-id="a790b-176">使用してセーブポイントを作成する、<xref:System.Data.SqlClient.SqlTransaction.Save%2A>メソッド、および、その後の呼び出し、<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>トランザクションの開始にロールバックではなく、セーブポイントにロールバックするメソッド。</span><span class="sxs-lookup"><span data-stu-id="a790b-176">You create a savepoint using the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method, and then later call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to roll back to the savepoint instead of rolling back to the start of the transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="a790b-177">トランザクションをコミットしようとしてエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-177">An error occurred while trying to commit the transaction.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a790b-178">トランザクションは既にコミットまたはロールバックされています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-178">The transaction has already been committed or rolled back.</span>
          </span>
          <span data-ttu-id="a790b-179">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-179">-or-</span>
          </span>
          <span data-ttu-id="a790b-180">接続が切れています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a790b-180">The connection is broken.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>