<Type Name="SqlConnection" FullName="System.Data.SqlClient.SqlConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13a8805b62cac7e4548ac44737cd6c5c1dc3578c" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452438" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlConnection : System.Data.Common.DbConnection, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlConnection extends System.Data.Common.DbConnection implements class System.Data.IDbConnection, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlConnection&#xA;Inherits DbConnection&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlConnection sealed : System::Data::Common::DbConnection, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("InfoMessage")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1b1ac-101">SQL Server データベースへの接続を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1b1ac-101">Represents a connection to a SQL Server database.</span>
      </span>
      <span data-ttu-id="1b1ac-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1b1ac-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-103">A<xref:System.Data.SqlClient.SqlConnection>オブジェクトは、SQL Server データ ソースへの一意のセッションを表します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-103">A <xref:System.Data.SqlClient.SqlConnection> object represents a unique session to a SQL Server data source.</span></span> <span data-ttu-id="1b1ac-104">クライアント/サーバー データベース システムでは、サーバーへのネットワーク接続と同じです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-104">With a client/server database system, it is equivalent to a network connection to the server.</span></span> <span data-ttu-id="1b1ac-105"><xref:System.Data.SqlClient.SqlConnection> と共に使用する<xref:System.Data.SqlClient.SqlDataAdapter>と<xref:System.Data.SqlClient.SqlCommand>Microsoft SQL Server データベースに接続するときにパフォーマンスを向上させる。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-105"><xref:System.Data.SqlClient.SqlConnection> is used together with <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlCommand> to increase performance when connecting to a Microsoft SQL Server database.</span></span> <span data-ttu-id="1b1ac-106">サード パーティのすべての SQL Server 製品と他の OLE DB でサポートされているデータ ソースを使用して、<xref:System.Data.OleDb.OleDbConnection>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-106">For all third-party SQL Server products and other OLE DB-supported data sources, use <xref:System.Data.OleDb.OleDbConnection>.</span></span>  
  
 <span data-ttu-id="1b1ac-107">インスタンスを作成する場合<xref:System.Data.SqlClient.SqlConnection>、すべてのプロパティは、初期値に設定します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-107">When you create an instance of <xref:System.Data.SqlClient.SqlConnection>, all properties are set to their initial values.</span></span> <span data-ttu-id="1b1ac-108">これらの値の一覧は、次を参照してください。、<xref:System.Data.SqlClient.SqlConnection>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-108">For a list of these values, see the <xref:System.Data.SqlClient.SqlConnection> constructor.</span></span>  
  
 <span data-ttu-id="1b1ac-109">参照してください<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>接続文字列のキーワードの一覧についてはします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-109">See <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> for a list of the keywords in a connection string.</span></span>  
  
 <span data-ttu-id="1b1ac-110">場合、<xref:System.Data.SqlClient.SqlConnection>スコープの移動のうち、閉じられているされません。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-110">If the <xref:System.Data.SqlClient.SqlConnection> goes out of scope, it won't be closed.</span></span> <span data-ttu-id="1b1ac-111">したがって、する必要があります明示的に接続を呼び出して終了する`Close`または`Dispose`です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-111">Therefore, you must explicitly close the connection by calling `Close` or `Dispose`.</span></span> <span data-ttu-id="1b1ac-112">`Close` および`Dispose`は機能的に等価です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-112">`Close` and `Dispose` are functionally equivalent.</span></span> <span data-ttu-id="1b1ac-113">値の接続プール場合`Pooling`に設定されている`true`または`yes`では、基になる接続が接続プールに返されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-113">If the connection pooling value `Pooling` is set to `true` or `yes`, the underlying connection is returned back to the connection pool.</span></span> <span data-ttu-id="1b1ac-114">その一方で場合、`Pooling`に設定されている`false`または`no`では、基になるサーバーに接続が閉じられる実際にします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-114">On the other hand, if `Pooling` is set to `false` or `no`, the underlying connection to the server is actually closed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-115">接続が接続プールからフェッチされたり接続プールに返されたりしたとき、ログイン イベントとログアウト イベントはサーバーで発生しません。これは、接続プールに返されても接続は実際には終了していないためです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-115">Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool.</span></span> <span data-ttu-id="1b1ac-116">詳しくは、「[SQL Server の接続プール (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-116">For more information, see [SQL Server Connection Pooling (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).</span></span>  
  
 <span data-ttu-id="1b1ac-117">接続が常に切断させるには、内の接続を開く、`using`ブロック、次のコード フラグメントで示すようにします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-117">To ensure that connections are always closed, open the connection inside of a `using` block, as shown in the following code fragment.</span></span> <span data-ttu-id="1b1ac-118">これにより、コード ブロックを終了するときに、接続が自動的に閉じられることです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-118">Doing so ensures that the connection is automatically closed when the code exits the block.</span></span>  
  
```vb  
Using connection As New SqlConnection(connectionString)  
    connection.Open()  
    ' Do work here; connection closed on following line.  
End Using  
  
```  
  
```csharp  
using (SqlConnection connection = new SqlConnection(connectionString))  
    {  
        connection.Open();  
        // Do work here; connection closed on following line.  
    }  
```  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-119">高パフォーマンス アプリケーションを配置するには、接続プールを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-119">To deploy high-performance applications, you must use connection pooling.</span></span> <span data-ttu-id="1b1ac-120">.NET Framework Data Provider for SQL Server を使用するときにありません一部の設定を変更できますが接続プール管理するため、プロバイダー、自動的に有効にします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-120">When you use the .NET Framework Data Provider for SQL Server, you do not have to enable connection pooling because the provider manages this automatically, although you can modify some settings.</span></span> <span data-ttu-id="1b1ac-121">詳しくは、「[SQL Server の接続プール (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-121">For more information, see [SQL Server Connection Pooling (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).</span></span>  
  
 <span data-ttu-id="1b1ac-122">場合、<xref:System.Data.SqlClient.SqlException>メソッドの実行によって生成される、 <xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlConnection>重大度レベルが 19 以下の場合は開いたままです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-122">If a <xref:System.Data.SqlClient.SqlException> is generated by the method executing a <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlConnection> remains open when the severity level is 19 or less.</span></span> <span data-ttu-id="1b1ac-123">重大度レベルが 20 以上の場合は、通常は閉じます、<xref:System.Data.SqlClient.SqlConnection>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-123">When the severity level is 20 or greater, the server ordinarily closes the <xref:System.Data.SqlClient.SqlConnection>.</span></span> <span data-ttu-id="1b1ac-124">ただし、ユーザーは接続を再び開き、続行できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-124">However, the user can reopen the connection and continue.</span></span>  
  
 <span data-ttu-id="1b1ac-125">インスタンスを作成するアプリケーション、<xref:System.Data.SqlClient.SqlConnection>オブジェクトを宣言的または強制的のセキュリティ確認要求を設定して、コードに十分なアクセス許可を持つすべての直接的および間接的な呼び出し元を要求できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-125">An application that creates an instance of the <xref:System.Data.SqlClient.SqlConnection> object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands.</span></span> <span data-ttu-id="1b1ac-126"><xref:System.Data.SqlClient.SqlConnection> により、セキュリティ要求を使用して、<xref:System.Data.SqlClient.SqlClientPermission>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-126"><xref:System.Data.SqlClient.SqlConnection> makes security demands using the <xref:System.Data.SqlClient.SqlClientPermission> object.</span></span> <span data-ttu-id="1b1ac-127">ユーザーが、コードが使用して、十分なアクセス許可を持っているを確認することができます、<xref:System.Data.SqlClient.SqlClientPermissionAttribute>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-127">Users can verify that their code has sufficient permissions by using the <xref:System.Data.SqlClient.SqlClientPermissionAttribute> object.</span></span> <span data-ttu-id="1b1ac-128">ユーザーと管理者を使っても、 [Caspol.exe (コード アクセス セキュリティ ポリシー ツール)](~/docs/framework/tools/caspol-exe-code-access-security-policy-tool.md)コンピューター、ユーザー、およびエンタープライズ レベルのセキュリティ ポリシーを変更します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-128">Users and administrators can also use the [Caspol.exe (Code Access Security Policy Tool)](~/docs/framework/tools/caspol-exe-code-access-security-policy-tool.md) to modify security policy at the machine, user, and enterprise levels.</span></span> <span data-ttu-id="1b1ac-129">詳細については、[セキュリティ](http://msdn.microsoft.com/library/9a9621d7-8883-4a4f-a874-65e8e09e20a6)に関するページをご覧ください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-129">For more information, see [Security](http://msdn.microsoft.com/library/9a9621d7-8883-4a4f-a874-65e8e09e20a6).</span></span> <span data-ttu-id="1b1ac-130">セキュリティ要求を使用する方法を示す例では、次を参照してください。[コード アクセス セキュリティと ADO.NET](~/docs/framework/data/adonet/code-access-security.md)です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-130">For an example demonstrating how to use security demands, see [Code Access Security and ADO.NET](~/docs/framework/data/adonet/code-access-security.md).</span></span>  
  
 <span data-ttu-id="1b1ac-131">サーバーからの警告および情報メッセージを処理の詳細については、次を参照してください。[接続イベント](~/docs/framework/data/adonet/connection-events.md)です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-131">For more information about handling warning and informational messages from the server, see [Connection Events](~/docs/framework/data/adonet/connection-events.md).</span></span> <span data-ttu-id="1b1ac-132">SQL Server エンジンのエラーとエラー メッセージは、SQL Server オンライン ブックに記載されています。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-132">SQL Server engine errors and error messages are documented in SQL Server Books Online.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1b1ac-133">共有メモリではなく、TCP を強制することができます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-133">You can force TCP instead of shared memory.</span></span> <span data-ttu-id="1b1ac-134">Tcp を付けることによって行うことができます: 接続でサーバー名を文字列または localhost を使用できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-134">You can do that by prefixing tcp: to the server name in the connection string or you can use localhost.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-135">次の例を作成、<xref:System.Data.SqlClient.SqlCommand>と<xref:System.Data.SqlClient.SqlConnection>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-135">The following example creates a <xref:System.Data.SqlClient.SqlCommand> and a <xref:System.Data.SqlClient.SqlConnection>.</span></span> <span data-ttu-id="1b1ac-136"><xref:System.Data.SqlClient.SqlConnection>が開いたときおよびとして設定、<xref:System.Data.SqlClient.SqlCommand.Connection%2A>の<xref:System.Data.SqlClient.SqlCommand>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-136">The <xref:System.Data.SqlClient.SqlConnection> is opened and set as the <xref:System.Data.SqlClient.SqlCommand.Connection%2A> for the <xref:System.Data.SqlClient.SqlCommand>.</span></span> <span data-ttu-id="1b1ac-137">この例では、<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-137">The example then calls <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>.</span></span> <span data-ttu-id="1b1ac-138">これを実現する、<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>接続文字列とは、クエリ文字列が渡される、 [!INCLUDE[tsql](~/includes/tsql-md.md)] INSERT ステートメントです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-138">To accomplish this, the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is a [!INCLUDE[tsql](~/includes/tsql-md.md)] INSERT statement.</span></span> <span data-ttu-id="1b1ac-139">使用して、コードの終了時に、接続が自動的に終了ブロック。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-139">The connection is closed automatically when the code exits the using block.</span></span>  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-140">
            <see cref="T:System.Data.SqlClient.SqlConnection" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-140">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlConnection" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-141">
            <see cref="T:System.Data.SqlClient.SqlConnection" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-141">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlConnection" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-142">新しいインスタンスをときに<xref:System.Data.SqlClient.SqlConnection>が作成、読み取り/書き込みプロパティは、関連付けられているキーワードを使用して明示的に設定されている場合を除き、次の初期値に設定されます、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-142">When a new instance of <xref:System.Data.SqlClient.SqlConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property.</span></span>  
  
|<span data-ttu-id="1b1ac-143">プロパティ</span><span class="sxs-lookup"><span data-stu-id="1b1ac-143">Properties</span></span>|<span data-ttu-id="1b1ac-144">初期値</span><span class="sxs-lookup"><span data-stu-id="1b1ac-144">Initial value</span></span>|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|<span data-ttu-id="1b1ac-145">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="1b1ac-145">empty string ("")</span></span>|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|<span data-ttu-id="1b1ac-146">16</span><span class="sxs-lookup"><span data-stu-id="1b1ac-146">15</span></span>|  
|<xref:System.Data.SqlClient.SqlConnection.Database%2A>|<span data-ttu-id="1b1ac-147">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="1b1ac-147">empty string ("")</span></span>|  
|<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|<span data-ttu-id="1b1ac-148">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="1b1ac-148">empty string ("")</span></span>|  
  
 <span data-ttu-id="1b1ac-149">のみを使用してこれらのプロパティの値を変更することができます、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-149">You can change the value for these properties only by using the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property.</span></span> <span data-ttu-id="1b1ac-150"><xref:System.Data.SqlClient.SqlConnectionStringBuilder>クラスを作成および接続文字列の内容を管理するための機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-150">The <xref:System.Data.SqlClient.SqlConnectionStringBuilder> class provides functionality for creating and managing the contents of connection strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-151">次の例を作成して開きます、<xref:System.Data.SqlClient.SqlConnection>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-151">The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.SqlConnection Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.SqlConnection Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">
          <span data-ttu-id="1b1ac-152">SQL Server データベースを開くために使用される接続。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-152">The connection used to open the SQL Server database.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-153">接続文字列を示す文字列を指定して、<see cref="T:System.Data.SqlClient.SqlConnection" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-153">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlConnection" /> class when given a string that contains the connection string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-154">新しいインスタンスをときに<xref:System.Data.SqlClient.SqlConnection>が作成、読み取り/書き込みプロパティは、関連付けられているキーワードを使用して明示的に設定されている場合を除き、次の初期値に設定されます、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-154">When a new instance of <xref:System.Data.SqlClient.SqlConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property.</span></span>  
  
|<span data-ttu-id="1b1ac-155">プロパティ</span><span class="sxs-lookup"><span data-stu-id="1b1ac-155">Properties</span></span>|<span data-ttu-id="1b1ac-156">初期値</span><span class="sxs-lookup"><span data-stu-id="1b1ac-156">Initial value</span></span>|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|`connectionString`|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|<span data-ttu-id="1b1ac-157">16</span><span class="sxs-lookup"><span data-stu-id="1b1ac-157">15</span></span>|  
|<xref:System.Data.SqlClient.SqlConnection.Database%2A>|<span data-ttu-id="1b1ac-158">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="1b1ac-158">empty string ("")</span></span>|  
|<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|<span data-ttu-id="1b1ac-159">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="1b1ac-159">empty string ("")</span></span>|  
  
 <span data-ttu-id="1b1ac-160">のみを使用してこれらのプロパティの値を変更することができます、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-160">You can change the value for these properties only by using the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property.</span></span> <span data-ttu-id="1b1ac-161"><xref:System.Data.SqlClient.SqlConnection>クラスを作成および接続文字列の内容を管理するための機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-161">The <xref:System.Data.SqlClient.SqlConnection> class provides functionality for creating and managing the contents of connection strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-162">次の例を作成して開きます、<xref:System.Data.SqlClient.SqlConnection>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-162">The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.SqlConnection1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.SqlConnection1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential credential);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class System.Data.SqlClient.SqlCredential credential) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;xamarinandroid-7.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, credential As SqlCredential)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ credential);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential cred);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class System.Data.SqlClient.SqlCredential cred) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, cred As SqlCredential)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ cred);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" Index="0" />
        <Parameter Name="credential" Type="System.Data.SqlClient.SqlCredential" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="cred" Type="System.Data.SqlClient.SqlCredential" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="connectionString">
          <span data-ttu-id="1b1ac-163">次の接続文字列キーワードを一切使用しない接続文字列: <see langword="Integrated Security = true" />、<see langword="UserId" />、または <see langword="Password" />。または、<see langword="ContextConnection = true" /> を使用しない接続文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-163">A connection string that does not use any of the following connection string keywords: <see langword="Integrated Security = true" />, <see langword="UserId" />, or <see langword="Password" />; or that does not use <see langword="ContextConnection = true" />.</span>
          </span>
        </param>
        <param name="credential">To be added.</param>
        <param name="cred">To be added.</param>
        <summary>
          <span data-ttu-id="1b1ac-164">
            <see langword="Integrated Security = true" /> と、ユーザー ID とパスワードを含む <see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトを使用しない接続文字列を指定して、<see cref="T:System.Data.SqlClient.SqlCredential" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-164">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlConnection" /> class given a connection string, that does not use <see langword="Integrated Security = true" /> and a <see cref="T:System.Data.SqlClient.SqlCredential" /> object that contains the user ID and password.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessToken">
      <MemberSignature Language="C#" Value="public string AccessToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessToken" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.AccessToken" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessToken As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessToken { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-165">接続のアクセス トークンを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-165">Gets or sets the access token for the connection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-166">接続のアクセス トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-166">The access token for the connection.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-167">データベース トランザクションを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-167">Starts a database transaction.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-168">データベース トランザクションを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-168">Starts a database transaction.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-169">新しいトランザクションを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-169">An object representing the new transaction.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-170">このコマンドは、BEGIN TRANSACTION の SQL Server の実装にマップされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-170">This command maps to the SQL Server implementation of BEGIN TRANSACTION.</span></span>  
  
 <span data-ttu-id="1b1ac-171">明示的にコミットまたはを使用してトランザクションをロールバックする必要があります、<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>または<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-171">You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method.</span></span> <span data-ttu-id="1b1ac-172">.NET Framework Data Provider for SQL Server トランザクションの管理モデルが正しく実行するようにするには、SQL Server によって提供されるものなど、他のトランザクション管理モデルを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-172">To make sure that the .NET Framework Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-173">分離レベルを指定しないと、既定の分離レベルが使用されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-173">If you do not specify an isolation level, the default isolation level is used.</span></span> <span data-ttu-id="1b1ac-174">分離レベルを指定する、<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>メソッドを使用するオーバー ロードを使用して、`iso`パラメーター (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>)。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-174">To specify an isolation level with the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method, use the overload that takes the `iso` parameter (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>).</span></span> <span data-ttu-id="1b1ac-175">接続が終了または破棄されるまで、トランザクションが完了した後、トランザクションの分離レベルが保持されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-175">The isolation level set for a transaction persists after the transaction is completed and until the connection is closed or disposed.</span></span> <span data-ttu-id="1b1ac-176">分離レベルに設定する**スナップショット**snapshot 分離レベルが有効になっていないデータベースではない例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-176">Setting the isolation level to **Snapshot** in a database where the snapshot isolation level is not enabled does not throw an exception.</span></span> <span data-ttu-id="1b1ac-177">既定の分離レベルを使用して、トランザクションが完了します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-177">The transaction will complete using the default isolation level.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1b1ac-178">場合は、サーバーで、レベル 16 または上位のエラーが発生する、そのトランザクションを開始するには、トランザクションはロールバックされませんまで、<xref:System.Data.SqlClient.SqlDataReader.Read%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-178">If a transaction is started and a level 16 or higher error occurs on the server, the transaction will not be rolled back until the <xref:System.Data.SqlClient.SqlDataReader.Read%2A> method is invoked.</span></span> <span data-ttu-id="1b1ac-179">例外はスローされません**ExecuteReader**です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-179">No exception is thrown on **ExecuteReader**.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1b1ac-180">クエリが大量のデータと呼び出しを返す場合`BeginTransaction`、 <xref:System.Data.SqlClient.SqlException> MARS を使用する場合に、SQL Server で並列トランザクションが許可されないためにスローされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-180">When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because SQL Server does not allow parallel transactions when using MARS.</span></span> <span data-ttu-id="1b1ac-181">この問題を避けるためには、常にトランザクションに関連付けるコマンドや、接続リーダーが開く前にします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-181">To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</span></span>  
  
 <span data-ttu-id="1b1ac-182">SQL Server トランザクションの詳細については、SQL Server オンライン ブックの「明示的なトランザクション」および「効率的なトランザクションのコーディング」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-182">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-183">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-183">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="1b1ac-184">使用する方法も示します、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-184">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">
          <span data-ttu-id="1b1ac-185">並列トランザクションは、複数のアクティブな結果セット (MARS) を使用する場合には使用できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-185">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1b1ac-186">並列トランザクションはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-186">Parallel transactions are not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(valuetype System.Data.IsolationLevel iso) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (iso As IsolationLevel) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::Data::IsolationLevel iso);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iso" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="iso">
          <span data-ttu-id="1b1ac-187">トランザクションを実行する分離レベル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-187">The isolation level under which the transaction should run.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-188">分離レベルを指定して、データベース トランザクションを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-188">Starts a database transaction with the specified isolation level.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-189">新しいトランザクションを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-189">An object representing the new transaction.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-190">このコマンドは、BEGIN TRANSACTION の SQL Server の実装にマップされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-190">This command maps to the SQL Server implementation of BEGIN TRANSACTION.</span></span>  
  
 <span data-ttu-id="1b1ac-191">明示的にコミットまたはを使用してトランザクションをロールバックする必要があります、<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>または<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-191">You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method.</span></span> <span data-ttu-id="1b1ac-192">.NET Framework Data Provider for SQL Server トランザクションの管理モデルが正しく実行するようにするには、SQL Server によって提供されるものなど、他のトランザクション管理モデルを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-192">To make sure that the .NET Framework Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-193">トランザクションがコミットまたはロールバック、トランザクションの分離レベルを自動コミット モード (SQL Server の既定値) になっているすべての後続のコマンドを維持します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-193">After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the SQL Server default).</span></span> <span data-ttu-id="1b1ac-194">これにより、永続化して、行外には、他のユーザーのロックは、REPEATABLE read 分離レベルなど、予期しない結果が生成できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-194">This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row.</span></span> <span data-ttu-id="1b1ac-195">既定の (READ COMMITTED) に、分離レベルをリセットするには、実行、[!INCLUDE[tsql](~/includes/tsql-md.md)]ステートメントのセットのトランザクション分離レベル READ COMMITTED またはコール<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=nameWithType>に続く<xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-195">To reset the isolation level to the default (READ COMMITTED), execute the [!INCLUDE[tsql](~/includes/tsql-md.md)] SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=nameWithType> followed immediately by <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1b1ac-196">SQL Server 分離レベルの詳細については、「分離レベルで、データベース エンジン」SQL Server オンライン ブックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-196">For more information on SQL Server isolation levels, see "Isolation Levels in the Database Engine" in SQL Server Books Online.</span></span>  
  
 <span data-ttu-id="1b1ac-197">SQL Server トランザクションの詳細については、SQL Server オンライン ブックの「明示的なトランザクション」および「効率的なトランザクションのコーディング」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-197">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1b1ac-198">クエリが大量のデータと呼び出しを返す場合`BeginTransaction`、 <xref:System.Data.SqlClient.SqlException> MARS を使用する場合に、SQL Server で並列トランザクションが許可されないためにスローされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-198">When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because SQL Server does not allow parallel transactions when using MARS.</span></span> <span data-ttu-id="1b1ac-199">この問題を避けるためには、常にトランザクションに関連付けるコマンドや、接続リーダーが開く前にします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-199">To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-200">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-200">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="1b1ac-201">使用する方法も示します、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-201">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">
          <span data-ttu-id="1b1ac-202">並列トランザクションは、複数のアクティブな結果セット (MARS) を使用する場合には使用できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-202">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1b1ac-203">並列トランザクションはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-203">Parallel transactions are not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (transactionName As String) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionName">
          <span data-ttu-id="1b1ac-204">トランザクションの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-204">The name of the transaction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-205">トランザクション名を指定して、データベース トランザクションを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-205">Starts a database transaction with the specified transaction name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-206">新しいトランザクションを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-206">An object representing the new transaction.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-207">このコマンドは、BEGIN TRANSACTION の SQL Server の実装にマップされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-207">This command maps to the SQL Server implementation of BEGIN TRANSACTION.</span></span>  
  
 <span data-ttu-id="1b1ac-208">長さ、`transactionName`パラメーターは、32 文字を超えない必要があります。 それ以外の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-208">The length of the `transactionName` parameter must not exceed 32 characters; otherwise an exception will be thrown.</span></span>  
  
 <span data-ttu-id="1b1ac-209">値、`transactionName`以降の呼び出しでパラメーターを使用する<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>し、、`savePoint`のパラメーター、<xref:System.Data.SqlClient.SqlTransaction.Save%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-209">The value in the `transactionName` parameter can be used in later calls to <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> and in the `savePoint` parameter of the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method.</span></span>  
  
 <span data-ttu-id="1b1ac-210">明示的にコミットまたはを使用してトランザクションをロールバックする必要があります、<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>または<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-210">You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method.</span></span> <span data-ttu-id="1b1ac-211">確認する、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]データ プロバイダーの SQL Server トランザクションの管理モデルが正しく、実行を使用しないでください、いずれかの SQL Server によって提供されるなど、他のモデルのトランザクション管理します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-211">To make sure that the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.</span></span>  
  
 <span data-ttu-id="1b1ac-212">SQL Server トランザクションの詳細については、SQL Server オンライン ブックの「明示的なトランザクション」および「効率的なトランザクションのコーディング」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-212">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1b1ac-213">クエリが大量のデータと呼び出しを返す場合`BeginTransaction`、 <xref:System.Data.SqlClient.SqlException> MARS を使用する場合に、SQL Server で並列トランザクションが許可されないためにスローされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-213">When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because SQL Server does not allow parallel transactions when using MARS.</span></span> <span data-ttu-id="1b1ac-214">この問題を避けるためには、常にトランザクションに関連付けるコマンドや、接続リーダーが開く前にします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-214">To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-215">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-215">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="1b1ac-216">使用する方法も示します、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-216">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">
          <span data-ttu-id="1b1ac-217">並列トランザクションは、複数のアクティブな結果セット (MARS) を使用する場合には使用できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-217">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1b1ac-218">並列トランザクションはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-218">Parallel transactions are not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso, string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(valuetype System.Data.IsolationLevel iso, string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (iso As IsolationLevel, transactionName As String) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::Data::IsolationLevel iso, System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iso" Type="System.Data.IsolationLevel" />
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="iso">
          <span data-ttu-id="1b1ac-219">トランザクションを実行する分離レベル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-219">The isolation level under which the transaction should run.</span>
          </span>
        </param>
        <param name="transactionName">
          <span data-ttu-id="1b1ac-220">トランザクションの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-220">The name of the transaction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-221">分離レベルとトランザクション名を指定して、データベース トランザクションを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-221">Starts a database transaction with the specified isolation level and transaction name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-222">新しいトランザクションを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-222">An object representing the new transaction.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-223">このコマンドは、BEGIN TRANSACTION の SQL Server の実装にマップされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-223">This command maps to the SQL Server implementation of BEGIN TRANSACTION.</span></span>  
  
 <span data-ttu-id="1b1ac-224">値、`transactionName`以降の呼び出しでパラメーターを使用する<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>し、、`savePoint`のパラメーター、<xref:System.Data.SqlClient.SqlTransaction.Save%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-224">The value in the `transactionName` parameter can be used in later calls to <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> and in the `savePoint` parameter of the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method.</span></span>  
  
 <span data-ttu-id="1b1ac-225">明示的にコミットまたはを使用してトランザクションをロールバックする必要があります、<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>または<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-225">You must explicitly commit or roll back the transaction using the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> or <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method.</span></span> <span data-ttu-id="1b1ac-226">SQL Server トランザクションの管理モデルが正しく実行されるようにするには、SQL Server によって提供されるものなど、他のトランザクション管理モデルを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-226">To make sure that the SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-227">トランザクションがコミットまたはロールバック、トランザクションの分離レベルを自動コミット モード (SQL Server の既定値) になっているすべての後続のコマンドを維持します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-227">After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the SQL Server default).</span></span> <span data-ttu-id="1b1ac-228">これにより、永続化して、行外には、他のユーザーのロックは、REPEATABLE read 分離レベルなど、予期しない結果が生成できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-228">This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row.</span></span> <span data-ttu-id="1b1ac-229">既定の (READ COMMITTED) に、分離レベルをリセットするには、実行、[!INCLUDE[tsql](~/includes/tsql-md.md)]ステートメントのセットのトランザクション分離レベル READ COMMITTED またはコール<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=nameWithType>に続く<xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-229">To reset the isolation level to the default (READ COMMITTED), execute the [!INCLUDE[tsql](~/includes/tsql-md.md)] SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=nameWithType> followed immediately by <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1b1ac-230">SQL Server 分離レベルの詳細については、「分離レベルで、データベース エンジン」SQL Server オンライン ブックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-230">For more information on SQL Server isolation levels, see "Isolation Levels in the Database Engine" in SQL Server Books Online.</span></span>  
  
 <span data-ttu-id="1b1ac-231">SQL Server トランザクションの詳細については、SQL Server オンライン ブックの「明示的なトランザクション」および「効率的なトランザクションのコーディング」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-231">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1b1ac-232">クエリが大量のデータと呼び出しを返す場合`BeginTransaction`、 <xref:System.Data.SqlClient.SqlException> MARS を使用する場合に、SQL Server で並列トランザクションが許可されないためにスローされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-232">When your query returns a large amount of data and calls `BeginTransaction`, a <xref:System.Data.SqlClient.SqlException> is thrown because SQL Server does not allow parallel transactions when using MARS.</span></span> <span data-ttu-id="1b1ac-233">この問題を避けるためには、常にトランザクションに関連付けるコマンドや、接続リーダーが開く前にします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-233">To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-234">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-234">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="1b1ac-235">使用する方法も示します、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-235">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">
          <span data-ttu-id="1b1ac-236">並列トランザクションは、複数のアクティブな結果セット (MARS) を使用する場合には使用できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-236">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1b1ac-237">並列トランザクションはサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-237">Parallel transactions are not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string database);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string database) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (database As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ database);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.ChangeDatabase(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="database" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="database">
          <span data-ttu-id="1b1ac-238">現在のデータベースの代わりに使用するデータベースの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-238">The name of the database to use instead of the current database.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-239">開いている <see cref="T:System.Data.SqlClient.SqlConnection" /> の現在のデータベースを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-239">Changes the current database for an open <see cref="T:System.Data.SqlClient.SqlConnection" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-240">指定された値、`database`パラメーターは、有効なデータベース名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-240">The value supplied in the `database` parameter must be a valid database name.</span></span> <span data-ttu-id="1b1ac-241">`database`パラメーターは、null 値、空の文字列または空白だけの文字の文字列を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-241">The `database` parameter cannot contain a null value, an empty string, or a string with only blank characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-242">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>し、一部の読み取り専用プロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-242">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1b1ac-243">データベース名が正しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-243">The database name is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1b1ac-244">接続が開かれていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-244">The connection is not open.</span>
          </span>
        </exception>
        <exception cref="T:System.Data.SqlClient.SqlException">
          <span data-ttu-id="1b1ac-245">データベースを変更できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-245">Cannot change the database.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChangePassword">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-246">SQL Server パスワードを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-246">Changes the SQL Server password.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChangePassword">
      <MemberSignature Language="C#" Value="public static void ChangePassword (string connectionString, string newPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangePassword(string connectionString, string newPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ChangePassword (connectionString As String, newPassword As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChangePassword(System::String ^ connectionString, System::String ^ newPassword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="newPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">
          <span data-ttu-id="1b1ac-247">目的のサーバーに接続するために必要な情報を含む接続文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-247">The connection string that contains enough information to connect to the server that you want.</span>
          </span>
          <span data-ttu-id="1b1ac-248">接続文字列には、ユーザー ID と現在のパスワードが含まれている必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-248">The connection string must contain the user ID and the current password.</span>
          </span>
        </param>
        <param name="newPassword">
          <span data-ttu-id="1b1ac-249">新たに設定するパスワード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-249">The new password to set.</span>
          </span>
          <span data-ttu-id="1b1ac-250">このパスワードは、サーバー側で設定されているパスワード セキュリティ ポリシー (最低限の長さ、使用文字の要件など) を満たしている必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-250">This password must comply with any password security policy set on the server, including minimum length, requirements for specific characters, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-251">接続文字列で指定されているユーザーの SQL Server のパスワードを、指定された新しいパスワードに変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-251">Changes the SQL Server password for the user indicated in the connection string to the supplied new password.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-252">Windows Server を SQL Server を使用しているときに開発者は、により、クライアント アプリケーションは既存のパスワードを変更するために、現在と新しいパスワードの両方を指定する機能を利用できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-252">When you are using SQL Server on Windows Server, developers can take advantage of functionality that lets the client application supply both the current and a new password in order to change the existing password.</span></span> <span data-ttu-id="1b1ac-253">アプリケーションは、古いパスワードの有効期限が切れてし、管理者の介入なしにこの操作を完了できる場合、最初のログイン時に、新しいパスワードのユーザー入力を求めるなどの機能を実装できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-253">Applications can implement functionality such as prompting the user for a new password during initial login if the old one has expired, and this operation can be completed without administrator intervention.</span></span>  
  
 <span data-ttu-id="1b1ac-254"><xref:System.Data.SqlClient.SqlConnection.ChangePassword%2A>メソッドは、指定されたに示されたユーザーの SQL Server のパスワードを変更`connectionString`パラメーターで指定された値を`newPassword`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-254">The <xref:System.Data.SqlClient.SqlConnection.ChangePassword%2A> method changes the SQL Server password for the user indicated in the supplied `connectionString` parameter to the value supplied in the `newPassword` parameter.</span></span> <span data-ttu-id="1b1ac-255">かどうか、接続文字列には、統合セキュリティのオプションが含まれます (つまり、"Integrated Security = True"またはそれと同等)、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-255">If the connection string includes the option for integrated security (that is, "Integrated Security=True" or the equivalent), an exception is thrown.</span></span>  
  
 <span data-ttu-id="1b1ac-256">パスワードが期限切れを呼び出すことを確認する、<xref:System.Data.SqlClient.SqlConnection.Open%2A>メソッドが発生し、<xref:System.Data.SqlClient.SqlException>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-256">To determine that the password has expired, calling the <xref:System.Data.SqlClient.SqlConnection.Open%2A> method raises a <xref:System.Data.SqlClient.SqlException>.</span></span> <span data-ttu-id="1b1ac-257">接続文字列に含まれるパスワードをリセットする必要があるために、<xref:System.Data.SqlClient.SqlException.Number%2A>例外のプロパティには、状態値 18487 または 18488 が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-257">In order to indicate that the password that is contained within the connection string must be reset, the <xref:System.Data.SqlClient.SqlException.Number%2A> property for the exception contains the status value 18487 or 18488.</span></span> <span data-ttu-id="1b1ac-258">最初の値 (18487) は、パスワードが期限切れ、ある 2 つ目の (18488) ログインする前にパスワードをリセットする必要がありますを示します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-258">The first value (18487) indicates that the password has expired and the second (18488) indicates that the password must be reset before logging in.</span></span>  
  
 <span data-ttu-id="1b1ac-259">このメソッドは、サーバーに、独自の接続を開き、パスワードの変更を要求しが完了するとすぐに、接続を閉じます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-259">This method opens its own connection to the server, requests the password change, and closes the connection as soon as it has completed.</span></span> <span data-ttu-id="1b1ac-260">この接続がいないをから取得されていません、SQL Server の接続プールに返されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-260">This connection is not retrieved from, nor returned to, the SQL Server connection pool.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-261">パスワードの変更の簡単な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-261">The following is a simple example of changing a password:</span></span>  
  
```  
class Program {  
   static void Main(string[] args) {  
      System.Data.SqlClient.SqlConnection.ChangePassword(  
        "Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password",   
       "new_password");  
   }  
}  
  
```  
  
```  
Module Module1  
    Sub Main()  
System.Data.SqlClient.SqlConnection.ChangePassword(  
        "Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password",   
       "new_password")  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="1b1ac-262">次のコンソール アプリケーションでは、現在のパスワードの有効期限が切れているため、ユーザーのパスワードの変更に関連する問題について説明します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-262">The following console application demonstrates the issues involved in changing a user's password because the current password has expired.</span></span>  
  
 [!code-csharp[DataWorks SqlConnection.ChangePassword#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlConnection.ChangePassword/CS/source.cs#1)]
 [!code-vb[DataWorks SqlConnection.ChangePassword#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlConnection.ChangePassword/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1b1ac-263">接続文字列には、統合セキュリティを使用するオプションが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-263">The connection string includes the option to use integrated security.</span>
          </span>
          <span data-ttu-id="1b1ac-264">または  <paramref name="newPassword" /> が 128 文字を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-264">Or  The <paramref name="newPassword" /> exceeds 128 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1b1ac-265">
            <paramref name="connectionString" /> または <paramref name="newPassword" /> のいずれかのパラメーターが null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-265">Either the <paramref name="connectionString" /> or the <paramref name="newPassword" /> parameter is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ChangePassword">
      <MemberSignature Language="C#" Value="public static void ChangePassword (string connectionString, System.Data.SqlClient.SqlCredential credential, System.Security.SecureString newSecurePassword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangePassword(string connectionString, class System.Data.SqlClient.SqlCredential credential, class System.Security.SecureString newSecurePassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ChangePassword (connectionString As String, credential As SqlCredential, newSecurePassword As SecureString)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChangePassword(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ credential, System::Security::SecureString ^ newSecurePassword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="credential" Type="System.Data.SqlClient.SqlCredential" />
        <Parameter Name="newSecurePassword" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="connectionString">
          <span data-ttu-id="1b1ac-266">サーバーに接続するために必要な情報を保持する接続文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-266">The connection string that contains enough information to connect to a server.</span>
          </span>
          <span data-ttu-id="1b1ac-267">接続の文字列は <see langword="Integrated Security = true" />、<see langword="UserId" />、<see langword="Password" />、または<see langword="ContextConnection = true" /> のいずれの接続文字列のキーワードも使用すべきではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-267">The connection string should not use any of the following connection string keywords: <see langword="Integrated Security = true" />, <see langword="UserId" />, or <see langword="Password" />; or <see langword="ContextConnection = true" />.</span>
          </span>
        </param>
        <param name="credential">
          <span data-ttu-id="1b1ac-268">
            <see cref="T:System.Data.SqlClient.SqlCredential" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-268">A <see cref="T:System.Data.SqlClient.SqlCredential" /> object.</span>
          </span>
        </param>
        <param name="newSecurePassword">
          <span data-ttu-id="1b1ac-269">新しいパスワード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-269">The new password.</span>
          </span>
          <span data-ttu-id="1b1ac-270">
            <c>newSecurePassword</c> は読み取り専用にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-270">
              <c>newSecurePassword</c> must be read only.</span>
          </span>
          <span data-ttu-id="1b1ac-271">このパスワードは、サーバー側で設定されているパスワード セキュリティ ポリシー (最低限の長さ、使用文字の要件など) も満たしている必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-271">The password must also comply with any password security policy set on the server (for example, minimum length and requirements for specific characters).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-272">
            <see cref="T:System.Data.SqlClient.SqlCredential" /> オブジェクトで指定されたユーザーの SQL Server のパスワードを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-272">Changes the SQL Server password for the user indicated in the <see cref="T:System.Data.SqlClient.SqlCredential" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1b1ac-273">1.接続の文字列には <see langword="UserId" />、<see langword="Password" />、または <see langword="Integrated Security=true" /> の組み合わせのいずれかが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-273">1.  The connection string contains any combination of <see langword="UserId" />, <see langword="Password" />, or <see langword="Integrated Security=true" />.</span>
          </span>
          <span data-ttu-id="1b1ac-274">2.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-274">2.</span>
          </span>
          <span data-ttu-id="1b1ac-275">
            <see langword="Context Connection=true" /> を含む接続文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-275">The connection string contains <see langword="Context Connection=true" />.</span>
          </span>
          <span data-ttu-id="1b1ac-276">3.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-276">3.</span>
          </span>
          <span data-ttu-id="1b1ac-277">
            <paramref name="newSecurePassword" /> が 128 文字を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-277">
              <paramref name="newSecurePassword" /> is greater than 128 characters.</span>
          </span>
          <span data-ttu-id="1b1ac-278">4.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-278">4.</span>
          </span>
          <span data-ttu-id="1b1ac-279">
            <paramref name="newSecurePassword" /> は読み取り専用ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-279">
              <paramref name="newSecurePassword" /> is not read only.</span>
          </span>
          <span data-ttu-id="1b1ac-280">5.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-280">5.</span>
          </span>
          <span data-ttu-id="1b1ac-281">
            <paramref name="newSecurePassword" /> が空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-281">
              <paramref name="newSecurePassword" /> is an empty string.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1b1ac-282">パラメーター (<paramref name="connectionString" />、<paramref name="credential" />、または <paramref name="newSecurePassword" />) のいずれかが null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-282">One of the parameters (<paramref name="connectionString" />, <paramref name="credential" />, or <paramref name="newSecurePassword" />) is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ClearAllPools">
      <MemberSignature Language="C#" Value="public static void ClearAllPools ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllPools() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ClearAllPools" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearAllPools ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearAllPools();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-283">接続プールを空にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-283">Empties the connection pool.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-284"><xref:System.Data.SqlClient.SqlConnection.ClearAllPools%2A> 接続プールをリセット (または空に)。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-284"><xref:System.Data.SqlClient.SqlConnection.ClearAllPools%2A> resets (or empties) the connection pool.</span></span> <span data-ttu-id="1b1ac-285">適切にマークしは破棄されます (の代わりに、プールに返される) 場合、呼び出し時に使用中の接続がある場合<xref:System.Data.SqlClient.SqlConnection.Close%2A>に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-285">If there are connections in use at the time of the call, they are marked appropriately and will be discarded (instead of being returned to the pool) when <xref:System.Data.SqlClient.SqlConnection.Close%2A> is called on them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearPool">
      <MemberSignature Language="C#" Value="public static void ClearPool (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearPool(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearPool (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearPool(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">
          <span data-ttu-id="1b1ac-286">プールから削除される <see cref="T:System.Data.SqlClient.SqlConnection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-286">The <see cref="T:System.Data.SqlClient.SqlConnection" /> to be cleared from the pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-287">指定した接続に関連付けられている接続プールを空にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-287">Empties the connection pool associated with the specified connection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-288"><xref:System.Data.SqlClient.SqlConnection.ClearPool%2A> 関連付けられている接続プールをクリア、`connection`です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-288"><xref:System.Data.SqlClient.SqlConnection.ClearPool%2A> clears the connection pool that is associated with the `connection`.</span></span> <span data-ttu-id="1b1ac-289">追加の接続に関連付けられている場合`connection`は呼び出し時に使用して、それらが適切にマークされ、破棄されます (プールに返される) ではなくとき<xref:System.Data.SqlClient.SqlConnection.Close%2A>に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-289">If additional connections associated with `connection` are in use at the time of the call, they are marked appropriately and are discarded (instead of being returned to the pool) when <xref:System.Data.SqlClient.SqlConnection.Close%2A> is called on them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientConnectionId">
      <MemberSignature Language="C#" Value="public Guid ClientConnectionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ClientConnectionId" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ClientConnectionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientConnectionId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid ClientConnectionId { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-290">試行成功したか失敗したかにかかわらず、最新の接続試行の接続 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-290">The connection ID of the most recent connection attempt, regardless of whether the attempt succeeded or failed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-291">最新の接続試行の接続 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-291">The connection ID of the most recent connection attempt.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-292"><xref:System.Data.SqlClient.SqlConnection.ClientConnectionId%2A> 接続するサーバーのバージョンに関係なく動作は、拡張イベント ログおよび接続リング バッファー エラーに関するエントリが存在していない[!INCLUDE[sskatmai_r2](~/includes/sskatmai-r2-md.md)]以前のバージョン。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-292"><xref:System.Data.SqlClient.SqlConnection.ClientConnectionId%2A> works regardless of which version of the server you connect to, but extended events logs and entry on connectivity ring buffer errors will not be present in [!INCLUDE[sskatmai_r2](~/includes/sskatmai-r2-md.md)] and earlier.</span></span>  
  
 <span data-ttu-id="1b1ac-293">接続 ID をログ記録に関する拡張イベントが有効になっている場合、サーバーで障害発生したかどうかの拡張イベント ログ内の接続 ID を検索できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-293">You can locate the connection ID in the extended events log to see if the failure was on the server if the extended event for logging connection ID is enabled.</span></span> <span data-ttu-id="1b1ac-294">接続リング バッファーに、接続 ID を検索することもできます ([、接続リング バッファーによる SQL Server 2008 の接続のトラブルシューティング](http://go.microsoft.com/fwlink/?LinkId=207752)) 特定の接続エラーです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-294">You can also locate the connection ID in the connection ring buffer ([Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer](http://go.microsoft.com/fwlink/?LinkId=207752)) for certain connection errors.</span></span> <span data-ttu-id="1b1ac-295">接続 ID が接続リング バッファーにない場合は、ネットワーク エラーを想定することができます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-295">If the connection ID is not in the connection ring buffer, you can assume a network error.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-296">データベースへの接続を閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-296">Closes the connection to the database.</span>
          </span>
          <span data-ttu-id="1b1ac-297">このメソッドは、開いている接続を閉じるための最も好ましいメソッドです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-297">This is the preferred method of closing any open connection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-298"><xref:System.Data.SqlClient.SqlConnection.Close%2A>メソッドが保留中のトランザクションをロールバックします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-298">The <xref:System.Data.SqlClient.SqlConnection.Close%2A> method rolls back any pending transactions.</span></span> <span data-ttu-id="1b1ac-299">接続プールへの接続を解放し、または接続プールが無効になっている場合、接続を閉じます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-299">It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-300">保留中のトランザクションを使用して開始[!INCLUDE[tsql](~/includes/tsql-md.md)]または<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>が自動的にロールバックされた接続プールが有効になっている場合、接続がリセットされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-300">Pending transactions started using [!INCLUDE[tsql](~/includes/tsql-md.md)] or <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> are automatically rolled back when the connection is reset if connection pooling is enabled.</span></span> <span data-ttu-id="1b1ac-301">接続プールがオフの場合は、トランザクションがロールバック後`SqlConnection.Close`と呼びます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-301">If connection pooling is off, the transaction is rolled back after `SqlConnection.Close` is called.</span></span> <span data-ttu-id="1b1ac-302">トランザクションが開始<xref:System.Transactions>制御するには、`System.Transactions`して、インフラストラクチャとは影響しません`SqlConnection.Close`です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-302">Transactions started through <xref:System.Transactions> are controlled through the `System.Transactions` infrastructure, and are not affected by `SqlConnection.Close`.</span></span>  
  
 <span data-ttu-id="1b1ac-303">アプリケーションが呼び出すことができます<xref:System.Data.SqlClient.SqlConnection.Close%2A>1 つ以上の時間。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-303">An application can call <xref:System.Data.SqlClient.SqlConnection.Close%2A> more than one time.</span></span> <span data-ttu-id="1b1ac-304">例外は生成されません。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-304">No exception is generated.</span></span>  
  
 <span data-ttu-id="1b1ac-305">場合、<xref:System.Data.SqlClient.SqlConnection>スコープの移動のうち、閉じられているされません。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-305">If the <xref:System.Data.SqlClient.SqlConnection> goes out of scope, it won't be closed.</span></span> <span data-ttu-id="1b1ac-306">したがって、する必要があります明示的に接続を呼び出して終了する`Close`または`Dispose`です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-306">Therefore, you must explicitly close the connection by calling `Close` or `Dispose`.</span></span> <span data-ttu-id="1b1ac-307">`Close` および`Dispose`は機能的に等価です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-307">`Close` and `Dispose` are functionally equivalent.</span></span> <span data-ttu-id="1b1ac-308">値の接続プール場合`Pooling`に設定されている`true`または`yes`では、基になる接続が接続プールに返されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-308">If the connection pooling value `Pooling` is set to `true` or `yes`, the underlying connection is returned back to the connection pool.</span></span> <span data-ttu-id="1b1ac-309">その一方で場合、`Pooling`に設定されている`false`または`no`では、基になるサーバーに接続が閉じられます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-309">On the other hand, if `Pooling` is set to `false` or `no`, the underlying connection to the server is closed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-310">接続が接続プールからフェッチされたり接続プールに返されたりしたとき、ログイン イベントとログアウト イベントはサーバーで発生しません。これは、接続プールに返されても接続は実際には終了していないためです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-310">Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool.</span></span> <span data-ttu-id="1b1ac-311">詳しくは、「[SQL Server の接続プール (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-311">For more information, see [SQL Server Connection Pooling (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1b1ac-312">呼び出す必要はありません`Close`または`Dispose`接続、DataReader、または その他のマネージ オブジェクトで、`Finalize`クラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-312">Do not call `Close` or `Dispose` on a Connection, a DataReader, or any other managed object in the `Finalize` method of your class.</span></span> <span data-ttu-id="1b1ac-313">ファイナライザーで、クラスが直接所有されているアンマネージ リソースだけを解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-313">In a finalizer, you should only release unmanaged resources that your class owns directly.</span></span> <span data-ttu-id="1b1ac-314">クラスがアンマネージ リソースを所有していない場合は、クラス定義に `Finalize` メソッドを含めないでください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-314">If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition.</span></span> <span data-ttu-id="1b1ac-315">詳細については、次を参照してください。[ガベージ コレクション](~/docs/standard/garbage-collection/index.md)です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-315">For more information, see [Garbage Collection](~/docs/standard/garbage-collection/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-316">次の例を作成、 <xref:System.Data.SqlClient.SqlConnection>、開かれます、一部のプロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-316">The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, displays some of its properties.</span></span> <span data-ttu-id="1b1ac-317">接続がの末尾に自動的に閉じられる、`using`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-317">The connection is automatically closed at the end of the `using` block.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">
          <span data-ttu-id="1b1ac-318">接続を開くときに発生した接続レベルのエラー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-318">The connection-level error that occurred while opening the connection.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionKeyCacheTtl">
      <MemberSignature Language="C#" Value="public static TimeSpan ColumnEncryptionKeyCacheTtl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan ColumnEncryptionKeyCacheTtl" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ColumnEncryptionKeyCacheTtl As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan ColumnEncryptionKeyCacheTtl { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-319">[Always Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine) 機能の列暗号化キーのキャッシュ内の、列暗号化キー エントリの有効期限を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-319">Gets or sets the time-to-live for column encryption key entries in the column encryption key cache for the [Always Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine) feature.</span>
          </span>
          <span data-ttu-id="1b1ac-320">既定値は 2 時間です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-320">The default value is 2 hours.</span>
          </span>
          <span data-ttu-id="1b1ac-321">0 は、キャッシュがまったくないことを意味します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-321">0 means no caching at all.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-322">時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-322">The time interval.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionQueryMetadataCacheEnabled">
      <MemberSignature Language="C#" Value="public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool ColumnEncryptionQueryMetadataCacheEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ColumnEncryptionQueryMetadataCacheEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool ColumnEncryptionQueryMetadataCacheEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-323">[Always Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine) が有効であるデータベースに対して実行されるパラメーター化されたクエリについて、クエリ メタデータのキャッシュが有効 (true) か無効 (false) かを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-323">Gets or sets a value that indicates whether query metadata caching is enabled (true) or not (false) for parameterized queries running against [Always Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine) enabled databases.</span>
          </span>
          <span data-ttu-id="1b1ac-324">既定値は true です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-324">The default value is true.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-325">クエリ メタデータのキャッシュが有効な場合は true を返します。それ以外の場合は false です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-325">Returns true if query metadata caching is enabled; otherwise false.</span>
          </span>
          <span data-ttu-id="1b1ac-326">既定値は true です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-326">true is the default.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-327">、パラメーター化クエリの SqlClient のため、とのやり取り SQL Server にパラメーターのメタデータを暗号化する必要があるパラメーターを表示する方法 (どのキーおよびアルゴリズムを使用する必要があります)。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-327">For parameterized queries, SqlClient makes a roundtrip to SQL Server for parameter metadata, to see which parameter it needs to encrypt and how (which keys and algorithms should be used).</span></span> <span data-ttu-id="1b1ac-328">アプリケーションが呼び出す場合、同じクエリ複数回、余分なラウンド トリップが行われましたサーバーごとには、アプリケーションのパフォーマンスが低下します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-328">If the application calls the same query multiple times, an extra roundtrip is made to the server each time, which degrades application performance.</span></span>  
  
 <span data-ttu-id="1b1ac-329">**ColumnEncryptionQueryMetadataCacheEnabled**同じクエリが複数回呼び出される場合は true に設定して、サーバーへのラウンド トリップになります 1 回だけです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-329">With **ColumnEncryptionQueryMetadataCacheEnabled** set to true, if the same query is called multiple times, the roundtrip to the server will be made only once.</span></span> <span data-ttu-id="1b1ac-330">キャッシュには、2000 のクエリに設定されているが構成可能な最大サイズ パラメーターがあります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-330">The cache has a non-configurable Max size parameter that is set to 2000 queries.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionTrustedMasterKeyPaths">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,System.Collections.Generic.IList&lt;string&gt;&gt; ColumnEncryptionTrustedMasterKeyPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;string&gt;&gt; ColumnEncryptionTrustedMasterKeyPaths" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ColumnEncryptionTrustedMasterKeyPaths As IDictionary(Of String, IList(Of String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IDictionary&lt;System::String ^, System::Collections::Generic::IList&lt;System::String ^&gt; ^&gt; ^ ColumnEncryptionTrustedMasterKeyPaths { System::Collections::Generic::IDictionary&lt;System::String ^, System::Collections::Generic::IList&lt;System::String ^&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Collections.Generic.IList&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-331">データベース サーバーの信頼されたキー パスの一覧を設定できるようにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-331">Allows you to set a list of trusted key paths for a database server.</span>
          </span>
          <span data-ttu-id="1b1ac-332">アプリケーションのクエリを処理中に、一覧に存在しないキー パスをドライバーが受け取ると、クエリは失敗します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-332">If while processing an application query the driver receives a key path that is not on the list, the query will fail.</span>
          </span>
          <span data-ttu-id="1b1ac-333">このプロパティは、セキュリティが損なわれ偽のキー パスを提供する SQL Server が関係するセキュリティ攻撃に対する保護を強化します。この攻撃は、キー ストアの資格情報漏洩につながるおそれがあります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-333">This property provides additional protection against security attacks that involve a compromised SQL Server providing fake key paths, which may lead to leaking key store credentials.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-334">列の暗号化のための信頼されたマスター キー パスの一覧。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-334">The list of trusted master key paths for the column encryption.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.ConnectionString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlConnectionStringEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-335">SQL Server データベースを開くために使用する文字列を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-335">Gets or sets the string used to open a SQL Server database.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-336">ソース データベース名を含む接続文字列、および初期接続を確立するために必要なその他のパラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-336">The connection string that includes the source database name, and other parameters needed to establish the initial connection.</span>
          </span>
          <span data-ttu-id="1b1ac-337">既定値は空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-337">The default value is an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-338"><xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> OLE DB 接続文字列に似ていますが、同一ではありません。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-338">The <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> is similar to an OLE DB connection string, but is not identical.</span></span> <span data-ttu-id="1b1ac-339">返される接続文字列では OLE DB または ADO の場合とは異なり、ユーザー設定と同じ<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>、Persist Security Info の値に設定されている場合、セキュリティ情報マイナス`false`(既定値)。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-339">Unlike OLE DB or ADO, the connection string that is returned is the same as the user-set <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>, minus security information if the Persist Security Info value is set to `false` (default).</span></span> <span data-ttu-id="1b1ac-340">.NET Framework Data Provider for SQL Server が永続化または Persist Security Info を設定していない場合、接続文字列にパスワードを返すしていない`true`です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-340">The .NET Framework Data Provider for SQL Server does not persist or return the password in a connection string unless you set Persist Security Info to `true`.</span></span>  
  
 <span data-ttu-id="1b1ac-341">使用することができます、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティをデータベースに接続します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-341">You can use the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property to connect to a database.</span></span> <span data-ttu-id="1b1ac-342">次の例は、一般的な接続文字列を示しています。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-342">The following example illustrates a typical connection string.</span></span>  
  
```  
"Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)"  
```  
  
 <span data-ttu-id="1b1ac-343">使用して、新しい<xref:System.Data.SqlClient.SqlConnectionStringBuilder>実行時に有効な接続文字列を構築するためにします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-343">Use the new <xref:System.Data.SqlClient.SqlConnectionStringBuilder> to construct valid connection strings at run time.</span></span> <span data-ttu-id="1b1ac-344">詳細については、次を参照してください。[接続文字列ビルダー](~/docs/framework/data/adonet/connection-string-builders.md)です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-344">For more information, see [Connection String Builders](~/docs/framework/data/adonet/connection-string-builders.md).</span></span>  
  
 <span data-ttu-id="1b1ac-345"><xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>接続が閉じられたときにのみ、プロパティを設定することができます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-345">The <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property can be set only when the connection is closed.</span></span> <span data-ttu-id="1b1ac-346">多くの接続文字列の値はある対応する読み取り専用プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-346">Many of the connection string values have corresponding read-only properties.</span></span> <span data-ttu-id="1b1ac-347">接続文字列を設定すると、エラーが検出された場合を除いて、これらのプロパティが更新します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-347">When the connection string is set, these properties are updated, except when an error is detected.</span></span> <span data-ttu-id="1b1ac-348">ここで、プロパティのいずれも更新されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-348">In this case, none of the properties are updated.</span></span> <span data-ttu-id="1b1ac-349"><xref:System.Data.SqlClient.SqlConnection> プロパティに含まれている設定のみを返す、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-349"><xref:System.Data.SqlClient.SqlConnection> properties return only those settings that are contained in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>.</span></span>  
  
 <span data-ttu-id="1b1ac-350">ローカル コンピューターに接続する場合、サーバーの"(local)"を指定します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-350">To connect to a local computer, specify "(local)" for the server.</span></span> <span data-ttu-id="1b1ac-351">サーバー名が指定されていない場合は、ローカル コンピューター上の既定のインスタンスへの接続が試行されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-351">If a server name is not specified, a connection will be attempted to the default instance on the local computer.</span></span>  
  
 <span data-ttu-id="1b1ac-352">リセット、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>閉じた接続に対してすべての接続文字列の値 (および関連するプロパティ) パスワードを含むをリセットします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-352">Resetting the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> on a closed connection resets all connection string values (and related properties) including the password.</span></span> <span data-ttu-id="1b1ac-353">含む接続文字列を設定する場合など、"データベース = AdventureWorks"への接続文字列をリセットし、"データ ソース = myserver; Integrated Security = true"では、<xref:System.Data.SqlClient.SqlConnection.Database%2A>プロパティが不要になった"AdventureWorks"に設定されています。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-353">For example, if you set a connection string that includes "Database= AdventureWorks", and then reset the connection string to "Data Source=myserver;Integrated Security=true", the <xref:System.Data.SqlClient.SqlConnection.Database%2A> property is no longer set to "AdventureWorks".</span></span>  
  
 <span data-ttu-id="1b1ac-354">設定されている後すぐには、接続文字列を解析します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-354">The connection string is parsed immediately after being set.</span></span> <span data-ttu-id="1b1ac-355">解析中に、ランタイム例外などの構文エラーが見つかった場合<xref:System.ArgumentException>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-355">If errors in syntax are found when parsing, a runtime exception, such as <xref:System.ArgumentException>, is generated.</span></span> <span data-ttu-id="1b1ac-356">開くには、接続試行が行われたときにのみ、その他のエラーを確認できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-356">Other errors can be found only when an attempt is made to open the connection.</span></span>  
  
 <span data-ttu-id="1b1ac-357">接続文字列の基本形式には、一連セミコロンで区切られたキーワード/値ペアにはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-357">The basic format of a connection string includes a series of keyword/value pairs separated by semicolons.</span></span> <span data-ttu-id="1b1ac-358">それぞれのキーワードと値の関連付けには、等号 (=) が使用されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-358">The equal sign (=) connects each keyword and its value.</span></span> <span data-ttu-id="1b1ac-359">セミコロン、単一引用符または二重引用符文字を含む値を含めるには、値を二重引用符で囲む必要があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-359">To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks.</span></span> <span data-ttu-id="1b1ac-360">セミコロンと二重引用符の両方が、値が含まれる場合、値は単一引用符で囲むことができます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-360">If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks.</span></span> <span data-ttu-id="1b1ac-361">単一引用符も値が二重引用符文字で始まる場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-361">The single quotation mark is also useful if the value starts with a double-quote character.</span></span> <span data-ttu-id="1b1ac-362">逆に、値が単一引用符で始まる場合は、二重引用符を使用できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-362">Conversely, the double quotation mark can be used if the value starts with a single quotation mark.</span></span> <span data-ttu-id="1b1ac-363">値に、一重引用符と二重引用符の両方の文字が含まれている場合は値内で発生するたびに値を囲むために使用する引用符文字が二重にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-363">If the value contains both single-quote and double-quote characters, the quotation mark character used to enclose the value must be doubled every time it occurs within the value.</span></span>  
  
 <span data-ttu-id="1b1ac-364">文字列値の先頭または末尾のスペースを含めるには、単一引用符または二重引用符のいずれかの値を囲む必要があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-364">To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks.</span></span> <span data-ttu-id="1b1ac-365">引用符で囲まれている場合でも、整数、ブール値、列挙値の先頭または末尾の空白は無視されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-365">Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks.</span></span> <span data-ttu-id="1b1ac-366">ただし、文字列リテラル キーワードまたは値内にスペースが保持されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-366">However, spaces within a string literal keyword or value are preserved.</span></span> <span data-ttu-id="1b1ac-367">一重引用符または二重引用符は、区切り記号を使用せず、接続文字列内使用可能性があります (たとえば、データ ソース my'Server またはデータ ソースを = ="Server) 引用符文字が値の最初と最後の文字がない限り、します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-367">Single or double quotation marks may be used within a connection string without using delimiters (for example, Data Source= my'Server or Data Source= my"Server), unless a quotation mark character is the first or last character in the value.</span></span>  
  
 <span data-ttu-id="1b1ac-368">キーワードは、大文字と小文字が区別されません。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-368">Keywords are not case sensitive.</span></span>  
  
 <span data-ttu-id="1b1ac-369">次の表に、内のキーワードの値の有効な名前、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-369">The following table lists the valid names for keyword values within the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>.</span></span>  
  
  <span data-ttu-id="1b1ac-370">次の一覧には、接続プール内の値の有効な名前が含まれています、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-370">The following list contains the valid names for connection pooling values within the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>.</span></span> <span data-ttu-id="1b1ac-371">詳しくは、「[SQL Server の接続プール (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-371">For more information, see [SQL Server Connection Pooling (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).</span></span>  
  
-   <span data-ttu-id="1b1ac-372">接続の有効期間 (または Load Balance Timeout)</span><span class="sxs-lookup"><span data-stu-id="1b1ac-372">Connection Lifetime (or Load Balance Timeout)</span></span>  
  
-   <span data-ttu-id="1b1ac-373">Enlist</span><span class="sxs-lookup"><span data-stu-id="1b1ac-373">Enlist</span></span>  
  
-   <span data-ttu-id="1b1ac-374">Max Pool Size</span><span class="sxs-lookup"><span data-stu-id="1b1ac-374">Max Pool Size</span></span>  
  
-   <span data-ttu-id="1b1ac-375">Min Pool Size</span><span class="sxs-lookup"><span data-stu-id="1b1ac-375">Min Pool Size</span></span>  
  
-   <span data-ttu-id="1b1ac-376">Pooling</span><span class="sxs-lookup"><span data-stu-id="1b1ac-376">Pooling</span></span>  
  
 <span data-ttu-id="1b1ac-377">キーワードまたは接続プールをブール値を必要とする値を設定するときに 'yes' 'true' および 'false' ではなく ' no' の代わりに使用できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-377">When you are setting keyword or connection pooling values that require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead of 'false'.</span></span> <span data-ttu-id="1b1ac-378">整数値は、文字列として表されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-378">Integer values are represented as strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-379">.NET Framework Data Provider for SQL Server では、独自のプロトコルを使用して SQL Server と通信します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-379">The .NET Framework Data Provider for SQL Server uses its own protocol to communicate with SQL Server.</span></span> <span data-ttu-id="1b1ac-380">したがって、ことはできませんの ODBC データ ソース名 (DSN) を使用して ODBC レイヤーを追加することはないために、SQL Server に接続するときにします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-380">Therefore, it does not support the use of an ODBC data source name (DSN) when connecting to SQL Server because it does not add an ODBC layer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-381">Universal data link (UDL) ファイルは、.NET Framework Data provider for SQL Server サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-381">Universal data link (UDL) files are not supported for the .NET Framework Data Provider for SQL Server.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1b1ac-382">このリリースで (たとえば、ダイアログ ボックスでは、接続文字列への追加とユーザー ID とパスワード情報を取得する場合など) のユーザー入力に基づいて接続文字列を構築するときに、アプリケーションが注意を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-382">In this release, the application should use caution when constructing a connection string based on user input (for example when retrieving user ID and password information from a dialog box, and appending it to the connection string).</span></span> <span data-ttu-id="1b1ac-383">アプリケーションは、ユーザーがこれらの値で追加の接続文字列パラメーターを埋め込むことはできないことを確認してください (たとえば、としてパスワードを入力する"なデータベース = somedb"別のデータベースをアタッチしようとすると、)。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-383">The application should make sure that a user cannot embed additional connection string parameters in these values (for example, entering a password as "validpassword;database=somedb" in an attempt to attach to a different database).</span></span> <span data-ttu-id="1b1ac-384">ユーザー入力に基づいて接続文字列を構築する必要がある場合は、新しい使用<xref:System.Data.SqlClient.SqlConnectionStringBuilder>、する接続文字列を検証し、この問題を解決するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-384">If you need to construct connection strings based on user input, use the new <xref:System.Data.SqlClient.SqlConnectionStringBuilder>, which validates the connection string and helps to eliminate this problem.</span></span> <span data-ttu-id="1b1ac-385">参照してください[接続文字列ビルダー](~/docs/framework/data/adonet/connection-string-builders.md)詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-385">See [Connection String Builders](~/docs/framework/data/adonet/connection-string-builders.md) for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-386">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>設定と、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>接続を開く前に、プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-386">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property before opening the connection.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.ConnectionString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.ConnectionString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1b1ac-387">無効な接続文字列引数が指定されたか、必要な接続文字列引数が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-387">An invalid connection string argument has been supplied, or a required connection string argument has not been supplied.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.ConnectionTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-388">試行を中断してエラーを生成する前に、接続の確立時に待機する時間を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-388">Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-389">接続が開くのを待機する時間 (秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-389">The time (in seconds) to wait for a connection to open.</span>
          </span>
          <span data-ttu-id="1b1ac-390">既定値は 15 秒です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-390">The default value is 15 seconds.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-391">使用してタイムアウトに接続の待機時間を設定することができます、`Connect Timeout`または`Connection Timeout`キーワード、接続文字列にします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-391">You can set the amount of time a connection waits to time out by using the `Connect Timeout` or `Connection Timeout` keywords in the connection string.</span></span> <span data-ttu-id="1b1ac-392">値が 0 の制限がないことを示します。 とでは避ける必要があります、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>接続の試行が無限に待機するためです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-392">A value of 0 indicates no limit, and should be avoided in a <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> because an attempt to connect waits indefinitely.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-393">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>設定と、`Connection Timeout`接続文字列で 30 秒です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-393">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the `Connection Timeout` to 30 seconds in the connection string.</span></span> <span data-ttu-id="1b1ac-394">コードの接続を確立し、表示、<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>コンソール ウィンドウでプロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-394">The code opens the connection and displays the <xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A> property in the console window.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1b1ac-395">0 より小さい値が設定されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-395">The value set is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ CreateCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-396">
            <see cref="T:System.Data.SqlClient.SqlConnection" /> に関連付けられている <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを作成し、返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-396">Creates and returns a <see cref="T:System.Data.SqlClient.SqlCommand" /> object associated with the <see cref="T:System.Data.SqlClient.SqlConnection" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-397">
            <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-397">A <see cref="T:System.Data.SqlClient.SqlCommand" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[SqlConnection_CreateCommand#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/sqlconnection_createcommand/cs/source.cs#1)]
 [!code-vb[SqlConnection_CreateCommand#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/sqlconnection_createcommand/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credential">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCredential Credential { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCredential Credential" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Credential" />
      <MemberSignature Language="VB.NET" Value="Public Property Credential As SqlCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCredential ^ Credential { System::Data::SqlClient::SqlCredential ^ get(); void set(System::Data::SqlClient::SqlCredential ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-398">この接続の <see cref="T:System.Data.SqlClient.SqlCredential" /> オブジェクトを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-398">Gets or sets the <see cref="T:System.Data.SqlClient.SqlCredential" /> object for this connection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-399">この接続の <see cref="T:System.Data.SqlClient.SqlCredential" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-399">The <see cref="T:System.Data.SqlClient.SqlCredential" /> object for this connection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-400">`Persist Security Info = true` 値を取得するために必要な<xref:System.Data.SqlClient.SqlCredential>オブジェクト<xref:System.Data.SqlClient.SqlConnection.Credential%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-400">`Persist Security Info = true` is required to get the value of the <xref:System.Data.SqlClient.SqlCredential> object with <xref:System.Data.SqlClient.SqlConnection.Credential%2A>.</span></span>  
  
 <span data-ttu-id="1b1ac-401">既定値の<xref:System.Data.SqlClient.SqlConnection.Credential%2A>が null です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-401">The default value of <xref:System.Data.SqlClient.SqlConnection.Credential%2A> is null.</span></span>  
  
 <span data-ttu-id="1b1ac-402"><xref:System.InvalidOperationException>例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-402">An <xref:System.InvalidOperationException> exception will be raised:</span></span>  
  
-   <span data-ttu-id="1b1ac-403">場合<xref:System.Data.SqlClient.SqlConnection.Credential%2A>開いている接続に対して設定されています。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-403">If <xref:System.Data.SqlClient.SqlConnection.Credential%2A> is set on an open connection.</span></span>  
  
-   <span data-ttu-id="1b1ac-404">場合<xref:System.Data.SqlClient.SqlConnection.Credential%2A>設定されている場合に`Context Connection=true`です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-404">If <xref:System.Data.SqlClient.SqlConnection.Credential%2A> is set when `Context Connection=true`.</span></span>  
  
-   <span data-ttu-id="1b1ac-405">場合<xref:System.Data.SqlClient.SqlConnection.Credential%2A>設定されている場合に`Integrated Security = true`です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-405">If <xref:System.Data.SqlClient.SqlConnection.Credential%2A> is set when `Integrated Security = true`.</span></span>  
  
-   <span data-ttu-id="1b1ac-406">場合<xref:System.Data.SqlClient.SqlConnection.Credential%2A>接続文字列を使用する場合に設定されている`Password`です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-406">If <xref:System.Data.SqlClient.SqlConnection.Credential%2A> is set when the connection string uses `Password`.</span></span>  
  
-   <span data-ttu-id="1b1ac-407">場合<xref:System.Data.SqlClient.SqlConnection.Credential%2A>接続文字列を使用する場合に設定されている`UserID`です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-407">If <xref:System.Data.SqlClient.SqlConnection.Credential%2A> is set when the connection string uses `UserID`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCredential Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCredential Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As SqlCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCredential ^ Credentials { System::Data::SqlClient::SqlCredential ^ get(); void set(System::Data::SqlClient::SqlCredential ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.Database</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-408">現在のデータベース、または接続が開いてから使用するデータベースの名前を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-408">Gets the name of the current database or the database to be used after a connection is opened.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-409">現在のデータベース、または接続が開いてから使用するデータベースの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-409">The name of the current database or the name of the database to be used after a connection is opened.</span>
          </span>
          <span data-ttu-id="1b1ac-410">既定値は空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-410">The default value is an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-411"><xref:System.Data.SqlClient.SqlConnection.Database%2A>プロパティを動的に更新します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-411">The <xref:System.Data.SqlClient.SqlConnection.Database%2A> property updates dynamically.</span></span> <span data-ttu-id="1b1ac-412">現在のデータベースを使って変更する場合、[!INCLUDE[tsql](~/includes/tsql-md.md)]ステートメントまたは<xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>メソッドが、情報メッセージが送信され、プロパティが自動的に更新します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-412">If you change the current database using a [!INCLUDE[tsql](~/includes/tsql-md.md)] statement or the <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A> method, an informational message is sent and the property is updated automatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-413">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>し、一部の読み取り専用プロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-413">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-414">接続先となる SQL Server のインスタンスの名前を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-414">Gets the name of the instance of SQL Server to which to connect.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-415">接続先の SQL Server のインスタンスの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-415">The name of the instance of SQL Server to which to connect.</span>
          </span>
          <span data-ttu-id="1b1ac-416">既定値は空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-416">The default value is an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-417"><xref:System.Data.SqlClient.SqlConnection.DataSource%2A>プロパティから返される`null`場合、接続文字列が、<xref:System.Data.SqlClient.SqlConnection>は"コンテキスト接続 = true"です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-417">The <xref:System.Data.SqlClient.SqlConnection.DataSource%2A> property returns `null` if the connection string for the <xref:System.Data.SqlClient.SqlConnection> is "context connection=true".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-418">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>し、一部の読み取り専用プロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-418">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.DbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbProviderFactory As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbProviderFactory ^ DbProviderFactory { System::Data::Common::DbProviderFactory ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistDistributedTransaction">
      <MemberSignature Language="C#" Value="public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnlistDistributedTransaction(class System.EnterpriseServices.ITransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnlistDistributedTransaction (transaction As ITransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnlistDistributedTransaction(System::EnterpriseServices::ITransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.EnterpriseServices.ITransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">
          <span data-ttu-id="1b1ac-419">登録先の既存の <see cref="T:System.EnterpriseServices.ITransaction" /> への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-419">A reference to an existing <see cref="T:System.EnterpriseServices.ITransaction" /> in which to enlist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-420">分散トランザクションとして指定したトランザクションに参加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-420">Enlists in the specified transaction as a distributed transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-421">使用することができます、<xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A>分散トランザクションに参加させる方法です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-421">You can use the <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> method to enlist in a distributed transaction.</span></span> <span data-ttu-id="1b1ac-422">これにより、接続するため、<xref:System.Transactions.Transaction>インスタンス、 **EnlistTransaction**で利用できる機能を活用、<xref:System.Transactions>を管理するための名前空間は分散トランザクションを置き換えることが**どちら**この目的のためです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-422">Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction** for this purpose.</span></span> <span data-ttu-id="1b1ac-423">詳細については、次を参照してください。[分散トランザクション](~/docs/framework/data/adonet/distributed-transactions.md)です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-423">For more information, see [Distributed Transactions](~/docs/framework/data/adonet/distributed-transactions.md).</span></span>  
  
 <span data-ttu-id="1b1ac-424">既存の分散トランザクションを使用して、参加を継続できます、**どちら**メソッドへの自動参加が無効になっている場合。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-424">You can continue to enlist in an existing distributed transaction using the **EnlistDistributedTransaction** method if auto-enlistment is disabled.</span></span> <span data-ttu-id="1b1ac-425">既存の分散トランザクションに参加させることにより、トランザクションがコミットまたはロールバックされた場合、データ ソース コードで行った変更もコミットまたはロールバックします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-425">Enlisting in an existing distributed transaction makes sure that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back.</span></span>  
  
 <span data-ttu-id="1b1ac-426">`EnlistDistributedTransaction` 例外を返します、<xref:System.Data.SqlClient.SqlConnection>がトランザクションを使用して、既に開始<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-426">`EnlistDistributedTransaction` returns an exception if the <xref:System.Data.SqlClient.SqlConnection> has already started a transaction using <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</span></span> <span data-ttu-id="1b1ac-427">ただし、トランザクションは、データ ソースで開始されたローカル トランザクション (たとえば、明示的に実行することによって、BEGIN TRANSACTION ステートメントを使用して、<xref:System.Data.SqlClient.SqlCommand>オブジェクト)、**どちら**ローカル トランザクションをロールバックし、要求されるとおり、既存の分散トランザクションに参加します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-427">However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <xref:System.Data.SqlClient.SqlCommand> object), **EnlistDistributedTransaction** rolls back the local transaction and enlists in the existing distributed transaction as requested.</span></span> <span data-ttu-id="1b1ac-428">注意してください、ローカルのトランザクションがロールバックされていないローカル トランザクションの管理を担当の使用を開始は受け取りません<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-428">You do not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">
          <span data-ttu-id="1b1ac-429">登録先の既存の <see cref="T:System.Transactions.Transaction" /> への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-429">A reference to an existing <see cref="T:System.Transactions.Transaction" /> in which to enlist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-430">分散トランザクションとして指定したトランザクションに参加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-430">Enlists in the specified transaction as a distributed transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-431">使用することができます、<xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A>分散トランザクションに参加させる方法です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-431">You can use the <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> method to enlist in a distributed transaction.</span></span> <span data-ttu-id="1b1ac-432">これにより、接続するため、<xref:System.Transactions.Transaction>インスタンス、 **EnlistTransaction**で利用できる機能を活用、<xref:System.Transactions>を管理するための名前空間は分散トランザクションを置き換えることが**どちら**が使用される、 **System.EnterpriseServices.ITransaction**オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-432">Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction**, which uses a **System.EnterpriseServices.ITransaction** object.</span></span> <span data-ttu-id="1b1ac-433">さらに、若干異なるセマンティクス: 接続は明示的にトランザクションに参加させる、一度参加解除されてまたはできない最初のトランザクションが終了するまで、別のトランザクションに参加しています。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-433">It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes.</span></span> <span data-ttu-id="1b1ac-434">分散トランザクションの詳細については、次を参照してください。[分散トランザクション](~/docs/framework/data/adonet/distributed-transactions.md)です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-434">For more information about distributed transactions, see [Distributed Transactions](~/docs/framework/data/adonet/distributed-transactions.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FireInfoMessageEventOnUserErrors">
      <MemberSignature Language="C#" Value="public bool FireInfoMessageEventOnUserErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FireInfoMessageEventOnUserErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property FireInfoMessageEventOnUserErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FireInfoMessageEventOnUserErrors { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-435">
            <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> プロパティを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-435">Gets or sets the <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-436">
            <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> プロパティが設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-436">
              <see langword="true" /> if the <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> property has been set; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-437">設定すると<xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A>に`true`、エラーとして例外が処理されるようになりましたとして扱われました以前を<xref:System.Data.SqlClient.SqlConnection.InfoMessage>イベント。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-437">When you set <xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A> to `true`, errors that were previously treated as exceptions are now handled as <xref:System.Data.SqlClient.SqlConnection.InfoMessage> events.</span></span> <span data-ttu-id="1b1ac-438">すべてのイベントは、即座に発生し、イベント ハンドラーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-438">All events fire immediately and are handled by the event handler.</span></span> <span data-ttu-id="1b1ac-439">場合は、<xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A>に設定されている`false`、し<xref:System.Data.SqlClient.SqlConnection.InfoMessage>イベントは、プロシージャの最後に処理します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-439">If is <xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A> is set to `false`, then <xref:System.Data.SqlClient.SqlConnection.InfoMessage> events are handled at the end of the procedure.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-440">コマンドの処理を停止するサーバーを原因となる重要度レベルが 17 以上のエラーは、例外として処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-440">An error with a severity level of 17 or above that causes the server to stop processing the command needs to be handled as an exception.</span></span> <span data-ttu-id="1b1ac-441">この場合、<xref:System.Data.SqlClient.SqlConnection.InfoMessage> イベントによるエラー処理の方法にかかわらず例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-441">In this case, an exception is thrown regardless of how the error is handled in the <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event.</span></span>  
  
 <span data-ttu-id="1b1ac-442">イベントの使用の詳細については、次を参照してください。[接続イベント](~/docs/framework/data/adonet/connection-events.md)です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-442">For more information on working with events, see [Connection Events](~/docs/framework/data/adonet/connection-events.md).</span></span> <span data-ttu-id="1b1ac-443">SQL Server エンジンによって生成されたエラーの詳細については、SQL Server オンライン ブックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-443">For more information on errors generated by the SQL Server engine, see SQL Server Books Online.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-444">この <see cref="T:System.Data.SqlClient.SqlConnection" /> のデータ ソースのスキーマ情報を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-444">Returns schema information for the data source of this <see cref="T:System.Data.SqlClient.SqlConnection" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-445">1 つ以上のバージョン管理されたストアド プロシージャのスキーマ情報を取得しようとすると、最新の 1 つのスキーマのみが返されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-445">If you attempt to retrieve schema information for more than one versioned stored procedure, the schema for the latest one only is returned.</span></span> <span data-ttu-id="1b1ac-446">バージョン管理されたストアド プロシージャの詳細については、SQL Server オンライン ブックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-446">For more information on versioned stored procedures, see SQL Server Books Online.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-447">この <see cref="T:System.Data.SqlClient.SqlConnection" /> のデータ ソースのスキーマ情報を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-447">Returns schema information for the data source of this <see cref="T:System.Data.SqlClient.SqlConnection" />.</span>
          </span>
          <span data-ttu-id="1b1ac-448">スキームの詳細については、「SQL Server スキーマ コレクション」 (http://msdn.microsoft.com/library/ms254969.aspx) を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-448">For more information about scheme, see [SQL Server Schema Collections](http://msdn.microsoft.com/library/ms254969.aspx).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-449">スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-449">A <see cref="T:System.Data.DataTable" /> that contains schema information.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collectionName">
          <span data-ttu-id="1b1ac-450">返すスキーマの名前を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-450">Specifies the name of the schema to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-451">スキーマ名として指定した文字列を使用して、この <see cref="T:System.Data.SqlClient.SqlConnection" /> のデータ ソースのスキーマ情報を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-451">Returns schema information for the data source of this <see cref="T:System.Data.SqlClient.SqlConnection" /> using the specified string for the schema name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-452">スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-452">A <see cref="T:System.Data.DataTable" /> that contains schema information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-453">データベース、テーブルまたは列のスキーマ情報を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-453">You may need the schema information of the database, tables or columns.</span></span> <span data-ttu-id="1b1ac-454">このサンプルでは:</span><span class="sxs-lookup"><span data-stu-id="1b1ac-454">This sample:</span></span>  
  
-   <span data-ttu-id="1b1ac-455">GetSchema を使用してスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-455">Uses GetSchema to get schema information.</span></span>  
  
-   <span data-ttu-id="1b1ac-456">スキーマの制限を使用すると、指定した情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-456">Use schema restrictions to get the specified information.</span></span>  
  
-   <span data-ttu-id="1b1ac-457">データベース、テーブル、および一部の列のスキーマ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-457">Gets schema information of the database, tables, and some columns.</span></span>  
  
 <span data-ttu-id="1b1ac-458">サンプルを実行する前にする必要があります、サンプル データベースを作成する、次を使用して[!INCLUDE[tsql](~/includes/tsql-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="1b1ac-458">Before you run the sample, you need to create the sample database, using the following [!INCLUDE[tsql](~/includes/tsql-md.md)]:</span></span>  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]   
  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
```  
  
 <span data-ttu-id="1b1ac-459">[データベースからスキーマ情報を取得する方法](https://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2)Visual Studio プロジェクトにこのコード サンプルの c# および Visual Basic のバージョンがあります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-459">[How to Get Schema Information from Database](https://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2) has C# and Visual Basic versions of this code sample in a Visual Studio project.</span></span>  
  
```  
using System;  
using System.Data;  
using System.Data.SqlClient;  
  
class Program {  
   static void Main(string[] args) {  
  
      using (SqlConnection conn = new SqlConnection("Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;")) {  
         conn.Open();  
  
         // Get the Meta Data for Supported Schema Collections  
         DataTable metaDataTable = conn.GetSchema("MetaDataCollections");  
  
         Console.WriteLine("Meta Data for Supported Schema Collections:");  
         ShowDataTable(metaDataTable, 25);  
         Console.WriteLine();  
  
         // Get the schema information of Databases in your instance  
         DataTable databasesSchemaTable = conn.GetSchema("Databases");  
  
         Console.WriteLine("Schema Information of Databases:");  
         ShowDataTable(databasesSchemaTable, 25);  
         Console.WriteLine();  
  
         // First, get schema information of all the tables in current database;  
         DataTable allTablesSchemaTable = conn.GetSchema("Tables");  
  
         Console.WriteLine("Schema Information of All Tables:");  
         ShowDataTable(allTablesSchemaTable, 20);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Table Type to get   
         // the specified table(s).  
         // You can use four restrictions for Table, so you should create a 4 members array.  
         String[] tableRestrictions = new String[4];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Table Type.   
         // Now we specify the Table Name of the table what we want to get schema information.  
         tableRestrictions[2] = "Course";  
  
         DataTable courseTableSchemaTable = conn.GetSchema("Tables", tableRestrictions);  
  
         Console.WriteLine("Schema Information of Course Tables:");  
         ShowDataTable(courseTableSchemaTable, 20);  
         Console.WriteLine();  
  
         // First, get schema information of all the columns in current database.  
         DataTable allColumnsSchemaTable = conn.GetSchema("Columns");  
  
         Console.WriteLine("Schema Information of All Columns:");  
         ShowColumns(allColumnsSchemaTable);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).  
         // You can use four restrictions for Column, so you should create a 4 members array.  
         String[] columnRestrictions = new String[4];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Column Name.   
         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  
         columnRestrictions[2] = "Course";  
         columnRestrictions[3] = "DepartmentID";  
  
         DataTable departmentIDSchemaTable = conn.GetSchema("Columns", columnRestrictions);  
  
         Console.WriteLine("Schema Information of DepartmentID Column in Course Table:");  
         ShowColumns(departmentIDSchemaTable);  
         Console.WriteLine();  
  
         // First, get schema information of all the IndexColumns in current database  
         DataTable allIndexColumnsSchemaTable = conn.GetSchema("IndexColumns");  
  
         Console.WriteLine("Schema Information of All IndexColumns:");  
         ShowIndexColumns(allIndexColumnsSchemaTable);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to   
         // get the specified column(s).  
         // You can use five restrictions for Column, so you should create a 5 members array.  
         String[] indexColumnsRestrictions = new String[5];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.   
         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  
         indexColumnsRestrictions[2] = "Course";  
         indexColumnsRestrictions[4] = "CourseID";  
  
         DataTable courseIdIndexSchemaTable = conn.GetSchema("IndexColumns", indexColumnsRestrictions);  
  
         Console.WriteLine("Index Schema Information of CourseID Column in Course Table:");  
         ShowIndexColumns(courseIdIndexSchemaTable);  
         Console.WriteLine();  
      }  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   private static void ShowDataTable(DataTable table, Int32 length) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-" + length + "}", col.ColumnName);  
      }  
      Console.WriteLine();  
  
      foreach (DataRow row in table.Rows) {  
         foreach (DataColumn col in table.Columns) {  
            if (col.DataType.Equals(typeof(DateTime)))  
               Console.Write("{0,-" + length + ":d}", row[col]);  
            else if (col.DataType.Equals(typeof(Decimal)))  
               Console.Write("{0,-" + length + ":C}", row[col]);  
            else  
               Console.Write("{0,-" + length + "}", row[col]);  
         }  
         Console.WriteLine();  
      }  
   }  
  
   private static void ShowDataTable(DataTable table) {  
      ShowDataTable(table, 14);  
   }  
  
   private static void ShowColumns(DataTable columnsTable) {  
      var selectedRows = from info in columnsTable.AsEnumerable()  
                         select new {  
                            TableCatalog = info["TABLE_CATALOG"],  
                            TableSchema = info["TABLE_SCHEMA"],  
                            TableName = info["TABLE_NAME"],  
                            ColumnName = info["COLUMN_NAME"],  
                            DataType = info["DATA_TYPE"]  
                         };  
  
      Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "TableCatalog", "TABLE_SCHEMA",  
          "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE");  
      foreach (var row in selectedRows) {  
         Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", row.TableCatalog,  
             row.TableSchema, row.TableName, row.ColumnName, row.DataType);  
      }  
   }  
  
   private static void ShowIndexColumns(DataTable indexColumnsTable) {  
      var selectedRows = from info in indexColumnsTable.AsEnumerable()  
                         select new {  
                            TableSchema = info["table_schema"],  
                            TableName = info["table_name"],  
                            ColumnName = info["column_name"],  
                            ConstraintSchema = info["constraint_schema"],  
                            ConstraintName = info["constraint_name"],  
                            KeyType = info["KeyType"]  
                         };  
  
      Console.WriteLine("{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}", "table_schema", "table_name", "column_name", "constraint_schema", "constraint_name", "KeyType");  
      foreach (var row in selectedRows) {  
         Console.WriteLine("{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}", row.TableSchema,  
             row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1b1ac-460">
            <paramref name="collectionName" /> が null に指定されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-460">
              <paramref name="collectionName" /> is specified as null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName, string[] restrictionValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String, restrictionValues As String()) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName, cli::array &lt;System::String ^&gt; ^ restrictionValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="restrictionValues" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="collectionName">
          <span data-ttu-id="1b1ac-461">返すスキーマの名前を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-461">Specifies the name of the schema to return.</span>
          </span>
        </param>
        <param name="restrictionValues">
          <span data-ttu-id="1b1ac-462">要求したスキーマの制限値のセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-462">A set of restriction values for the requested schema.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-463">スキーマ名に指定した文字列と制限値に指定した文字列配列を使用して、この <see cref="T:System.Data.SqlClient.SqlConnection" /> のデータ ソースのスキーマ情報を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-463">Returns schema information for the data source of this <see cref="T:System.Data.SqlClient.SqlConnection" /> using the specified string for the schema name and the specified string array for the restriction values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-464">スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-464">A <see cref="T:System.Data.DataTable" /> that contains schema information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-465">`restrictionValues`パラメーターを指定できます*n* 、特定のコレクションの制限のコレクションで指定された値の深さ。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-465">The `restrictionValues` parameter can supply *n* depth of values, which are specified by the restrictions collection for a specific collection.</span></span> <span data-ttu-id="1b1ac-466">指定された制限の値を設定して、他の制限値を設定しない、するために、前述の制限を設定する必要があります。`null`しの値を指定するには、制限用に適切な値を格納します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-466">In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to `null` and then put the appropriate value in for the restriction that you would like to specify a value for.</span></span>  
  
 <span data-ttu-id="1b1ac-467">この例では、"Tables"コレクションです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-467">An example of this is the "Tables" collection.</span></span> <span data-ttu-id="1b1ac-468">"Tables"コレクションでは、データベース、所有者、3 つの制限とテーブル名があり、所有者"Carl"に関連付けられているテーブルのみに戻るには場合、は、次の値を渡す必要があります。:"Carl"は null です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-468">If the "Tables" collection has three restrictions--database, owner, and table name--and you want to get back only the tables associated with the owner "Carl", you need to pass in the following values: null, "Carl".</span></span> <span data-ttu-id="1b1ac-469">制限値が渡されない場合、既定値は、その制限に使用されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-469">If a restriction value is not passed in, the default values are used for that restriction.</span></span> <span data-ttu-id="1b1ac-470">これは渡すことと、同じマッピング`null`、これとは異なるパラメーター値に空の文字列に渡すことです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-470">This is the same mapping as passing in `null`, which is different from passing in an empty string for the parameter value.</span></span> <span data-ttu-id="1b1ac-471">その場合、空の文字列 ("") は、指定されたパラメーターの値であると見なされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-471">In that case, the empty string ("") is considered to be the value for the specified parameter.</span></span>  
  
 <span data-ttu-id="1b1ac-472">コード サンプルを示すため<xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>を参照してください<xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-472">For a code sample demonstrating <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>, see <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1b1ac-473">
            <paramref name="collectionName" /> が null に指定されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-473">
              <paramref name="collectionName" /> is specified as null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Data.SqlClient.SqlConnection.GetSchema" />
      </Docs>
    </Member>
    <Member MemberName="InfoMessage">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event InfoMessage As SqlInfoMessageEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlInfoMessageEventHandler ^ InfoMessage;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlInfoMessageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-474">SQL Server が警告メッセージまたは情報メッセージを返したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-474">Occurs when SQL Server returns a warning or informational message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-475">警告またはサーバーによって送信される情報のメッセージを処理するクライアントを作成する必要があります、<xref:System.Data.SqlClient.SqlInfoMessageEventHandler>このイベントを待機するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-475">Clients that want to process warnings or informational messages sent by the server should create an <xref:System.Data.SqlClient.SqlInfoMessageEventHandler> delegate to listen to this event.</span></span>  
  
 <span data-ttu-id="1b1ac-476"><xref:System.Data.SqlClient.SqlConnection.InfoMessage>イベントは、重大度が 10 のメッセージまたは SQL Server によって以下が返されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-476">The <xref:System.Data.SqlClient.SqlConnection.InfoMessage> event occurs when a message with a severity of 10 or less is returned by SQL Server.</span></span> <span data-ttu-id="1b1ac-477">エラーおよびメッセージの重大度を 20 原因経由で接続が閉じ、11 から 20 までの重大度をメッセージが発生します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-477">Messages that have a severity between 11 and 20 raise an error and messages that have a severity over 20 causes the connection to close.</span></span> <span data-ttu-id="1b1ac-478">SQL Server エラー レベルの詳細については、「データベース エンジン エラーの重大度」SQL Server オンライン ブックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-478">For more information on SQL Server error levels, see "Database Engine Error Severities" in SQL Server Books Online.</span></span>  
  
 <span data-ttu-id="1b1ac-479">例および詳細については、次を参照してください。[接続イベント](~/docs/framework/data/adonet/connection-events.md)です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-479">For more information and an example, see [Connection Events](~/docs/framework/data/adonet/connection-events.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.Open</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-480">
            <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" /> で指定したプロパティ設定を使用して、データベース接続を開きます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-480">Opens a database connection with the property settings specified by the <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-481"><xref:System.Data.SqlClient.SqlConnection>がある場合、接続プールから、開いている接続を描画します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-481">The <xref:System.Data.SqlClient.SqlConnection> draws an open connection from the connection pool if one is available.</span></span> <span data-ttu-id="1b1ac-482">それ以外の場合、SQL Server のインスタンスへの新しい接続を確立します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-482">Otherwise, it establishes a new connection to an instance of SQL Server.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-483">場合、<xref:System.Data.SqlClient.SqlConnection>スコープの移動のうち、終了していません。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-483">If the <xref:System.Data.SqlClient.SqlConnection> goes out of scope, it is not closed.</span></span> <span data-ttu-id="1b1ac-484">したがって、する必要があります明示的に接続を呼び出して終了する<xref:System.Data.SqlClient.SqlConnection.Close%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-484">Therefore, you must explicitly close the connection by calling <xref:System.Data.SqlClient.SqlConnection.Close%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-485">TCP/IP、以外のプロトコルを使用して SQL Server のインスタンスに接続しようと 1433 以外のポート番号を指定する場合、<xref:System.Data.SqlClient.SqlConnection.Open%2A>メソッドは失敗します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-485">If you specify a port number other than 1433 when you are trying to connect to an instance of SQL Server and using a protocol other than TCP/IP, the <xref:System.Data.SqlClient.SqlConnection.Open%2A> method fails.</span></span> <span data-ttu-id="1b1ac-486">1433 以外のポート番号を指定するには、"サーバー マシン名、ポート番号 ="接続文字列、および使用して、TCP/IP プロトコルでします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-486">To specify a port number other than 1433, include "server=machinename,port number" in the connection string, and use the TCP/IP protocol.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b1ac-487">.NET Framework Data Provider for SQL Server には、「許可の呼び出しをアンマネージ アセンブリ」有効になっているセキュリティ権限が必要です (<xref:System.Security.Permissions.SecurityPermission>で<xref:System.Security.Permissions.SecurityPermissionFlag>'éý' `UnmanagedCode`) を開くには、 <xref:System.Data.SqlClient.SqlConnection> SQL デバッグを有効にします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-487">The .NET Framework Data Provider for SQL Server requires the Security permission with "Allows calls to unmanaged assemblies" enabled (<xref:System.Security.Permissions.SecurityPermission> with <xref:System.Security.Permissions.SecurityPermissionFlag> set to `UnmanagedCode`) to open a <xref:System.Data.SqlClient.SqlConnection> with SQL Debugging enabled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-488">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>が開き、プロパティの一部が表示されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-488">The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, and displays some of its properties.</span></span> <span data-ttu-id="1b1ac-489">接続がの末尾に自動的に閉じられる、`using`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-489">The connection is automatically closed at the end of the `using` block.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1b1ac-490">データ ソースまたはサーバーを指定せずに接続を開くことはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-490">Cannot open a connection without specifying a data source or server.</span>
          </span>
          <span data-ttu-id="1b1ac-491">または  接続は既に開かれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-491">or  The connection is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.Data.SqlClient.SqlException">
          <span data-ttu-id="1b1ac-492">接続を開くときに発生した接続レベルのエラー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-492">A connection-level error occurred while opening the connection.</span>
          </span>
          <span data-ttu-id="1b1ac-493">
            <see cref="P:System.Data.SqlClient.SqlException.Number" /> プロパティに値 18487 または 18488 が含まれている場合、指定したパスワードの有効期限が切れているか、リセットする必要があることを示しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-493">If the <see cref="P:System.Data.SqlClient.SqlException.Number" /> property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset.</span>
          </span>
          <span data-ttu-id="1b1ac-494">詳細については、<see cref="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" /> メソッドを参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-494">See the <see cref="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" /> method for more information.</span>
          </span>
          <span data-ttu-id="1b1ac-495">app.config ファイルの <see langword="&lt;system.data.localdb&gt;" /> タグに、使用できないか、不明な要素が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-495">The <see langword="&lt;system.data.localdb&gt;" /> tag in the app.config file has invalid or unknown elements.</span>
          </span>
        </exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <span data-ttu-id="1b1ac-496">
            <see langword="&lt;localdbinstances&gt;" /> セクションに、同じ名前のエントリが 2 つ含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-496">There are two entries with the same name in the <see langword="&lt;localdbinstances&gt;" /> section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OpenAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task OpenAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ OpenAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="1b1ac-497">取り消し命令。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-497">The cancellation instruction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-498">
            <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" /> で指定したプロパティ設定を使用してデータベース接続を開く <see cref="M:System.Data.SqlClient.SqlConnection.Open" /> の非同期バージョン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-498">An asynchronous version of <see cref="M:System.Data.SqlClient.SqlConnection.Open" />, which opens a database connection with the property settings specified by the <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />.</span>
          </span>
          <span data-ttu-id="1b1ac-499">キャンセル トークンを使用すると、接続タイムアウトが経過する前に操作を破棄することを要求できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-499">The cancellation token can be used to request that the operation be abandoned before the connection timeout elapses.</span>
          </span>
          <span data-ttu-id="1b1ac-500">例外は、返されたタスクによって伝達されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-500">Exceptions will be propagated via the returned Task.</span>
          </span>
          <span data-ttu-id="1b1ac-501">接続が成功せずに接続タイムアウトの時間が経過した場合、返されるタスクは例外での失敗としてマークされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-501">If the connection timeout time elapses without successfully connecting, the returned Task will be marked as faulted with an Exception.</span>
          </span>
          <span data-ttu-id="1b1ac-502">実装は、プール済みの接続でもプールされていない接続でも、呼び出し元のスレッドをブロックすることなくタスクを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-502">The implementation returns a Task without blocking the calling thread for both pooled and non-pooled connections.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-503">非同期操作を表すタスク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-503">A task representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-504">呼び出した後<xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>、<xref:System.Data.SqlClient.SqlConnection.State%2A>返す必要があります<xref:System.Data.ConnectionState.Connecting>、返されるまで<xref:System.Threading.Tasks.Task>が完了します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-504">After calling <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState.Connecting> until the returned <xref:System.Threading.Tasks.Task> is completed.</span></span> <span data-ttu-id="1b1ac-505">次に、接続が成功した場合<xref:System.Data.SqlClient.SqlConnection.State%2A>返す必要があります<xref:System.Data.ConnectionState.Open>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-505">Then, if the connection was successful, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState.Open>.</span></span> <span data-ttu-id="1b1ac-506">接続が失敗した場合、<xref:System.Data.SqlClient.SqlConnection.State%2A>返す必要があります<xref:System.Data.ConnectionState.Closed>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-506">If the connection fails, <xref:System.Data.SqlClient.SqlConnection.State%2A> must return <xref:System.Data.ConnectionState.Closed>.</span></span>  
  
 <span data-ttu-id="1b1ac-507">呼び出し<xref:System.Data.SqlClient.SqlConnection.Close%2A>取り消すか、対応するクローズを試みます<xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-507">A call to <xref:System.Data.SqlClient.SqlConnection.Close%2A> will attempt to cancel or close the corresponding <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A> call.</span></span>  
  
 <span data-ttu-id="1b1ac-508">.NET Framework Data Provider for SQL Server の非同期プログラミングの詳細については、次を参照してください。[非同期プログラミング](~/docs/framework/data/adonet/asynchronous-programming.md)です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-508">For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1b1ac-509">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> を複数回呼び出しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-509">Calling <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> more than once for the same instance before task completion.</span>
          </span>
          <span data-ttu-id="1b1ac-510">
            <see langword="Context Connection=true" /> が接続文字列に指定されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-510">
              <see langword="Context Connection=true" /> is specified in the connection string.</span>
          </span>
          <span data-ttu-id="1b1ac-511">接続タイムアウトが経過する前に、接続プールから接続を使用できませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-511">A connection was not available from the connection pool before the connection time out elapsed.</span>
          </span>
        </exception>
        <exception cref="T:System.Data.SqlClient.SqlException">
          <span data-ttu-id="1b1ac-512">接続を開くときに発生した SQL Server によって返されるすべてのエラー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-512">Any error returned by SQL Server that occurred while opening the connection.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="PacketSize">
      <MemberSignature Language="C#" Value="public int PacketSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PacketSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.PacketSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PacketSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PacketSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-513">SQL Server のインスタンスと通信するために使用するネットワーク パケットのサイズ (バイト単位) を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-513">Gets the size (in bytes) of network packets used to communicate with an instance of SQL Server.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-514">ネットワーク パケットのサイズ (バイト単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-514">The size (in bytes) of network packets.</span>
          </span>
          <span data-ttu-id="1b1ac-515">既定値は 8000 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-515">The default value is 8000.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-516">アプリケーションは、一括コピー操作を実行または送信または、大量の text または image データの受信する場合、既定値より少ないネットワークが発生するため、効率が向上よりも大きいパケット サイズは読み取りおよび書き込み操作です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-516">If an application performs bulk copy operations, or sends or receives lots of text or image data, a packet size larger than the default may improve efficiency because it causes fewer network read and write operations.</span></span> <span data-ttu-id="1b1ac-517">アプリケーションは、少量の情報を送受信場合、は、パケット サイズを 512 バイトに設定できます (のパケット サイズの値を使用して、 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>)、これはほとんどのデータ転送操作のための十分なです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-517">If an application sends and receives small amounts of information, you can set the packet size to 512 bytes (using the Packet Size value in the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>), which is sufficient for most data transfer operations.</span></span> <span data-ttu-id="1b1ac-518">ほとんどのアプリケーションでの既定のパケット サイズをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-518">For most applications, the default packet size is best.</span></span>  
  
 <span data-ttu-id="1b1ac-519"><xref:System.Data.SqlClient.SqlConnection.PacketSize%2A> 512 ~ 32767 バイトの範囲内の値があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-519"><xref:System.Data.SqlClient.SqlConnection.PacketSize%2A> may be a value in the range of 512 and 32767 bytes.</span></span> <span data-ttu-id="1b1ac-520">値がこの範囲外にある場合、例外が生成されます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-520">An exception is generated if the value is outside this range.</span></span>  
  
 <span data-ttu-id="1b1ac-521">8000、パケットを SQL Server の全体的なスケーラビリティを減らす、はるかに効率的 SinglePage アロケーターの代わりに SQL Server のインスタンスで複数ページ アロケーターを使用するより大きい数値に既定値を設定します。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-521">Setting the default value to a number greater than 8000 will cause the packets to use the MultiPage allocator on the instance of SQL Server instead of the much more efficient SinglePage allocator, reducing the overall scalability of the SQL Server.</span></span> <span data-ttu-id="1b1ac-522">SQL Server でメモリの使用方法の詳細については、次を参照してください。[メモリ アーキテクチャ](http://go.microsoft.com/fwlink/?LinkId=143705)SQL Server オンライン ブック。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-522">For more information on how SQL Server uses memory, see [Memory Architecture](http://go.microsoft.com/fwlink/?LinkId=143705) in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-523">次の例を作成、 <xref:System.Data.SqlClient.SqlConnection>、設定を含む、`Packet Size`を接続文字列で 512 です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-523">The following example creates a <xref:System.Data.SqlClient.SqlConnection>, including setting the `Packet Size` to 512 in the connection string.</span></span> <span data-ttu-id="1b1ac-524">表示、<xref:System.Data.SqlClient.SqlConnection.PacketSize%2A>と<xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A>コンソール ウィンドウのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-524">It displays the <xref:System.Data.SqlClient.SqlConnection.PacketSize%2A> and <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> properties in the console window.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.PacketSize Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.PacketSize Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.PacketSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.PacketSize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterColumnEncryptionKeyStoreProviders">
      <MemberSignature Language="C#" Value="public static void RegisterColumnEncryptionKeyStoreProviders (System.Collections.Generic.IDictionary&lt;string,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt; customProviders);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterColumnEncryptionKeyStoreProviders(class System.Collections.Generic.IDictionary`2&lt;string, class System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt; customProviders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterColumnEncryptionKeyStoreProviders (customProviders As IDictionary(Of String, SqlColumnEncryptionKeyStoreProvider))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterColumnEncryptionKeyStoreProviders(System::Collections::Generic::IDictionary&lt;System::String ^, System::Data::SqlClient::SqlColumnEncryptionKeyStoreProvider ^&gt; ^ customProviders);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customProviders" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt;" />
      </Parameters>
      <Docs>
        <param name="customProviders">
          <span data-ttu-id="1b1ac-525">カスタム プロバイダー</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-525">The custom providers</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1b1ac-526">列暗号化キー ストア プロバイダーを登録します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-526">Registers the column encryption key store providers.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetStatistics">
      <MemberSignature Language="C#" Value="public void ResetStatistics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetStatistics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ResetStatistics" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetStatistics ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetStatistics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-527">統計情報の収集が有効にされている場合、すべての値はゼロにリセットされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-527">If statistics gathering is enabled, all values are reset to zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-528">統計情報の収集が有効になっていないと、このメソッドは、エラーはスローされません。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-528">If statistics gathering is not enabled and this method is called, no error is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveStatistics">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary RetrieveStatistics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionary RetrieveStatistics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.RetrieveStatistics" />
      <MemberSignature Language="VB.NET" Value="Public Function RetrieveStatistics () As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionary ^ RetrieveStatistics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-529">メソッドが呼び出された時点の統計情報の、名前/値ペアから成るコレクションを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-529">Returns a name value pair collection of statistics at the point in time the method is called.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-530">
            <see cref="T:System.Collections.DictionaryEntry" /> アイテムの <see cref="T:System.Collections.IDictionary" /> 型の参照を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-530">Returns a reference of type <see cref="T:System.Collections.IDictionary" /> of <see cref="T:System.Collections.DictionaryEntry" /> items.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-531">このメソッドが呼び出されると、取得した値されて現在の位置で時間。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-531">When this method is called, the values retrieved are those at the current point in time.</span></span> <span data-ttu-id="1b1ac-532">続行する場合、接続を使用して、値が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-532">If you continue using the connection, the values are incorrect.</span></span> <span data-ttu-id="1b1ac-533">最新の値を取得するメソッドを再度実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-533">You need to re-execute the method to obtain the most current values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-534">クライアントが接続している SQL Server のインスタンスのバージョンを示す文字列を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-534">Gets a string that contains the version of the instance of SQL Server to which the client is connected.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-535">SQL Server のインスタンスのバージョン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-535">The version of the instance of SQL Server.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-536">形式は、バージョン *##. ##. ###*、ここで最初の 2 桁はメジャー バージョン、次の 2 桁はマイナーのバージョンであり、最後の 4 桁の数字は、リリース バージョン。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-536">The version is of the form *##.##.####*, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version.</span></span> <span data-ttu-id="1b1ac-537">文字列の形式は、 *major.minor.build*主な場所、ビルドが 4 桁の数字とマイナーは正確に 2 桁の数字です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-537">The string is of the form *major.minor.build*, where major and minor are exactly two digits and build is exactly four digits.</span></span>  
  
 <span data-ttu-id="1b1ac-538">返されるタスクが完了しておらず、<xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A> への呼び出しの後に接続が開かれていないときに、<xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-538"><xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-539">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>し、表示、<xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-539">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> property.</span></span>  
  
 [!code-csharp[Classic WebData ISqlConnection.ServerVersion Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData ISqlConnection.ServerVersion Example/CS/source.cs#1)]
 [!code-vb[Classic WebData ISqlConnection.ServerVersion Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData ISqlConnection.ServerVersion Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1b1ac-540">接続が閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-540">The connection is closed.</span>
          </span>
          <span data-ttu-id="1b1ac-541">返されるタスクが完了しておらず、<see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> への呼び出しの後に接続が開かれていないときに、<see cref="P:System.Data.SqlClient.SqlConnection.ServerVersion" /> が呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-541">
              <see cref="P:System.Data.SqlClient.SqlConnection.ServerVersion" /> was called while the returned Task was not completed and the connection was not opened after a call to <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.State</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-542">接続で実行された最も新しいネットワーク操作時の <see cref="T:System.Data.SqlClient.SqlConnection" /> の状態を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-542">Indicates the state of the <see cref="T:System.Data.SqlClient.SqlConnection" /> during the most recent network operation performed on the connection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-543">
            <see cref="T:System.Data.ConnectionState" /> 列挙型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-543">An <see cref="T:System.Data.ConnectionState" /> enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-544">返します、<xref:System.Data.ConnectionState>の状態を示す列挙値、<xref:System.Data.SqlClient.SqlConnection>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-544">Returns an <xref:System.Data.ConnectionState> enumeration indicating the state of the <xref:System.Data.SqlClient.SqlConnection>.</span></span> <span data-ttu-id="1b1ac-545">値が更新されます閉じ、接続を再び開く<xref:System.Data.SqlClient.SqlConnection.State%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-545">Closing and reopening the connection will refresh the value of <xref:System.Data.SqlClient.SqlConnection.State%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatisticsEnabled">
      <MemberSignature Language="C#" Value="public bool StatisticsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StatisticsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.StatisticsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property StatisticsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StatisticsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-546">
            <see langword="true" /> に設定された場合、現在の接続について統計情報の収集が有効になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-546">When set to <see langword="true" />, enables statistics gathering for the current connection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-547">統計情報の収集が有効な場合は <see langword="true" /> を返し、それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-547">Returns <see langword="true" /> if statistics gathering is enabled; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1b1ac-548">
            <see langword="false" /> が既定値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-548">
              <see langword="false" /> is the default.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-549">統計情報の収集を有効にして、パフォーマンスに与える影響は多少、したがってを有効にする必要がある場合のみです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-549">Enabling statistics gathering has a minor, but measurable effect on performance and therefore should be enabled only when it is required.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-550">現在のインスタンスのコピーである新しいオブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-550">Creates a new object that is a copy of the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1b1ac-551">このインスタンスのコピーである新しいオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-551">A new object that is a copy of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-552">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-552">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="1b1ac-553">これは、<xref:System.Data.SqlClient.SqlConnection> のインスタンスが <xref:System.ICloneable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-553">It can be used only when the <xref:System.Data.SqlClient.SqlConnection> instance is cast to an <xref:System.ICloneable> interface.</span></span>  
  
 <span data-ttu-id="1b1ac-554">このメンバーは、.NET Compact Framework でのみサポートされます。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-554">This member is only supported by the .NET Compact Framework.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkstationId">
      <MemberSignature Language="C#" Value="public string WorkstationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkstationId" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.WorkstationId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkstationId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkstationId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1b1ac-555">データベース クライアントを識別する文字列を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-555">Gets a string that identifies the database client.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1b1ac-556">データベース クライアントを識別する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-556">A string that identifies the database client.</span>
          </span>
          <span data-ttu-id="1b1ac-557">指定されていない場合は、クライアント コンピューターの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-557">If not specified, the name of the client computer.</span>
          </span>
          <span data-ttu-id="1b1ac-558">どちらも指定されていない場合は、空の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1b1ac-558">If neither is specified, the value is an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b1ac-559">文字列には、通常、クライアントのネットワーク名が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-559">The string typically contains the network name of the client.</span></span> <span data-ttu-id="1b1ac-560"><xref:System.Data.SqlClient.SqlConnection.WorkstationId%2A>プロパティに対応して、`Workstation ID`接続文字列プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-560">The <xref:System.Data.SqlClient.SqlConnection.WorkstationId%2A> property corresponds to the `Workstation ID` connection string property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b1ac-561">次の例を作成、<xref:System.Data.SqlClient.SqlConnection>し、表示、<xref:System.Data.SqlClient.SqlConnection.WorkstationId%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1b1ac-561">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the <xref:System.Data.SqlClient.SqlConnection.WorkstationId%2A> property.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.WorkstationId Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.WorkstationId Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.WorkstationId Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.WorkstationId Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>