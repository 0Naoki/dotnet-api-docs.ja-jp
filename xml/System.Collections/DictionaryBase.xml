<Type Name="DictionaryBase" FullName="System.Collections.DictionaryBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="46d35eed9f6b6c225712d4576ab0e34eb05331fa" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48685393" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DictionaryBase : System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit DictionaryBase extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.DictionaryBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DictionaryBase&#xA;Implements IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictionaryBase abstract : System::Collections::IDictionary" />
  <TypeSignature Language="F#" Value="type DictionaryBase = class&#xA;    interface IDictionary&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2001c-101">厳密に型指定されたキー/値ペアのコレクションの <see langword="abstract" /> 基底クラスを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2001c-101">Provides the <see langword="abstract" /> base class for a strongly typed collection of key/value pairs.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-102">(Visual Basic でそれぞれ) 用の c# 言語の foreach ステートメントは、コレクション内の要素の型のオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="2001c-102">The foreach statement of the C# language (for each in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="2001c-103">以降の各要素、<xref:System.Collections.DictionaryBase>キー/値のペアは、要素の型がないと、キーの型または値の型。</span><span class="sxs-lookup"><span data-stu-id="2001c-103">Since each element of the <xref:System.Collections.DictionaryBase> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="2001c-104">要素の型は、代わりに、<xref:System.Collections.DictionaryEntry>します。</span><span class="sxs-lookup"><span data-stu-id="2001c-104">Instead, the element type is <xref:System.Collections.DictionaryEntry>.</span></span>  
  
 <span data-ttu-id="2001c-105">`foreach`ステートメントは、コレクションを記述しないからの読み取りのみを許可する列挙子のラッパーです。</span><span class="sxs-lookup"><span data-stu-id="2001c-105">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2001c-106">キーを継承する、その動作が変更された、絶対の一意性を保証できませんを使用する比較であるため、<xref:System.Type.Equals%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="2001c-106">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-107">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-107">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="2001c-108">パブリック静的 (<see langword="Shared" /> Visual Basic で) この型のメンバーはスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2001c-108">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="2001c-109">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2001c-109">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="2001c-110">この実装は用の同期 (スレッド セーフな) ラッパーを提供していない、 <see cref="T:System.Collections.DictionaryBase" />、派生クラスは、独自の同期バージョンを作成できますが、<see cref="T:System.Collections.DictionaryBase" />を使用して、<see cref="P:System.Collections.ICollection.SyncRoot" />プロパティ。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2001c-110">This implementation does not provide a synchronized (thread-safe) wrapper for a <see cref="T:System.Collections.DictionaryBase" />, but derived classes can create their own synchronized versions of the <see cref="T:System.Collections.DictionaryBase" /> using the <see cref="P:System.Collections.ICollection.SyncRoot" /> property.</span>
      </span>
      <span data-ttu-id="2001c-111">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2001c-111">Enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="2001c-112">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2001c-112">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span>
      </span>
      <span data-ttu-id="2001c-113">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2001c-113">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="2001c-114">この基本クラスは、実装側では厳密に型指定されたカスタム コレクションを作成するが容易に提供されます。</span>
        <span class="sxs-lookup">
          <span data-stu-id="2001c-114">This base class is provided to make it easier for implementers to create a strongly typed custom collection.</span>
        </span>
        <span data-ttu-id="2001c-115">実装する場合は、独自に作成する代わりにこの基本クラスを拡張することをお勧めします。</span>
        <span class="sxs-lookup">
          <span data-stu-id="2001c-115">Implementers are encouraged to extend this base class instead of creating their own.</span>
        </span>
        <span data-ttu-id="2001c-116">この基本クラスのメンバーは、派生クラスのみで使用するためのもの、および保護されます。</span>
        <span class="sxs-lookup">
          <span data-stu-id="2001c-116">Members of this base class are protected and are intended to be used through a derived class only.</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="N:System.Collections.Generic" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md">
      <span data-ttu-id="2001c-117">カルチャを認識しない文字列操作の実行</span>
      <span class="sxs-lookup">
        <span data-stu-id="2001c-117">Performing Culture-Insensitive String Operations</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DictionaryBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DictionaryBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2001c-118">
            <see cref="T:System.Collections.DictionaryBase" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-118">Initializes a new instance of the <see cref="T:System.Collections.DictionaryBase" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-119">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-119">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="dictionaryBase.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2001c-120">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスの内容を消去します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-120">Clears the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-121"><xref:System.Collections.DictionaryBase.Count%2A> 0 に設定し、コレクションの要素からその他のオブジェクトへの参照も解放します。</span><span class="sxs-lookup"><span data-stu-id="2001c-121"><xref:System.Collections.DictionaryBase.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="2001c-122">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.DictionaryBase.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2001c-122">This method is an O(`n`) operation, where `n` is <xref:System.Collections.DictionaryBase.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="dictionaryBase.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="2001c-123">
            <see cref="T:System.Array" /> インスタンスから <see cref="T:System.Collections.DictionaryEntry" /> オブジェクトがコピーされる 1 次元の <see cref="T:System.Collections.DictionaryBase" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-123">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
          <span data-ttu-id="2001c-124">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-124">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="2001c-125">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-125">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-126">1 次元の <see cref="T:System.Collections.DictionaryBase" /> の指定したインデックスに <see cref="T:System.Array" /> の要素をコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-126">Copies the <see cref="T:System.Collections.DictionaryBase" /> elements to a one-dimensional <see cref="T:System.Array" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-127">要素のコピー先は、<xref:System.Array>を列挙子が反復処理と同じ順序で、<xref:System.Collections.DictionaryBase>します。</span><span class="sxs-lookup"><span data-stu-id="2001c-127">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.DictionaryBase>.</span></span>  
  
 <span data-ttu-id="2001c-128">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.DictionaryBase.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2001c-128">This method is an O(`n`) operation, where `n` is <xref:System.Collections.DictionaryBase.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2001c-129">
            <paramref name="array" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-129">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2001c-130">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-130">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2001c-131">
            <paramref name="array" /> が多次元です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-131">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2001c-132">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-132">-or-</span>
          </span>
          <span data-ttu-id="2001c-133">コピー元の <see cref="T:System.Collections.DictionaryBase" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-133">The number of elements in the source <see cref="T:System.Collections.DictionaryBase" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="2001c-134">コピー元の <see cref="T:System.Collections.DictionaryBase" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-134">The type of the source <see cref="T:System.Collections.DictionaryBase" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.DictionaryBase.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.DictionaryBase.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2001c-135">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスに格納されている要素の数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-135">Gets the number of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2001c-136">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスに格納されている要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-136">The number of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-137">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2001c-137">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ Dictionary { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.IDictionary" Usage="System.Collections.DictionaryBase.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2001c-138">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスに格納されている要素のリストを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-138">Gets the list of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2001c-139">
            <see cref="T:System.Collections.IDictionary" /> インスタンス自体を表す <see cref="T:System.Collections.DictionaryBase" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-139">An <see cref="T:System.Collections.IDictionary" /> representing the <see cref="T:System.Collections.DictionaryBase" /> instance itself.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-140">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-140">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-141">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2001c-141">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-142">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-142">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="dictionaryBase.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2001c-143">
            <see cref="T:System.Collections.IDictionaryEnumerator" /> インスタンスを反復処理する <see cref="T:System.Collections.DictionaryBase" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-143">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that iterates through the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2001c-144">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスの <see cref="T:System.Collections.IDictionaryEnumerator" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-144">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-145">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="2001c-145">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="2001c-146">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2001c-146">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="2001c-147">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2001c-147">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="2001c-148">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="2001c-148">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="2001c-149"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="2001c-149"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="2001c-150">この位置では、<xref:System.Collections.IEnumerator.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="2001c-150">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="2001c-151">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="2001c-151">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="2001c-152"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="2001c-152"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="2001c-153"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="2001c-153"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="2001c-154">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="2001c-154">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="2001c-155">この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="2001c-155">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="2001c-156">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="2001c-156">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="2001c-157"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2001c-157">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="2001c-158">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="2001c-158">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="2001c-159">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="2001c-159">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="2001c-160">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="2001c-160">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="2001c-161">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="2001c-161">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2001c-162">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2001c-162">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2001c-163">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-163">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-164">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-164">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="InnerHashtable">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable InnerHashtable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable InnerHashtable" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.InnerHashtable" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property InnerHashtable As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ InnerHashtable { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerHashtable : System.Collections.Hashtable" Usage="System.Collections.DictionaryBase.InnerHashtable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2001c-165">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスに格納されている要素のリストを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-165">Gets the list of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2001c-166">
            <see cref="T:System.Collections.Hashtable" /> インスタンス自体を表す <see cref="T:System.Collections.DictionaryBase" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-166">A <see cref="T:System.Collections.Hashtable" /> representing the <see cref="T:System.Collections.DictionaryBase" /> instance itself.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-167">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-167">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-168">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2001c-168">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClear">
      <MemberSignature Language="C#" Value="protected virtual void OnClear ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnClear" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClear ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClear();" />
      <MemberSignature Language="F#" Value="abstract member OnClear : unit -&gt; unit&#xA;override this.OnClear : unit -&gt; unit" Usage="dictionaryBase.OnClear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2001c-169">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスの内容を消去する前に、追加のカスタム プロセスを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-169">Performs additional custom processes before clearing the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-170">このメソッドの既定の実装は、コレクションがクリアされる前に、何らかのアクションを実行する派生クラスによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="2001c-170">The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.</span></span>  
  
 <span data-ttu-id="2001c-171">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-171">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-172">このメソッドの既定の実装は、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-172">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2001c-173">このメソッドを使用する、基礎となるすべての要素を削除する前に実行する必要があるプロセスを定義する<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-173">This method allows implementers to define processes that must be performed before deleting all the elements from the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-174">このメソッドを定義すると、実装側機能を追加できます継承されたメソッドに他のすべてのメソッドをオーバーライドする必要はありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-174">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span>
            </span>
            <span data-ttu-id="2001c-175">
              <see cref="M:System.Collections.DictionaryBase.OnClear" /> 一方、標準のクリア動作する前に呼び出される<see cref="M:System.Collections.DictionaryBase.OnClearComplete" />が標準のクリア動作後に呼び出されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-175">
                <see cref="M:System.Collections.DictionaryBase.OnClear" /> is invoked before the standard Clear behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnClearComplete" /> is invoked after the standard Clear behavior.</span>
            </span>
            <span data-ttu-id="2001c-176">たとえば、実装者は、明確なグローバルによる削除からの特定の要素を除外できます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-176">For example, implementers can exempt certain elements from deletion by a global Clear.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnClearComplete" />
        <altmember cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnClearComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnClearComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClearComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnClearComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClearComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClearComplete();" />
      <MemberSignature Language="F#" Value="abstract member OnClearComplete : unit -&gt; unit&#xA;override this.OnClearComplete : unit -&gt; unit" Usage="dictionaryBase.OnClearComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2001c-177">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスの内容を消去した後に、追加のカスタム プロセスを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-177">Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-178">このメソッドの既定の実装は、コレクションをクリアした後に何らかのアクションを実行する派生クラスでオーバーライドするためのものです。</span><span class="sxs-lookup"><span data-stu-id="2001c-178">The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.</span></span>  
  
 <span data-ttu-id="2001c-179">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-179">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-180">このメソッドの既定の実装は、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-180">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2001c-181">この方法で、基礎となるすべての要素を削除するには、<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-181">This method allows implementers to define processes that must be performed after deleting all the elements from the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-182">このメソッドを定義すると、実装側機能を追加できます継承されたメソッドに他のすべてのメソッドをオーバーライドする必要はありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-182">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span>
            </span>
            <span data-ttu-id="2001c-183">
              <see cref="M:System.Collections.DictionaryBase.OnClear" /> 一方、標準のクリア動作する前に呼び出される<see cref="M:System.Collections.DictionaryBase.OnClearComplete" />が標準のクリア動作後に呼び出されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-183">
                <see cref="M:System.Collections.DictionaryBase.OnClear" /> is invoked before the standard Clear behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnClearComplete" /> is invoked after the standard Clear behavior.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnClear" />
        <altmember cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnGet">
      <MemberSignature Language="C#" Value="protected virtual object OnGet (object key, object currentValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object OnGet(object key, object currentValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnGet (key As Object, currentValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ OnGet(System::Object ^ key, System::Object ^ currentValue);" />
      <MemberSignature Language="F#" Value="abstract member OnGet : obj * obj -&gt; obj&#xA;override this.OnGet : obj * obj -&gt; obj" Usage="dictionaryBase.OnGet (key, currentValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="currentValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-184">取得する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-184">The key of the element to get.</span>
          </span>
        </param>
        <param name="currentValue">
          <span data-ttu-id="2001c-185">
            <c>key</c> に関連付けられている要素の現在の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-185">The current value of the element associated with <c>key</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-186">指定したキーおよび値を持つ、<see cref="T:System.Collections.DictionaryBase" /> インスタンスの要素を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-186">Gets the element with the specified key and value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2001c-187">指定したキーおよび値を持つ要素を格納している <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-187">An <see cref="T:System.Object" /> containing the element with the specified key and value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-188">このメソッドの既定の実装を返します`currentValue`します。</span><span class="sxs-lookup"><span data-stu-id="2001c-188">The default implementation of this method returns `currentValue`.</span></span> <span data-ttu-id="2001c-189">指定した要素を取得するときに、追加のアクションを実行する派生クラスでオーバーライドするものでは。</span><span class="sxs-lookup"><span data-stu-id="2001c-189">It is intended to be overridden by a derived class to perform additional action when the specified element is retrieved.</span></span>  
  
 <span data-ttu-id="2001c-190">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-190">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-191">このメソッドの既定の実装は、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-191">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2001c-192">このメソッドを使用する、基になるは、標準の Get 動作を実行するときに実行する必要があるプロセスを定義する<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-192">This method allows implementers to define processes that must be performed when executing the standard Get behavior of the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-193">このメソッドを定義すると、実装側機能を追加できます継承されたメソッドに他のすべてのメソッドをオーバーライドする必要はありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-193">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span>
            </span>
            <span data-ttu-id="2001c-194">
              <see cref="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" /> 基になるから取得した値を返す前に実行するプロセスを指定するために使用できる<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-194">
                <see cref="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" /> can be used to specify processes to perform before returning the value retrieved from the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-195">たとえば、実装者は、返す前に、別の型に値をキャストできます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-195">For example, implementers can cast the value into another type before returning it.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInsert">
      <MemberSignature Language="C#" Value="protected virtual void OnInsert (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInsert(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInsert (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInsert(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnInsert : obj * obj -&gt; unit&#xA;override this.OnInsert : obj * obj -&gt; unit" Usage="dictionaryBase.OnInsert (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-196">挿入する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-196">The key of the element to insert.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="2001c-197">挿入する要素の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-197">The value of the element to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-198">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスに新しい要素を挿入する前に、追加のカスタム プロセスを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-198">Performs additional custom processes before inserting a new element into the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-199">このメソッドの既定の実装は、指定した要素が挿入される前に、何らかのアクションを実行する派生クラスによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="2001c-199">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.</span></span>  
  
 <span data-ttu-id="2001c-200">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-200">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-201">このメソッドの既定の実装は、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-201">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-202">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-202">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2001c-203">このメソッドを使用する、基になるに要素を挿入する前に実行する必要があるプロセスを定義する<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-203">This method allows implementers to define processes that must be performed before inserting the element into the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-204">このメソッドを定義すると、実装側機能を追加できます継承されたメソッドに他のすべてのメソッドをオーバーライドする必要はありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-204">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span>
            </span>
            <span data-ttu-id="2001c-205">
              <see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> 一方は、標準の Insert 動作では、前に呼び出さ<see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />が標準の Insert 動作後に呼び出されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-205">
                <see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> is invoked before the standard Insert behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /> is invoked after the standard Insert behavior.</span>
            </span>
            <span data-ttu-id="2001c-206">たとえば、実装者に挿入できるオブジェクトの種類を制限することができます、<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-206">For example, implementers can restrict which types of objects can be inserted into the <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnInsertComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnInsertComplete (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInsertComplete(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInsertComplete (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInsertComplete(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnInsertComplete : obj * obj -&gt; unit&#xA;override this.OnInsertComplete : obj * obj -&gt; unit" Usage="dictionaryBase.OnInsertComplete (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-207">挿入する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-207">The key of the element to insert.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="2001c-208">挿入する要素の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-208">The value of the element to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-209">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスに新しい要素を挿入した後に、追加のカスタム プロセスを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-209">Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-210">このメソッドの既定の実装は、指定した要素を挿入した後に何らかのアクションを実行する派生クラスによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="2001c-210">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.</span></span>  
  
 <span data-ttu-id="2001c-211">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-211">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-212">このメソッドの既定の実装は、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-212">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2001c-213">このメソッドを使用する、基になる要素に挿入した後に実行する必要があるプロセスを定義する<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-213">This method allows implementers to define processes that must be performed after inserting the element into the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-214">このメソッドを定義すると、実装側機能を追加できます継承されたメソッドに他のすべてのメソッドをオーバーライドする必要はありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-214">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span>
            </span>
            <span data-ttu-id="2001c-215">
              <see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> 一方は、標準の Insert 動作では、前に呼び出さ<see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />が標準の Insert 動作後に呼び出されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-215">
                <see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> is invoked before the standard Insert behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /> is invoked after the standard Insert behavior.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnRemove">
      <MemberSignature Language="C#" Value="protected virtual void OnRemove (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemove(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemove (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemove(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRemove : obj * obj -&gt; unit&#xA;override this.OnRemove : obj * obj -&gt; unit" Usage="dictionaryBase.OnRemove (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-216">削除する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-216">The key of the element to remove.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="2001c-217">削除する要素の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-217">The value of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-218">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスから要素を削除する前に、追加のカスタム プロセスを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-218">Performs additional custom processes before removing an element from the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-219">このメソッドの既定の実装は、指定した要素が削除される前に、何らかのアクションを実行する派生クラスによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="2001c-219">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.</span></span>  
  
 <span data-ttu-id="2001c-220">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-220">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-221">このメソッドの既定の実装は、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-221">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-222">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-222">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2001c-223">このメソッドを使用する、基礎となる要素を削除する前に実行する必要があるプロセスを定義する<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-223">This method allows implementers to define processes that must be performed before removing the element from the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-224">このメソッドを定義すると、実装側機能を追加できます継承されたメソッドに他のすべてのメソッドをオーバーライドする必要はありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-224">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span>
            </span>
            <span data-ttu-id="2001c-225">
              <see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> 一方、標準の削除動作の前に呼び出される<see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />が標準の削除動作後に呼び出されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-225">
                <see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> is invoked before the standard Remove behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /> is invoked after the standard Remove behavior.</span>
            </span>
            <span data-ttu-id="2001c-226">たとえば、実装者は常に例外をスローして要素の削除を防ぐことができます<see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-226">For example, implementers can prevent removal of elements by always throwing an exception in <see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnClear" />
      </Docs>
    </Member>
    <Member MemberName="OnRemoveComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveComplete (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveComplete(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveComplete (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveComplete(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveComplete : obj * obj -&gt; unit&#xA;override this.OnRemoveComplete : obj * obj -&gt; unit" Usage="dictionaryBase.OnRemoveComplete (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-227">削除する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-227">The key of the element to remove.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="2001c-228">削除する要素の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-228">The value of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-229">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスから要素を削除した後に、追加のカスタム プロセスを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-229">Performs additional custom processes after removing an element from the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-230">このメソッドの既定の実装は、指定した要素が削除された後に何らかのアクションを実行する派生クラスによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="2001c-230">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.</span></span>  
  
 <span data-ttu-id="2001c-231">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-231">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-232">このメソッドの既定の実装は、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-232">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2001c-233">この方法で、基礎となる要素を削除するには、<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-233">This method allows implementers to define processes that must be performed after removing the element from the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-234">このメソッドを定義すると、実装側機能を追加できます継承されたメソッドに他のすべてのメソッドをオーバーライドする必要はありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-234">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span>
            </span>
            <span data-ttu-id="2001c-235">
              <see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> 一方、標準の削除動作の前に呼び出される<see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />が標準の削除動作後に呼び出されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-235">
                <see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> is invoked before the standard Remove behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /> is invoked after the standard Remove behavior.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnClearComplete" />
      </Docs>
    </Member>
    <Member MemberName="OnSet">
      <MemberSignature Language="C#" Value="protected virtual void OnSet (object key, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSet(object key, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSet (key As Object, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSet(System::Object ^ key, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="abstract member OnSet : obj * obj * obj -&gt; unit&#xA;override this.OnSet : obj * obj * obj -&gt; unit" Usage="dictionaryBase.OnSet (key, oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-236">検索する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-236">The key of the element to locate.</span>
          </span>
        </param>
        <param name="oldValue">
          <span data-ttu-id="2001c-237">
            <c>key</c> に関連付けられている要素の古い値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-237">The old value of the element associated with <c>key</c>.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="2001c-238">
            <c>key</c> に関連付けられている要素の新しい値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-238">The new value of the element associated with <c>key</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-239">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスに値を設定する前に、追加のカスタム プロセスを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-239">Performs additional custom processes before setting a value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-240">このメソッドの既定の実装は、指定した要素を設定する前に、何らかのアクションを実行する派生クラスによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="2001c-240">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.</span></span>  
  
 <span data-ttu-id="2001c-241">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-241">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-242">このメソッドの既定の実装は、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-242">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-243">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-243">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2001c-244">このメソッドを使用する、基になる指定した要素を設定する前に実行する必要があるプロセスを定義する<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-244">This method allows implementers to define processes that must be performed before setting the specified element in the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-245">このメソッドを定義すると、実装側機能を追加できます継承されたメソッドに他のすべてのメソッドをオーバーライドする必要はありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-245">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span>
            </span>
            <span data-ttu-id="2001c-246">
              <see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> 一方、標準のセットの動作をする前に呼び出される<see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />が標準的な機能の設定後に呼び出されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-246">
                <see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> is invoked before the standard Set behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /> is invoked after the standard Set behavior.</span>
            </span>
            <span data-ttu-id="2001c-247">たとえば、実装者が内でのチェックを実行することによって、どの値を上書きできるを制限することができます<see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-247">For example, implementers can restrict which values can be overwritten by performing a check inside <see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnSetComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnSetComplete (object key, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSetComplete(object key, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSetComplete (key As Object, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSetComplete(System::Object ^ key, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="abstract member OnSetComplete : obj * obj * obj -&gt; unit&#xA;override this.OnSetComplete : obj * obj * obj -&gt; unit" Usage="dictionaryBase.OnSetComplete (key, oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-248">検索する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-248">The key of the element to locate.</span>
          </span>
        </param>
        <param name="oldValue">
          <span data-ttu-id="2001c-249">
            <c>key</c> に関連付けられている要素の古い値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-249">The old value of the element associated with <c>key</c>.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="2001c-250">
            <c>key</c> に関連付けられている要素の新しい値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-250">The new value of the element associated with <c>key</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-251">
            <see cref="T:System.Collections.DictionaryBase" /> インスタンスに値を設定した後に、追加のカスタム プロセスを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-251">Performs additional custom processes after setting a value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-252">このメソッドの既定の実装は、指定した要素を設定した後に何らかのアクションを実行する派生クラスによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="2001c-252">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.</span></span>  
  
 <span data-ttu-id="2001c-253">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-253">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-254">このメソッドの既定の実装は、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-254">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2001c-255">このメソッドを使用する、基になる指定した要素を設定した後に実行する必要があるプロセスを定義する<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-255">This method allows implementers to define processes that must be performed after setting the specified element in the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-256">このメソッドを定義すると、実装側機能を追加できます継承されたメソッドに他のすべてのメソッドをオーバーライドする必要はありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-256">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span>
            </span>
            <span data-ttu-id="2001c-257">
              <see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> 一方、標準のセットの動作をする前に呼び出される<see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />が標準的な機能の設定後に呼び出されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-257">
                <see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> is invoked before the standard Set behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /> is invoked after the standard Set behavior.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnValidate">
      <MemberSignature Language="C#" Value="protected virtual void OnValidate (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidate(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidate (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidate(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnValidate : obj * obj -&gt; unit&#xA;override this.OnValidate : obj * obj -&gt; unit" Usage="dictionaryBase.OnValidate (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-258">検証する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-258">The key of the element to validate.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="2001c-259">検証する要素の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-259">The value of the element to validate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-260">指定したキーおよび値を持つ要素を検証するときに、追加のカスタム プロセスを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-260">Performs additional custom processes when validating the element with the specified key and value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-261">このメソッドの既定の実装は、指定した要素が検証されるときに、何らかのアクションを実行する派生クラスによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="2001c-261">The default implementation of this method is intended to be overridden by a derived class to perform some action when the specified element is validated.</span></span>  
  
 <span data-ttu-id="2001c-262">によって返されるインスタンスでのみでのメソッドが呼び出される、<xref:System.Collections.DictionaryBase.Dictionary%2A>プロパティによって返されるインスタンスではなく、<xref:System.Collections.DictionaryBase.InnerHashtable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-262">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-263">このメソッドの既定の実装は、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-263">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-264">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-264">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="2001c-265">このメソッドを使用する、基になるは、標準の動作を実行するときに実行する必要があるプロセスを定義する<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-265">This method allows implementers to define processes that must be performed when executing the standard behavior of the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
            <span data-ttu-id="2001c-266">このメソッドを定義すると、実装側機能を追加できます継承されたメソッドに他のすべてのメソッドをオーバーライドする必要はありません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-266">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span>
            </span>
            <span data-ttu-id="2001c-267">
              <see cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" /> コレクションに受け付けられるオブジェクトの種類の制限を適用するために使用します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-267">
                <see cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" /> can be used to impose restrictions on the type of objects that are accepted into the collection.</span>
            </span>
            <span data-ttu-id="2001c-268">既定の実装<see langword="null" />が追加または削除から、基になる<see cref="T:System.Collections.Hashtable" />します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="2001c-268">The default implementation prevents <see langword="null" /> from being added to or removed from the underlying <see cref="T:System.Collections.Hashtable" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2001c-269">
            <see cref="T:System.Collections.DictionaryBase" /> オブジェクトへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-269">Gets a value indicating whether access to a <see cref="T:System.Collections.DictionaryBase" /> object is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2001c-270">
            <see langword="true" /> オブジェクトへのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.DictionaryBase" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-270">
              <see langword="true" /> if access to the <see cref="T:System.Collections.DictionaryBase" /> object is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2001c-271">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-271">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-272">A<xref:System.Collections.DictionaryBase>オブジェクトは同期されません。</span><span class="sxs-lookup"><span data-stu-id="2001c-272">A <xref:System.Collections.DictionaryBase> object is not synchronized.</span></span> <span data-ttu-id="2001c-273">派生クラスでの同期バージョンを提供できる、<xref:System.Collections.DictionaryBase>クラスを使用して、<xref:System.Collections.ICollection.SyncRoot%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-273">Derived classes can provide a synchronized version of the <xref:System.Collections.DictionaryBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-274">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="2001c-274">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="2001c-275">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2001c-275">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="2001c-276">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="2001c-276">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-277">次のコード例を使用してコレクションをロックする方法を示しています、<xref:System.Collections.ICollection.SyncRoot%2A>列挙中にプロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-277">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/source2.cpp#3)]
 [!code-csharp[System.Collections.DictionaryBase#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/source2.cs#3)]
 [!code-vb[System.Collections.DictionaryBase#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/source2.vb#3)]  
  
 <span data-ttu-id="2001c-278">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2001c-278">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2001c-279">
            <see cref="T:System.Collections.DictionaryBase" /> オブジェクトへのアクセスを同期するために使用できるオブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-279">Gets an object that can be used to synchronize access to a <see cref="T:System.Collections.DictionaryBase" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2001c-280">
            <see cref="T:System.Collections.DictionaryBase" /> オブジェクトへのアクセスを同期するために使用できるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-280">An object that can be used to synchronize access to the <see cref="T:System.Collections.DictionaryBase" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-281">派生クラスの独自の同期バージョンを提供できます、<xref:System.Collections.DictionaryBase>クラスを使用して、<xref:System.Collections.ICollection.SyncRoot%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-281">Derived classes can provide their own synchronized version of the <xref:System.Collections.DictionaryBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="2001c-282">同期されたコードで操作を実行する必要があります、<xref:System.Collections.ICollection.SyncRoot%2A>のプロパティ、<xref:System.Collections.DictionaryBase>オブジェクト上で直接、<xref:System.Collections.DictionaryBase>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2001c-282">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> property of the <xref:System.Collections.DictionaryBase> object, not directly on the <xref:System.Collections.DictionaryBase> object.</span></span> <span data-ttu-id="2001c-283">これにより、他のオブジェクトから派生したコレクションを適切に操作できるようになります。</span><span class="sxs-lookup"><span data-stu-id="2001c-283">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="2001c-284">具体的には、同時に変更する可能性があるその他のスレッドと適切な同期を維持、<xref:System.Collections.DictionaryBase>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2001c-284">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.DictionaryBase> object.</span></span>  
  
 <span data-ttu-id="2001c-285">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="2001c-285">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="2001c-286">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2001c-286">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="2001c-287">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="2001c-287">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-288">次のコード例を使用してコレクションをロックする方法を示しています、<xref:System.Collections.ICollection.SyncRoot%2A>列挙中にプロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-288">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/source2.cpp#3)]
 [!code-csharp[System.Collections.DictionaryBase#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/source2.cs#3)]
 [!code-vb[System.Collections.DictionaryBase#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/source2.vb#3)]  
  
 <span data-ttu-id="2001c-289">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2001c-289">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
        <altmember cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Add">
      <MemberSignature Language="C#" Value="void IDictionary.Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As Object, value As Object) Implements IDictionary.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Add(System::Object ^ key, System::Object ^ value) = System::Collections::IDictionary::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-290">追加する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-290">The key of the element to add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="2001c-291">追加する要素の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-291">The value of the element to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-292">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.DictionaryBase" /> に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-292">Adds an element with the specified key and value into the <see cref="T:System.Collections.DictionaryBase" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-293">オブジェクトの状態とそのハッシュ コード値の相関関係がない必要があります通常しないキーとして使用、します。</span><span class="sxs-lookup"><span data-stu-id="2001c-293">An object that has no correlation between its state and its hash code value should typically not be used as the key.</span></span> <span data-ttu-id="2001c-294">たとえば、<xref:System.String>オブジェクトはより<xref:System.Text.StringBuilder>キーとして使用するためのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2001c-294">For example, <xref:System.String> objects are better than <xref:System.Text.StringBuilder> objects for use as keys.</span></span>  
  
 <span data-ttu-id="2001c-295">使用することも、<xref:System.Collections.IDictionary.Item%2A>にキーの値を設定して、新しい要素を追加するプロパティが存在しません、 <xref:System.Collections.DictionaryBase>。 たとえば、`myCollection["myNonexistentKey"] = myValue`します。</span><span class="sxs-lookup"><span data-stu-id="2001c-295">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.DictionaryBase>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="2001c-296">ただしで指定したキーが既に存在する場合、<xref:System.Collections.DictionaryBase>で、設定、<xref:System.Collections.IDictionary.Item%2A>プロパティには、古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="2001c-296">However, if the specified key already exists in the <xref:System.Collections.DictionaryBase>, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="2001c-297">これに対し、<xref:System.Collections.IDictionary.Add%2A>メソッドでは、既存の要素は変更しません。</span><span class="sxs-lookup"><span data-stu-id="2001c-297">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="2001c-298">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-298">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-299">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-299">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2001c-300">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-300">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2001c-301">同じキーを持つ要素が、<see cref="T:System.Collections.DictionaryBase" /> に既に存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-301">An element with the same key already exists in the <see cref="T:System.Collections.DictionaryBase" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2001c-302">
            <see cref="T:System.Collections.DictionaryBase" /> は読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-302">The <see cref="T:System.Collections.DictionaryBase" /> is read-only.</span>
          </span>
          <span data-ttu-id="2001c-303">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-303">-or-</span>
          </span>
          <span data-ttu-id="2001c-304">
            <see cref="T:System.Collections.DictionaryBase" /> は固定サイズです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-304">The <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
        <altmember cref="P:System.Collections.IDictionary.Item(System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Contains">
      <MemberSignature Language="C#" Value="bool IDictionary.Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IDictionary.Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (key As Object) As Boolean Implements IDictionary.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IDictionary.Contains(System::Object ^ key) = System::Collections::IDictionary::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-305">
            <see cref="T:System.Collections.DictionaryBase" /> 内で検索されるキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-305">The key to locate in the <see cref="T:System.Collections.DictionaryBase" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-306">
            <see cref="T:System.Collections.DictionaryBase" /> に特定のキーが格納されているかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-306">Determines whether the <see cref="T:System.Collections.DictionaryBase" /> contains a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2001c-307">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.DictionaryBase" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-307">
              <see langword="true" /> if the <see cref="T:System.Collections.DictionaryBase" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-308">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-308">This method is an O(1) operation.</span></span>  
  
 <span data-ttu-id="2001c-309">以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`key`を決定するかどうか`item`存在します。</span><span class="sxs-lookup"><span data-stu-id="2001c-309">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists.</span></span> <span data-ttu-id="2001c-310">以前のバージョンの .NET Framework では、この判断を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`key`パラメーター コレクション内のオブジェクトにします。</span><span class="sxs-lookup"><span data-stu-id="2001c-310">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `key` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-311">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-311">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2001c-312">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-312">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md">
          <span data-ttu-id="2001c-313">カルチャを認識しない文字列操作の実行</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-313">Performing Culture-Insensitive String Operations</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IDictionary.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IDictionary::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2001c-314">
            <see cref="T:System.Collections.DictionaryBase" /> オブジェクトが固定サイズかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-314">Gets a value indicating whether a <see cref="T:System.Collections.DictionaryBase" /> object has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2001c-315">
            <see cref="T:System.Collections.DictionaryBase" /> オブジェクトが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-315">
              <see langword="true" /> if the <see cref="T:System.Collections.DictionaryBase" /> object has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2001c-316">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-316">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-317">固定サイズのコレクションは、追加または削除できません要素のコレクションが作成されますが、既存の要素の変更を許可するが後。</span><span class="sxs-lookup"><span data-stu-id="2001c-317">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</span></span>  
  
 <span data-ttu-id="2001c-318">固定サイズのコレクションの追加と要素の削除を防止するラッパーは、コレクションは、します。そのため、追加または削除、要素を含む、基になるコレクションに変更された場合、固定サイズ コレクションそれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="2001c-318">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="2001c-319">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2001c-319">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IDictionary.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IDictionary::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2001c-320">
            <see cref="T:System.Collections.DictionaryBase" /> オブジェクトが読み取り専用かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-320">Gets a value indicating whether a <see cref="T:System.Collections.DictionaryBase" /> object is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2001c-321">
            <see cref="T:System.Collections.DictionaryBase" /> オブジェクトが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-321">
              <see langword="true" /> if the <see cref="T:System.Collections.DictionaryBase" /> object is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2001c-322">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-322">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-323">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="2001c-323">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="2001c-324">読み取り専用のコレクション、コレクションの変更を防止するラッパー コレクションそのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</span><span class="sxs-lookup"><span data-stu-id="2001c-324">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="2001c-325">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2001c-325">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionary.Item[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IDictionary.Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(key As Object) As Object Implements IDictionary.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IDictionary::Item[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-326">値を取得または設定する対象のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-326">The key whose value to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-327">指定されたキーに関連付けられている値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-327">Gets or sets the value associated with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2001c-328">指定されたキーに関連付けられている値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-328">The value associated with the specified key.</span>
          </span>
          <span data-ttu-id="2001c-329">指定したキーが見つからない場合、そのキーを取得しようとした場合は <see langword="null" /> が返され、そのキーを設定しようとした場合は、指定したキーを使用して新しい要素が作成されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-329">If the specified key is not found, attempting to get it returns <see langword="null" />, and attempting to set it creates a new element using the specified key.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-330">このプロパティでは、`myCollection[key]` という構文を使用して、コレクション内の特定の要素にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="2001c-330">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="2001c-331">使用することも、<xref:System.Collections.IDictionary.Item%2A>にキーの値を設定して、新しい要素を追加するプロパティが存在しません、 <xref:System.Collections.DictionaryBase>。 たとえば、`myCollection["myNonexistentKey"] = myValue`します。</span><span class="sxs-lookup"><span data-stu-id="2001c-331">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.DictionaryBase>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="2001c-332">ただしで指定したキーが既に存在する場合、<xref:System.Collections.DictionaryBase>で、設定、<xref:System.Collections.IDictionary.Item%2A>プロパティには、古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="2001c-332">However, if the specified key already exists in the <xref:System.Collections.DictionaryBase>, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="2001c-333">これに対し、<xref:System.Collections.IDictionary.Add%2A>メソッドでは、既存の要素は変更しません。</span><span class="sxs-lookup"><span data-stu-id="2001c-333">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="2001c-334">このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもします。</span><span class="sxs-lookup"><span data-stu-id="2001c-334">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-335">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-335">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2001c-336">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-336">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2001c-337">このプロパティが設定されていますが、<see cref="T:System.Collections.DictionaryBase" /> が読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-337">The property is set and the <see cref="T:System.Collections.DictionaryBase" /> is read-only.</span>
          </span>
          <span data-ttu-id="2001c-338">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-338">-or-</span>
          </span>
          <span data-ttu-id="2001c-339">このプロパティが設定されていますが、<paramref name="key" /> がコレクション内に存在しません。また、<see cref="T:System.Collections.DictionaryBase" /> が固定サイズです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-339">The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Keys">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection Implements IDictionary.Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System::Collections::IDictionary::Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2001c-340">
            <see cref="T:System.Collections.ICollection" /> オブジェクト内のキーを格納している <see cref="T:System.Collections.DictionaryBase" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-340">Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.DictionaryBase" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2001c-341">
            <see cref="T:System.Collections.ICollection" /> オブジェクト内のキーを格納している <see cref="T:System.Collections.DictionaryBase" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-341">An <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.DictionaryBase" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-342">内のキーの順序、<xref:System.Collections.ICollection>オブジェクトは、指定されていませんに関連付けられている値と同じ順序には、<xref:System.Collections.ICollection>によって返されるオブジェクト、<xref:System.Collections.IDictionary.Values%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-342">The order of the keys in the <xref:System.Collections.ICollection> object is unspecified, but is the same order as the associated values in the <xref:System.Collections.ICollection> object returned by the <xref:System.Collections.IDictionary.Values%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-343">返された<xref:System.Collections.ICollection>静的コピーではありません。 代わりに、、<xref:System.Collections.ICollection>は元のキーを逆参照<xref:System.Collections.DictionaryBase>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2001c-343">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.DictionaryBase> object.</span></span> <span data-ttu-id="2001c-344">そのため、変更、<xref:System.Collections.DictionaryBase>反映されるまでに続行、返される<xref:System.Collections.ICollection>します。</span><span class="sxs-lookup"><span data-stu-id="2001c-344">Therefore, changes to the <xref:System.Collections.DictionaryBase> continue to be reflected in the returned <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="2001c-345">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2001c-345">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-346">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、 <xref:System.String.Length%2A> 5 文字以下のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-346">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> property of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.IDictionary.Values" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Remove">
      <MemberSignature Language="C#" Value="void IDictionary.Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (key As Object) Implements IDictionary.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Remove(System::Object ^ key) = System::Collections::IDictionary::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="2001c-347">削除する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-347">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2001c-348">指定したキーを持つ要素を <see cref="T:System.Collections.DictionaryBase" /> から削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-348">Removes the element with the specified key from the <see cref="T:System.Collections.DictionaryBase" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-349">場合、<xref:System.Collections.DictionaryBase>指定のキーを持つ要素が含まれていない、<xref:System.Collections.DictionaryBase>は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2001c-349">If the <xref:System.Collections.DictionaryBase> does not contain an element with the specified key, the <xref:System.Collections.DictionaryBase> remains unchanged.</span></span> <span data-ttu-id="2001c-350">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="2001c-350">No exception is thrown.</span></span>  
  
 <span data-ttu-id="2001c-351">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-351">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-352">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、<xref:System.String.Length%2A>以下の 5 文字です。</span><span class="sxs-lookup"><span data-stu-id="2001c-352">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2001c-353">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-353">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2001c-354">
            <see cref="T:System.Collections.DictionaryBase" /> は読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-354">The <see cref="T:System.Collections.DictionaryBase" /> is read-only.</span>
          </span>
          <span data-ttu-id="2001c-355">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-355">-or-</span>
          </span>
          <span data-ttu-id="2001c-356">
            <see cref="T:System.Collections.DictionaryBase" /> は固定サイズです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-356">The <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md">
          <span data-ttu-id="2001c-357">カルチャを認識しない文字列操作の実行</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-357">Performing Culture-Insensitive String Operations</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Values">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection Implements IDictionary.Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System::Collections::IDictionary::Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2001c-358">
            <see cref="T:System.Collections.ICollection" /> オブジェクト内の値を格納している <see cref="T:System.Collections.DictionaryBase" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-358">Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.DictionaryBase" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2001c-359">
            <see cref="T:System.Collections.ICollection" /> オブジェクト内の値を格納している <see cref="T:System.Collections.DictionaryBase" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-359">An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.DictionaryBase" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-360">内の値の順序、<xref:System.Collections.ICollection>オブジェクトは指定しませんに関連付けられているキーと同じ順序には、<xref:System.Collections.ICollection>によって返されるオブジェクト、<xref:System.Collections.IDictionary.Keys%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-360">The order of the values in the <xref:System.Collections.ICollection> object is unspecified, but is the same order as the associated keys in the <xref:System.Collections.ICollection> object returned by the <xref:System.Collections.IDictionary.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="2001c-361">返された<xref:System.Collections.ICollection>静的コピーではありません。 代わりに、、<xref:System.Collections.ICollection>は元の値を逆参照<xref:System.Collections.DictionaryBase>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2001c-361">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.DictionaryBase> object.</span></span> <span data-ttu-id="2001c-362">そのため、変更、<xref:System.Collections.DictionaryBase>反映されるまでに続行、返される<xref:System.Collections.ICollection>します。</span><span class="sxs-lookup"><span data-stu-id="2001c-362">Therefore, changes to the <xref:System.Collections.DictionaryBase> continue to be reflected in the returned <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="2001c-363">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2001c-363">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2001c-364">次のコード例の実装、<xref:System.Collections.DictionaryBase>クラスし、その実装を使用してのディクショナリを作成する<xref:System.String>キーと値を持つ、 <xref:System.String.Length%2A> 5 文字以下のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="2001c-364">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> property of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.IDictionary.Keys" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2001c-365">
            <see cref="T:System.Collections.DictionaryBase" /> を反復処理する <see cref="T:System.Collections.IEnumerator" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-365">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.DictionaryBase" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2001c-366">
            <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.DictionaryBase" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2001c-366">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.DictionaryBase" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2001c-367">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="2001c-367">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="2001c-368">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2001c-368">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="2001c-369">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2001c-369">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="2001c-370">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="2001c-370">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="2001c-371"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="2001c-371"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="2001c-372">この位置で、呼び出す<xref:System.Collections.IEnumerator.Current%2A>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2001c-372">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="2001c-373">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="2001c-373">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="2001c-374"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="2001c-374"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="2001c-375"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="2001c-375"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="2001c-376">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="2001c-376">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="2001c-377">この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="2001c-377">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="2001c-378">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`を呼び出すと、<xref:System.Collections.IEnumerator.Current%2A>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2001c-378">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="2001c-379"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2001c-379">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="2001c-380">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="2001c-380">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="2001c-381">無効になり、次の呼び出しは変更を追加するなど、コレクション変更、または要素を削除するには、列挙子が不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>します。</span><span class="sxs-lookup"><span data-stu-id="2001c-381">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="2001c-382">間に、コレクションが変更された場合<xref:System.Collections.IEnumerator.MoveNext%2A>と<xref:System.Collections.IEnumerator.Current%2A>、<xref:System.Collections.IEnumerator.Current%2A>列挙子が既に無効になっている場合でもに設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="2001c-382">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="2001c-383">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="2001c-383">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="2001c-384">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2001c-384">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="2001c-385">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="2001c-385">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="2001c-386">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2001c-386">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>