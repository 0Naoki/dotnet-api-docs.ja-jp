<Type Name="Queue" FullName="System.Collections.Queue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="55d6be00e6a078b279a0a5ba7de350d9d7004b69" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52591935" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Queue : ICloneable, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Queue" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue&#xA;Implements ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class Queue : ICloneable, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Queue = class&#xA;    interface ICollection&#xA;    interface ICloneable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Queue/QueueDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c65ee-101">オブジェクトの先入れ先出しコレクションを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c65ee-101">Represents a first-in, first-out collection of objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="c65ee-102">このクラスは、循環を配列として、キューを実装します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-102">This class implements a queue as a circular array.</span></span> <span data-ttu-id="c65ee-103">オブジェクトに格納されている、<xref:System.Collections.Queue>が一方の end で挿入され、その他から削除します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-103">Objects stored in a <xref:System.Collections.Queue> are inserted at one end and removed from the other.</span></span>  

> [!IMPORTANT]
>  <span data-ttu-id="c65ee-104">使用することをお勧めしません、`Queue`クラスの新しい開発します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-104">We don't recommend that you use the `Queue` class for new development.</span></span> <span data-ttu-id="c65ee-105">ジェネリックを使用すること勧め代わりに、<xref:System.Collections.Generic.Queue%601>クラス。</span><span class="sxs-lookup"><span data-stu-id="c65ee-105">Instead, we recommend that you use the generic <xref:System.Collections.Generic.Queue%601> class.</span></span> <span data-ttu-id="c65ee-106">詳細については、次を参照してください。[非ジェネリック コレクションを使用してはならない](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md)GitHub でします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-106">For more information, see [Non-generic collections shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) on GitHub.</span></span>

 <span data-ttu-id="c65ee-107">キューおよびスタックは便利な情報の一時的なストレージが必要な場合つまり、可能性がある場合の値を取得後に要素を破棄します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-107">Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="c65ee-108">使用<xref:System.Collections.Queue>かどうかは、コレクションに保存されていることと同じ順序で情報にアクセスする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-108">Use <xref:System.Collections.Queue> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="c65ee-109">使用<xref:System.Collections.Stack>逆の順序で情報にアクセスする必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="c65ee-109">Use <xref:System.Collections.Stack> if you need to access the information in reverse order.</span></span> <span data-ttu-id="c65ee-110">使用<xref:System.Collections.Concurrent.ConcurrentQueue%601>または<xref:System.Collections.Concurrent.ConcurrentStack%601>同時に複数のスレッドからコレクションにアクセスする必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="c65ee-110">Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="c65ee-111">次の 3 つの主な操作を実行できる、<xref:System.Collections.Queue>とその要素。</span><span class="sxs-lookup"><span data-stu-id="c65ee-111">Three main operations can be performed on a <xref:System.Collections.Queue> and its elements:</span></span>  
  
-   <span data-ttu-id="c65ee-112"><xref:System.Collections.Queue.Enqueue%2A> 末尾に要素を追加、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-112"><xref:System.Collections.Queue.Enqueue%2A> adds an element to the end of the <xref:System.Collections.Queue>.</span></span>  
  
-   <span data-ttu-id="c65ee-113"><xref:System.Collections.Queue.Dequeue%2A> 先頭から最も古い要素を削除、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-113"><xref:System.Collections.Queue.Dequeue%2A> removes the oldest element from the start of the <xref:System.Collections.Queue>.</span></span>  
  
-   <span data-ttu-id="c65ee-114"><xref:System.Collections.Queue.Peek%2A> 先頭にある最も古い要素を返します、<xref:System.Collections.Queue>からは削除されませんが、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-114"><xref:System.Collections.Queue.Peek%2A> returns the oldest element that is at the start of the <xref:System.Collections.Queue> but does not remove it from the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="c65ee-115">容量を<xref:System.Collections.Queue>要素の数が、<xref:System.Collections.Queue>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-115">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span> <span data-ttu-id="c65ee-116">要素が追加される、<xref:System.Collections.Queue>容量が増やされます自動的に再割り当て、必要に応じて。</span><span class="sxs-lookup"><span data-stu-id="c65ee-116">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="c65ee-117">呼び出すことによって、容量を削減できる<xref:System.Collections.Queue.TrimToSize%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-117">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="c65ee-118">増加率より大きな容量が必要な場合に、現在の容量を乗算する数です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-118">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="c65ee-119">増加率を決定時に、<xref:System.Collections.Queue>を構築します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-119">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="c65ee-120">既定の増加率は 2.0 です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-120">The default growth factor is 2.0.</span></span> <span data-ttu-id="c65ee-121">容量、<xref:System.Collections.Queue>少なくとも少なくともの増加率に関係なく、4 常に高くなります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-121">The capacity of the <xref:System.Collections.Queue> will always increase by at least a minimum of four, regardless of the growth factor.</span></span> <span data-ttu-id="c65ee-122">たとえば、 <xref:System.Collections.Queue> 1.0 の増加率を高くなります。 常に容量で 4 より大きな容量が必要な場合。</span><span class="sxs-lookup"><span data-stu-id="c65ee-122">For example, a <xref:System.Collections.Queue> with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.</span></span>  
  
 <span data-ttu-id="c65ee-123"><xref:System.Collections.Queue> 受け入れる`null`有効な値としてでき、重複する要素。</span><span class="sxs-lookup"><span data-stu-id="c65ee-123"><xref:System.Collections.Queue> accepts `null` as a valid value and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="c65ee-124">このコレクションのジェネリックのバージョンを参照してください。 <xref:System.Collections.Generic.Queue%601?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c65ee-124">For the generic version of this collection, see <xref:System.Collections.Generic.Queue%601?displayProperty=nameWithType></span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c65ee-125">次の例を作成し、値を追加する方法を示しています、<xref:System.Collections.Queue>とその値を印刷する方法。</span><span class="sxs-lookup"><span data-stu-id="c65ee-125">The following example shows how to create and add values to a <xref:System.Collections.Queue> and how to print out its values.</span></span>  
  
 [!code-cpp[Classic Queue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c65ee-126">パブリック静的 (<see langword="Shared" /> Visual Basic で) この型のメンバーはスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c65ee-126">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="c65ee-127">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c65ee-127">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="c65ee-128">スレッド セーフを保証するために、 <see cref="T:System.Collections.Queue" />、によって返されるラッパーを通じて、すべての操作を行う必要がある、<see cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />メソッド。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c65ee-128">To guarantee the thread safety of the <see cref="T:System.Collections.Queue" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" /> method.</span>
      </span>
      <span data-ttu-id="c65ee-129">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c65ee-129">Enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="c65ee-130">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c65ee-130">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span>
      </span>
      <span data-ttu-id="c65ee-131">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c65ee-131">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Collections.Generic.Queue`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-132">
            <see cref="T:System.Collections.Queue" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-132">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-133">空で、既定の初期量を備え、既定の増加率を使用する、<see cref="T:System.Collections.Queue" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-133">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the default initial capacity, and uses the default growth factor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-134">容量を<xref:System.Collections.Queue>要素の数が、<xref:System.Collections.Queue>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-134">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="c65ee-135">要素が追加される、<xref:System.Collections.Queue>容量が増やされます自動的に再割り当て、必要に応じて。</span><span class="sxs-lookup"><span data-stu-id="c65ee-135">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="c65ee-136">呼び出すことによって、容量を削減できる<xref:System.Collections.Queue.TrimToSize%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-136">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="c65ee-137">増加率より大きな容量が必要な場合に、現在の容量を乗算する数です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-137">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="c65ee-138">増加率を決定時に、<xref:System.Collections.Queue>を構築します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-138">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="c65ee-139">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-139">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (System.Collections.ICollection col);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ICollection col) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (col As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(System::Collections::ICollection ^ col);" />
      <MemberSignature Language="F#" Value="new System.Collections.Queue : System.Collections.ICollection -&gt; System.Collections.Queue" Usage="new System.Collections.Queue col" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="col" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="col">
          <span data-ttu-id="c65ee-140">要素のコピー元の <see cref="T:System.Collections.ICollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-140">The <see cref="T:System.Collections.ICollection" /> to copy elements from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c65ee-141">指定したコレクションからコピーした要素を格納し、コピーした要素の数と同じ初期量を備え、既定の増加率を使用する、<see cref="T:System.Collections.Queue" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-141">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-142">容量を<xref:System.Collections.Queue>要素の数が、<xref:System.Collections.Queue>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-142">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="c65ee-143">要素が追加される、<xref:System.Collections.Queue>容量が増やされます自動的に再割り当て、必要に応じて。</span><span class="sxs-lookup"><span data-stu-id="c65ee-143">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="c65ee-144">呼び出すことによって、容量を削減できる<xref:System.Collections.Queue.TrimToSize%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-144">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="c65ee-145">増加率より大きな容量が必要な場合に、現在の容量を乗算する数です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-145">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="c65ee-146">増加率を決定時に、<xref:System.Collections.Queue>を構築します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-146">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="c65ee-147">要素の上にコピー、<xref:System.Collections.Queue>によって読み取られるときと同じ順序で、<xref:System.Collections.IEnumerator>の<xref:System.Collections.ICollection>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-147">The elements are copied onto the <xref:System.Collections.Queue> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="c65ee-148">このコンス トラクターは、O (`n`) 操作、`n`内の要素の数は、`col`します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-148">This constructor is an O(`n`) operation, where `n` is the number of elements in `col`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c65ee-149">
            <paramref name="col" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-149">
              <paramref name="col" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Queue : int -&gt; System.Collections.Queue" Usage="new System.Collections.Queue capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="c65ee-150">
            <see cref="T:System.Collections.Queue" /> が格納できる要素数の初期値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-150">The initial number of elements that the <see cref="T:System.Collections.Queue" /> can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c65ee-151">空で、指定した初期量を備え、既定の増加率を使用する、<see cref="T:System.Collections.Queue" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-151">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the specified initial capacity, and uses the default growth factor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-152">容量を<xref:System.Collections.Queue>要素の数が、<xref:System.Collections.Queue>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-152">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="c65ee-153">要素が追加される、<xref:System.Collections.Queue>容量が増やされます自動的に再割り当て、必要に応じて。</span><span class="sxs-lookup"><span data-stu-id="c65ee-153">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="c65ee-154">呼び出すことによって、容量を削減できる<xref:System.Collections.Queue.TrimToSize%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-154">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="c65ee-155">増加率より大きな容量が必要な場合に、現在の容量を乗算する数です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-155">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="c65ee-156">増加率を決定時に、<xref:System.Collections.Queue>を構築します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-156">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="c65ee-157">数の要素を追加するときにサイズ変更操作を実行する必要はありませんの初期量を指定する場合は、コレクションのサイズを推定することができます、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-157">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="c65ee-158">このコンス トラクターは、O (`n`) 操作、`n`は`capacity`します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-158">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c65ee-159">
            <paramref name="capacity" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-159">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity, float growFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, float32 growFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, growFactor As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity, float growFactor);" />
      <MemberSignature Language="F#" Value="new System.Collections.Queue : int * single -&gt; System.Collections.Queue" Usage="new System.Collections.Queue (capacity, growFactor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="growFactor" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="c65ee-160">
            <see cref="T:System.Collections.Queue" /> が格納できる要素数の初期値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-160">The initial number of elements that the <see cref="T:System.Collections.Queue" /> can contain.</span>
          </span>
        </param>
        <param name="growFactor">
          <span data-ttu-id="c65ee-161">
            <see cref="T:System.Collections.Queue" /> の容量を拡張するときに使用する係数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-161">The factor by which the capacity of the <see cref="T:System.Collections.Queue" /> is expanded.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c65ee-162">空で、指定した初期量を備え、指定した増加率を使用する、<see cref="T:System.Collections.Queue" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-162">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the specified initial capacity, and uses the specified growth factor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-163">容量を<xref:System.Collections.Queue>要素の数が、<xref:System.Collections.Queue>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-163">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="c65ee-164">要素が追加される、<xref:System.Collections.Queue>容量が増やされます自動的に再割り当て、必要に応じて。</span><span class="sxs-lookup"><span data-stu-id="c65ee-164">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="c65ee-165">呼び出すことによって、容量を削減できる<xref:System.Collections.Queue.TrimToSize%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-165">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="c65ee-166">増加率より大きな容量が必要な場合に、現在の容量を乗算する数です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-166">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="c65ee-167">増加率を決定時に、<xref:System.Collections.Queue>を構築します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-167">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="c65ee-168">容量、 <xref:System.Collections.Queue> 、最小値、増加率に関係なく常に高くなります。 1.0 の増加率を妨げません、<xref:System.Collections.Queue>サイズが大きくなります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-168">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="c65ee-169">数の要素を追加するときにサイズ変更操作を実行する必要はありませんの初期量を指定する場合は、コレクションのサイズを推定することができます、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-169">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="c65ee-170">このコンス トラクターは、O (`n`) 操作、`n`は`capacity`します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-170">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c65ee-171">
            <paramref name="capacity" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-171">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c65ee-172">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-172">-or-</span>
          </span>
          <span data-ttu-id="c65ee-173">
            <paramref name="growFactor" /> が 1.0 未満であるか、または 10.0 を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-173">
              <paramref name="growFactor" /> is less than 1.0 or greater than 10.0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="queue.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-174">
            <see cref="T:System.Collections.Queue" /> からすべてのオブジェクトを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-174">Removes all objects from the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-175"><xref:System.Collections.Queue.Count%2A> 0 に設定し、コレクションの要素からその他のオブジェクトへの参照も解放します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-175"><xref:System.Collections.Queue.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="c65ee-176">容量は変更されません。</span><span class="sxs-lookup"><span data-stu-id="c65ee-176">The capacity remains unchanged.</span></span> <span data-ttu-id="c65ee-177">容量をリセットする、 <xref:System.Collections.Queue>、呼び出す<xref:System.Collections.Queue.TrimToSize%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-177">To reset the capacity of the <xref:System.Collections.Queue>, call <xref:System.Collections.Queue.TrimToSize%2A>.</span></span> <span data-ttu-id="c65ee-178">空のトリミング<xref:System.Collections.Queue>の容量設定、<xref:System.Collections.Queue>を既定の容量。</span><span class="sxs-lookup"><span data-stu-id="c65ee-178">Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.</span></span>  
  
 <span data-ttu-id="c65ee-179">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.Queue.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-179">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c65ee-180">次の例の値をクリアする方法を示しています、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-180">The following example shows how to clear the values of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Queue.TrimToSize" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="queue.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-181">
            <see cref="T:System.Collections.Queue" /> の簡易コピーを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-181">Creates a shallow copy of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c65ee-182">
            <see cref="T:System.Collections.Queue" /> の簡易コピー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-182">A shallow copy of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-183">コレクションの簡易コピーは、参照型または値型ですが、参照先のオブジェクトはコピーしないかどうか、コレクションの要素のみをコピーします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-183">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</span></span> <span data-ttu-id="c65ee-184">新しいコレクションの参照を元のコレクション内の参照が指す同じオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-184">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="c65ee-185">これに対し、コレクションのディープ コピーを要素をコピーして、要素が直接または間接的に参照するすべて。</span><span class="sxs-lookup"><span data-stu-id="c65ee-185">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="c65ee-186">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.Queue.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-186">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="queue.Contains obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="c65ee-187">
            <see cref="T:System.Collections.Queue" /> 内で検索される <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-187">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.Queue" />.</span>
          </span>
          <span data-ttu-id="c65ee-188">値として <see langword="null" /> を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-188">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c65ee-189">ある要素が <see cref="T:System.Collections.Queue" /> 内に存在するかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-189">Determines whether an element is in the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c65ee-190">
            <see langword="true" /> が <paramref name="obj" /> に存在する場合は <see cref="T:System.Collections.Queue" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-190">
              <see langword="true" /> if <paramref name="obj" /> is found in the <see cref="T:System.Collections.Queue" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-191">このメソッドを呼び出すことで等しいかどうかを判断<xref:System.Object.Equals%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-191">This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="c65ee-192">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作、`n`は<xref:System.Collections.Queue.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-192">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 <span data-ttu-id="c65ee-193">以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`obj`を決定するかどうか`item`存在します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-193">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `obj` to determine whether `item` exists.</span></span> <span data-ttu-id="c65ee-194">以前のバージョンの .NET Framework では、この判断を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`obj`パラメーター コレクション内のオブジェクトにします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-194">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `obj` parameter on the objects in the collection.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md">
          <span data-ttu-id="c65ee-195">カルチャを認識しない文字列操作の実行</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-195">Performing Culture-Insensitive String Operations</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="queue.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="c65ee-196">
            <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Queue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-196">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Queue" />.</span>
          </span>
          <span data-ttu-id="c65ee-197">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-197">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="c65ee-198">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-198">The zero-based index in <paramref name="array" /> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c65ee-199">
            <see cref="T:System.Collections.Queue" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-199">Copies the <see cref="T:System.Collections.Queue" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-200">要素のコピー先は、<xref:System.Array>を列挙子が反復処理と同じ順序で、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-200">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="c65ee-201">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.Queue.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-201">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c65ee-202">次の例をコピーする方法を示しています、 <xref:System.Collections.Queue> 1 次元配列にします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-202">The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.</span></span>  
  
 [!code-cpp[Classic Queue.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c65ee-203">
            <paramref name="array" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-203">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c65ee-204">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-204">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c65ee-205">
            <paramref name="array" /> が多次元です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-205">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="c65ee-206">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-206">-or-</span>
          </span>
          <span data-ttu-id="c65ee-207">コピー元の <see cref="T:System.Collections.Queue" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-207">The number of elements in the source <see cref="T:System.Collections.Queue" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="c65ee-208">コピー元の <see cref="T:System.Collections.Queue" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-208">The type of the source <see cref="T:System.Collections.Queue" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Queue.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-209">
            <see cref="T:System.Collections.Queue" /> に格納されている要素の数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-209">Gets the number of elements contained in the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c65ee-210">
            <see cref="T:System.Collections.Queue" /> に格納されている要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-210">The number of elements contained in the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-211">容量を<xref:System.Collections.Queue>は要素の数を<xref:System.Collections.Queue>格納できます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-211">The capacity of a <xref:System.Collections.Queue> is the number of elements that the <xref:System.Collections.Queue> can store.</span></span> <span data-ttu-id="c65ee-212"><xref:System.Collections.Queue.Count%2A> 実際には要素の数が、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-212"><xref:System.Collections.Queue.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="c65ee-213">容量を<xref:System.Collections.Queue>が常により大きいか等しい<xref:System.Collections.Queue.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-213">The capacity of a <xref:System.Collections.Queue> is always greater than or equal to <xref:System.Collections.Queue.Count%2A>.</span></span> <span data-ttu-id="c65ee-214">場合<xref:System.Collections.Queue.Count%2A>要素を追加するときに容量を超える、容量は変更前の要素をコピーして、新しい要素を追加する前に、内部配列を再割り当てを自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-214">If <xref:System.Collections.Queue.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span> <span data-ttu-id="c65ee-215">新しい容量は、増加率は、これは、現在の容量を掛けることによって決まります決定するときに、<xref:System.Collections.Queue>を構築します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-215">The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="c65ee-216">容量、 <xref:System.Collections.Queue> 、最小値、増加率に関係なく常に高くなります。 1.0 の増加率を妨げません、<xref:System.Collections.Queue>サイズが大きくなります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-216">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="c65ee-217">呼び出すことによって、容量を削減できる<xref:System.Collections.Queue.TrimToSize%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-217">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="c65ee-218">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-218">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public virtual object Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Dequeue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Dequeue();" />
      <MemberSignature Language="F#" Value="abstract member Dequeue : unit -&gt; obj&#xA;override this.Dequeue : unit -&gt; obj" Usage="queue.Dequeue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-219">
            <see cref="T:System.Collections.Queue" /> の先頭にあるオブジェクトを削除し、返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-219">Removes and returns the object at the beginning of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c65ee-220">
            <see cref="T:System.Collections.Queue" /> の先頭から削除されたオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-220">The object that is removed from the beginning of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-221">このメソッドは <xref:System.Collections.Queue.Peek%2A> メソッドに類似していますが、<xref:System.Collections.Queue.Peek%2A> は <xref:System.Collections.Queue> を変更しません。</span><span class="sxs-lookup"><span data-stu-id="c65ee-221">This method is similar to the <xref:System.Collections.Queue.Peek%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="c65ee-222">`null` 追加できる、<xref:System.Collections.Queue>値として。</span><span class="sxs-lookup"><span data-stu-id="c65ee-222">`null` can be added to the <xref:System.Collections.Queue> as a value.</span></span> <span data-ttu-id="c65ee-223">Null 値との終了を区別する、 <xref:System.Collections.Queue>、確認、<xref:System.Collections.Queue.Count%2A>プロパティまたは catch、 <xref:System.InvalidOperationException>、ときにスローされる、<xref:System.Collections.Queue>が空です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-223">To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.</span></span>  
  
 <span data-ttu-id="c65ee-224">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-224">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c65ee-225">次の例では、要素を追加する方法を示しています、<xref:System.Collections.Queue>から要素を削除、 <xref:System.Collections.Queue>、または先頭の要素を表示、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-225">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c65ee-226">
            <see cref="T:System.Collections.Queue" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-226">The <see cref="T:System.Collections.Queue" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Queue.Enqueue(System.Object)" />
        <altmember cref="M:System.Collections.Queue.Peek" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public virtual void Enqueue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enqueue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Enqueue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Enqueue (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Enqueue(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Enqueue : obj -&gt; unit&#xA;override this.Enqueue : obj -&gt; unit" Usage="queue.Enqueue obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="c65ee-227">
            <see cref="T:System.Collections.Queue" /> に追加するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-227">The object to add to the <see cref="T:System.Collections.Queue" />.</span>
          </span>
          <span data-ttu-id="c65ee-228">値として <see langword="null" /> を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-228">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c65ee-229">
            <see cref="T:System.Collections.Queue" /> の末尾にオブジェクトを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-229">Adds an object to the end of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-230">容量を<xref:System.Collections.Queue>要素の数が、<xref:System.Collections.Queue>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-230">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="c65ee-231">要素が追加される、<xref:System.Collections.Queue>容量が増やされます自動的に再割り当て、必要に応じて。</span><span class="sxs-lookup"><span data-stu-id="c65ee-231">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="c65ee-232">呼び出すことによって、容量を削減できる<xref:System.Collections.Queue.TrimToSize%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-232">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="c65ee-233">増加率より大きな容量が必要な場合に、現在の容量を乗算する数です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-233">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="c65ee-234">増加率を決定時に、<xref:System.Collections.Queue>を構築します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-234">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="c65ee-235">容量、 <xref:System.Collections.Queue> 、最小値、増加率に関係なく常に高くなります。 1.0 の増加率を妨げません、<xref:System.Collections.Queue>サイズが大きくなります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-235">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="c65ee-236">場合<xref:System.Collections.Queue.Count%2A>が小さい内部配列の容量よりもこのメソッドは、o (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="c65ee-236">If <xref:System.Collections.Queue.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation.</span></span> <span data-ttu-id="c65ee-237">を内部配列が、新しい要素を対応するために再割り当てする必要がある場合、このメソッドは、O をなります (`n`) 操作、`n`は<xref:System.Collections.Queue.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-237">If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c65ee-238">次の例では、要素を追加する方法を示しています、<xref:System.Collections.Queue>から要素を削除、 <xref:System.Collections.Queue>、または先頭の要素を表示、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-238">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Queue.Dequeue" />
        <altmember cref="M:System.Collections.Queue.Peek" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="queue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-239">
            <see cref="T:System.Collections.Queue" /> を反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-239">Returns an enumerator that iterates through the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c65ee-240">
            <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.Queue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-240">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-241">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-241">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="c65ee-242">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-242">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="c65ee-243">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="c65ee-243">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="c65ee-244">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-244">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="c65ee-245"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-245"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="c65ee-246">この位置では、<xref:System.Collections.IEnumerator.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-246">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="c65ee-247">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-247">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="c65ee-248"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-248"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="c65ee-249"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-249"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="c65ee-250">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-250">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="c65ee-251">この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-251">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="c65ee-252">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="c65ee-252">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="c65ee-253"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-253">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="c65ee-254">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-254">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="c65ee-255">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-255">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="c65ee-256">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="c65ee-256">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="c65ee-257">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-257">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="c65ee-258">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-258">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="c65ee-259">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-259">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.Queue.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-260">
            <see cref="T:System.Collections.Queue" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-260">Gets a value indicating whether access to the <see cref="T:System.Collections.Queue" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c65ee-261">
            <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.Queue" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-261">
              <see langword="true" /> if access to the <see cref="T:System.Collections.Queue" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c65ee-262">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-262">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-263">スレッド セーフを保証するために、 <xref:System.Collections.Queue>、によって返されるラッパーを通じて、すべての操作を行う必要がある、<xref:System.Collections.Queue.Synchronized%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="c65ee-263">To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through the wrapper returned by the <xref:System.Collections.Queue.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="c65ee-264">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="c65ee-264">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="c65ee-265">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-265">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="c65ee-266">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-266">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c65ee-267">次のコード例を使用してコレクションをロックする方法を示しています、<xref:System.Collections.Queue.SyncRoot%2A>列挙中にします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-267">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="c65ee-268">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-268">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="c65ee-269">次の例は、同期する方法を示します、 <xref:System.Collections.Queue>、かどうかを<xref:System.Collections.Queue>が同期され、同期を使用して、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-269">The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized, and use a synchronized <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Queue.SyncRoot" />
        <altmember cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public virtual object Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Peek () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Peek();" />
      <MemberSignature Language="F#" Value="abstract member Peek : unit -&gt; obj&#xA;override this.Peek : unit -&gt; obj" Usage="queue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-270">
            <see cref="T:System.Collections.Queue" /> の先頭にあるオブジェクトを削除せずに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-270">Returns the object at the beginning of the <see cref="T:System.Collections.Queue" /> without removing it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c65ee-271">
            <see cref="T:System.Collections.Queue" /> の先頭にあるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-271">The object at the beginning of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-272">このメソッドは <xref:System.Collections.Queue.Dequeue%2A> メソッドに類似していますが、<xref:System.Collections.Queue.Peek%2A> は <xref:System.Collections.Queue> を変更しません。</span><span class="sxs-lookup"><span data-stu-id="c65ee-272">This method is similar to the <xref:System.Collections.Queue.Dequeue%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="c65ee-273">`null` 追加できる、<xref:System.Collections.Queue>値として。</span><span class="sxs-lookup"><span data-stu-id="c65ee-273">`null` can be added to the <xref:System.Collections.Queue> as a value.</span></span> <span data-ttu-id="c65ee-274">Null 値との終了を区別する、 <xref:System.Collections.Queue>、確認、<xref:System.Collections.Queue.Count%2A>プロパティまたは catch、 <xref:System.InvalidOperationException>、ときにスローされる、<xref:System.Collections.Queue>が空です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-274">To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.</span></span>  
  
 <span data-ttu-id="c65ee-275">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-275">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c65ee-276">次の例では、要素を追加する方法を示しています、<xref:System.Collections.Queue>から要素を削除、 <xref:System.Collections.Queue>、または先頭の要素を表示、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-276">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c65ee-277">
            <see cref="T:System.Collections.Queue" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-277">The <see cref="T:System.Collections.Queue" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Queue.Enqueue(System.Object)" />
        <altmember cref="M:System.Collections.Queue.Dequeue" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.Queue Synchronized (System.Collections.Queue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Queue Synchronized(class System.Collections.Queue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Queue ^ Synchronized(System::Collections::Queue ^ queue);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Collections.Queue -&gt; System.Collections.Queue" Usage="System.Collections.Queue.Synchronized queue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Queue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="System.Collections.Queue" />
      </Parameters>
      <Docs>
        <param name="queue">
          <span data-ttu-id="c65ee-278">同期する <see cref="T:System.Collections.Queue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-278">The <see cref="T:System.Collections.Queue" /> to synchronize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c65ee-279">元のキューをラップする、スレッド セーフである新しい <see cref="T:System.Collections.Queue" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-279">Returns a new <see cref="T:System.Collections.Queue" /> that wraps the original queue, and is thread safe.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c65ee-280">同期されている (スレッド セーフな) <see cref="T:System.Collections.Queue" /> ラッパー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-280">A <see cref="T:System.Collections.Queue" /> wrapper that is synchronized (thread safe).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-281">このメソッドによって返されるラッパーは、それがスレッド セーフ方式で実行されるため、操作を実行する前に、キューをロックします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-281">The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.</span></span>  
  
 <span data-ttu-id="c65ee-282">スレッド セーフを保証するために、 <xref:System.Collections.Queue>、このラッパーのみを通じてすべての操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-282">To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through this wrapper only.</span></span>  
  
 <span data-ttu-id="c65ee-283">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="c65ee-283">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="c65ee-284">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-284">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="c65ee-285">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-285">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c65ee-286">次のコード例を使用してコレクションをロックする方法を示しています、<xref:System.Collections.Queue.SyncRoot%2A>列挙中にします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-286">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="c65ee-287">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="c65ee-287">This method is an O(1) operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="c65ee-288">次の例は、同期する方法を示します、 <xref:System.Collections.Queue>、かどうかを<xref:System.Collections.Queue>が同期され、同期を使用して、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-288">The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized and use a synchronized <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c65ee-289">
            <paramref name="queue" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-289">
              <paramref name="queue" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Queue.IsSynchronized" />
        <altmember cref="P:System.Collections.Queue.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.Queue.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-290">
            <see cref="T:System.Collections.Queue" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-290">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c65ee-291">
            <see cref="T:System.Collections.Queue" /> へのアクセスを同期するために使用できるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-291">An object that can be used to synchronize access to the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-292">同期バージョンを作成する、<xref:System.Collections.Queue>を使用して、<xref:System.Collections.Queue.Synchronized%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="c65ee-292">To create a synchronized version of the <xref:System.Collections.Queue>, use the <xref:System.Collections.Queue.Synchronized%2A> method.</span></span> <span data-ttu-id="c65ee-293">ただし、派生クラスは、独自の同期バージョンを提供できます、<xref:System.Collections.Queue>を使用して、<xref:System.Collections.Queue.SyncRoot%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="c65ee-293">However, derived classes can provide their own synchronized version of the <xref:System.Collections.Queue> using the <xref:System.Collections.Queue.SyncRoot%2A> property.</span></span> <span data-ttu-id="c65ee-294">同期されたコードで操作を実行する必要があります、<xref:System.Collections.Queue.SyncRoot%2A>の<xref:System.Collections.Queue>、上で直接、<xref:System.Collections.Queue>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-294">The synchronizing code must perform operations on the <xref:System.Collections.Queue.SyncRoot%2A> of the <xref:System.Collections.Queue>, not directly on the <xref:System.Collections.Queue>.</span></span> <span data-ttu-id="c65ee-295">これにより、他のオブジェクトから派生したコレクションを適切に操作できるようになります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-295">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="c65ee-296">具体的には、同時に変更する可能性があるその他のスレッドと適切な同期を維持、<xref:System.Collections.Queue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c65ee-296">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Queue> object.</span></span>  
  
 <span data-ttu-id="c65ee-297">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="c65ee-297">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="c65ee-298">コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-298">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="c65ee-299">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-299">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c65ee-300">次のコード例を使用してコレクションをロックする方法を示しています、<xref:System.Collections.Queue.SyncRoot%2A>列挙中にします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-300">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="c65ee-301">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="c65ee-301">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Queue.IsSynchronized" />
        <altmember cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public virtual object[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToArray () As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="abstract member ToArray : unit -&gt; obj[]&#xA;override this.ToArray : unit -&gt; obj[]" Usage="queue.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-302">
            <see cref="T:System.Collections.Queue" /> の要素を新しい配列にコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-302">Copies the <see cref="T:System.Collections.Queue" /> elements to a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c65ee-303">
            <see cref="T:System.Collections.Queue" /> からコピーした要素を格納する新しい配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-303">A new array containing elements copied from the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-304"><xref:System.Collections.Queue>は変更されません。</span><span class="sxs-lookup"><span data-stu-id="c65ee-304">The <xref:System.Collections.Queue> is not modified.</span></span> <span data-ttu-id="c65ee-305">新しい配列の要素の順序は、の先頭から要素の順序と同じ、<xref:System.Collections.Queue>の終わりにします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-305">The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Queue> to its end.</span></span>  
  
 <span data-ttu-id="c65ee-306">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.Queue.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-306">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c65ee-307">次の例をコピーする方法を示しています、 <xref:System.Collections.Queue> 1 次元配列にします。</span><span class="sxs-lookup"><span data-stu-id="c65ee-307">The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.</span></span>  
  
 [!code-cpp[Classic Queue.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.TrimToSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrimToSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TrimToSize();" />
      <MemberSignature Language="F#" Value="abstract member TrimToSize : unit -&gt; unit&#xA;override this.TrimToSize : unit -&gt; unit" Usage="queue.TrimToSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c65ee-308">容量を <see cref="T:System.Collections.Queue" /> 内にある実際の要素数に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-308">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c65ee-309">このメソッドは、キューのメモリ オーバーヘッドを最小のキューに新しい要素が追加されない場合に使用できます。</span><span class="sxs-lookup"><span data-stu-id="c65ee-309">This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.</span></span>  
  
 <span data-ttu-id="c65ee-310">リセットする、<xref:System.Collections.Queue>を初期状態を呼び出し、<xref:System.Collections.Queue.Clear%2A>メソッドを呼び出す前に<xref:System.Collections.Queue.TrimToSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="c65ee-310">To reset a <xref:System.Collections.Queue> to its initial state, call the <xref:System.Collections.Queue.Clear%2A> method before calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span> <span data-ttu-id="c65ee-311">空のトリミング<xref:System.Collections.Queue>の容量設定、<xref:System.Collections.Queue>を既定の容量。</span><span class="sxs-lookup"><span data-stu-id="c65ee-311">Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.</span></span>  
  
 <span data-ttu-id="c65ee-312">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.Queue.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c65ee-312">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c65ee-313">
            <see cref="T:System.Collections.Queue" /> は読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c65ee-313">The <see cref="T:System.Collections.Queue" /> is read-only.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Queue.Clear" />
        <altmember cref="P:System.Collections.Queue.Count" />
      </Docs>
    </Member>
  </Members>
</Type>