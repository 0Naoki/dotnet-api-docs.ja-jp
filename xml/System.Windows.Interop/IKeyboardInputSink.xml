<Type Name="IKeyboardInputSink" FullName="System.Windows.Interop.IKeyboardInputSink">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bee69fc51f6cc38bbee436ed4e0db3a8f30f8560" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36503776" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IKeyboardInputSink" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IKeyboardInputSink" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.IKeyboardInputSink" />
  <TypeSignature Language="VB.NET" Value="Public Interface IKeyboardInputSink" />
  <TypeSignature Language="C++ CLI" Value="public interface class IKeyboardInputSink" />
  <TypeSignature Language="F#" Value="type IKeyboardInputSink = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3b231-101">相互運用の境界を越えて複数の HWND にわたって、Tab キーによる移動、アクセラレータ、およびニーモニックを管理するコンポーネントに対し、キーボード シンクを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3b231-101">Provides a keyboard sink for components that manages tabbing, accelerators, and mnemonics across interop boundaries and between HWNDs.</span>
      </span>
      <span data-ttu-id="3b231-102">このインターフェイスは、WPF-Win32 の相互運用シナリオにおいてキーボード メッセージ管理を実装します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3b231-102">This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b231-103">キーボード シンクの全般的なキーボードの入力モデルの特定のサブセットから入力を処理する[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]と[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]、でき、一部はキーボード入力を処理して、現在のキーボード フォーカスを持つ 1 つ以外 Hwnd に送られます。</span><span class="sxs-lookup"><span data-stu-id="3b231-103">A keyboard sink handles input from particular subsets of the overall keyboard input model for [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] and [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)], and enables some keyboard input to be processed and directed to HWNDs other than the one with current keyboard focus.</span></span>  
  
 <span data-ttu-id="3b231-104">コンポーネントが、他のコンポーネントが含まれています、タブの順序を維持する場合は、コンポーネントを実装する必要がありますも<xref:System.Windows.Interop.IKeyboardInputSite>のどのコンポーネントがフォーカスを追跡することです。</span><span class="sxs-lookup"><span data-stu-id="3b231-104">If your component contains other components, and maintains a tab order, your component must also implement <xref:System.Windows.Interop.IKeyboardInputSite> and keep track of which component has focus.</span></span>  
  
 <span data-ttu-id="3b231-105">については、入力のアーキテクチャを具体的には実装されている[!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)]相互運用性を参照してください[Windows フォームと WPF の相互運用性入力アーキテクチャ](~/docs/framework/wpf/advanced/windows-forms-and-wpf-interoperability-input-architecture.md)です。</span><span class="sxs-lookup"><span data-stu-id="3b231-105">For a discussion of the input architecture specifically implemented for [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] interop, see [Windows Forms and WPF Interoperability Input Architecture](~/docs/framework/wpf/advanced/windows-forms-and-wpf-interoperability-input-architecture.md).</span></span>  
  
 <span data-ttu-id="3b231-106"><xref:System.Windows.Interop.HwndSource> および<xref:System.Windows.Interop.HwndHost>各実装、<xref:System.Windows.Interop.IKeyboardInputSink>インターフェイスは、明示的なインターフェイスの定義を使用します。</span><span class="sxs-lookup"><span data-stu-id="3b231-106"><xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndHost> each implement the <xref:System.Windows.Interop.IKeyboardInputSink> interface, through explicit interface definitions.</span></span> <span data-ttu-id="3b231-107">明示的な定義は、既定の動作を指定で必要な場合にもアクセスできると、<xref:System.Windows.Interop.IKeyboardInputSink>のインターフェイスにキャスト<xref:System.Windows.Interop.HwndSource>または<xref:System.Windows.Interop.HwndHost>です。</span><span class="sxs-lookup"><span data-stu-id="3b231-107">The explicit definitions supply default behaviors, and can also be accessed if necessary through an <xref:System.Windows.Interop.IKeyboardInputSink> interface cast of <xref:System.Windows.Interop.HwndSource> or <xref:System.Windows.Interop.HwndHost>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="T:System.Windows.Interop.HwndHost" />
  </Docs>
  <Members>
    <Member MemberName="HasFocusWithin">
      <MemberSignature Language="C#" Value="public bool HasFocusWithin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasFocusWithin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFocusWithin () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFocusWithin();" />
      <MemberSignature Language="F#" Value="abstract member HasFocusWithin : unit -&gt; bool" Usage="iKeyboardInputSink.HasFocusWithin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3b231-108">シンクまたはその中に格納されているコンポーネントのいずれかにフォーカスがあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-108">Gets a value that indicates whether the sink or one of its contained components has focus.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b231-109">シンクまたはその中に格納されているコンポーネントのいずれかにフォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-109">
              <see langword="true" /> if the sink or one of its contained components has focus; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b231-110">このメソッドは、転送するために必要な<xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A>内からフォーカスを持つ子コンポーネントへの呼び出し、<xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A>実装します。</span><span class="sxs-lookup"><span data-stu-id="3b231-110">This method is necessary for forwarding <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> calls to child components with focus from within the <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> implementation.</span></span> <span data-ttu-id="3b231-111">呼び出す<xref:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin%2A>特定フォーカスと転送のレベルに到達するまで再帰的に<xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A>があります。</span><span class="sxs-lookup"><span data-stu-id="3b231-111">Call <xref:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin%2A> recursively until you reach the level of specific focus and forward <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> there.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" />
        <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardInputSite">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.IKeyboardInputSite KeyboardInputSite { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Interop.IKeyboardInputSite KeyboardInputSite" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyboardInputSite As IKeyboardInputSite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Interop::IKeyboardInputSite ^ KeyboardInputSite { System::Windows::Interop::IKeyboardInputSite ^ get(); void set(System::Windows::Interop::IKeyboardInputSite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardInputSite : System.Windows.Interop.IKeyboardInputSite with get, set" Usage="System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.IKeyboardInputSite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3b231-112">コンポーネントのコンテナーの <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> インターフェイスへの参照を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-112">Gets or sets a reference to the component's container's <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3b231-113">コンテナーの <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> インターフェイスへの参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-113">A reference to the container's <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> interface.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b231-114">このプロパティに最初に設定する必要があります`null`です。</span><span class="sxs-lookup"><span data-stu-id="3b231-114">This property should initially be set to `null`.</span></span> <span data-ttu-id="3b231-115">シンク コンポーネント リストを追加するすべてのコンテナーは、設定<xref:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite%2A>他のメソッドが呼び出され、その後複数回を設定できる前にします。</span><span class="sxs-lookup"><span data-stu-id="3b231-115">Any container that adds the sink to its components list will set <xref:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite%2A> before any other methods are called, and it can be set multiple times after that.</span></span> <span data-ttu-id="3b231-116">プロパティを設定する必要があります`null`処分する前にもう一度です。</span><span class="sxs-lookup"><span data-stu-id="3b231-116">You should set the property to `null` again before disposal.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="OnMnemonic">
      <MemberSignature Language="C#" Value="public bool OnMnemonic (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMnemonic(valuetype System.Windows.Interop.MSG&amp; msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Function OnMnemonic (ByRef msg As MSG, modifiers As ModifierKeys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool OnMnemonic(System::Windows::Interop::MSG % msg, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="abstract member OnMnemonic :  * System.Windows.Input.ModifierKeys -&gt; bool" Usage="iKeyboardInputSink.OnMnemonic (msg, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">
          <span data-ttu-id="3b231-117">ニーモニック用のメッセージおよび関連付けられたデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-117">The message for the mnemonic and associated data.</span>
          </span>
          <span data-ttu-id="3b231-118">このメッセージ構造を変更しないでください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-118">Do not modify this message structure.</span>
          </span>
          <span data-ttu-id="3b231-119">パフォーマンス上の理由から、これは参照渡しのみです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-119">It is passed by reference for performance reasons only.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="3b231-120">変換キー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-120">Modifier keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b231-121">このシンクのニーモニック (アクセス キー) のいずれかが起動されたときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-121">Called when one of the mnemonics (access keys) for this sink is invoked.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b231-122">メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-122">
              <see langword="true" /> if the message was handled; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b231-123">[!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] WM_CHAR、wm_syschar です、WM_DEADCHAR または WM_SYSDEADCHAR メッセージがある必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b231-123">The [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] message must be WM_CHAR, WM_SYSCHAR, WM_DEADCHAR or WM_SYSDEADCHAR.</span></span>  
  
 <span data-ttu-id="3b231-124">コンポーネントでは、含まれている各呼び出すことによって実装の場合は、コンポーネントには、コンポーネントが含まれているが、メッセージを渡す必要があります<xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="3b231-124">If the component has contained components, the message must be passed in your implementation by calling each contained component's <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A> method.</span></span>  
  
 <span data-ttu-id="3b231-125">返すインターフェイス`true`から<xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A>を呼び出しません<xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>です。</span><span class="sxs-lookup"><span data-stu-id="3b231-125">An interface that returns `true` from <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> will not call <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>.</span></span> <span data-ttu-id="3b231-126">実装がすべて特定のキーの組み合わせでの処理を実行するを選択できます<xref:System.Windows.Interop.IKeyboardInputSink.TranslateChar%2A>グループ 1 をバイパス<xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>です。</span><span class="sxs-lookup"><span data-stu-id="3b231-126">Implementations can choose to perform all specific key combination handling in <xref:System.Windows.Interop.IKeyboardInputSink.TranslateChar%2A>.and bypass <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
        <altmember cref="T:System.Windows.Input.AccessKeyManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterKeyboardInputSink">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.IKeyboardInputSite RegisterKeyboardInputSink (System.Windows.Interop.IKeyboardInputSink sink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Interop.IKeyboardInputSite RegisterKeyboardInputSink(class System.Windows.Interop.IKeyboardInputSink sink) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterKeyboardInputSink (sink As IKeyboardInputSink) As IKeyboardInputSite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Interop::IKeyboardInputSite ^ RegisterKeyboardInputSink(System::Windows::Interop::IKeyboardInputSink ^ sink);" />
      <MemberSignature Language="F#" Value="abstract member RegisterKeyboardInputSink : System.Windows.Interop.IKeyboardInputSink -&gt; System.Windows.Interop.IKeyboardInputSite" Usage="iKeyboardInputSink.RegisterKeyboardInputSink sink" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.IKeyboardInputSite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sink" Type="System.Windows.Interop.IKeyboardInputSink" />
      </Parameters>
      <Docs>
        <param name="sink">
          <span data-ttu-id="3b231-127">格納されているコンポーネントの <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> シンク。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-127">The <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> sink of the contained component.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b231-128">格納されているコンポーネントの <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> インターフェイスを登録します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-128">Registers the <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> interface of a contained component.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b231-129">格納されているコンポーネントの <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> サイト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-129">The <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> site of the contained component.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b231-130">子コンポーネントとコンポーネントは、サイトの内部コレクションを保持し、このメソッドを使用して新しいシンクを追加および新しいサイトを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="3b231-130">Components with child components should maintain internal collections of sites and use this method to add a new sink and return the new site.</span></span> <span data-ttu-id="3b231-131">だけで済みますサイト コレクションを維持するため、シンクは、サイトから取得することができます。</span><span class="sxs-lookup"><span data-stu-id="3b231-131">You only need to maintain the site collection, because the sink can be obtained from the site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabInto">
      <MemberSignature Language="C#" Value="public bool TabInto (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TabInto(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Function TabInto (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TabInto(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member TabInto : System.Windows.Input.TraversalRequest -&gt; bool" Usage="iKeyboardInputSink.TabInto request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="3b231-132">フォーカスを最初と最後のどちらのタブ位置に設定するかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-132">Specifies whether focus should be set to the first or the last tab stop.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b231-133">フォーカスをシンクの最初のタブ位置または最後のタブ位置のいずれかに設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-133">Sets focus on either the first tab stop or the last tab stop of the sink.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b231-134">フォーカスが要求どおりに設定された場合は <see langword="true" />。タブ位置が存在しない場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-134">
              <see langword="true" /> if the focus has been set as requested; <see langword="false" />, if there are no tab stops.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b231-135"><xref:System.Windows.Input.FocusNavigationDirection.First> および<xref:System.Windows.Input.FocusNavigationDirection.Last>でこのメソッドに渡す必要があるだけに関連する値が格納されて、<xref:System.Windows.Input.TraversalRequest>です。</span><span class="sxs-lookup"><span data-stu-id="3b231-135"><xref:System.Windows.Input.FocusNavigationDirection.First> and <xref:System.Windows.Input.FocusNavigationDirection.Last> are the only relevant values that should be passed to this method in the <xref:System.Windows.Input.TraversalRequest>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAccelerator">
      <MemberSignature Language="C#" Value="public bool TranslateAccelerator (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TranslateAccelerator(valuetype System.Windows.Interop.MSG&amp; msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Function TranslateAccelerator (ByRef msg As MSG, modifiers As ModifierKeys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TranslateAccelerator(System::Windows::Interop::MSG % msg, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="abstract member TranslateAccelerator :  * System.Windows.Input.ModifierKeys -&gt; bool" Usage="iKeyboardInputSink.TranslateAccelerator (msg, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">
          <span data-ttu-id="3b231-136">メッセージおよび関連付けられたデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-136">The message and associated data.</span>
          </span>
          <span data-ttu-id="3b231-137">この構造体を変更しないでください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-137">Do not modify this structure.</span>
          </span>
          <span data-ttu-id="3b231-138">パフォーマンス上の理由から、これは参照渡しのみです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-138">It is passed by reference for performance reasons only.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="3b231-139">変換キー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-139">Modifier keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b231-140">キー押下メッセージのレベルでキーボード入力を処理します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-140">Processes keyboard input at the keydown message level.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b231-141">メッセージがメソッドの実装によって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-141">
              <see langword="true" /> if the message was handled by the method implementation; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b231-142">WM_KEYDOWN または WM_SYSKEYDOWN メッセージでなければなりません。</span><span class="sxs-lookup"><span data-stu-id="3b231-142">The message must either be WM_KEYDOWN or WM_SYSKEYDOWN.</span></span>  
  
 <span data-ttu-id="3b231-143">コンポーネントが入力の変換を処理するようになっていて、翻訳を含めることがありますの子コンポーネントが場合、通常、呼び出します<xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A>メソッド結果を返す前に、現在のフォーカスを保持している子コンポーネントにします。</span><span class="sxs-lookup"><span data-stu-id="3b231-143">If the component is unable to handle the input translations and has child components that might have translations, it typically calls <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> method on the child component that holds the current focus before returning a result.</span></span>  
  
 <span data-ttu-id="3b231-144">場合は、メッセージは、すぐに処理できない場合、再ディスパッチできる、内から、<xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A>実装が必要であれば、戻って`false`です。</span><span class="sxs-lookup"><span data-stu-id="3b231-144">If the message cannot be handled immediately, you can re-dispatch it from within the <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> implementation if necessary, and then return `false`.</span></span>  
  
 <span data-ttu-id="3b231-145">アクセラレータ キーを変換するための主なシナリオが VK_TAB keydown メッセージを処理しを呼び出して、コンポーネント内でフォーカスを設定するかどうかを決定する<xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A>子コンポーネントにまたは呼び出しを行う<xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A>親サイトであるためタブ シーケンス境界の先頭または末尾に達しました。</span><span class="sxs-lookup"><span data-stu-id="3b231-145">A primary scenario for translating accelerator keys is handling the VK_TAB keydown message and determining whether to set focus within the component, to call <xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A> to a child component, or to call <xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A> on the parent site because the tab sequence has reached the beginning or end bounds.</span></span> <span data-ttu-id="3b231-146">特定のコンポーネントは、この方法で tab キーを処理できないことができます。</span><span class="sxs-lookup"><span data-stu-id="3b231-146">Certain components may choose to not handle the tab key in this fashion.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      </Docs>
    </Member>
    <Member MemberName="TranslateChar">
      <MemberSignature Language="C#" Value="public bool TranslateChar (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TranslateChar(valuetype System.Windows.Interop.MSG&amp; msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Function TranslateChar (ByRef msg As MSG, modifiers As ModifierKeys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TranslateChar(System::Windows::Interop::MSG % msg, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="abstract member TranslateChar :  * System.Windows.Input.ModifierKeys -&gt; bool" Usage="iKeyboardInputSink.TranslateChar (msg, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">
          <span data-ttu-id="3b231-147">メッセージおよび関連付けられたデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-147">The message and associated data.</span>
          </span>
          <span data-ttu-id="3b231-148">この構造体を変更しないでください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-148">Do not modify this structure.</span>
          </span>
          <span data-ttu-id="3b231-149">パフォーマンス上の理由から、これは参照渡しのみです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-149">It is passed by reference for performance reasons only.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="3b231-150">変換キー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-150">Modifier keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b231-151">
            <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> の呼び出し前に、WM_CHAR、WM_SYSCHAR、WM_DEADCHAR、および WM_SYSDEADCHAR 入力メッセージを処理します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-151">Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> is called.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b231-152">メッセージが処理されたため <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> を呼び出さない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b231-152">
              <see langword="true" /> if the message was processed and <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> should not be called; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b231-153">返すには、このメソッドを実装する場合`true`、入力のアーキテクチャを呼び出しません<xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>キー メッセージに対応します。</span><span class="sxs-lookup"><span data-stu-id="3b231-153">If you implement this method to return `true`, the input architecture will not call <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A> for that key message.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>