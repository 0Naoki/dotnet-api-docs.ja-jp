<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="49a12d13bd95a15d088102cee37cba7ce320c3d0" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48750289" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Windows Presentation Foundation (WPF) と Win32 コードの相互運用を支援します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスのメンバーにより、呼び出し元への内部に、 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND と HWND の親の[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<xref:System.Windows.Window>します。  適切なセキュリティ チェックは、それらのメンバーによって実行されます。  
  
 具体的なオブジェクトと HWND の分離に基づく必要がある場合は、このクラスを使用します。  
  
 シナリオの例をホストする必要があるかどうか、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]  ダイアログ ボックスで、[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]アプリケーション。 初期化、<xref:System.Windows.Interop.WindowInteropHelper>で、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]  ダイアログ ボックスのウィンドウ オブジェクト。 表示する、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]からウィンドウのハンドル (HWND)、<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>プロパティの所有者を指定し、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]ウィンドウで、<xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>プロパティ。 次のコード例は、使用する方法を示しています。<xref:System.Windows.Interop.WindowInteropHelper>をホストする場合、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]  ダイアログ ボックスで、[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]アプリケーション。  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 このクラスでサポートされているもう 1 つのシナリオでは取得する、<xref:System.Windows.Interop.HwndSource>オブジェクトから、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>オブジェクト。 <xref:System.Windows.Interop.HwndSource>有効の処理を指示する[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]メッセージを通じて、<xref:System.Windows.Interop.HwndSource.AddHook%2A>メソッド。 使用して<xref:System.Windows.Interop.HwndSource>と<xref:System.Windows.Interop.HwndSource.AddHook%2A>の代わりに、<xref:System.Windows.Window>いいえ同等またはで処理を持つメッセージを処理することができますも[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]します。 作成、<xref:System.Windows.Interop.WindowInteropHelper>で、<xref:System.Windows.Window>ソースを呼び出して<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>上、<xref:System.Windows.Interop.WindowInteropHelper>から HWND を取得する<xref:System.Windows.Interop.HwndSource>します。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] ウィンドウ オブジェクト。</param>
        <summary>指定した [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] ウィンドウの <see cref="T:System.Windows.Interop.WindowInteropHelper" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ウィンドウは、ダイアログ ボックスで、またはそれ以外の場合に適していませんの境界内でホストされているウィンドウを指定できます、[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]アプリケーション。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウの HWND がまだ作成されていない場合は HWND を作成します。</summary>
        <returns>HWND を表す <see cref="T:System.IntPtr" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッド、管理対象の実際の表示のウィンドウ ハンドル (HWND) の作成を分離する場合に<xref:System.Windows.Window>します。 これは、ウィンドウを表示するため必要としないタスクを実行するオートメーション クライアントがある場合に便利です。  
  
 ネイティブ ウィンドウが作成されていない場合、このメソッドはネイティブのウィンドウでは、セットを作成、<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>プロパティ、および HWND を返します。 ネイティブ ウィンドウを既に作成されている場合は、既存のネイティブ ウィンドウのハンドルが返されます。  
  
 ネイティブ ウィンドウが、このメソッドの呼び出しの結果として作成された場合、<xref:System.Windows.Window.SourceInitialized>イベントが発生します。  
  
 クエリを実行する、<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>プロパティの後、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッドが呼び出された既存のウィンドウ ハンドルを返します。 ビジュアル ツリーは、後まで、ウィンドウにアタッチされていない、<xref:System.Windows.Window.Show%2A>メソッドが呼び出されます。  
  
 呼び出す、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッド 1 つ以上の時間は新しいウィンドウのハンドルを作成しません。 呼び出す、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッドを呼び出してハンドルが作成されて既に、<xref:System.Windows.Window.Show%2A>メソッドが新しいウィンドウ ハンドルを作成できません。 ハンドルが存在しない場合にのみ、ネイティブのウィンドウが作成時に、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッドが呼び出されます。  
  
 P/invoke でネイティブ ウィンドウの Api を使用して設定されているウィンドウのプロパティは、Api の管理 ウィンドウでされない可能性があります。 後にネイティブ MS_EX_TOPMOST フラグを使用して最上位にあるウィンドウを設定する場合など、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッドを呼び出すと、<xref:System.Windows.Window.Topmost%2A>プロパティは、ネイティブの設定を反映するためには保証されません。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">作成し、ウィンドウ ハンドルにアクセスします。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Interop.WindowInteropHelper" /> を作成するために使用された [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] ウィンドウのウィンドウ ハンドルを取得します。</summary>
        <value>[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] ウィンドウ ハンドル (HWND)。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">ウィンドウ ハンドルを取得します。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] オーナー ウィンドウのハンドルを取得または設定します。</summary>
        <value>オーナー ウィンドウ ハンドル (HWND)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows の親を変更するには、このプロパティを設定します。 True は一般的な[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]プログラミングと、既に使用されている windows いない親を変更しないでください。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">取得またはこのプロパティの値を設定します。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>