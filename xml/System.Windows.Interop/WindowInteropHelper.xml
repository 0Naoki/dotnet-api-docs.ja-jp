<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WindowInteropHelper.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5492213104b0f184cf0ecaffdd93a2b0d6ad1a860.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">492213104b0f184cf0ecaffdd93a2b0d6ad1a860</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.</source>
          <target state="translated">Windows Presentation Foundation (WPF) と Win32 コードの相互運用を支援します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Members of this class allows the caller to have internal access to the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> HWND and the parent HWND of a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">このクラスのメンバーにより、内部にアクセスする権限が呼び出し元、 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> HWND と親 HWND の<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph><ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>The proper security checks are performed by those members.</source>
          <target state="translated">適切なセキュリティ チェックは、それらのメンバーによって実行されます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Use this class whenever you need a more specific object based on its HWND.</source>
          <target state="translated">具体的なオブジェクトと hwnd の分離に基づく必要がある場合は、このクラスを使用します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>An example scenario is if you need to host a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">シナリオの例をホストする必要があるかどうか、 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>  ダイアログ ボックスで、<ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Initialize the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window object for the dialog box.</source>
          <target state="translated">初期化、<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>で、 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>  ダイアログ ボックスのウィンドウのオブジェクト。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>You can then get the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window's handle (HWND) from the <ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property and specify the owner for the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window with the <ph id="ph4">&lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt;</ph> property.</source>
          <target state="translated">表示する、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>ウィンドウのハンドル (HWND) から、<ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph>プロパティの所有者を指定し、 <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>  ウィンドウで、<ph id="ph4">&lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>The following code example shows how to use <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> when hosting a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">次のコード例は、使用する方法を示しています。<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>をホストしているときに、 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>  ダイアログ ボックスで、<ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Another scenario supported by this class is to obtain a <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object from a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object.</source>
          <target state="translated">このクラスでサポートされている別のシナリオは取得するが、<ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>オブジェクトから、 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> enables direct processing of <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> messages through the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>によりがの処理を指示<ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>を通じてメッセージ、<ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>By using <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> in place of a <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> you can still handle messages that have no equivalent or handling in <ph id="ph4">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph>の代わりに、<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>いいえ同等またはで処理しているメッセージを処理することができますも<ph id="ph4">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Create a <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> with the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> source, then call <ph id="ph3">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> on the <ph id="ph4">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> to get from HWND to <ph id="ph5">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
          <target state="translated">作成、<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>で、<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>ソース、し、呼び出す<ph id="ph3">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph>上、<ph id="ph4">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>に HWND から取得する<ph id="ph5">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> ウィンドウ オブジェクト。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.WindowInteropHelper" /&gt;</ph> class for a specified <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window.</source>
          <target state="translated">指定した <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> ウィンドウの <ph id="ph1">&lt;see cref="T:System.Windows.Interop.WindowInteropHelper" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)">
          <source>The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">ウィンドウには、ダイアログ ボックスで、またはそれ以外の場合に適していませんの境界内でホストされているウィンドウを指定できます、<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Creates the HWND of the window if the HWND has not been created yet.</source>
          <target state="translated">ウィンドウの HWND がまだ作成されていない場合は HWND を作成します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that represents the HWND.</source>
          <target state="translated">HWND を表す <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method when you want to separate window handle (HWND) creation from the actual showing of the managed <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>メソッドは、管理対象の実際の表示のウィンドウ ハンドル (HWND) の作成を分割すると<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.</source>
          <target state="translated">これは、ウィンドウを表示する必要がないタスクを実行するオートメーション クライアントがある場合に便利です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>If the native window has not yet been created, this method creates the native window, sets the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property, and returns the HWND.</source>
          <target state="translated">ネイティブのウィンドウが作成されていない場合、このメソッドはネイティブのウィンドウでは、セットを作成、<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph>プロパティ、および、HWND を返します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>If the native window has been created already, the handle of the existing native window is returned.</source>
          <target state="translated">ネイティブのウィンドウは、既に作成されている、既存のネイティブ ウィンドウのハンドルが返されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>If the native window is created as a result of calling this method, the <ph id="ph1">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> event is raised.</source>
          <target state="translated">このメソッドの呼び出しの結果として、[ネイティブ] ウィンドウを作成する場合、<ph id="ph1">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Querying the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property after the <ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method is called returns the existing window handle.</source>
          <target state="translated">クエリを実行する、<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph>後プロパティ、<ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>メソッドが呼び出された既存のウィンドウ ハンドルを返します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>The visual tree is not attached to the window until after the <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method is called.</source>
          <target state="translated">ビジュアル ツリーが後まで、ウィンドウにアタッチされていない、<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method more than one time does not create new window handles.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>メソッドに複数回は新しいウィンドウ ハンドルを作成しません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method when the handle has already been created by a call to the <ph id="ph2">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method does not create a new window handle.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>メソッド ハンドルは既にへの呼び出しによって作成されたときに、<ph id="ph2">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>メソッドは新しいウィンドウ ハンドルを作成できません。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>A native window is only created when no handle exists when the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method is called.</source>
          <target state="translated">ハンドルが存在しない場合にのみ、ネイティブのウィンドウが作成時に、<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.</source>
          <target state="translated">プラットフォーム呼び出しによるネイティブ ウィンドウ Api を使用して設定されているウィンドウのプロパティは、Api の管理 ウィンドウでされない可能性があります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is not guaranteed to reflect the native setting.</source>
          <target state="translated">後にネイティブ MS_EX_TOPMOST フラグを使用して最上位にウィンドウを設定する場合など、<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>メソッドが呼び出されると、<ph id="ph2">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>プロパティは、ネイティブの設定を反映する保証はありません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>to create and access a window handle.</source>
          <target state="translated">作成し、ウィンドウ ハンドルにアクセスします。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.WindowInteropHelper.Handle">
          <source>Gets the window handle for a <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window that is used to create this <ph id="ph2">&lt;see cref="T:System.Windows.Interop.WindowInteropHelper" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Windows.Interop.WindowInteropHelper" /&gt;</ph> を作成するために使用された <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> ウィンドウのウィンドウ ハンドルを取得します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Handle">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window handle (HWND).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> ウィンドウ ハンドル (HWND)。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Handle">
          <source>to obtain a window handle.</source>
          <target state="translated">ウィンドウ ハンドルを取得できます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Handle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>Gets or sets the handle of the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> owner window.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> オーナー ウィンドウのハンドルを取得または設定します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>The owner window handle (HWND).</source>
          <target state="translated">オーナー ウィンドウ ハンドル (HWND)。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>You can reparent windows by setting this property.</source>
          <target state="translated">Windows の親を変更するには、このプロパティを設定します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>As is true for general <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> programming, do not reparent windows that are already in use.</source>
          <target state="translated">True として一般的な<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>プログラミングと、既に使用されている windows ない親を変更しないでください。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>to get or set this property value.</source>
          <target state="translated">取得またはこのプロパティの値を設定します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>