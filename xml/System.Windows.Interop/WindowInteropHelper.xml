<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8bf47a7484d17929551fde05bf833d7fe82b153" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36503620" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="018ca-101">Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.</span>
      <span class="sxs-lookup">
        <span data-stu-id="018ca-101">Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="018ca-102">このクラスのメンバーにより、内部にアクセスする権限が呼び出し元、 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND と親 HWND の[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<xref:System.Windows.Window>です。</span><span class="sxs-lookup"><span data-stu-id="018ca-102">Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.</span></span>  <span data-ttu-id="018ca-103">適切なセキュリティ チェックは、それらのメンバーによって実行されます。</span><span class="sxs-lookup"><span data-stu-id="018ca-103">The proper security checks are performed by those members.</span></span>  
  
 <span data-ttu-id="018ca-104">具体的なオブジェクトと hwnd の分離に基づく必要がある場合は、このクラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="018ca-104">Use this class whenever you need a more specific object based on its HWND.</span></span>  
  
 <span data-ttu-id="018ca-105">シナリオの例をホストする必要があるかどうか、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]  ダイアログ ボックスで、[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]アプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="018ca-105">An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span> <span data-ttu-id="018ca-106">初期化、<xref:System.Windows.Interop.WindowInteropHelper>で、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]  ダイアログ ボックスのウィンドウのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="018ca-106">Initialize the <xref:System.Windows.Interop.WindowInteropHelper> with a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object for the dialog box.</span></span> <span data-ttu-id="018ca-107">表示する、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]ウィンドウのハンドル (HWND) から、<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>プロパティの所有者を指定し、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]  ウィンドウで、<xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="018ca-107">You can then get the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property.</span></span> <span data-ttu-id="018ca-108">次のコード例は、使用する方法を示しています。<xref:System.Windows.Interop.WindowInteropHelper>をホストしているときに、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]  ダイアログ ボックスで、[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]アプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="018ca-108">The following code example shows how to use <xref:System.Windows.Interop.WindowInteropHelper> when hosting a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span>  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 <span data-ttu-id="018ca-109">このクラスでサポートされている別のシナリオは取得するが、<xref:System.Windows.Interop.HwndSource>オブジェクトから、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="018ca-109">Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object.</span></span> <span data-ttu-id="018ca-110"><xref:System.Windows.Interop.HwndSource>によりがの処理を指示[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]を通じてメッセージ、<xref:System.Windows.Interop.HwndSource.AddHook%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="018ca-110">The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method.</span></span> <span data-ttu-id="018ca-111">使用して<xref:System.Windows.Interop.HwndSource>と<xref:System.Windows.Interop.HwndSource.AddHook%2A>の代わりに、<xref:System.Windows.Window>いいえ同等またはで処理しているメッセージを処理することができますも[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="018ca-111">By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="018ca-112">作成、<xref:System.Windows.Interop.WindowInteropHelper>で、<xref:System.Windows.Window>ソース、し、呼び出す<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>上、<xref:System.Windows.Interop.WindowInteropHelper>に HWND から取得する<xref:System.Windows.Interop.HwndSource>です。</span><span class="sxs-lookup"><span data-stu-id="018ca-112">Create a <xref:System.Windows.Interop.WindowInteropHelper> with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the <xref:System.Windows.Interop.WindowInteropHelper> to get from HWND to <xref:System.Windows.Interop.HwndSource>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">
          <span data-ttu-id="018ca-113">A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-113">A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="018ca-114">Initializes a new instance of the <see cref="T:System.Windows.Interop.WindowInteropHelper" /> class for a specified [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window.</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-114">Initializes a new instance of the <see cref="T:System.Windows.Interop.WindowInteropHelper" /> class for a specified [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="018ca-115">ウィンドウには、ダイアログ ボックスで、またはそれ以外の場合に適していませんの境界内でホストされているウィンドウを指定できます、[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]アプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="018ca-115">The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="018ca-116">Creates the HWND of the window if the HWND has not been created yet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-116">Creates the HWND of the window if the HWND has not been created yet.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="018ca-117">An <see cref="T:System.IntPtr" /> that represents the HWND.</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-117">An <see cref="T:System.IntPtr" /> that represents the HWND.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="018ca-118">使用して、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッドは、管理対象の実際の表示のウィンドウ ハンドル (HWND) の作成を分割すると<xref:System.Windows.Window>です。</span><span class="sxs-lookup"><span data-stu-id="018ca-118">Use the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>.</span></span> <span data-ttu-id="018ca-119">これは、ウィンドウを表示する必要がないタスクを実行するオートメーション クライアントがある場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="018ca-119">This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.</span></span>  
  
 <span data-ttu-id="018ca-120">ネイティブのウィンドウが作成されていない場合、このメソッドはネイティブのウィンドウでは、セットを作成、<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>プロパティ、および、HWND を返します。</span><span class="sxs-lookup"><span data-stu-id="018ca-120">If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND.</span></span> <span data-ttu-id="018ca-121">ネイティブのウィンドウは、既に作成されている、既存のネイティブ ウィンドウのハンドルが返されます。</span><span class="sxs-lookup"><span data-stu-id="018ca-121">If the native window has been created already, the handle of the existing native window is returned.</span></span>  
  
 <span data-ttu-id="018ca-122">このメソッドの呼び出しの結果として、[ネイティブ] ウィンドウを作成する場合、<xref:System.Windows.Window.SourceInitialized>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="018ca-122">If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.</span></span>  
  
 <span data-ttu-id="018ca-123">クエリを実行する、<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>後プロパティ、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッドが呼び出された既存のウィンドウ ハンドルを返します。</span><span class="sxs-lookup"><span data-stu-id="018ca-123">Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called returns the existing window handle.</span></span> <span data-ttu-id="018ca-124">ビジュアル ツリーが後まで、ウィンドウにアタッチされていない、<xref:System.Windows.Window.Show%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="018ca-124">The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.</span></span>  
  
 <span data-ttu-id="018ca-125">呼び出す、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッドに複数回は新しいウィンドウ ハンドルを作成しません。</span><span class="sxs-lookup"><span data-stu-id="018ca-125">Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method more than one time does not create new window handles.</span></span> <span data-ttu-id="018ca-126">呼び出す、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッド ハンドルは既にへの呼び出しによって作成されたときに、<xref:System.Windows.Window.Show%2A>メソッドは新しいウィンドウ ハンドルを作成できません。</span><span class="sxs-lookup"><span data-stu-id="018ca-126">Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle.</span></span> <span data-ttu-id="018ca-127">ハンドルが存在しない場合にのみ、ネイティブのウィンドウが作成時に、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="018ca-127">A native window is only created when no handle exists when the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called.</span></span>  
  
 <span data-ttu-id="018ca-128">プラットフォーム呼び出しによるネイティブ ウィンドウ Api を使用して設定されているウィンドウのプロパティは、Api の管理 ウィンドウでされない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="018ca-128">Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.</span></span> <span data-ttu-id="018ca-129">後にネイティブ MS_EX_TOPMOST フラグを使用して最上位にウィンドウを設定する場合など、<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>メソッドが呼び出されると、<xref:System.Windows.Window.Topmost%2A>プロパティは、ネイティブの設定を反映する保証はありません。</span><span class="sxs-lookup"><span data-stu-id="018ca-129">For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="018ca-130">作成し、ウィンドウ ハンドルにアクセスします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-130">to create and access a window handle.</span>
          </span>
          <span data-ttu-id="018ca-131">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-131">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="018ca-132">Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window that is used to create this <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-132">Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window that is used to create this <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="018ca-133">[です。INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] ウィンドウのハンドル (HWND))。</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-133">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window handle (HWND).</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="018ca-134">ウィンドウ ハンドルを取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-134">to obtain a window handle.</span>
          </span>
          <span data-ttu-id="018ca-135">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-135">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="018ca-136">Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] owner window.</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-136">Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] owner window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="018ca-137">所有者のウィンドウ ハンドル (HWND))。</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-137">The owner window handle (HWND).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="018ca-138">Windows の親を変更するには、このプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="018ca-138">You can reparent windows by setting this property.</span></span> <span data-ttu-id="018ca-139">True として一般的な[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]プログラミングと、既に使用されている windows ない親を変更しないでください。</span><span class="sxs-lookup"><span data-stu-id="018ca-139">As is true for general [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="018ca-140">取得またはこのプロパティの値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-140">to get or set this property value.</span>
          </span>
          <span data-ttu-id="018ca-141">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="018ca-141">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>