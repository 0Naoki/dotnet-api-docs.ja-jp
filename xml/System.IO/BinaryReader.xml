<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BinaryReader.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac522a75f9b356ec6c35a6b7fdfaaf1447ea2b69f02.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22a75f9b356ec6c35a6b7fdfaaf1447ea2b69f02</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Reads primitive data types as binary values in a specific encoding.</source>
          <target state="translated">プリミティブ データ型を特定のエンコーディングのバイナリ値として読み取ります。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>The <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> class provides methods that simplify reading primitive data types from a stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph>クラス ストリームからのプリミティブ データ型の読み取りを簡略化するメソッドを提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBoolean%2A&gt;</ph> method to read the next byte as a Boolean value and advance the current position in the stream by one byte.</source>
          <target state="translated">たとえば、使用することができます、<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBoolean%2A&gt;</ph>メソッドは、ブール値として次のバイトの読み取りを 1 バイトをストリーム内の現在位置を進めます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>The class includes read methods that support different data types.</source>
          <target state="translated">クラスには、読み取りをサポートするメソッド別のデータ型にはが含まれています。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>When you create a new instance of the <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> class, you provide the stream to read from, and optionally specify the type of encoding and whether to leave the stream open after disposing the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> object.</source>
          <target state="translated">新しいインスタンスを作成する場合、<ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph>クラスを読み取ったり、ストリームを提供し、必要に応じてエンコードの種類を指定して破棄した後に、ストリームのままにするかどうかを開く、<ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>If you do not specify an encoding type, UTF-8 is used.</source>
          <target state="translated">エンコードの種類を指定しない場合は、utf-8 が使用されます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">この型は、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">型の直接 dispose を呼び出す、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドで、 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">直接ことのない破棄する場合など、言語コンストラクトを使用して<ph id="ph1">`using`</ph>(C# の場合) または<ph id="ph2">`Using`</ph>(Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスに関するトピック。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">次のコード例では、格納およびファイル内のアプリケーション設定を取得する方法を示します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>The input stream.</source>
          <target state="translated">入力ストリーム。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class based on the specified stream and using UTF-8 encoding.</source>
          <target state="translated">指定したストリームに基づき、UTF-8 エンコーディングを使用する <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">次のコード例では、格納およびファイル内のアプリケーション設定を取得する方法を示します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>The stream does not support reading, is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, or is already closed.</source>
          <target state="translated">ストリームが読み取りをサポートしていないか、<ph id="ph1">&lt;see langword="null" /&gt;</ph> であるか、既に閉じています。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The input stream.</source>
          <target state="translated">入力ストリーム。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The character encoding to use.</source>
          <target state="translated">使用する文字エンコーディング。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class based on the specified stream and character encoding.</source>
          <target state="translated">指定したストリームと文字エンコーディングに基づいて、<ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The stream does not support reading, is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, or is already closed.</source>
          <target state="translated">ストリームが読み取りをサポートしていないか、<ph id="ph1">&lt;see langword="null" /&gt;</ph> であるか、既に閉じています。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The input stream.</source>
          <target state="translated">入力ストリーム。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The character encoding to use.</source>
          <target state="translated">使用する文字エンコーディング。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to leave the stream open after the <ph id="ph2">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> object is disposed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> オブジェクトを破棄した後にストリームを開いたままにする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class based on the specified stream and character encoding, and optionally leaves the stream open.</source>
          <target state="translated">指定したストリームと文字エンコーディングに基づいて <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> クラスの新しいインスタンスを初期化し、必要に応じて、ストリームを開いたままにします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The stream does not support reading, is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, or is already closed.</source>
          <target state="translated">ストリームが読み取りをサポートしていないか、<ph id="ph1">&lt;see langword="null" /&gt;</ph> であるか、既に閉じています。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> or <ph id="ph2">&lt;paramref name="input" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> または <ph id="ph2">&lt;paramref name="input" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.IO.BinaryReader.BaseStream">
          <source>Exposes access to the underlying stream of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> の基になるストリームへのアクセスを公開します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>The underlying stream associated with the <ph id="ph1">&lt;see langword="BinaryReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="BinaryReader" /&gt;</ph> に関連付けられた、基になるストリーム。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>Using the underlying stream while reading or while using the <ph id="ph1">`BinaryReader`</ph> can cause data loss and corruption.</source>
          <target state="translated">使用して、基になるストリームの読み取り中または使用中に、<ph id="ph1">`BinaryReader`</ph>データの損失と破損が発生することができます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>For example, the same bytes might be read more than once, bytes might be skipped, or character reading might become unpredictable.</source>
          <target state="translated">たとえば、同じバイトを 2 回以上読み取ることがあります、バイトをスキップする可能性があります、または文字の読み取りが予測不能になる可能性があります。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>The following code example shows how to read and write <ph id="ph1">`Double`</ph> data to memory by using the <ph id="ph2">`BinaryReader`</ph> and <ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph> classes on top of the <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、読み取りし、書き込みをする方法を示しています。<ph id="ph1">`Double`</ph>を使用してメモリへのデータ、<ph id="ph2">`BinaryReader`</ph>と<ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph>の上位クラス、<ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source><ph id="ph1">`MemoryStream`</ph> only reads and writes <ph id="ph2">`Byte`</ph> data.</source>
          <target state="translated"><ph id="ph1">`MemoryStream`</ph> 読み取りし、書き込みのみ<ph id="ph2">`Byte`</ph>データ。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Close">
          <source>Closes the current reader and the underlying stream.</source>
          <target state="translated">現在のリーダーと基になるストリームをクローズします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>This implementation of <ph id="ph1">`Close`</ph> calls the <ph id="ph2">&lt;xref:System.IO.BinaryReader.Dispose%2A&gt;</ph> method passing a <ph id="ph3">`true`</ph> value.</source>
          <target state="translated">この実装<ph id="ph1">`Close`</ph>呼び出し、<ph id="ph2">&lt;xref:System.IO.BinaryReader.Dispose%2A&gt;</ph>メソッド、<ph id="ph3">`true`</ph>値。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
          <target state="translated">明示的に呼び出す場合を除き、ストリームのフラッシュは、基になるエンコーダー フラッシュされません<ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph>または<ph id="ph2">`Close`</ph>です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph>に<ph id="ph2">`true`</ph>に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</source>
          <target state="translated">このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> クラスによって使用されているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> を使い終わったら <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> メソッドによって、<ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> は使用不可の状態になります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> was occupying.</source>
          <target state="translated">呼び出した後<ph id="ph1">`Dispose`</ph>へのすべての参照を解放する必要があります、<ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>ガベージ コレクターがメモリを再利用できるようにする、<ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph>占有されていた。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>と<bpt id="p2">[</bpt>Dispose メソッドの実装<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> への最後の参照を解放する前に、必ず <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> を呼び出してください。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">そうしないと、ガベージ コレクターが <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> オブジェクトの <ph id="ph2">`Finalize`</ph> メソッドを呼び出すまで、使用されているリソースは解放されません。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> クラスによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>This method is called by <ph id="ph1">`Dispose`</ph> and <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>.</source>
          <target state="translated">このメソッドによって呼び出されます<ph id="ph1">`Dispose`</ph>と<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>By default, this method specifies the <ph id="ph1">`disposing`</ph> parameter as <ph id="ph2">`true`</ph>.</source>
          <target state="translated">既定では、このメソッドを指定します、<ph id="ph1">`disposing`</ph>パラメーターとして<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> specifies the <ph id="ph2">`disposing`</ph> parameter as <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 指定します、<ph id="ph2">`disposing`</ph>パラメーターとして<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> パラメーターが <ph id="ph2">`true`</ph> の場合、このメソッドは、この <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドは、参照される各オブジェクトの <ph id="ph1">`Dispose`</ph> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.IO.BinaryReader.Dispose(System.Boolean)" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.BinaryReader.Dispose(System.Boolean)" /&gt;</ph> は、他のオブジェクトから複数回呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">このメソッドをオーバーライドする場合は、既に破棄されているを以前の呼び出しでオブジェクトを参照しないように注意する<ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>For more information about how to implement this method, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">このメソッドを実装する方法の詳細については、次を参照してください。 <bpt id="p1">[</bpt>Dispose メソッドの実装<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>The number of bytes to be read.</source>
          <target state="translated">読み取るバイト数。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>Fills the internal buffer with the specified number of bytes read from the stream.</source>
          <target state="translated">指定したバイト数分だけストリームから読み取ったバイトを内部バッファーに格納します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>The internal buffer size is the larger value between 16 and the value returned by <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> for the specified encoding.</source>
          <target state="translated">内部バッファー サイズが大きい方の値によって返される値と 16 の<ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph>の指定したエンコードします。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>The end of the stream is reached before <ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> could be read.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> 分のバイトを読み取る前にストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>Requested <ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> is larger than the internal buffer size.</source>
          <target state="translated">要求された <ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> が、内部バッファー サイズより大きくなっています。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>Returns the next available character and does not advance the byte or character position.</source>
          <target state="translated">読み取り可能な次の文字を返します。バイトの位置または文字の位置は変化しません。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>The next available character, or -1 if no more characters are available or the stream does not support seeking.</source>
          <target state="translated">使用できる次の文字。使用できる文字がないか、ストリームがシークをサポートしていない場合は -1。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.PeekChar">
          <source>If surrogate characters can be expected in the stream use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method, then set the stream back to the original position.</source>
          <target state="translated">サロゲート文字ストリームの使用で予想されるかどうか、<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph>メソッドは、元の位置に戻さのストリームを設定します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.PeekChar">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>The current character cannot be decoded into the internal character buffer by using the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> selected for the stream.</source>
          <target state="translated">現在の文字は、ストリーム用に選択された <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> を使用して内部文字バッファーにデコードできません。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Reads bytes from the underlying stream and advances the current position of the stream.</source>
          <target state="translated">基になるストリームからバイトを読み取り、ストリームの現在位置を進めます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>Reads characters from the underlying stream and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific character being read from the stream.</source>
          <target state="translated">基になるストリームから文字を読み取り、使用した <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> とストリームから読み取った特定の文字に従ってストリームの現在位置を進めます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>The next character from the input stream, or -1 if no characters are currently available.</source>
          <target state="translated">入力ストリームの次の文字。現在読み取り可能な文字がない場合は -1。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>The following example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">次の例では、バッキング ストアとしてメモリを使用してデータを読み書きする方法を示します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>This example displays a list of invalid file path characters to the console.</source>
          <target state="translated">この例では、コンソールに無効なファイル パスの文字の一覧を表示します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters.</source>
          <target state="translated">コードが無効なファイル パスのすべての文字の一覧を表示しようとすると、すべての文字は、表示可能な文字のセット内です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>Because the list of invalid characters can vary based on the system, output for this code may also vary.</source>
          <target state="translated">無効な文字の一覧は、システムによって異なります、このコードの出力も異なります。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to read data into.</source>
          <target state="translated">データを読み取るバッファー。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The starting point in the buffer at which to begin reading into the buffer.</source>
          <target state="translated">バッファー内の、バッファーへの読み取り開始点。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to read.</source>
          <target state="translated">読み取るバイト数。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the specified number of bytes from the stream, starting from a specified point in the byte array.</source>
          <target state="translated">バイト配列内の指定された位置を開始点として、ストリームから指定されたバイト数を読み取ります。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes read into <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> に読み取るバイト数。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.</source>
          <target state="translated">要求したバイト数分のバイトを読み取れなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 になることがあります。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 読み取り操作が失敗した後、ファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to write binary data by using memory as a backing store.</source>
          <target state="translated">次の例では、バッキング ストアとしてメモリを使用してバイナリ データを書き込む方法を示します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>It displays a message to the console that indicates whether the data was written correctly.</source>
          <target state="translated">データが正常に書き込まれたかどうかを示すコンソールにメッセージが表示されます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This example reads the contents of a file and displays each byte's numeric value in 16-column format.</source>
          <target state="translated">この例では、ファイルの内容を読み取り、16 列形式で各バイトの数値を表示します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The end of the file that is being read is detected when the <ph id="ph1">&lt;xref:System.IO.BinaryReader.Read%2A&gt;</ph> method returns zero bytes.</source>
          <target state="translated">読み取られるファイルの末尾が検出されたときに、 <ph id="ph1">&lt;xref:System.IO.BinaryReader.Read%2A&gt;</ph> 0 バイトを返します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">バッファーの長さから <ph id="ph1">&lt;paramref name="index" /&gt;</ph> を引いた値が <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">デコードされた文字の数が <ph id="ph1">&lt;paramref name="count" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">これは、Unicode デコーダーがフォールバック文字またはサロゲート ペアを返す場合に発生することがあります。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The buffer to read data into.</source>
          <target state="translated">データを読み取るバッファー。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The starting point in the buffer at which to begin reading into the buffer.</source>
          <target state="translated">バッファー内の、バッファーへの読み取り開始点。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to read.</source>
          <target state="translated">読み取る文字の数。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Reads the specified number of characters from the stream, starting from a specified point in the character array.</source>
          <target state="translated">文字配列内の指定された位置を開始点として、ストリームから指定された文字数を読み取ります。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The total number of characters read into the buffer.</source>
          <target state="translated">バッファーに読み取られた合計文字数。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</source>
          <target state="translated">要求した文字数分の文字を読み取れなかった場合、この値は要求した文字数より小さくなります。また、ストリームの末尾に到達した場合は 0 になることがあります。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 読み取り操作が失敗した後、ファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The following example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">次の例では、バッキング ストアとしてメモリを使用してデータを読み書きする方法を示します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This example displays a list of invalid file path characters to the console.</source>
          <target state="translated">この例では、コンソールに無効なファイル パスの文字の一覧を表示します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters.</source>
          <target state="translated">コードが無効なファイル パスのすべての文字の一覧を表示しようとすると、すべての文字は、表示可能な文字のセット内です。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Because the list of invalid characters can vary based on the system, output for this code may also vary.</source>
          <target state="translated">無効な文字の一覧は、システムによって異なります、このコードの出力も異なります。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">バッファーの長さから <ph id="ph1">&lt;paramref name="index" /&gt;</ph> を引いた値が <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">デコードされた文字の数が <ph id="ph1">&lt;paramref name="count" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">これは、Unicode デコーダーがフォールバック文字またはサロゲート ペアを返す場合に発生することがあります。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>Reads in a 32-bit integer in compressed format.</source>
          <target state="translated">32 ビット整数を圧縮形式で読み取ります。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>A 32-bit integer in compressed format.</source>
          <target state="translated">圧縮形式の 32 ビット整数。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>If the integer will fit in seven bits, the integer takes only one byte of space.</source>
          <target state="translated">整数は、7 ビットに収まる、整数は領域の 1 バイトだけを受け取ります。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The integer is expected to have been written through <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write7BitEncodedInt%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">整数ですから書き込まれた<ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write7BitEncodedInt%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The stream is corrupted.</source>
          <target state="translated">ストリームが破損しています。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>Reads a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value from the current stream and advances the current position of the stream by one byte.</source>
          <target state="translated">現在のストリームから <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> 値を読み取り、ストリームの現在位置を 1 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the byte is nonzero; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">読み取ったバイトが 0 以外の場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。0 の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">次のコード例では、格納およびファイル内のアプリケーション設定を取得する方法を示します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>Reads the next byte from the current stream and advances the current position of the stream by one byte.</source>
          <target state="translated">現在のストリームから次のバイトを読み取り、ストリームの現在位置を 1 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The next byte read from the current stream.</source>
          <target state="translated">現在のストリームから読み取った次のバイト。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>Because of data formatting conflicts, using this method with the following encodings is not recommended:</source>
          <target state="translated">データ形式が競合するため、このメソッドを使用して、次のエンコーディングことはお勧めしません。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>ISO-2022-JP</source>
          <target state="translated">ISO-2022-JP</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>ISCII</source>
          <target state="translated">ISCII</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">次のコード例では、バッキング ストアとしてメモリを使用してバイナリ データを書き込むし、その後、データが正常に書き込まれたことを確認する方法を示します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The number of bytes to read.</source>
          <target state="translated">読み取るバイト数。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This value must be 0 or a non-negative number or an exception will occur.</source>
          <target state="translated">この値は 0 以上の数字の必要があり、それ以外の場合は例外が発生します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.</source>
          <target state="translated">現在のストリームから指定されたバイト数をバイト配列に読み取り、そのバイト数だけストリーム内の現在位置を進めます。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>A byte array containing data read from the underlying stream.</source>
          <target state="translated">基になるストリームから読み取ったデータが格納されているバイト配列。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This might be less than the number of bytes requested if the end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達した場合は要求したバイト数より小さくなることがあります。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 読み取り操作が失敗した後、ファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">次のコード例では、バッキング ストアとしてメモリを使用してバイナリ データを書き込むし、その後、データが正常に書き込まれたことを確認する方法を示します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This example reads the contents of a file and displays it to the console as dump text.</source>
          <target state="translated">この例では、ファイルの内容を読み取り、ダンプのテキストとしてコンソールに表示されます。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The end of the file that is being read is detected when the length of the <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array returned from <ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph> is zero.</source>
          <target state="translated">読み取られるファイルの末尾が検出されたときの長さ、<ph id="ph1">&lt;xref:System.Byte&gt;</ph>から返される配列<ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph>ゼロです。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">デコードされた文字の数が <ph id="ph1">&lt;paramref name="count" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">これは、Unicode デコーダーがフォールバック文字またはサロゲート ペアを返す場合に発生することがあります。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>Reads the next character from the current stream and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific character being read from the stream.</source>
          <target state="translated">現在のストリームの次の文字を読み取り、使用した <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> とストリームから読み取った特定の文字に従ってストリームの現在位置を進めます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>A character read from the current stream.</source>
          <target state="translated">現在のストリームから読み取った文字。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>If the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph> method attempts to read a surrogate character in the stream an exception will be raised and the position in the stream will advance.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph>メソッドを読み取ろうと、サロゲート文字のストリームで例外が発生して、ストリーム内の位置はページに進みます。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The position is restored to the original location before <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph> was called if the stream is seekable; however, if the stream is unseekable, the position will not be corrected.</source>
          <target state="translated">位置は前に元の場所に復元<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph>場合に呼び出されたストリームはシーク可能です。 ただし、ストリームがシーク可能でない場合、位置いない修正される予定です。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>If surrogate characters can be expected in the stream, use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method instead.</source>
          <target state="translated">サロゲート文字は、ストリームで予想される場合を使用して、<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph>メソッド代わりにします。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>Because of data formatting conflicts, using this method with the following encodings is not recommended:</source>
          <target state="translated">データ形式が競合するため、このメソッドを使用して、次のエンコーディングことはお勧めしません。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>ISO-2022-JP</source>
          <target state="translated">ISO-2022-JP</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>ISCII</source>
          <target state="translated">ISCII</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">次のコード例では、バッキング ストアとしてメモリを使用してデータを読み書きする方法を示します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>A surrogate character was read.</source>
          <target state="translated">サロゲート文字が読み取られました。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The number of characters to read.</source>
          <target state="translated">読み取る文字の数。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>Reads the specified number of characters from the current stream, returns the data in a character array, and advances the current position in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific character being read from the stream.</source>
          <target state="translated">現在のストリームから指定された文字数を読み取り、そのデータを文字配列として返します。また、使用した <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> とストリームから読み取った特定の文字に従って現在位置を進めます。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>A character array containing data read from the underlying stream.</source>
          <target state="translated">基になるストリームから読み取ったデータが格納されている文字配列。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>This might be less than the number of characters requested if the end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達した場合は、要求された文字数より小さくなることがあります。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 読み取り操作が失敗した後、ファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>When reading from network streams, in some rare cases, the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method might read an extra character from the stream if the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> was constructed with Unicode encoding.</source>
          <target state="translated">まれなケースでのネットワーク ストリームから読み取るときに、<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph>メソッドは、場合に、ストリームからの余分な文字を読み取ることがあります、<ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>が Unicode で作成されてエンコードされます。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>If this occurs, you can use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph> method to read a fixed-length byte array, and then pass that array to the <ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method.</source>
          <target state="translated">使用することができます、このような場合、<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph>を固定長バイト配列を読み取り、その配列を渡す方法、<ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">次のコード例では、バッキング ストアとしてメモリを使用してデータを読み書きする方法を示します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">デコードされた文字の数が <ph id="ph1">&lt;paramref name="count" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">これは、Unicode デコーダーがフォールバック文字またはサロゲート ペアを返す場合に発生することがあります。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.</source>
          <target state="translated">現在のストリームから 10 進数値を読み取り、ストリームの現在位置を 16 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>A decimal value read from the current stream.</source>
          <target state="translated">現在のストリームから読み取った 10 進数値。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.</source>
          <target state="translated">現在のストリームから 8 バイト浮動小数点値を読み取り、ストリームの現在位置を 8 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>An 8-byte floating point value read from the current stream.</source>
          <target state="translated">現在のストリームから読み取った 8 バイト浮動小数点値。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> リトル エンディアン形式の場合は、このデータ型を読み取ります。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>The following code example shows how to read and write <ph id="ph1">`Double`</ph> data to memory by using the <ph id="ph2">`BinaryReader`</ph> and <ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph> classes on top of the <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、読み取りし、書き込みをする方法を示しています。<ph id="ph1">`Double`</ph>を使用してメモリへのデータ、<ph id="ph2">`BinaryReader`</ph>と<ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph>の上位クラス、<ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source><ph id="ph1">`MemoryStream`</ph> only reads and writes <ph id="ph2">`Byte`</ph> data.</source>
          <target state="translated"><ph id="ph1">`MemoryStream`</ph> 読み取りし、書き込みのみ<ph id="ph2">`Byte`</ph>データ。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.</source>
          <target state="translated">現在のストリームから 2 バイト符号付き整数を読み取り、ストリームの現在位置を 2 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>A 2-byte signed integer read from the current stream.</source>
          <target state="translated">現在のストリームから読み取った 2 バイト符号付き整数。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt16">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt16">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> リトル エンディアン形式の場合は、このデータ型を読み取ります。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.</source>
          <target state="translated">現在のストリームから 4 バイト符号付き整数を読み取り、ストリームの現在位置を 4 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>A 4-byte signed integer read from the current stream.</source>
          <target state="translated">現在のストリームから読み取った 4 バイト符号付き整数。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> リトル エンディアン形式の場合は、このデータ型を読み取ります。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">次のコード例では、格納およびファイル内のアプリケーション設定を取得する方法を示します。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.</source>
          <target state="translated">現在のストリームから 8 バイト符号付き整数を読み取り、ストリームの現在位置を 8 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>An 8-byte signed integer read from the current stream.</source>
          <target state="translated">現在のストリームから読み取った 8 バイト符号付き整数。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt64">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt64">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> リトル エンディアン形式の場合は、このデータ型を読み取ります。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>Reads a signed byte from this stream and advances the current position of the stream by one byte.</source>
          <target state="translated">現在のストリームから符号付きバイトを読み取り、ストリームの現在位置を 1 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>A signed byte read from the current stream.</source>
          <target state="translated">現在のストリームから読み取った符号付きバイト。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSByte">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.</source>
          <target state="translated">現在のストリームから 4 バイト浮動小数点値を読み取り、ストリームの現在位置を 4 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>A 4-byte floating point value read from the current stream.</source>
          <target state="translated">現在のストリームから読み取った 4 バイト浮動小数点値。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> リトル エンディアン形式の場合は、このデータ型を読み取ります。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">次のコード例では、格納およびファイル内のアプリケーション設定を取得する方法を示します。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>Reads a string from the current stream.</source>
          <target state="translated">現在のストリームから 1 つの文字列を読み取ります。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The string is prefixed with the length, encoded as an integer seven bits at a time.</source>
          <target state="translated">ストリームの文字列は、7 ビットごとにエンコードされた文字列の長さが先頭に付加されています。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The string being read.</source>
          <target state="translated">読み取った文字列。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadString">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadString">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadString">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">次のコード例では、格納およびファイル内のアプリケーション設定を取得する方法を示します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.</source>
          <target state="translated">リトル エンディアン エンコーディングを使用して現在のストリームから 2 バイト符号なし整数を読み取り、ストリームの位置を 2 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>A 2-byte unsigned integer read from this stream.</source>
          <target state="translated">現在のストリームから読み取った 2 バイト符号なし整数。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> リトル エンディアン形式の場合は、このデータ型を読み取ります。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.</source>
          <target state="translated">現在のストリームから 4 バイト符号なし整数を読み取り、ストリームの位置を 4 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>A 4-byte unsigned integer read from this stream.</source>
          <target state="translated">現在のストリームから読み取った 4 バイト符号なし整数。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> リトル エンディアン形式の場合は、このデータ型を読み取ります。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.</source>
          <target state="translated">現在のストリームから 8 バイト符号なし整数を読み取り、ストリームの位置を 8 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>An 8-byte unsigned integer read from this stream.</source>
          <target state="translated">現在のストリームから読み取った 8 バイト符号なし整数。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 失敗した読み取られた後にファイルの位置は復元されません。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> リトル エンディアン形式の場合は、このデータ型を読み取ります。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">共通 I/O タスクの一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>The end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に到達しました。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>