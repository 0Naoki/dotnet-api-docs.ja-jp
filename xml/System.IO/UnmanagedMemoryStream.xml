<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnmanagedMemoryStream.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5118ab17a373e7e3ec2e224596d6e7345bcbabc38.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">118ab17a373e7e3ec2e224596d6e7345bcbabc38</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Provides access to unmanaged blocks of memory from managed code.</source>
          <target state="translated">マネージ コードからメモリのアンマネージ ブロックにアクセスできるようにします。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>This class supports access to unmanaged memory using the existing stream-based model and does not require that the contents in the unmanaged memory be copied to the heap.</source>
          <target state="translated">このクラスは、既存のストリームに基づくモデルを使用してアンマネージ メモリへのアクセスをサポートし、ヒープをアンマネージ メモリの内容をコピーすることは必要ありません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、アンマネージ メモリの使用を読み書きする方法を示します、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">アンマネージ メモリ ブロックが割り当てられ、割り当て解除されたを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>The user does not have the required permission.</source>
          <target state="translated">ユーザーに必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">アンマネージ メモリにアクセスします。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">アンマネージ メモリ位置へのポインター。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The length of the memory to use.</source>
          <target state="translated">使用するメモリの長さ。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class using the specified location and memory length.</source>
          <target state="translated">指定した位置とメモリ長を使用して、<ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>This constructor creates a new instance of the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class, and by default sets the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property to <ph id="ph3">`false`</ph> and the <ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property to <ph id="ph5">`true`</ph>.</source>
          <target state="translated">このコンス トラクターの新しいインスタンスを作成する、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラス、および既定では設定、<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph>プロパティを<ph id="ph3">`false`</ph>と<ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>プロパティを<ph id="ph5">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;</ph> property is set to the value of the <ph id="ph2">`length`</ph> parameter and cannot be changed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;</ph>の値に設定されて、<ph id="ph2">`length`</ph>パラメーターは変更できません。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、アンマネージ メモリの使用を読み書きする方法を示します、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">アンマネージ メモリ ブロックが割り当てられ、割り当て解除されたを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The user does not have the required permission.</source>
          <target state="translated">ユーザーに必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> 値は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 値が 0 未満です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> is large enough to cause an overflow.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> がオーバーフローの原因となりうる長さです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">アンマネージ メモリにアクセスします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームを格納するバッファー。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">バッファー内のアンマネージ メモリ ストリームの開始バイト位置。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームの長さ。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset and length.</source>
          <target state="translated">指定したオフセットおよび長さを使用して、セーフ バッファーに <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">アンマネージ メモリ位置へのポインター。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the memory to use.</source>
          <target state="translated">使用するメモリの長さ。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The total amount of memory assigned to the stream.</source>
          <target state="translated">ストリームに割り当てられたメモリの総量。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class using the specified location, memory length, total amount of memory, and file access values.</source>
          <target state="translated">指定した位置、メモリ長、メモリ総量、およびファイル アクセス値を使用して、<ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`length`</ph> parameter defines the current amount of memory in use.</source>
          <target state="translated"><ph id="ph1">`length`</ph>パラメーターは、使用中メモリの現在の量を定義します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>If reading or appending data to the stream, the <ph id="ph1">`length`</ph> value should be equal to the amount of valid data in the stream to be read from or preserved.</source>
          <target state="translated">読み取り中に、ストリーム データを追加する場合、<ph id="ph1">`length`</ph>値から読み込まれるストリームに有効なデータの量と等しくする必要がありますまたは保持されます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>If writing to the stream, this value should be zero.</source>
          <target state="translated">ストリームに書き込み、この値は 0 にする必要があります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`capacity`</ph> parameter indicates the amount of total memory available.</source>
          <target state="translated"><ph id="ph1">`capacity`</ph>パラメーターが使用できる合計メモリの量を示します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This value can describe a region that is longer than the length specified, or indicate a region that can be appended to.</source>
          <target state="translated">この値は、指定された長さよりも長い地域を説明またはに追加できる領域を示すことができます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Any attempt to write beyond this value will fail.</source>
          <target state="translated">この値を超える書き込みするあらゆる試みは失敗します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> properties.</source>
          <target state="translated"><ph id="ph1">`access`</ph>パラメーター セット、 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Note that specifying <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph> does not guarantee that the stream will be writable.</source>
          <target state="translated">指定する<ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>ストリームを書き込み可能になることは保証されません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The access parameters allow the implementer to create an object whose implementation can match the actual stream that is exposed.</source>
          <target state="translated">アクセスのパラメーターは、その実装が公開されている実際のストリームを照合できるオブジェクトを作成する実行者を使用します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、アンマネージ メモリの使用を読み書きする方法を示します、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">アンマネージ メモリ ブロックが割り当てられ、割り当て解除されたを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The user does not have the required permission.</source>
          <target state="translated">ユーザーに必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> 値は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 値が 0 未満です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> 値が 0 未満です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is greater than the <ph id="ph2">&lt;paramref name="capacity" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 値が <ph id="ph2">&lt;paramref name="capacity" /&gt;</ph> 値を超えています。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">アンマネージ メモリにアクセスします。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームを格納するバッファー。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">バッファー内のアンマネージ メモリ ストリームの開始バイト位置。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームの長さ。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The mode of file access to the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームへのファイル アクセスのモード。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset, length, and file access.</source>
          <target state="translated">指定したオフセット、長さ、およびファイル アクセスを使用して、セーフ バッファーに <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>Gets a value indicating whether a stream supports reading.</source>
          <target state="translated">ストリームが読み取りをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the object was created by a constructor with an <ph id="ph2">&lt;paramref name="access" /&gt;</ph> parameter that did not include reading the stream and if the stream is closed; otherwise, <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">ストリームの読み取りが含まれていない <ph id="ph2">&lt;paramref name="access" /&gt;</ph> パラメーターを持つコンストラクターによってオブジェクトが作成された場合、およびストリームが閉じている場合は <ph id="ph1">&lt;see langword="false" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>This property indicates whether the current stream object supports reading.</source>
          <target state="translated">このプロパティは、現在のストリーム オブジェクトが読み取りをサポートするかどうかを示します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、アンマネージ メモリの使用を読み書きする方法を示します、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">アンマネージ メモリ ブロックが割り当てられ、割り当て解除されたを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property before attempting to display the contents to the console.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>オブジェクトがチェックするメソッドに渡される、<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>内容をコンソールに表示する前にプロパティです。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source>Gets a value indicating whether a stream supports seeking.</source>
          <target state="translated">ストリームがシークをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the stream is closed; otherwise, <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">ストリームが閉じている場合は <ph id="ph1">&lt;see langword="false" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source>This property indicates whether the current stream object supports seeking.</source>
          <target state="translated">このプロパティは、現在のストリーム オブジェクトがシークをサポートするかどうかを示します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>Gets a value indicating whether a stream supports writing.</source>
          <target state="translated">ストリームが書き込みをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the object was created by a constructor with an <ph id="ph2">&lt;paramref name="access" /&gt;</ph> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">書き込みをサポートする <ph id="ph2">&lt;paramref name="access" /&gt;</ph> パラメーター値を持つコンストラクター、またはパラメーターを持たないコンストラクターによってオブジェクトが作成された場合、あるいはストリームが閉じている場合は <ph id="ph1">&lt;see langword="false" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>This property indicates whether the current stream object supports writing.</source>
          <target state="translated">このプロパティは、現在のストリームが書き込みをサポートするかどうかを示します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、アンマネージ メモリの使用を読み書きする方法を示します、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">アンマネージ メモリ ブロックが割り当てられ、割り当て解除されたを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property before attempting to write the data to the stream.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>オブジェクトがチェックするメソッドに渡される、<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph>ストリームにデータを書き込もうとする前にプロパティです。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).</source>
          <target state="translated">ストリームの長さ (サイズ)、またはストリームに割り当てられたメモリの総量 (容量) を取得します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>The size or capacity of the stream.</source>
          <target state="translated">ストリームのサイズまたは容量。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>This property returns the <ph id="ph1">`capacity`</ph> value provided to the constructor.</source>
          <target state="translated">このプロパティを返します、<ph id="ph1">`capacity`</ph>コンス トラクターに指定された値。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>If no <ph id="ph1">`capacity`</ph> value was specified when the stream was initialized, this property returns the stream length.</source>
          <target state="translated">ない場合は<ph id="ph1">`capacity`</ph>ストリームが初期化されたときに、値は指定された、このプロパティは、ストリームの長さを返します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> プロテクト呼び出します<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 呼び出す<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph>で<ph id="ph3">`disposing`</ph>'éý'<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> パラメーターが <ph id="ph2">`true`</ph> の場合、このメソッドは、この <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">このメソッドは、参照される各オブジェクトの <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> は、他のオブジェクトから複数回呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph>既に破棄されているを以前の呼び出しでオブジェクトを参照しないように注意する<ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">実装する方法の詳細についての<ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>Dispose メソッドの実装<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>Overrides the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph> method so that no action is performed.</source>
          <target state="translated">アクションが実行されないように、<ph id="ph1">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph> メソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>This method performs no action for this class but is included as part of the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> base class.</source>
          <target state="translated">このメソッド操作は実行されませんをこのクラスがの一部として含める、<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>基本クラスです。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>Since any data is written to RAM, this method is redundant.</source>
          <target state="translated">すべてのデータが書き込まれるため RAM をこのメソッドは冗長です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するためのトークン。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Overrides the <ph id="ph1">&lt;see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /&gt;</ph> method so that the operation is cancelled if specified, but no other action is performed.</source>
          <target state="translated">指定した場合にオペレーションがキャンセルされるが他のアクションは実行されないように、<ph id="ph1">&lt;see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /&gt;</ph> メソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph> 以降で利用可能</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">非同期のフラッシュ操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation isn’t cancelled, the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> calls the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;</ph> method, which means that no action performed.</source>
          <target state="translated">操作はキャンセルされていない場合、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>呼び出し、<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;</ph>メソッドで、アクションが実行されないことを意味します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer, or by using a pointer to an unmanaged memory location.</source>
          <target state="translated">セーフ バッファーで、またはアンマネージ メモリ位置へのポインターを使用して、<ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">アンマネージ メモリ位置へのポインター。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the memory to use.</source>
          <target state="translated">使用するメモリの長さ。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The total amount of memory assigned to the stream.</source>
          <target state="translated">ストリームに割り当てられたメモリの総量。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class by using a pointer to an unmanaged memory location.</source>
          <target state="translated">アンマネージ メモリ位置へのポインターを使用して、<ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This method is equivalent to the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor.</source>
          <target state="translated">ストリームの変数を設定する前に、ポインターを初期化する必要があるあり、そのため、パラメーター化されたコンス トラクターを呼び出すことはできませんの方法がサポートしています。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Such methods should use the default constructor, <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;</ph>, initialize the pointer, and then invoke the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Initialize%2A&gt;</ph> method.</source>
          <target state="translated">このようなメソッドは、既定のコンス トラクターを使用する必要があります<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;</ph>、ポインターを初期化、および次を呼び出し、<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Initialize%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The user does not have the required permission.</source>
          <target state="translated">ユーザーに必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> 値は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 値が 0 未満です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> 値が 0 未満です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is large enough to cause an overflow.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 値がオーバーフローの原因になりうる長さです。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">アンマネージ メモリにアクセスします。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームを格納するバッファー。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">バッファー内のアンマネージ メモリ ストリームの開始バイト位置。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームの長さ。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The mode of file access to the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームへのファイル アクセスのモード。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset, length, and file access.</source>
          <target state="translated">指定したオフセット、長さ、およびファイル アクセスを使用して、セーフ バッファーに <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>Gets the length of the data in a stream.</source>
          <target state="translated">ストリーム内のデータ長を取得します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The length of the data in the stream.</source>
          <target state="translated">ストリーム内のデータ長。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>If unchanged since the stream was initialized, this property returns the length value provided to the constructor.</source>
          <target state="translated">変更せずにストリームが初期化されたので、このプロパティは、コンス トラクターに渡された長さの値を返します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>If changes to the stream have occurred, this property reflects any changes to the length of the data.</source>
          <target state="translated">ストリームへの変更が発生した場合、このプロパティは、データの長さへの変更を表します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、アンマネージ メモリの使用を読み書きする方法を示します、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">アンマネージ メモリ ブロックが割り当てられ、割り当て解除されたを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>Gets or sets the current position in a stream.</source>
          <target state="translated">ストリーム内の現在位置を取得または設定します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The current position in the stream.</source>
          <target state="translated">ストリームの現在の位置。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>When a stream is initialized, this property is set to zero.</source>
          <target state="translated">ストリームが初期化されると、このプロパティは 0 に設定します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> methods.</source>
          <target state="translated">その領域を使用してアクセスできませんするストリームのキャパシティを超えるストリームの位置を設定できますが、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> will return 0 and <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> will throw a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> 0 を返しますと<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph>がスローされます、<ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>This support is primarily for design and code compatibility with basic stream operations.</source>
          <target state="translated">これは、主に、設計やコードとの互換性の基本的なストリーム操作です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The position is set to a value that is less than zero, or the position is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or results in overflow when added to the current pointer.</source>
          <target state="translated">位置が 0 未満の値に設定されています。または、位置が <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えているか、現在のポインターに追加したときにオーバーフローが発生しました。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Gets or sets a byte pointer to a stream based on the current position in the stream.</source>
          <target state="translated">ストリーム内の現在位置に基づいて、ストリームへのバイト ポインターを取得または設定します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>A byte pointer.</source>
          <target state="translated">バイト ポインター。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>To return a pointer to the entire stream, set the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;</ph> property to zero, and then call this property.</source>
          <target state="translated">全体のストリームへのポインターを返しますするには設定、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;</ph>プロパティを 0、し、このプロパティを呼び出します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The current position is larger than the capacity of the stream.</source>
          <target state="translated">現在位置は、ストリームの容量を超えています。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The position is being set is not a valid position in the current stream.</source>
          <target state="translated">設定されている位置は、現在のストリーム内の有効な位置ではありません。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The pointer is being set to a lower value than the starting position of the stream.</source>
          <target state="translated">ポインターがストリームの開始位置よりも低い値に設定されています。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The stream was initialized for use with a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> で使用するためにストリームが初期化されました。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /&gt;</ph> property is valid only for streams that are initialized with a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> pointer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /&gt;</ph> プロパティは、<ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> ポインターで初期化されるストリームに対してのみ有効です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>for calling unmanaged code, such as calling native code with platform invoke or COM integration.</source>
          <target state="translated">アンマネージ コードを呼び出すためのプラットフォームのネイティブ コードの呼び出しなど呼び出しまたは COM 統合します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">セキュリティ アクション:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">このメソッドが返されるとき、現在のソースから読み取ったバイトにより置き換えられた、<bpt id="p1">&lt;c&gt;</bpt>オフセット<ept id="p1">&lt;/c&gt;</ept>から (<bpt id="p2">&lt;c&gt;</bpt>オフセット<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>データの個数<ept id="p3">&lt;/c&gt;</ept> - 1) の間の値を持つ指定されたバイト配列を含みます。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">このパラメーターは初期化せずに渡されます。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin storing the data read from the current stream.</source>
          <target state="translated">現在のストリームから読み取ったデータの格納を開始する位置を示す<bpt id="p1">&lt;c&gt;</bpt>バッファー<ept id="p1">&lt;/c&gt;</ept>内の 0 から始まるバイト オフセット。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read from the current stream.</source>
          <target state="translated">現在のストリームから読み取る最大バイト数。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the specified number of bytes into the specified array.</source>
          <target state="translated">指定したバイト数を指定した配列に読み取ります。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">バッファーに読み取られた合計バイト数。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</source>
          <target state="translated">要求しただけのバイト数を読み取ることができなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 (ゼロ) になることがあります。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in the <ph id="ph2">`array`</ph> parameter (the buffer index) at which to begin reading, and the <ph id="ph3">`count`</ph> parameter gives the maximum number of bytes to be read from this stream.</source>
          <target state="translated"><ph id="ph1">`offset`</ph>パラメーターはバイトのオフセット、<ph id="ph2">`array`</ph>読み取りを開始する位置を示すパラメーター (バッファーのインデックス)、および<ph id="ph3">`count`</ph>パラメーターは、このストリームから読み取られるバイトの最大数を示します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に達した場合は、実際の数バイトを読み取り、または 0 を返されるです。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the read operation is successful, the current position of the stream is advanced by the number of bytes read.</source>
          <target state="translated">読み取り操作が成功した場合、ストリームの現在の位置は読み取られたバイト数で進められます。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the current position of the stream is unchanged.</source>
          <target state="translated">例外が発生する場合は、ストリームの現在の位置は変更されません。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> method returns zero only after reaching the end of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>メソッドには、ストリームの末尾に到達した場合にのみゼロが返されます。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Otherwise, <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> always reads at least one byte from the stream before returning.</source>
          <target state="translated">それ以外の場合、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>常に返す前に、ストリームから、少なくとも 1 バイトを読み取ります。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If no data is available from the stream upon a call to <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>, the method will block until at least one byte of data can be returned.</source>
          <target state="translated">データがないかどうかを呼び出すとストリームから<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>、少なくとも 1 バイトのデータを返すことができるまで、メソッドはブロックされます。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">実装は、ストリームの末尾に達していない場合でも、要求されたより少ないバイト数を返すことです。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、アンマネージ メモリの使用を読み書きする方法を示します、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">アンマネージ メモリ ブロックが割り当てられ、割り当て解除されたを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying memory does not support reading.</source>
          <target state="translated">基になるメモリが読み取りをサポートしていません。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="false" /&gt;</ph> に設定されている。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> パラメーターを <ph id="ph2">&lt;see langword="null" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターが 0 未満。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="count" /&gt;</ph> parameter is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> パラメーターが 0 未満。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The length of the buffer array minus the <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than the <ph id="ph2">&lt;paramref name="count" /&gt;</ph> parameter.</source>
          <target state="translated">バッファー配列の長さから <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターを引いた値が、<ph id="ph2">&lt;paramref name="count" /&gt;</ph> パラメーター未満です。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">データを書き込むバッファー。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">ストリームからのデータの書き込み開始位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取る最大バイト数。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するためのトークン。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads the specified number of bytes into the specified array.</source>
          <target state="translated">指定したバイト数を指定した配列に非同期に読み取ります。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph> 以降で利用可能</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">非同期の読み取り操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If an exception occurs during the read operation, it will be set as the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> of the property of the returned task.</source>
          <target state="translated">として設定する読み取り操作中に例外が発生した場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph>返されるタスクのプロパティのです。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</source>
          <target state="translated">ストリームから 1 バイトを読み取り、ストリーム内の位置を 1 バイト分進めます。ストリームの末尾の場合は -1 を返します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The unsigned byte cast to an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> object, or -1 if at the end of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> オブジェクトにキャストされた符号なしバイト。ストリームの末尾の場合は -1。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>Use this method to return integer values from the stream.</source>
          <target state="translated">このメソッドを使用して、ストリームから整数値を返します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、アンマネージ メモリの使用を読み書きする方法を示します、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">アンマネージ メモリ ブロックが割り当てられ、割り当て解除されたを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property before attempting to read and display the contents to the console.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>オブジェクトがチェックするメソッドに渡される、<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>プロパティを読み取り、内容をコンソールに表示する前にします。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The underlying memory does not support reading.</source>
          <target state="translated">基になるメモリが読み取りをサポートしていません。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The current position is at the end of the stream.</source>
          <target state="translated">現在の位置はストリームの末尾です。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The point relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> to begin seeking from.</source>
          <target state="translated">シークの開始位置 <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> からの相対的なポイント。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Specifies the beginning, the end, or the current position as a reference point for <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>, using a value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> 型の値を使用して、<bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> の参照ポイントとして先頭、末尾、または現在位置を指定します。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of the current stream to the given value.</source>
          <target state="translated">現在のストリームの現在位置を、指定した値に設定します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position in the stream.</source>
          <target state="translated">ストリームの新しい位置。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>For more information about seeking, see <ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>.</source>
          <target state="translated">シークの詳細については、次を参照してください。<ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>An attempt was made to seek before the beginning of the stream.</source>
          <target state="translated">ストリームの開始前に、シークしようとしました。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> value is larger than the maximum size of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 値がストリームの最大サイズを超えています。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> が無効です。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The length of the stream.</source>
          <target state="translated">ストリーム長。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>Sets the length of a stream to a specified value.</source>
          <target state="translated">ストリーム長を、指定した値に設定します。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the given value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">指定した値が、ストリームの現在の長さより小さい場合は、ストリームは切り捨てられます。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the given value is larger than the current length of the stream, the stream is expanded.</source>
          <target state="translated">指定した値が、ストリームの現在の長さより大きい場合は、ストリームが拡張されます。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.</source>
          <target state="translated">ストリームが展開されている場合、古いクライアント シークレットと新しい長さの間のストリームの内容は未定義です。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.SetLength%2A&gt;</ph> to work.</source>
          <target state="translated">ストリームは書き込みとシークの両方をサポートする必要があります<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.SetLength%2A&gt;</ph>動作をします。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>An I/O error has occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">基になるメモリが書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ストリームへの書き込みが行われようとしましたが、<ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The specified <ph id="ph1">&lt;paramref name="value" /&gt;</ph> exceeds the capacity of the stream.</source>
          <target state="translated">指定した <ph id="ph1">&lt;paramref name="value" /&gt;</ph> がストリームの容量を超えています。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The specified <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is negative.</source>
          <target state="translated">指定した <ph id="ph1">&lt;paramref name="value" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array from which to copy bytes to the current stream.</source>
          <target state="translated">現在のストリームにコピーするバイトのコピー元となるバイト配列。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The offset in the buffer at which to begin copying bytes to the current stream.</source>
          <target state="translated">現在のストリームへのバイトのコピーを開始する位置のバッファーのオフセット。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write to the current stream.</source>
          <target state="translated">現在のストリームに書き込むバイト数。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a block of bytes to the current stream using data from a buffer.</source>
          <target state="translated">バッファーのデータを使用して、現在のストリームにバイトのブロックを書き込みます。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writing occurs at the current position in the stream.</source>
          <target state="translated">ストリームの現在位置にある書き込みが発生します。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、アンマネージ メモリの使用を読み書きする方法を示します、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">アンマネージ メモリ ブロックが割り当てられ、割り当て解除されたを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">基になるメモリが書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ストリームへの書き込みが行われようとしましたが、<ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="count" /&gt;</ph> value is greater than the capacity of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 値がストリームの容量を超えています。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The position is at the end of the stream capacity.</source>
          <target state="translated">位置がストリーム容量の末尾です。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>One of the specified parameters is less than zero.</source>
          <target state="translated">指定したパラメーターのいずれかが 0 未満です。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter minus the length of the <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> parameter is less than the <ph id="ph3">&lt;paramref name="count" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターから <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> パラメーターの長さを引いた値が <ph id="ph3">&lt;paramref name="count" /&gt;</ph> パラメーター未満です。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">データの書き込み元となるバッファー。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">ストリームへのバイトのコピーを開始する位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。インデックス番号は 0 から始まります。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込む最大バイト数。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するためのトークン。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">現在のストリームにバイト シーケンスを非同期に書き込み、書き込んだバイト数だけストリーム内の現在位置を進め、キャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph> 以降で利用可能</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If an exception occurs during the write operation, it will be set as the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> of the property of the returned task.</source>
          <target state="translated">として設定する書き込み操作中に例外が発生した場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph>返されるタスクのプロパティのです。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>A byte value written to the stream.</source>
          <target state="translated">ストリームに書き込むバイト値。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the file stream.</source>
          <target state="translated">ファイル ストリームの現在位置にバイトを書き込みます。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">次のコード例は、アンマネージ メモリの使用を読み書きする方法を示します、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">アンマネージ メモリ ブロックが割り当てられ、割り当て解除されたを使用して、<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property before attempting to write the data to the stream.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>オブジェクトがチェックするメソッドに渡される、<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph>ストリームにデータを書き込もうとする前にプロパティです。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">基になるメモリが書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ストリームへの書き込みが行われようとしましたが、<ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The current position is at the end of the capacity of the stream.</source>
          <target state="translated">現在位置はストリームの容量の末尾です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The supplied <ph id="ph1">&lt;paramref name="value" /&gt;</ph> causes the stream exceed its maximum capacity.</source>
          <target state="translated">指定した <ph id="ph1">&lt;paramref name="value" /&gt;</ph> によって、ストリームがその最大容量を超えることになります。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>