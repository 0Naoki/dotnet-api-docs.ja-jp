<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FileStream.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52dd6be9b9c6d689c0fad77d5c674da06aa287de6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2dd6be9b9c6d689c0fad77d5c674da06aa287de6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.FileStream">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for a file, supporting both synchronous and asynchronous read and write operations.</source>
          <target state="translated">同期および非同期の読み取り操作と書き込み操作をサポートするファイル用の <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> を提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>から読み取り、書き込み. を開き、ファイル システム上のファイルを閉じると、パイプ、標準入力、および標準出力を含む他のオペレーティング システムのファイルに関連するハンドルを操作するクラス。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>You can use the <ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileStream.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.CopyTo%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> methods to perform synchronous operations, or the <ph id="ph5">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph> methods to perform asynchronous operations.</source>
          <target state="translated">使用することができます、 <ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.IO.FileStream.Write%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.Stream.CopyTo%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph>同期操作を実行するメソッドまたは<ph id="ph5">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>、 <ph id="ph7">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>、および<ph id="ph8">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>非同期操作を実行するメソッド。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>Use the asynchronous methods to perform resource-intensive file operations without blocking the main thread.</source>
          <target state="translated">非同期のメソッドを使用すると、メイン スレッドをブロックすることがなくリソースを消費するファイルの操作を実行できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> buffers input and output for better performance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> 入力バッファーとパフォーマンス向上のための出力。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">この型は、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">型の直接 dispose を呼び出す、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドで、 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">直接ことのない破棄する場合など、言語コンストラクトを使用して<ph id="ph1">`using`</ph>(C# の場合) または<ph id="ph2">`Using`</ph>(Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスに関するトピック。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property detects whether the file handle was opened asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph>プロパティは、ファイル ハンドルが非同期的に開かれたかどうかを検出します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>You specify this value when you create an instance of the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class using a constructor that has an <ph id="ph2">`isAsync`</ph>, <ph id="ph3">`useAsync`</ph>, or <ph id="ph4">`options`</ph> parameter.</source>
          <target state="translated">インスタンスを作成するときに、この値を指定する、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>クラスを持つコンス トラクターを使用して、 <ph id="ph2">`isAsync`</ph>、 <ph id="ph3">`useAsync`</ph>、または<ph id="ph4">`options`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>When the property is <ph id="ph1">`true`</ph>, the stream utilizes overlapped I/O to perform file operations asynchronously.</source>
          <target state="translated">このプロパティが<ph id="ph1">`true`</ph>ストリームがファイルの操作を非同期的に実行する重複 I/O を使用します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>However, the <ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property does not have to be <ph id="ph2">`true`</ph> to call the <ph id="ph3">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph>プロパティがある<ph id="ph2">`true`</ph>を呼び出して、 <ph id="ph3">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>、または<ph id="ph5">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>When the <ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property is <ph id="ph2">`false`</ph> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph>プロパティは<ph id="ph2">`false`</ph>および書き込み操作を非同期の読み込みを呼び出すと、引き続き、UI スレッドはブロックされませんが、実際の I/O 操作が同期的に実行します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph> method supports random access to files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>メソッドは、ファイルへのランダム アクセスをサポートしています。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph> allows the read/write position to be moved to any position within the file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph> ファイル内の任意の位置に移動する読み取り/書き込み位置を使用できます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>This is done with byte offset reference point parameters.</source>
          <target state="translated">これは、バイト オフセット参照ポイント パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <ph id="ph1">&lt;xref:System.IO.SeekOrigin&gt;</ph> enumeration.</source>
          <target state="translated">バイト オフセットは、シーク参照ポイント、可能性があります、先頭、現在の位置、または、基になるファイルの最後の 3 つのメンバーによって表される、<ph id="ph1">&lt;xref:System.IO.SeekOrigin&gt;</ph>列挙します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>Disk files always support random access.</source>
          <target state="translated">ディスク ファイルは、常にランダム アクセスをサポートします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>At the time of construction, the <ph id="ph1">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property value is set to <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph> depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <ph id="ph4">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property value is <ph id="ph5">`true`</ph>.</source>
          <target state="translated">、構築時に、<ph id="ph1">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>にプロパティの値が設定されている<ph id="ph2">`true`</ph>または<ph id="ph3">`false`</ph>基になるファイルの種類によって異なります。ファイルの種類を基になるが file_type_disk では、winbase.h で定義されている場合、<ph id="ph4">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>プロパティの値が<ph id="ph5">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>Otherwise, the <ph id="ph1">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property value is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">それ以外の場合、<ph id="ph1">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>プロパティの値が<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>If a process terminates with part of a file locked or closes a file that has outstanding locks, the behavior is undefined.</source>
          <target state="translated">プロセスは終了し、ロックされているファイルの一部か未解決のロックを含むファイルを動作は定義されません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>For directory operations and other file operations, see the <ph id="ph1">&lt;xref:System.IO.File&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Directory&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.Path&gt;</ph> classes.</source>
          <target state="translated">ディレクトリ操作とその他のファイル操作は、次を参照してください。、 <ph id="ph1">&lt;xref:System.IO.File&gt;</ph>、 <ph id="ph2">&lt;xref:System.IO.Directory&gt;</ph>、および<ph id="ph3">&lt;xref:System.IO.Path&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.File&gt;</ph> class is a utility class that has static methods primarily for the creation of <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> objects based on file paths.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.File&gt;</ph>クラスは、ユーティリティ クラスを作成するため、主に、静的メソッドを持つ<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクト ファイルのパスをベースにします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> class creates a stream from a byte array and is similar to the <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>クラスは、バイト配列からストリームを作成し、に似ていますが、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>Detection of Stream Position Changes</source>
          <target state="translated">ストリームの位置の変更の検出</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>When a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object does not have an exclusive hold on its handle, another thread could access the file handle concurrently and change the position of the operating system's file pointer that is associated with the file handle.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクトでは、そのハンドルでは、排他的に保持にない、別のスレッドでしたファイル ハンドルを同時にアクセスしたファイル ハンドルに関連付けられているオペレーティング システムのファイル ポインターの位置を変更します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>In this case, the cached position in the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object and the cached data in the buffer could be compromised.</source>
          <target state="translated">この場合、キャッシュ内の位置、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクトと、バッファーにキャッシュされたデータを侵害する可能性があります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object routinely performs checks on methods that access the cached buffer to ensure that the operating system's handle position is the same as the cached position used by the <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクトが、オペレーティング システムのハンドルの位置で使用されるキャッシュの位置と同じであることを確認するキャッシュされたバッファーにアクセスするメソッドに対して、チェックを定期的に実行、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>If an unexpected change in the handle position is detected in a call to the <ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph> method, the .NET Framework discards the contents of the buffer and reads the stream from the file again.</source>
          <target state="translated">呼び出しでハンドルの位置で予期しない変更が検出されたかどうか、<ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>メソッド、.NET Framework が、バッファーの内容を破棄し、もう一度、ファイルからのストリームを読み取ります。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>This can affect performance, depending on the size of the file and any other processes that could affect the position of the file stream.</source>
          <target state="translated">ファイル ストリームの位置に影響を与える他のプロセスと、ファイルのサイズに応じて、パフォーマンスに影響を与えることができます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>If an unexpected change in the handle position is detected in a call to the <ph id="ph1">&lt;xref:System.IO.FileStream.Write%2A&gt;</ph> method, the contents of the buffer are discarded and an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph> exception is thrown.</source>
          <target state="translated">呼び出しでハンドルの位置で予期しない変更が検出されたかどうか、<ph id="ph1">&lt;xref:System.IO.FileStream.Write%2A&gt;</ph>メソッド、バッファーの内容は破棄されますと<ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>例外がスローされます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>A <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object will not have an exclusive hold on its handle when either the <ph id="ph2">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph> property is accessed to expose the handle or the <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> object is given the <ph id="ph4">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph> property in its constructor.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクトでは、そのハンドルでは、排他的な保留はないときか、<ph id="ph2">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph>ハンドルを公開するプロパティにアクセスまたは<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクトが割り当てられて、<ph id="ph4">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph>コンス トラクター内のプロパティです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>The following example demonstrates some of the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> constructors.</source>
          <target state="translated">次の例では、一部を示しています、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>The following example shows how to write to a file asynchronously.</source>
          <target state="translated">次の例では、非同期的にファイルに書き込む方法を示します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>This code runs in a WPF app that has a TextBlock named UserInput and a button hooked up to a Click event handler that is named Button_Click.</source>
          <target state="translated">このコードを TextBlock UserInput および Button_Click という名前の Click イベント ハンドラーにフック ボタンという名前を持つ WPF アプリで実行されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileStream">
          <source>The file path needs to be changed to a file than exits on the computer.</source>
          <target state="translated">ファイルのパスは、コンピューター上に存在するよりもファイルに変更する必要があります。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="T:System.IO.FileStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>A file handle for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのファイル ハンドル。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>A constant that sets the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> プロパティと <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティを設定する定数。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class for the specified file handle, with the specified read/write permission.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定した読み取り/書き込みアクセス許可を使用して、指定したファイル ハンドル用に初期化します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>When <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> is called, the handle is also closed and the file's handle count is decremented.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>が呼び出されると、またはハンドルが閉じられ、ファイルのハンドル数は減少します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph> ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>For data safety, call <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id="ph2">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph>前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph2">`Close`</ph>が完了したらこのハンドルを使用します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id="ph3">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph> これらの既定値は、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>なしのコンス トラクター、<ph id="ph3">`FileShare`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source><ph id="ph1">&lt;paramref name="access" /&gt;</ph> is not a field of <ph id="ph2">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> のフィールドではありません。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified file handle, such as when <ph id="ph2">&lt;paramref name="access" /&gt;</ph> is <ph id="ph3">&lt;see langword="Write" /&gt;</ph> or <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> and the file handle is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph3">&lt;see langword="Write" /&gt;</ph> または <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイル ハンドルが読み取り専用に設定されているなど、指定したファイル ハンドルに対する <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>A file handle for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのファイル ハンドル。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>A constant that sets the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> プロパティと <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティを設定する定数。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class for the specified file handle, with the specified read/write permission.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定した読み取り/書き込みアクセス許可を使用して、指定したファイル ハンドル用に初期化します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>When <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> is called, the handle is also closed and the file's handle count is decremented.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>が呼び出されると、またはハンドルが閉じられ、ファイルのハンドル数は減少します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph> ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>For data safety, call <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id="ph2">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph>前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph2">`Close`</ph>が完了したらこのハンドルを使用します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id="ph3">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph> これらの既定値は、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>なしのコンス トラクター、<ph id="ph3">`FileShare`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source><ph id="ph1">&lt;paramref name="access" /&gt;</ph> is not a field of <ph id="ph2">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> のフィールドではありません。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified file handle, such as when <ph id="ph2">&lt;paramref name="access" /&gt;</ph> is <ph id="ph3">&lt;see langword="Write" /&gt;</ph> or <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> and the file handle is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph3">&lt;see langword="Write" /&gt;</ph> または <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイル ハンドルが読み取り専用に設定されているなど、指定したファイル ハンドルに対する <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>A relative or absolute path for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルの相対パスまたは絶対パス。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">ファイルを開く方法または作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class with the specified path and creation mode.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定したパスと作成モードを使用して初期化します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "<ph id="ph1">\\</ph><ph id="ph2">\\</ph>.\PHYSICALDRIVE0 ".</source>
          <target state="translated">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"<ph id="ph1">\\</ph><ph id="ph2">\\</ph>。 \PHYSICALDRIVE0"です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The <ph id="ph1">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</source>
          <target state="translated"><ph id="ph1">`path`</ph>パラメーターは、汎用名前付け規則 (UNC) 共有上のファイルを含む、ファイル名を指定できます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the <ph id="ph1">`FileStream`</ph> object has been closed, but read attempts will succeed).</source>
          <target state="translated">コンス トラクターには、ファイルを読み取り/書き込みアクセスが与えられます、読み取りアクセスの共有を開く (ファイルを開くまで、同じまたは別のプロセスでの書き込みは失敗の要求は、<ph id="ph1">`FileStream`</ph>オブジェクトが閉じられましたが、読み取り試行が成功する)。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>You cannot use this constructor to open read-only files; instead, you must use a constructor that accepts a <ph id="ph1">`FileAccess`</ph> parameter with the value set to <ph id="ph2">`FileAccess.Read`</ph>.</source>
          <target state="translated">このコンス トラクターを使用すると、読み取り専用のファイルを開くことはできません。代わりを受け取るコンス トラクターを使用する必要があります、<ph id="ph1">`FileAccess`</ph>パラメーター値を設定して<ph id="ph2">`FileAccess.Read`</ph>です。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The buffer size is set to the default size of 4096 bytes (4 KB).</source>
          <target state="translated">バッファー サイズは 4096 バイト (4 KB) の既定のサイズに設定されます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source><ph id="ph1">`path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</source>
          <target state="translated"><ph id="ph1">`path`</ph> ディスクに格納されているファイルである必要はありません。ストリーム経由でアクセスをサポートするシステムの任意の部分を指定できます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>For example, depending on the system, this class can access a physical device.</source>
          <target state="translated">たとえば、システムによってこのクラスは、物理デバイスをアクセスできます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id="ph2">`true`</ph> for all <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> <ph id="ph2">`true`</ph>すべて<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>ファイルをカプセル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>If <ph id="ph1">`path`</ph> indicates a device that does not support seeking, the <ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`path`</ph>シークをサポートしていないデバイスを示す、<ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>プロパティ、その結果を<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id="ph3">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph> これらの既定値は、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>なしのコンス トラクター、<ph id="ph3">`FileShare`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>For constructors without a <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> parameter, if the <ph id="ph2">`mode`</ph> parameter is set to <ph id="ph3">&lt;xref:System.IO.FileMode.Append&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileAccess.Write&gt;</ph> is the default access.</source>
          <target state="translated">なしのコンス トラクター、<ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph>パラメーター場合、<ph id="ph2">`mode`</ph>にパラメーターが設定されている<ph id="ph3">&lt;xref:System.IO.FileMode.Append&gt;</ph>、<ph id="ph4">&lt;xref:System.IO.FileAccess.Write&gt;</ph>は、既定のアクセス。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>Otherwise, the access is set to <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>.</source>
          <target state="translated">それ以外の場合、アクセスに設定されている<ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</source>
          <target state="translated">次のコード例では、データをバイト単位で、ファイルに書き込むし、データが正常に書き込まれたことを確認する方法を示します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は空の文字列 ("") であるか、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 以外の環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The file cannot be found, such as when <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> is <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> or <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph>, and the file specified by <ph id="ph4">&lt;paramref name="path" /&gt;</ph> does not exist.</source>
          <target state="translated">ファイルが見つかりません。たとえば、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> または <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph> の場合に、<ph id="ph4">&lt;paramref name="path" /&gt;</ph> で指定されたファイルが存在しません。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードではファイルが既に存在している必要があります。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>An I/O error, such as specifying <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> when the file specified by <ph id="ph2">&lt;paramref name="path" /&gt;</ph> already exists, occurred.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="path" /&gt;</ph> で指定したファイルが既に存在している場合に <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> が指定されているなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">マップされていないドライブにあるなど、指定されたパスが無効です。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> に無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>A file handle for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのファイル ハンドル。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> constant that sets the <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph3">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph4">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph4">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> プロパティと <ph id="ph3">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティを設定する <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> 定数。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than 0 indicating the buffer size.</source>
          <target state="translated">バッファー サイズを示す 0 より大きな正の <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは、4096 です。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class for the specified file handle, with the specified read/write permission, and buffer size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定した読み取り/書き込みアクセス許可、およびバッファー サイズを使用して、指定したファイル ハンドル用に初期化します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph> ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>For data safety, call <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id="ph2">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph>前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph2">`Close`</ph>が完了したらこのハンドルを使用します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>Alternately, read and write to the handle before calling this <ph id="ph1">`FileStream`</ph> constructor.</source>
          <target state="translated">または、読み書き可能なハンドルにこの関数を呼び出す前に<ph id="ph1">`FileStream`</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id="ph3">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph> これらの既定値は、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>なしのコンス トラクター、<ph id="ph3">`FileShare`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="handle" /&gt;</ph> parameter is an invalid handle.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> パラメーターが無効なハンドルです。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="handle" /&gt;</ph> parameter is a synchronous handle and it was used asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> パラメーターが同期ハンドルであるのに、非同期的に使用されました。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> parameter is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> パラメーターが負の値です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified file handle, such as when <ph id="ph2">&lt;paramref name="access" /&gt;</ph> is <ph id="ph3">&lt;see langword="Write" /&gt;</ph> or <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> and the file handle is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph3">&lt;see langword="Write" /&gt;</ph> または <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイル ハンドルが読み取り専用に設定されているなど、指定したファイル ハンドルに対する <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連付けられた列挙は: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>A file handle for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのファイル ハンドル。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>A constant that sets the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> プロパティと <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティを設定する定数。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the file handle will be owned by this <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> インスタンスがファイル ハンドルを所有する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class for the specified file handle, with the specified read/write permission and <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> instance ownership.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定した読み取り/書き込みアクセス許可と <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> インスタンスの所有権を使用して、指定したファイル ハンドル用に初期化します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the specified access to the file.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトには、ファイルに指定されたアクセスが与えられます。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>The ownership of the handle will be as specified.</source>
          <target state="translated">ハンドルの所有権がなりますとして指定します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>If this process owns the handle, a call to the <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method will also close the handle and the file's handle count is decremented.</source>
          <target state="translated">このプロセスへの呼び出し、ハンドルを所有しているかどうか、<ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>メソッドは、ハンドルを終了しても、ファイルのハンドル数は減少します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the default buffer size of 4096 bytes.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトが 4096 バイトまでの既定のバッファー サイズを指定します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph> ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>For data safety, call <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling methods other than <ph id="ph2">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph>前に、ハンドルを使用して、以外のメソッドは呼び出しません<ph id="ph2">`Close`</ph>が完了したら、ハンドルを使用します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id="ph3">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph> これらの既定値は、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>なしのコンス トラクター、<ph id="ph3">`FileShare`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="access" /&gt;</ph> is not a field of <ph id="ph2">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> のフィールドではありません。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified file handle, such as when <ph id="ph2">&lt;paramref name="access" /&gt;</ph> is <ph id="ph3">&lt;see langword="Write" /&gt;</ph> or <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> and the file handle is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph3">&lt;see langword="Write" /&gt;</ph> または <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイル ハンドルが読み取り専用に設定されているなど、指定したファイル ハンドルに対する <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>A relative or absolute path for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルの相対パスまたは絶対パス。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">ファイルを開く方法または作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>A constant that determines how the file can be accessed by the <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトがファイルにアクセスできる方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>This also determines the values returned by the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated">これにより、<ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> および <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティによって返される値も決まります。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source><ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> if <bpt id="p1">&lt;c&gt;</bpt>path<ept id="p1">&lt;/c&gt;</ept> specifies a disk file.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>path<ept id="p1">&lt;/c&gt;</ept> でディスク ファイルが指定されている場合、<ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> は <ph id="ph2">&lt;see langword="true" /&gt;</ph> になります。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class with the specified path, creation mode, and read/write permission.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定したパス、作成モード、および読み取り/書き込みアクセス許可を使用して初期化します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "<ph id="ph1">\\</ph><ph id="ph2">\\</ph>.\PHYSICALDRIVE0 ".</source>
          <target state="translated">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"<ph id="ph1">\\</ph><ph id="ph2">\\</ph>。 \PHYSICALDRIVE0"です。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The <ph id="ph1">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</source>
          <target state="translated"><ph id="ph1">`path`</ph>パラメーターは、汎用名前付け規則 (UNC) 共有上のファイルを含む、ファイル名を指定できます。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the <ph id="ph1">`FileStream`</ph> object has been closed, but read attempts will succeed).</source>
          <target state="translated">コンス トラクターには、ファイルを読み取り/書き込みアクセスが与えられます、読み取りアクセスの共有を開く (ファイルを開くまで、同じまたは別のプロセスでの書き込みは失敗の要求は、<ph id="ph1">`FileStream`</ph>オブジェクトが閉じられましたが、読み取り試行が成功する)。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The buffer size is set to the default size of 4096 bytes (4 KB).</source>
          <target state="translated">バッファー サイズは 4096 バイト (4 KB) の既定のサイズに設定されます。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source><ph id="ph1">`path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</source>
          <target state="translated"><ph id="ph1">`path`</ph> ディスクに格納されているファイルである必要はありません。ストリーム経由でアクセスをサポートするシステムの任意の部分を指定できます。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>For example, depending on the system, this class can access a physical device.</source>
          <target state="translated">たとえば、システムによってこのクラスは、物理デバイスをアクセスできます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id="ph2">`true`</ph> for all <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> <ph id="ph2">`true`</ph>すべて<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>ファイルをカプセル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>If <ph id="ph1">`path`</ph> indicates a device that does not support seeking, the <ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`path`</ph>シークをサポートしていないデバイスを示す、<ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>プロパティ、その結果を<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id="ph3">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph> これらの既定値は、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>なしのコンス トラクター、<ph id="ph3">`FileShare`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は空の文字列 ("") であるか、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 以外の環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The file cannot be found, such as when <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> is <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> or <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph>, and the file specified by <ph id="ph4">&lt;paramref name="path" /&gt;</ph> does not exist.</source>
          <target state="translated">ファイルが見つかりません。たとえば、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> または <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph> の場合に、<ph id="ph4">&lt;paramref name="path" /&gt;</ph> で指定されたファイルが存在しません。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードではファイルが既に存在している必要があります。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>An I/O error, such as specifying <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> when the file specified by <ph id="ph2">&lt;paramref name="path" /&gt;</ph> already exists, occurred.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="path" /&gt;</ph> で指定したファイルが既に存在している場合に <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> が指定されているなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">マップされていないドライブにあるなど、指定されたパスが無効です。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified <ph id="ph2">&lt;paramref name="path" /&gt;</ph>, such as when <ph id="ph3">&lt;paramref name="access" /&gt;</ph> is <ph id="ph4">&lt;see langword="Write" /&gt;</ph> or <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> and the file or directory is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph4">&lt;see langword="Write" /&gt;</ph> または <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイルまたはディレクトリが読み取り専用に設定されているなど、指定した <ph id="ph2">&lt;paramref name="path" /&gt;</ph> に対する <ph id="ph3">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> に無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>A file handle for the file that this <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">この <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのファイル ハンドル。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>A constant that sets the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> プロパティと <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティを設定する定数。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than 0 indicating the buffer size.</source>
          <target state="translated">バッファー サイズを示す 0 より大きな正の <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは、4096 です。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ハンドルが非同期的に開かれた場合 (重複 I/O モード用) は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定した読み取り/書き込みアクセス許可、バッファー サイズ、および同期状態または非同期状態を使用して、指定したファイル ハンドル用に初期化します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>You set the <ph id="ph1">`isAsync`</ph> parameter to <ph id="ph2">`true`</ph> to open the file handle asynchronously.</source>
          <target state="translated">設定する、<ph id="ph1">`isAsync`</ph>パラメーターを<ph id="ph2">`true`</ph>を非同期的にファイル ハンドルを開きます。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>When the parameter is <ph id="ph1">`true`</ph>, the stream utilizes overlapped I/O to perform file operations asynchronously.</source>
          <target state="translated">パラメーターの場合は<ph id="ph1">`true`</ph>ストリームがファイルの操作を非同期的に実行する重複 I/O を使用します。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>However, the parameter does not have to be <ph id="ph1">`true`</ph> to call the <ph id="ph2">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method.</source>
          <target state="translated">ただし、パラメーターは、する必要はありません<ph id="ph1">`true`</ph>を呼び出して、 <ph id="ph2">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>、または<ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>When the <ph id="ph1">`isAsync`</ph> parameter is <ph id="ph2">`false`</ph> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</source>
          <target state="translated">ときに、<ph id="ph1">`isAsync`</ph>パラメーターは<ph id="ph2">`false`</ph>および書き込み操作を非同期の読み込みを呼び出すと、引き続き、UI スレッドはブロックされませんが、実際の I/O 操作が同期的に実行します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph> ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>For data safety, call <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id="ph2">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph>前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph2">`Close`</ph>が完了したらこのハンドルを使用します。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>Alternately, read and write to the handle before calling this <ph id="ph1">`FileStream`</ph> constructor.</source>
          <target state="translated">または、読み書き可能なハンドルにこの関数を呼び出す前に<ph id="ph1">`FileStream`</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id="ph3">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph> これらの既定値は、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>なしのコンス トラクター、<ph id="ph3">`FileShare`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="handle" /&gt;</ph> parameter is an invalid handle.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> パラメーターが無効なハンドルです。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="handle" /&gt;</ph> parameter is a synchronous handle and it was used asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> パラメーターが同期ハンドルであるのに、非同期的に使用されました。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> parameter is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> パラメーターが負の値です。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified file handle, such as when <ph id="ph2">&lt;paramref name="access" /&gt;</ph> is <ph id="ph3">&lt;see langword="Write" /&gt;</ph> or <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> and the file handle is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph3">&lt;see langword="Write" /&gt;</ph> または <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイル ハンドルが読み取り専用に設定されているなど、指定したファイル ハンドルに対する <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連付けられた列挙は: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>A file handle for the file that this <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">この <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのファイル ハンドル。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>A constant that sets the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> プロパティと <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティを設定する定数。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the file handle will be owned by this <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> インスタンスがファイル ハンドルを所有する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than 0 indicating the buffer size.</source>
          <target state="translated">バッファー サイズを示す 0 より大きな正の <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは、4096 です。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class for the specified file handle, with the specified read/write permission, <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> instance ownership, and buffer size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定した読み取り/書き込みアクセス許可、<ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> インスタンスの所有権、およびバッファー サイズを使用して、指定したファイル ハンドル用に初期化します。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the specified access to the file.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトには、ファイルに指定されたアクセスが与えられます。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>The ownership of the handle will be as specified.</source>
          <target state="translated">ハンドルの所有権がなりますとして指定します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>If this <ph id="ph1">`FileStream`</ph> owns the handle, a call to the <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method will also close the handle.</source>
          <target state="translated">この場合<ph id="ph1">`FileStream`</ph>への呼び出し、ハンドルを所有している、<ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>メソッドは、ハンドルを終了してもします。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>In particular, the file's handle count is decremented.</source>
          <target state="translated">具体的には、ファイルのハンドル数は減少します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the specified buffer size.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトが指定したバッファー サイズを指定します。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph> ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>For data safety, call <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id="ph2">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph>前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph2">`Close`</ph>が完了したらこのハンドルを使用します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>Alternately, read and write to the handle before calling this <ph id="ph1">`FileStream`</ph> constructor.</source>
          <target state="translated">または、読み書き可能なハンドルにこの関数を呼び出す前に<ph id="ph1">`FileStream`</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id="ph3">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph> これらの既定値は、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>なしのコンス トラクター、<ph id="ph3">`FileShare`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなどの、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified file handle, such as when <ph id="ph2">&lt;paramref name="access" /&gt;</ph> is <ph id="ph3">&lt;see langword="Write" /&gt;</ph> or <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> and the file handle is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph3">&lt;see langword="Write" /&gt;</ph> または <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイル ハンドルが読み取り専用に設定されているなど、指定したファイル ハンドルに対する <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>A relative or absolute path for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルの相対パスまたは絶対パス。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">ファイルを開く方法または作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>A constant that determines how the file can be accessed by the <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトがファイルにアクセスできる方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>This also determines the values returned by the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated">これにより、<ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> および <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティによって返される値も決まります。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source><ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> if <bpt id="p1">&lt;c&gt;</bpt>path<ept id="p1">&lt;/c&gt;</ept> specifies a disk file.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>path<ept id="p1">&lt;/c&gt;</ept> でディスク ファイルが指定されている場合、<ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> は <ph id="ph2">&lt;see langword="true" /&gt;</ph> になります。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class with the specified path, creation mode, read/write permission, and sharing permission.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定したパス、作成モード、読み取り/書き込みアクセス許可、および共有アクセス許可を使用して初期化します。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "<ph id="ph1">\\</ph><ph id="ph2">\\</ph>.\PHYSICALDRIVE0 ".</source>
          <target state="translated">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"<ph id="ph1">\\</ph><ph id="ph2">\\</ph>。 \PHYSICALDRIVE0"です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The <ph id="ph1">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</source>
          <target state="translated"><ph id="ph1">`path`</ph>パラメーターは、汎用名前付け規則 (UNC) 共有上のファイルを含む、ファイル名を指定できます。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the <ph id="ph1">`FileStream`</ph> object has been closed, but read attempts will succeed).</source>
          <target state="translated">コンス トラクターには、ファイルを読み取り/書き込みアクセスが与えられます、読み取りアクセスの共有を開く (ファイルを開くまで、同じまたは別のプロセスでの書き込みは失敗の要求は、<ph id="ph1">`FileStream`</ph>オブジェクトが閉じられましたが、読み取り試行が成功する)。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The buffer size is set to the default size of 4096 bytes (4 KB).</source>
          <target state="translated">バッファー サイズは 4096 バイト (4 KB) の既定のサイズに設定されます。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source><ph id="ph1">`path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</source>
          <target state="translated"><ph id="ph1">`path`</ph> ディスクに格納されているファイルである必要はありません。ストリーム経由でアクセスをサポートするシステムの任意の部分を指定できます。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>For example, depending on the system, this class can access a physical device.</source>
          <target state="translated">たとえば、システムによってこのクラスは、物理デバイスをアクセスできます。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id="ph2">`true`</ph> for all <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> <ph id="ph2">`true`</ph>すべて<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>ファイルをカプセル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>If <ph id="ph1">`path`</ph> indicates a device that does not support seeking, the <ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`path`</ph>シークをサポートしていないデバイスを示す、<ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>プロパティ、その結果を<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.FileStream.Lock%2A&gt;</ph> method.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.IO.FileStream.Lock%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は空の文字列 ("") であるか、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 以外の環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The file cannot be found, such as when <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> is <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> or <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph>, and the file specified by <ph id="ph4">&lt;paramref name="path" /&gt;</ph> does not exist.</source>
          <target state="translated">ファイルが見つかりません。たとえば、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> または <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph> の場合に、<ph id="ph4">&lt;paramref name="path" /&gt;</ph> で指定されたファイルが存在しません。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードではファイルが既に存在している必要があります。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>An I/O error, such as specifying <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> when the file specified by <ph id="ph2">&lt;paramref name="path" /&gt;</ph> already exists, occurred.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="path" /&gt;</ph> で指定したファイルが既に存在している場合に <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> が指定されているなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The system is running Windows 98 or Windows 98 Second Edition and <ph id="ph1">&lt;paramref name="share" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="FileShare.Delete" /&gt;</ph>.</source>
          <target state="translated">システムで Windows 98 または Windows 98 Second Edition を実行しており、<ph id="ph1">&lt;paramref name="share" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileShare.Delete" /&gt;</ph> に設定されています。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">マップされていないドライブにあるなど、指定されたパスが無効です。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified <ph id="ph2">&lt;paramref name="path" /&gt;</ph>, such as when <ph id="ph3">&lt;paramref name="access" /&gt;</ph> is <ph id="ph4">&lt;see langword="Write" /&gt;</ph> or <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> and the file or directory is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph4">&lt;see langword="Write" /&gt;</ph> または <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイルまたはディレクトリが読み取り専用に設定されているなど、指定した <ph id="ph2">&lt;paramref name="path" /&gt;</ph> に対する <ph id="ph3">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> に無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>A file handle for the file that this <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">この <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのファイル ハンドル。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>A constant that sets the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> プロパティと <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティを設定する定数。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the file handle will be owned by this <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> インスタンスがファイル ハンドルを所有する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than 0 indicating the buffer size.</source>
          <target state="translated">バッファー サイズを示す 0 より大きな正の <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは、4096 です。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ハンドルが非同期的に開かれた場合 (重複 I/O モード用) は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class for the specified file handle, with the specified read/write permission, <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> instance ownership, buffer size, and synchronous or asynchronous state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定した読み取り/書き込みアクセス許可、<ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> インスタンスの所有権、バッファー サイズ、および同期状態または非同期状態を使用して、指定したファイル ハンドル用に初期化します。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the specified access to the file.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトには、ファイルに指定されたアクセスが与えられます。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>The ownership of the handle will be as specified.</source>
          <target state="translated">ハンドルの所有権がなりますとして指定します。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>If this <ph id="ph1">`FileStream`</ph> owns the handle, a call to the <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method will also close the handle.</source>
          <target state="translated">この場合<ph id="ph1">`FileStream`</ph>への呼び出し、ハンドルを所有している、<ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>メソッドは、ハンドルを終了してもします。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>In particular, the file's handle count is decremented.</source>
          <target state="translated">具体的には、ファイルのハンドル数は減少します。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the specified buffer size.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトが指定したバッファー サイズを指定します。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph> ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>For data safety, call <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id="ph2">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph>前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph2">`Close`</ph>が完了したらこのハンドルを使用します。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>Alternately, read and write to the handle before calling this <ph id="ph1">`FileStream`</ph> constructor.</source>
          <target state="translated">または、読み書き可能なハンドルにこの関数を呼び出す前に<ph id="ph1">`FileStream`</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id="ph3">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph> これらの既定値は、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>なしのコンス トラクター、<ph id="ph3">`FileShare`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="access" /&gt;</ph> is less than <ph id="ph2">&lt;see langword="FileAccess.Read" /&gt;</ph> or greater than <ph id="ph3">&lt;see langword="FileAccess.ReadWrite" /&gt;</ph> or <ph id="ph4">&lt;paramref name="bufferSize" /&gt;</ph> is less than or equal to 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileAccess.Read" /&gt;</ph> 未満であるか、<ph id="ph3">&lt;see langword="FileAccess.ReadWrite" /&gt;</ph> 以上であるか、または <ph id="ph4">&lt;paramref name="bufferSize" /&gt;</ph> が 0 以下です。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>The handle is invalid.</source>
          <target state="translated">ハンドルが正しくありません。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified file handle, such as when <ph id="ph2">&lt;paramref name="access" /&gt;</ph> is <ph id="ph3">&lt;see langword="Write" /&gt;</ph> or <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> and the file handle is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph3">&lt;see langword="Write" /&gt;</ph> または <ph id="ph4">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイル ハンドルが読み取り専用に設定されているなど、指定したファイル ハンドルに対する <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>for access to unmanaged code.</source>
          <target state="translated">アンマネージ コードにアクセスします。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>A relative or absolute path for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルの相対パスまたは絶対パス。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">ファイルを開く方法または作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>A constant that determines how the file can be accessed by the <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトがファイルにアクセスできる方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>This also determines the values returned by the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated">これにより、<ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> および <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティによって返される値も決まります。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> if <bpt id="p1">&lt;c&gt;</bpt>path<ept id="p1">&lt;/c&gt;</ept> specifies a disk file.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>path<ept id="p1">&lt;/c&gt;</ept> でディスク ファイルが指定されている場合、<ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> は <ph id="ph2">&lt;see langword="true" /&gt;</ph> になります。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than 0 indicating the buffer size.</source>
          <target state="translated">バッファー サイズを示す 0 より大きな正の <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは、4096 です。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class with the specified path, creation mode, read/write and sharing permission, and buffer size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定したパス、作成モード、読み取り/書き込みアクセス許可、共有アクセス許可、およびバッファー サイズを使用して初期化します。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "<ph id="ph1">\\</ph><ph id="ph2">\\</ph>.\PHYSICALDRIVE0 ".</source>
          <target state="translated">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"<ph id="ph1">\\</ph><ph id="ph2">\\</ph>。 \PHYSICALDRIVE0"です。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The <ph id="ph1">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</source>
          <target state="translated"><ph id="ph1">`path`</ph>パラメーターは、汎用名前付け規則 (UNC) 共有上のファイルを含む、ファイル名を指定できます。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source><ph id="ph1">`path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</source>
          <target state="translated"><ph id="ph1">`path`</ph> ディスクに格納されているファイルである必要はありません。ストリーム経由でアクセスをサポートするシステムの任意の部分を指定できます。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>For example, depending on the system, this class can access a physical device.</source>
          <target state="translated">たとえば、システムによってこのクラスは、物理デバイスをアクセスできます。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id="ph2">`true`</ph> for all <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> <ph id="ph2">`true`</ph>すべて<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>ファイルをカプセル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>If <ph id="ph1">`path`</ph> indicates a device that does not support seeking, the <ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`path`</ph>シークをサポートしていないデバイスを示す、<ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>プロパティ、その結果を<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は空の文字列 ("") であるか、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 以外の環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> が負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph>, <ph id="ph2">&lt;paramref name="access" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="share" /&gt;</ph> contain an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph>、<ph id="ph2">&lt;paramref name="access" /&gt;</ph>、または <ph id="ph3">&lt;paramref name="share" /&gt;</ph> に無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The file cannot be found, such as when <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> is <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> or <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph>, and the file specified by <ph id="ph4">&lt;paramref name="path" /&gt;</ph> does not exist.</source>
          <target state="translated">ファイルが見つかりません。たとえば、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> または <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph> の場合に、<ph id="ph4">&lt;paramref name="path" /&gt;</ph> で指定されたファイルが存在しません。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードではファイルが既に存在している必要があります。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>An I/O error, such as specifying <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> when the file specified by <ph id="ph2">&lt;paramref name="path" /&gt;</ph> already exists, occurred.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="path" /&gt;</ph> で指定したファイルが既に存在している場合に <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> が指定されているなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The system is running Windows 98 or Windows 98 Second Edition and <ph id="ph1">&lt;paramref name="share" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="FileShare.Delete" /&gt;</ph>.</source>
          <target state="translated">システムで Windows 98 または Windows 98 Second Edition を実行しており、<ph id="ph1">&lt;paramref name="share" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileShare.Delete" /&gt;</ph> に設定されています。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">マップされていないドライブにあるなど、指定されたパスが無効です。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified <ph id="ph2">&lt;paramref name="path" /&gt;</ph>, such as when <ph id="ph3">&lt;paramref name="access" /&gt;</ph> is <ph id="ph4">&lt;see langword="Write" /&gt;</ph> or <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> and the file or directory is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph4">&lt;see langword="Write" /&gt;</ph> または <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイルまたはディレクトリが読み取り専用に設定されているなど、指定した <ph id="ph2">&lt;paramref name="path" /&gt;</ph> に対する <ph id="ph3">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>A relative or absolute path for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルの相対パスまたは絶対パス。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">ファイルを開く方法または作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>A constant that determines how the file can be accessed by the <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトがファイルにアクセスできる方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>This also determines the values returned by the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated">これにより、<ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> および <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティによって返される値も決まります。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> if <bpt id="p1">&lt;c&gt;</bpt>path<ept id="p1">&lt;/c&gt;</ept> specifies a disk file.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>path<ept id="p1">&lt;/c&gt;</ept> でディスク ファイルが指定されている場合、<ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> は <ph id="ph2">&lt;see langword="true" /&gt;</ph> になります。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than 0 indicating the buffer size.</source>
          <target state="translated">バッファー サイズを示す 0 より大きな正の <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The default buffer size is 4096..</source>
          <target state="translated">既定のバッファー サイズは 4096 です。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>Specifies whether to use asynchronous I/O or synchronous I/O.</source>
          <target state="translated">非同期 I/O または同期 I/O のどちらを使用するかを指定します。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>However, note that the underlying operating system might not support asynchronous I/O, so when specifying <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the handle might be opened synchronously depending on the platform.</source>
          <target state="translated">ただし、基になるオペレーティング システムが非同期 I/O をサポートしていないことがあります。したがって、<ph id="ph1">&lt;see langword="true" /&gt;</ph> を指定しても、プラットフォームによってはハンドルが同期的に開かれることがあります。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>When opened asynchronously, the <ph id="ph1">&lt;see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> methods perform better on large reads or writes, but they might be much slower for small reads or writes.</source>
          <target state="translated">非同期的に開いた場合、<ph id="ph1">&lt;see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> メソッドと <ph id="ph2">&lt;see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> メソッドは、大量の読み取りまたは書き込み時にはパフォーマンスがより高くなりますが、少量の読み取りまたは書き込み時にはパフォーマンスが非常に低くなることがあります。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>If the application is designed to take advantage of asynchronous I/O, set the <bpt id="p1">&lt;c&gt;</bpt>useAsync<ept id="p1">&lt;/c&gt;</ept> parameter to <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">アプリケーションが非同期 I/O を利用するように設計されている場合は、<bpt id="p1">&lt;c&gt;</bpt>useAsync<ept id="p1">&lt;/c&gt;</ept> パラメーターを <ph id="ph1">&lt;see langword="true" /&gt;</ph> に設定します。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</source>
          <target state="translated">非同期 I/O を正しく使用すると、アプリケーションが 10 倍ほど高速化することがあります。ただし、非同期 I/O 用にアプリケーションを再設計せずに非同期 I/O を使用すると、パフォーマンスが 10 分の 1 ほど低下することがあります。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定したパス、作成モード、読み取り/書き込みアクセス許可、共有アクセス許可、バッファー サイズ、および同期状態または非同期状態を使用して初期化します。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "<ph id="ph1">\\</ph><ph id="ph2">\\</ph>.\PHYSICALDRIVE0 ".</source>
          <target state="translated">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"<ph id="ph1">\\</ph><ph id="ph2">\\</ph>。 \PHYSICALDRIVE0"です。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</source>
          <target state="translated"><ph id="ph1">`path`</ph>パラメーターは、汎用名前付け規則 (UNC) 共有上のファイルを含む、ファイル名を指定できます。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source><ph id="ph1">`path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</source>
          <target state="translated"><ph id="ph1">`path`</ph> ディスクに格納されているファイルである必要はありません。ストリーム経由でアクセスをサポートするシステムの任意の部分を指定できます。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>For example, depending on the system, this class can access a physical device.</source>
          <target state="translated">たとえば、システムによってこのクラスは、物理デバイスをアクセスできます。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id="ph2">`true`</ph> for all <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> <ph id="ph2">`true`</ph>すべて<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>ファイルをカプセル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`path`</ph> indicates a device that does not support seeking, the <ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`path`</ph>シークをサポートしていないデバイスを示す、<ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>プロパティ、その結果を<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The following code example shows how to asynchronously write data to a file and then verify that the data was written correctly.</source>
          <target state="translated">次のコード例では、非同期的にデータをファイルに書き込むし、データが正常に書き込まれたことを確認する方法を示します。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>A <ph id="ph1">`State`</ph> object is created to pass information from the main thread to the <ph id="ph2">`EndReadCallback`</ph> and <ph id="ph3">`EndWriteCallback`</ph> methods.</source>
          <target state="translated">A<ph id="ph1">`State`</ph>情報を渡すにはメイン スレッドからオブジェクトが作成された、<ph id="ph2">`EndReadCallback`</ph>と<ph id="ph3">`EndWriteCallback`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は空の文字列 ("") であるか、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 以外の環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> が負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph>, <ph id="ph2">&lt;paramref name="access" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="share" /&gt;</ph> contain an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph>、<ph id="ph2">&lt;paramref name="access" /&gt;</ph>、または <ph id="ph3">&lt;paramref name="share" /&gt;</ph> に無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The file cannot be found, such as when <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> is <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> or <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph>, and the file specified by <ph id="ph4">&lt;paramref name="path" /&gt;</ph> does not exist.</source>
          <target state="translated">ファイルが見つかりません。たとえば、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> または <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph> の場合に、<ph id="ph4">&lt;paramref name="path" /&gt;</ph> で指定されたファイルが存在しません。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードではファイルが既に存在している必要があります。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>An I/O error, such as specifying <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> when the file specified by <ph id="ph2">&lt;paramref name="path" /&gt;</ph> already exists, occurred.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="path" /&gt;</ph> で指定したファイルが既に存在している場合に <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> が指定されているなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The system is running Windows 98 or Windows 98 Second Edition and <ph id="ph1">&lt;paramref name="share" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="FileShare.Delete" /&gt;</ph>.</source>
          <target state="translated">システムで Windows 98 または Windows 98 Second Edition を実行しており、<ph id="ph1">&lt;paramref name="share" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileShare.Delete" /&gt;</ph> に設定されています。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">マップされていないドライブにあるなど、指定されたパスが無効です。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified <ph id="ph2">&lt;paramref name="path" /&gt;</ph>, such as when <ph id="ph3">&lt;paramref name="access" /&gt;</ph> is <ph id="ph4">&lt;see langword="Write" /&gt;</ph> or <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> and the file or directory is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph4">&lt;see langword="Write" /&gt;</ph> または <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイルまたはディレクトリが読み取り専用に設定されているなど、指定した <ph id="ph2">&lt;paramref name="path" /&gt;</ph> に対する <ph id="ph3">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A relative or absolute path for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルの相対パスまたは絶対パス。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">ファイルを開く方法または作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A constant that determines how the file can be accessed by the <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトがファイルにアクセスできる方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>This also determines the values returned by the <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> properties of the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> object.</source>
          <target state="translated">これにより、<ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanRead" /&gt;</ph> および <ph id="ph2">&lt;see cref="P:System.IO.FileStream.CanWrite" /&gt;</ph> プロパティによって返される値も決まります。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> if <bpt id="p1">&lt;c&gt;</bpt>path<ept id="p1">&lt;/c&gt;</ept> specifies a disk file.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>path<ept id="p1">&lt;/c&gt;</ept> でディスク ファイルが指定されている場合、<ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> は <ph id="ph2">&lt;see langword="true" /&gt;</ph> になります。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than 0 indicating the buffer size.</source>
          <target state="translated">バッファー サイズを示す 0 より大きな正の <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは、4096 です。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A value that specifies additional file options.</source>
          <target state="translated">追加のファイル オプションを指定する値。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定したパス、作成モード、読み取り/書き込みアクセス許可、共有アクセス許可、同一のファイルに対して他の FileStream が保有できるアクセス、バッファー サイズ、および追加のファイル オプションを使用して初期化します。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "<ph id="ph1">\\</ph><ph id="ph2">\\</ph>.\PHYSICALDRIVE0 ".</source>
          <target state="translated">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"<ph id="ph1">\\</ph><ph id="ph2">\\</ph>。 \PHYSICALDRIVE0"です。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The <ph id="ph1">`fileOptions`</ph> parameter is used to provide access to more advanced operations that can be leveraged when creating a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`fileOptions`</ph>を作成するときに利用できる高度な操作へのアクセスを提供するパラメーターが使用される、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The <ph id="ph1">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</source>
          <target state="translated"><ph id="ph1">`path`</ph>パラメーターは、汎用名前付け規則 (UNC) 共有上のファイルを含む、ファイル名を指定できます。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">`path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</source>
          <target state="translated"><ph id="ph1">`path`</ph> ディスクに格納されているファイルである必要はありません。ストリーム経由でアクセスをサポートするシステムの任意の部分を指定できます。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>For example, depending on the system, this class can access a physical device.</source>
          <target state="translated">たとえば、システムによってこのクラスは、物理デバイスをアクセスできます。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id="ph2">`true`</ph> for all <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> <ph id="ph2">`true`</ph>すべて<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>ファイルをカプセル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>If <ph id="ph1">`path`</ph> indicates a device that does not support seeking, the <ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`path`</ph>シークをサポートしていないデバイスを示す、<ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>プロパティ、その結果を<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The following example writes data to a file and then reads the data using the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
          <target state="translated">次の例は、データをファイルに書き込み、次を使用してデータを読み取り、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は空の文字列 ("") であるか、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 以外の環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> が負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph>, <ph id="ph2">&lt;paramref name="access" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="share" /&gt;</ph> contain an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph>、<ph id="ph2">&lt;paramref name="access" /&gt;</ph>、または <ph id="ph3">&lt;paramref name="share" /&gt;</ph> に無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The file cannot be found, such as when <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> is <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> or <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph>, and the file specified by <ph id="ph4">&lt;paramref name="path" /&gt;</ph> does not exist.</source>
          <target state="translated">ファイルが見つかりません。たとえば、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> または <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph> の場合に、<ph id="ph4">&lt;paramref name="path" /&gt;</ph> で指定されたファイルが存在しません。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードではファイルが既に存在している必要があります。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>An I/O error, such as specifying <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> when the file specified by <ph id="ph2">&lt;paramref name="path" /&gt;</ph> already exists, occurred.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="path" /&gt;</ph> で指定したファイルが既に存在している場合に <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> が指定されているなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">マップされていないドライブにあるなど、指定されたパスが無効です。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified <ph id="ph2">&lt;paramref name="path" /&gt;</ph>, such as when <ph id="ph3">&lt;paramref name="access" /&gt;</ph> is <ph id="ph4">&lt;see langword="Write" /&gt;</ph> or <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> and the file or directory is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph4">&lt;see langword="Write" /&gt;</ph> または <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイルまたはディレクトリが読み取り専用に設定されているなど、指定した <ph id="ph2">&lt;paramref name="path" /&gt;</ph> に対する <ph id="ph3">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.IO.FileOptions.Encrypted" /&gt;</ph> is specified for <ph id="ph2">&lt;paramref name="options" /&gt;</ph>, but file encryption is not supported on the current platform.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.IO.FileOptions.Encrypted" /&gt;</ph> が <ph id="ph2">&lt;paramref name="options" /&gt;</ph> に対して指定されていますが、ファイル暗号化は現在のプラットフォームでサポートされていません。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A relative or absolute path for the file that the current <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルの相対パスまたは絶対パス。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">ファイルを開く方法または作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A constant that determines the access rights to use when creating access and audit rules for the file.</source>
          <target state="translated">ファイルのアクセス規則および監査規則の作成時に使用するアクセス権を決定する定数。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than 0 indicating the buffer size.</source>
          <target state="translated">バッファー サイズを示す 0 より大きな正の <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは、4096 です。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>A constant that specifies additional file options.</source>
          <target state="translated">追加のファイル オプションを指定する定数。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定したパス、作成モード、アクセス権、共有アクセス許可、バッファー サイズ、および追加のファイル オプションを使用して初期化します。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "<ph id="ph1">\\</ph><ph id="ph2">\\</ph>.\PHYSICALDRIVE0 ".</source>
          <target state="translated">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"<ph id="ph1">\\</ph><ph id="ph2">\\</ph>。 \PHYSICALDRIVE0"です。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>Use this <ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</ph> constructor to apply access rights at the point of creation of a file.</source>
          <target state="translated">これを使用して<ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</ph>権利ファイルの作成時点でのアクセスを適用するコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>To access or modify rights on an existing file, consider using the <ph id="ph1">&lt;xref:System.IO.File.GetAccessControl%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.File.SetAccessControl%2A&gt;</ph> methods.</source>
          <target state="translated">アクセスまたは既存のファイルに対して権限を変更して、使用を検討、<ph id="ph1">&lt;xref:System.IO.File.GetAccessControl%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.File.SetAccessControl%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The <ph id="ph1">`fileOptions`</ph> parameter is used to provide access to more advanced operations that can be leveraged when creating a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`fileOptions`</ph>を作成するときに利用できる高度な操作へのアクセスを提供するパラメーターが使用される、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The <ph id="ph1">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</source>
          <target state="translated"><ph id="ph1">`path`</ph>パラメーターは、汎用名前付け規則 (UNC) 共有上のファイルを含む、ファイル名を指定できます。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">`path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</source>
          <target state="translated"><ph id="ph1">`path`</ph> ディスクに格納されているファイルである必要はありません。ストリーム経由でアクセスをサポートするシステムの任意の部分を指定できます。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>For example, depending on the system, this class can access a physical device.</source>
          <target state="translated">たとえば、システムによってこのクラスは、物理デバイスをアクセスできます。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id="ph2">`true`</ph> for all <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> <ph id="ph2">`true`</ph>すべて<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>ファイルをカプセル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>If <ph id="ph1">`path`</ph> indicates a device that does not support seeking, the <ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`path`</ph>シークをサポートしていないデバイスを示す、<ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>プロパティ、その結果を<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は空の文字列 ("") であるか、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 以外の環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> が負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph>, <ph id="ph2">&lt;paramref name="access" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="share" /&gt;</ph> contain an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph>、<ph id="ph2">&lt;paramref name="access" /&gt;</ph>、または <ph id="ph3">&lt;paramref name="share" /&gt;</ph> に無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The file cannot be found, such as when <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> is <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> or <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph>, and the file specified by <ph id="ph4">&lt;paramref name="path" /&gt;</ph> does not exist.</source>
          <target state="translated">ファイルが見つかりません。たとえば、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> または <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph> の場合に、<ph id="ph4">&lt;paramref name="path" /&gt;</ph> で指定されたファイルが存在しません。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードではファイルが既に存在している必要があります。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The current operating system is not Windows NT or later.</source>
          <target state="translated">現在のオペレーティング システムは Windows NT 以降ではありません。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>An I/O error, such as specifying <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> when the file specified by <ph id="ph2">&lt;paramref name="path" /&gt;</ph> already exists, occurred.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="path" /&gt;</ph> で指定したファイルが既に存在している場合に <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> が指定されているなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">マップされていないドライブにあるなど、指定されたパスが無効です。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified <ph id="ph2">&lt;paramref name="path" /&gt;</ph>, such as when <ph id="ph3">&lt;paramref name="access" /&gt;</ph> is <ph id="ph4">&lt;see langword="Write" /&gt;</ph> or <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> and the file or directory is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph4">&lt;see langword="Write" /&gt;</ph> または <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイルまたはディレクトリが読み取り専用に設定されているなど、指定した <ph id="ph2">&lt;paramref name="path" /&gt;</ph> に対する <ph id="ph3">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.IO.FileOptions.Encrypted" /&gt;</ph> is specified for <ph id="ph2">&lt;paramref name="options" /&gt;</ph>, but file encryption is not supported on the current platform.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.IO.FileOptions.Encrypted" /&gt;</ph> が <ph id="ph2">&lt;paramref name="options" /&gt;</ph> に対して指定されていますが、ファイル暗号化は現在のプラットフォームでサポートされていません。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>The specified <ph id="ph1">&lt;paramref name="path" /&gt;</ph>, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定した <ph id="ph1">&lt;paramref name="path" /&gt;</ph>、ファイル名、またはその両方がシステム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>A relative or absolute path for the file that the current <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルの相対パスまたは絶対パス。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">ファイルを開く方法または作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>A constant that determines the access rights to use when creating access and audit rules for the file.</source>
          <target state="translated">ファイルのアクセス規則および監査規則の作成時に使用するアクセス権を決定する定数。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than 0 indicating the buffer size.</source>
          <target state="translated">バッファー サイズを示す 0 より大きな正の <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは、4096 です。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>A constant that specifies additional file options.</source>
          <target state="translated">追加のファイル オプションを指定する定数。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>A constant that determines the access control and audit security for the file.</source>
          <target state="translated">ファイルのアクセス制御と監査セキュリティを決定する定数。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> クラスの新しいインスタンスを、指定したパス、作成モード、アクセス権、共有アクセス許可、バッファー サイズ、追加のファイル オプション、アクセス制御、および監査セキュリティを使用して初期化します。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "<ph id="ph1">\\</ph><ph id="ph2">\\</ph>.\PHYSICALDRIVE0 ".</source>
          <target state="translated">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"<ph id="ph1">\\</ph><ph id="ph2">\\</ph>。 \PHYSICALDRIVE0"です。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>Use this <ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</ph> constructor to apply access rights at the point of creation of a file.</source>
          <target state="translated">これを使用して<ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</ph>権利ファイルの作成時点でのアクセスを適用するコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>To access or modify rights on an existing file, consider using the <ph id="ph1">&lt;xref:System.IO.File.GetAccessControl%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.File.SetAccessControl%2A&gt;</ph> methods.</source>
          <target state="translated">アクセスまたは既存のファイルに対して権限を変更して、使用を検討、<ph id="ph1">&lt;xref:System.IO.File.GetAccessControl%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.File.SetAccessControl%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The <ph id="ph1">`fileOptions`</ph> parameter is used to provide access to more advanced operations that can be leveraged when creating a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`fileOptions`</ph>を作成するときに利用できる高度な操作へのアクセスを提供するパラメーターが使用される、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The <ph id="ph1">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</source>
          <target state="translated"><ph id="ph1">`path`</ph>パラメーターは、汎用名前付け規則 (UNC) 共有上のファイルを含む、ファイル名を指定できます。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source><ph id="ph1">`path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</source>
          <target state="translated"><ph id="ph1">`path`</ph> ディスクに格納されているファイルである必要はありません。ストリーム経由でアクセスをサポートするシステムの任意の部分を指定できます。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>For example, depending on the system, this class can access a physical device.</source>
          <target state="translated">たとえば、システムによってこのクラスは、物理デバイスをアクセスできます。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id="ph2">`true`</ph> for all <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> <ph id="ph2">`true`</ph>すべて<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>ファイルをカプセル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>If <ph id="ph1">`path`</ph> indicates a device that does not support seeking, the <ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`path`</ph>シークをサポートしていないデバイスを示す、<ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>プロパティ、その結果を<ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>は<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The following example writes data to a file and then reads the data using the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
          <target state="translated">次の例は、データをファイルに書き込み、次を使用してデータを読み取り、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> は空の文字列 ("") であるか、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> がファイル以外のデバイスを参照しています (NTFS 以外の環境の "con:"、"com1:"、"lpt1:" など)。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> が負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph>, <ph id="ph2">&lt;paramref name="access" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="share" /&gt;</ph> contain an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph>、<ph id="ph2">&lt;paramref name="access" /&gt;</ph>、または <ph id="ph3">&lt;paramref name="share" /&gt;</ph> に無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The file cannot be found, such as when <ph id="ph1">&lt;paramref name="mode" /&gt;</ph> is <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> or <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph>, and the file specified by <ph id="ph4">&lt;paramref name="path" /&gt;</ph> does not exist.</source>
          <target state="translated">ファイルが見つかりません。たとえば、<ph id="ph1">&lt;paramref name="mode" /&gt;</ph> が <ph id="ph2">&lt;see langword="FileMode.Truncate" /&gt;</ph> または <ph id="ph3">&lt;see langword="FileMode.Open" /&gt;</ph> の場合に、<ph id="ph4">&lt;paramref name="path" /&gt;</ph> で指定されたファイルが存在しません。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードではファイルが既に存在している必要があります。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>An I/O error, such as specifying <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> when the file specified by <ph id="ph2">&lt;paramref name="path" /&gt;</ph> already exists, occurred.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="path" /&gt;</ph> で指定したファイルが既に存在している場合に <ph id="ph1">&lt;see langword="FileMode.CreateNew" /&gt;</ph> が指定されているなどの I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The stream has been closed.</source>
          <target state="translated">ストリームは閉じられました。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">マップされていないドライブにあるなど、指定されたパスが無効です。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The <ph id="ph1">&lt;paramref name="access" /&gt;</ph> requested is not permitted by the operating system for the specified <ph id="ph2">&lt;paramref name="path" /&gt;</ph>, such as when <ph id="ph3">&lt;paramref name="access" /&gt;</ph> is <ph id="ph4">&lt;see langword="Write" /&gt;</ph> or <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> and the file or directory is set for read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="access" /&gt;</ph> が <ph id="ph4">&lt;see langword="Write" /&gt;</ph> または <ph id="ph5">&lt;see langword="ReadWrite" /&gt;</ph> であるのに、ファイルまたはディレクトリが読み取り専用に設定されているなど、指定した <ph id="ph2">&lt;paramref name="path" /&gt;</ph> に対する <ph id="ph3">&lt;paramref name="access" /&gt;</ph> 要求がオペレーティング システムで許可されません。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source><ph id="ph1">&lt;see cref="F:System.IO.FileOptions.Encrypted" /&gt;</ph> is specified for <ph id="ph2">&lt;paramref name="options" /&gt;</ph>, but file encryption is not supported on the current platform.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.IO.FileOptions.Encrypted" /&gt;</ph> が <ph id="ph2">&lt;paramref name="options" /&gt;</ph> に対して指定されていますが、ファイル暗号化は現在のプラットフォームでサポートされていません。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The specified <ph id="ph1">&lt;paramref name="path" /&gt;</ph>, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定した <ph id="ph1">&lt;paramref name="path" /&gt;</ph>、ファイル名、またはその両方がシステム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>The current operating system is not Windows NT or later.</source>
          <target state="translated">現在のオペレーティング システムは Windows NT 以降ではありません。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>for reading, writing, and appending to files.</source>
          <target state="translated">読み取り、書き込み、およびファイルに追加します。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>.</source>
          <target state="translated">関連する列挙: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph>、 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /&gt;</ph>、および<ph id="ph3">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to read data into.</source>
          <target state="translated">データを読み取るバッファー。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which to begin reading.</source>
          <target state="translated">読み取りの開始位置を示す <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取る最大バイト数。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The method to be called when the asynchronous read operation is completed.</source>
          <target state="translated">非同期の読み取り操作が完了したときに呼び出されるメソッド。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">この特定の非同期読み取り要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">非同期の読み込み動作を開始します。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(代わりに、<ph id="ph1">&lt;see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> の使用を検討してください。)</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that references the asynchronous read.</source>
          <target state="translated">非同期の読み取りを参照するオブジェクト。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある<ph id="ph1">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph>ファイルの非同期操作を実装します。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど<ph id="ph2">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>、ヘルプ ファイルの非同期操作をより簡単に実装します。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> must be called exactly once for every call to <ph id="ph2">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> 呼び出しごとに 1 回だけ呼び出す必要があります<ph id="ph2">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</source>
          <target state="translated">別の読み取りを開始する前に読み取りプロセスを終了に失敗すると、デッドロックなど、望ましくない動作可能性があります。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> provides two different modes of operation: synchronous I/O and asynchronous I/O.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> 操作の 2 つの異なるモードを提供します。 I/O 同期と非同期 I/O です。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>While either can be used, the underlying operating system resources might allow access in only one of these modes.</source>
          <target state="translated">いずれかを使用できますが、基になるオペレーティング システムのリソースは、これらのモードの 1 つのみで、アクセスを許可する場合があります。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>By default, <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> opens the operating system handle synchronously.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>オペレーティング システム ハンドルを同期的が開きます。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In Windows, this slows down asynchronous methods.</source>
          <target state="translated">Windows では、非同期メソッドの速度が低下します。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If asynchronous methods are used, use the <ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">非同期メソッドを使用している場合を使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.CanRead%2A&gt;</ph>プロパティを現在のインスタンスが読み取りをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated">例外が直ちにスローされる場合は、ストリームが閉じているか、無効な引数を渡す、<ph id="ph1">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous read request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph>.</source>
          <target state="translated">IO 要求中にディスク障害など、非同期読み取り要求中に発生したエラーは、スレッド プールのスレッドで発生しへの呼び出しに可視になる<ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> must be called with this <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to find out how many bytes were read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> これを呼び出す必要があります<ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>に読み取られたバイト数を確認します。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">複数の非同期要求は、不定の要求の完了の順序をレンダリングします。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The array length minus <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="numBytes" /&gt;</ph>.</source>
          <target state="translated">配列長から <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> を差し引いた値が <ph id="ph2">&lt;paramref name="numBytes" /&gt;</ph> より小さい値です。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="numBytes" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="numBytes" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An asynchronous read was attempted past the end of the file.</source>
          <target state="translated">非同期の読み取りがファイルの終わりを超えて試行されました。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer containing data to write to the current stream.</source>
          <target state="translated">現在のストリームに書き込むデータを格納しているバッファー。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated">現在のストリームへのバイトのコピーを開始する位置を示す <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。インデックス番号は 0 から始まります。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込む最大バイト数。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The method to be called when the asynchronous write operation is completed.</source>
          <target state="translated">非同期の書き込み操作が完了したときに呼び出されるメソッド。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">この特定の非同期書き込み要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を開始します。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(代わりに、<ph id="ph1">&lt;see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> の使用を検討してください。)</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that references the asynchronous write.</source>
          <target state="translated">非同期の書き込みを参照するオブジェクト。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある<ph id="ph1">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph>ファイルの非同期操作を実装します。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど<ph id="ph2">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>、ヘルプ ファイルの非同期操作をより簡単に実装します。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> 1 回だけ呼び出す必要がありますすべて<ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>から<ph id="ph3">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> will block until the I/O operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> I/O 操作が完了するまでブロックされます。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> provides two different modes of operation: synchronous I/O and asynchronous I/O.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> 操作の 2 つの異なるモードを提供します。 I/O 同期と非同期 I/O です。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>While either can be used, the underlying operating system resources might allow access in only one of these modes.</source>
          <target state="translated">いずれかを使用できますが、基になるオペレーティング システムのリソースは、これらのモードの 1 つのみで、アクセスを許可する場合があります。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>By default, <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> opens the operating system handle synchronously.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>オペレーティング システム ハンドルを同期的が開きます。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In Windows, this slows down asynchronous methods.</source>
          <target state="translated">Windows では、非同期メソッドの速度が低下します。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If asynchronous methods are used, use the <ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">非同期メソッドを使用している場合を使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated">例外が直ちにスローされる場合は、ストリームが閉じているか、無効な引数を渡す、<ph id="ph1">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <ph id="ph1">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph>.</source>
          <target state="translated">IO 要求中にディスク障害など、非同期書き込み要求中に発生したエラーは、スレッド プールのスレッドで発生しへの呼び出しに可視になる<ph id="ph1">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">複数の非同期要求は、不定の要求の完了の順序をレンダリングします。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> length minus <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> is less than <ph id="ph3">&lt;paramref name="numBytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> の長さから <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> を引いた長さが <ph id="ph3">&lt;paramref name="numBytes" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="numBytes" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="numBytes" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしません。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.CanRead">
          <source>Gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">現在のストリームが読み取りをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports reading; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the stream is closed or was opened with write-only access.</source>
          <target state="translated">ストリームが読み取りをサポートしている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。ストリームが閉じているか、書き込み専用アクセスで開かれた場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanRead">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id="ph2">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileStream.ReadByte%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph> methods throw a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">派生したクラス場合<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>読み取りをサポートしませんへの呼び出し、 <ph id="ph2">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.FileStream.ReadByte%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>メソッドをスロー、<ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanRead">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanRead">
          <source>The following example demonstrates a use of the <ph id="ph1">`CanRead`</ph> property.</source>
          <target state="translated">次の例での使用、<ph id="ph1">`CanRead`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanRead">
          <source>The output of this code is "MyFile.txt is not writable."</source>
          <target state="translated">このコードによる出力は「MyFile.txt 書き込みができません」</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanRead">
          <source>To get the output message "MyFile.txt can be both written to and read from.", change the <ph id="ph1">`FileAccess`</ph> parameter to <ph id="ph2">`ReadWrite`</ph> in the <ph id="ph3">`FileStream`</ph> constructor.</source>
          <target state="translated">出力メッセージ「MyFile.txt 両方に書き込まれたしてからの読み取り。」、変更を取得する、<ph id="ph1">`FileAccess`</ph>パラメーターを<ph id="ph2">`ReadWrite`</ph>で、<ph id="ph3">`FileStream`</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.CanSeek">
          <source>Gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">現在のストリームがシークをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports seeking; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the stream is closed or if the <ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> was constructed from an operating-system handle such as a pipe or output to the console.</source>
          <target state="translated">ストリームがシークをサポートしている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。ストリームが閉じているか、<ph id="ph3">&lt;see langword="FileStream" /&gt;</ph> がパイプまたはコンソール出力などのオペレーティング システム ハンドルから構築された場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanSeek">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id="ph2">&lt;xref:System.IO.FileStream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileStream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileStream.Position%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph> throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">派生したクラス場合<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>への呼び出しをシークをサポートしていない<ph id="ph2">&lt;xref:System.IO.FileStream.Length%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.FileStream.SetLength%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.FileStream.Position%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>スロー、<ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanSeek">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanSeek">
          <source>The following example uses the <ph id="ph1">`CanSeek`</ph> property to check whether a stream supports seeking.</source>
          <target state="translated">次の例では、<ph id="ph1">`CanSeek`</ph>ストリームがシークをサポートしているかどうかを確認するプロパティです。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.CanWrite">
          <source>Gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">現在のストリームが書き込みをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports writing; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the stream is closed or was opened with read-only access.</source>
          <target state="translated">ストリームが書き込みをサポートしている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。ストリームが閉じているか、読み取り専用アクセスで開かれた場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanWrite">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id="ph2">&lt;xref:System.IO.FileStream.SetLength%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileStream.Write%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.IO.FileStream.WriteByte%2A&gt;</ph> throws a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">派生したクラス場合<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>への呼び出しの書き込みをサポートしていません<ph id="ph2">&lt;xref:System.IO.FileStream.SetLength%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.FileStream.Write%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>、または<ph id="ph5">&lt;xref:System.IO.FileStream.WriteByte%2A&gt;</ph>をスロー、<ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanWrite">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanWrite">
          <source>The following example uses the <ph id="ph1">`CanWrite`</ph> property to check whether a stream supports writing.</source>
          <target state="translated">次の例では、<ph id="ph1">`CanWrite`</ph>ストリームが書き込みをサポートするかどうかを確認するプロパティです。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanWrite">
          <source>The following is an example using the <ph id="ph1">`CanWrite`</ph> property.</source>
          <target state="translated">例を次に示しますを使用して、<ph id="ph1">`CanWrite`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanWrite">
          <source>The output of this code is "MyFile.txt is writable."</source>
          <target state="translated">このコードの出力は、「MyFile.txt は書き込み可能な」です。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.CanWrite">
          <source>To get the output message "MyFile.txt can be both written to and read from.", change the <ph id="ph1">`FileAccess`</ph> parameter to <ph id="ph2">`ReadWrite`</ph> in the <ph id="ph3">`FileStream`</ph> constructor.</source>
          <target state="translated">出力メッセージ「MyFile.txt 両方に書き込まれたしてからの読み取り。」、変更を取得する、<ph id="ph1">`FileAccess`</ph>パラメーターを<ph id="ph2">`ReadWrite`</ph>で、<ph id="ph3">`FileStream`</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.FileStream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> プロテクト呼び出します<ph id="ph2">&lt;xref:System.IO.FileStream.Dispose%2A&gt;</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.FileStream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 呼び出す<ph id="ph2">&lt;xref:System.IO.FileStream.Dispose%2A&gt;</ph>で<ph id="ph3">`disposing`</ph>'éý'<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> パラメーターが <ph id="ph2">`true`</ph> の場合、このメソッドは、この <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">このメソッドは、参照される各オブジェクトの <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> は、他のオブジェクトから複数回呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileStream.Dispose(System.Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.IO.FileStream.Dispose(System.Boolean)" /&gt;</ph>既に破棄されているを以前の呼び出しでオブジェクトを参照しないように注意する<ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.FileStream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">実装する方法の詳細についての<ph id="ph1">&lt;see cref="M:System.IO.FileStream.Dispose(System.Boolean)" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>Dispose メソッドの実装<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request to wait for.</source>
          <target state="translated">待機する保留状態の非同期要求への参照。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>Waits for the pending asynchronous read operation to complete.</source>
          <target state="translated">保留中の非同期の読み取り操作が完了するまで待機します。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(代わりに、<ph id="ph1">&lt;see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> の使用を検討してください。)</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the stream, between 0 and the number of bytes you requested.</source>
          <target state="translated">ストリームから読み込んだバイト数 (0 ～要求したバイト数の間の数値)。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</source>
          <target state="translated">ストリームの末尾では 0 が返されるだけです。それ以外の場合は、少なくとも 1 バイトが読み込み可能になるまでブロックします。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある<ph id="ph1">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph>ファイルの非同期操作を実装します。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど<ph id="ph2">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>、ヘルプ ファイルの非同期操作をより簡単に実装します。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> must be called exactly for every call to <ph id="ph2">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> すべての呼び出しを正確に呼び出す必要があります<ph id="ph2">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</source>
          <target state="translated">別の読み取りを開始する前に読み取りプロセスを終了に失敗すると、デッドロックなど、望ましくない動作可能性があります。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> can be called on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> 呼び出すことができるすべて<ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>から<ph id="ph3">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>Calling <ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> tells you how many bytes were read from the stream.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph>ストリームから読み取られたバイト数がわかります。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> will block until the I/O operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> I/O 操作が完了するまでブロックされます。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>This <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object was not created by calling <ph id="ph2">&lt;see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> on this class.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> オブジェクトは、このクラスで <ph id="ph2">&lt;see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> を呼び出すことによって作成されませんでした。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" /&gt;</ph> is called multiple times.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" /&gt;</ph> は複数回呼び出されます。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">ストリームが閉じているか、内部エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source>The pending asynchronous I/O request.</source>
          <target state="translated">保留中の非同期 I/O 要求。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source>Ends an asynchronous write operation and blocks until the I/O operation is complete.</source>
          <target state="translated">非同期の書き込み操作を終了し、I/O 操作が完了するまでブロックします。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(代わりに、<ph id="ph1">&lt;see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> の使用を検討してください。)</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある<ph id="ph1">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph>ファイルの非同期操作を実装します。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど<ph id="ph2">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>、ヘルプ ファイルの非同期操作をより簡単に実装します。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> 1 回だけ呼び出す必要がありますすべて<ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>から<ph id="ph3">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> will block until the I/O operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> I/O 操作が完了するまでブロックされます。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source>This <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object was not created by calling <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> on this class.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> オブジェクトは、このクラスで <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> を呼び出すことによって作成されませんでした。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" /&gt;</ph> is called multiple times.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" /&gt;</ph> は複数回呼び出されます。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">ストリームが閉じているか、内部エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph>.</source>
          <target state="translated">ガベージ コレクターが <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> を再利用するときに、リソースの解放およびその他のクリーンアップ操作を確実に実行するようにします。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Finalize">
          <source>The garbage collector calls <ph id="ph1">`Finalize`</ph> when the current object is ready to be finalized.</source>
          <target state="translated">ガベージ コレクター<ph id="ph1">`Finalize`</ph>現在のオブジェクトが完了する準備ができています。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Finalize">
          <source><ph id="ph1">`Finalize`</ph> closes the <ph id="ph2">`FileStream`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph> 閉じる、<ph id="ph2">`FileStream`</ph>です。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="T:System.IO.FileStream">
          <source>Clears buffers for this stream and causes any buffered data to be written to the file.</source>
          <target state="translated">このストリームのバッファーをクリアして、バッファー内のデータがファイルに書き込まれるようにします。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Flush">
          <source>Clears buffers for this stream and causes any buffered data to be written to the file.</source>
          <target state="translated">このストリームのバッファーをクリアして、バッファー内のデータがファイルに書き込まれるようにします。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>When you call the <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A?displayProperty=nameWithType&gt;</ph> method, the operating system I/O buffer is also flushed.</source>
          <target state="translated">呼び出すと、<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A?displayProperty=nameWithType&gt;</ph>メソッド、オペレーティング システム I/O バッファーがフラッシュされるもします。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>A stream’s encoder is not flushed unless you explicitly call <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> or dispose of the object.</source>
          <target state="translated">明示的に呼び出す場合を除き、ストリームのエンコーダーはフラッシュされません<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph>またはオブジェクトの破棄します。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType&gt;</ph>に<ph id="ph2">`true`</ph>に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</source>
          <target state="translated">このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>Because a buffer can be used for either reading or writing, <ph id="ph1">&lt;xref:System.IO.FileStream.Flush&gt;</ph> performs the following two functions:</source>
          <target state="translated">読み取りまたは書き込みのいずれかのバッファーを使用できるため<ph id="ph1">&lt;xref:System.IO.FileStream.Flush&gt;</ph>は次の 2 つの関数を実行します。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>Any data previously written to the buffer is copied to the file and the buffer is cleared except for its encoder state.</source>
          <target state="translated">ファイルに以前にバッファーに書き込まれたデータをコピーし、エンコーダーの状態を除く、バッファーをクリアします。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>If <ph id="ph1">&lt;xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=nameWithType&gt;</ph> is <ph id="ph2">`true`</ph> and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=nameWithType&gt;</ph>は<ph id="ph2">`true`</ph>とデータが以前の読み取りにバッファーをファイルからコピー、ファイル内の現在位置が、バッファー内の未読のバイト数だけデクリメントします。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>The buffer is then cleared.</source>
          <target state="translated">バッファーをクリアし、します。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%28System.Boolean%29&gt;</ph> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%28System.Boolean%29&gt;</ph>バッファリングされたすべてのデータの中間ファイル バッファーのことを確認するときのメソッドのオーバー ロードが記述されたディスクにします。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.FileStream.Lock%2A&gt;</ph> method.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.IO.FileStream.Lock%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Flush">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Flush">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Flush(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to flush all intermediate file buffers; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">すべての中間ファイル バッファーをフラッシュする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Flush(System.Boolean)">
          <source>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</source>
          <target state="translated">このストリームのバッファーをクリアして、バッファー内のデータがファイルに書き込まれるようにし、すべての中間ファイル バッファーもクリアします。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush(System.Boolean)">
          <source>Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</source>
          <target state="translated">バッファリングされたすべてのデータの中間ファイル バッファーのことを確認する場合は、このオーバー ロードが書き込まれます使用してディスクにします。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Flush(System.Boolean)">
          <source>When you call the <ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> method, the operating system I/O buffer is also flushed.</source>
          <target state="translated">呼び出すと、<ph id="ph1">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph>メソッド、オペレーティング システム I/O バッファーがフラッシュされるもします。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するためのトークン。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">ストリームに対応するすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込み、キャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">非同期のフラッシュ操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
          <source>When you call the <ph id="ph1">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph> method, the operating system I/O buffer is also flushed.</source>
          <target state="translated">呼び出すと、<ph id="ph1">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>メソッド、オペレーティング システム I/O バッファーがフラッシュされるもします。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">返されるタスクに含まれる完了前に、操作が取り消された場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>値を<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the handle to the file is disposed, the returned task contains the <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> exception in the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property.</source>
          <target state="translated">返されるタスクに含まれるファイルへのハンドルが破棄されている場合、<ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>での例外、<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されています。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.GetAccessControl">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.FileSecurity" /&gt;</ph> object that encapsulates the access control list (ACL) entries for the file described by the current <ph id="ph2">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.FileSecurity" /&gt;</ph> オブジェクトが示すファイルのアクセス制御リスト (ACL) エントリをカプセル化する <ph id="ph2">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.GetAccessControl">
          <source>An object that encapsulates the access control settings for the file described by the current <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> オブジェクトが示すファイルのアクセス制御設定をカプセル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.GetAccessControl">
          <source>While the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class and <ph id="ph2">&lt;xref:System.IO.FileStream.GetAccessControl%2A&gt;</ph> can be used to retrieve the access control list (ACL) entries of an existing file, consider using <ph id="ph3">&lt;xref:System.IO.File.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method, as it is easier to use.</source>
          <target state="translated">中に、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>クラスと<ph id="ph2">&lt;xref:System.IO.FileStream.GetAccessControl%2A&gt;</ph>使用を検討して、既存のファイルのアクセス制御リスト (ACL) エントリを取得するために使用できる<ph id="ph3">&lt;xref:System.IO.File.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>ので、メソッドは使いやすくします。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.GetAccessControl">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.GetAccessControl%2A&gt;</ph> method to retrieve the ACL entries for a file.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.GetAccessControl%2A&gt;</ph>ファイルの ACL エントリを取得します。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.GetAccessControl">
          <source>An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.</source>
          <target state="translated">ACL には、個人、グループ、または権限がない、指定されたファイルの特定のアクションをユーザーがについて説明します。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.GetAccessControl">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>方法: アクセス制御リスト エントリを追加または削除する<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.GetAccessControl">
          <source>The file is closed.</source>
          <target state="translated">ファイルは閉じられています。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.GetAccessControl">
          <source>An I/O error occurred while opening the file.</source>
          <target state="translated">ファイルを開くときに、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.GetAccessControl">
          <source>The file could not be found.</source>
          <target state="translated">ファイルが見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.GetAccessControl">
          <source>This operation is not supported on the current platform.</source>
          <target state="translated">この操作は、現在のプラットフォームではサポートされていません。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.GetAccessControl">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.GetAccessControl">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Handle">
          <source>Gets the operating system file handle for the file that the current <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object encapsulates.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのオペレーティング システム ファイル ハンドルを取得します。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>The operating system file handle for the file encapsulated by this <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> object, or -1 if the <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> has been closed.</source>
          <target state="translated">この <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのオペレーティング システム ファイル ハンドル。または <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> が閉じられている場合は -1。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>This property is an operating system handle for use with operating-system-provided system calls (such as <ph id="ph1">`ReadFile`</ph> on Windows).</source>
          <target state="translated">このプロパティは、オペレーティング システムに用意されているシステムの呼び出しで使用するためのオペレーティング システム ハンドル (など<ph id="ph1">`ReadFile`</ph>Windows 上)。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>It will not work with C library functions that expect a file descriptor, such as <ph id="ph1">`fread`</ph>.</source>
          <target state="translated">など、ファイル記述子を期待する C ライブラリ関数では動作しません<ph id="ph1">`fread`</ph>です。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>The operating system handle might have been opened synchronously or asynchronously, depending on which <ph id="ph1">`FileStream`</ph> constructor was called.</source>
          <target state="translated">オペレーティング システム ハンドルが開かれた同期または非同期で、に応じて<ph id="ph1">`FileStream`</ph>コンス トラクターが呼び出されました。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property to discover whether this handle was opened asynchronously.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph>プロパティをこのハンドルが非同期的に開かれたかどうかを検出します。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>In Win32, this means the handle was opened for overlapped IO, and it requires different parameters to <ph id="ph1">`ReadFile`</ph> and <ph id="ph2">`WriteFile`</ph>.</source>
          <target state="translated">Win32 では、つまり、重複 I/O 用、ハンドルが開かれた、異なるパラメーターを必要と<ph id="ph1">`ReadFile`</ph>と<ph id="ph2">`WriteFile`</ph>です。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>Data corruption might occur if a <ph id="ph1">`FileStream`</ph> is created, its handle is passed, some operation moves the handle's file pointer, and then the <ph id="ph2">`FileStream`</ph> is used again.</source>
          <target state="translated">場合に、データの破損が発生する可能性があります、<ph id="ph1">`FileStream`</ph>が作成されると、そのハンドルが渡される、なんらかの操作が、ハンドルのファイル ポインターを移動し、<ph id="ph2">`FileStream`</ph>もう一度使用されます。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>Multiple threads cannot safely write to the same file simultaneously, and <ph id="ph1">`FileStream`</ph> buffering code assumes that it exclusively controls the handle.</source>
          <target state="translated">複数のスレッドは、同時に同じファイルに書き込めません安全と<ph id="ph1">`FileStream`</ph>コードをバッファー処理には、行うことは想定しています。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source><ph id="ph1">`FileStream`</ph> might throw an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph> if <ph id="ph3">`FileStream`</ph> detects that some other process has moved the file pointer.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph> スローする可能性、<ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>場合<ph id="ph3">`FileStream`</ph>他のプロセスがファイル ポインターを移動したことを検出します。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>To avoid this, do not write any data into a portion of the file that <ph id="ph1">`FileStream`</ph> might have buffered, and restore the file pointer to the location it had when methods were last called on <ph id="ph2">`FileStream`</ph>.</source>
          <target state="translated">これを回避するには、書き込みませんすべてのデータ ファイルの一部にする<ph id="ph1">`FileStream`</ph>がバッファーに格納したとしたときにメソッドが呼び出された最後の場所にファイル ポインターを復元<ph id="ph2">`FileStream`</ph>です。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Handle">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>for the ability to access unmanaged code.</source>
          <target state="translated">アンマネージ コードへのアクセスに必要なアクセス許可。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph> Security action: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>.</source>
          <target state="translated">関連する列挙値:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>セキュリティ アクション:<ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Handle">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.IsAsync">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> was opened asynchronously or synchronously.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> が非同期的に開かれたか、同期的に開かれたかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.IsAsync">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> was opened asynchronously; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="FileStream" /&gt;</ph> が非同期的に開かれた場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.IsAsync">
          <source>The <ph id="ph1">`IsAsync`</ph> property detects whether the <ph id="ph2">`FileStream`</ph> handle was opened asynchronously, enabling your code to use the <ph id="ph3">&lt;xref:System.IO.FileStream.Handle%2A&gt;</ph> property correctly.</source>
          <target state="translated"><ph id="ph1">`IsAsync`</ph>プロパティを検出するかどうか、<ph id="ph2">`FileStream`</ph>ハンドルが開かれた非同期的に、使用するようコードを有効にすると、<ph id="ph3">&lt;xref:System.IO.FileStream.Handle%2A&gt;</ph>プロパティ正しくです。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.IsAsync">
          <source>In Win32, <ph id="ph1">`IsAsync`</ph> being true means the handle was opened for overlapped I/O, and thus requires different parameters to <ph id="ph2">`ReadFile`</ph> and <ph id="ph3">`WriteFile`</ph>.</source>
          <target state="translated">Win32 では、 <ph id="ph1">`IsAsync`</ph> true を示し、ハンドル重複 I/O 用に開かれたために異なるパラメーターを必要とされている<ph id="ph2">`ReadFile`</ph>と<ph id="ph3">`WriteFile`</ph>です。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.IsAsync">
          <source>You specify this value when you create an instance of the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class using a constructor that has an <ph id="ph2">`isAsync`</ph>, <ph id="ph3">`useAsync`</ph>, or <ph id="ph4">`options`</ph> parameter.</source>
          <target state="translated">インスタンスを作成するときに、この値を指定する、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>クラスを持つコンス トラクターを使用して、 <ph id="ph2">`isAsync`</ph>、 <ph id="ph3">`useAsync`</ph>、または<ph id="ph4">`options`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.IsAsync">
          <source>When the property is <ph id="ph1">`true`</ph>, the stream utilizes overlapped I/O to perform file operations asynchronously.</source>
          <target state="translated">このプロパティが<ph id="ph1">`true`</ph>ストリームがファイルの操作を非同期的に実行する重複 I/O を使用します。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.IsAsync">
          <source>However, the <ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property does not have to be <ph id="ph2">`true`</ph> to call the <ph id="ph3">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph>プロパティがある<ph id="ph2">`true`</ph>を呼び出して、 <ph id="ph3">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>、または<ph id="ph5">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.IsAsync">
          <source>When the <ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property is <ph id="ph2">`false`</ph> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph>プロパティは<ph id="ph2">`false`</ph>および書き込み操作を非同期の読み込みを呼び出すと、引き続き、UI スレッドはブロックされませんが、実際の I/O 操作が同期的に実行します。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.IsAsync">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Length">
          <source>Gets the length in bytes of the stream.</source>
          <target state="translated">ストリーム長 (バイト単位) を取得します。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Length">
          <source>A long value representing the length of the stream in bytes.</source>
          <target state="translated">ストリーム長 (バイト単位) を表す long 値。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Length">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Length">
          <source>The following example uses the <ph id="ph1">`Length`</ph> and <ph id="ph2">`Position`</ph> properties to check for an end-of-file condition.</source>
          <target state="translated">次の例では、<ph id="ph1">`Length`</ph>と<ph id="ph2">`Position`</ph>プロパティ ファイルの終端の条件を確認します。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Length">
          <source><ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> for this stream is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このストリーム用の <ph id="ph1">&lt;see cref="P:System.IO.FileStream.CanSeek" /&gt;</ph> が <ph id="ph2">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Length">
          <source>An I/O error, such as the file being closed, occurred.</source>
          <target state="translated">ファイルが閉じられているなど、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source>The beginning of the range to lock.</source>
          <target state="translated">ロックする範囲の先頭。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source>The value of this parameter must be equal to or greater than zero (0).</source>
          <target state="translated">このパラメーターの値は、0 (ゼロ) 以上にする必要があります。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source>The range to be locked.</source>
          <target state="translated">ロックする範囲。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source>Prevents other processes from reading from or writing to the <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> に対する他のプロセスからの読み取りまたは書き込みを禁止します。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source>Locking a range of a file stream gives the threads of the locking process exclusive access to that range of the file stream.</source>
          <target state="translated">ファイル ストリームの範囲をロックすると、ファイル ストリームの範囲にロックのプロセスの排他アクセスのスレッドが与えられます。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source>The following code example demonstrates how to lock part of a file so another process cannot access that part of the file even though it has read/write access to the file.</source>
          <target state="translated">次のコード例では、別のプロセスは、ファイルに読み取り/書き込みアクセス権を持つ場合でも、ファイルの部分にアクセスできないように、ファイルの一部をロックする方法を示します。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source>Run the program simultaneously in different command windows and investigate using the different console input options.</source>
          <target state="translated">別のコマンド ウィンドウで、プログラムを同時に実行し、さまざまなコンソールの入力オプションを使用してを調査します。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="position" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="position" /&gt;</ph> または <ph id="ph2">&lt;paramref name="length" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source>The file is closed.</source>
          <target state="translated">ファイルは閉じられています。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
          <source>The process cannot access the file because another process has locked a portion of the file.</source>
          <target state="translated">別のプロセスがファイルの一部をロックしているため、プロセスはこのファイルにアクセスできません。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Name">
          <source>Gets the name of the <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> that was passed to the constructor.</source>
          <target state="translated">コンストラクターに渡された <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> の名前を取得します。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Name">
          <source>A string that is the name of the <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> の名前を示す文字列。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Name">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Name">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Name">
          <source>for access to the path.</source>
          <target state="translated">パスにアクセスします。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Name">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Position">
          <source>Gets or sets the current position of this stream.</source>
          <target state="translated">ストリームの現在位置を取得または設定します。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Position">
          <source>The current position of this stream.</source>
          <target state="translated">ストリームの現在位置。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Position">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">ストリームの長さを超えた位置へのシークはサポートされています。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Position">
          <source>When you seek beyond the length of the file, the file size grows.</source>
          <target state="translated">シークすると、ファイルの長さを超えて、ファイルのサイズが大きくなります。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Position">
          <source>In Microsoft Windows NT and newer, any data added to the end of the file is set to zero.</source>
          <target state="translated">Microsoft Windows NT 以降では、ファイルの末尾に追加されたデータすべてが 0 に設定します。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Position">
          <source>In Microsoft Windows 98 or earlier, any data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.</source>
          <target state="translated">Microsoft Windows 98 またはそれ以前は、ファイルの末尾に追加されたデータすべてがデータは既に削除は 0 に設定されていません。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Position">
          <source>Setting the position of the stream to a large value beyond the end of the stream in Windows 98 or earlier may result in an exception being raised.</source>
          <target state="translated">Windows 98 またはそれ以前のストリームの末尾を越える大きな値に、ストリームの位置を設定すると、例外が発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Position">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.Position">
          <source>The following example uses the <ph id="ph1">`Length`</ph> and <ph id="ph2">`Position`</ph> properties to check for an end-of-file condition.</source>
          <target state="translated">次の例では、<ph id="ph1">`Length`</ph>と<ph id="ph2">`Position`</ph>プロパティ ファイルの終端の条件を確認します。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Position">
          <source>The stream does not support seeking.</source>
          <target state="translated">このストリームはシークをサポートしていません。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Position">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Position">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Position">
          <source>The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.</source>
          <target state="translated">位置が、Windows 98 またはそれ以前のストリームの末尾を越える非常に大きな値に設定されました。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Position">
          <source>Attempted to set the position to a negative value.</source>
          <target state="translated">位置を負の値に設定しようとしました。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.Position">
          <source>Attempted seeking past the end of a stream that does not support this.</source>
          <target state="translated">サポートされていない、ストリームの末尾を越えるシークをしようとしました。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1<bpt id="p4">&lt;c&gt;</bpt>)<ept id="p4">&lt;/c&gt;</ept> replaced by the bytes read from the current source.</source>
          <target state="translated">このメソッドが返されるときに、現在のソースから読み取られるバイトにより置き換えられた、<bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> と (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1<bpt id="p4">&lt;c&gt;</bpt>)<ept id="p4">&lt;/c&gt;</ept> の間の値を持つ指定されたバイト配列を含みます。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which the read bytes will be placed.</source>
          <target state="translated">読み取られるバイトが配置される<bpt id="p1">&lt;c&gt;</bpt>配列<ept id="p1">&lt;/c&gt;</ept>内のバイト オフセット。</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取る最大バイト数。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads a block of bytes from the stream and writes the data in a given buffer.</source>
          <target state="translated">ストリームからバイトのブロックを読み取り、そのデータを特定のバッファーに書き込みます。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">バッファーに読み取られた合計バイト数。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</source>
          <target state="translated">要求しただけのバイト数を読み取れなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 になることがあります。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in <ph id="ph2">`array`</ph> (the buffer index) at which to begin reading, and the <ph id="ph3">`count`</ph> parameter gives the maximum number of bytes to be read from this stream.</source>
          <target state="translated"><ph id="ph1">`offset`</ph>パラメーターはバイトのオフセット<ph id="ph2">`array`</ph>(バッファーのインデックス) 読み取りを開始する位置を示す、<ph id="ph3">`count`</ph>パラメーターは、このストリームから読み取られるバイトの最大数を示します。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に達した場合は、実際の数バイトを読み取り、または 0 を返されるです。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the read operation is successful, the current position of the stream is advanced by the number of bytes read.</source>
          <target state="translated">読み取り操作が成功した場合、ストリームの現在の位置は読み取られたバイト数で進められます。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the current position of the stream is unchanged.</source>
          <target state="translated">例外が発生する場合は、ストリームの現在の位置は変更されません。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph> method returns zero only after reaching the end of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>メソッドには、ストリームの末尾に到達した場合にのみゼロが返されます。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Otherwise, <ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph> always reads at least one byte from the stream before returning.</source>
          <target state="translated">それ以外の場合、<ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>常に返す前に、ストリームから、少なくとも 1 バイトを読み取ります。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If no data is available from the stream upon a call to <ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>, the method will block until at least one byte of data can be returned.</source>
          <target state="translated">データがないかどうかを呼び出すとストリームから<ph id="ph1">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>、少なくとも 1 バイトのデータを返すことができるまで、メソッドはブロックされます。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">実装は、ストリームの末尾に達していない場合でも、要求されたより少ないバイト数を返すことです。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph>プリミティブ データ型を読み取るためです。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Do not interrupt a thread that is performing a read operation.</source>
          <target state="translated">読み取り操作を実行するスレッドを中断しません。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.</source>
          <target state="translated">アプリケーションは正常に実行するスレッドはブロック解除後に見えますが、中断は、アプリケーションのパフォーマンスと信頼性を減らすことができます。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example reads the contents from a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> and writes it into another <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>.</source>
          <target state="translated">次の例から内容の読み取り、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>別に書き込みます<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしません。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> describe an invalid range in <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の無効な範囲を示しています。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">データを書き込むバッファー。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">ストリームからのデータの書き込み開始位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取る最大バイト数。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するためのトークン。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">現在のストリームからバイト シーケンスを非同期に読み取り、読み取ったバイト数だけストリーム内の位置を進め、キャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">非同期の読み取り操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive file operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>メソッドでは、メイン スレッドをブロックすることがなくリソースを消費するファイルの操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.CanRead%2A&gt;</ph>プロパティを現在のインスタンスが読み取りをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">返されるタスクに含まれる完了前に、操作が取り消された場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>値を<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the handle to the file is disposed, the returned task contains the <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> exception in the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property.</source>
          <target state="translated">返されるタスクに含まれるファイルへのハンドルが破棄されている場合、<ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>での例外、<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The following example shows how to read from a file asynchronously.</source>
          <target state="translated">次の例では、非同期的に、ファイルを読み取る方法を示します。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が、バッファーの長さよりも大きくなっています。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしません。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されています。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">ストリームは、前の読み取り操作によって現在使用されています。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadByte">
          <source>Reads a byte from the file and advances the read position one byte.</source>
          <target state="translated">ファイルからバイトを読み取り、読み取り位置を 1 バイト進めます。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadByte">
          <source>The byte, cast to an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>, or -1 if the end of the stream has been reached.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> にキャストしたバイト。ストリームの末尾に達した場合は -1。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadByte">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadByte">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.CanRead%2A&gt;</ph>プロパティを現在のインスタンスが読み取りをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadByte">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadByte">
          <source>The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</source>
          <target state="translated">次のコード例では、データをバイト単位で、ファイルに書き込むし、データが正常に書き込まれたことを確認する方法を示します。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadByte">
          <source>The current stream does not support reading.</source>
          <target state="translated">現在のストリームは読み取りをサポートしません。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.ReadByte">
          <source>The current stream is closed.</source>
          <target state="translated">現在のストリームが閉じられます。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadByte">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">既定の実装<ph id="ph1">&lt;see langword="Stream" /&gt;</ph>新しいシングル バイト配列を作成し、呼び出して<ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadByte">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">これは、正しい正式には、効率的なことはできません。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadByte">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">内部バッファーと共にストリームは、このメソッドをオーバーライドし、読み取りバッファーを直接呼び出しごとに余分な配列の割り当てを回避するバージョンをはるかに効率的に提供する必要があります。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.ReadByte">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" uid="P:System.IO.FileStream.SafeFileHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /&gt;</ph> object that represents the operating system file handle for the file that the current <ph id="ph2">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> object encapsulates.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのオペレーティング システム ファイル ハンドルを表す <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.SafeFileHandle">
          <source>An object that represents the operating system file handle for the file that the current <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> object encapsulates.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> オブジェクトによってカプセル化されるファイルのオペレーティング システム ファイル ハンドルを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.SafeFileHandle">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph> property automatically flushes the stream and sets the current stream position to 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph>プロパティは自動的にストリームをフラッシュし、現在のストリームの位置を 0 に設定します。</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.SafeFileHandle">
          <source>This allows the file to be moved or the stream position to be reset by another stream using the <ph id="ph1">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph> returned by this property.</source>
          <target state="translated">これにより、移動するファイルまたは別のストリームを使用してリセットするストリームの位置、<ph id="ph1">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph>このプロパティによって返されます。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.SafeFileHandle">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出すアクセス許可。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.SafeFileHandle">
          <source>Security action: Link Demand</source>
          <target state="translated">セキュリティ アクション: リンク確認要求</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.SafeFileHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.SafeFileHandle">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileStream.SafeFileHandle">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The point relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> from which to begin seeking.</source>
          <target state="translated">シークの開始位置を示す、<bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> に対する相対ポイント。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Specifies the beginning, the end, or the current position as a reference point for <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept>, using a value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> 型の値を使用して、<bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> の参照ポイントとして先頭、末尾、または現在位置を指定します。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of this stream to the given value.</source>
          <target state="translated">このストリームの現在位置を特定の値に設定します。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position in the stream.</source>
          <target state="translated">ストリームの新しい位置。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A?displayProperty=nameWithType&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.CanSeek%2A?displayProperty=nameWithType&gt;</ph> property to determine whether the current instance supports seeking.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.CanSeek%2A?displayProperty=nameWithType&gt;</ph>プロパティを現在のインスタンスがシークをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A?displayProperty=nameWithType&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>You can seek to any location beyond the length of the stream.</source>
          <target state="translated">ストリームの長さを超えた位置をシークできます。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>When you seek beyond the length of the file, the file size grows.</source>
          <target state="translated">シークすると、ファイルの長さを超えて、ファイルのサイズが大きくなります。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>In Windows NT and later versions, data added to the end of the file is set to zero.</source>
          <target state="translated">Windows NT とそれ以降のバージョンでは、ファイルの末尾に追加されたデータは、0 に設定されます。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>In Windows 98 or earlier versions, data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.</source>
          <target state="translated">Windows 98 またはそれ以前のバージョンでは、ファイルの末尾に追加されたデータが設定されていないデータは既に削除は 0 にします。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The following example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</source>
          <target state="translated">次の例では、データをバイト単位で、ファイルに書き込むし、データが正常に書き込まれたことを確認する方法を示します。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The following example reads text in the reverse direction, from the end of file to the beginning of the file, by using the various <ph id="ph1">&lt;xref:System.IO.SeekOrigin&gt;</ph> values with the <ph id="ph2">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph> method.</source>
          <target state="translated">次の例は、さまざまなを使用して、ファイルの先頭にファイルの末尾から、反対方向のテキストを読み取ります<ph id="ph1">&lt;xref:System.IO.SeekOrigin&gt;</ph>の値を使った、<ph id="ph2">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream does not support seeking, such as if the <ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> is constructed from a pipe or console output.</source>
          <target state="translated">ストリームがシークをサポートしていません。たとえば、<ph id="ph1">&lt;see langword="FileStream" /&gt;</ph> がパイプまたはコンソール出力から構築されました。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Seeking is attempted before the beginning of the stream.</source>
          <target state="translated">シークがストリームの開始前に試行されています。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>An object that describes an ACL entry to apply to the current file.</source>
          <target state="translated">現在のファイルに適用する ACL エントリを示すオブジェクト。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>Applies access control list (ACL) entries described by a <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.FileSecurity" /&gt;</ph> object to the file described by the current <ph id="ph2">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.FileSecurity" /&gt;</ph> オブジェクトが示すアクセス制御リスト (ACL) エントリを、現在の <ph id="ph2">&lt;see cref="T:System.IO.FileStream" /&gt;</ph> オブジェクトが示すファイルに適用します。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>While the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class and <ph id="ph2">&lt;xref:System.IO.FileStream.SetAccessControl%2A&gt;</ph> can be used on an existing file, consider using the <ph id="ph3">&lt;xref:System.IO.File.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method as it is easier to use.</source>
          <target state="translated">中に、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>クラスと<ph id="ph2">&lt;xref:System.IO.FileStream.SetAccessControl%2A&gt;</ph>既存のファイルで使用できる、使用を検討して、<ph id="ph3">&lt;xref:System.IO.File.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>メソッドが簡単に使用します。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream.SetAccessControl%2A&gt;</ph> method applies access control list (ACL) entries to a file that represents the noninherited ACL list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.SetAccessControl%2A&gt;</ph>メソッドが継承されない ACL リストを表すファイルへのアクセス制御リスト (ACL) エントリを適用します。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>The ACL specified for the <ph id="ph1">`fileSecurity`</ph> parameter replaces the existing ACL for the file.</source>
          <target state="translated">ACL に指定された、<ph id="ph1">`fileSecurity`</ph>パラメーターは、ファイルの既存の ACL を置き換えます。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>To add permissions for a new user, use the <ph id="ph1">&lt;xref:System.IO.FileStream.GetAccessControl%2A&gt;</ph> method to obtain the existing ACL, modify it, and then use <ph id="ph2">&lt;xref:System.IO.FileStream.SetAccessControl%2A&gt;</ph> to apply it back to the file.</source>
          <target state="translated">新しいユーザーのアクセス許可を追加する、<ph id="ph1">&lt;xref:System.IO.FileStream.GetAccessControl%2A&gt;</ph>メソッドを既存の ACL を取得して、変更し、<ph id="ph2">&lt;xref:System.IO.FileStream.SetAccessControl%2A&gt;</ph>をファイルに再度適用します。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.</source>
          <target state="translated">ACL には、個人、グループ、または権限がない、指定されたファイルの特定のアクションをユーザーがについて説明します。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>方法: アクセス制御リスト エントリを追加または削除する<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>The file is closed.</source>
          <target state="translated">ファイルは閉じられています。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>The <ph id="ph1">&lt;paramref name="fileSecurity" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fileSecurity" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>The file could not be found or modified.</source>
          <target state="translated">ファイルを検出または変更できませんでした。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)">
          <source>The current process does not have access to open the file.</source>
          <target state="translated">現在のプロセスには、ファイルを開くために必要なアクセス権がありません。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>The new length of the stream.</source>
          <target state="translated">ストリームの新しい長さ。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>Sets the length of this stream to the given value.</source>
          <target state="translated">ストリーム長を特定の値に設定します。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>If the given value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">指定した値が、ストリームの現在の長さより小さい場合は、ストリームは切り捨てられます。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>In this scenario, if the current position is greater than the new length, the current position is moved to the last byte of the stream.</source>
          <target state="translated">このシナリオでは、現在の位置が、新しい長さより大きい場合、現在の位置がストリームの最後のバイトまで移動します。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>If the given value is larger than the current length of the stream, the stream is expanded, and the current position remains the same.</source>
          <target state="translated">指定した値が、ストリームの現在の長さより大きい場合は、ストリームが展開され、現在の位置は変わりません。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>If the stream is expanded, the contents of the stream between the old and the new length are undefined.</source>
          <target state="translated">ストリームが展開されている場合、古いクライアント シークレットと新しい長さの間のストリームの内容は未定義です。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">ストリームは書き込みとシークの両方をサポートする必要があります<ph id="ph1">`SetLength`</ph>動作をします。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing, and the <ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property to determine whether seeking is supported.</source>
          <target state="translated">使用して、 <ph id="ph1">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph> 、現在のインスタンスがドキュメントの作成をサポートしているかどうかを決定するプロパティと<ph id="ph2">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph>シークがサポートされているかどうかを決定するプロパティです。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">追加情報については、<ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>、および <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> を参照してください。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>An I/O error has occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>The stream does not support both writing and seeking.</source>
          <target state="translated">ストリームでは、書き込みとシークの両方は使用できません。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.SetLength(System.Int64)">
          <source>Attempted to set the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter to less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> パラメーターを 0 未満の値に設定しようとしました。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
          <source>The beginning of the range to unlock.</source>
          <target state="translated">ロックを解除する範囲の先頭。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
          <source>The range to be unlocked.</source>
          <target state="translated">ロックを解除する範囲。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
          <source>Allows access by other processes to all or part of a file that was previously locked.</source>
          <target state="translated">他のプロセスにより以前にロックされたファイルの全部または一部へのアクセスを許可します。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
          <source>The following code example demonstrates how to lock part of a file so another process cannot access that part of the file even though it has read/write access to the file, and then unlock the specified part of the file .</source>
          <target state="translated">次のコード例では、別のプロセスは、ファイルを読み取り/書き込みアクセス権を持つ場合でも、ファイルの部分にアクセスできず、ファイルの指定された部分のロックを解除し、ファイルの一部をロックする方法を示します。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
          <source>Run the program simultaneously in different command windows and investigate using the different console input options.</source>
          <target state="translated">別のコマンド ウィンドウで、プログラムを同時に実行し、さまざまなコンソールの入力オプションを使用してを調査します。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="position" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="position" /&gt;</ph> または <ph id="ph2">&lt;paramref name="length" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer containing data to write to the stream.</source>
          <target state="translated">ストリームに書き込むデータを格納しているバッファー。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">ストリームへのバイトのコピーを開始する位置を示す <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。インデックス番号は 0 から始まります。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込む最大バイト数。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a block of bytes to the file stream.</source>
          <target state="translated">ファイル ストリームにバイトのブロックを書き込みます。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in <ph id="ph2">`array`</ph> (the buffer index) at which to begin copying, and the <ph id="ph3">`count`</ph> parameter gives the number of bytes that will be written to the stream.</source>
          <target state="translated"><ph id="ph1">`offset`</ph>パラメーターはバイトのオフセット<ph id="ph2">`array`</ph>(バッファーのインデックス) コピーを開始する位置を示す、<ph id="ph3">`count`</ph>パラメーターは、ストリームに書き込まれるバイト数。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If the write operation is successful, the current position of the stream is advanced by the number of bytes written.</source>
          <target state="translated">書き込み操作が成功した場合、ストリームの現在の位置は書き込まれたバイト数で進められます。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the current position of the stream is unchanged.</source>
          <target state="translated">例外が発生する場合は、ストリームの現在の位置は変更されません。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph>プロパティを現在のインスタンスが書き込みをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Do not interrupt a thread that is performing a write operation.</source>
          <target state="translated">書き込み操作を実行するスレッドを中断しません。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.</source>
          <target state="translated">アプリケーションは正常に実行するスレッドはブロック解除後に見えますが、中断は、アプリケーションのパフォーマンスと信頼性を減らすことができます。</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.FileStream.Lock%2A&gt;</ph> method.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.IO.FileStream.Lock%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> describe an invalid range in <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の無効な範囲を示しています。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Another thread may have caused an unexpected change in the position of the operating system's file handle.</source>
          <target state="translated">別のスレッドが原因で、オペレーティング システムのファイル ハンドルの位置で予期しない変更が発生した可能性があります。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The current stream instance does not support writing.</source>
          <target state="translated">現在のストリームのインスタンスでは、書き込みをサポートしません。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">データの書き込み元となるバッファー。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">ストリームへのバイトのコピーを開始する位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。インデックス番号は 0 から始まります。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込む最大バイト数。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するためのトークン。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">現在のストリームにバイト シーケンスを非同期に書き込み、書き込んだバイト数だけストリーム内の現在位置を進め、キャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive file operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>メソッドでは、メイン スレッドをブロックすることがなくリソースを消費するファイルの操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph>プロパティを現在のインスタンスが読み取りをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">返されるタスクに含まれる完了前に、操作が取り消された場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>値を<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the handle to the file is disposed, the returned task contains the <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> exception in the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property.</source>
          <target state="translated">返されるタスクに含まれるファイルへのハンドルが破棄されている場合、<ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>での例外、<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The following example shows how to write asynchronously to a file.</source>
          <target state="translated">次の例では、ファイルを非同期的に書き込む方法を示します。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が、バッファーの長さよりも大きいです。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしません。</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されています。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">ストリームは、前の書き込み操作によって現在使用されています。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>A byte to write to the stream.</source>
          <target state="translated">ストリームに書き込むバイト。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the file stream.</source>
          <target state="translated">ファイル ストリームの現在位置にバイトを書き込みます。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>Use <ph id="ph1">`WriteByte`</ph> to write a byte to a <ph id="ph2">`FileStream`</ph> efficiently.</source>
          <target state="translated">使用して<ph id="ph1">`WriteByte`</ph>にバイトを書き込む、<ph id="ph2">`FileStream`</ph>効率的にします。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>If the stream is closed or not writable, an exception will be thrown.</source>
          <target state="translated">ストリームが閉じられているか書き込み禁止になっての場合は、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph>プロパティを現在のインスタンスが書き込みをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</source>
          <target state="translated">次のコード例では、データをバイト単位で、ファイルに書き込むし、データが正常に書き込まれたことを確認する方法を示します。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられています。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしません。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">既定の実装<ph id="ph1">&lt;see langword="Stream" /&gt;</ph>新しいシングル バイト配列を作成し、呼び出して<ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">これは、正しい正式には、効率的なことはできません。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">内部バッファーと共にストリームは、このメソッドをオーバーライドし、読み取りバッファーを直接呼び出しごとに余分な配列の割り当てを回避するバージョンをはるかに効率的に提供する必要があります。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileStream.WriteByte(System.Byte)">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>