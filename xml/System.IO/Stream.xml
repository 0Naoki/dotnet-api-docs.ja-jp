<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stream.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86cc2a48ad6254044761826100b2be9db53d138b868.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2a48ad6254044761826100b2be9db53d138b868</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Provides a generic view of a sequence of bytes.</source>
          <target state="translated">バイト シーケンスのジェネリック ビューを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>This is an abstract class.</source>
          <target state="translated">これは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> すべてのストリームの抽象基本クラスです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket.</source>
          <target state="translated">ストリームとは、ファイル、入出力デバイス、プロセス間通信のパイプ、または TCP/IP ソケットなどのバイト シーケンスを抽象化したものです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>クラスとその派生クラスのさまざまな種類の入力と出力、汎用的なビューを提供し、プログラマ、オペレーティング システムと基になるデバイスの特定の詳細から分離します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Streams involve three fundamental operations:</source>
          <target state="translated">ストリームには次の 3 つの基本的な操作が含まれます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can read from streams.</source>
          <target state="translated">ストリームから取得できます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Reading is the transfer of data from a stream into a data structure, such as an array of bytes.</source>
          <target state="translated">読み取りとは、バイト配列などのデータ構造にデータをストリームからの転送です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can write to streams.</source>
          <target state="translated">ストリームに記述することができます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Writing is the transfer of data from a data structure into a stream.</source>
          <target state="translated">書き込みは、データ構造からストリームにデータの転送です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Streams can support seeking.</source>
          <target state="translated">ストリームはシークをサポートできます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Seeking refers to querying and modifying the current position within a stream.</source>
          <target state="translated">シークは、クエリを実行して、ストリーム内の現在位置の変更を指します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Seek capability depends on the kind of backing store a stream has.</source>
          <target state="translated">シーク機能は、ストリームには、バッキング ストアの種類によって異なります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.</source>
          <target state="translated">たとえば、ネットワーク ストリームは、現在の位置の統一された概念をありませんして、したがって通常はシークをサポートします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Some of the more commonly used streams that inherit from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> are <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">他のよく使用されるストリームから継承する<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>は<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>、および<ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Depending on the underlying data source or repository, streams might support only some of these capabilities.</source>
          <target state="translated">基になるデータ ソースまたはリポジトリによってこれらの機能の一部のみストリームがサポートする可能性があります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can query a stream for its capabilities by using the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">そのような機能のストリームをクエリして、 <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>のプロパティ、<ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> methods read and write data in a variety of formats.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>メソッドの読み取りし、書き込みデータのさまざまな形式です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For streams that support seeking, use the <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> methods and the <ph id="ph3">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> properties to query and modify the current position and length of a stream.</source>
          <target state="translated">ストリームはシークをサポートする場合を使用して、<ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>クエリや、現在の位置と、ストリームの長さを変更するプロパティです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">この型は、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">型の直接 dispose を呼び出す、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドで、 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">直接ことのない破棄する場合など、言語コンストラクトを使用して<ph id="ph1">`using`</ph>(C# の場合) または<ph id="ph2">`Using`</ph>(Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスに関するトピック。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Disposing a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object flushes any buffered data, and essentially calls the <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method for you.</source>
          <target state="translated">破棄、<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>オブジェクトは、バッファー内のデータをフラッシュし、本質的に呼び出して、<ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph>するメソッド。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> ファイル ハンドル、ネットワーク接続、または、内部バッファリングの使用メモリなどのオペレーティング システム リソースを解放します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph>クラスは、折り返しの読み取りを改善し、書き込みのパフォーマンスのために別のストリームのバッファー済みストリームの機能を提供します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class includes async methods to simplify asynchronous operations.</source>
          <target state="translated">以降で、 <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>、<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>クラスには、非同期操作を簡素化する非同期メソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>An async method contains <ph id="ph1">`Async`</ph> in its name, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>.</source>
          <target state="translated">非同期のメソッドを含む<ph id="ph1">`Async`</ph>、名前になど<ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>These methods enable you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">これらのメソッドを使用すると、メイン スレッドをブロックすることがなくリソースを消費する I/O 操作を実行できます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When used in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app, <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> includes two extension methods: <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>.</source>
          <target state="translated">使用する場合、<ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリ、 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 2 つの拡張メソッドが含まれています:<ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>These methods convert a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object to a stream in the <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>.</source>
          <target state="translated">これらのメソッドの変換、<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>ストリームにオブジェクト、<ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can also convert a stream in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> to a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object by using the <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph> methods.</source>
          <target state="translated">ストリームを変換することも、<ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>を<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>オブジェクトを使用して、<ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Convert Between .NET Framework Streams and Windows Runtime Streams<ept id="p1">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept></source>
          <target state="translated">詳細については、次を参照してください<bpt id="p1">[</bpt>する方法: .NET Framework ストリームとの間の変換と Windows ランタイム ストリーム。<ept id="p1">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Some stream implementations perform local buffering of the underlying data to improve performance.</source>
          <target state="translated">ストリームの実装によっては、パフォーマンスを向上させるために基になるデータのローカル バッファー処理を実行します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For such streams, you can use the <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.</source>
          <target state="translated">このようなストリームを使用できます、<ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>内部バッファーをクリアし、基になるデータ ソースまたはリポジトリにすべてのデータが書き込まれたことを確認してください。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>If you need a stream with no backing store (also known as a bit bucket), use the <ph id="ph1">&lt;xref:System.IO.Stream.Null&gt;</ph> field to retrieve an instance of a stream that is designed for this purpose.</source>
          <target state="translated">バッキング ストアを持たない (ビット バケットとも呼ばれます) のストリームを必要がある場合、<ph id="ph1">&lt;xref:System.IO.Stream.Null&gt;</ph>フィールドはこの目的で設計されたストリームのインスタンスを取得します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to asynchronously copy the files from one directory to another directory.</source>
          <target state="translated">次の例は、使用する 2 つの方法を示します<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>非同期的に別のディレクトリに 1 つのディレクトリからファイルをコピーするオブジェクト。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> クラスは <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> クラスから派生します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method.</source>
          <target state="translated">非同期のメソッドを呼び出すので、 <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> コントロールの <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> イベント ハンドラーは <ph id="ph3">`async`</ph> 修飾子でマークされていることに注意してください。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you implement a derived class of <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, you must provide implementations for the <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> methods.</source>
          <target state="translated">派生クラスを実装する場合<ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>の実装を提供する必要があります、<ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>と<ph id="ph3">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The asynchronous methods <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /&gt;</ph> use the synchronous methods <ph id="ph4">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph5">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> in their implementations.</source>
          <target state="translated">非同期のメソッド<ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>、 <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>、および<ph id="ph3">&lt;see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /&gt;</ph>同期メソッドを使用して<ph id="ph4">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>と<ph id="ph5">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>実装でします。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Therefore, your implementations of <ph id="ph1">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> will work correctly with the asynchronous methods.</source>
          <target state="translated">そのため、独自<ph id="ph1">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>非同期メソッドで正常に動作します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The default implementations of <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadByte" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteByte(System.Byte)" /&gt;</ph> create a new single-element byte array, and then call your implementations of <ph id="ph3">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">既定の実装<ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadByte" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteByte(System.Byte)" /&gt;</ph>新しいの 1 つの要素のバイト配列を作成しの実装を呼び出す<ph id="ph3">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>と<ph id="ph4">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you derive from <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, we recommend that you override these methods to access your internal buffer, if you have one, for substantially better performance.</source>
          <target state="translated">派生したときに<ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>、1 つのパフォーマンスを大幅に向上させる必要がある場合、内部バッファーへのアクセスにこれらのメソッドをオーバーライドすることをお勧めします。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You must also provide implementations of <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanRead" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.IO.Stream.CanSeek" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.IO.Stream.Length" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.IO.Stream.Position" /&gt;</ph>, <ph id="ph7">&lt;see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph>, and <ph id="ph8">&lt;see cref="M:System.IO.Stream.SetLength(System.Int64)" /&gt;</ph>.</source>
          <target state="translated">実装を提供する必要がありますも<ph id="ph1">&lt;see cref="P:System.IO.Stream.CanRead" /&gt;</ph>、 <ph id="ph2">&lt;see cref="P:System.IO.Stream.CanSeek" /&gt;</ph>、 <ph id="ph3">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>、 <ph id="ph4">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph>、 <ph id="ph5">&lt;see cref="P:System.IO.Stream.Length" /&gt;</ph>、 <ph id="ph6">&lt;see cref="P:System.IO.Stream.Position" /&gt;</ph>、 <ph id="ph7">&lt;see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph>、および<ph id="ph8">&lt;see cref="M:System.IO.Stream.SetLength(System.Int64)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all the <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> cleanup logic in the <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドしない場合、<ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>メソッドが代わりに、すべてを配置、<ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>のクリーンアップ ロジック、<ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Dispose メソッドの実装<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.#ctor">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> すべてのストリームの抽象基本クラスです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.#ctor">
          <source>Some of the more commonly used streams that inherit from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> are <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">他のよく使用されるストリームから継承する<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>は<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>、および<ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to read the data into.</source>
          <target state="translated">データを読み込むバッファー。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data read from the stream.</source>
          <target state="translated">ストリームから読み込んだデータの書き込み開始位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取る最大バイト数。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the read is complete.</source>
          <target state="translated">読み取り完了時に呼び出されるオプションの非同期コールバック。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">この特定の非同期読み取り要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">非同期の読み込み動作を開始します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(代わりに、<ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> の使用を検討してください。)</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous read, which could still be pending.</source>
          <target state="translated">非同期の読み込みを表す <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>。まだ保留状態の場合もあります。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">.NET Framework 4 およびそれ以前のバージョンで非同期 I/O 操作を実装するには、 <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> 、 <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> などのメソッドを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど<ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>、非同期 I/O 操作をより簡単に実装するヘルプ。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The default implementation of <ph id="ph1">`BeginRead`</ph> on a stream calls the <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> method synchronously, which means that <ph id="ph3">`Read`</ph> might block on some streams.</source>
          <target state="translated">既定の実装<ph id="ph1">`BeginRead`</ph>ストリームで呼び出し、<ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>メソッド同期的に、つまり<ph id="ph3">`Read`</ph>の一部のストリームをブロックする可能性があります。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>However, instances of classes such as <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.</source>
          <target state="translated">ただし、インスタンスなどのクラスの<ph id="ph1">`FileStream`</ph>と<ph id="ph2">`NetworkStream`</ph>インスタンスを非同期的に開かれている場合、非同期操作を完全にサポートします。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Therefore, calls to <ph id="ph1">`BeginRead`</ph> will not block on those streams.</source>
          <target state="translated">そのため、呼び出し<ph id="ph1">`BeginRead`</ph>これらのストリームではブロックされません。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can override <ph id="ph1">`BeginRead`</ph> (by using async delegates, for example) to provide asynchronous behavior.</source>
          <target state="translated">オーバーライドできます<ph id="ph1">`BeginRead`</ph>(を使用して非同期デリゲート、たとえば) 非同期動作を提供します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the <ph id="ph1">`IAsyncResult`</ph> return value to the <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> method of the stream to determine how many bytes were read and to release operating system resources used for reading.</source>
          <target state="translated">渡す、<ph id="ph1">`IAsyncResult`</ph>に値を返す、<ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>読み取られたバイト数を決定しの読み取りに使用されているオペレーティング システム リソースを解放するストリームのメソッドです。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> すべての呼び出しに対して 1 回呼び出す必要があります<ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can do this either by using the same code that called <ph id="ph1">`BeginRead`</ph> or in a callback passed to <ph id="ph2">`BeginRead`</ph>.</source>
          <target state="translated">これを行うかを呼び出した同じコードを使用して、<ph id="ph1">`BeginRead`</ph>またはに渡されたコールバックで<ph id="ph2">`BeginRead`</ph>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.</source>
          <target state="translated">非同期の読み取りまたは書き込みが発行されると、I/O 操作の完了時ではなく、ストリーム内の現在位置が更新されます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">複数の非同期要求は、不定の要求の完了の順序をレンダリングします。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>プロパティを現在のインスタンスが読み取りをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">`BeginRead`</ph>.</source>
          <target state="translated">例外が直ちにスローされる場合は、ストリームが閉じているか、無効な引数を渡す、<ph id="ph1">`BeginRead`</ph>です。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">`EndRead`</ph>.</source>
          <target state="translated">I/O 要求時にディスク障害など、非同期読み取り要求中に発生したエラーは、スレッド プールのスレッドで発生し、呼び出すときに例外をスロー<ph id="ph1">`EndRead`</ph>です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous read past the end of the stream, or a disk error occurs.</source>
          <target state="translated">ストリームの末尾を越えて非同期の読み込みを実行しようとしました。または、ディスク エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">1 つ以上の引数が無効です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementation does not support the read operation.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> 実装は、読み取り操作をサポートしていません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to write data from.</source>
          <target state="translated">データの書き込み元となるバッファー。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin writing.</source>
          <target state="translated">書き込みの開始位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込む最大バイト数。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the write is complete.</source>
          <target state="translated">書き込みの完了時に呼び出されるオプションの非同期コールバック。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">この特定の非同期書き込み要求を他の要求と区別するために使用するユーザー指定のオブジェクト。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を開始します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(代わりに、<ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> の使用を検討してください。)</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see langword="IAsyncResult" /&gt;</ph> that represents the asynchronous write, which could still be pending.</source>
          <target state="translated">非同期の書き込みを表す <ph id="ph1">&lt;see langword="IAsyncResult" /&gt;</ph>。まだ保留状態の場合もあります。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">.NET Framework 4 およびそれ以前のバージョンで非同期 I/O 操作を実装するには、<ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> などのメソッドを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど<ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>、非同期 I/O 操作をより簡単に実装するヘルプ。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The default implementation of <ph id="ph1">`BeginWrite`</ph> on a stream calls the <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> method synchronously, which means that <ph id="ph3">`Write`</ph> might block on some streams.</source>
          <target state="translated">既定の実装<ph id="ph1">`BeginWrite`</ph>ストリームで呼び出し、<ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>メソッド同期的に、つまり<ph id="ph3">`Write`</ph>の一部のストリームをブロックする可能性があります。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>However, instances of classes such as <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.</source>
          <target state="translated">ただし、インスタンスなどのクラスの<ph id="ph1">`FileStream`</ph>と<ph id="ph2">`NetworkStream`</ph>インスタンスを非同期的に開かれている場合、非同期操作を完全にサポートします。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Therefore, calls to <ph id="ph1">`BeginWrite`</ph> will not block on those streams.</source>
          <target state="translated">そのため、呼び出し<ph id="ph1">`BeginWrite`</ph>これらのストリームではブロックされません。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can override <ph id="ph1">`BeginWrite`</ph> (by using async delegates, for example) to provide asynchronous behavior.</source>
          <target state="translated">オーバーライドできます<ph id="ph1">`BeginWrite`</ph>(を使用して非同期デリゲート、たとえば) 非同期動作を提供します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the <ph id="ph1">`IAsyncResult`</ph> returned by the current method to <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to ensure that the write completes and frees resources appropriately.</source>
          <target state="translated">渡す、<ph id="ph1">`IAsyncResult`</ph>を現在のメソッドによって返される<ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph>書き込みが完了して、リソースを適切に解放ことを確認します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> すべての呼び出しに対して 1 回呼び出す必要があります<ph id="ph2">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can do this either by using the same code that called <ph id="ph1">`BeginWrite`</ph> or in a callback passed to <ph id="ph2">`BeginWrite`</ph>.</source>
          <target state="translated">これを行うかを呼び出した同じコードを使用して、<ph id="ph1">`BeginWrite`</ph>またはに渡されたコールバックで<ph id="ph2">`BeginWrite`</ph>です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If an error occurs during an asynchronous write, an exception will not be thrown until <ph id="ph1">`EndWrite`</ph> is called with the <ph id="ph2">`IAsyncResult`</ph> returned by this method.</source>
          <target state="translated">非同期の書き込み中にエラーが発生する場合まで例外はスローされません<ph id="ph1">`EndWrite`</ph>してを呼び出すと、<ph id="ph2">`IAsyncResult`</ph>このメソッドによって返されます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is writable, writing at the end of the stream expands the stream.</source>
          <target state="translated">ストリームが書き込み可能な場合は、ストリームの末尾に書き込み、ストリームが拡張されます。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</source>
          <target state="translated">ストリームの現在の位置は、I/O 操作の完了時ではなく、非同期の読み取りや書き込みを発行したときに更新されます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">複数の非同期要求は、不定の要求の完了の順序をレンダリングします。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>プロパティを現在のインスタンスが書き込みをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">`BeginWrite`</ph>.</source>
          <target state="translated">例外が直ちにスローされる場合は、ストリームが閉じているか、無効な引数を渡す、<ph id="ph1">`BeginWrite`</ph>です。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">I/O 要求時にディスク障害など、非同期書き込み要求中に発生したエラーは、スレッド プールのスレッドで発生し、呼び出すときに例外をスロー<ph id="ph1">`EndWrite`</ph>です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous write past the end of the stream, or a disk error occurs.</source>
          <target state="translated">ファイルの末尾を越えて非同期の書き込みを実行しようとしました。または、ディスク エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">1 つ以上の引数が無効です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementation does not support the write operation.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> 実装は、書き込み操作をサポートしていません。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanRead">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">派生クラスでオーバーライドされた場合は、現在のストリームが読み取りをサポートするかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports reading; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ストリームが読み込みをサポートしている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> methods throw a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">派生したクラス場合<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>読み取りをサポートしませんへの呼び出し、 <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>メソッドをスロー、<ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>The following is an example of using the <ph id="ph1">`CanRead`</ph> property.</source>
          <target state="translated">次の例に示しますを使用して、<ph id="ph1">`CanRead`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanSeek">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">派生クラスでオーバーライドされた場合は、現在のストリームがシークをサポートするかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports seeking; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ストリームがシークをサポートしている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id="ph2">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">派生したクラス場合<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>への呼び出しをシークをサポートしていない<ph id="ph2">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph>スロー、<ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanTimeout">
          <source>Gets a value that determines whether the current stream can time out.</source>
          <target state="translated">現在のストリームがタイムアウトできるかどうかを決定する値を取得します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>A value that determines whether the current stream can time out.</source>
          <target state="translated">現在のストリームがタイムアウトできるかどうかを決定する値。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> property always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> プロパティは常に <ph id="ph2">`false`</ph> を返します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>Some stream implementations require different behavior, such as <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, which times out if network connectivity is interrupted or lost.</source>
          <target state="translated">ストリームの実装によってはなどさまざまな動作を必要<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>、これがタイムアウトになるネットワーク接続が中断または消失した場合。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>If you are implementing a stream that must be able to time out, this property should be overridden to return <ph id="ph1">`true`</ph>.</source>
          <target state="translated">返される、このプロパティをオーバーライドする必要がありますがタイムアウトする必要があるストリームを実装している場合<ph id="ph1">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanWrite">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">派生クラスでオーバーライドされた場合は、現在のストリームが書き込みをサポートするかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports writing; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ストリームが書き込みをサポートしている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> throws a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">派生したクラス場合<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>への呼び出しの書き込みをサポートしていません<ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>、または<ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph>をスロー、<ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>The following is an example of using the <ph id="ph1">`CanWrite`</ph> property.</source>
          <target state="translated">次の例に示しますを使用して、<ph id="ph1">`CanWrite`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Close">
          <source>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</source>
          <target state="translated">現在のストリームを閉じ、現在のストリームに関連付けられているすべてのリソース (ソケット、ファイル ハンドルなど) を解放します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Close">
          <source>Instead of calling this method, ensure that the stream is properly disposed.</source>
          <target state="translated">このメソッドを呼び出す代わりに、ストリームが適切に破棄されていることを確認します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This method calls <ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>, specifying <ph id="ph2">`true`</ph> to release all resources.</source>
          <target state="translated">このメソッドを呼び出す<ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>を指定して、<ph id="ph2">`true`</ph>をすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>You do not have to specifically call the <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method.</source>
          <target state="translated">特にを呼び出す必要はありません、<ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Instead, ensure that every <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object is properly disposed.</source>
          <target state="translated">代わりに、必ずすべて<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>オブジェクトを確実に破棄します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>You can declare <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objects within a <ph id="ph2">`using`</ph> block (or <ph id="ph3">`Using`</ph> block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <ph id="ph4">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">宣言することができます<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>内のオブジェクトは、<ph id="ph2">`using`</ph>ブロック (または<ph id="ph3">`Using`</ph>Visual Basic でのブロック) とそのすべてのリソース ストリームが破棄されると、または明示的に呼び出すことができます、<ph id="ph4">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
          <target state="translated">実装を明示的に呼び出す場合を除き、ストリームのフラッシュは、基になるエンコーダー フラッシュされません<ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph>または<ph id="ph2">`Close`</ph>です。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph>に<ph id="ph2">`true`</ph>に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</source>
          <target state="translated">このシナリオでは、UTF8、UTF7、エンコーダーは、隣接する文字または文字列を受信した後にのみ特定の文字をエンコードすることができますに影響します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Attempts to manipulate the stream after the stream has been closed might throw an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</source>
          <target state="translated">ストリームが閉じられた後にストリームを操作する試行をスローする可能性、<ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>In derived classes, do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all of the <ph id="ph2">&lt;see langword="Stream" /&gt;</ph> cleanup logic in the <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">派生クラスでオーバーライドしない、<ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>メソッドを代わりに、すべての配置、<ph id="ph2">&lt;see langword="Stream" /&gt;</ph>のクリーンアップ ロジック、<ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Dispose メソッドの実装<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">現在のストリームからバイトを読み取り、別のストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">現在のストリームの内容のコピー先のストリーム。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">現在のストリームからバイトを読み取り、別のストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</source>
          <target state="translated">コピーと、現在のストリームの現在位置にあるが開始され、コピー操作が完了した後、コピー先のストリームの位置をリセットしません。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The following example copies the contents of a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> to a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">次の例の内容をコピーする、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>を<ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The current stream does not support reading.</source>
          <target state="translated">現在のストリームは読み取りをサポートしません。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> does not support writing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> は、書き込みをサポートしません。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Either the current stream or <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> were closed before the <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> method was called.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> メソッドが呼び出される前に、現在のストリームまたは <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> が閉じられました。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">現在のストリームの内容のコピー先のストリーム。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The size of the buffer.</source>
          <target state="translated">バッファーのサイズ。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>This value must be greater than zero.</source>
          <target state="translated">これは、0 より大きい値である必要があります。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The default size is 81920.</source>
          <target state="translated">既定のサイズは 81920 です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</source>
          <target state="translated">指定されたバッファー サイズを使用して、現在のストリームからバイトを読み取り、別のストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</source>
          <target state="translated">コピーと、現在のストリームの現在位置にあるが開始され、コピー操作が完了した後、コピー先のストリームの位置をリセットしません。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> が負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The current stream does not support reading.</source>
          <target state="translated">現在のストリームは読み取りをサポートしません。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> does not support writing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> は、書き込みをサポートしません。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Either the current stream or <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> were closed before the <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> method was called.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> メソッドが呼び出される前に、現在のストリームまたは <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> が閉じられました。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">現在のストリームからすべてのバイトを非同期に読み取り、別のストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">現在のストリームの内容のコピー先のストリーム。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">現在のストリームからすべてのバイトを非同期に読み取り、別のストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">非同期のコピー操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>メソッドでは、メイン スレッドをブロックすることがなくリソースを消費する I/O 操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">現在のストリームの現在位置にあるコピーを開始します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to asynchronously copy the files from one directory to another.</source>
          <target state="translated">次の例は、使用する 2 つの方法を示します<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>別に 1 つのディレクトリからファイルを非同期的にコピーするオブジェクト。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> クラスは <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> クラスから派生します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method</source>
          <target state="translated">注意して、<ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph>のイベント ハンドラー、<ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>コントロールが付いて、<ph id="ph3">`async`</ph>修飾子非同期メソッドを呼び出すので</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">現在のストリームまたはコピー先ストリームは破棄されます。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">現在のストリームが読み取りをサポートしていないか、コピー先のストリームが書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">現在のストリームの内容のコピー先のストリーム。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">バッファーのサイズ (バイト数)。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>This value must be greater than zero.</source>
          <target state="translated">これは、0 より大きい値である必要があります。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The default size is 81920.</source>
          <target state="translated">既定のサイズは 81920 です。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</source>
          <target state="translated">指定されたバッファー サイズを使用して、現在のストリームからバイトを非同期に読み取り、別のストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">非同期のコピー操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>メソッドでは、メイン スレッドをブロックすることがなくリソースを消費する I/O 操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">現在のストリームの現在位置にあるコピーを開始します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>For an example of copying between two streams, see the <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.</source>
          <target state="translated">2 つのストリーム間のコピーの例は、次を参照してください。、<ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph>オーバー ロードします。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> が負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">現在のストリームまたはコピー先ストリームは破棄されます。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">現在のストリームが読み取りをサポートしていないか、コピー先のストリームが書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">現在のストリームの内容のコピー先のストリーム。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">バッファーのサイズ (バイト数)。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This value must be greater than zero.</source>
          <target state="translated">これは、0 より大きい値である必要があります。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The default size is 81920.</source>
          <target state="translated">既定のサイズは 81920 です。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するためのトークン。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</source>
          <target state="translated">指定されたバッファー サイズを使用して、現在のストリームからバイトを非同期に読み取り、指定されたバッファー サイズとキャンセル トークンを使用して、別のストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">非同期のコピー操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>メソッドでは、メイン スレッドをブロックすることがなくリソースを消費する I/O 操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">返されるタスクに含まれる完了前に、操作が取り消された場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>値を<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">現在のストリームの現在位置にあるコピーを開始します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>For an example of copying between two streams, see the <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.</source>
          <target state="translated">2 つのストリーム間のコピーの例は、次を参照してください。、<ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph>オーバー ロードします。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> が負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">現在のストリームまたはコピー先ストリームは破棄されます。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">現在のストリームが読み取りをサポートしていないか、コピー先のストリームが書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>Allocates a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> オブジェクトを割り当てます。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>A reference to the allocated <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph>.</source>
          <target state="translated">割り当てられた <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> への参照。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>When called for the first time, the current method creates a <ph id="ph1">`WaitHandle`</ph> object and returns it.</source>
          <target state="translated">最初に呼び出されると、現在のメソッドを作成、<ph id="ph1">`WaitHandle`</ph>オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>On subsequent calls, <ph id="ph1">`CreateWaitHandle`</ph> returns a reference to a new wait handle.</source>
          <target state="translated">後続の呼び出しで<ph id="ph1">`CreateWaitHandle`</ph>新しい待機ハンドルへの参照を返します。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>Use this method if you implement the asynchronous methods and require a way of blocking in <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> until the asynchronous operation is complete.</source>
          <target state="translated">非同期のメソッドを実装ブロッキングの方法を必要とする場合、このメソッドを使用して<ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph>非同期操作が完了するまでです。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> オブジェクトによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> によって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.</source>
          <target state="translated">このメソッドは、バッキング ストアへのすべての変更の書き込みとリソースを解放するストリームを終了して、ストリームを破棄します。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Calling <ph id="ph1">`Dispose`</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">呼び出す<ph id="ph1">`Dispose`</ph>によりによって使用されるリソース、<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>を他の目的に再割り当てされます。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">`Dispose`</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Place all cleanup logic for your stream object in <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">ストリーム オブジェクトのすべてのクリーンアップ ロジックを配置<ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Do not override <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>.</source>
          <target state="translated">オーバーライドしない<ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Note that because of backward compatibility requirements, this method's implementation differs from the recommended guidance for the Dispose pattern.</source>
          <target state="translated">旧バージョンとの互換性求められるので、このメソッドの実装が Dispose パターンの推奨されるガイダンスと異なることに注意してください。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>This method calls <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>, which then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">このメソッドを呼び出す<ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>、呼び出す<ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>You should release all resources by specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`disposing`</ph>.</source>
          <target state="translated">指定してすべてのリソースを解放する必要があります<ph id="ph1">`true`</ph>の<ph id="ph2">`disposing`</ph>します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>When <ph id="ph1">`disposing`</ph> is <ph id="ph2">`true`</ph>, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.</source>
          <target state="translated">ときに<ph id="ph1">`disposing`</ph>は<ph id="ph2">`true`</ph>もに、ストリームにデータを基になるバッファーがフラッシュされ、ファイナライズ可能なその他のオブジェクトへのアクセスを確認できます。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>This may not be possible when called from a finalizer due a lack of ordering among finalizers.</source>
          <target state="translated">これができないファイナライザー間の順序がなくなったのため、ファイナライザーから呼び出された場合。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>If your stream is using an operating system handle to communicate with its source, consider using a subclass of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> for this purpose.</source>
          <target state="translated">ストリームは、オペレーティング システム ハンドルをそのソースとの通信に使用されている場合は、サブクラスを使用することを検討してください<ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph>この目的のためです。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> プロテクト呼び出します<ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 呼び出す<ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>で<ph id="ph3">`disposing`</ph>'éý'<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>In derived classes, do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all of the Stream cleanup logic in the <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">派生クラスでオーバーライドしない、<ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>メソッドが代わりに、すべてのストリームのクリーンアップ ロジックを配置、<ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> は、他のオブジェクトから複数回呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> をオーバーライドする場合は、以前に <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">実装する方法の詳細についての<ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>Dispose メソッドの実装<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request to finish.</source>
          <target state="translated">終了させる保留状態の非同期リクエストへの参照。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Waits for the pending asynchronous read to complete.</source>
          <target state="translated">保留中の非同期読み取りが完了するまで待機します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(代わりに、<ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> の使用を検討してください。)</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the stream, between zero (0) and the number of bytes you requested.</source>
          <target state="translated">ストリームから読み取ったバイト数 (0 ～要求したバイト数の間の数値)。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</source>
          <target state="translated">ゼロ (0) が返されるのは、ストリームの末尾で読み取ろうとしたときだけです。それ以外の場合は、少なくとも 1 バイトが読み込み可能になるまでブロックします。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">.NET Framework 4 およびそれ以前のバージョンで非同期 I/O 操作を実装するには、 <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> 、 <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> などのメソッドを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど<ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>、非同期 I/O 操作をより簡単に実装するヘルプ。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Call <ph id="ph1">`EndRead`</ph> to determine how many bytes were read from the stream.</source>
          <target state="translated">呼び出す<ph id="ph1">`EndRead`</ph>をストリームから読み取られたバイト数を決定します。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">`EndRead`</ph> can be called once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`EndRead`</ph> 1 回呼び出すことができるすべて<ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>から<ph id="ph3">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">このメソッドは、I/O 操作が完了するまでブロックします。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>A handle to the pending read operation is not available.</source>
          <target state="translated">保留中の読み取り操作へのハンドルは使用できません。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The pending operation does not support reading.</source>
          <target state="translated">保留中の操作は読み取りをサポートしていません。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> は現在のストリームの <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> メソッドから取得されませんでした。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">ストリームが閉じているか、内部エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>A reference to the outstanding asynchronous I/O request.</source>
          <target state="translated">保留状態の非同期 I/O リクエストへの参照。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Ends an asynchronous write operation.</source>
          <target state="translated">非同期書き込み操作を終了します。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">(代わりに、<ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> の使用を検討してください。)</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">.NET Framework 4 およびそれ以前のバージョンで非同期 I/O 操作を実装するには、<ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> などのメソッドを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど<ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>、非同期 I/O 操作をより簡単に実装するヘルプ。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">`EndWrite`</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`EndWrite`</ph> 1 回だけ呼び出す必要がありますすべて<ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>から<ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">このメソッドは、I/O 操作が完了するまでブロックします。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">I/O 要求時にディスク障害など、非同期書き込み要求中に発生したエラーは、スレッド プールのスレッドで発生しへの呼び出しに可視になる<ph id="ph1">`EndWrite`</ph>です。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Exceptions thrown by the thread pool thread will not be visible when calling <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">呼び出すときに、スレッド プールのスレッドによってスローされた例外は表示されません<ph id="ph1">`EndWrite`</ph>です。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>A handle to the pending write operation is not available.</source>
          <target state="translated">保留中の書き込み操作へのハンドルは使用できません。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>The pending operation does not support writing.</source>
          <target state="translated">保留中の操作は書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> は現在のストリームの <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> メソッドから取得されませんでした。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">ストリームが閉じているか、内部エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Flush">
          <source>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">派生クラスによってオーバーライドされた場合は、ストリームに対応するすべてのバッファーをクリアし、バッファー内のデータを基になるデバイスに書き込みます。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Override <ph id="ph1">`Flush`</ph> on streams that implement a buffer.</source>
          <target state="translated">オーバーライド<ph id="ph1">`Flush`</ph>ストリームのバッファーを実装します。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both.</source>
          <target state="translated">基になるバッファーからの移行先への情報の移動、バッファー、またはその両方をオフにするには、このメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking).</source>
          <target state="translated">オブジェクトの状態によっては、(たとえば、基になるストリームのシークをサポートしている) 場合に、ストリーム内の現在位置を変更する必要があります。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>For additional information see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">詳細については、<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> のトピックを参照してください。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>When using the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> class, do not flush the base <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
          <target state="translated">使用する場合、<ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>または<ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph>クラス、基数をフラッシュしない<ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Instead, use the class's <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</source>
          <target state="translated">代わりに、クラスの<ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>メソッドをそのデータが最初に基になるストリームにフラッシュし、ファイルに書き込むことを確認します。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Flush">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">ストリームに対応するすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込みます。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">ストリームに対応するすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込みます。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">非同期のフラッシュ操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync">
          <source>If a derived class, such as <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.</source>
          <target state="translated">派生クラスなど<ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph>または<ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>の実装でバッファーをフラッシュしません、 <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> 、メソッド、<ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>メソッドは、バッファーをフラッシュされません。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されています。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するためのトークン。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">ストリームに対応するすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込み、キャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">非同期のフラッシュ操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">返されるタスクに含まれる完了前に、操作が取り消された場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>値を<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>If a derived class, such as <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.</source>
          <target state="translated">派生クラスなど<ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph>または<ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>の実装でバッファーをフラッシュしません、 <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> 、メソッド、<ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>メソッドは、バッファーをフラッシュされません。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されています。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>When overridden in a derived class, gets the length in bytes of the stream.</source>
          <target state="translated">派生クラスでオーバーライドされた場合は、ストリームの長さをバイト単位で取得します。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Length">
          <source>A long value representing the length of the stream in bytes.</source>
          <target state="translated">ストリーム長 (バイト単位) を表す long 値。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>A class derived from <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> does not support seeking.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Stream" /&gt;</ph> から派生したクラスがシークをサポートしていません。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="F:System.IO.Stream.Null">
          <source>A <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> with no backing store.</source>
          <target state="translated">バッキング ストアを持たない <ph id="ph1">&lt;see langword="Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source>Use <ph id="ph1">`Null`</ph> to redirect output to a stream that will not consume any operating system resources.</source>
          <target state="translated">使用して<ph id="ph1">`Null`</ph>はすべてのオペレーティング システム リソースを消費していないストリームに出力をリダイレクトします。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source>When the methods of <ph id="ph1">`Stream`</ph> that provide writing are invoked on <ph id="ph2">`Null`</ph>, the call simply returns, and no data is written.</source>
          <target state="translated">ときに、メソッドの<ph id="ph1">`Stream`</ph>で書き込みが呼び出されるを提供する<ph id="ph2">`Null`</ph>呼び出しを単純に返します、およびデータは書き込まれません。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source><ph id="ph1">`Null`</ph> also implements a <ph id="ph2">`Read`</ph> method that returns zero without reading data.</source>
          <target state="translated"><ph id="ph1">`Null`</ph> 実装しても、<ph id="ph2">`Read`</ph>データの読み取りに 0 を返すメソッド。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ObjectInvariant">
          <source>Provides support for a <ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.Contract" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.Contract" /&gt;</ph> のサポートを提供します。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>When overridden in a derived class, gets or sets the position within the current stream.</source>
          <target state="translated">派生クラスでオーバーライドされた場合は、現在のストリーム内の位置を取得または設定します。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The current position within the stream.</source>
          <target state="translated">ストリーム内の現在位置。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The stream must support seeking to get or set the position.</source>
          <target state="translated">ストリームは、取得または位置を設定するシークをサポートする必要があります。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the stream supports seeking.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>ストリームがシークをサポートしているかどうかを決定するプロパティです。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">ストリームの長さを超えた位置へのシークはサポートされています。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The <ph id="ph1">`Position`</ph> property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</source>
          <target state="translated"><ph id="ph1">`Position`</ph>プロパティがないの追跡が消費されている、スキップ、ストリーム、またはその両方からのバイト数。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>The stream does not support seeking.</source>
          <target state="translated">このストリームはシークをサポートしていません。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">バイト配列。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, the buffer contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">このメソッドが返るときに、バッファーは現在のソースから読み取ったバイトにより置き換えられた、<bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept>から (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) の間の値を持つ指定されたバイト配列を含みます。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin storing the data read from the current stream.</source>
          <target state="translated">現在のストリームから読み取ったデータの格納を開始する位置を示す<bpt id="p1">&lt;c&gt;</bpt>バッファー<ept id="p1">&lt;/c&gt;</ept>内の 0 から始まるバイト オフセット。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to be read from the current stream.</source>
          <target state="translated">現在のストリームから読み取る最大バイト数。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">派生クラスによってオーバーライドされた場合は、現在のストリームからバイト シーケンスを読み取り、読み取ったバイト数の分だけストリームの位置を進めます。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">バッファーに読み取られた合計バイト数。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</source>
          <target state="translated">要求しただけのバイト数を読み取ることができなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 (ゼロ) になることがあります。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>プロパティを現在のインスタンスが読み取りをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method to read asynchronously from the current stream.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>を現在のストリームから非同期的に読み取る方法です。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Implementations of this method read a maximum of <ph id="ph1">`count`</ph> bytes from the current stream and store them in <ph id="ph2">`buffer`</ph> beginning at <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">このメソッドの実装の最大を読み取る<ph id="ph1">`count`</ph>現在からのバイト ストリームし、で格納<ph id="ph2">`buffer`</ph>始点<ph id="ph3">`offset`</ph>です。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.</source>
          <target state="translated">読み取りバイト数だけストリーム内の現在位置が高度なただし、例外が発生する場合、ストリーム内の現在の位置は変更されません。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Implementations return the number of bytes read.</source>
          <target state="translated">実装は、読み取られたバイト数を返します。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The implementation will block until at least one byte of data can be read, in the event that no data is available.</source>
          <target state="translated">実装は、データがないことには、少なくとも 1 バイトのデータを読み取ることができるまでブロックされます。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> ストリームにデータがあり、(閉じたソケットやファイルの末尾) など他の予定はない場合にのみ、0 を返します。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">実装は、ストリームの末尾に達していない場合でも、要求されたより少ないバイト数を返すことです。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph>プリミティブ データ型を読み取るためです。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> to read a block of data.</source>
          <target state="translated">次の例は、使用する方法を示しています。<ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>データのブロックを読み取れません。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が、バッファーの長さよりも大きくなっています。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしません。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">現在のストリームからバイト シーケンスを非同期に読み取り、読み取ったバイト数だけストリーム内の位置を進めます。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write the data into.</source>
          <target state="translated">データを書き込むバッファー。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">ストリームからのデータの書き込み開始位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取る最大バイト数。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">現在のストリームからバイト シーケンスを非同期に読み取り、読み取ったバイト数だけストリーム内の位置を進めます。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">非同期の読み取り操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>メソッドでは、メイン スレッドをブロックすることがなくリソースを消費する I/O 操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>プロパティを現在のインスタンスが読み取りをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to read from a file asynchronously.</source>
          <target state="translated">次の例では、非同期的に、ファイルを読み取る方法を示します。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が、バッファーの長さよりも大きくなっています。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしません。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されています。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">ストリームは、前の読み取り操作によって現在使用されています。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">データを書き込むバッファー。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">ストリームからのデータの書き込み開始位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取る最大バイト数。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するためのトークン。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">現在のストリームからバイト シーケンスを非同期に読み取り、読み取ったバイト数だけストリーム内の位置を進め、キャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">非同期の読み取り操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>メソッドでは、メイン スレッドをブロックすることがなくリソースを消費する I/O 操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>プロパティを現在のインスタンスが読み取りをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">返されるタスクに含まれる完了前に、操作が取り消された場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>値を<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.</source>
          <target state="translated">例については、次を参照してください。、<ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>オーバー ロードします。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が、バッファーの長さよりも大きくなっています。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしません。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されています。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">ストリームは、前の読み取り操作によって現在使用されています。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</source>
          <target state="translated">ストリームから 1 バイトを読み取り、ストリーム内の位置を 1 バイト進めます。ストリームの末尾の場合は -1 を返します。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>The unsigned byte cast to an <ph id="ph1">&lt;see langword="Int32" /&gt;</ph>, or -1 if at the end of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Int32" /&gt;</ph> にキャストされた符号なしバイト。ストリームの末尾の場合は -1。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>プロパティを現在のインスタンスが読み取りをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Attempts to manipulate the stream after the stream has been closed could throw an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</source>
          <target state="translated">ストリームが閉じられた後にストリームを操作しようとすると、<ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしません。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">既定の実装<ph id="ph1">&lt;see langword="Stream" /&gt;</ph>新しいシングル バイト配列を作成し、呼び出して<ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">これは、正しい正式には、効率的なことはできません。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">内部バッファーと共にストリームは、このメソッドをオーバーライドし、読み取りバッファーを直接呼び出しごとに余分な配列の割り当てを回避するバージョンをはるかに効率的に提供する必要があります。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.ReadTimeout">
          <source>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</source>
          <target state="translated">ストリームがタイムアウト前に読み取りを試行する期間を決定する値 (ミリ秒単位) を取得または設定します。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</source>
          <target state="translated">ストリームがタイムアウト前に読み取りを試行する期間を決定する値 (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.ReadTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> method always throws an <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> メソッドは、常に <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> をスローします。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> property should be overridden to provide the appropriate behavior for the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph>ストリームの適切な動作を提供するプロパティをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>If the stream does not support timing out, this property should raise an <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">このプロパティを発生させる、ストリームがタイムアウトをサポートしていない場合、<ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A byte offset relative to the <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> パラメーターを基準とするバイト オフセット。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indicating the reference point used to obtain the new position.</source>
          <target state="translated">新しい位置を取得するために使用する参照ポイントを示す <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> 型の値。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>When overridden in a derived class, sets the position within the current stream.</source>
          <target state="translated">派生クラスでオーバーライドされた場合は、現在のストリーム内の位置を設定します。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position within the current stream.</source>
          <target state="translated">現在のストリーム内の新しい位置。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the current instance supports seeking.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>プロパティを現在のインスタンスがシークをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is negative, the new position is required to precede the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`offset`</ph>は負の場合、新しい位置が必要で指定した位置の前に<ph id="ph2">`origin`</ph>で指定したバイト数だけ<ph id="ph3">`offset`</ph>です。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is zero (0), the new position is required to be the position specified by <ph id="ph2">`origin`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`offset`</ph>ゼロ (0) は、新しい位置に指定した位置である必要は<ph id="ph2">`origin`</ph>します。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is positive, the new position is required to follow the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`offset`</ph>が正の値であり、新しい位置は指定した位置に従う必要<ph id="ph2">`origin`</ph>で指定したバイト数だけ<ph id="ph3">`offset`</ph>です。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Classes derived from <ph id="ph1">`Stream`</ph> that support seeking must override this method to provide the functionality described above.</source>
          <target state="translated">派生したクラス<ph id="ph1">`Stream`</ph>サポートを求める必要があります上記の機能を提供するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">ストリームの長さを超えた位置へのシークはサポートされています。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</source>
          <target state="translated">ストリームがシークをサポートしていません。たとえば、ストリームがパイプまたはコンソール出力によって生成された可能性があります。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>The desired length of the current stream in bytes.</source>
          <target state="translated">現在のストリームの希望の長さ (バイト数)。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>When overridden in a derived class, sets the length of the current stream.</source>
          <target state="translated">派生クラスでオーバーライドされた場合は、現在のストリームの長さを設定します。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the specified value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">指定した値が、ストリームの現在の長さより小さい場合は、ストリームは切り捨てられます。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the specified value is larger than the current length of the stream, the stream is expanded.</source>
          <target state="translated">指定した値が、ストリームの現在の長さより大きい場合は、ストリームが拡張されます。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the stream is expanded, the contents of the stream between the old and the new length are not defined.</source>
          <target state="translated">ストリームが展開されている場合、古いクライアント シークレットと新しい長さの間のストリームの内容が定義されていません。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">ストリームは書き込みとシークの両方をサポートする必要があります<ph id="ph1">`SetLength`</ph>動作をします。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing, and the <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether seeking is supported.</source>
          <target state="translated">使用して、 <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> 、現在のインスタンスがドキュメントの作成をサポートしているかどうかを決定するプロパティと<ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>シークがサポートされているかどうかを決定するプロパティです。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</source>
          <target state="translated">ストリームが書き込みとシークの両方をサポートしていません。たとえば、ストリームがパイプまたはコンソール出力によって生成された可能性があります。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object to synchronize.</source>
          <target state="translated">同期する <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>Creates a thread-safe (synchronized) wrapper around the specified <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> オブジェクトをラップするスレッド セーフな (同期された) ラッパーを作成します。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>A thread-safe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">スレッド セーフな <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>This method returns a class that wraps the specified <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object and restricts access to it from multiple threads.</source>
          <target state="translated">このメソッドは、指定されたをラップするクラスを返します<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>オブジェクトし、複数のスレッドからそれへのアクセスを制限します。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>All access to the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object will be thread safe.</source>
          <target state="translated">アクセスをすべて、<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>オブジェクトはスレッド セーフになります。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">バイト配列。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This method copies <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> bytes from <bpt id="p2">&lt;c&gt;</bpt>buffer<ept id="p2">&lt;/c&gt;</ept> to the current stream.</source>
          <target state="translated">このメソッドは、<bpt id="p2">&lt;c&gt;</bpt>buffer<ept id="p2">&lt;/c&gt;</ept> から現在のストリームに、<bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> バイト数だけコピーします。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated">現在のストリームへのバイトのコピーを開始する位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。インデックス番号は 0 から始まります。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to be written to the current stream.</source>
          <target state="translated">現在のストリームに書き込むバイト数。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">派生クラスによってオーバーライドされた場合は、現在のストリームにバイト シーケンスを書き込み、書き込んだバイト数の分だけストリームの現在位置を進めます。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>プロパティを現在のインスタンスが書き込みをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method to write asynchronously to the current stream.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>現在のストリームに非同期的に書き込む方法です。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If the write operation is successful, the position within the stream advances by the number of bytes written.</source>
          <target state="translated">書き込み操作が成功した場合、ストリーム内の位置は、書き込まれたバイト数だけ進めます。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the position within the stream remains unchanged.</source>
          <target state="translated">例外が発生する場合、ストリーム内の位置は変更されません。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is greater than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が、バッファーの長さよりも大きくなっています。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occured, such as the specified file cannot be found.</source>
          <target state="translated">指定したファイルが見つからないなど、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしません。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> was called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後で <ph id="ph1">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> が呼び出されました。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">現在のストリームにバイト シーケンスを非同期に書き込み、書き込んだバイト数だけストリーム内の現在位置を進めます。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write data from.</source>
          <target state="translated">データの書き込み元となるバッファー。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">ストリームへのバイトのコピーを開始する位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。インデックス番号は 0 から始まります。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込む最大バイト数。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">現在のストリームにバイト シーケンスを非同期に書き込み、書き込んだバイト数だけストリーム内の現在位置を進めます。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>メソッドでは、メイン スレッドをブロックすることがなくリソースを消費する I/O 操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>プロパティを現在のインスタンスが書き込みをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to write asynchronously to a file.</source>
          <target state="translated">次の例では、ファイルを非同期的に書き込む方法を示します。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>から派生するクラス、<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が、バッファーの長さよりも大きいです。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしません。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されています。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">ストリームは、前の書き込み操作によって現在使用されています。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">データの書き込み元となるバッファー。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">ストリームへのバイトのコピーを開始する位置を示す <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内のバイト オフセット。インデックス番号は 0 から始まります。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込む最大バイト数。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するためのトークン。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">現在のストリームにバイト シーケンスを非同期に書き込み、書き込んだバイト数だけストリーム内の現在位置を進め、キャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>メソッドでは、メイン スレッドをブロックすることがなくリソースを消費する I/O 操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、時間のかかるストリーム操作によって UI スレッドがブロックされ、アプリが動作していないと見なされる可能性がある <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> アプリで特に重要です。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>プロパティを現在のインスタンスが書き込みをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">返されるタスクに含まれる完了前に、操作が取り消された場合、<ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>値を<ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.</source>
          <target state="translated">例については、次を参照してください。、<ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>オーバー ロードします。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が、バッファーの長さよりも大きいです。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしません。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されています。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">ストリームは、前の書き込み操作によって現在使用されています。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The byte to write to the stream.</source>
          <target state="translated">ストリームに書き込むバイト。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</source>
          <target state="translated">ストリームの現在位置にバイトを書き込み、ストリームの位置を 1 バイトだけ進めます。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>プロパティを現在のインスタンスが書き込みをサポートするかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The stream does not support writing, or the stream is already closed.</source>
          <target state="translated">ストリームが書き込みをサポートしていないか、既に閉じています。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">ストリームが閉じた後でメソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">既定の実装<ph id="ph1">&lt;see langword="Stream" /&gt;</ph>新しいシングル バイト配列を作成し、呼び出して<ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">これは、正しい正式には、効率的なことはできません。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that writes to the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">内部バッファーと共にストリームは、このメソッドをオーバーライドし、バッファーに書き込みますを直接呼び出しごとに余分な配列の割り当てを回避するバージョンをはるかに効率的に提供する必要があります。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.WriteTimeout">
          <source>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</source>
          <target state="translated">ストリームがタイムアウト前に書き込みを試行する期間を決定する値 (ミリ秒単位) を取得または設定します。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</source>
          <target state="translated">ストリームがタイムアウト前に書き込みを試行する期間を決定する値 (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.WriteTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> method always throws an <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> メソッドは、常に <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> をスローします。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> property should be overridden to provide the appropriate behavior for the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph>ストリームの適切な動作を提供するプロパティをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>If the stream does not support timing out, this property should raise an <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">このプロパティを発生させる、ストリームがタイムアウトをサポートしていない場合、<ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>