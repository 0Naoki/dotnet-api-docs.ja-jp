<Type Name="Path" FullName="System.IO.Path">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0ef473bd6615db5908afedacb6564d0e78685953" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Path" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Path extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Path" />
  <TypeSignature Language="VB.NET" Value="Public Class Path" />
  <TypeSignature Language="C++ CLI" Value="public ref class Path abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="167cc-101">ファイルまたはディレクトリのパス情報を格納する <see cref="T:System.String" /> インスタンスで操作を実行します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="167cc-101">Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information.</span>
      </span>
      <span data-ttu-id="167cc-102">これらの操作は、プラットフォーム間で実行されます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="167cc-102">These operations are performed in a cross-platform manner.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-103">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"\\\\。 \PHYSICALDRIVE0"です。</span><span class="sxs-lookup"><span data-stu-id="167cc-103">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="167cc-104">パスは、ファイルまたはディレクトリの場所を提供する文字列です。</span><span class="sxs-lookup"><span data-stu-id="167cc-104">A path is a string that provides the location of a file or directory.</span></span> <span data-ttu-id="167cc-105">パスが必ずしも; ディスク上の場所を指していませんたとえば、パスは、メモリ内、またはデバイス上の場所マップ可能性があります。</span><span class="sxs-lookup"><span data-stu-id="167cc-105">A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device.</span></span> <span data-ttu-id="167cc-106">パスの正確な形式は、現在のプラットフォームによって決まります。</span><span class="sxs-lookup"><span data-stu-id="167cc-106">The exact format of a path is determined by the current platform.</span></span> <span data-ttu-id="167cc-107">たとえば、一部のシステムでパスを開始できますドライブまたはボリューム文字では、この要素は、他のシステムに存在することはありません。</span><span class="sxs-lookup"><span data-stu-id="167cc-107">For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems.</span></span> <span data-ttu-id="167cc-108">一部のシステムでファイル パスがファイルに格納されている情報の種類を示す拡張子を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="167cc-108">On some systems, file paths can contain extensions, which indicate the type of information stored in the file.</span></span> <span data-ttu-id="167cc-109">ファイル名拡張子の形式がプラットフォームに依存します。たとえば、システムによって次の 3 つの文字に制限し、そうでないです。</span><span class="sxs-lookup"><span data-stu-id="167cc-109">The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters, and others do not.</span></span> <span data-ttu-id="167cc-110">現在のプラットフォームでは、パスの要素を区切るために使用する文字のセットとパスを指定するときに使用できない文字のセットも決定します。</span><span class="sxs-lookup"><span data-stu-id="167cc-110">The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths.</span></span> <span data-ttu-id="167cc-111">フィールドのこれらの違いにより、`Path`クラスの一部のメンバーの正確な動作に加えて、`Path`クラスは、プラットフォームに依存します。</span><span class="sxs-lookup"><span data-stu-id="167cc-111">Because of these differences, the fields of the `Path` class as well as the exact behavior of some members of the `Path` class are platform-dependent.</span></span>  
  
 <span data-ttu-id="167cc-112">パスは、絶対または相対位置情報を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="167cc-112">A path can contain absolute or relative location information.</span></span> <span data-ttu-id="167cc-113">絶対パスが完全に場所を指定します。 ファイルまたはディレクトリを現在の場所に関係なく一意に識別できます。</span><span class="sxs-lookup"><span data-stu-id="167cc-113">Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location.</span></span> <span data-ttu-id="167cc-114">相対パスは、部分的な場所を指定します。 相対パスで指定されたファイルを検索するときに開始点として現在の場所を使用します。</span><span class="sxs-lookup"><span data-stu-id="167cc-114">Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path.</span></span> <span data-ttu-id="167cc-115">現在のディレクトリを特定するのには、呼び出す<xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="167cc-115">To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="167cc-116">ほとんどのメンバー、`Path`クラスは、ファイル システムに接続しないと、パス文字列に指定されたファイルの存在を確認できません。</span><span class="sxs-lookup"><span data-stu-id="167cc-116">Most members of the `Path` class do not interact with the file system and do not verify the existence of the file specified by a path string.</span></span> <span data-ttu-id="167cc-117">`Path` クラス メンバーのように、パス文字列を変更する<xref:System.IO.Path.ChangeExtension%2A>、ファイル システム内のファイル名に影響を与えるありません。</span><span class="sxs-lookup"><span data-stu-id="167cc-117">`Path` class members that modify a path string, such as <xref:System.IO.Path.ChangeExtension%2A>, have no effect on names of files in the file system.</span></span> <span data-ttu-id="167cc-118">`Path` メンバーは、ただし、指定したパス文字列の内容を検証および throw、<xref:System.ArgumentException>例外文字列から返された文字列で定義されているパス文字列に無効な文字が含まれている場合、<xref:System.IO.Path.GetInvalidPathChars%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-118">`Path` members do, however, validate the contents of a specified path string, and throw an <xref:System.ArgumentException> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <xref:System.IO.Path.GetInvalidPathChars%2A> method.</span></span> <span data-ttu-id="167cc-119">たとえば、Windows ベースのデスクトップ プラットフォームの場合、パスは無効な文字が含まれます引用符 (") より小さい (\<)、大なり (>)、パイプ (&#124;)、バック スペース (\b)、null (\0)、および Unicode 文字 16 18 と 20 ~ 25 です。</span><span class="sxs-lookup"><span data-stu-id="167cc-119">For example, on Windows-based desktop platforms, invalid path characters might include quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0), and Unicode characters 16 through 18 and 20 through 25.</span></span>  
  
 <span data-ttu-id="167cc-120">メンバー、`Path`クラスを使用すると、迅速かつ簡単には、ファイル名拡張子が、パスの一部であるかどうかを確認して、1 つのパス名に 2 つの文字列を組み合わせることなどの一般的な操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="167cc-120">The members of the `Path` class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name.</span></span>  
  
 <span data-ttu-id="167cc-121">すべてのメンバー、`Path`クラスは静的と、そのため、パスのインスタンスがなくても呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="167cc-121">All members of the `Path` class are static and can therefore be called without having an instance of a path.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="167cc-122">入力文字列とパスをそのまま使用するメンバー、そのパスは、整形式である必要がありますか、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="167cc-122">In members that accept a path as an input string, that path must be well-formed or an exception is raised.</span></span> <span data-ttu-id="167cc-123">たとえば、パスは完全修飾では、スペースで始まり場合、パスは、クラスのメソッドで切り捨てられません。</span><span class="sxs-lookup"><span data-stu-id="167cc-123">For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class.</span></span> <span data-ttu-id="167cc-124">そのため、パスが正しくないと、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="167cc-124">Therefore, the path is malformed and an exception is raised.</span></span> <span data-ttu-id="167cc-125">同様に、パスまたはパスの組み合わせ完全修飾できない 2 回クリックします。</span><span class="sxs-lookup"><span data-stu-id="167cc-125">Similarly, a path or a combination of paths cannot be fully qualified twice.</span></span> <span data-ttu-id="167cc-126">たとえば、"c:\temp c:\windows"では、ほとんどの場合、例外も発生します。</span><span class="sxs-lookup"><span data-stu-id="167cc-126">For example, "c:\temp c:\windows" also raises an exception in most cases.</span></span> <span data-ttu-id="167cc-127">パス文字列を受け取るメソッドを使用する場合、パスが整形式であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="167cc-127">Ensure that your paths are well-formed when using methods that accept a path string.</span></span>  
  
 <span data-ttu-id="167cc-128">パスを受け入れるメンバー ボックスで、パスは、ファイルまたはディレクトリを参照できます。</span><span class="sxs-lookup"><span data-stu-id="167cc-128">In members that accept a path, the path can refer to a file or just a directory.</span></span> <span data-ttu-id="167cc-129">指定されたパスは相対パスまたは汎用名前付け規則 (UNC) パスのサーバーと共有名にも参照できます。</span><span class="sxs-lookup"><span data-stu-id="167cc-129">The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name.</span></span> <span data-ttu-id="167cc-130">たとえば、次のすべては、有効なパスは。</span><span class="sxs-lookup"><span data-stu-id="167cc-130">For example, all the following are acceptable paths:</span></span>  
  
-   <span data-ttu-id="167cc-131">"c:\\\MyDir\\\MyFile.txt"C# の場合、または Visual Basic では、"c:\MyDir\MyFile.txt"です。</span><span class="sxs-lookup"><span data-stu-id="167cc-131">"c:\\\MyDir\\\MyFile.txt" in C#, or "c:\MyDir\MyFile.txt" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="167cc-132">"c:\\\MyDir"C# の場合、または Visual Basic では、"c:\MyDir"です。</span><span class="sxs-lookup"><span data-stu-id="167cc-132">"c:\\\MyDir" in C#, or "c:\MyDir" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="167cc-133">"MyDir\\\MySubdir"C# の場合、または Visual Basic では、"MyDir\MySubDir"です。</span><span class="sxs-lookup"><span data-stu-id="167cc-133">"MyDir\\\MySubdir" in C#, or "MyDir\MySubDir" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="167cc-134">"\\\\\\\MyServer\\\MyShare"C# の場合、または"\\\MyServer\MyShare"Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="167cc-134">"\\\\\\\MyServer\\\MyShare" in C#, or "\\\MyServer\MyShare" in Visual Basic.</span></span>  
  
 <span data-ttu-id="167cc-135">これらすべての操作が実行されるため、文字列の結果がすべてのシナリオでは有効であることを確認することはできません。</span><span class="sxs-lookup"><span data-stu-id="167cc-135">Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios.</span></span> <span data-ttu-id="167cc-136">たとえば、<xref:System.IO.Path.GetExtension%2A>メソッドに渡された文字列を解析し、その文字列から拡張子を返します。</span><span class="sxs-lookup"><span data-stu-id="167cc-136">For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string.</span></span> <span data-ttu-id="167cc-137">ただし、その拡張子のファイルがディスクに存在するというこれはありません。</span><span class="sxs-lookup"><span data-stu-id="167cc-137">However, this does not mean that a file with that extension exists on the disk.</span></span>  
  
 <span data-ttu-id="167cc-138">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-138">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-139">次のコード例では、メインのメンバーの一部を示しています、`Path`クラスです。</span><span class="sxs-lookup"><span data-stu-id="167cc-139">The following code example demonstrates some of the main members of the `Path` class.</span></span>  
  
 [!code-cpp[path class#1](~/samples/snippets/cpp/VS_Snippets_CLR/Path Class/CPP/path class.cpp#1)]
 [!code-csharp[path class#1](~/samples/snippets/csharp/VS_Snippets_CLR/Path Class/CS/path class.cs#1)]
 [!code-vb[path class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Path Class/VB/path class.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AltDirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char AltDirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char AltDirectorySeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.AltDirectorySeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AltDirectorySeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char AltDirectorySeparatorChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167cc-140">階層ファイル システム編成を反映するパス文字列の、ディレクトリ レベルを区切るために使用する、プラットフォーム固有の代替文字を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-140">Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-141">このフィールドに格納されている文字にすることはできません<xref:System.IO.Path.InvalidPathChars>です。</span><span class="sxs-lookup"><span data-stu-id="167cc-141">The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>.</span></span> <span data-ttu-id="167cc-142">このフィールドと同じ値に設定することができます<xref:System.IO.Path.DirectorySeparatorChar>です。</span><span class="sxs-lookup"><span data-stu-id="167cc-142">This field can be set to the same value as <xref:System.IO.Path.DirectorySeparatorChar>.</span></span> <span data-ttu-id="167cc-143">`AltDirectorySeparatorChar` および<xref:System.IO.Path.DirectorySeparatorChar>が両方ともパス文字列のディレクトリ レベルを区切るため無効です。</span><span class="sxs-lookup"><span data-stu-id="167cc-143">`AltDirectorySeparatorChar` and <xref:System.IO.Path.DirectorySeparatorChar> are both valid for separating directory levels in a path string.</span></span>  
  
 <span data-ttu-id="167cc-144">このフィールドの値は、Windows、UNIX または Macintosh オペレーティング システムでスラッシュ ('/') です。</span><span class="sxs-lookup"><span data-stu-id="167cc-144">The value of this field is a slash ('/') on Windows, UNIX and Macintosh operating systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-145">次のコード例に示しますを使用して、`AltDirectorySeparatorChar`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-145">The following code example demonstrates a use of the `AltDirectorySeparatorChar` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeExtension">
      <MemberSignature Language="C#" Value="public static string ChangeExtension (string path, string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ChangeExtension(string path, string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.ChangeExtension(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeExtension (path As String, extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ChangeExtension(System::String ^ path, System::String ^ extension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="167cc-146">変更するパス情報。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-146">The path information to modify.</span>
          </span>
          <span data-ttu-id="167cc-147">パスに、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義された文字を含めることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-147">The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </param>
        <param name="extension">
          <span data-ttu-id="167cc-148">新しい拡張子 (先行ピリオド付き、またはなし)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-148">The new extension (with or without a leading period).</span>
          </span>
          <span data-ttu-id="167cc-149">
            <see langword="null" /> を指定して、<c>path</c> から既存の拡張子を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-149">Specify <see langword="null" /> to remove an existing extension from <c>path</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-150">パス文字列の拡張子を変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-150">Changes the extension of a path string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-151">変更されたパス情報。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-151">The modified path information.</span>
          </span>
          <span data-ttu-id="167cc-152">Windows ベースのデスクトップ プラットフォームでは、<paramref name="path" /> が <see langword="null" /> または空の文字列 ("") の場合、パス情報は変更されずに返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-152">On Windows-based desktop platforms, if <paramref name="path" /> is <see langword="null" /> or an empty string (""), the path information is returned unmodified.</span>
          </span>
          <span data-ttu-id="167cc-153">
            <paramref name="extension" /> が <see langword="null" /> の場合は、返される文字列に、削除した拡張子が付いた指定したパスが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-153">If <paramref name="extension" /> is <see langword="null" />, the returned string contains the specified path with its extension removed.</span>
          </span>
          <span data-ttu-id="167cc-154">
            <paramref name="path" /> に拡張子がなく、<paramref name="extension" /> が <see langword="null" /> でない場合は、返されるパス文字列に <paramref name="path" /> の末尾に追加される <paramref name="extension" /> が含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-154">If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not <see langword="null" />, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-155">どちらの場合`path`も`extension`ピリオド (.) を含む`ChangeExtension`期間を追加します。</span><span class="sxs-lookup"><span data-stu-id="167cc-155">If neither `path` nor `extension` contains a period (.), `ChangeExtension` adds the period.</span></span>  
  
 <span data-ttu-id="167cc-156">`extension`パラメーターが複数のピリオドと任意の有効なパス文字を含めることができ、任意の長さを指定できます。</span><span class="sxs-lookup"><span data-stu-id="167cc-156">The `extension` parameter can contain multiple periods and any valid path characters, and can be any length.</span></span> <span data-ttu-id="167cc-157">場合`extension`は`null`、返される文字列には内容が含まれています`path`最後にピリオドとそれに続くすべての文字が削除されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-157">If `extension` is `null`, the returned string contains the contents of `path` with the last period and all characters following it removed.</span></span>  
  
 <span data-ttu-id="167cc-158">場合`extension`、空の文字列は、返されるパス文字列の内容を格納する`path`前回の期間を次の文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="167cc-158">If `extension` is an empty string, the returned path string contains the contents of `path` with any characters following the last period removed.</span></span>  
  
 <span data-ttu-id="167cc-159">場合`path`、拡張子が付いていないと`extension`は`null`、返される文字列が含まれています`path`続く`extension`です。</span><span class="sxs-lookup"><span data-stu-id="167cc-159">If `path` does not have an extension and `extension` is not `null`, the returned string contains `path` followed by `extension`.</span></span>  
  
 <span data-ttu-id="167cc-160">場合`extension`は`null`、先頭にピリオドが含まれていないと、期間が追加されました。</span><span class="sxs-lookup"><span data-stu-id="167cc-160">If `extension` is not `null` and does not contain a leading period, the period is added.</span></span>  
  
 <span data-ttu-id="167cc-161">場合`path`複数のピリオドで区切られた複数の拡張が含まれて返される文字列の内容を含む`path`、最後にピリオドとそれに続くすべての文字に置き換え`extension`です。</span><span class="sxs-lookup"><span data-stu-id="167cc-161">If `path` contains a multiple extension separated by multiple periods, the returned string contains the contents of `path` with the last period and all characters following it replaced by `extension`.</span></span> <span data-ttu-id="167cc-162">たとえば場合、 `path` "\Dir1\examples\pathtests.csx.txt"と`extension`"cs"は、変更されたパスは"\Dir1\examples\pathtests.csx.cs"です。</span><span class="sxs-lookup"><span data-stu-id="167cc-162">For example, if `path` is "\Dir1\examples\pathtests.csx.txt" and `extension` is "cs", the modified path is "\Dir1\examples\pathtests.csx.cs".</span></span>  
  
 <span data-ttu-id="167cc-163">返される結果がすべてのシナリオで有効であることを確認することはできません。</span><span class="sxs-lookup"><span data-stu-id="167cc-163">It is not possible to verify that the returned results are valid in all scenarios.</span></span> <span data-ttu-id="167cc-164">たとえば場合、`path`が空、`extension`が追加されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-164">For example, if `path` is empty, `extension` is appended.</span></span>  
  
 <span data-ttu-id="167cc-165">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-165">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-166">次のコード例に示しますを使用して、`ChangeExtension`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-166">The following code example demonstrates a use of the `ChangeExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#1)]
 [!code-csharp[System.IO.Path Members#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#1)]
 [!code-vb[System.IO.Path Members#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-167">
            <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-167">
              <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="167cc-168">複数の文字列を 1 つのパスに結合します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-168">Combines strings into a path.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (params string[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string[] paths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray paths As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(... cli::array &lt;System::String ^&gt; ^ paths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paths">
          <span data-ttu-id="167cc-169">パスの構成要素の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-169">An array of parts of the path.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-170">文字列の配列を 1 つのパスに結合します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-170">Combines an array of strings into a path.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-171">結合されたパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-171">The combined paths.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-172">`paths` 結合するパスの部分の配列でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="167cc-172">`paths` should be an array of the parts of the path to combine.</span></span> <span data-ttu-id="167cc-173">後続のパスのいずれかが絶対パスの場合は、し、結合操作をリセット前のすべての結合されたパスを破棄すること、その絶対パスを開始します。</span><span class="sxs-lookup"><span data-stu-id="167cc-173">If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.</span></span>  
  
 <span data-ttu-id="167cc-174">長さ 0 の文字列は、結合されたパスから除外されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-174">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="167cc-175">空白文字がある場合は、パラメーターは解析されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-175">The parameters are not parsed if they have white space.</span></span>  
  
 <span data-ttu-id="167cc-176">ディレクトリとファイル名のすべての無効な文字はで許容できないように解釈されます、`Combine`メソッド、検索のワイルドカード文字をこれらの文字を使用できるためです。</span><span class="sxs-lookup"><span data-stu-id="167cc-176">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="167cc-177">中でも、`Path.Combine("c:\\", "*.txt")`有効でない可能性がありますからファイルを作成する場合は、検索文字列として有効ではします。</span><span class="sxs-lookup"><span data-stu-id="167cc-177">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="167cc-178">によって正常に解釈されますので、`Combine`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-178">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-179">次の例では、文字列の配列をパスに結合します。</span><span class="sxs-lookup"><span data-stu-id="167cc-179">The following example combines an array of strings into a path.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#3)]
 [!code-vb[System.IO.Path.Combine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-180">配列内の文字列の 1 つが、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義された無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-180">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167cc-181">配列内の文字列の 1 つが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-181">One of the strings in the array is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" />
        <Parameter Name="path2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path1">
          <span data-ttu-id="167cc-182">結合する 1 番目のパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-182">The first path to combine.</span>
          </span>
        </param>
        <param name="path2">
          <span data-ttu-id="167cc-183">結合する 2 番目のパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-183">The second path to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-184">2 つの文字列を 1 つのパスに結合します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-184">Combines two strings into a path.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-185">結合されたパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-185">The combined paths.</span>
          </span>
          <span data-ttu-id="167cc-186">指定したパスの 1 つが長さ 0 の文字列の場合、このメソッドは別のパスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-186">If one of the specified paths is a zero-length string, this method returns the other path.</span>
          </span>
          <span data-ttu-id="167cc-187">
            <paramref name="path2" /> に絶対パスが含まれる場合、このメソッドは <paramref name="path2" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-187">If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-188">場合`path1`ドライブの参照 (つまり、「c:」または「d:」) ではないで終わらない有効な区切り記号で定義されている<xref:System.IO.Path.DirectorySeparatorChar>、 <xref:System.IO.Path.AltDirectorySeparatorChar>、または<xref:System.IO.Path.VolumeSeparatorChar>、<xref:System.IO.Path.DirectorySeparatorChar>に付加されます`path1`連結する前にします。</span><span class="sxs-lookup"><span data-stu-id="167cc-188">If `path1` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.</span></span>  
  
 <span data-ttu-id="167cc-189">場合`path2`ルートは含まれません (たとえば場合、`path2`区切り文字またはドライブの仕様で始まっていない)、間の区切り記号で、2 つのパスの連結になります。</span><span class="sxs-lookup"><span data-stu-id="167cc-189">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="167cc-190">場合`path2`、ルートが含まれています`path2`が返されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-190">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="167cc-191">空白文字がある場合は、パラメーターは解析されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-191">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="167cc-192">したがって場合、`path2`が空白文字 (たとえば、"\file.txt")、含まれています、<xref:System.IO.Path.Combine%2A>メソッドは、追加`path2`に`path1`のみを返す代わりに`path2`です。</span><span class="sxs-lookup"><span data-stu-id="167cc-192">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1` instead of returning only `path2`.</span></span>  
  
 <span data-ttu-id="167cc-193">ディレクトリとファイル名のすべての無効な文字はで許容できないように解釈されます、`Combine`メソッド、検索のワイルドカード文字をこれらの文字を使用できるためです。</span><span class="sxs-lookup"><span data-stu-id="167cc-193">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="167cc-194">中でも、`Path.Combine("c:\\", "*.txt")`有効でない可能性がありますからファイルを作成する場合は、検索文字列として有効ではします。</span><span class="sxs-lookup"><span data-stu-id="167cc-194">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="167cc-195">によって正常に解釈されますので、`Combine`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-195">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
 <span data-ttu-id="167cc-196">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-196">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-197">次のコード例では、使用方法を示します、 `Combine` Windows ベースのデスクトップ プラットフォームでのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-197">The following code example demonstrates using the `Combine` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[pathcombine#1](~/samples/snippets/cpp/VS_Snippets_CLR/pathcombine/CPP/pathcombine.cpp#1)]
 [!code-csharp[pathcombine#1](~/samples/snippets/csharp/VS_Snippets_CLR/pathcombine/CS/pathcombine.cs#1)]
 [!code-vb[pathcombine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/pathcombine/VB/pathcombine.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-198">
            <paramref name="path1" /> または <paramref name="path2" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-198">
              <paramref name="path1" /> or <paramref name="path2" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167cc-199">
            <paramref name="path1" /> または <paramref name="path2" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-199">
              <paramref name="path1" /> or <paramref name="path2" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String, path3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2, System::String ^ path3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" />
        <Parameter Name="path2" Type="System.String" />
        <Parameter Name="path3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path1">
          <span data-ttu-id="167cc-200">結合する 1 番目のパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-200">The first path to combine.</span>
          </span>
        </param>
        <param name="path2">
          <span data-ttu-id="167cc-201">結合する 2 番目のパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-201">The second path to combine.</span>
          </span>
        </param>
        <param name="path3">
          <span data-ttu-id="167cc-202">結合する 3 番目のパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-202">The third path to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-203">3 つの文字列を 1 つのパスに結合します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-203">Combines three strings into a path.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-204">結合されたパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-204">The combined paths.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-205">`path1` 絶対パスである必要があります (たとえば、"d:\archives"または"\\\archives\public") です。</span><span class="sxs-lookup"><span data-stu-id="167cc-205">`path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").</span></span> <span data-ttu-id="167cc-206">場合`path2`または`path3`は、結合操作の破棄を組み合わせて使用したすべてのパスと絶対パスにリセットの絶対パスでもします。</span><span class="sxs-lookup"><span data-stu-id="167cc-206">If `path2` or `path3` is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.</span></span>  
  
 <span data-ttu-id="167cc-207">長さ 0 の文字列は、結合されたパスから除外されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-207">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="167cc-208">場合`path1`ドライブの参照 (つまり、「c:」または「d:」) ではないで終わらない有効な区切り記号で定義されている<xref:System.IO.Path.DirectorySeparatorChar>、 <xref:System.IO.Path.AltDirectorySeparatorChar>、または<xref:System.IO.Path.VolumeSeparatorChar>、<xref:System.IO.Path.DirectorySeparatorChar>に付加されます`path1`連結する前にします。</span><span class="sxs-lookup"><span data-stu-id="167cc-208">If `path1` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.</span></span>  
  
 <span data-ttu-id="167cc-209">場合`path2`ルートは含まれません (たとえば場合、`path2`区切り文字またはドライブの仕様で始まっていない)、間の区切り記号で、2 つのパスの連結になります。</span><span class="sxs-lookup"><span data-stu-id="167cc-209">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="167cc-210">場合`path2`、ルートが含まれています`path2`が返されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-210">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="167cc-211">空白文字がある場合は、パラメーターは解析されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-211">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="167cc-212">したがって場合、`path2`が空白文字 (たとえば、"\file.txt")、含まれています、<xref:System.IO.Path.Combine%2A>メソッドは、追加`path2`に`path1`です。</span><span class="sxs-lookup"><span data-stu-id="167cc-212">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.</span></span>  
  
 <span data-ttu-id="167cc-213">ディレクトリとファイル名のすべての無効な文字はで許容できないように解釈されます、`Combine`メソッド、検索のワイルドカード文字をこれらの文字を使用できるためです。</span><span class="sxs-lookup"><span data-stu-id="167cc-213">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="167cc-214">中でも、`Path.Combine("c:\\", "*.txt")`有効でない可能性がありますからファイルを作成する場合は、検索文字列として有効ではします。</span><span class="sxs-lookup"><span data-stu-id="167cc-214">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="167cc-215">によって正常に解釈されますので、`Combine`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-215">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-216">次の例では、次の 3 つのパスを結合します。</span><span class="sxs-lookup"><span data-stu-id="167cc-216">The following example combines three paths.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#1)]
 [!code-vb[System.IO.Path.Combine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-217">
            <paramref name="path1" />、<paramref name="path2" />、または <paramref name="path3" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-217">
              <paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167cc-218">
            <paramref name="path1" />、<paramref name="path2" />、または <paramref name="path3" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-218">
              <paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3, string path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3, string path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String, path3 As String, path4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2, System::String ^ path3, System::String ^ path4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" />
        <Parameter Name="path2" Type="System.String" />
        <Parameter Name="path3" Type="System.String" />
        <Parameter Name="path4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path1">
          <span data-ttu-id="167cc-219">結合する 1 番目のパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-219">The first path to combine.</span>
          </span>
        </param>
        <param name="path2">
          <span data-ttu-id="167cc-220">結合する 2 番目のパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-220">The second path to combine.</span>
          </span>
        </param>
        <param name="path3">
          <span data-ttu-id="167cc-221">結合する 3 番目のパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-221">The third path to combine.</span>
          </span>
        </param>
        <param name="path4">
          <span data-ttu-id="167cc-222">結合する 4 番目のパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-222">The fourth path to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-223">4 つの文字列を 1 つのパスに結合します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-223">Combines four strings into a path.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-224">結合されたパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-224">The combined paths.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-225">`path1` 絶対パスである必要があります (たとえば、"d:\archives"または"\\\archives\public") です。後続のパスの 1 つも絶対パスである場合、結合操作はすべて以前に結合されたパスを破棄し、その絶対パスにリセットします。</span><span class="sxs-lookup"><span data-stu-id="167cc-225">`path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.</span></span>  
  
 <span data-ttu-id="167cc-226">長さ 0 の文字列は、結合されたパスから除外されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-226">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="167cc-227">場合`path1`ドライブの参照 (つまり、「c:」または「d:」) ではないで終わらない有効な区切り記号で定義されている<xref:System.IO.Path.DirectorySeparatorChar>、 <xref:System.IO.Path.AltDirectorySeparatorChar>、または<xref:System.IO.Path.VolumeSeparatorChar>、<xref:System.IO.Path.DirectorySeparatorChar>に付加されます`path1`連結する前にします。</span><span class="sxs-lookup"><span data-stu-id="167cc-227">If `path1` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.</span></span>  
  
 <span data-ttu-id="167cc-228">場合`path2`ルートは含まれません (たとえば場合、`path2`区切り文字またはドライブの仕様で始まっていない)、間の区切り記号で、2 つのパスの連結になります。</span><span class="sxs-lookup"><span data-stu-id="167cc-228">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="167cc-229">場合`path2`、ルートが含まれています`path2`が返されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-229">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="167cc-230">空白文字がある場合は、パラメーターは解析されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-230">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="167cc-231">したがって場合、`path2`が空白文字 (たとえば、"\file.txt")、含まれています、<xref:System.IO.Path.Combine%2A>メソッドは、追加`path2`に`path1`です。</span><span class="sxs-lookup"><span data-stu-id="167cc-231">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.</span></span>  
  
 <span data-ttu-id="167cc-232">ディレクトリとファイル名のすべての無効な文字はで許容できないように解釈されます、`Combine`メソッド、検索のワイルドカード文字をこれらの文字を使用できるためです。</span><span class="sxs-lookup"><span data-stu-id="167cc-232">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="167cc-233">中でも、`Path.Combine("c:\\", "*.txt")`有効でない可能性がありますからファイルを作成する場合は、検索文字列として有効ではします。</span><span class="sxs-lookup"><span data-stu-id="167cc-233">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="167cc-234">によって正常に解釈されますので、`Combine`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-234">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-235">次の例では、次の 4 つのパスを結合します。</span><span class="sxs-lookup"><span data-stu-id="167cc-235">The following example combines four paths.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#2)]
 [!code-vb[System.IO.Path.Combine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-236">
            <paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" />、または <paramref name="path4" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-236">
              <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167cc-237">
            <paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" />、または <paramref name="path4" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-237">
              <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char DirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char DirectorySeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.DirectorySeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DirectorySeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char DirectorySeparatorChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167cc-238">階層ファイル システム編成を反映するパス文字列の、ディレクトリ レベルを区切るために使用する、プラットフォーム固有の文字を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-238">Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-239">このフィールドに格納されている文字にすることはできません<xref:System.IO.Path.InvalidPathChars>です。</span><span class="sxs-lookup"><span data-stu-id="167cc-239">The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>.</span></span> <span data-ttu-id="167cc-240"><xref:System.IO.Path.AltDirectorySeparatorChar> および`DirectorySeparatorChar`が両方ともパス文字列のディレクトリ レベルを区切るため無効です。</span><span class="sxs-lookup"><span data-stu-id="167cc-240"><xref:System.IO.Path.AltDirectorySeparatorChar> and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-241">使用を次のコード例に示します、`DirectorySeparatorChar`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-241">The following code example demonstrates the use of the `DirectorySeparatorChar` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetDirectoryName (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetDirectoryName(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryName (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetDirectoryName(ReadOnlySpan&lt;char&gt; path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static string GetDirectoryName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectoryName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetDirectoryName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetDirectoryName(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="167cc-242">ファイルまたはディレクトリのパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-242">The path of a file or directory.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-243">指定したパス文字列のディレクトリ情報を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-243">Returns the directory information for the specified path string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-244">
            <paramref name="path" /> のディレクトリ情報。<paramref name="path" /> がルート ディレクトリを示しているか null である場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-244">Directory information for <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> denotes a root directory or is null.</span>
          </span>
          <span data-ttu-id="167cc-245">
            <paramref name="path" /> にディレクトリ情報が含まれていない場合は、<see cref="F:System.String.Empty" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-245">Returns <see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain directory information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-246">すべての文字を含まない、最後のパスのほとんどの場合、このメソッドによって返される文字列がで構成されています。<xref:System.IO.Path.DirectorySeparatorChar>または<xref:System.IO.Path.AltDirectorySeparatorChar>です。</span><span class="sxs-lookup"><span data-stu-id="167cc-246">In most cases, the string returned by this method consists of all characters in the path up to but not including the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>.</span></span> <span data-ttu-id="167cc-247">かどうか、パスはルート ディレクトリなど"c:\\"、null が返されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-247">If the path consists of a root directory, such as "c:\\", null is returned.</span></span> <span data-ttu-id="167cc-248">このメソッドを使用してパスをサポートしていないことに注意してください"ファイル:"です。</span><span class="sxs-lookup"><span data-stu-id="167cc-248">Note that this method does not support paths using "file:".</span></span> <span data-ttu-id="167cc-249">返されるパスが含まれていないため、<xref:System.IO.Path.DirectorySeparatorChar>または<xref:System.IO.Path.AltDirectorySeparatorChar>に返されるパスを渡して、<xref:System.IO.Path.GetDirectoryName%2A>メソッドの結果の文字列での後続の呼び出しごとに 1 つのフォルダー レベルの切り捨てが発生します。</span><span class="sxs-lookup"><span data-stu-id="167cc-249">Because the returned path does not include the <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, passing the returned path back into the <xref:System.IO.Path.GetDirectoryName%2A> method will result in the truncation of one folder level per subsequent call on the result string.</span></span> <span data-ttu-id="167cc-250">たとえば、"C:\Directory\SubDirectory\test.txt"のパスを渡すことに、<xref:System.IO.Path.GetDirectoryName%2A>メソッドは"C:\Directory\SubDirectory"を返します。</span><span class="sxs-lookup"><span data-stu-id="167cc-250">For example, passing the path "C:\Directory\SubDirectory\test.txt" into the <xref:System.IO.Path.GetDirectoryName%2A> method will return "C:\Directory\SubDirectory".</span></span> <span data-ttu-id="167cc-251">"C:\Directory\SubDirectory"は、その文字列を渡して<xref:System.IO.Path.GetDirectoryName%2A>"C:\Directory"になります。</span><span class="sxs-lookup"><span data-stu-id="167cc-251">Passing that string, "C:\Directory\SubDirectory", into <xref:System.IO.Path.GetDirectoryName%2A> will result in "C:\Directory".</span></span>  
  
 <span data-ttu-id="167cc-252">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-252">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-253">次のコード例では、使用方法を示します、 `GetDirectoryName` Windows ベースのデスクトップ プラットフォームでのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-253">The following code example demonstrates using the `GetDirectoryName` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#3)]
 [!code-csharp[System.IO.Path Members#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#3)]
 [!code-vb[System.IO.Path Members#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-254">
            <paramref name="path" /> パラメーターは正しくない文字を含んでおり、空か、空白のみで構成されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-254">The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="167cc-255">[Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または[ポータブル クラス ライブラリ](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)では、基本クラスの例外である <see cref="T:System.IO.IOException" /> を代わりにキャッチします。</span>
              <span class="sxs-lookup">
                <span data-stu-id="167cc-255">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="167cc-256">
            <paramref name="path" /> パラメーターは、システムで定義された最大長を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-256">The <paramref name="path" /> parameter is longer than the system-defined maximum length.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static string GetExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetExtension(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="167cc-257">拡張子の取得元のパス文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-257">The path string from which to get the extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-258">指定したパス文字列の拡張子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-258">Returns the extension of the specified path string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-259">指定したパスの拡張子 (ピリオド "." を含む)、<see langword="null" />、または <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-259">The extension of the specified path (including the period "."), or <see langword="null" />, or <see cref="F:System.String.Empty" />.</span>
          </span>
          <span data-ttu-id="167cc-260">
            <paramref name="path" /> が <see langword="null" /> の場合、<see cref="M:System.IO.Path.GetExtension(System.String)" /> は <see langword="null" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-260">If <paramref name="path" /> is <see langword="null" />, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see langword="null" />.</span>
          </span>
          <span data-ttu-id="167cc-261">
            <paramref name="path" /> が拡張子情報を持たない場合、<see cref="M:System.IO.Path.GetExtension(System.String)" /> は <see cref="F:System.String.Empty" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-261">If <paramref name="path" /> does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-262">拡張機能`path`を検索して取得した`path`のパスとパスの先頭に向かっての最後の文字で始まる、ピリオド (.)、します。</span><span class="sxs-lookup"><span data-stu-id="167cc-262">The extension of `path` is obtained by searching `path` for a period (.), starting with the last character in path and continuing toward the start of path.</span></span> <span data-ttu-id="167cc-263">前にピリオドが見つかった場合、<xref:System.IO.Path.DirectorySeparatorChar>または<xref:System.IO.Path.AltDirectorySeparatorChar>文字、返される文字列が含まれています、期間、および文字以外の後にそれ以外の場合、<xref:System.String.Empty>が返されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-263">If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned string contains the period and the characters after it; otherwise, <xref:System.String.Empty> is returned.</span></span>  
  
 <span data-ttu-id="167cc-264">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-264">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-265">次のコード例では、使用方法を示します、 `GetExtension` Windows ベースのデスクトップ プラットフォームでのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-265">The following code example demonstrates using the `GetExtension` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#4)]
 [!code-csharp[System.IO.Path Members#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#4)]
 [!code-vb[System.IO.Path Members#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-266">
            <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-266">
              <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetFileName (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetFileName(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetFileName(ReadOnlySpan&lt;char&gt; path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static string GetFileName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileName(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="167cc-267">ファイル名と拡張子の取得元のパス文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-267">The path string from which to obtain the file name and extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-268">指定したパス文字列のファイル名と拡張子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-268">Returns the file name and extension of the specified path string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-269">
            <paramref name="path" /> の最後のディレクトリ文字の後ろの文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-269">The characters after the last directory character in <paramref name="path" />.</span>
          </span>
          <span data-ttu-id="167cc-270">
            <paramref name="path" /> の最後の文字がディレクトリ区切り記号またはボリューム区切り記号の場合、このメソッドは <see cref="F:System.String.Empty" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-270">If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty" />.</span>
          </span>
          <span data-ttu-id="167cc-271">
            <paramref name="path" /> が <see langword="null" /> の場合、このメソッドは <see langword="null" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-271">If <paramref name="path" /> is <see langword="null" />, this method returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-272">返される値は`null`ファイル パスが場合`null`です。</span><span class="sxs-lookup"><span data-stu-id="167cc-272">The returned value is `null` if the file path is `null`.</span></span>  
  
 <span data-ttu-id="167cc-273">ファイル名の先頭を決定するための区切り文字が<xref:System.IO.Path.DirectorySeparatorChar>と<xref:System.IO.Path.AltDirectorySeparatorChar>です。</span><span class="sxs-lookup"><span data-stu-id="167cc-273">The separator characters used to determine the start of the file name are <xref:System.IO.Path.DirectorySeparatorChar> and <xref:System.IO.Path.AltDirectorySeparatorChar>.</span></span>  
  
 <span data-ttu-id="167cc-274">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-274">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-275">次のコード例の動作を示します、 `GetFileName` Windows ベースのデスクトップ プラットフォームでのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-275">The following code example demonstrates the behavior of the `GetFileName` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#5)]
 [!code-csharp[System.IO.Path Members#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#5)]
 [!code-vb[System.IO.Path Members#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-276">
            <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-276">
              <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetFileNameWithoutExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetFileNameWithoutExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileNameWithoutExtension (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetFileNameWithoutExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static string GetFileNameWithoutExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileNameWithoutExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileNameWithoutExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileNameWithoutExtension (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileNameWithoutExtension(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="167cc-277">ファイルのパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-277">The path of the file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-278">指定したパス文字列のファイル名を拡張子を付けずに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-278">Returns the file name of the specified path string without the extension.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-279">
            <see cref="M:System.IO.Path.GetFileName(System.String)" /> によって返された文字列 (最後のピリオド (.) と、その後ろのすべての文字を除く)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-279">The string returned by <see cref="M:System.IO.Path.GetFileName(System.String)" />, minus the last period (.) and all characters following it.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-280">このメソッドでは、パスまたはファイル名が存在することは確認されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-280">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="167cc-281">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-281">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-282">次のコード例に示しますを使用して、`GetFileNameWithoutExtension`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-282">The following code example demonstrates a use of the `GetFileNameWithoutExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#6)]
 [!code-csharp[System.IO.Path Members#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#6)]
 [!code-vb[System.IO.Path Members#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-283">
            <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-283">
              <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFullPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFullPath(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="167cc-284">絶対パス情報を取得する対象のファイルまたはディレクトリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-284">The file or directory for which to obtain absolute path information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-285">指定したパス文字列の絶対パスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-285">Returns the absolute path for the specified path string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-286">"C:\MyFile.txt" など、<paramref name="path" /> の完全修飾位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-286">The fully qualified location of <paramref name="path" />, such as "C:\MyFile.txt".</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-287">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"\\\\。 \PHYSICALDRIVE0"です。</span><span class="sxs-lookup"><span data-stu-id="167cc-287">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="167cc-288">絶対パスには、システム上のファイルまたはディレクトリを検索するために必要なすべての情報が含まれます。</span><span class="sxs-lookup"><span data-stu-id="167cc-288">The absolute path includes all information required to locate a file or directory on a system.</span></span>  
  
 <span data-ttu-id="167cc-289">ファイルまたはディレクトリで指定された`path`が存在する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="167cc-289">The file or directory specified by `path` is not required to exist.</span></span> <span data-ttu-id="167cc-290">たとえば、c:\temp\newdir が現在のディレクトリの場合は、呼び出し`GetFullPath`ファイル test.txt などの名前を返します c:\temp\newdir\test.txt です。</span><span class="sxs-lookup"><span data-stu-id="167cc-290">For example, if c:\temp\newdir is the current directory, calling `GetFullPath` on a file name such as test.txt returns c:\temp\newdir\test.txt.</span></span> <span data-ttu-id="167cc-291">ファイルが存在しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="167cc-291">The file need not exist.</span></span>  
  
 <span data-ttu-id="167cc-292">ただし場合、`path`が存在し、呼び出し元はパス情報を取得する権限が必要`path`です。</span><span class="sxs-lookup"><span data-stu-id="167cc-292">However, if `path` does exist, the caller must have permission to obtain path information for `path`.</span></span> <span data-ttu-id="167cc-293">ほとんどのメンバーとは異なりなお、<xref:System.IO.Path>クラス、このメソッドは、ファイル システムにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="167cc-293">Note that unlike most members of the <xref:System.IO.Path> class, this method accesses the file system.</span></span>  
  
 <span data-ttu-id="167cc-294">このメソッドは現在のディレクトリと現在のボリューム情報を使用して、完全に修飾を`path`です。</span><span class="sxs-lookup"><span data-stu-id="167cc-294">This method uses current directory and current volume information to fully qualify `path`.</span></span> <span data-ttu-id="167cc-295">ファイルを指定する場合のみに名前を付けます`path`、`GetFullPath`現在のディレクトリの完全修飾パスを返します。</span><span class="sxs-lookup"><span data-stu-id="167cc-295">If you specify a file name only in `path`, `GetFullPath` returns the fully qualified path of the current directory.</span></span>  
  
 <span data-ttu-id="167cc-296">短いファイル名を渡す場合は、長いファイル名に拡張されます。</span><span class="sxs-lookup"><span data-stu-id="167cc-296">If you pass in a short file name, it is expanded to a long file name.</span></span>  
  
 <span data-ttu-id="167cc-297">パスに重要な文字が含まれていない場合は有効な 1 つまたは複数が含まれている場合を除き、"です。"任意の数のスペース文字の後に、いずれかとして解析されます。"です。"または".."です。</span><span class="sxs-lookup"><span data-stu-id="167cc-297">If a path contains no significant characters it is invalid unless it contains one or more "." characters followed by any number of spaces, then it will be parsed as either "." or "..".</span></span>  
  
 <span data-ttu-id="167cc-298">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-298">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-299">次のコード例を示しています、 `GetFullPath` Windows ベースのデスクトップ プラットフォームでのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-299">The following code example demonstrates the `GetFullPath` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#7)]
 [!code-csharp[System.IO.Path Members#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#7)]
 [!code-vb[System.IO.Path Members#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-300">
            <paramref name="path" /> が、長さが 0 の文字列であるか、空白しか含んでいないか、または <see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-300">
              <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
          <span data-ttu-id="167cc-301">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-301">-or-</span>
          </span>
          <span data-ttu-id="167cc-302">システムが絶対パスを取得できませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-302">The system could not retrieve the absolute path.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="167cc-303">呼び出し元に、必要なアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-303">The caller does not have the required permissions.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167cc-304">
            <paramref name="path" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-304">
              <paramref name="path" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="167cc-305">
            <paramref name="path" /> に、ボリュームの識別子 ("C:\\") の一部ではないコロン (:) が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-305">
              <paramref name="path" /> contains a colon (":") that is not part of a volume identifier (for example, "c:\\").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="167cc-306">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-306">The specified path, file name, or both exceed the system-defined maximum length.</span>
          </span>
          <span data-ttu-id="167cc-307">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-307">For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="167cc-308">パスにアクセスします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-308">for access to the path.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path, string basePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path, string basePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFullPath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullPath (path As String, basePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFullPath(System::String ^ path, System::String ^ basePath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="basePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="basePath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidFileNameChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidFileNameChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidFileNameChars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetInvalidFileNameChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInvalidFileNameChars () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ GetInvalidFileNameChars();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167cc-309">ファイル名に使用できない文字を含む配列を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-309">Gets an array containing the characters that are not allowed in file names.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-310">ファイル名に使用できない文字を含む配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-310">An array containing the characters that are not allowed in file names.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-311">このメソッドから返される配列は、ファイルおよびディレクトリ名に無効な文字の完全なセットを含むは保証されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-311">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="167cc-312">無効な文字の完全なセットは、ファイル システムによって異なります。</span><span class="sxs-lookup"><span data-stu-id="167cc-312">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="167cc-313">たとえば、Windows ベースのデスクトップ プラットフォーム パスは無効な文字可能性があります、Ascii/unicode 文字 1 ~ 31、だけでなく (")、引用符で囲むより小さい (\<)、大なり (>)、パイプ (&#124;)、バック スペース (\b)、null (\0) およびタブ (\t) です。</span><span class="sxs-lookup"><span data-stu-id="167cc-313">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-314">次のコード例を示しています、<xref:System.IO.Path.GetInvalidFileNameChars%2A>メソッドおよび<xref:System.IO.Path.GetInvalidPathChars%2A>無効な文字を取得します。</span><span class="sxs-lookup"><span data-stu-id="167cc-314">The following code example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.</span></span>  
  
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]
 [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidPathChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidPathChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidPathChars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetInvalidPathChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInvalidPathChars () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ GetInvalidPathChars();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167cc-315">パス名に使用できない文字を含む配列を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-315">Gets an array containing the characters that are not allowed in path names.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-316">パス名に使用できない文字を含む配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-316">An array containing the characters that are not allowed in path names.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-317">このメソッドから返される配列は、ファイルおよびディレクトリ名に無効な文字の完全なセットを含むは保証されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-317">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="167cc-318">無効な文字の完全なセットは、ファイル システムによって異なります。</span><span class="sxs-lookup"><span data-stu-id="167cc-318">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="167cc-319">たとえば、Windows ベースのデスクトップ プラットフォーム パスは無効な文字可能性があります、Ascii/unicode 文字 1 ~ 31、だけでなく (")、引用符で囲むより小さい (\<)、大なり (>)、パイプ (&#124;)、バック スペース (\b)、null (\0) およびタブ (\t) です。</span><span class="sxs-lookup"><span data-stu-id="167cc-319">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-320">次のコード例を示しています、<xref:System.IO.Path.GetInvalidFileNameChars%2A>メソッドおよび<xref:System.IO.Path.GetInvalidPathChars%2A>無効な文字を取得します。</span><span class="sxs-lookup"><span data-stu-id="167cc-320">The following code example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.</span></span>  
  
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]
 [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetPathRoot (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetPathRoot(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPathRoot (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetPathRoot(ReadOnlySpan&lt;char&gt; path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static string GetPathRoot (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPathRoot(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetPathRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPathRoot (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetPathRoot(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="167cc-321">ルート ディレクトリ情報を取得する対象のパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-321">The path from which to obtain root directory information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-322">指定したパスのルート ディレクトリ情報を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-322">Gets the root directory information of the specified path.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-323">
            <paramref name="path" /> のルート ディレクトリ ("C:\\" など)。<paramref name="path" /> が <see langword="null" /> の場合は <see langword="null" />。<paramref name="path" /> にルート ディレクトリ情報が含まれていない場合は空の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-323">The root directory of <paramref name="path" />, such as "C:\\", or <see langword="null" /> if <paramref name="path" /> is <see langword="null" />, or an empty string if <paramref name="path" /> does not contain root directory information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-324">このメソッドでは、パスまたはファイル名が存在することは確認されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-324">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="167cc-325">このメソッドによって返される文字列のパターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="167cc-325">Possible patterns for the string returned by this method are as follows:</span></span>  
  
-   <span data-ttu-id="167cc-326">空の文字列 (`path`現在ドライブまたはボリュームに対する相対パスを指定)。</span><span class="sxs-lookup"><span data-stu-id="167cc-326">An empty string (`path` specified a relative path on the current drive or volume).</span></span>  
  
-   <span data-ttu-id="167cc-327">「/」(`path`現在のドライブ上の絶対パスを指定)。</span><span class="sxs-lookup"><span data-stu-id="167cc-327">"/" (`path` specified an absolute path on the current drive).</span></span>  
  
-   <span data-ttu-id="167cc-328">"X": (`path` X がドライブまたはボリューム文字を表す、ドライブ上の相対パスを指定)。</span><span class="sxs-lookup"><span data-stu-id="167cc-328">"X:" (`path` specified a relative path on a drive, where X represents a drive or volume letter).</span></span>  
  
-   <span data-ttu-id="167cc-329">"X:/"(`path`特定のドライブ上の絶対パスを指定)。</span><span class="sxs-lookup"><span data-stu-id="167cc-329">"X:/" (`path` specified an absolute path on a given drive).</span></span>  
  
-   <span data-ttu-id="167cc-330">"\\\ComputerName\SharedFolder"(UNC パス)。</span><span class="sxs-lookup"><span data-stu-id="167cc-330">"\\\ComputerName\SharedFolder" (a UNC path).</span></span>  
  
 <span data-ttu-id="167cc-331">.NET Framework は、デバイス名をようなパスを使用して物理ディスクに直接アクセスをサポートしていません"\\\\。 \PHYSICALDRIVE0"です。</span><span class="sxs-lookup"><span data-stu-id="167cc-331">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="167cc-332">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-332">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-333">次のコード例に示しますを使用して、`GetPathRoot`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-333">The following code example demonstrates a use of the `GetPathRoot` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#8)]
 [!code-csharp[System.IO.Path Members#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#8)]
 [!code-vb[System.IO.Path Members#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-334">
            <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-334">
              <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
          <span data-ttu-id="167cc-335">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-335">-or-</span>
          </span>
          <span data-ttu-id="167cc-336">
            <see cref="F:System.String.Empty" /> が <paramref name="path" /> に渡されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-336">
              <see cref="F:System.String.Empty" /> was passed to <paramref name="path" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRandomFileName">
      <MemberSignature Language="C#" Value="public static string GetRandomFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRandomFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetRandomFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRandomFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRandomFileName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167cc-337">ランダムなフォルダー名またはファイル名を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-337">Returns a random folder name or file name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-338">ランダムなフォルダー名またはファイル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-338">A random folder name or file name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-339"><xref:System.IO.Path.GetRandomFileName%2A>メソッド フォルダー名またはファイル名として使用できる暗号強度が高い、ランダムな文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="167cc-339">The <xref:System.IO.Path.GetRandomFileName%2A> method returns a cryptographically strong, random string that can be used as either a folder name or a file name.</span></span> <span data-ttu-id="167cc-340">異なり<xref:System.IO.Path.GetTempFileName%2A>、<xref:System.IO.Path.GetRandomFileName%2A>ファイルは作成されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-340">Unlike <xref:System.IO.Path.GetTempFileName%2A>, <xref:System.IO.Path.GetRandomFileName%2A> does not create a file.</span></span> <span data-ttu-id="167cc-341">代わりにこのメソッドを使用する必要があります、ファイル システムのセキュリティが非常に重要、<xref:System.IO.Path.GetTempFileName%2A>です。</span><span class="sxs-lookup"><span data-stu-id="167cc-341">When the security of your file system is paramount, this method should be used instead of <xref:System.IO.Path.GetTempFileName%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-342">次の例からの出力を表示する、<xref:System.IO.Path.GetRandomFileName%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-342">The following example show output from the <xref:System.IO.Path.GetRandomFileName%2A> method.</span></span>  
  
 [!code-csharp[System.IO.Path Members#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers20.cs#20)]
 [!code-vb[System.IO.Path Members#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers20.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelativePath">
      <MemberSignature Language="C#" Value="public static string GetRelativePath (string relativeTo, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRelativePath(string relativeTo, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetRelativePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRelativePath (relativeTo As String, path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRelativePath(System::String ^ relativeTo, System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relativeTo">To be added.</param>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public static string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempFileName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167cc-343">一意な名前を持つ 0 バイトの一時ファイルをディスク上に作成し、そのファイルの完全パスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-343">Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-344">一時ファイルの完全パス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-344">The full path of the temporary file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-345">このメソッドで一時ファイルを作成します。一時ファイルの拡張子です。</span><span class="sxs-lookup"><span data-stu-id="167cc-345">This method creates a temporary file with a .TMP file extension.</span></span> <span data-ttu-id="167cc-346">これは、パス、ユーザーの一時フォルダー内で、一時ファイルが作成されたによって返される、<xref:System.IO.Path.GetTempPath%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-346">The temporary file is created within the user’s temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method.</span></span>  
  
 <span data-ttu-id="167cc-347"><xref:System.IO.Path.GetTempFileName%2A>メソッドが発生、<xref:System.IO.IOException>以前の一時ファイルを削除することがなく 65535 を超えるファイルの作成に使用されている場合。</span><span class="sxs-lookup"><span data-stu-id="167cc-347">The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if it is used to create more than 65535 files without deleting previous temporary files.</span></span>  
  
 <span data-ttu-id="167cc-348"><xref:System.IO.Path.GetTempFileName%2A>メソッドが発生、<xref:System.IO.IOException>一意の一時ファイル名が使用できない場合。</span><span class="sxs-lookup"><span data-stu-id="167cc-348">The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if no unique temporary file name is available.</span></span> <span data-ttu-id="167cc-349">このエラーを解決するには、すべての不要な一時ファイルを削除します。</span><span class="sxs-lookup"><span data-stu-id="167cc-349">To resolve this error, delete all unneeded temporary files.</span></span>  
  
 <span data-ttu-id="167cc-350">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-350">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="167cc-351">一意の一時ファイル名が使用できないなどの I/O エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-351">An I/O error occurs, such as no unique temporary file name is available.</span>
          </span>
          <span data-ttu-id="167cc-352">\- または</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-352">\- or -</span>
          </span>
          <span data-ttu-id="167cc-353">このメソッドで一時ファイルを作成できませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-353">This method was unable to create a temporary file.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="167cc-354">一時ディレクトリに作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-354">for writing to the temporary directory.</span>
          </span>
          <span data-ttu-id="167cc-355">関連する列挙。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-355">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetTempPath">
      <MemberSignature Language="C#" Value="public static string GetTempPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetTempPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempPath();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167cc-356">現在のユーザーの一時フォルダーのパスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-356">Returns the path of the current user's temporary folder.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-357">一時フォルダーのパス。バックスラッシュで終わります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-357">The path to the temporary folder, ending with a backslash.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-358">このメソッドは、次の順序で環境変数の存在を確認し、最初に見つかったパスを使用します。</span><span class="sxs-lookup"><span data-stu-id="167cc-358">This method checks for the existence of environment variables in the following order and uses the first path found:</span></span>  
  
1.  <span data-ttu-id="167cc-359">TMP 環境変数によって指定されたパス。</span><span class="sxs-lookup"><span data-stu-id="167cc-359">The path specified by the TMP environment variable.</span></span>  
  
2.  <span data-ttu-id="167cc-360">TEMP 環境変数によって指定されたパス。</span><span class="sxs-lookup"><span data-stu-id="167cc-360">The path specified by the TEMP environment variable.</span></span>  
  
3.  <span data-ttu-id="167cc-361">ユーザー プロファイル環境変数で指定されたパス。</span><span class="sxs-lookup"><span data-stu-id="167cc-361">The path specified by the USERPROFILE environment variable.</span></span>  
  
4.  <span data-ttu-id="167cc-362">Windows ディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="167cc-362">The Windows directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-363"><xref:System.IO.Path.GetTempPath%2A> メソッドを呼び出す方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="167cc-363">The following code shows how to call the <xref:System.IO.Path.GetTempPath%2A> method.</span></span>  
  
```vb  
result As String = Path.GetTempPath()  
Console.WriteLine(result)  
```  
  
```csharp  
string result = Path.GetTempPath();  
Console.WriteLine(result);  
```  
  
 <span data-ttu-id="167cc-364">この例では、次のような出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="167cc-364">This example produces output similar to the following.</span></span>  
  
```  
C:\Users\UserName\AppData\Local\Temp\  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="167cc-365">呼び出し元に、必要なアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-365">The caller does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">
          <span data-ttu-id="167cc-366">環境変数への無制限のアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-366">for unrestricted access to environment variables.</span>
          </span>
          <span data-ttu-id="167cc-367">関連する列挙。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-367">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasExtension (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool HasExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.HasExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasExtension (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool HasExtension(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="167cc-368">拡張子を検索するパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-368">The path to search for an extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-369">パスにファイル名の拡張子を含めるかどうかを決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-369">Determines whether a path includes a file name extension.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-370">パスの最後のディレクトリ区切り記号 (\\\ または /) またはボリューム区切り記号 (:) の後に続く文字にピリオド (.) が含まれ、その後に 1 つ以上の文字が続く場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-370">
              <see langword="true" /> if the characters that follow the last directory separator (\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-371">末尾から開始`path`、このメソッドは、少なくとも 1 つの文字が続くピリオド (.) を検索します。</span><span class="sxs-lookup"><span data-stu-id="167cc-371">Starting from the end of `path`, this method searches for a period (.) followed by at least one character.</span></span> <span data-ttu-id="167cc-372">前にこのパターンが見つかった場合、 <xref:System.IO.Path.DirectorySeparatorChar>、 <xref:System.IO.Path.AltDirectorySeparatorChar>、または<xref:System.IO.Path.VolumeSeparatorChar>文字が検出されました。 このメソッドが戻る`true`です。</span><span class="sxs-lookup"><span data-stu-id="167cc-372">If this pattern is found before a <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar> character is encountered, this method returns `true`.</span></span>  
  
 <span data-ttu-id="167cc-373">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-373">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-374">使用を次のコード例に示します、`HasExtension`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-374">The following code example demonstrates the use of the `HasExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#11)]
 [!code-csharp[System.IO.Path Members#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#11)]
 [!code-vb[System.IO.Path Members#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-375">
            <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-375">
              <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InvalidPathChars">
      <MemberSignature Language="C#" Value="public static readonly char[] InvalidPathChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char[] InvalidPathChars" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.InvalidPathChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvalidPathChars As Char() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;char&gt; ^ InvalidPathChars;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("see GetInvalidPathChars and GetInvalidFileNameChars methods.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167cc-376">
            <see cref="T:System.IO.Path" /> クラスのメンバーに渡されるパス文字列引数で指定できないプラットフォーム固有の文字配列を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-376">Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-377">このメソッドから返される配列は、ファイルおよびディレクトリ名に無効な文字の完全なセットを含むは保証されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-377">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="167cc-378">無効な文字の完全なセットは、ファイル システムによって異なります。</span><span class="sxs-lookup"><span data-stu-id="167cc-378">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="167cc-379">たとえば、Windows ベースのデスクトップ プラットフォーム パスは無効な文字可能性があります、Ascii/unicode 文字 1 ~ 31、だけでなく (")、引用符で囲むより小さい (\<)、大なり (>)、パイプ (&#124;)、バック スペース (\b)、null (\0) およびタブ (\t) です。</span><span class="sxs-lookup"><span data-stu-id="167cc-379">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="167cc-380">使用しないでください<xref:System.IO.Path.InvalidPathChars>場合は、コードが信頼されていないコードと同じアプリケーション ドメインで実行可能性があります。</span><span class="sxs-lookup"><span data-stu-id="167cc-380">Do not use <xref:System.IO.Path.InvalidPathChars> if you think your code might execute in the same application domain as untrusted code.</span></span> <span data-ttu-id="167cc-381"><xref:System.IO.Path.InvalidPathChars> その要素を上書きできるように、配列、です。</span><span class="sxs-lookup"><span data-stu-id="167cc-381"><xref:System.IO.Path.InvalidPathChars> is an array, so its elements can be overwritten.</span></span> <span data-ttu-id="167cc-382">信頼できないコードの要素を上書きする場合<xref:System.IO.Path.InvalidPathChars>、悪用される可能性の方法で正しく動作するようにコードが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="167cc-382">If untrusted code overwrites elements of <xref:System.IO.Path.InvalidPathChars>, it might cause your code to malfunction in ways that could be exploited.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-383">使用を次のコード例に示します、`InvalidPathChars`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="167cc-383">The following code example demonstrates the use of the `InvalidPathChars` property.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPathFullyQualified">
      <MemberSignature Language="C#" Value="public static bool IsPathFullyQualified (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathFullyQualified(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathFullyQualified (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathFullyQualified(ReadOnlySpan&lt;char&gt; path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPathFullyQualified">
      <MemberSignature Language="C#" Value="public static bool IsPathFullyQualified (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathFullyQualified(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathFullyQualified(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathFullyQualified (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathFullyQualified(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathRooted (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathRooted(ReadOnlySpan&lt;char&gt; path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathRooted(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathRooted (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathRooted(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="167cc-384">テストするパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-384">The path to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167cc-385">指定したパス文字列にルートが含まれているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-385">Gets a value indicating whether the specified path string contains a root.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167cc-386">
            <paramref name="path" /> にルートが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-386">
              <see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-387"><xref:System.IO.Path.IsPathRooted%2A>メソッドを返します。`true`場合、最初の文字は、ディレクトリの区切り記号など"\\"、またはパスが、ドライブ文字とコロン (:) で始まる場合。</span><span class="sxs-lookup"><span data-stu-id="167cc-387">The <xref:System.IO.Path.IsPathRooted%2A> method returns `true` if the first character is a directory separator character such as "\\", or if the path starts with a drive letter and colon (:).</span></span> <span data-ttu-id="167cc-388">たとえば、返します`true`の`path`などの文字列"\\\MyDir\\\MyFile.txt"、"c:\\\MyDir"、または"C:MyDir"です。</span><span class="sxs-lookup"><span data-stu-id="167cc-388">For example, it returns `true` for `path` strings such as "\\\MyDir\\\MyFile.txt", "C:\\\MyDir", or "C:MyDir".</span></span> <span data-ttu-id="167cc-389">返します`false`の`path`"MyDir"などの文字列。</span><span class="sxs-lookup"><span data-stu-id="167cc-389">It returns `false` for `path` strings such as "MyDir".</span></span>  
  
 <span data-ttu-id="167cc-390">このメソッドでは、パスまたはファイル名が存在することは確認されません。</span><span class="sxs-lookup"><span data-stu-id="167cc-390">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="167cc-391">共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md)です。</span><span class="sxs-lookup"><span data-stu-id="167cc-391">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-392">次のコード例を示しますが、どのように`IsPathRooted`メソッドを使用して 3 つの文字列をテストできます。</span><span class="sxs-lookup"><span data-stu-id="167cc-392">The following code example demonstrates how the `IsPathRooted` method can be used to test three strings.</span></span>  
  
 [!code-cpp[System.IO.Path Members#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#12)]
 [!code-csharp[System.IO.Path Members#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#12)]
 [!code-vb[System.IO.Path Members#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167cc-393">
            <paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-393">
              <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="path1">To be added.</param>
        <param name="path2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="path1">To be added.</param>
        <param name="path2">To be added.</param>
        <param name="path3">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathSeparator">
      <MemberSignature Language="C#" Value="public static readonly char PathSeparator;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char PathSeparator" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.PathSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PathSeparator As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char PathSeparator;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167cc-394">環境変数のパス文字列を区切るために使用するプラットフォーム固有の区切り記号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-394">A platform-specific separator character used to separate path strings in environment variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-395">このフィールドの値は、セミコロン (;)、Windows ベースのデスクトップ プラットフォームの場合、既定では、他のプラットフォームで異なる場合がありますが、します。</span><span class="sxs-lookup"><span data-stu-id="167cc-395">On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-396">使用を次のコード例に示します、`PathSeparator`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-396">The following code example demonstrates the use of the `PathSeparator` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryJoin">
      <MemberSignature Language="C#" Value="public static bool TryJoin (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryJoin(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryJoin (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryJoin(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path1">To be added.</param>
        <param name="path2">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryJoin">
      <MemberSignature Language="C#" Value="public static bool TryJoin (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryJoin(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryJoin (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryJoin(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path1">To be added.</param>
        <param name="path2">To be added.</param>
        <param name="path3">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VolumeSeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char VolumeSeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char VolumeSeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.VolumeSeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VolumeSeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char VolumeSeparatorChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167cc-397">プラットフォーム固有のボリューム区切り記号を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167cc-397">Provides a platform-specific volume separator character.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167cc-398">このフィールドの値は、Windows および Macintosh、および UNIX オペレーティング システムでスラッシュ (/) では、コロン (:) です。</span><span class="sxs-lookup"><span data-stu-id="167cc-398">The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems.</span></span> <span data-ttu-id="167cc-399">これは、"c:\windows"または「MacVolume:System フォルダー」などのパスの解析中に最も役立ちます。</span><span class="sxs-lookup"><span data-stu-id="167cc-399">This is most useful for parsing paths such as "c:\windows" or "MacVolume:System Folder".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167cc-400">使用を次のコード例に示します、`VolumeSeparatorChar`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="167cc-400">The following code example demonstrates the use of the `VolumeSeparatorChar` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>