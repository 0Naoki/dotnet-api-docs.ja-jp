<Type Name="Path" FullName="System.IO.Path">
  <Metadata><Meta Name="ms.openlocfilehash" Value="87efe827b4d4d649387abf9f4fc5627fccf54480" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65013933" /></Metadata><TypeSignature Language="C#" Value="public static class Path" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Path extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Path" />
  <TypeSignature Language="VB.NET" Value="Public Class Path" />
  <TypeSignature Language="C++ CLI" Value="public ref class Path abstract sealed" />
  <TypeSignature Language="F#" Value="type Path = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a3d99-101">ファイルまたはディレクトリのパス情報を格納する <see cref="T:System.String" /> インスタンスで操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-101">Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information.</span></span> <span data-ttu-id="a3d99-102">これらの操作は、プラットフォーム間で実行されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-102">These operations are performed in a cross-platform manner.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="a3d99-103">パスは、ファイルまたはディレクトリの場所を提供する文字列です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-103">A path is a string that provides the location of a file or directory.</span></span> <span data-ttu-id="a3d99-104">パスが必ずしも; ディスク上の場所を指していませんたとえば、パスは、メモリ内、またはデバイス上の場所にマップ可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-104">A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device.</span></span> <span data-ttu-id="a3d99-105">パスの正確な形式は、現在のプラットフォームで決定されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-105">The exact format of a path is determined by the current platform.</span></span> <span data-ttu-id="a3d99-106">たとえば、一部のシステムでこの要素が他のシステムに存在しない一方、パスをことができますドライブまたはボリュームの文字で起動します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-106">For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems.</span></span> <span data-ttu-id="a3d99-107">一部のシステム ファイルのパスがファイルに格納されている情報の種類を示す拡張子を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-107">On some systems, file paths can contain extensions, which indicate the type of information stored in the file.</span></span> <span data-ttu-id="a3d99-108">ファイル名拡張子の形式は、プラットフォームに依存します。たとえば、一部のシステム制限を 3 文字は、拡張機能とそうでないです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-108">The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters, and others do not.</span></span> <span data-ttu-id="a3d99-109">現在のプラットフォームには、パスの要素を区切るために使用する文字のセットとパスを指定するときに使用できない文字のセットも決定します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-109">The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths.</span></span> <span data-ttu-id="a3d99-110">これらの違いのフィールドがあるため、`Path`クラスの一部のメンバーの正確な動作と、`Path`クラスは、プラットフォームに依存します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-110">Because of these differences, the fields of the `Path` class as well as the exact behavior of some members of the `Path` class are platform-dependent.</span></span>  
  
 <span data-ttu-id="a3d99-111">パスは絶対位置または相対位置情報を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-111">A path can contain absolute or relative location information.</span></span> <span data-ttu-id="a3d99-112">絶対パスが完全に場所を指定します。 ファイルまたはディレクトリを現在の場所に関係なく一意に識別できます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-112">Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location.</span></span> <span data-ttu-id="a3d99-113">部分的な場所を指定する相対パス。 相対パスで指定されたファイルを検索する際、現在の場所が開始点として使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-113">Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path.</span></span> <span data-ttu-id="a3d99-114">現在のディレクトリを決定するには、呼び出す<xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-114">To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType>.</span></span>  

 <span data-ttu-id="a3d99-115">.NET core 1.1 と以降のバージョンと .NET Framework 4.6.2 以降のバージョンなど、デバイス名であるファイル システム オブジェクトへのアクセスをサポートも"\\? \C:\"します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-115">.NET Core 1.1 and later versions and .NET Framework 4.6.2 and later versions also support access to file system objects that are device names, such as "\\?\C:\".</span></span>

<span data-ttu-id="a3d99-116">Windows 上のファイル パスの形式の詳細については、次を参照してください。[ファイル パスの形式の Windows システムで](~/docs/standard/io/file-path-formats.md)します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-116">For more information on file path formats on Windows, see [File path formats on Windows systems](~/docs/standard/io/file-path-formats.md).</span></span>

 <span data-ttu-id="a3d99-117">ほとんどのメンバー、`Path`クラスは、ファイル システムと対話しないと、パス文字列で指定されたファイルの存在は検証されません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-117">Most members of the `Path` class do not interact with the file system and do not verify the existence of the file specified by a path string.</span></span> <span data-ttu-id="a3d99-118">`Path` クラスのメンバーなど、パス文字列を変更する<xref:System.IO.Path.ChangeExtension%2A>、ファイル システム内のファイルの名前に影響を与えるありません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-118">`Path` class members that modify a path string, such as <xref:System.IO.Path.ChangeExtension%2A>, have no effect on names of files in the file system.</span></span> <span data-ttu-id="a3d99-119">`Path` メンバーの操作を行います、ただし、指定したパス文字列の内容を検証およびスロー、<xref:System.ArgumentException>例外文字列から返される文字で定義されているパスの文字列に無効な文字が含まれている場合、<xref:System.IO.Path.GetInvalidPathChars%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-119">`Path` members do, however, validate the contents of a specified path string, and throw an <xref:System.ArgumentException> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <xref:System.IO.Path.GetInvalidPathChars%2A> method.</span></span> <span data-ttu-id="a3d99-120">などの Windows ベースのデスクトップ プラットフォームで無効なパス文字があります引用符 (") より小さい (\<)、大なり (>)、パイプ (&#124;)、バック スペース (\b)、null (\0)、および 18 と 20 ~ 25 ~ Unicode 文字 16。</span><span class="sxs-lookup"><span data-stu-id="a3d99-120">For example, on Windows-based desktop platforms, invalid path characters might include quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0), and Unicode characters 16 through 18 and 20 through 25.</span></span>  
  
 <span data-ttu-id="a3d99-121">メンバー、`Path`クラスを使用すると、迅速かつ簡単には、ファイル名拡張子が、パスの一部であるかどうかを判断して、1 つのパス名に 2 つの文字列を結合することなどの一般的な操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-121">The members of the `Path` class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name.</span></span>  
  
 <span data-ttu-id="a3d99-122">すべてのメンバー、`Path`クラスは静的と、そのため、パスのインスタンスがなくても呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-122">All members of the `Path` class are static and can therefore be called without having an instance of a path.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a3d99-123">入力文字列としてのパスを受け入れるメンバーの場合は、そのパスは、整形式である必要があります。 または例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-123">In members that accept a path as an input string, that path must be well-formed or an exception is raised.</span></span> <span data-ttu-id="a3d99-124">たとえば、パスが完全修飾されて、文字で始まる場合は、パスは、クラスのメソッドで切り捨てられません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-124">For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class.</span></span> <span data-ttu-id="a3d99-125">したがって、パスの形式が、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-125">Therefore, the path is malformed and an exception is raised.</span></span> <span data-ttu-id="a3d99-126">同様に、パスまたはパスの組み合わせ完全修飾できない 2 回です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-126">Similarly, a path or a combination of paths cannot be fully qualified twice.</span></span> <span data-ttu-id="a3d99-127">たとえば、"c:\temp c:\windows"では、ほとんどの場合、例外も発生します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-127">For example, "c:\temp c:\windows" also raises an exception in most cases.</span></span> <span data-ttu-id="a3d99-128">パス文字列をそのまま使用するメソッドを使用する場合、パスが整形式であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-128">Ensure that your paths are well-formed when using methods that accept a path string.</span></span>  
  
 <span data-ttu-id="a3d99-129">パスを受け入れるメンバーでは、パスがファイルまたはディレクトリを参照できます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-129">In members that accept a path, the path can refer to a file or just a directory.</span></span> <span data-ttu-id="a3d99-130">指定されたパスは相対パスまたはサーバーと共有名の汎用名前付け規則 (UNC) パスにも参照できます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-130">The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name.</span></span> <span data-ttu-id="a3d99-131">たとえば、次のすべてが許容可能なパスです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-131">For example, all the following are acceptable paths:</span></span>  
  
-   <span data-ttu-id="a3d99-132">"c:\\\MyDir\\\MyFile.txt"c# の場合、または Visual Basic では、"c:\MyDir\MyFile.txt"にします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-132">"c:\\\MyDir\\\MyFile.txt" in C#, or "c:\MyDir\MyFile.txt" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="a3d99-133">"c:\\\MyDir"c# の場合、または Visual Basic では、"c:\MyDir"にします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-133">"c:\\\MyDir" in C#, or "c:\MyDir" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="a3d99-134">"MyDir\\\MySubdir"c# の場合、または Visual Basic では、"MyDir\MySubDir"にします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-134">"MyDir\\\MySubdir" in C#, or "MyDir\MySubDir" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="a3d99-135">"\\\\\\\MyServer\\\MyShare"c# の場合、または"\\\MyServer\MyShare"Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-135">"\\\\\\\MyServer\\\MyShare" in C#, or "\\\MyServer\MyShare" in Visual Basic.</span></span>  
  
 <span data-ttu-id="a3d99-136">文字列では、これらすべての操作が実行される、ので、結果がすべてのシナリオでは有効であることを確認することはできません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-136">Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios.</span></span> <span data-ttu-id="a3d99-137">たとえば、<xref:System.IO.Path.GetExtension%2A>メソッドに渡すことのできる文字列を解析し、その文字列から拡張子を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-137">For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string.</span></span> <span data-ttu-id="a3d99-138">ただし、その拡張子のファイルがディスクに存在するつまりされません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-138">However, this does not mean that a file with that extension exists on the disk.</span></span>  
  
 <span data-ttu-id="a3d99-139">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-139">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>   
  
## Examples  
 <span data-ttu-id="a3d99-140">次の例では、メインのメンバーの一部を示します、`Path`クラス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-140">The following example demonstrates some of the main members of the `Path` class.</span></span>  
  
 [!code-cpp[path class#1](~/samples/snippets/cpp/VS_Snippets_CLR/Path Class/CPP/path class.cpp#1)]
 [!code-csharp[path class#1](~/samples/snippets/csharp/VS_Snippets_CLR/Path Class/CS/path class.cs#1)]
 [!code-vb[path class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Path Class/VB/path class.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-141">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-141">File and Stream I/O</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-142">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-142">How to: Read Text from a File</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-143">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-143">How to: Write Text to a File</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md"><span data-ttu-id="a3d99-144">方法: 新しく作成されたデータ ファイルに対して読み書きする</span><span class="sxs-lookup"><span data-stu-id="a3d99-144">How to: Read and Write to a Newly Created Data File</span></span></related>
    <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-145">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-145">File path formats on Windows systems</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AltDirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char AltDirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char AltDirectorySeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.AltDirectorySeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AltDirectorySeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char AltDirectorySeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable AltDirectorySeparatorChar : char" Usage="System.IO.Path.AltDirectorySeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a3d99-146">階層ファイル システム編成を反映するパス文字列の、ディレクトリ レベルを区切るために使用する、プラットフォーム固有の代替文字を提供します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-146">Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="a3d99-147">このフィールドと同じ値を指定できます<xref:System.IO.Path.DirectorySeparatorChar>します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-147">This field can have the same value as <xref:System.IO.Path.DirectorySeparatorChar>.</span></span> <span data-ttu-id="a3d99-148">`AltDirectorySeparatorChar` <xref:System.IO.Path.DirectorySeparatorChar>はどちらも、ディレクトリ レベルでパス文字列を区切るため無効です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-148">`AltDirectorySeparatorChar` and <xref:System.IO.Path.DirectorySeparatorChar> are both valid for separating directory levels in a path string.</span></span>  
  
<span data-ttu-id="a3d99-149">このフィールドの値は、Windows と Unix ベースのオペレーティング システムの両方でスラッシュ (/) です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-149">The value of this field is a slash ('/') on both Windows and Unix-based operating systems.</span></span>  
  
## Examples  

<span data-ttu-id="a3d99-150">次の例では、表示<xref:System.IO.Path>フィールドの Windows と Unix ベースのシステム値です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-150">The following example displays <xref:System.IO.Path> field values on Windows and on Unix-based systems.</span></span> <span data-ttu-id="a3d99-151">Windows がいずれか、スラッシュをサポートすることに注意してください (から返される、<xref:System.IO.Path.AltDirectorySeparatorChar>フィールド) または円記号 (から返される、<xref:System.IO.Path.DirectorySeparatorChar>フィールド) のパス区切り文字、スラッシュのみをサポートする Unix ベースのシステムにします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-151">Note that Windows supports either the forward slash (which is returned by the <xref:System.IO.Path.AltDirectorySeparatorChar> field) or the backslash (which is returned by the <xref:System.IO.Path.DirectorySeparatorChar> field) as path separator characters, while Unix-based systems support only the forward slash.</span></span>

[!code-csharp[DirectorySeparatorChar](~/samples/snippets/csharp/api/system.io/path/directoryseparatorchar/program.cs)]
[!code-vb[DirectorySeparatorChar](~/samples/snippets/visualbasic/api/system.io/path/directoryseparatorchar/program.vb)]
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-152">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-152">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-153">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-153">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-154">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-154">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChangeExtension">
      <MemberSignature Language="C#" Value="public static string ChangeExtension (string path, string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ChangeExtension(string path, string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.ChangeExtension(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeExtension (path As String, extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ChangeExtension(System::String ^ path, System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member ChangeExtension : string * string -&gt; string" Usage="System.IO.Path.ChangeExtension (path, extension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-155">変更するパス情報。</span><span class="sxs-lookup"><span data-stu-id="a3d99-155">The path information to modify.</span></span> <span data-ttu-id="a3d99-156">パスに、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義された文字を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-156">The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></param>
        <param name="extension"><span data-ttu-id="a3d99-157">新しい拡張子 (先行ピリオド付き、またはなし)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-157">The new extension (with or without a leading period).</span></span> <span data-ttu-id="a3d99-158"><see langword="null" /> を指定して、<paramref name="path" /> から既存の拡張子を削除します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-158">Specify <see langword="null" /> to remove an existing extension from <paramref name="path" />.</span></span></param>
        <summary><span data-ttu-id="a3d99-159">パス文字列の拡張子を変更します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-159">Changes the extension of a path string.</span></span></summary>
        <returns><span data-ttu-id="a3d99-160">変更されたパス情報。</span><span class="sxs-lookup"><span data-stu-id="a3d99-160">The modified path information.</span></span>  
  
<span data-ttu-id="a3d99-161">Windows ベースのデスクトップ プラットフォームでは、<paramref name="path" /> が <see langword="null" /> または空の文字列 ("") の場合、パス情報は変更されずに返されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-161">On Windows-based desktop platforms, if <paramref name="path" /> is <see langword="null" /> or an empty string (""), the path information is returned unmodified.</span></span> <span data-ttu-id="a3d99-162"><paramref name="extension" /> が <see langword="null" /> の場合は、返される文字列に、削除した拡張子が付いた指定したパスが含まれます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-162">If <paramref name="extension" /> is <see langword="null" />, the returned string contains the specified path with its extension removed.</span></span> <span data-ttu-id="a3d99-163"><paramref name="path" /> に拡張子がなく、<paramref name="extension" /> が <see langword="null" /> でない場合は、返されるパス文字列に <paramref name="path" /> の末尾に追加される <paramref name="extension" /> が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-163">If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not <see langword="null" />, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-164">どちらの場合`path`も`extension`ピリオド (.) を含む`ChangeExtension`期間を追加します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-164">If neither `path` nor `extension` contains a period (.), `ChangeExtension` adds the period.</span></span>  
  
 <span data-ttu-id="a3d99-165">`extension`パラメーターは、複数のピリオドと任意の有効なパス文字を含めることができ、任意の長さを指定できます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-165">The `extension` parameter can contain multiple periods and any valid path characters, and can be any length.</span></span> <span data-ttu-id="a3d99-166">場合`extension`は`null`、返される文字列には内容が含まれています`path`最後にピリオドとそれに続くすべての文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-166">If `extension` is `null`, the returned string contains the contents of `path` with the last period and all characters following it removed.</span></span>  
  
 <span data-ttu-id="a3d99-167">場合`extension`空の文字列は、返されるパス文字列の内容を格納する`path`最後の期間を次の文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-167">If `extension` is an empty string, the returned path string contains the contents of `path` with any characters following the last period removed.</span></span>  
  
 <span data-ttu-id="a3d99-168">場合`path`、拡張子が付いていないと`extension`は`null`、返される文字列が含まれています`path`続けて`extension`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-168">If `path` does not have an extension and `extension` is not `null`, the returned string contains `path` followed by `extension`.</span></span>  
  
 <span data-ttu-id="a3d99-169">場合`extension`ない`null`先行するピリオドが含まれていない期間が追加されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-169">If `extension` is not `null` and does not contain a leading period, the period is added.</span></span>  
  
 <span data-ttu-id="a3d99-170">場合`path`複数のピリオドで区切られた複数の拡張機能が含まれています、返される文字列の内容を格納する`path`最後にピリオドとそれに続くすべての文字に置き換え`extension`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-170">If `path` contains a multiple extension separated by multiple periods, the returned string contains the contents of `path` with the last period and all characters following it replaced by `extension`.</span></span> <span data-ttu-id="a3d99-171">たとえば場合、 `path` "\Dir1\examples\pathtests.csx.txt"と`extension`"cs"は、変更されたパスが"\Dir1\examples\pathtests.csx.cs"。</span><span class="sxs-lookup"><span data-stu-id="a3d99-171">For example, if `path` is "\Dir1\examples\pathtests.csx.txt" and `extension` is "cs", the modified path is "\Dir1\examples\pathtests.csx.cs".</span></span>  
  
 <span data-ttu-id="a3d99-172">場合によっては、返される結果がすべてのシナリオでは有効であることを確認することはできません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-172">It is not possible to verify that the returned results are valid in all scenarios.</span></span> <span data-ttu-id="a3d99-173">たとえば場合、`path`が空、`extension`が追加されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-173">For example, if `path` is empty, `extension` is appended.</span></span>  
  
 <span data-ttu-id="a3d99-174">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-174">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-175">次の例を使用して、`ChangeExtension`メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-175">The following example demonstrates a use of the `ChangeExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#1)]
 [!code-csharp[System.IO.Path Members#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#1)]
 [!code-vb[System.IO.Path Members#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-176"><paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-176"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-177">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-177">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-178">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-178">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-179">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-179">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-180">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-180">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a3d99-181">複数の文字列を 1 つのパスに結合します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-181">Combines strings into a path.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="a3d99-182">このメソッドは、個々 の文字列をファイル パスを表す 1 つの文字列に連結します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-182">This method is intended to concatenate individual strings into a single string that represents a file path.</span></span> <span data-ttu-id="a3d99-183">ただし、1 つ目以外の引数にはルートされたパスが含まれている場合、前のパス コンポーネントは無視され、返される文字列は、そのルートのパス コンポーネントで始まります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-183">However, if an argument other than the first contains a rooted path, any previous path components are ignored, and the returned string begins with that rooted path component.</span></span> <span data-ttu-id="a3d99-184">代替方法として、`Combine`メソッドの使用を検討、<xref:System.IO.Path.Join%2A>または<xref:System.IO.Path.TryJoin%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-184">As an alternative to the `Combine` method, consider using the <xref:System.IO.Path.Join%2A> or <xref:System.IO.Path.TryJoin%2A> methods.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="a3d99-185">このメソッドは、最初の引数が絶対パスであること、および次の引数または引数に相対パスがあると仮定します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-185">This method assumes that the first argument is an absolute path and that the following argument or arguments are relative paths.</span></span> <span data-ttu-id="a3d99-186">そうでない場合、および、後続の引数が、ユーザーによって入力された文字列である場合に特に呼び出し、<xref:System.IO.Path.Join%2A>または<xref:System.IO.Path.TryJoin%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-186">If this is not the case, and particularly if any subsequent arguments are strings input by the user, call the <xref:System.IO.Path.Join%2A> or <xref:System.IO.Path.TryJoin%2A> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (params string[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string[] paths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray paths As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(... cli::array &lt;System::String ^&gt; ^ paths);" />
      <MemberSignature Language="F#" Value="static member Combine : string[] -&gt; string" Usage="System.IO.Path.Combine paths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paths"><span data-ttu-id="a3d99-187">パスの構成要素の配列。</span><span class="sxs-lookup"><span data-stu-id="a3d99-187">An array of parts of the path.</span></span></param>
        <summary><span data-ttu-id="a3d99-188">文字列の配列を 1 つのパスに結合します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-188">Combines an array of strings into a path.</span></span></summary>
        <returns><span data-ttu-id="a3d99-189">結合されたパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-189">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="a3d99-190">`paths` 結合するパスの部分の配列を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-190">`paths` should be an array of the parts of the path to combine.</span></span> <span data-ttu-id="a3d99-191">後続のパスのいずれかが絶対パスである場合は、し、結合操作をリセット前のすべての結合パスを破棄すること、その絶対パスで始まます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-191">If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.</span></span>  

<span data-ttu-id="a3d99-192">場合の任意の要素`paths`が最後の 1 つドライブではないと、いずれかで終わらない、<xref:System.IO.Path.DirectorySeparatorChar>または<xref:System.IO.Path.AltDirectorySeparatorChar>文字、`Combine`メソッドを追加、<xref:System.IO.Path.DirectorySeparatorChar>その要素と次の文字。</span><span class="sxs-lookup"><span data-stu-id="a3d99-192">If any element in `paths` but the last one is not a drive and does not end with either the <xref:System.IO.Path.DirectorySeparatorChar> or the <xref:System.IO.Path.AltDirectorySeparatorChar> character, the `Combine` method adds a <xref:System.IO.Path.DirectorySeparatorChar> character between that element and the next one.</span></span> <span data-ttu-id="a3d99-193">要素は、ターゲット プラットフォームに対して適切でないパスの区切り文字で終わっている場合に、注意してください、`Combine`メソッドは元のパスの区切り文字を保持し、サポートされている 1 つを追加します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-193">Note that, if the element ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="a3d99-194">次の例は、バック スラッシュをパスの区切り文字として使用する場合、Windows と Unix ベースのシステムで結果を比較します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-194">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span>

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#1)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#1)]  

 <span data-ttu-id="a3d99-195">長さ 0 の文字列は、結合されたパスから除外されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-195">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="a3d99-196">パラメーターは、ホワイト スペースがある場合は解析されません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-196">The parameters are not parsed if they have white space.</span></span>  
  
 <span data-ttu-id="a3d99-197">ディレクトリとファイル名のすべての無効な文字はによって許容として解釈されます、`Combine`メソッドでは、これらの文字を使用するにはワイルドカード文字の検索のためです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-197">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="a3d99-198">たとえば、`Path.Combine("c:\\", "*.txt")`有効でない可能性がありますからファイルを作成する場合は、検索文字列として有効です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-198">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="a3d99-199">正常に解釈されますので、`Combine`メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-199">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
## Examples  
 <span data-ttu-id="a3d99-200">次の例では、パスに文字列の配列を結合します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-200">The following example combines an array of strings into a path.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#3)]
 [!code-vb[System.IO.Path.Combine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-201">配列内の文字列の 1 つが、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義された無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-201">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d99-202">配列内の文字列の 1 つが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-202">One of the strings in the array is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-203">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-203">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="a3d99-204">結合する 1 番目のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-204">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="a3d99-205">結合する 2 番目のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-205">The second path to combine.</span></span></param>
        <summary><span data-ttu-id="a3d99-206">2 つの文字列を 1 つのパスに結合します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-206">Combines two strings into a path.</span></span></summary>
        <returns><span data-ttu-id="a3d99-207">結合されたパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-207">The combined paths.</span></span> <span data-ttu-id="a3d99-208">指定したパスの 1 つが長さ 0 の文字列の場合、このメソッドは別のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-208">If one of the specified paths is a zero-length string, this method returns the other path.</span></span> <span data-ttu-id="a3d99-209"><paramref name="path2" /> に絶対パスが含まれる場合、このメソッドは <paramref name="path2" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-209">If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-210">場合`path1`ドライブの参照 (つまり、「c:」または「d:」) ではないで定義されている有効な区切り記号で終わっていない<xref:System.IO.Path.DirectorySeparatorChar>、 <xref:System.IO.Path.AltDirectorySeparatorChar>、または<xref:System.IO.Path.VolumeSeparatorChar>、<xref:System.IO.Path.DirectorySeparatorChar>に追加される`path1`連結する前にします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-210">If `path1` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.</span></span> <span data-ttu-id="a3d99-211">その場合に注意してください`path1`、ターゲット プラットフォームに対して適切でないパスの区切り文字で終わる、`Combine`メソッドは元のパスの区切り文字を保持し、サポートされている 1 つを追加します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-211">Note that if `path1` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="a3d99-212">次の例は、バック スラッシュをパスの区切り文字として使用する場合、Windows と Unix ベースのシステムで結果を比較します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-212">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span>  
  
[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#2)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#2)]  

 <span data-ttu-id="a3d99-213">場合`path2`ルートは含まれません (場合など、`path2`区切り記号の文字またはドライブの仕様で始まらない)、介在する区切り記号文字で、2 つのパスを連結したものになります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-213">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="a3d99-214">場合`path2`、ルートが含まれています`path2`が返されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-214">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="a3d99-215">パラメーターは、ホワイト スペースがある場合は解析されません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-215">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="a3d99-216">そのため場合、`path2`が空白文字 (たとえば、"\file.txt")、含まれています、<xref:System.IO.Path.Combine%2A>メソッドは、追加`path2`に`path1`のみを返す代わりに`path2`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-216">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1` instead of returning only `path2`.</span></span>  
  
 <span data-ttu-id="a3d99-217">ディレクトリとファイル名のすべての無効な文字はによって許容として解釈されます、`Combine`メソッドでは、これらの文字を使用するにはワイルドカード文字の検索のためです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-217">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="a3d99-218">たとえば、`Path.Combine("c:\\", "*.txt")`有効でない可能性がありますからファイルを作成する場合は、検索文字列として有効です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-218">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="a3d99-219">正常に解釈されますので、`Combine`メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-219">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
 <span data-ttu-id="a3d99-220">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-220">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-221">次の例を使用して、 `Combine` Windows ベースのデスクトップ プラットフォーム上のメソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-221">The following example demonstrates using the `Combine` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[pathcombine#1](~/samples/snippets/cpp/VS_Snippets_CLR/pathcombine/CPP/pathcombine.cpp#1)]
 [!code-csharp[pathcombine#1](~/samples/snippets/csharp/VS_Snippets_CLR/pathcombine/CS/pathcombine.cs#1)]
 [!code-vb[pathcombine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/pathcombine/VB/pathcombine.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-222"><paramref name="path1" /> または <paramref name="path2" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-222"><paramref name="path1" /> or <paramref name="path2" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d99-223"><paramref name="path1" /> または <paramref name="path2" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-223"><paramref name="path1" /> or <paramref name="path2" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-224">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-224">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-225">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-225">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-226">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-226">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-227">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-227">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String, path3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2, System::String ^ path3);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="a3d99-228">結合する 1 番目のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-228">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="a3d99-229">結合する 2 番目のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-229">The second path to combine.</span></span></param>
        <param name="path3"><span data-ttu-id="a3d99-230">結合する 3 番目のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-230">The third path to combine.</span></span></param>
        <summary><span data-ttu-id="a3d99-231">3 つの文字列を 1 つのパスに結合します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-231">Combines three strings into a path.</span></span></summary>
        <returns><span data-ttu-id="a3d99-232">結合されたパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-232">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-233">`path1` 絶対パスである必要があります (たとえば、"d:\archives"または"\\\archives\public")。</span><span class="sxs-lookup"><span data-stu-id="a3d99-233">`path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").</span></span> <span data-ttu-id="a3d99-234">場合`path2`または`path3`も絶対パス、結合操作の破棄を組み合わせて使用したすべてのパスと絶対パスにリセットします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-234">If `path2` or `path3` is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.</span></span>  
  
 <span data-ttu-id="a3d99-235">長さ 0 の文字列は、結合されたパスから除外されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-235">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="a3d99-236">場合`path1`または`path2`ドライブの参照 (つまり、「c:」または「d:」) ではないで定義されている有効な区切り記号で終わっていない<xref:System.IO.Path.DirectorySeparatorChar>、 <xref:System.IO.Path.AltDirectorySeparatorChar>、または<xref:System.IO.Path.VolumeSeparatorChar>、<xref:System.IO.Path.DirectorySeparatorChar>に追加される`path1`または`path2`連結する前にします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-236">If `path1` or `path2` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` or `path2` before concatenation.</span></span> <span data-ttu-id="a3d99-237">その場合に注意してください`path1`または`path2`、ターゲット プラットフォームに対して適切でないパスの区切り文字で終わる、`Combine`メソッドは元のパスの区切り文字を保持し、サポートされている 1 つを追加します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-237">Note that if `path1` or `path2` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="a3d99-238">次の例は、バック スラッシュをパスの区切り文字として使用する場合、Windows と Unix ベースのシステムで結果を比較します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-238">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span> 

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#3)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#3)]  

 <span data-ttu-id="a3d99-239">場合`path2`ルートは含まれません (場合など、`path2`区切り記号の文字またはドライブの仕様で始まらない)、介在する区切り記号文字で、2 つのパスを連結したものになります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-239">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="a3d99-240">場合`path2`、ルートが含まれています`path2`が返されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-240">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="a3d99-241">パラメーターは、ホワイト スペースがある場合は解析されません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-241">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="a3d99-242">そのため場合、`path2`が空白文字 (たとえば、"\file.txt")、含まれています、<xref:System.IO.Path.Combine%2A>メソッドは、追加`path2`に`path1`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-242">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.</span></span>  
  
 <span data-ttu-id="a3d99-243">ディレクトリとファイル名のすべての無効な文字はによって許容として解釈されます、`Combine`メソッドでは、これらの文字を使用するにはワイルドカード文字の検索のためです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-243">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="a3d99-244">たとえば、`Path.Combine("c:\\", "*.txt")`有効でない可能性がありますからファイルを作成する場合は、検索文字列として有効です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-244">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="a3d99-245">正常に解釈されますので、`Combine`メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-245">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-246">次の例では、次の 3 つのパスを結合します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-246">The following example combines three paths.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#1)]
 [!code-vb[System.IO.Path.Combine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-247"><paramref name="path1" />、<paramref name="path2" />、または <paramref name="path3" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-247"><paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d99-248"><paramref name="path1" />、<paramref name="path2" />、または <paramref name="path3" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-248"><paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-249">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-249">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3, string path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3, string path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String, path3 As String, path4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2, System::String ^ path3, System::String ^ path4);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string * string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2, path3, path4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="path4" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="a3d99-250">結合する 1 番目のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-250">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="a3d99-251">結合する 2 番目のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-251">The second path to combine.</span></span></param>
        <param name="path3"><span data-ttu-id="a3d99-252">結合する 3 番目のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-252">The third path to combine.</span></span></param>
        <param name="path4"><span data-ttu-id="a3d99-253">結合する 4 番目のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-253">The fourth path to combine.</span></span></param>
        <summary><span data-ttu-id="a3d99-254">4 つの文字列を 1 つのパスに結合します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-254">Combines four strings into a path.</span></span></summary>
        <returns><span data-ttu-id="a3d99-255">結合されたパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-255">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-256">`path1` 絶対パスである必要があります (たとえば、"d:\archives"または"\\\archives\public")。後続のパスのいずれかが絶対パスでも場合、結合操作はすべて以前に結合されたパスを破棄し、その絶対パスにリセットします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-256">`path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.</span></span>  
  
 <span data-ttu-id="a3d99-257">長さ 0 の文字列は、結合されたパスから除外されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-257">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="a3d99-258">場合`path1`、 `path2`、または`path3`ドライブの参照 (つまり、「c:」または「d:」) ではないで定義されている有効な区切り記号で終わっていない<xref:System.IO.Path.DirectorySeparatorChar>、 <xref:System.IO.Path.AltDirectorySeparatorChar>、または<xref:System.IO.Path.VolumeSeparatorChar>、<xref:System.IO.Path.DirectorySeparatorChar>がそれに追加されます連結する前に。</span><span class="sxs-lookup"><span data-stu-id="a3d99-258">If `path1`, `path2`, or `path3` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to it before concatenation.</span></span> <span data-ttu-id="a3d99-259">場合`path1`、 `path2`、または`path3`、ターゲット プラットフォームに対して適切でないパスの区切り文字で終わる、`Combine`メソッドは元のパスの区切り文字を保持し、サポートされている 1 つを追加します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-259">Note that if `path1`, `path2`, or `path3` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="a3d99-260">次の例は、バック スラッシュをパスの区切り文字として使用する場合、Windows と Unix ベースのシステムで結果を比較します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-260">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span> 

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#4)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#4)]   
  
 <span data-ttu-id="a3d99-261">場合`path2`ルートは含まれません (場合など、`path2`区切り記号の文字またはドライブの仕様で始まらない)、介在する区切り記号文字で、2 つのパスを連結したものになります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-261">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="a3d99-262">場合`path2`、ルートが含まれています`path2`が返されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-262">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="a3d99-263">パラメーターは、ホワイト スペースがある場合は解析されません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-263">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="a3d99-264">そのため場合、`path2`が空白文字 (たとえば、"\file.txt")、含まれています、<xref:System.IO.Path.Combine%2A>メソッドは、追加`path2`に`path1`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-264">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.</span></span>  
  
 <span data-ttu-id="a3d99-265">ディレクトリとファイル名のすべての無効な文字はによって許容として解釈されます、`Combine`メソッドでは、これらの文字を使用するにはワイルドカード文字の検索のためです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-265">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="a3d99-266">たとえば、`Path.Combine("c:\\", "*.txt")`有効でない可能性がありますからファイルを作成する場合は、検索文字列として有効です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-266">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="a3d99-267">正常に解釈されますので、`Combine`メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-267">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-268">次の例では、次の 4 つのパスを結合します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-268">The following example combines four paths.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#2)]
 [!code-vb[System.IO.Path.Combine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-269"><paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" />、または <paramref name="path4" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-269"><paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d99-270"><paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" />、または <paramref name="path4" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-270"><paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-271">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-271">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char DirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char DirectorySeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.DirectorySeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DirectorySeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char DirectorySeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable DirectorySeparatorChar : char" Usage="System.IO.Path.DirectorySeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a3d99-272">階層ファイル システム編成を反映するパス文字列の、ディレクトリ レベルを区切るために使用する、プラットフォーム固有の文字を提供します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-272">Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="a3d99-273"><xref:System.IO.Path.AltDirectorySeparatorChar> `DirectorySeparatorChar`はどちらも、ディレクトリ レベルでパス文字列を区切るため無効です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-273"><xref:System.IO.Path.AltDirectorySeparatorChar> and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.</span></span>  
  
<span data-ttu-id="a3d99-274">複数のプラットフォームで実行するアプリケーションを開発、.NET Core を使用している場合。</span><span class="sxs-lookup"><span data-stu-id="a3d99-274">When you are using .NET Core to develop applications that run on multiple platforms:</span></span>

- <span data-ttu-id="a3d99-275">ディレクトリの区切り記号をハード コーディングしたい場合は、スラッシュを使用する必要があります (`/`) 文字。</span><span class="sxs-lookup"><span data-stu-id="a3d99-275">If you prefer to hard-code the directory separator character, you should use the forward slash (`/`) character.</span></span> <span data-ttu-id="a3d99-276">Unix システムで認識されている唯一のディレクトリ区切り文字を例の出力結果が、 <xref:System.IO.Path.AltDirectorySeparatorChar> Windows にします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-276">It is the only recognized directory separator character on Unix systems, as the output from the example shows, and is the <xref:System.IO.Path.AltDirectorySeparatorChar> on Windows.</span></span>

- <span data-ttu-id="a3d99-277">動的に実行時にパスの区切り文字を取得し、ファイル システム パスに組み込むには、文字列の連結を使用します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-277">Use string concatenation to dynamically retrieve the path separator character at runtime and incorporate it into file system paths.</span></span> <span data-ttu-id="a3d99-278">例えば以下のようにします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-278">For example,</span></span> 

   ```csharp
   separator = Path.DirectorySeparatorChar;
   path = $"{separator}users{separator}user1{separator}";
   ```
   ```vb
   separator = Path.DirectorySeparatorChar;
   path = $"{separator}users{separator}user1{separator}";
   ``` 
   <span data-ttu-id="a3d99-279">値を取得することも、<xref:System.IO.Path.AltDirectorySeparatorChar>プロパティは、Windows と Unx ベースのシステムの両方で同じであるためです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-279">You can also retrieve the value from the <xref:System.IO.Path.AltDirectorySeparatorChar> property, since it is the same on both Windows and Unx-based systems.</span></span>

- <span data-ttu-id="a3d99-280">取得、<xref:System.IO.Path.AltDirectorySeparatorChar>プロパティ</span><span class="sxs-lookup"><span data-stu-id="a3d99-280">Retrieve the <xref:System.IO.Path.AltDirectorySeparatorChar> property</span></span>

<span data-ttu-id="a3d99-281">アプリケーションがクロス プラットフォームではない場合は、システムの適切な区切り記号を使用できます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-281">If your application is not cross-platform, you can use the separator appropriate for your system.</span></span>

## Examples  

<span data-ttu-id="a3d99-282">次の例では、表示<xref:System.IO.Path>フィールドの Windows と Unix ベースのシステム値です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-282">The following example displays <xref:System.IO.Path> field values on Windows and on Unix-based systems.</span></span> <span data-ttu-id="a3d99-283">Windows がいずれか、スラッシュをサポートすることに注意してください (から返される、<xref:System.IO.Path.AltDirectorySeparatorChar>フィールド) または円記号 (から返される、<xref:System.IO.Path.DirectorySeparatorChar>フィールド) のパス区切り文字、スラッシュのみをサポートする Unix ベースのシステムにします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-283">Note that Windows supports either the forward slash (which is returned by the <xref:System.IO.Path.AltDirectorySeparatorChar> field) or the backslash (which is returned by the <xref:System.IO.Path.DirectorySeparatorChar> field) as path separator characters, while Unix-based systems support only the forward slash.</span></span>  

[!code-csharp[DirectorySeparatorChar](~/samples/snippets/csharp/api/system.io/path/directoryseparatorchar/program.cs)]
[!code-vb[DirectorySeparatorChar](~/samples/snippets/visualbasic/api/system.io/path/directoryseparatorchar/program.vb)]
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-284">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-284">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-285">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-285">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-286">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-286">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-287">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-287">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetDirectoryName (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetDirectoryName(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryName (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetDirectoryName(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryName : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetDirectoryName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary><span data-ttu-id="a3d99-288">文字範囲で表された、指定されたパスのディレクトリ情報を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-288">Returns the directory information for the specified path represented by a character span.</span></span></summary>
        <returns><span data-ttu-id="a3d99-289"><paramref name="path" /> のディレクトリ情報。<paramref name="path" /> が <see langword="null" />、空の範囲、またはルート (\, C:、または \\server\share) の場合は空の範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-289">Directory information for <paramref name="path" />, or an empty span if <paramref name="path" /> is <see langword="null" />, an empty span, or a root (such as \, C:, or \\server\share).</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-290">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-290">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static string GetDirectoryName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectoryName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetDirectoryName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetDirectoryName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryName : string -&gt; string" Usage="System.IO.Path.GetDirectoryName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-291">ファイルまたはディレクトリのパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-291">The path of a file or directory.</span></span></param>
        <summary><span data-ttu-id="a3d99-292">指定したパス文字列のディレクトリ情報を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-292">Returns the directory information for the specified path string.</span></span></summary>
        <returns><span data-ttu-id="a3d99-293"><paramref name="path" /> のディレクトリ情報。<paramref name="path" /> がルート ディレクトリを示しているか null である場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-293">Directory information for <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> denotes a root directory or is null.</span></span> <span data-ttu-id="a3d99-294"><paramref name="path" /> にディレクトリ情報が含まれていない場合は、<see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-294">Returns <see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain directory information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-295">最後に、パスのすべての文字のほとんどの場合、このメソッドによって返される文字列がで構成されています。<xref:System.IO.Path.DirectorySeparatorChar>または<xref:System.IO.Path.AltDirectorySeparatorChar>します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-295">In most cases, the string returned by this method consists of all characters in the path up to but not including the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>.</span></span> <span data-ttu-id="a3d99-296">パスがルート ディレクトリのなどはかどうかは"c:\\"、null が返されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-296">If the path consists of a root directory, such as "c:\\", null is returned.</span></span> <span data-ttu-id="a3d99-297">このメソッドを使用してパスをサポートしていないことに注意してください"ファイル:"です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-297">Note that this method does not support paths using "file:".</span></span> <span data-ttu-id="a3d99-298">返されるパスが含まれていないため、<xref:System.IO.Path.DirectorySeparatorChar>または<xref:System.IO.Path.AltDirectorySeparatorChar>に返されるパスを渡して、<xref:System.IO.Path.GetDirectoryName%2A>メソッドは、結果の文字列で後続の呼び出しごとに 1 つのフォルダー レベルの切り捨てが発生します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-298">Because the returned path does not include the <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, passing the returned path back into the <xref:System.IO.Path.GetDirectoryName%2A> method will result in the truncation of one folder level per subsequent call on the result string.</span></span> <span data-ttu-id="a3d99-299">たとえば、"C:\Directory\SubDirectory\test.txt"パスを渡すことに、<xref:System.IO.Path.GetDirectoryName%2A>メソッドは"C:\Directory\SubDirectory"を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-299">For example, passing the path "C:\Directory\SubDirectory\test.txt" into the <xref:System.IO.Path.GetDirectoryName%2A> method will return "C:\Directory\SubDirectory".</span></span> <span data-ttu-id="a3d99-300">"C:\Directory\SubDirectory"は、その文字列を渡すこと<xref:System.IO.Path.GetDirectoryName%2A>"C:\Directory"になります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-300">Passing that string, "C:\Directory\SubDirectory", into <xref:System.IO.Path.GetDirectoryName%2A> will result in "C:\Directory".</span></span>  
  
 <span data-ttu-id="a3d99-301">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-301">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-302">次の例を使用して、 `GetDirectoryName` Windows ベースのデスクトップ プラットフォーム上のメソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-302">The following example demonstrates using the `GetDirectoryName` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#3)]
 [!code-csharp[System.IO.Path Members#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#3)]
 [!code-vb[System.IO.Path Members#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-303"><paramref name="path" /> パラメーターは正しくない文字を含んでおり、空か、空白のみで構成されています。</span><span class="sxs-lookup"><span data-stu-id="a3d99-303">The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a3d99-304"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows ストア アプリ用 .NET</see> または<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">ポータブル クラス ライブラリ</see>では、基本クラスの例外である <see cref="T:System.IO.IOException" /> を代わりにキャッチします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-304">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a3d99-305"><paramref name="path" /> パラメーターは、システムで定義された最大長を超えています。</span><span class="sxs-lookup"><span data-stu-id="a3d99-305">The <paramref name="path" /> parameter is longer than the system-defined maximum length.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-306">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-306">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-307">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-307">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-308">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-308">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-309">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-309">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetExtension : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-310">拡張子の取得元のファイル パス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-310">The file path from which to get the extension.</span></span></param>
        <summary><span data-ttu-id="a3d99-311">読み取り専用の文字範囲で表されたファイル パスの拡張子を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-311">Returns the extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="a3d99-312">指定されたパスの拡張子 (ピリオド "." を含む)。<paramref name="path" /> に拡張子情報が含まれていない場合は <see cref="P:System.ReadOnlySpan`1.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-312">The extension of the specified path (including the period, "."), or <see cref="P:System.ReadOnlySpan`1.Empty" /> if <paramref name="path" /> does not have extension information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a3d99-313">このメソッドの拡張機能を取得する`path`を検索して`path`期間 (".")、読み取り専用のスパンの最後の文字から開始し、最初の文字に向かって。</span><span class="sxs-lookup"><span data-stu-id="a3d99-313">This method obtains the extension of `path` by searching `path` for a period ("."), starting from the last character in the read-only span and continuing toward its first character.</span></span> <span data-ttu-id="a3d99-314">前にピリオドが見つかった場合、<xref:System.IO.Path.DirectorySeparatorChar>または<xref:System.IO.Path.AltDirectorySeparatorChar>文字、返される読み取り専用のスパン。 その後にピリオドと文字を含むそれ以外の場合、<xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>が返されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-314">If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned read-only span contains the period and the characters after it; otherwise, <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> is returned.</span></span>  

         ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-315">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-315">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static string GetExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetExtension : string -&gt; string" Usage="System.IO.Path.GetExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-316">拡張子の取得元のパス文字列。</span><span class="sxs-lookup"><span data-stu-id="a3d99-316">The path string from which to get the extension.</span></span></param>
        <summary><span data-ttu-id="a3d99-317">内線番号を返します (ピリオドを含む".") の指定したパス文字列。</span><span class="sxs-lookup"><span data-stu-id="a3d99-317">Returns the extension (including the period ".") of the specified path string.</span></span></summary>
        <returns><span data-ttu-id="a3d99-318">指定したパスの拡張子 (ピリオド "." を含む)、<see langword="null" />、または <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-318">The extension of the specified path (including the period "."), or <see langword="null" />, or <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="a3d99-319"><paramref name="path" /> が <see langword="null" /> の場合、<see cref="M:System.IO.Path.GetExtension(System.String)" /> は <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-319">If <paramref name="path" /> is <see langword="null" />, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see langword="null" />.</span></span> <span data-ttu-id="a3d99-320"><paramref name="path" /> が拡張子情報を持たない場合、<see cref="M:System.IO.Path.GetExtension(System.String)" /> は <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-320">If <paramref name="path" /> does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a3d99-321">このメソッドの拡張機能を取得する`path`を検索して`path`のピリオド (.)、最後の文字で始まる`path`先頭に向かってします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-321">This method obtains the extension of `path` by searching `path` for a period (.), starting with the last character in `path` and continuing toward the first character.</span></span> <span data-ttu-id="a3d99-322">前にピリオドが見つかった場合、<xref:System.IO.Path.DirectorySeparatorChar>または<xref:System.IO.Path.AltDirectorySeparatorChar>文字、返される文字列です。 その後にピリオドと文字を含むそれ以外の場合、<xref:System.String.Empty?displayProperty=nameWithType>が返されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-322">If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned string contains the period and the characters after it; otherwise, <xref:System.String.Empty?displayProperty=nameWithType> is returned.</span></span>  
  
 <span data-ttu-id="a3d99-323">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-323">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>
 
## Examples  
 <span data-ttu-id="a3d99-324">次の例を使用して、 `GetExtension` Windows ベースのデスクトップ プラットフォーム上のメソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-324">The following example demonstrates using the `GetExtension` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#4)]
 [!code-csharp[System.IO.Path Members#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#4)]
 [!code-vb[System.IO.Path Members#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-325"><paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-325"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-326">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-326">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-327">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-327">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-328">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-328">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-329">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-329">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetFileName (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetFileName(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetFileName(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetFileName : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetFileName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-330">ファイル名と拡張子の取得元のパスを含む読み取り専用の範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-330">A read-only span that contains the path from which to obtain the file name and extension.</span></span></param>
        <summary><span data-ttu-id="a3d99-331">読み取り専用の文字範囲で表されたファイル パスのファイル名と拡張子を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-331">Returns the file name and extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="a3d99-332"><paramref name="path" /> の最後のディレクトリ区切り文字の後の文字。</span><span class="sxs-lookup"><span data-stu-id="a3d99-332">The characters after the last directory separator character in <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a3d99-333">返される読み取り専用のスパンには最後の区切り記号に続くパスの文字が含まれています`path`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-333">The returned read-only span contains the characters of the path that follow the last separator in `path`.</span></span> <span data-ttu-id="a3d99-334">場合の最後の文字`path`ボリュームまたはディレクトリの区切り記号は、メソッドが返される<xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-334">If the last character in `path` is a volume or directory separator character, the method returns <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a3d99-335">場合`path`が含まれていない区切り記号の文字には返します`path`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-335">If `path` contains no separator character, the method returns `path`.</span></span>

         ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-336">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-336">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static string GetFileName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileName : string -&gt; string" Usage="System.IO.Path.GetFileName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-337">ファイル名と拡張子の取得元のパス文字列。</span><span class="sxs-lookup"><span data-stu-id="a3d99-337">The path string from which to obtain the file name and extension.</span></span></param>
        <summary><span data-ttu-id="a3d99-338">指定したパス文字列のファイル名と拡張子を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-338">Returns the file name and extension of the specified path string.</span></span></summary>
        <returns><span data-ttu-id="a3d99-339"><paramref name="path" /> の最後のディレクトリ区切り文字の後の文字。</span><span class="sxs-lookup"><span data-stu-id="a3d99-339">The characters after the last directory separator character in <paramref name="path" />.</span></span> <span data-ttu-id="a3d99-340"><paramref name="path" /> の最後の文字がディレクトリ区切り記号またはボリューム区切り記号の場合、このメソッドは <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-340">If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="a3d99-341"><paramref name="path" /> が <see langword="null" /> の場合、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-341">If <paramref name="path" /> is <see langword="null" />, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a3d99-342">返される値は`null`ファイル パスが場合`null`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-342">The returned value is `null` if the file path is `null`.</span></span>  
  
<span data-ttu-id="a3d99-343">ファイル名の先頭を判断するために使用する区切り文字は<xref:System.IO.Path.DirectorySeparatorChar>と<xref:System.IO.Path.AltDirectorySeparatorChar>します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-343">The separator characters used to determine the start of the file name are <xref:System.IO.Path.DirectorySeparatorChar> and <xref:System.IO.Path.AltDirectorySeparatorChar>.</span></span>  

<span data-ttu-id="a3d99-344">*\\* Unix では、有効なファイル名は、 `GetFileName` Unix ベースのプラットフォームで実行されているような Windows ベースのパスからファイル名を返すことはできません正しく*c:\\mydir\\myfile.ext*が`GetFileName`Windows ベースのプラットフォームで実行されているような Unix ベース パスからファイル名を返すことができます正しく */tmp/myfile.ext*ための動作、 `GetFileName`メソッドは厳密に Unix および Windows ベースのプラットフォームで同一にします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-344">Because *\\* is a legal file name on Unix, `GetFileName` running under Unix-based platforms cannot correctly return the file name from a Windows-based path like *C:\\mydir\\myfile.ext*, but `GetFileName` running under Windows-based platforms can correctly return the file name from a Unix-based path like */tmp/myfile.ext*, so the behavior of the `GetFileName` method is not strictly the same on Unix-based and Windows-based platforms.</span></span>

<span data-ttu-id="a3d99-345">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-345">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-346">次の例での動作、 `GetFileName` Windows ベースのデスクトップ プラットフォーム上のメソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-346">The following example demonstrates the behavior of the `GetFileName` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#5)]
 [!code-csharp[System.IO.Path Members#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#5)]
 [!code-vb[System.IO.Path Members#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-347"><paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-347"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-348">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-348">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-349">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-349">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-350">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-350">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-351">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-351">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetFileNameWithoutExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetFileNameWithoutExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileNameWithoutExtension (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetFileNameWithoutExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetFileNameWithoutExtension : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetFileNameWithoutExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-352">拡張子のないファイル名の取得元のパスを含む読み取り専用の範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-352">A read-only span that contains the path from which to obtain the file name without the extension.</span></span></param>
        <summary><span data-ttu-id="a3d99-353">読み取り専用の文字範囲で表されたファイル パスの拡張子のないファイル名を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-353">Returns the file name without the extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="a3d99-354"><see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> によって返された読み取り専用の範囲内の文字 (最後のピリオド (.) と、その後に続くすべての文字を除く)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-354">The characters in the read-only span returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-355">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-355">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static string GetFileNameWithoutExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileNameWithoutExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileNameWithoutExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileNameWithoutExtension (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileNameWithoutExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileNameWithoutExtension : string -&gt; string" Usage="System.IO.Path.GetFileNameWithoutExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-356">ファイルのパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-356">The path of the file.</span></span></param>
        <summary><span data-ttu-id="a3d99-357">指定したパス文字列のファイル名を拡張子を付けずに返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-357">Returns the file name of the specified path string without the extension.</span></span></summary>
        <returns><span data-ttu-id="a3d99-358"><see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> によって返された文字列 (最後のピリオド (.) と、その後ろのすべての文字を除く)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-358">The string returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-359">このメソッドは、パスまたはファイル名が存在することを検証しません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-359">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="a3d99-360">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-360">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-361">次の例を使用して、`GetFileNameWithoutExtension`メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-361">The following example demonstrates a use of the `GetFileNameWithoutExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#6)]
 [!code-csharp[System.IO.Path Members#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#6)]
 [!code-vb[System.IO.Path Members#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-362"><paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-362"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-363">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-363">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-364">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-364">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-365">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-365">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-366">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-366">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFullPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFullPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFullPath : string -&gt; string" Usage="System.IO.Path.GetFullPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-367">絶対パス情報を取得する対象のファイルまたはディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="a3d99-367">The file or directory for which to obtain absolute path information.</span></span></param>
        <summary><span data-ttu-id="a3d99-368">指定したパス文字列の絶対パスを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-368">Returns the absolute path for the specified path string.</span></span></summary>
        <returns><span data-ttu-id="a3d99-369">"C:\MyFile.txt" など、<paramref name="path" /> の完全修飾位置。</span><span class="sxs-lookup"><span data-stu-id="a3d99-369">The fully qualified location of <paramref name="path" />, such as "C:\MyFile.txt".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="a3d99-370">絶対パスには、システム上のファイルまたはディレクトリを検索するために必要なすべての情報が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-370">The absolute path includes all information required to locate a file or directory on a system.</span></span>  
  
 <span data-ttu-id="a3d99-371">ファイルまたはディレクトリで指定された`path`が存在する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-371">The file or directory specified by `path` is not required to exist.</span></span> <span data-ttu-id="a3d99-372">たとえば場合、 *c:\temp\newdir*は、現在のディレクトリを呼び出す`GetFullPath`などのファイル名を*test.txt*を返します*c:\temp\newdir\test.txt*します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-372">For example, if *c:\temp\newdir* is the current directory, calling `GetFullPath` on a file name such as *test.txt* returns *c:\temp\newdir\test.txt*.</span></span> <span data-ttu-id="a3d99-373">ファイルが存在しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-373">The file need not exist.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="a3d99-374">場合`path`は相対パスでは、このオーバー ロードがに基づいて、現在のドライブと現在のディレクトリは完全修飾パスを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-374">If `path` is a relative path, this overload returns a fully qualified path that can be based on the current drive and current directory.</span></span> <span data-ttu-id="a3d99-375">現在のドライブと現在のディレクトリは、アプリケーションの実行時にいつでも変更できます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-375">The current drive and current directory can change at any time as an application executes.</span></span> <span data-ttu-id="a3d99-376">その結果、このオーバー ロードによって返されるパスを事前に決定することはできません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-376">As a result, the path returned by this overload cannot be determined in advance.</span></span> <span data-ttu-id="a3d99-377">確定的なパスを返すを呼び出して、<xref:System.IO.Path.GetFullPath(System.String,System.String)>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-377">To return a deterministic path, call the <xref:System.IO.Path.GetFullPath(System.String,System.String)> overload.</span></span> <span data-ttu-id="a3d99-378">呼び出すこともできます、<xref:System.IO.Path.IsPathFullyQualified%2A>かどうか、パスが絶対または相対パスを決定する方法と、そのためへの呼び出しかどうか`GetFullPath`必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-378">You can also call the <xref:System.IO.Path.IsPathFullyQualified%2A> method to determine whether a path is fully qualified or relative and therefore whether a call to `GetFullPath` is necessary.</span></span>

 <span data-ttu-id="a3d99-379">ただし場合、`path`が存在し、呼び出し元のパス情報を取得するアクセス許可が必要`path`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-379">However, if `path` does exist, the caller must have permission to obtain path information for `path`.</span></span> <span data-ttu-id="a3d99-380">注意のほとんどのメンバーとは異なり、<xref:System.IO.Path>クラス、このメソッドは、ファイル システムにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-380">Note that unlike most members of the <xref:System.IO.Path> class, this method accesses the file system.</span></span>  
  
 <span data-ttu-id="a3d99-381">このメソッドは、現在のディレクトリと現在のボリューム情報を使用して、完全に修飾する`path`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-381">This method uses the current directory and current volume information to fully qualify `path`.</span></span> <span data-ttu-id="a3d99-382">ファイルを指定する場合のみで名前`path`、`GetFullPath`現在のディレクトリの完全修飾パスを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-382">If you specify a file name only in `path`, `GetFullPath` returns the fully qualified path of the current directory.</span></span>  
  
 <span data-ttu-id="a3d99-383">短いファイル名を渡す場合は、長いファイル名に展開されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-383">If you pass in a short file name, it is expanded to a long file name.</span></span>  
  
 <span data-ttu-id="a3d99-384">パスに有意文字が含まれていない場合は無効です 1 つ以上含まれている場合を除き、"."文字の後にスペース以外の任意の数いずれかとして解析されます。 その後"。"または".."。</span><span class="sxs-lookup"><span data-stu-id="a3d99-384">If a path contains no significant characters, it is invalid unless it contains one or more "." characters followed by any number of spaces; then it will be parsed as either "." or "..".</span></span>  

<span data-ttu-id="a3d99-385">.NET core 1.1 と以降のバージョンと .NET Framework 4.6.2 以降のバージョンなど、デバイス名を含むパスをサポートも"\\? \C:\"します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-385">.NET Core 1.1 and later versions and .NET Framework 4.6.2 and later versions also support paths that include device names, such as "\\?\C:\".</span></span>

<span data-ttu-id="a3d99-386">Windows 上のファイル パスの形式の詳細については、次を参照してください。[ファイル パスの形式の Windows システムで](~/docs/standard/io/file-path-formats.md)します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-386">For more information on file path formats on Windows, see [File path formats on Windows systems](~/docs/standard/io/file-path-formats.md).</span></span> <span data-ttu-id="a3d99-387">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-387">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>
  
## Examples  
 <span data-ttu-id="a3d99-388">次の例で、 `GetFullPath` Windows ベースのデスクトップ プラットフォーム上のメソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-388">The following example demonstrates the `GetFullPath` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#7)]
 [!code-csharp[System.IO.Path Members#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#7)]
 [!code-vb[System.IO.Path Members#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-389"><paramref name="path" /> が、長さが 0 の文字列であるか、空白しか含んでいないか、または <see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-389"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span>  
  
<span data-ttu-id="a3d99-390">- または -</span><span class="sxs-lookup"><span data-stu-id="a3d99-390">-or-</span></span> 
<span data-ttu-id="a3d99-391">システムが絶対パスを取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="a3d99-391">The system could not retrieve the absolute path.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="a3d99-392">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-392">The caller does not have the required permissions.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d99-393"><paramref name="path" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-393"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="a3d99-394"><paramref name="path" /> に、ボリュームの識別子 ("C:\\") の一部ではないコロン (:) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="a3d99-394"><paramref name="path" /> contains a colon (":") that is not part of a volume identifier (for example, "c:\\").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="a3d99-395">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</span><span class="sxs-lookup"><span data-stu-id="a3d99-395">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="a3d99-396">パスにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-396">for access to the path.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-397">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-397">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-398">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-398">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-399">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-399">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-400">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-400">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path, string basePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path, string basePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFullPath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullPath (path As String, basePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFullPath(System::String ^ path, System::String ^ basePath);" />
      <MemberSignature Language="F#" Value="static member GetFullPath : string * string -&gt; string" Usage="System.IO.Path.GetFullPath (path, basePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="basePath" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-401"><paramref name="basePath" /> に連結する相対パス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-401">A relative path to concatenate to <paramref name="basePath" />.</span></span></param>
        <param name="basePath"><span data-ttu-id="a3d99-402">完全修飾パスの先頭。</span><span class="sxs-lookup"><span data-stu-id="a3d99-402">The beginning of a fully qualified path.</span></span></param>
        <summary><span data-ttu-id="a3d99-403">完全修飾ベース パスと相対パスから絶対パスを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-403">Returns an absolute path from a fully qualified base path and a relative path.</span></span></summary>
        <returns><span data-ttu-id="a3d99-404">絶対パス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-404">The absolute path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a3d99-405">場合`path`空のパスは、メソッドが返される`basePath`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-405">If `path` is an empty path, the method returns `basePath`.</span></span> <span data-ttu-id="a3d99-406">場合`path`は完全修飾パスをメソッドが渡す`path`を<xref:System.IO.Path.GetFullPath(System.String)>メソッド結果を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-406">If `path` is a fully qualified path, the method passes `path` to the <xref:System.IO.Path.GetFullPath(System.String)> method and returns the result.</span></span>

<span data-ttu-id="a3d99-407">このメソッドを使用すると、確定的なパスが、指定されたボリュームに基づいており、相対パスを使用しているときに、ディレクトリをルートを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-407">Use this method to return a deterministic path based on a specified volume and rooted directory when you're using relative paths.</span></span> <span data-ttu-id="a3d99-408">事前に定義されたを使用して`basePath`ではなく、現在のドライブとディレクトリで予期しない変更による不要なファイル パスから現在のドライブ ディレクトリの保護に基づくいずれか。</span><span class="sxs-lookup"><span data-stu-id="a3d99-408">Using a predefined `basePath` rather than one based on the current drive directory guards against unwanted file paths caused by unexpected changes in the current drive and directory.</span></span> 

## <a name="example"></a><span data-ttu-id="a3d99-409">例</span><span class="sxs-lookup"><span data-stu-id="a3d99-409">Example</span></span>

<span data-ttu-id="a3d99-410">次の例では、変数、`basePath`アプリケーションの現在のディレクトリを表すため。</span><span class="sxs-lookup"><span data-stu-id="a3d99-410">The following example defines a variable, `basePath`, to represent an application's current directory.</span></span> <span data-ttu-id="a3d99-411">次に渡します、`GetFullPath`アプリケーションのデータ ディレクトリへの完全修飾パスを取得します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-411">It then passes it to the `GetFullPath` method to get a fully qualified path to the application's data directory.</span></span>

[!code-csharp[Path.GetFullPath(String,String)](~/samples/snippets/csharp/api/system.io/path/getfullpath/program.cs)] 
[!code-vb[Path.GetFullPath(String,String)](~/samples/snippets/visualbasic/api/system.io/path/getfullpath/program.vb)] 

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d99-412"><paramref name="path" /> または <paramref name="basePath" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-412"><paramref name="path" /> or <paramref name="basePath" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-413"><paramref name="basePath" /> が完全修飾パスではありません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-413"><paramref name="basePath" /> is not a fully qualified path.</span></span>

<span data-ttu-id="a3d99-414">- または -</span><span class="sxs-lookup"><span data-stu-id="a3d99-414">-or-</span></span>

<span data-ttu-id="a3d99-415"><paramref name="path" /> または <paramref name="basePath" /> に無効なパス文字 (U+0000 など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="a3d99-415"><paramref name="path" /> or <paramref name="basePath" /> contains invalid path characters, such as U+0000.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidFileNameChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidFileNameChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidFileNameChars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetInvalidFileNameChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInvalidFileNameChars () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ GetInvalidFileNameChars();" />
      <MemberSignature Language="F#" Value="static member GetInvalidFileNameChars : unit -&gt; char[]" Usage="System.IO.Path.GetInvalidFileNameChars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a3d99-416">ファイル名に使用できない文字を含む配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-416">Gets an array containing the characters that are not allowed in file names.</span></span></summary>
        <returns><span data-ttu-id="a3d99-417">ファイル名に使用できない文字を含む配列。</span><span class="sxs-lookup"><span data-stu-id="a3d99-417">An array containing the characters that are not allowed in file names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-418">このメソッドから返される配列は、ファイルとディレクトリ名に無効な文字の完全なセットを含むは保証されません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-418">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="a3d99-419">無効な文字の完全なセットは、ファイル システムによって異なることができます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-419">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="a3d99-420">たとえば、Windows ベースのデスクトップ プラットフォームに無効なパス文字可能性があります Ascii/unicode 文字 1 ~ 31、だけでなく引用符 (") より小さい (\<)、大なり (>)、パイプ (&#124;)、バック スペース (\b)、null (\0)、およびタブ (\t)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-420">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-421">次の例で、<xref:System.IO.Path.GetInvalidFileNameChars%2A>メソッドと<xref:System.IO.Path.GetInvalidPathChars%2A>無効な文字を取得します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-421">The following example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.</span></span>  
  
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]
 [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidPathChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidPathChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidPathChars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetInvalidPathChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInvalidPathChars () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ GetInvalidPathChars();" />
      <MemberSignature Language="F#" Value="static member GetInvalidPathChars : unit -&gt; char[]" Usage="System.IO.Path.GetInvalidPathChars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a3d99-422">パス名に使用できない文字を含む配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-422">Gets an array containing the characters that are not allowed in path names.</span></span></summary>
        <returns><span data-ttu-id="a3d99-423">パス名に使用できない文字を含む配列。</span><span class="sxs-lookup"><span data-stu-id="a3d99-423">An array containing the characters that are not allowed in path names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-424">このメソッドから返される配列は、ファイルとディレクトリ名に無効な文字の完全なセットを含むは保証されません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-424">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="a3d99-425">無効な文字の完全なセットは、ファイル システムによって異なることができます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-425">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="a3d99-426">たとえば、Windows ベースのデスクトップ プラットフォームに無効なパス文字可能性があります Ascii/unicode 文字 1 ~ 31、だけでなく引用符 (") より小さい (\<)、大なり (>)、パイプ (&#124;)、バック スペース (\b)、null (\0)、およびタブ (\t)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-426">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-427">次の例で、<xref:System.IO.Path.GetInvalidFileNameChars%2A>メソッドと<xref:System.IO.Path.GetInvalidPathChars%2A>無効な文字を取得します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-427">The following example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.</span></span>  
  
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]
 [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetPathRoot (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetPathRoot(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPathRoot (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetPathRoot(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetPathRoot : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetPathRoot path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-428">ルート ディレクトリ情報を取得する対象のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-428">The path from which to obtain root directory information.</span></span></param>
        <summary><span data-ttu-id="a3d99-429">指定した文字範囲に含まれるパスから、ルート ディレクトリ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-429">Gets the root directory information from the path contained in the specified character span.</span></span></summary>
        <returns><span data-ttu-id="a3d99-430">`path` のルート ディレクトリを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-430">A character span containing the root directory of `path`.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-431">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-431">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static string GetPathRoot (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPathRoot(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetPathRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPathRoot (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetPathRoot(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetPathRoot : string -&gt; string" Usage="System.IO.Path.GetPathRoot path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-432">ルート ディレクトリ情報を取得する対象のパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-432">The path from which to obtain root directory information.</span></span></param>
        <summary><span data-ttu-id="a3d99-433">指定したパスのルート ディレクトリ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-433">Gets the root directory information of the specified path.</span></span></summary>
        <returns><span data-ttu-id="a3d99-434"><paramref name="path" /> のルート ディレクトリ。<paramref name="path" /> が <see langword="null" /> の場合は <see langword="null" />。<paramref name="path" /> にルート ディレクトリ情報が含まれていない場合は空の文字列。</span><span class="sxs-lookup"><span data-stu-id="a3d99-434">The root directory of <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> is <see langword="null" />, or an empty string if <paramref name="path" /> does not contain root directory information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-435">このメソッドは、パスまたはファイル名が存在することを検証しません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-435">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="a3d99-436">このメソッドによって返される文字列のパターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-436">Possible patterns for the string returned by this method are as follows:</span></span>  
  
- <span data-ttu-id="a3d99-437">空の文字列 (`path`現在のドライブまたはボリューム上の相対パスを指定)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-437">An empty string (`path` specified a relative path on the current drive or volume).</span></span>  
  
- <span data-ttu-id="a3d99-438">"\" (`path`現在のドライブ上の絶対パスを指定)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-438">"\" (`path` specified an absolute path on the current drive).</span></span>  
  
- <span data-ttu-id="a3d99-439">"X": (`path`ドライブ、X がドライブまたはボリューム文字を表す相対パスを指定)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-439">"X:" (`path` specified a relative path on a drive, where X represents a drive or volume letter).</span></span>  
  
- <span data-ttu-id="a3d99-440">"X:\" (`path`特定のドライブで絶対パスを指定)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-440">"X:\" (`path` specified an absolute path on a given drive).</span></span>  
  
- <span data-ttu-id="a3d99-441">"\\\ComputerName\SharedFolder"(UNC パス)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-441">"\\\ComputerName\SharedFolder" (a UNC path).</span></span>  
  
- <span data-ttu-id="a3d99-442">"\\? \C:"(DOS デバイス パス、.NET Core 1.1 以降では、.NET Framework 4.6.2 以降でサポートされています)</span><span class="sxs-lookup"><span data-stu-id="a3d99-442">"\\?\C:" (a DOS device path, supported in .NET Core 1.1 and later versions and in .NET Framework 4.6.2 and later versions)</span></span>
   
 <span data-ttu-id="a3d99-443">Windows 上のファイル パスの詳細については、次を参照してください。[ファイル パスの形式の Windows システムで](~/docs/standard/io/file-path-formats.md)します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-443">For more information on file paths on Windows, see [File path formats on Windows systems](~/docs/standard/io/file-path-formats.md).</span></span> <span data-ttu-id="a3d99-444">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-444">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
## Examples  
 <span data-ttu-id="a3d99-445">次の例を使用して、`GetPathRoot`メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-445">The following example demonstrates a use of the `GetPathRoot` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#8)]
 [!code-csharp[System.IO.Path Members#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#8)]
 [!code-vb[System.IO.Path Members#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-446"><paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-446"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span>  
  
<span data-ttu-id="a3d99-447">- または -</span><span class="sxs-lookup"><span data-stu-id="a3d99-447">-or-</span></span> 
 <span data-ttu-id="a3d99-448"><see cref="F:System.String.Empty" /> が <paramref name="path" /> に渡されました。</span><span class="sxs-lookup"><span data-stu-id="a3d99-448"><see cref="F:System.String.Empty" /> was passed to <paramref name="path" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-449">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-449">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-450">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-450">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-451">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-451">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-452">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-452">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetRandomFileName">
      <MemberSignature Language="C#" Value="public static string GetRandomFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRandomFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetRandomFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRandomFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRandomFileName();" />
      <MemberSignature Language="F#" Value="static member GetRandomFileName : unit -&gt; string" Usage="System.IO.Path.GetRandomFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a3d99-453">ランダムなフォルダー名またはファイル名を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-453">Returns a random folder name or file name.</span></span></summary>
        <returns><span data-ttu-id="a3d99-454">ランダムなフォルダー名またはファイル名。</span><span class="sxs-lookup"><span data-stu-id="a3d99-454">A random folder name or file name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-455"><xref:System.IO.Path.GetRandomFileName%2A>メソッドは、フォルダー名またはファイル名のいずれかとして使用できる暗号強度が高い、ランダムな文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-455">The <xref:System.IO.Path.GetRandomFileName%2A> method returns a cryptographically strong, random string that can be used as either a folder name or a file name.</span></span> <span data-ttu-id="a3d99-456">異なり<xref:System.IO.Path.GetTempFileName%2A>、<xref:System.IO.Path.GetRandomFileName%2A>ファイルを作成できません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-456">Unlike <xref:System.IO.Path.GetTempFileName%2A>, <xref:System.IO.Path.GetRandomFileName%2A> does not create a file.</span></span> <span data-ttu-id="a3d99-457">代わりにこのメソッドを使用する必要があります、ファイル システムのセキュリティが最優先事項と、<xref:System.IO.Path.GetTempFileName%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-457">When the security of your file system is paramount, this method should be used instead of <xref:System.IO.Path.GetTempFileName%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-458">次の例からの出力を表示する、<xref:System.IO.Path.GetRandomFileName%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-458">The following example show output from the <xref:System.IO.Path.GetRandomFileName%2A> method.</span></span>  
  
 [!code-csharp[System.IO.Path Members#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers20.cs#20)]
 [!code-vb[System.IO.Path Members#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers20.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelativePath">
      <MemberSignature Language="C#" Value="public static string GetRelativePath (string relativeTo, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRelativePath(string relativeTo, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetRelativePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRelativePath (relativeTo As String, path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRelativePath(System::String ^ relativeTo, System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetRelativePath : string * string -&gt; string" Usage="System.IO.Path.GetRelativePath (relativeTo, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="relativeTo"><span data-ttu-id="a3d99-459">結果の基準となるソース パス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-459">The source path the result should be relative to.</span></span> <span data-ttu-id="a3d99-460">このパスは常にディレクトリと見なされます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-460">This path is always considered to be a directory.</span></span></param>
        <param name="path"><span data-ttu-id="a3d99-461">ターゲット パス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-461">The destination path.</span></span></param>
        <summary><span data-ttu-id="a3d99-462">あるパスから別のパスへの相対パスを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-462">Returns a relative path from one path to another.</span></span></summary>
        <returns><span data-ttu-id="a3d99-463">相対パス。パスが同じルートを共有していない場合は <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-463">The relative path, or <paramref name="path" /> if the paths don't share the same root.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a3d99-464">パスが呼び出すことによって解決される、<xref:System.IO.Path.GetFullPath%2A>差を計算する前にメソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-464">Paths are resolved by calling the <xref:System.IO.Path.GetFullPath%2A> method before calculating the difference.</span></span> <span data-ttu-id="a3d99-465">メソッドは、現在のプラットフォームの既定のファイル パスの比較を使用 (<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> Windows および MacOs での<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>for Linux。</span><span class="sxs-lookup"><span data-stu-id="a3d99-465">The method uses the default file path comparison for the current platform (<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> for Windows and MacOs, <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> for Linux.</span></span> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d99-466"><paramref name="relativeTo" /> または <paramref name="path" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-466"><paramref name="relativeTo" /> or <paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-467">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-467">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public static string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempFileName();" />
      <MemberSignature Language="F#" Value="static member GetTempFileName : unit -&gt; string" Usage="System.IO.Path.GetTempFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a3d99-468">一意な名前を持つ 0 バイトの一時ファイルをディスク上に作成し、そのファイルの完全パスを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-468">Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</span></span></summary>
        <returns><span data-ttu-id="a3d99-469">一時ファイルの完全パス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-469">The full path of the temporary file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-470">このメソッドは、「.TMP」という拡張子の一時ファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-470">This method creates a temporary file with a .TMP file extension.</span></span> <span data-ttu-id="a3d99-471">一時ファイルは、 <xref:System.IO.Path.GetTempPath%2A> メソッドによりパスを取得される、ユーザーの一時フォルダー内に作成されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-471">The temporary file is created within the user's temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method.</span></span>  
  
 <span data-ttu-id="a3d99-472"><xref:System.IO.Path.GetTempFileName%2A> メソッドは、以前の一時ファイルを削除することなく 65535 を超えるファイルを作成しようとした場合に、 <xref:System.IO.IOException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-472">The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if it is used to create more than 65535 files without deleting previous temporary files.</span></span>  
  
 <span data-ttu-id="a3d99-473"><xref:System.IO.Path.GetTempFileName%2A> メソッドが発生する <xref:System.IO.IOException> 一意の一時ファイル名が使用できない場合。</span><span class="sxs-lookup"><span data-stu-id="a3d99-473">The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if no unique temporary file name is available.</span></span> <span data-ttu-id="a3d99-474">このエラーを解決するには、不要な一時ファイルをすべて削除してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-474">To resolve this error, delete all unneeded temporary files.</span></span>  
  
 <span data-ttu-id="a3d99-475">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-475">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a3d99-476">I/O エラー（例：一意の一時ファイル名を取得できない）が発生しました</span><span class="sxs-lookup"><span data-stu-id="a3d99-476">An I/O error occurs, such as no unique temporary file name is available.</span></span>  
  
<span data-ttu-id="a3d99-477">- または -</span><span class="sxs-lookup"><span data-stu-id="a3d99-477">-or-</span></span> 
<span data-ttu-id="a3d99-478">あるいは、このメソッドで一時ファイルを作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="a3d99-478">This method was unable to create a temporary file.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="a3d99-479">一時フォルダーに書き込むために必要です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-479">for writing to the temporary directory.</span></span> <span data-ttu-id="a3d99-480">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></span><span class="sxs-lookup"><span data-stu-id="a3d99-480">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-481">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-481">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-482">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-482">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-483">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-483">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetTempPath">
      <MemberSignature Language="C#" Value="public static string GetTempPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetTempPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempPath();" />
      <MemberSignature Language="F#" Value="static member GetTempPath : unit -&gt; string" Usage="System.IO.Path.GetTempPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a3d99-484">現在のユーザーの一時フォルダーのパスを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-484">Returns the path of the current user's temporary folder.</span></span></summary>
        <returns><span data-ttu-id="a3d99-485">一時フォルダーのパス。バックスラッシュで終わります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-485">The path to the temporary folder, ending with a backslash.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-486">このメソッドは、次の順序で環境変数の存在を確認し、最初に見つかったパスを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-486">This method checks for the existence of environment variables in the following order and uses the first path found:</span></span>  
  
1.  <span data-ttu-id="a3d99-487">TMP 環境変数で指定されたパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-487">The path specified by the TMP environment variable.</span></span>  
  
2.  <span data-ttu-id="a3d99-488">TEMP 環境変数で指定されたパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-488">The path specified by the TEMP environment variable.</span></span>  
  
3.  <span data-ttu-id="a3d99-489">%USERPROFILE% 環境変数で指定されたパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-489">The path specified by the USERPROFILE environment variable.</span></span>  
  
4.  <span data-ttu-id="a3d99-490">Windows ディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="a3d99-490">The Windows directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-491"><xref:System.IO.Path.GetTempPath%2A> メソッドを呼び出す方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-491">The following code shows how to call the <xref:System.IO.Path.GetTempPath%2A> method.</span></span>  
  
```vb  
result As String = Path.GetTempPath()  
Console.WriteLine(result)  
```  
  
```csharp  
string result = Path.GetTempPath();  
Console.WriteLine(result);  
```  
  
 <span data-ttu-id="a3d99-492">この例では、次のような出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-492">This example produces output similar to the following.</span></span>  
  
```  
C:\Users\UserName\AppData\Local\Temp\  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="a3d99-493">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-493">The caller does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="a3d99-494">環境変数への無制限のアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a3d99-494">for unrestricted access to environment variables.</span></span> <span data-ttu-id="a3d99-495">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="a3d99-495">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-496">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-496">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-497">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-497">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-498">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-498">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasExtension (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool HasExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member HasExtension : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.HasExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-499">拡張子を検索するパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-499">The path to search for an extension.</span></span></param>
        <summary><span data-ttu-id="a3d99-500">指定された文字範囲で表されたパスにファイル名拡張子が含まれているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-500">Determines whether the path represented by the specified character span includes a file name extension.</span></span></summary>
        <returns><span data-ttu-id="a3d99-501">パスの最後のディレクトリ区切り文字またはボリューム区切り記号の後に続く文字にピリオド (".") が含まれ、その後に 1 つ以上の文字が続く場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-501"><see langword="true" /> if the characters that follow the last directory separator character or volume separator in the path include a period (".") followed by one or more characters; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a3d99-502">末尾のピリオド`path`拡張機能とは見なされません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-502">A trailing period in `path` is not considered an extension.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-503">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-503">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.HasExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasExtension (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool HasExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member HasExtension : string -&gt; bool" Usage="System.IO.Path.HasExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-504">拡張子を検索するパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-504">The path to search for an extension.</span></span></param>
        <summary><span data-ttu-id="a3d99-505">パスにファイル名の拡張子が含まれているか判定します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-505">Determines whether a path includes a file name extension.</span></span></summary>
        <returns><span data-ttu-id="a3d99-506">パスの最後のディレクトリ区切り記号 (\\\ または /) またはボリューム区切り記号 (:) の後に続く文字にピリオド (.) が含まれ、その後に 1 つ以上の文字が続く場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-506"><see langword="true" /> if the characters that follow the last directory separator (\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-507">末尾から開始`path`、このメソッドは、少なくとも 1 つの文字が続くピリオド (.) を検索します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-507">Starting from the end of `path`, this method searches for a period (.) followed by at least one character.</span></span> <span data-ttu-id="a3d99-508">前にこのパターンが見つかった場合、 <xref:System.IO.Path.DirectorySeparatorChar>、 <xref:System.IO.Path.AltDirectorySeparatorChar>、または<xref:System.IO.Path.VolumeSeparatorChar>文字が検出されると、このメソッドが戻る`true`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-508">If this pattern is found before a <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar> character is encountered, this method returns `true`.</span></span>  
  
 <span data-ttu-id="a3d99-509">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-509">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-510">`HasExtension` メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-510">The following example demonstrates the use of the `HasExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#11)]
 [!code-csharp[System.IO.Path Members#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#11)]
 [!code-vb[System.IO.Path Members#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-511"><paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-511"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-512">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-512">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-513">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-513">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-514">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-514">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-515">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-515">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InvalidPathChars">
      <MemberSignature Language="C#" Value="public static readonly char[] InvalidPathChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char[] InvalidPathChars" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.InvalidPathChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvalidPathChars As Char() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;char&gt; ^ InvalidPathChars;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidPathChars : char[]" Usage="System.IO.Path.InvalidPathChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("see GetInvalidPathChars and GetInvalidFileNameChars methods.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Please use GetInvalidPathChars or GetInvalidFileNameChars instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a3d99-516"><see cref="T:System.IO.Path" /> クラスのメンバーに渡されるパス文字列引数で指定できないプラットフォーム固有の文字配列を提供します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-516">Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-517">このメソッドから返される配列は、ファイルとディレクトリ名に無効な文字の完全なセットを含むは保証されません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-517">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="a3d99-518">無効な文字の完全なセットは、ファイル システムによって異なることができます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-518">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="a3d99-519">たとえば、Windows ベースのデスクトップ プラットフォームに無効なパス文字可能性があります Ascii/unicode 文字 1 ~ 31、だけでなく引用符 (") より小さい (\<)、大なり (>)、パイプ (&#124;)、バック スペース (\b)、null (\0)、およびタブ (\t)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-519">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a3d99-520">使用しない<xref:System.IO.Path.InvalidPathChars>信頼できないコードと同じアプリケーション ドメインでコードを実行すると思われる場合。</span><span class="sxs-lookup"><span data-stu-id="a3d99-520">Do not use <xref:System.IO.Path.InvalidPathChars> if you think your code might execute in the same application domain as untrusted code.</span></span> <span data-ttu-id="a3d99-521"><xref:System.IO.Path.InvalidPathChars> その要素を上書きできるように、配列、です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-521"><xref:System.IO.Path.InvalidPathChars> is an array, so its elements can be overwritten.</span></span> <span data-ttu-id="a3d99-522">信頼できないコードの要素を上書きする場合<xref:System.IO.Path.InvalidPathChars>コードが悪用される可能性の方法で正しく機能しなくなる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-522">If untrusted code overwrites elements of <xref:System.IO.Path.InvalidPathChars>, it might cause your code to malfunction in ways that could be exploited.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-523">次の例では、使用、`InvalidPathChars`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="a3d99-523">The following example demonstrates the use of the `InvalidPathChars` property.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-524">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-524">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-525">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-525">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-526">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-526">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPathFullyQualified">
      <Docs>
        <summary><span data-ttu-id="a3d99-527">ファイル パスが完全修飾されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-527">Returns a value that indicates whether a file path is fully qualified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="a3d99-528">オーバー ロード、`IsPathFullyQualified`両方を使用してメソッド ハンドルのパス、<xref:System.IO.Path.DirectorySeparatorChar>と<xref:System.IO.Path.AltDirectorySeparatorChar>文字。</span><span class="sxs-lookup"><span data-stu-id="a3d99-528">The overloads of the `IsPathFullyQualified` method handle paths that use both the <xref:System.IO.Path.DirectorySeparatorChar> and the <xref:System.IO.Path.AltDirectorySeparatorChar> characters.</span></span> <span data-ttu-id="a3d99-529">パスを引数として渡されたにも、検証も行われません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-529">It does not perform any validation on the path that is passed to it as an argument.</span></span> <span data-ttu-id="a3d99-530">その結果、Uri は相対パスとして解釈され、返す`false`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-530">As a result, URIs are interpreted as relative paths and return `false`.</span></span> 

<span data-ttu-id="a3d99-531">完全修飾パスの間に相違がある (によって示される、`IsPathFullyQualified`メソッド) とルートのパス (によって示される、<xref:System.IO.Path.IsPathRooted%2A>メソッド)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-531">There is a difference between a fully qualified path (as indicated by the `IsPathFullyQualified` method) and a rooted path (as indicated by the <xref:System.IO.Path.IsPathRooted%2A> method).</span></span> <span data-ttu-id="a3d99-532">A*の完全修飾パス*または*絶対パス*常に、特定のドライブまたはデバイスから、ターゲット ファイルまたはディレクトリへの正確なパスを定義し、現在のドライブまたは現在のディレクトリに依存しません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-532">A *fully qualified path* or *absolute path* always defines an exact path from a particular drive or device to a target file or directory, and does not depend on the current drive or current directory.</span></span> <span data-ttu-id="a3d99-533">たとえば、Windows システムで*C:/users/user1/documents/reports/2019/january/highlights.pdf* c: ドライブのルートから、ターゲット ファイルへの絶対パスを定義します。 *highlights.pdf*します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-533">For example, on Windows systems, *C:/users/user1/documents/reports/2019/january/highlights.pdf* defines an absolute path from the root of the C: drive to the target file, *highlights.pdf*.</span></span> <span data-ttu-id="a3d99-534">A*ルートされたパスを*開始ドライブまたはルート ディレクトリのいずれかを指定しますが、(ルート ディレクトリをルートとなる) の場合は、(指定したドライブをルートとなる) の場合は、現在のディレクトリまたは現在のドライブのいずれかに依存します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-534">A *rooted path* specifies either a starting drive or root directory, but depends on either the current directory (if it is rooted by a specified drive) or the current drive (if it is rooted by the root directory).</span></span> <span data-ttu-id="a3d99-535">次の例は、完全修飾パスおよびルート化されたパスの違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="a3d99-535">The following example illustrates the difference between fully qualified paths and rooted paths.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/IsPathRooted/program.cs)]
[!code-vb[IsPathRooted](~/samples/snippets/visualbasic/api/system.IO/Path/IsPathRooted/program.vb)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPathFullyQualified">
      <MemberSignature Language="C#" Value="public static bool IsPathFullyQualified (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathFullyQualified(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathFullyQualified (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathFullyQualified(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member IsPathFullyQualified : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.IsPathFullyQualified path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-536">ファイル パス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-536">A file path.</span></span></param>
        <summary><span data-ttu-id="a3d99-537">指定された文字範囲で表されたファイル パスが、特定のドライブまたは UNC パスに固定されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-537">Returns a value that indicates whether the file path represented by the specified character span is fixed to a specific drive or UNC path.</span></span></summary>
        <returns><span data-ttu-id="a3d99-538">パスが特定のドライブまたは UNC パスに固定されている場合は <see langword="true" />。パスが現在のドライブまたは作業ディレクトリを基準としている場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-538"><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  


         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-539">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-539">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsPathFullyQualified">
      <MemberSignature Language="C#" Value="public static bool IsPathFullyQualified (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathFullyQualified(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathFullyQualified(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathFullyQualified (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathFullyQualified(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member IsPathFullyQualified : string -&gt; bool" Usage="System.IO.Path.IsPathFullyQualified path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-540">ファイル パス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-540">A file path.</span></span></param>
        <summary><span data-ttu-id="a3d99-541">指定されたファイル パスが特定のドライブまたは UNC パスに固定されているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-541">Returns a value that indicates whether the specified file path is fixed to a specific drive or UNC path.</span></span></summary>
        <returns><span data-ttu-id="a3d99-542">パスが特定のドライブまたは UNC パスに固定されている場合は <see langword="true" />。パスが現在のドライブまたは作業ディレクトリを基準としている場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-542"><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a3d99-543"><paramref name="path" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-543"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-544">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-544">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPathRooted">
      <Docs>
        <summary><span data-ttu-id="a3d99-545">ファイル パスにルートが含まれているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-545">Returns a value that indicates whether a file path contains a root.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="a3d99-546">A**ルート パス**ファイルのパスは、特定のドライブまたは UNIC パスに固定されている; 現在のドライブまたは作業ディレクトリに対して相対的なパスとは対照的です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-546">A **rooted path** is file path that is fixed to a specific drive or UNIC path; it contrasts with a path that is relative to the current drive or working directory.</span></span> <span data-ttu-id="a3d99-547">たとえば、Windows システムは、円記号 (たとえば、"\Documents") またはドライブ文字とコロン (たとえば、"C:Documents") を使用にはルートされたパスが開始します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-547">For example, on Windows systems, a rooted path begins with a backslash (for example, "\Documents") or a drive letter and colon (for example, "C:Documents").</span></span> 

<span data-ttu-id="a3d99-548">ルート パスできること (つまり、完全修飾) 絶対パスまたは相対パスのいずれかに注意してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-548">Note that rooted paths can be either absolute (that is, fully qualified) or relative.</span></span> <span data-ttu-id="a3d99-549">ルートの絶対パスは、特定のディレクトリに、ドライブのルートからの完全修飾パスです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-549">An absolute rooted path is a fully qualified path from the root of a drive to a specific directory.</span></span> <span data-ttu-id="a3d99-550">ルートからの相対パスが、ドライブを指定しますが、その完全修飾パスは、現在のディレクトリに対して解決されます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-550">A relative rooted path specifies a drive, but its fully qualified path is resolved against the current directory.</span></span> <span data-ttu-id="a3d99-551">この違いを次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-551">The following example illustrates the difference.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/IsPathRooted/program.cs)]
[!code-vb[IsPathRooted](~/samples/snippets/visualbasic/api/system.IO/Path/IsPathRooted/program.vb)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathRooted (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathRooted(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member IsPathRooted : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.IsPathRooted path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-552">テストするパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-552">The path to test.</span></span></param>
        <summary><span data-ttu-id="a3d99-553">ファイル パスを表す指定された文字範囲にルートが含まれているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-553">Returns a value that indicates whether the specified character span that represents a file path contains a root.</span></span></summary>
        <returns><span data-ttu-id="a3d99-554"><paramref name="path" /> にルートが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-554"><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-555">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-555">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathRooted(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathRooted (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathRooted(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member IsPathRooted : string -&gt; bool" Usage="System.IO.Path.IsPathRooted path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="a3d99-556">テストするパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-556">The path to test.</span></span></param>
        <summary><span data-ttu-id="a3d99-557">指定されたパス文字列にルートが含まれているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-557">Returns a value indicating whether the specified path string contains a root.</span></span></summary>
        <returns><span data-ttu-id="a3d99-558"><paramref name="path" /> にルートが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-558"><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-559"><xref:System.IO.Path.IsPathRooted%2A>メソッドを返します。`true`最初の文字など、ディレクトリの区切り記号をが場合"\\"、またはパスがドライブ文字とコロン (:) で始まる場合。</span><span class="sxs-lookup"><span data-stu-id="a3d99-559">The <xref:System.IO.Path.IsPathRooted%2A> method returns `true` if the first character is a directory separator character such as "\\", or if the path starts with a drive letter and colon (:).</span></span> <span data-ttu-id="a3d99-560">たとえばを返します`true`の`path`などの文字列"\\\MyDir\\\MyFile.txt"、"c:\\\MyDir"、または"C:MyDir"。</span><span class="sxs-lookup"><span data-stu-id="a3d99-560">For example, it returns `true` for `path` strings such as "\\\MyDir\\\MyFile.txt", "C:\\\MyDir", or "C:MyDir".</span></span> <span data-ttu-id="a3d99-561">返します`false`の`path`MyDir というなどの文字列。</span><span class="sxs-lookup"><span data-stu-id="a3d99-561">It returns `false` for `path` strings such as "MyDir".</span></span>  
  
 <span data-ttu-id="a3d99-562">このメソッドは、パスまたはファイル名が存在することを検証しません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-562">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="a3d99-563">共通 I/O タスクの一覧は、 [共通 I/O タスク](~/docs/standard/io/common-i-o-tasks.md) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a3d99-563">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  

## Examples  
 <span data-ttu-id="a3d99-564">例を次に示しますが、どのように`IsPathRooted`メソッドを使用して、3 つの文字列をテストします。</span><span class="sxs-lookup"><span data-stu-id="a3d99-564">The following example demonstrates how the `IsPathRooted` method can be used to test three strings.</span></span>  
  
 [!code-cpp[System.IO.Path Members#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#12)]
 [!code-csharp[System.IO.Path Members#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#12)]
 [!code-vb[System.IO.Path Members#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a3d99-565"><paramref name="path" /> が、<see cref="M:System.IO.Path.GetInvalidPathChars" /> で定義されている無効な文字を 1 つ以上含んでいます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-565"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-566">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-566">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-567">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-567">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-568">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-568">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-569">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-569">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="a3d99-570">結合する最初のパスを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-570">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="a3d99-571">結合する 2 番目のパスを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-571">A character span that contains the second path to join.</span></span></param>
        <summary><span data-ttu-id="a3d99-572">2 つのパス コンポーネントを単一のパスに連結します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-572">Concatenates two path components into a single path.</span></span></summary>
        <returns><span data-ttu-id="a3d99-573">結合されたパス。</span><span class="sxs-lookup"><span data-stu-id="a3d99-573">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="a3d99-574">このメソッドは単に連結`path`と`path2`の最後に存在する 1 つがない場合は、2 つのパス コンポーネント間のディレクトリの区切り記号を追加します`path1`の先頭または`path2`します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-574">This method simply concatenates `path` and `path2` and adds a directory separator character between the two path components if one is not already present at the end of `path1` or the beginning of `path2`.</span></span> <span data-ttu-id="a3d99-575">場合、<xref:System.ReadOnlySpan%601.Length>いずれかの`path1`または`path2`0 の場合は、その他のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-575">If the <xref:System.ReadOnlySpan%601.Length> of either `path1` or `path2` is zero, the method returns the other path.</span></span> <span data-ttu-id="a3d99-576">場合、<xref:System.ReadOnlySpan%601.Length>両方の`path1`と`path2`0 の場合は、メソッドが返される<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-576">If the <xref:System.ReadOnlySpan%601.Length> of both `path1` and `path2` is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> 

<span data-ttu-id="a3d99-577">場合`path1`、ターゲット プラットフォームに対して適切でないパスの区切り文字で終わる、`Join`メソッドは、元のパスの区切り文字を保持し、サポートされている 1 つを追加します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-577">If `path1` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="a3d99-578">この問題は、Windows の円記号を使用するハード コードされたパスで発生 ("\") 文字で、Unix ベースのシステムで、パスの区切り文字として認識されていません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-578">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="a3d99-579">この問題を回避するには、次の操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-579">To work around this issue, you can:</span></span>

- <span data-ttu-id="a3d99-580">値を取得、<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>ディレクトリの区切り記号をハード コーディングするのではなく、プロパティ。</span><span class="sxs-lookup"><span data-stu-id="a3d99-580">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="a3d99-581">ディレクトリの区切り記号としてスラッシュ (「/」) を使用します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-581">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="a3d99-582">この文字は、によって返される、 <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> Unix ベースのシステムと、プロパティ、 <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> Windows システムのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="a3d99-582">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span> 

<span data-ttu-id="a3d99-583">異なり、<xref:System.IO.Path.Combine%2A>メソッド、<xref:System.IO.Path.Join%2A>メソッドが返されるパスのルートを試行しません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-583">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="a3d99-584">(場合に、 `path2` 、絶対パス、`Join`メソッドを破棄しません`path1`戻って`path2`として、<xref:System.IO.Path.Combine%2A>メソッドはします)。次の例は、2 つのメソッドによって返されるパスの違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="a3d99-584">(That is, if `path2` is an absolute path, the `Join` method does not discard `path1` and return `path2` as the <xref:System.IO.Path.Combine%2A> method does.) The following example illustrates the difference in the paths returned by the two methods.</span></span> <span data-ttu-id="a3d99-585">場合のソース`path2`は、ユーザー入力、<xref:System.IO.Path.Combine%2A>メソッドでは、ユーザーはファイル システム リソースにアクセスする (など*c:/ユーザー/User1/ドキュメント/金融/* 例の場合)、アプリケーションを実行します。アクセスできるようにする予定がないです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-585">If the source of `path2` is user input, the <xref:System.IO.Path.Combine%2A> method makes it possible for a user to access a file system resource (such as *C:/Users/User1/Documents/Financial/* in the case of the example) that the application did not intend to make accessible.</span></span>  

<span data-ttu-id="a3d99-586">ディレクトリとファイル名のすべての無効な文字はによって許容として解釈されます、`Join`メソッドでは、これらの文字を使用するにはワイルドカード文字の検索のためです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-586">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="a3d99-587">たとえば、`Path.Join("c:\\", "*.txt")`可能性がありますが無効な場合にファイルを作成するが検索文字列として有効です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-587">For example, while `Path.Join("c:\\", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="a3d99-588">`Join`メソッドのため正常にそれを解釈します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-588">The `Join` method therefore successfully interprets it.</span></span> 

## <a name="example"></a><span data-ttu-id="a3d99-589">例</span><span class="sxs-lookup"><span data-stu-id="a3d99-589">Example</span></span>

<span data-ttu-id="a3d99-590">次の例から返されるパスの違いを示しています、<xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType>と<xref:System.IO.Path.Combine(System.String,System.String)?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-590">The following example illustrates the difference in the paths returned by the <xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType> and <xref:System.IO.Path.Combine(System.String,System.String)?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="a3d99-591">最初の文字列はドライブとルート ディレクトリを含む、完全修飾パスと、2 番目は最初のパスからの相対パス、2 つのメソッドは、同一の結果を生成します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-591">When the first string is an fully qualified path that includes a drive and root directory and the second is a relative path from the first path, the two methods produce identical results.</span></span> <span data-ttu-id="a3d99-592">2 番目と 3 番目の呼び出しで、`ShowPathInformation`メソッド、2 つのメソッドによって返される文字列が分岐します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-592">In the second and third calls to the `ShowPathInformation` method, the strings returned by the two methods diverge.</span></span> <span data-ttu-id="a3d99-593">2 番目のメソッド呼び出しの最初の文字列引数は、ドライブを 2 つ目はルート ディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="a3d99-593">In the second method call, the first string argument is a drive, while the second is a rooted directory.</span></span> <span data-ttu-id="a3d99-594">`Join`メソッドは、2 つの文字列を連結および維持には、パスの区切り記号が重複しています。</span><span class="sxs-lookup"><span data-stu-id="a3d99-594">The `Join` method concatenates the two strings and preserves duplicate path separators.</span></span> <span data-ttu-id="a3d99-595">`Combine`メソッドは、ドライブを破棄し、現在のドライブのルート ディレクトリを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-595">The `Combine` method abandons the drive and returns a rooted directory on the current drive.</span></span> <span data-ttu-id="a3d99-596">アプリケーションの現在のドライブは C:\ 場合文字列は、ファイルまたはディレクトリ内のファイルへのアクセスに使用されます、c: d: の代わりにアクセスすることです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-596">If the application's current drive is C:\ and the string is used to access a file or files in the directory, it would access C: instead of D:.</span></span> <span data-ttu-id="a3d99-597">最後に、ため、両方の引数を 3 回目の呼び出しで`ShowPathInformation`ルートが、`Join`メソッド、単にそれを追加無意味なファイル パスを作成するときに、`Combine`メソッドは、最初の文字列を破棄し、秒を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-597">Finally, because both arguments in the third call to `ShowPathInformation` are rooted, the `Join` method simply appends them to create a nonsensical file path, while the `Combine` method discards the first string and returns the second.</span></span> <span data-ttu-id="a3d99-598">この文字列を使用してファイルへのアクセスを使用すれば、アプリケーションの機密性の高いファイルへの意図しません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-598">Using this string for file access could give the application unintended access to sensitive files.</span></span>  

[!code-csharp[Path.Join(String,String)](~/samples/snippets/csharp/api/system.io/path/combine2/program.cs)]
[!code-csharp[Path.Join(String,String)](~/samples/snippets/visualbasic/api/system.io/path/combine2/program.vb)]


       ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-599">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-599">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string path1, string path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2);" />
      <MemberSignature Language="F#" Value="static member Join : string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path1">To be added.</param>
        <param name="path2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="a3d99-600">結合する最初のパスを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-600">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="a3d99-601">結合する 2 番目のパスを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-601">A character span that contains the second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="a3d99-602">結合する 3 番目のパスを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-602">A character span that contains the third path to join.</span></span></param>
        <summary><span data-ttu-id="a3d99-603">3 つのパス コンポーネントを単一のパスに連結します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-603">Concatenates three path components into a single path.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="a3d99-604">このメソッドは単に連結`path`、 `path2`、および`path3`し 1 つが存在しない場合は、パス コンポーネントのいずれかの間でディレクトリの区切り記号を追加します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-604">This method simply concatenates `path`, `path2`, and `path3` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="a3d99-605">場合、<xref:System.ReadOnlySpan%601.Length>のいずれかの`path1`、 `path2`、または`path3`引数が 0 で、メソッドは、残りの引数を連結します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-605">If the <xref:System.ReadOnlySpan%601.Length> of any of `path1`, `path2`, or `path3` argument is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="a3d99-606">場合、<xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType>のすべてのコンポーネントが 0 の場合、メソッドを返します<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-606">If the <xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType> of all components is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>    

<span data-ttu-id="a3d99-607">場合`path1`または`path2`、ターゲット プラットフォームに対して適切でないパスの区切り文字で終わる、`Join`メソッドは、元のパスの区切り文字を保持し、サポートされている 1 つを追加します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-607">If `path1` or `path2` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="a3d99-608">この問題は、Windows の円記号を使用するハード コードされたパスで発生 ("\") 文字で、Unix ベースのシステムで、パスの区切り文字として認識されていません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-608">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="a3d99-609">この問題を回避するには、次の操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-609">To work around this issue, you can:</span></span>

- <span data-ttu-id="a3d99-610">値を取得、<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>ディレクトリの区切り記号をハード コーディングするのではなく、プロパティ。</span><span class="sxs-lookup"><span data-stu-id="a3d99-610">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="a3d99-611">ディレクトリの区切り記号としてスラッシュ (「/」) を使用します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-611">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="a3d99-612">この文字は、によって返される、 <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> Unix ベースのシステムと、プロパティ、 <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> Windows システムのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="a3d99-612">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span> 

<span data-ttu-id="a3d99-613">異なり、<xref:System.IO.Path.Combine%2A>メソッド、<xref:System.IO.Path.Join%2A>メソッドが返されるパスのルートを試行しません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-613">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="a3d99-614">(場合に、`path2`または`path2`、絶対パス、`Join`メソッドとして前のパスを破棄しません、<xref:System.IO.Path.Combine%2A>メソッドでは。</span><span class="sxs-lookup"><span data-stu-id="a3d99-614">(That is, if `path2` or `path2` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>  
  
<span data-ttu-id="a3d99-615">ディレクトリとファイル名のすべての無効な文字はによって許容として解釈されます、`Join`メソッドでは、これらの文字を使用するにはワイルドカード文字の検索のためです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-615">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="a3d99-616">たとえば、`Path.Join("c:\\", "temp", "*.txt")`可能性がありますが無効な場合にファイルを作成するが検索文字列として有効です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-616">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="a3d99-617">`Join`メソッドのため正常にそれを解釈します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-617">The `Join` method therefore successfully interprets it.</span></span> 

## <a name="example"></a><span data-ttu-id="a3d99-618">例</span><span class="sxs-lookup"><span data-stu-id="a3d99-618">Example</span></span>

<span data-ttu-id="a3d99-619">次の例から返されるパスの違いを示しています、<xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType>と<xref:System.IO.Path.Combine(System.String,System.String,System.String)?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-619">The following example illustrates the difference in the paths returned by the <xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType> and <xref:System.IO.Path.Combine(System.String,System.String,System.String)?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="a3d99-620">最初の文字列はドライブとルート ディレクトリを含む、完全修飾パスと、2 番目は最初のパスからの相対パス、2 つのメソッドは、同一の結果を生成します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-620">When the first string is an fully qualified path that includes a drive and root directory and the second is a relative path from the first path, the two methods produce identical results.</span></span> <span data-ttu-id="a3d99-621">2 番目と 3 番目の呼び出しで、`ShowPathInformation`メソッド、2 つのメソッドによって返される文字列が分岐します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-621">In the second and third calls to the `ShowPathInformation` method, the strings returned by the two methods diverge.</span></span> <span data-ttu-id="a3d99-622">2 番目のメソッド呼び出しの最初の文字列引数は、ドライブを 2 つ目はルート ディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="a3d99-622">In the second method call, the first string argument is a drive, while the second is a rooted directory.</span></span> <span data-ttu-id="a3d99-623">`Join`メソッドは、2 つの文字列を連結および維持には、パスの区切り記号が重複しています。</span><span class="sxs-lookup"><span data-stu-id="a3d99-623">The `Join` method concatenates the two strings and preserves duplicate path separators.</span></span> <span data-ttu-id="a3d99-624">呼び出し、<xref:System.IO.Path.GetFullPath%2A>メソッドは、重複を排除します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-624">A call to the <xref:System.IO.Path.GetFullPath%2A> method would eliminate the duplication.</span></span> <span data-ttu-id="a3d99-625">`Combine`メソッドは、ドライブを破棄し、現在のドライブのルート ディレクトリを返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-625">The `Combine` method abandons the drive and returns a rooted directory on the current drive.</span></span> <span data-ttu-id="a3d99-626">アプリケーションの現在のドライブは C:\ 場合文字列は、ファイルまたはディレクトリ内のファイルへのアクセスに使用されます、c: d: の代わりにアクセスすることです。</span><span class="sxs-lookup"><span data-stu-id="a3d99-626">If the application's current drive is C:\ and the string is used to access a file or files in the directory, it would access C: instead of D:.</span></span> <span data-ttu-id="a3d99-627">最後に、ため、3 番目の呼び出しで最後の引数`ShowPathInformation`ルートが、`Join`メソッドだけに追加、無意味なファイル パスを作成する最初の 2 つの引数間、`Combine`メソッドは、最初の 2 つの文字列を破棄し、返します3 番目です。</span><span class="sxs-lookup"><span data-stu-id="a3d99-627">Finally, because the final argument in the third call to `ShowPathInformation` are rooted, the `Join` method simply appends it to the first two arguments to create a nonsensical file path, while the `Combine` method discards the first two strings and returns the third.</span></span> <span data-ttu-id="a3d99-628">この文字列を使用してファイルへのアクセスを使用すれば、アプリケーションの機密性の高いファイルへの意図しません。</span><span class="sxs-lookup"><span data-stu-id="a3d99-628">Using this string for file access could give the application unintended access to sensitive files.</span></span>  

[!code-csharp[Path.Join(String,String,String)](~/samples/snippets/csharp/api/system.io/path/combine3/program.cs)] 
[!code-csharp[Path.Join(String,String,String)](~/samples/snippets/visualbasic/api/system.io/path/combine3/program.vb)] 

       ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-629">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-629">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string path1, string path2, string path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2, string path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String, path3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2, System::String ^ path3);" />
      <MemberSignature Language="F#" Value="static member Join : string * string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path1">To be added.</param>
        <param name="path2">To be added.</param>
        <param name="path3">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathSeparator">
      <MemberSignature Language="C#" Value="public static readonly char PathSeparator;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char PathSeparator" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.PathSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PathSeparator As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char PathSeparator;" />
      <MemberSignature Language="F#" Value=" staticval mutable PathSeparator : char" Usage="System.IO.Path.PathSeparator" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a3d99-630">環境変数のパス文字列を区切るために使用するプラットフォーム固有の区切り記号。</span><span class="sxs-lookup"><span data-stu-id="a3d99-630">A platform-specific separator character used to separate path strings in environment variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-631">このフィールドの値はセミコロン (;) を Windows ベースのデスクトップ プラットフォームの場合、既定では、他のプラットフォームで異なる場合がありますが、します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-631">On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-632">次の例では、使用、`PathSeparator`フィールド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-632">The following example demonstrates the use of the `PathSeparator` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-633">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-633">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-634">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-634">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-635">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-635">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryJoin">
      <Docs>
        <summary><span data-ttu-id="a3d99-636">個々のパス コンポーネントを事前に割り当てられた文字範囲に連結することを試み、この操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-636">Attempts to concatenate individual path components to a preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="a3d99-637">変換先の文字範囲は、連結されたパスを保持するのに十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-637">The destination character span must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="a3d99-638">呼び出すことによって連結されたパスを取得することができますし、<xref:System.Span%601.Slice%2A?displayProperty=nameWithType>メソッドでは、次の例として示します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-638">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the following example illustrates.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/TryJoin/program.cs)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryJoin">
      <MemberSignature Language="C#" Value="public static bool TryJoin (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryJoin(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryJoin (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryJoin(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="static member TryJoin : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; *  -&gt; bool" Usage="System.IO.Path.TryJoin (path1, path2, destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="a3d99-639">結合する最初のパスを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-639">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="a3d99-640">結合する 2 番目のパスを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-640">A character span that contains the second path to join.</span></span></param>
        <param name="destination"><span data-ttu-id="a3d99-641">連結されたパスを保持する文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-641">A character span to hold the concatenated path.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="a3d99-642">メソッドから制御が戻ったときに、<paramref name="destination" /> に書き込まれた文字数を示す値。</span><span class="sxs-lookup"><span data-stu-id="a3d99-642">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="a3d99-643">2 つのパス コンポーネントを事前に割り当てられた単一の文字範囲に連結することを試み、この操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-643">Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="a3d99-644">連結操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-644"><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="a3d99-645">`destination` 連結されたパスを保持するのに十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-645">`destination` must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="a3d99-646">呼び出すことによって連結されたパスを取得することができますし、<xref:System.Span%601.Slice%2A?displayProperty=nameWithType>メソッドの例として示します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-646">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the example illustrates.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-647">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-647">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryJoin">
      <MemberSignature Language="C#" Value="public static bool TryJoin (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryJoin(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryJoin (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryJoin(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="static member TryJoin : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; *  -&gt; bool" Usage="System.IO.Path.TryJoin (path1, path2, path3, destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="a3d99-648">結合する最初のパスを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-648">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="a3d99-649">結合する 2 番目のパスを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-649">A character span that contains the second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="a3d99-650">結合する 3 番目のパスを含む文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-650">A character span that contains the third path to join.</span></span></param>
        <param name="destination"><span data-ttu-id="a3d99-651">連結されたパスを保持する文字範囲。</span><span class="sxs-lookup"><span data-stu-id="a3d99-651">A character span to hold the concatenated path.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="a3d99-652">メソッドから制御が戻ったときに、<paramref name="destination" /> に書き込まれた文字数を示す値。</span><span class="sxs-lookup"><span data-stu-id="a3d99-652">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="a3d99-653">2 つのパス コンポーネントを事前に割り当てられた単一の文字範囲に連結することを試み、この操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-653">Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="a3d99-654">連結操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a3d99-654"><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="a3d99-655">`destination` 連結されたパスを保持するのに十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3d99-655">`destination` must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="a3d99-656">呼び出すことによって連結されたパスを取得することができますし、<xref:System.Span%601.Slice%2A?displayProperty=nameWithType>メソッドの例として示します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-656">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the example illustrates.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="a3d99-657">Windows システムのファイル パス形式</span><span class="sxs-lookup"><span data-stu-id="a3d99-657">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VolumeSeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char VolumeSeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char VolumeSeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.VolumeSeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VolumeSeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char VolumeSeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable VolumeSeparatorChar : char" Usage="System.IO.Path.VolumeSeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a3d99-658">プラットフォーム固有のボリューム区切り記号を提供します。</span><span class="sxs-lookup"><span data-stu-id="a3d99-658">Provides a platform-specific volume separator character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3d99-659">このフィールドの値は、Windows、Macintosh、および UNIX オペレーティング システムでスラッシュ (/) にコロン (:)。</span><span class="sxs-lookup"><span data-stu-id="a3d99-659">The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems.</span></span> <span data-ttu-id="a3d99-660">これは"c:\windows"または「MacVolume:System フォルダー」などのパスを解析するために最も役立ちます。</span><span class="sxs-lookup"><span data-stu-id="a3d99-660">This is most useful for parsing paths such as "c:\windows" or "MacVolume:System Folder".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3d99-661">次の例では、使用、`VolumeSeparatorChar`フィールド。</span><span class="sxs-lookup"><span data-stu-id="a3d99-661">The following example demonstrates the use of the `VolumeSeparatorChar` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="a3d99-662">ファイルおよびストリーム入出力</span><span class="sxs-lookup"><span data-stu-id="a3d99-662">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="a3d99-663">方法: ファイルからのテキストの読み取り</span><span class="sxs-lookup"><span data-stu-id="a3d99-663">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="a3d99-664">方法: ファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="a3d99-664">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>