<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FileSystemWatcher.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f524b1e2438cea1c3c824aa9514a36244ccff373.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f524b1e2438cea1c3c824aa9514a36244ccff373</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.FileSystemWatcher">
          <source>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</source>
          <target state="translated">ファイル システムの変更通知を待機し、ディレクトリまたはディレクトリ内のファイルが変更されたときにイベントを発生させます。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Use <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch for changes in a specified directory.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>指定したディレクトリ内の変更を監視します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can watch for changes in files and subdirectories of the specified directory.</source>
          <target state="translated">指定したディレクトリのファイルとサブディレクトリ内の変更を確認できます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can create a component to watch files on a local computer, a network drive, or a remote computer.</source>
          <target state="translated">ローカル コンピューター、ネットワーク ドライブ、またはリモート コンピューター上のファイルを監視するコンポーネントを作成することができます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To watch for changes in all files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to an empty string ("") or use wildcards ("*.<ph id="ph2">\*</ph>").</source>
          <target state="translated">すべてのファイルに変更をウォッチするには設定、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティを空の文字列 ("") またはワイルドカードを使用して ("*.<ph id="ph2">\*</ph>")。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
          <target state="translated">特定のファイルをウォッチする、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティをファイル名。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, to watch for changes in the file MyDoc.txt, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "MyDoc.txt".</source>
          <target state="translated">たとえば、MyDoc.txt ファイル内の変更をウォッチする次のように設定します。、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティを"MyDoc.txt"です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can also watch for changes in a certain type of file.</source>
          <target state="translated">特定の種類のファイルでの変更のウォッチできます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, to watch for changes in text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "<ph id="ph2">\*</ph>.txt".</source>
          <target state="translated">たとえば、テキスト ファイルの変更をウォッチする次のように設定します。、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティを"<ph id="ph2">\*</ph>.txt"です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>There are several types of changes you can watch for in a directory or file.</source>
          <target state="translated">ディレクトリまたはファイルを見ることができますの変更のいくつかの種類があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, you can watch for changes in <ph id="ph1">`Attributes`</ph>, the <ph id="ph2">`LastWrite`</ph> date and time, or the <ph id="ph3">`Size`</ph> of files or directories.</source>
          <target state="translated">などの変化を監視することができます<ph id="ph1">`Attributes`</ph>、<ph id="ph2">`LastWrite`</ph>日付と時刻、または<ph id="ph3">`Size`</ph>ファイルまたはディレクトリのです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>This is done by setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> property to one of the <ph id="ph2">&lt;xref:System.IO.NotifyFilters&gt;</ph> values.</source>
          <target state="translated">これは、設定で、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>プロパティのいずれかを<ph id="ph2">&lt;xref:System.IO.NotifyFilters&gt;</ph>値。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For more information on the type of changes you can watch, see <ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph>.</source>
          <target state="translated">監視できる変更の種類の詳細については、次を参照してください。<ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can watch for renaming, deletion, or creation of files or directories.</source>
          <target state="translated">名前変更、削除、またはファイルまたはディレクトリの作成を確認できます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, to watch for renaming of text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "*.txt" and call the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> method with a <ph id="ph3">&lt;xref:System.IO.WatcherChangeTypes.Renamed&gt;</ph> specified for its parameter.</source>
          <target state="translated">たとえば、テキスト ファイルの名前を変更するをウォッチする次のように設定します。、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティを「*.txt」、および呼び出し、<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph>メソッドを、<ph id="ph3">&lt;xref:System.IO.WatcherChangeTypes.Renamed&gt;</ph>そのパラメーターに指定します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The Windows operating system notifies your component of file changes in a buffer created by the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">Windows オペレーティング システム、コンポーネントによって作成されたバッファー内のファイルの変更を通知する、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
          <target state="translated">短期間に多数の変更がある場合、バッファーがオーバーフローすることができます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
          <target state="translated">これにより、コンポーネントは、ディレクトリ内の変更の追跡とブランケットの通知のみ提供されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Increasing the size of the buffer with the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events.</source>
          <target state="translated">含むバッファーのサイズを増やすと、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>プロパティが高コスト、大きなおいてとして小さなバッファーをまだディスクにスワップ アウトできない非ページ メモリから渡される見逃さない任意のファイルに十分な数の変更イベント。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties so you can filter out unwanted change notifications.</source>
          <target state="translated">バッファー オーバーフローを避けるためを使用して、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>プロパティ フィルターで除外できます不要なので変更通知します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, see the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">インスタンスの初期プロパティ値の一覧については<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>を参照してください、<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.%23ctor%2A&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Please note the following when using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> class.</source>
          <target state="translated">使用する場合は、次に注意してください、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Hidden files are not ignored.</source>
          <target state="translated">隠しファイルは無視されません。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
          <target state="translated">一部のシステムで<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>短い 8.3 ファイル名の形式を使用してファイルへの変更を報告します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFil~.Lon".</source>
          <target state="translated">たとえば、"LongFileName.LongExtension"への変更として報告する"LongFil ~ です。Lon"です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>This class contains a link demand and an inheritance demand at the class level that applies to all members.</source>
          <target state="translated">このクラスには、リンク確認要求し、すべてのメンバーに適用されるクラス レベルの継承確認要求が含まれています。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when either the immediate caller or the derived class does not have full-trust permission.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph>直前の呼び出し元または派生クラスのいずれかに完全信頼アクセス許可がない場合にスローされます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>.</source>
          <target state="translated">セキュリティ要求の詳細については、「<bpt id="p1">[</bpt>リンク確認要求<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The maximum size you can set for the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property for monitoring a directory over the network is 64 KB.</source>
          <target state="translated">設定できる最大サイズ、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>ネットワーク経由でディレクトリを監視するためのプロパティは、64 KB です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Running <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> on Windows 98 is not supported.</source>
          <target state="translated">実行している<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>Windows 98 ではサポートされていません。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Copying and moving folders</source>
          <target state="translated">コピーとフォルダーを移動</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The operating system and <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents.</source>
          <target state="translated">オペレーティング システムと<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>オブジェクトは、カット アンド ペースト操作または移動アクションのフォルダーとその内容の名前変更アクションとしてを解釈します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If you cut and paste a folder with files into a folder being watched, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object reports only the folder as new, but not its contents because they are essentially only renamed.</source>
          <target state="translated">切り取りし、ファイルとフォルダーを監視対象フォルダーに貼り付ける場合、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>オブジェクトをレポートとして、新しいフォルダーのみがその内容は、本質的にだけ名前を変更するためです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To be notified that the contents of folders have been moved or copied into a watched folder, provide <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> event handler methods as suggested in the following table.</source>
          <target state="translated">フォルダーの内容が移動または監視フォルダーにコピーされることを通知する、提供<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph>次の表で指定されたイベント ハンドラーのメソッドです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Event Handler</source>
          <target state="translated">イベント ハンドラー</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Events Handled</source>
          <target state="translated">イベント処理</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Performs</source>
          <target state="translated">実行します</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>、<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>、<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Report changes in file attributes, created files, and deleted files.</source>
          <target state="translated">属性は、作成されたファイル、および削除されたファイルの変更を報告します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>List the old and new paths of renamed files and folders, expanding recursively if needed.</source>
          <target state="translated">パスを一覧表示、古いマスター_キーと新しい名前が変更されたファイルとフォルダーのために必要な場合は再帰的に、展開します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Events and Buffer Sizes</source>
          <target state="translated">イベントとバッファー サイズ</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Note that several factors can affect which file system change events are raised, as described by the following:</source>
          <target state="translated">次の説明に従ってことに注意いくつかの要因に影響するファイル システムの変更イベントが発生します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">一般的なファイル システム操作では、1 つ以上のイベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">たとえば、移動した場合、ファイル別に、いくつかの 1 つのディレクトリから<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>といくつか<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph>イベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">複数のイベントを発生させるためファイルが複数の単純な操作で構成される複雑な操作を移動するには、します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) がによって検出された追加のファイル システムのイベントを発生可能性があります<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> can watch disks as long as they are not switched or removed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>切り替えされたり削除しない限り、ディスクを見ることができます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> does not raise events for CDs and DVDs, because time stamps and properties cannot change.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>イベントを発生させない Cd および Dvd のタイムスタンプとプロパティを変更できないためです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Remote computers must have one of the required platforms installed for the component to function properly.</source>
          <target state="translated">リモート コンピューターは、正常に機能するコンポーネントのインストールされている必要なプラットフォームのいずれかが必要です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If multiple <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event.</source>
          <target state="translated">複数<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>Windows XP Service Pack 1 以前で UNC パスと同じを視聴しているオブジェクトまたは Windows 2000 SP2 またはオブジェクトの以前のバージョンのいずれかでイベントが発生します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> objects will raise the appropriate events.</source>
          <target state="translated">Windows XP SP1 を実行しているコンピューターで以降では Windows 2000 SP3 以降または Windows Server 2003 では、すべて<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>オブジェクトが適切なイベントを発生させます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Note that a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> may miss an event when the buffer size is exceeded.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>バッファー サイズを超えたときにイベントを見逃す可能性があります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To avoid missing events, follow these guidelines:</source>
          <target state="translated">イベントの欠落を回避するには、次のガイドラインに従います。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Increase the buffer size by setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property.</source>
          <target state="translated">設定してバッファー サイズを増やす、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Avoid watching files with long file names, because a long file name contributes to filling up the buffer.</source>
          <target state="translated">長いファイル名が、バッファーがいっぱいに貢献ため長いファイル名、ファイルの監視を使用しないでください。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Consider renaming these files using shorter names.</source>
          <target state="translated">短い名前を使用してこれらのファイルの名前を変更することを検討してください。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Keep your event handling code as short as possible.</source>
          <target state="translated">イベントの処理コードをできるだけ短くしてください。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>実行時に指定されたディレクトリを監視します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">変更を監視するコンポーネントを設定<ph id="ph1">`LastWrite`</ph>と<ph id="ph2">`LastAccess`</ph>時、作成、削除、または、ディレクトリ内のテキスト ファイルの名前を変更します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">場合は、ファイルは、変更、作成、または削除は、ファイルへのパスは、コンソールに出力します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">ファイルの名前が変更されると、新旧のパスは、コンソールに出力します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>と<ph id="ph2">&lt;xref:System.IO&gt;</ph>この例の名前空間。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>for deriving from the <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessStartInfo" /&gt;</ph> class.</source>
          <target state="translated">派生させるため、<ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessStartInfo" /&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; Named Permission Sets: <ph id="ph2">&lt;see langword="FullTrust" /&gt;</ph>.</source>
          <target state="translated">要求値:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>です。名前付き権限セット:<ph id="ph2">&lt;see langword="FullTrust" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="T:System.IO.FileSystemWatcher">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
          <target state="translated">Windows NT または Windows 2000 がないリモート コンピューターを監視することはできません。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
          <target state="translated">Windows NT 4.0 のコンピューターからリモートの Windows NT 4.0 コンピューターを監視することはできません。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The following table shows initial property values for an instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">次の表は、のインスタンスの初期プロパティ値を示しています。<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>Initial Value</source>
          <target state="translated">初期値</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>bitwise OR combination of <ph id="ph1">`LastWrite`</ph>, <ph id="ph2">`FileName`</ph>, and <ph id="ph3">`DirectoryName`</ph></source>
          <target state="translated">ビットごとの OR の組み合わせ<ph id="ph1">`LastWrite`</ph>、 <ph id="ph2">`FileName`</ph>、および <ph id="ph3">`DirectoryName`</ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>"*.<ph id="ph1">\*</ph>" (Watch all files.)</source>
          <target state="translated">"*.<ph id="ph1">\*</ph>"(すべてのファイルを監視します)。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>8192</source>
          <target state="translated">8192</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>empty string ("")</source>
          <target state="translated">空の文字列 ("")</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">コンポーネントは、指定したディレクトリまでを視聴しません、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>が設定されていると<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>は<ph id="ph3">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object to watch the directory specified at run time.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>実行時に指定されたディレクトリを監視するオブジェクト。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object watches for changes in <ph id="ph2">`LastWrite`</ph> and <ph id="ph3">`LastAccess`</ph> times, and for the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>オブジェクトの変更は、監視<ph id="ph2">`LastWrite`</ph>と<ph id="ph3">`LastAccess`</ph>時刻、および作成するため、削除、テキストの名前を変更するファイルまたはディレクトリにします。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>If a file is changed, created, or deleted, the path to the file displays to the console.</source>
          <target state="translated">ファイルは、変更、作成、または削除は、ファイルへのパスをコンソールに表示します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>When a file is renamed, the old and new paths display to the console.</source>
          <target state="translated">ファイルの名前が変更されると、新旧のパスは、コンソールに表示します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>と<ph id="ph2">&lt;xref:System.IO&gt;</ph>名前空間。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているコードから使用することはできません。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</source>
          <target state="translated">標準表記または UNC (Universal Naming Convention) 表記での監視するディレクトリ。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class, given the specified directory to monitor.</source>
          <target state="translated">監視するディレクトリを指定して、<ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">コンポーネントは、指定したディレクトリまでを視聴しません、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>が設定されていると<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>は<ph id="ph3">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The component can watch files on your personal computer, a network drive, or a remote computer.</source>
          <target state="translated">コンポーネントは、パーソナル コンピューター、ネットワーク ドライブ、またはリモート コンピューター上のファイルを見ることができます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
          <target state="translated">Windows NT または Windows 2000 がないリモート コンピューターを監視することはできません。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
          <target state="translated">Windows NT 4.0 のコンピューターからリモートの Windows NT 4.0 コンピューターを監視することはできません。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property is set by default to watch all files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティが既定ですべてのファイルを監視します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is an empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> パラメーターが空の文字列 ("") です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The path specified through the <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> パラメーターで指定されたパスが存在しません。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is too long.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> が長すぎます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているコードから使用することはできません。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</source>
          <target state="translated">標準表記または UNC (Universal Naming Convention) 表記での監視するディレクトリ。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The type of files to watch.</source>
          <target state="translated">ウォッチするファイルの種類。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>For example, "*.txt" watches for changes to all text files.</source>
          <target state="translated">たとえば、すべてのテキスト ファイルの変更をウォッチするには、"*.txt" に設定します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class, given the specified directory and type of files to monitor.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> クラスの新しいインスタンスを、監視するディレクトリとファイルの種類を指定して初期化します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">コンポーネントは、指定したディレクトリまでを視聴しません、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>が設定されていると<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>は<ph id="ph3">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The component can watch files on your personal computer, a network drive, or a remote computer.</source>
          <target state="translated">コンポーネントは、パーソナル コンピューター、ネットワーク ドライブ、またはリモート コンピューター上のファイルを見ることができます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
          <target state="translated">Windows NT または Windows 2000 がないリモート コンピューターを監視することはできません。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
          <target state="translated">Windows NT 4.0 のコンピューターからリモートの Windows NT 4.0 コンピューターを監視することはできません。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="filter" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="filter" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is an empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> パラメーターが空の文字列 ("") です。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The path specified through the <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> パラメーターで指定されたパスが存在しません。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is too long.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> が長すぎます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているコードから使用することはできません。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>Begins the initialization of a <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> used on a form or used by another component.</source>
          <target state="translated">フォームまたは別のコンポーネントで使用する <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> の初期化を開始します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>The initialization occurs at run time.</source>
          <target state="translated">初期化は実行時に発生します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to start the initialization of a component used on a form or used by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>デザイン環境では、このメソッドを使用して、コンポーネントの初期化を開始フォームまたは別のコンポーネントを使用します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> method ends the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph>メソッドが初期化を終了します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>Using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph>メソッド使用されないように、コントロールが完全に初期化される前にします。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is changed.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> のファイルまたはディレクトリが変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>イベントが発生するは、サイズが変更されたときに、システム属性では、最終書き込み時刻、最終アクセス時刻、またはファイルまたはディレクトリのセキュリティ アクセス許可で監視されているディレクトリ。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">一般的なファイル システム操作では、1 つ以上のイベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">たとえば、移動した場合、ファイル別に、いくつかの 1 つのディレクトリから<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>といくつか<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph>イベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">複数のイベントを発生させるためファイルが複数の単純な操作で構成される複雑な操作を移動するには、します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) がによって検出された追加のファイル システムのイベントを発生可能性があります<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Use <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> to restrict the number of notifications raised when this event is handled.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>をこのイベントが処理されるときに発生する通知の数を制限します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>イベントは、予期しないファイルの名前を変更がディレクトリの名前が変更されるには発生しません。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>To watch for renaming, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> event.</source>
          <target state="translated">名前を変更するをウォッチするを使用して、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
          <target state="translated">順序、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>イベントは、他の関連<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>イベントが変更可能性があります、<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>プロパティは使用されません<ph id="ph4">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event to display the file path to the console whenever the watched file is changed.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>ウォッチ対象のファイルが変更されるたびに、ファイルのパスをコンソールに表示するイベントです。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is created.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> のファイルまたはディレクトリが作成されたときに発生します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">ファイルまたはディレクトリにコピーまたは移動など、いくつかの一般的な状況は、イベントに直接対応していないが発生しないでくださいイベントが発生します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">ファイルまたはディレクトリをコピーすると、システムを発生させます、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>コピー先となるファイルが、そのディレクトリが監視されている場合、ディレクトリ内のイベントです。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">コピー元となるディレクトリを別のインスタンスで監視対象がかどうか<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>イベントは生成されません。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">たとえば、2 つのインスタンスを作成する<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">"C:\My Documents"を監視する FileSystemWatcher1 が設定され、"C:\Your Documents"を監視する FileSystemWatcher2 が設定されます。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">「マイ ドキュメント」から"Your Documents"にファイルをコピーする場合、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 でイベントを発生させるが FileSystemWatcher1 のイベントは生成されません。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Unlike copying, moving a file or directory would raise two events.</source>
          <target state="translated">コピーとは異なりファイルまたはディレクトリの移動が発生させる 2 つのイベントです。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
          <target state="translated">「マイ ドキュメント」から"Your Documents"にファイルを移動する場合、前の例から、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 でイベントを発生させると、 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> FileSystemWatcher1 によってイベントが生成されます。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">一般的なファイル システム操作では、1 つ以上のイベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">たとえば、移動した場合、ファイル別に、いくつかの 1 つのディレクトリから<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>といくつか<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph>イベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">複数のイベントを発生させるためファイルが複数の単純な操作で構成される複雑な操作を移動するには、します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) がによって検出された追加のファイル システムのイベントを発生可能性があります<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
          <target state="translated">順序、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>イベントは、他の関連<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>イベントが変更可能性があります、<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>プロパティは使用されません<ph id="ph4">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>ファイルが作成されるとすぐにイベントが発生します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
          <target state="translated">ファイルの中の場合コピーしたり、監視対象のディレクトリに転送したり、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>イベントを発生させる、すぐに続く 1 つ以上<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event to display the file path to the console whenever the watched file is created.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>ウォッチ対象のファイルが作成されるたびに、ファイルのパスをコンソールに表示するイベントです。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is deleted.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> のファイルまたはディレクトリが削除されたときに発生します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">ファイルまたはディレクトリにコピーまたは移動など、いくつかの一般的な状況は、イベントに直接対応していないが発生しないでくださいイベントが発生します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">ファイルまたはディレクトリをコピーすると、システムを発生させます、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>コピー先となるファイルが、そのディレクトリが監視されている場合、ディレクトリ内のイベントです。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">コピー元となるディレクトリを別のインスタンスで監視対象がかどうか<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>イベントは生成されません。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">たとえば、2 つのインスタンスを作成する<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">"C:\My Documents"を監視する FileSystemWatcher1 が設定され、"C:\Your Documents"を監視する FileSystemWatcher2 が設定されます。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">「マイ ドキュメント」から"Your Documents"にファイルをコピーする場合、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 でイベントを発生させるが FileSystemWatcher1 のイベントは生成されません。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Unlike copying, moving a file or directory would raise two events.</source>
          <target state="translated">コピーとは異なりファイルまたはディレクトリの移動が発生させる 2 つのイベントです。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
          <target state="translated">「マイ ドキュメント」から"Your Documents"にファイルを移動する場合、前の例から、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 でイベントを発生させると、 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> FileSystemWatcher1 によってイベントが生成されます。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">一般的なファイル システム操作では、1 つ以上のイベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">たとえば、移動した場合、ファイル別に、いくつかの 1 つのディレクトリから<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>といくつか<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph>イベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">複数のイベントを発生させるためファイルが複数の単純な操作で構成される複雑な操作を移動するには、します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) がによって検出された追加のファイル システムのイベントを発生可能性があります<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
          <target state="translated">順序、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>イベントは、他の関連<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>イベントが変更可能性があります、<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>プロパティは使用されません<ph id="ph4">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event to display the file path to the console whenever the watched file is deleted.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>ウォッチ対象のファイルを削除するたびに、ファイルのパスをコンソールに表示するイベントです。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> プロテクト呼び出します<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 呼び出す<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph>で<ph id="ph3">`disposing`</ph>'éý'<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> パラメーターが <ph id="ph2">`true`</ph> の場合、このメソッドは、この <ph id="ph3">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">このメソッドは、参照される各オブジェクトの <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> は、他のオブジェクトから複数回呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph>既に破棄されているを以前の呼び出しでオブジェクトを参照しないように注意する<ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">実装する方法の詳細についての<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>Dispose メソッドの実装<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>Gets or sets a value indicating whether the component is enabled.</source>
          <target state="translated">コンポーネントが有効かどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the component is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">コンポーネントが有効な場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>If you are using the component on a designer in <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>, the default is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> のデザイナーでコンポーネントを使用している場合、既定値は <ph id="ph2">&lt;see langword="true" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The component will not raise events unless you set <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">設定しない限り、コンポーネントはイベントを発生させないは<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>に<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property has been set and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">コンポーネントは、指定したディレクトリまでを視聴しません、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>プロパティが設定されていると<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>は<ph id="ph3">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> method allows event handlers to be invoked to respond to file changes even if this property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph>メソッドにより、イベント ハンドラーをこのプロパティ設定されている場合でも、ファイルの変更に応答するに呼び出せる<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>実行時に指定されたディレクトリを監視します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">変更を監視するコンポーネントを設定<ph id="ph1">`LastWrite`</ph>と<ph id="ph2">`LastAccess`</ph>時、作成、削除、または、ディレクトリ内のテキスト ファイルの名前を変更します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">場合は、ファイルは、変更、作成、または削除は、ファイルへのパスは、コンソールに出力します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">ファイルの名前が変更されると、新旧のパスは、コンソールに出力します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>と<ph id="ph2">&lt;xref:System.IO&gt;</ph>この例の名前空間。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> object has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> オブジェクトは破棄されています。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The current operating system is not Microsoft Windows NT or later.</source>
          <target state="translated">現在のオペレーティング システムは Microsoft Windows NT 以降ではありません。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The directory specified in <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> could not be found.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> で指定したディレクトリが見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source><ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> has not been set or is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> が設定されていないか、無効です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>Ends the initialization of a <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> used on a form or used by another component.</source>
          <target state="translated">フォームまたは別のコンポーネントで使用する <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> の初期化を終了します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>The initialization occurs at run time.</source>
          <target state="translated">初期化は実行時に発生します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to end the initialization of a component used on a form or used by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>デザイン環境では、このメソッドを使用して、コンポーネントの初期化を終了フォームまたは別のコンポーネントを使用します。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> method starts the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph>メソッドは、初期化を開始します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>Using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph>メソッド使用されないように、コントロールが完全に初期化される前にします。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Occurs when the instance of <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> is unable to continue monitoring changes or when the internal buffer overflows.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> のインスタンスが変更の監視を続けられない場合、または内部バッファー オーバーフローの場合に発生します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>This event is raised whenever something prevents the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object from monitoring changes.</source>
          <target state="translated">このイベントは、問題を防止するたびに、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>オブジェクトからの変更の監視します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>For example, if the object is monitoring changes in a remote directory and the connection to that directory is lost, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Error&gt;</ph> event is raised.</source>
          <target state="translated">たとえば、オブジェクトがリモート ディレクトリ内の変更を監視し、そのディレクトリへの接続が失われる、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Error&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>The system notifies you of file changes, and it stores those changes in a buffer that the component creates and passes to the APIs.</source>
          <target state="translated">システムでは、ファイルの変更、ユーザーに通知し、その変更をコンポーネントを作成し、Api に渡すバッファーに格納します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
          <target state="translated">短期間に多数の変更がある場合、バッファーがオーバーフローすることができます。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
          <target state="translated">これにより、コンポーネントは、ディレクトリ内の変更の追跡とブランケットの通知のみ提供されます。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Increasing the size of the buffer is expensive, because it comes from non paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</source>
          <target state="translated">バッファーのサイズを増やす、負荷が高い、以外のものであるためにページは維持する、ディスクにスワップ アウトできないメモリ バッファーをできるだけ小さくします。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties to filter out unwanted change notifications.</source>
          <target state="translated">バッファー オーバーフローを避けるためを使用して、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>望ましくないを除外するプロパティの変更通知します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">一般的なファイル システム操作では、1 つ以上のイベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">たとえば、移動した場合、ファイル別に、いくつかの 1 つのディレクトリから<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>といくつか<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph>イベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">複数のイベントを発生させるためファイルが複数の単純な操作で構成される複雑な操作を移動するには、します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) がによって検出された追加のファイル システムのイベントを発生可能性があります<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Gets or sets the filter string used to determine what files are monitored in a directory.</source>
          <target state="translated">ディレクトリで監視するファイルを決定するために使用するフィルター文字列を取得または設定します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The filter string.</source>
          <target state="translated">フィルター文字列。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The default is "*.<ph id="ph1">\*</ph>" (Watches all files.)</source>
          <target state="translated">既定値は"* です。<ph id="ph1">\*</ph>"(すべてのファイルを監視します)。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>To watch changes in all files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to an empty string ("").</source>
          <target state="translated">すべてのファイルの変更をウォッチする、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティを空の文字列 ("") です。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
          <target state="translated">特定のファイルをウォッチする、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティをファイル名。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>For example, to watch for changes in the file MyDoc.txt, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "MyDoc.txt".</source>
          <target state="translated">たとえば、MyDoc.txt ファイル内の変更をウォッチする次のように設定します。、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティを"MyDoc.txt"です。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>You can also watch for changes in a certain type of file.</source>
          <target state="translated">特定の種類のファイルでの変更のウォッチできます。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>For example, to watch for changes in any text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "*.txt".</source>
          <target state="translated">たとえば、任意のテキスト ファイルの変更をウォッチする次のように設定します。、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティを"*.txt"です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Use of multiple filters such as "<ph id="ph1">\*</ph>.txt&amp;#124;<ph id="ph2">\*</ph>.doc" is not supported.</source>
          <target state="translated">などの複数のフィルターの使用"<ph id="ph1">\*</ph>.txt&amp;#124;<ph id="ph2">\*</ph>.doc"はサポートされていません。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property can be changed after the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object has started receiving events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティは、後に変更することができます、<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>オブジェクトがイベントの受信を開始します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>For more information about filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
          <target state="translated">不必要な通知をフィルター処理の詳細については、次を参照してください。、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> accepts wildcards for matching files, as shown in the following examples.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 次の例に示すように、一致するファイルのワイルドカードを受け付けます。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Filter string</source>
          <target state="translated">フィルター文字列</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Watches the following files</source>
          <target state="translated">次のファイルを監視します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>*.<ph id="ph1">\*</ph></source>
          <target state="translated">*.<ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files (default).</source>
          <target state="translated">すべてのファイル (既定値)。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>An empty string ("") also watches all files.</source>
          <target state="translated">空の文字列 ("") もすべてのファイルを監視します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>*.txt</source>
          <target state="translated">*.txt</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files with a "txt" extension.</source>
          <target state="translated">"Txt"拡張子を持つすべてのファイル。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>*recipe.doc</source>
          <target state="translated">*recipe.doc</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files ending in "recipe" with a "doc" extension.</source>
          <target state="translated">"Doc"拡張子を持つには、「料理」で終わるすべてのファイル。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>win*.xml</source>
          <target state="translated">win*.xml</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files beginning with "win" with an "xml" extension.</source>
          <target state="translated">"Xml"拡張子が"win"で始まるすべてのファイル。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Sales*200?.xls</source>
          <target state="translated">Sales * 200 ですか。xls</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Matches the following:</source>
          <target state="translated">次に一致します。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls</source>
          <target state="translated">販売年 7 月 2001.xlsSales Aug 2002.xlsSales 年 3 月 2004.xls</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>but does not match:</source>
          <target state="translated">一致しません。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Sales Nov 1999.xls</source>
          <target state="translated">販売 Nov 1999.xls</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>MyReport.Doc</source>
          <target state="translated">MyReport.Doc</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Watches only MyReport.doc</source>
          <target state="translated">MyReport.doc のみを監視します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>実行時に指定されたディレクトリを監視します。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">変更を監視するコンポーネントを設定<ph id="ph1">`LastWrite`</ph>と<ph id="ph2">`LastAccess`</ph>時、作成、削除、または、ディレクトリ内のテキスト ファイルの名前を変更します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">場合は、ファイルは、変更、作成、または削除は、ファイルへのパスは、コンソールに出力します。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">ファイルの名前が変更されると、新旧のパスは、コンソールに出力します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>と<ph id="ph2">&lt;xref:System.IO&gt;</ph>この例の名前空間。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</source>
          <target state="translated">指定したパスのサブディレクトリを監視するかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if you want to monitor subdirectories; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">サブディレクトリを監視する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>Set <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> to <ph id="ph2">`true`</ph> when you want to watch for change notifications for files and directories contained within the directory specified through the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, and its subdirectories.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>に<ph id="ph2">`true`</ph>ファイルとディレクトリを指定したディレクトリ内に含まれる変更通知を監視する場合、<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>プロパティ、およびそのサブディレクトリです。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>Setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> property to <ph id="ph2">`false`</ph> helps reduce the number of notifications sent to the internal buffer.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>プロパティを<ph id="ph2">`false`</ph>内部バッファーに送信された通知の数を削減できます。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>For more information on filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
          <target state="translated">不必要な通知をフィルター処理の詳細については、次を参照してください。、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>When <ph id="ph1">`true`</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> is recursive through the entire sub tree, not just the immediate child directories.</source>
          <target state="translated">ときに<ph id="ph1">`true`</ph>、<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>は直下の子ディレクトリだけでなく、全体のサブ ツリーを再帰的です。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>The relative path to a file or directory within the sub tree returns in the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph> and the <ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldName%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>, depending on changes you are watching for.</source>
          <target state="translated">内のファイルまたはサブツリー内のディレクトリへの相対パスを返します、<ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name%2A&gt;</ph>プロパティの<ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph>と<ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldName%2A&gt;</ph>プロパティの<ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>を試聴している変更に応じて、します。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>You can get the fully qualified path from the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.FullPath%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph> and the <ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldFullPath%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>, depending on the changes you are watching for.</source>
          <target state="translated">完全修飾パスを取得することができます、<ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.FullPath%2A&gt;</ph>プロパティの<ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph>と<ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldFullPath%2A&gt;</ph>のプロパティ<ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>を試聴している変更に応じて、します。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>If a directory is created in the sub tree of the directory you are watching, and <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> is <ph id="ph2">`true`</ph>, that directory will automatically be watched.</source>
          <target state="translated">試聴しているディレクトリのサブ ツリーで、ディレクトリが作成された場合と<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>は<ph id="ph2">`true`</ph>、そのディレクトリが自動的に監視します。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>Gets or sets the size (in bytes) of the internal buffer.</source>
          <target state="translated">内部バッファーのサイズ (バイト単位) を取得または設定します。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>The internal buffer size in bytes.</source>
          <target state="translated">内部バッファー サイズ (バイト単位)。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>The default is 8192 (8 KB).</source>
          <target state="translated">既定値は 8192 (8 KB) です。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>You can set the buffer to 4 KB or larger, but it must not exceed 64 KB.</source>
          <target state="translated">4 KB 以上では、バッファーを設定することができますが、64 KB を超えない必要があります。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>If you try to set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property to less than 4096 bytes, your value is discarded and the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property is set to 4096 bytes.</source>
          <target state="translated">設定を試行した場合、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>プロパティにより小さい 4096 (バイト単位)、値は破棄されます、<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>プロパティが 4096 バイトに設定します。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>For best performance, use a multiple of 4 KB on Intel-based computers.</source>
          <target state="translated">パフォーマンスを得るには、Intel ベース コンピューター上で 4 KB の倍数を使用します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>The system notifies the component of file changes, and it stores those changes in a buffer the component creates and passes to the APIs.</source>
          <target state="translated">システム ファイルの変更のコンポーネントに通知し、その変更をコンポーネントを作成し、Api に渡すバッファーに格納します。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>Each event can use up to 16 bytes of memory, not including the file name.</source>
          <target state="translated">各イベントには、最大 16 バイトのファイル名を含まない、メモリを使用できます。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
          <target state="translated">短期間に多数の変更がある場合、バッファーがオーバーフローすることができます。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
          <target state="translated">これにより、コンポーネントは、ディレクトリ内の変更の追跡とブランケットの通知のみ提供されます。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>Increasing the size of the buffer can prevent missing file system change events.</source>
          <target state="translated">バッファーのサイズを増やすことを防ぐことができます変更イベントをファイル システムがありません。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>However, increasing buffer size is expensive, because it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</source>
          <target state="translated">ただし、バッファー サイズを増やすことは、コストがディスクに保管しておいてバッファー可能な限り小さくスワップ アウトできない非ページ メモリのものであるためです。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties to filter out unwanted change notifications.</source>
          <target state="translated">バッファー オーバーフローを避けるためを使用して、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>望ましくないを除外するプロパティの変更通知します。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>Gets or sets the type of changes to watch for.</source>
          <target state="translated">ウォッチする変更の種類を取得または設定します。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The default is the bitwise OR combination of <ph id="ph1">&lt;see langword="LastWrite" /&gt;</ph>, <ph id="ph2">&lt;see langword="FileName" /&gt;</ph>, and <ph id="ph3">&lt;see langword="DirectoryName" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see langword="LastWrite" /&gt;</ph>、<ph id="ph2">&lt;see langword="FileName" /&gt;</ph>、および <ph id="ph3">&lt;see langword="DirectoryName" /&gt;</ph> のビットごとの OR の組み合わせです。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>You can combine the members of the <ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph> enumeration to watch for more than one type of change at a time.</source>
          <target state="translated">メンバーを組み合わせることができます、<ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph>列挙型を一度に変更の 1 つ以上の種類を監視します。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>For example, you can watch for changes in size of a file, and for changes in the <ph id="ph1">`LastWrite`</ph> time.</source>
          <target state="translated">たとえば、ファイルのサイズの変更との変更を見ることができます、<ph id="ph1">`LastWrite`</ph>時間。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>This raises an event anytime there is a change in file or folder size, or a change in the <ph id="ph1">`LastWrite`</ph> time of the file or folder.</source>
          <target state="translated">これは、イベントを発生させますが、ファイルまたはフォルダーのサイズの変更や、<ph id="ph1">`LastWrite`</ph>ファイルまたはフォルダーの時間。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>This is one way to filter out unwanted notifications.</source>
          <target state="translated">これは、不必要な通知をフィルター処理する方法の 1 つです。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>For more information on filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
          <target state="translated">不必要な通知をフィルター処理の詳細については、次を参照してください。、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>実行時に指定されたディレクトリを監視します。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">変更を監視するコンポーネントを設定<ph id="ph1">`LastWrite`</ph>と<ph id="ph2">`LastAccess`</ph>時、作成、削除、または、ディレクトリ内のテキスト ファイルの名前を変更します。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">場合は、ファイルは、変更、作成、または削除は、ファイルへのパスは、コンソールに出力します。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">ファイルの名前が変更されると、新旧のパスは、コンソールに出力します。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>と<ph id="ph2">&lt;xref:System.IO&gt;</ph>この例の名前空間。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The value is not a valid bitwise OR combination of the <ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> values.</source>
          <target state="translated">値が、<ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> 値の有効なビットごとの OR の組み合わせになっていません。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The value that is being set is not valid.</source>
          <target state="translated">設定されようとしている値が無効です。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Changed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Changed" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> サイズ、システム属性、最終書き込み時刻、最終アクセス時刻、または、ファイルまたはディレクトリの監視されているディレクトリのセキュリティ アクセス許可に変更が加えられたときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> property to restrict the number of events raised when the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is handled.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>いつ発生するイベントの数を制限するプロパティ、<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>イベントを処理します。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>ファイルが作成されるとすぐにイベントが発生します。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
          <target state="translated">ファイルの中の場合コピーしたり、監視対象のディレクトリに転送したり、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>イベントを発生させる、すぐに続く 1 つ以上<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Created" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Created" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> is called when a file or directory is created in the directory being monitored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> ファイルまたはディレクトリが監視されているディレクトリに作成されたときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">ファイルまたはディレクトリにコピーまたは移動など、いくつかの一般的な状況は、イベントに直接対応していないが発生しないでくださいイベントが発生します。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">ファイルまたはディレクトリをコピーすると、システムを発生させます、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>コピー先となるファイルが、そのディレクトリが監視されている場合、ディレクトリ内のイベントです。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">コピー元となるディレクトリを別のインスタンスで監視対象がかどうか<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>イベントは生成されません。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">たとえば、2 つのインスタンスを作成する<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">"C:\My Documents"を監視する FileSystemWatcher1 が設定され、"C:\Your Documents"を監視する FileSystemWatcher2 が設定されます。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>If you copy a file from "My Documents" and paste it into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">「マイ ドキュメント」からファイルをコピーし、"Your Documents"に貼り付ける場合、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 でイベントを発生させるが FileSystemWatcher1 のイベントは生成されません。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Unlike copying, moving a file or directory raises two events.</source>
          <target state="translated">、コピーとは異なり、ファイルまたはディレクトリの移動にも 2 つのイベントを発生させます。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised in FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised in FileSystemWatcher1.</source>
          <target state="translated">「マイ ドキュメント」から"Your Documents"にファイルを移動する場合、前の例から、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 でイベントを発生させると、 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> FileSystemWatcher1 でイベントを発生させるとします。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>ファイルが作成されるとすぐにイベントが発生します。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
          <target state="translated">ファイルの中の場合コピーしたり、監視対象のディレクトリに転送したり、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph>イベントを発生させる、すぐに続く 1 つ以上<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Deleted" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Deleted" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> is called when a file or directory, within the directory being monitored, is deleted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> ファイルまたは、監視されているディレクトリ内のディレクトリが削除されると呼び出されます。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">ファイルまたはディレクトリにコピーまたは移動など、いくつかの一般的な状況は、イベントに直接対応していないが発生しないでくださいイベントが発生します。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">ファイルまたはディレクトリをコピーすると、システムを発生させます、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>コピー先となるファイルが、そのディレクトリが監視されている場合、ディレクトリ内のイベントです。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">コピー元となるディレクトリを別のインスタンスで監視対象がかどうか<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>イベントは生成されません。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">たとえば、2 つのインスタンスを作成する<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">"C:\My Documents"を監視する FileSystemWatcher1 が設定され、"C:\Your Documents"を監視する FileSystemWatcher2 が設定されます。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">「マイ ドキュメント」から"Your Documents"にファイルをコピーする場合、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 でイベントを発生させるが FileSystemWatcher1 のイベントは生成されません。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Unlike copying, moving a file or directory raises two events.</source>
          <target state="translated">、コピーとは異なり、ファイルまたはディレクトリの移動にも 2 つのイベントを発生させます。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
          <target state="translated">「マイ ドキュメント」から"Your Documents"にファイルを移動する場合、前の例から、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 でイベントを発生させると、 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> FileSystemWatcher1 によってイベントが生成されます。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IO.ErrorEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.IO.ErrorEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Error" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Error" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnError%2A&gt;</ph> is called when an error occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnError%2A&gt;</ph> エラーが発生すると呼び出されます。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.RenamedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.IO.RenamedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Renamed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Renamed" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> is called when a file or directory within the directory being monitored is renamed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> ファイルまたは監視されているディレクトリ内のディレクトリの名前を変更すると呼び出されます。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Its <ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph> argument contains information about the renaming operation, such as the type of change, the old and new path, and the old and new name.</source>
          <target state="translated">その<ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>引数には、変更、新旧のパスと、古いマスター_キーと新しい名前の型など、名前変更操作に関する情報が含まれています。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Note that its <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph> property may be null for renamed events if the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> does not get matching old and new name events from the operating system.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph>プロパティが null の可能性がある場合のイベントの名前を変更、<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>はオペレーティング システムから古いマスター_キーと新しい名前イベントの照合を取得できません。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph>派生クラスでは、基本クラスの呼び出しを必ず<ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>Gets or sets the path of the directory to watch.</source>
          <target state="translated">ウォッチするディレクトリのパスを取得または設定します。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The path to monitor.</source>
          <target state="translated">監視するパス。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The default is an empty string ("").</source>
          <target state="translated">既定値は、空の文字列 ("") です。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>This is a fully qualified path to a directory.</source>
          <target state="translated">これは、ディレクトリへの完全修飾パスです。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>If the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, this directory is the root at which the system watches for changes; otherwise it is the only directory watched.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>プロパティは<ph id="ph2">`true`</ph>、このディレクトリは、システムが変更を監視するルートです。 それ以外の場合は、のみのディレクトリを監視します。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property to the fully qualified, correct directory, and the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
          <target state="translated">特定のファイルをウォッチする、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>プロパティを完全修飾、正しいディレクトリと<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>プロパティをファイル名。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property supports Universal Naming Convention (UNC) paths.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>プロパティは、汎用名前付け規則 (UNC) パスをサポートします。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>This property must be set before the component can watch for changes.</source>
          <target state="translated">コンポーネントの変更を監視できる前に、このプロパティを設定する必要があります。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>When a directory is renamed, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> automatically reattaches itself to the newly renamed item.</source>
          <target state="translated">ディレクトリの名前が変更される、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>自動的にそれ自体が再接続されると、新しく名前を変更した項目にします。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>For example, if you set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property to "C:\My Documents" and then manually rename the directory to "C:\Your Documents", the component continues listening for change notifications on the newly renamed directory.</source>
          <target state="translated">設定する場合など、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>プロパティ"C:\My Documents"を"C:\Your Documents"にディレクトリを手動で変更し、コンポーネントは、新しく名前を変更したディレクトリの変更通知を待機してが続行されます。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>However, when you ask for the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, it contains the old path.</source>
          <target state="translated">ただし、ときに問い合わせる必要が、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>プロパティ、古いパスが含まれています。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>This happens because the component determines what directory watches based on the handle, rather than the name of the directory.</source>
          <target state="translated">これは、コンポーネントがウォッチするディレクトリを判断されるため、ディレクトリの名前ではなく、ハンドルに基づきます。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>Renaming does not affect the handle.</source>
          <target state="translated">名前を変更しても、ハンドルは影響しません。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>So, if you destroy the component, and then recreate it without updating the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, your application will fail because the directory no longer exists.</source>
          <target state="translated">したがって、コンポーネントを破棄し、更新することがなく再作成する場合、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph>プロパティ、アプリケーションは、ディレクトリが存在しないために失敗します。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>実行時に指定されたディレクトリを監視します。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">変更を監視するコンポーネントを設定<ph id="ph1">`LastWrite`</ph>と<ph id="ph2">`LastAccess`</ph>時、作成、削除、または、ディレクトリ内のテキスト ファイルの名前を変更します。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">場合は、ファイルは、変更、作成、または削除は、ファイルへのパスは、コンソールに出力します。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">ファイルの名前が変更されると、新旧のパスは、コンソールに出力します。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>と<ph id="ph2">&lt;xref:System.IO&gt;</ph>この例の名前空間。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The specified path does not exist or could not be found.</source>
          <target state="translated">指定されたパスが存在しないか、見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The specified path contains wildcard characters.</source>
          <target state="translated">指定したパスにワイルドカード文字が含まれています。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The specified path contains invalid path characters.</source>
          <target state="translated">指定したパスに無効なパス文字が含まれています。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is renamed.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> のファイルまたはディレクトリの名前が変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>The <ph id="ph1">`Renamed`</ph> event is an <ph id="ph2">&lt;xref:System.IO.RenamedEventHandler&gt;</ph> delegate that has the following signature:</source>
          <target state="translated"><ph id="ph1">`Renamed`</ph>イベントは、<ph id="ph2">&lt;xref:System.IO.RenamedEventHandler&gt;</ph>を次のシグネチャを持つデリゲート。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>The <ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph> object provides information about the renaming operation, such as the type of the rename (the <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs.ChangeType&gt;</ph> property), the old and new name, and the old and new path.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>オブジェクトは、名前の変更の種類など、名前変更操作に関する情報を提供 (、<ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs.ChangeType&gt;</ph>プロパティ) を古いマスター_キーと新しい名前と、新旧のパス。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Note that the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph> property may be null for renamed events if the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> does not get matching old and new name events from the operating system.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph>プロパティが null の可能性がある場合のイベントの名前を変更、<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>はオペレーティング システムから古いマスター_キーと新しい名前イベントの照合を取得できません。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Renaming the directory you are watching will not raise a notification.</source>
          <target state="translated">ウォッチするディレクトリの名前を変更する場合は、通知は発生しません。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Notifications are only raised for entries inside the directory you are watching.</source>
          <target state="translated">通知を試聴しているディレクトリ内のエントリに対してのみ発生します。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> event to display the file path to the console whenever the watched file is renamed.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph>ウォッチ対象のファイルの名前が変更されるたびに、ファイルのパスをコンソールに表示するイベントです。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Site">
          <source>Gets or sets an <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> を取得または設定します。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Site">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Site">
          <source>Sites bind a <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerHost.Container%2A&gt;</ph> and enable communication between them, as well as provide a way for the container to manage its components.</source>
          <target state="translated">サイトのバインド、<ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph>を<ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerHost.Container%2A&gt;</ph>とそれらの間で通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</source>
          <target state="translated">ディレクトリ変更の結果として発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph> that represents the object used to marshal the event handler calls issued as a result of a directory change.</source>
          <target state="translated">ディレクトリ変更の結果として発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>When <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> is <ph id="ph2">`null`</ph>, methods handling the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph6">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events are called on a thread from the system thread pool.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>は<ph id="ph2">`null`</ph>、処理方法、 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>、<ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>と<ph id="ph6">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph>イベントがシステムのスレッド プールのスレッドで呼び出されます。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>For more information on system thread pools, see <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</source>
          <target state="translated">システム スレッド プールの詳細については、次を参照してください。<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>When the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events are handled by a visual Windows Forms component, such as a <ph id="ph5">&lt;xref:System.Windows.Forms.Button&gt;</ph>, accessing the component through the system thread pool might not work, or may result in an exception.</source>
          <target state="translated">ときに、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>、 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>、および<ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph>ようイベントを Windows フォームのビジュアル コンポーネントによって処理される、 <ph id="ph5">&lt;xref:System.Windows.Forms.Button&gt;</ph>、システム スレッド プールを介したコンポーネントへのアクセスが機能しない、または例外が発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>Avoid this by setting <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> to a Windows Forms component, which causes the methods that handle the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events to be called on the same thread on which the component was created.</source>
          <target state="translated">設定してこれを回避する<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>を処理するメソッドを停止する Windows フォームのコンポーネントを<ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>、 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>、 <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>、および<ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph>コンポーネントが作成されたスレッドと同じスレッドで呼び出されるイベント。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>If the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> is used inside <ph id="ph2">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> in a Windows Forms designer, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> automatically sets to the control that contains the <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>内で使用する<ph id="ph2">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>、Windows フォーム デザイナーで<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>を含むコントロールに自動的に設定、<ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>For example, if you place a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> on a designer for Form1 (which inherits from <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>) the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> is set to the instance of Form1.</source>
          <target state="translated">配置する場合など、 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> Form1 のデザイナー上 (から継承される<ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>)、<ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph>プロパティの<ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>Form1 のインスタンスに設定されています。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="T:System.IO.FileSystemWatcher">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred.</source>
          <target state="translated">発生した変更についての固有な情報を格納する構造体を返す同期メソッド。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph> to watch for.</source>
          <target state="translated">ウォッチする <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</source>
          <target state="translated">監視する変更の種類を指定して、発生した変更についての固有な情報を格納する構造体を返す同期メソッド。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph> that contains specific information on the change that occurred.</source>
          <target state="translated">発生した変更についての固有な情報を格納する <ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>This method waits indefinitely until the first change occurs and then returns.</source>
          <target state="translated">このメソッドは、最初の変更が発生し、返しますまで無期限に待機します。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>This is the same as using <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> with the <ph id="ph2">`timeout`</ph> parameter set to -1.</source>
          <target state="translated">これは、使用する場合と同じ<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph>で、<ph id="ph2">`timeout`</ph>パラメーターが-1 に設定します。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>This method allows an event handler to be invoked to respond to file changes even if the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">このメソッドに応答ファイルの変更の場合でも呼び出されるイベント ハンドラーを使用する、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>プロパティに設定されている<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
          <target state="translated">一部のシステムで<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>短い 8.3 ファイル名の形式を使用してファイルへの変更を報告します。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</source>
          <target state="translated">たとえば、"LongFileName.LongExtension"への変更として報告する"LongFi ~ です。Lon"です。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph> to watch for.</source>
          <target state="translated">ウォッチする <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>The time (in milliseconds) to wait before timing out.</source>
          <target state="translated">タイムアウトまでの待機時間 (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</source>
          <target state="translated">監視する変更の種類とタイムアウトまでの待機時間 (ミリ秒単位) を指定して、発生した変更についての固有な情報を格納する構造体を返す同期メソッド。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph> that contains specific information on the change that occurred.</source>
          <target state="translated">発生した変更についての固有な情報を格納する <ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>This method waits until a change occurs or it has timed out. A value of -1 for the <ph id="ph1">`timeout`</ph> parameter means wait indefinitely.</source>
          <target state="translated">このメソッドは、変更が発生したかがタイムアウトするまで待機します。達すると-1 の値、<ph id="ph1">`timeout`</ph>パラメーターは、無期限に待機することを意味します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>This method allows an event handler to be invoked to respond to file changes even if the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">このメソッドに応答ファイルの変更の場合でも呼び出されるイベント ハンドラーを使用する、<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph>プロパティに設定されている<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
          <target state="translated">一部のシステムで<ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>短い 8.3 ファイル名の形式を使用してファイルへの変更を報告します。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</source>
          <target state="translated">たとえば、"LongFileName.LongExtension"への変更として報告する"LongFi ~ です。Lon"です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>