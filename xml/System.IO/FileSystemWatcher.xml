<Type Name="FileSystemWatcher" FullName="System.IO.FileSystemWatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e87b26ec400399826b4f5e5b8d1daf942933af86" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36485082" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileSystemWatcher : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileSystemWatcher extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.IO.FileSystemWatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemWatcher&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemWatcher : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type FileSystemWatcher = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Changed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.IO.IODescription("")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c0806-101">Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c0806-101">Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-102">使用して<xref:System.IO.FileSystemWatcher>指定したディレクトリ内の変更を監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-102">Use <xref:System.IO.FileSystemWatcher> to watch for changes in a specified directory.</span></span> <span data-ttu-id="c0806-103">指定したディレクトリのファイルとサブディレクトリ内の変更を確認できます。</span><span class="sxs-lookup"><span data-stu-id="c0806-103">You can watch for changes in files and subdirectories of the specified directory.</span></span> <span data-ttu-id="c0806-104">ローカル コンピューター、ネットワーク ドライブ、またはリモート コンピューター上のファイルを監視するコンポーネントを作成することができます。</span><span class="sxs-lookup"><span data-stu-id="c0806-104">You can create a component to watch files on a local computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="c0806-105">すべてのファイルに変更をウォッチするには設定、<xref:System.IO.FileSystemWatcher.Filter%2A>プロパティを空の文字列 ("") またはワイルドカードを使用して ("*.\*")。</span><span class="sxs-lookup"><span data-stu-id="c0806-105">To watch for changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string ("") or use wildcards ("*.\*").</span></span> <span data-ttu-id="c0806-106">特定のファイルをウォッチする、<xref:System.IO.FileSystemWatcher.Filter%2A>プロパティをファイル名。</span><span class="sxs-lookup"><span data-stu-id="c0806-106">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span> <span data-ttu-id="c0806-107">たとえば、MyDoc.txt ファイル内の変更をウォッチする次のように設定します。、<xref:System.IO.FileSystemWatcher.Filter%2A>プロパティを"MyDoc.txt"です。</span><span class="sxs-lookup"><span data-stu-id="c0806-107">For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "MyDoc.txt".</span></span> <span data-ttu-id="c0806-108">特定の種類のファイルでの変更のウォッチできます。</span><span class="sxs-lookup"><span data-stu-id="c0806-108">You can also watch for changes in a certain type of file.</span></span> <span data-ttu-id="c0806-109">たとえば、テキスト ファイルの変更をウォッチする次のように設定します。、<xref:System.IO.FileSystemWatcher.Filter%2A>プロパティを"\*.txt"です。</span><span class="sxs-lookup"><span data-stu-id="c0806-109">For example, to watch for changes in text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt".</span></span>  
  
 <span data-ttu-id="c0806-110">ディレクトリまたはファイルを見ることができますの変更のいくつかの種類があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-110">There are several types of changes you can watch for in a directory or file.</span></span> <span data-ttu-id="c0806-111">などの変化を監視することができます`Attributes`、`LastWrite`日付と時刻、または`Size`ファイルまたはディレクトリのです。</span><span class="sxs-lookup"><span data-stu-id="c0806-111">For example, you can watch for changes in `Attributes`, the `LastWrite` date and time, or the `Size` of files or directories.</span></span> <span data-ttu-id="c0806-112">これは、設定で、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>プロパティのいずれかを<xref:System.IO.NotifyFilters>値。</span><span class="sxs-lookup"><span data-stu-id="c0806-112">This is done by setting the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to one of the <xref:System.IO.NotifyFilters> values.</span></span> <span data-ttu-id="c0806-113">監視できる変更の種類の詳細については、次を参照してください。<xref:System.IO.NotifyFilters>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-113">For more information on the type of changes you can watch, see <xref:System.IO.NotifyFilters>.</span></span>  
  
 <span data-ttu-id="c0806-114">名前変更、削除、またはファイルまたはディレクトリの作成を確認できます。</span><span class="sxs-lookup"><span data-stu-id="c0806-114">You can watch for renaming, deletion, or creation of files or directories.</span></span> <span data-ttu-id="c0806-115">たとえば、テキスト ファイルの名前を変更するをウォッチする次のように設定します。、<xref:System.IO.FileSystemWatcher.Filter%2A>プロパティを「\*.txt」、および呼び出し、<xref:System.IO.FileSystemWatcher.WaitForChanged%2A>メソッドを、<xref:System.IO.WatcherChangeTypes.Renamed>そのパラメーターに指定します。</span><span class="sxs-lookup"><span data-stu-id="c0806-115">For example, to watch for renaming of text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt" and call the <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method with a <xref:System.IO.WatcherChangeTypes.Renamed> specified for its parameter.</span></span>  
  
 <span data-ttu-id="c0806-116">Windows オペレーティング システム、コンポーネントによって作成されたバッファー内のファイルの変更を通知する、<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-116">The Windows operating system notifies your component of file changes in a buffer created by the <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="c0806-117">短期間に多数の変更がある場合、バッファーがオーバーフローすることができます。</span><span class="sxs-lookup"><span data-stu-id="c0806-117">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="c0806-118">これにより、コンポーネントは、ディレクトリ内の変更の追跡とブランケットの通知のみ提供されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-118">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="c0806-119">含むバッファーのサイズを増やすと、<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>プロパティが高コスト、大きなおいてとして小さなバッファーをまだディスクにスワップ アウトできない非ページ メモリから渡される見逃さない任意のファイルに十分な数の変更イベント。</span><span class="sxs-lookup"><span data-stu-id="c0806-119">Increasing the size of the buffer with the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events.</span></span> <span data-ttu-id="c0806-120">バッファー オーバーフローを避けるためを使用して、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>と<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>プロパティ フィルターで除外できます不要なので変更通知します。</span><span class="sxs-lookup"><span data-stu-id="c0806-120">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties so you can filter out unwanted change notifications.</span></span>  
  
 <span data-ttu-id="c0806-121">インスタンスの初期プロパティ値の一覧については<xref:System.IO.FileSystemWatcher>を参照してください、<xref:System.IO.FileSystemWatcher.%23ctor%2A>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="c0806-121">For a list of initial property values for an instance of <xref:System.IO.FileSystemWatcher>, see the <xref:System.IO.FileSystemWatcher.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="c0806-122">使用する場合は、次に注意してください、<xref:System.IO.FileSystemWatcher>クラスです。</span><span class="sxs-lookup"><span data-stu-id="c0806-122">Please note the following when using the <xref:System.IO.FileSystemWatcher> class.</span></span>  
  
-   <span data-ttu-id="c0806-123">隠しファイルは無視されません。</span><span class="sxs-lookup"><span data-stu-id="c0806-123">Hidden files are not ignored.</span></span>  
  
-   <span data-ttu-id="c0806-124">一部のシステムで<xref:System.IO.FileSystemWatcher>短い 8.3 ファイル名の形式を使用してファイルへの変更を報告します。</span><span class="sxs-lookup"><span data-stu-id="c0806-124">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="c0806-125">たとえば、"LongFileName.LongExtension"への変更として報告する"LongFil ~ です。Lon"です。</span><span class="sxs-lookup"><span data-stu-id="c0806-125">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFil~.Lon".</span></span>  
  
-   <span data-ttu-id="c0806-126">このクラスには、リンク確認要求し、すべてのメンバーに適用されるクラス レベルの継承確認要求が含まれています。</span><span class="sxs-lookup"><span data-stu-id="c0806-126">This class contains a link demand and an inheritance demand at the class level that applies to all members.</span></span> <span data-ttu-id="c0806-127">A<xref:System.Security.SecurityException>直前の呼び出し元または派生クラスのいずれかに完全信頼アクセス許可がない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="c0806-127">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission.</span></span> <span data-ttu-id="c0806-128">セキュリティ要求の詳細については、「[リンク確認要求](~/docs/framework/misc/link-demands.md)です。</span><span class="sxs-lookup"><span data-stu-id="c0806-128">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md).</span></span>  
  
-   <span data-ttu-id="c0806-129">設定できる最大サイズ、<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>ネットワーク経由でディレクトリを監視するためのプロパティは、64 KB です。</span><span class="sxs-lookup"><span data-stu-id="c0806-129">The maximum size you can set for the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property for monitoring a directory over the network is 64 KB.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-130">実行している<xref:System.IO.FileSystemWatcher>Windows 98 ではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="c0806-130">Running <xref:System.IO.FileSystemWatcher> on Windows 98 is not supported.</span></span>  
  
## <a name="copying-and-moving-folders"></a><span data-ttu-id="c0806-131">コピーとフォルダーを移動</span><span class="sxs-lookup"><span data-stu-id="c0806-131">Copying and moving folders</span></span>  
 <span data-ttu-id="c0806-132">オペレーティング システムと<xref:System.IO.FileSystemWatcher>オブジェクトは、カット アンド ペースト操作または移動アクションのフォルダーとその内容の名前変更アクションとしてを解釈します。</span><span class="sxs-lookup"><span data-stu-id="c0806-132">The operating system and <xref:System.IO.FileSystemWatcher> object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents.</span></span> <span data-ttu-id="c0806-133">切り取りし、ファイルとフォルダーを監視対象フォルダーに貼り付ける場合、<xref:System.IO.FileSystemWatcher>オブジェクトをレポートとして、新しいフォルダーのみがその内容は、本質的にだけ名前を変更するためです。</span><span class="sxs-lookup"><span data-stu-id="c0806-133">If you cut and paste a folder with files into a folder being watched, the <xref:System.IO.FileSystemWatcher> object reports only the folder as new, but not its contents because they are essentially only renamed.</span></span>  
  
 <span data-ttu-id="c0806-134">フォルダーの内容が移動または監視フォルダーにコピーされることを通知する、提供<xref:System.IO.FileSystemWatcher.OnChanged%2A>と<xref:System.IO.FileSystemWatcher.OnRenamed%2A>次の表で指定されたイベント ハンドラーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c0806-134">To be notified that the contents of folders have been moved or copied into a watched folder, provide <xref:System.IO.FileSystemWatcher.OnChanged%2A> and <xref:System.IO.FileSystemWatcher.OnRenamed%2A> event handler methods as suggested in the following table.</span></span>  
  
|<span data-ttu-id="c0806-135">イベント ハンドラー</span><span class="sxs-lookup"><span data-stu-id="c0806-135">Event Handler</span></span>|<span data-ttu-id="c0806-136">イベント処理</span><span class="sxs-lookup"><span data-stu-id="c0806-136">Events Handled</span></span>|<span data-ttu-id="c0806-137">実行します</span><span class="sxs-lookup"><span data-stu-id="c0806-137">Performs</span></span>|  
|-------------------|--------------------|--------------|  
|<xref:System.IO.FileSystemWatcher.OnChanged%2A>|<span data-ttu-id="c0806-138"><xref:System.IO.FileSystemWatcher.Changed>、<xref:System.IO.FileSystemWatcher.Created>、<xref:System.IO.FileSystemWatcher.Deleted></span><span class="sxs-lookup"><span data-stu-id="c0806-138"><xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted></span></span>|<span data-ttu-id="c0806-139">属性は、作成されたファイル、および削除されたファイルの変更を報告します。</span><span class="sxs-lookup"><span data-stu-id="c0806-139">Report changes in file attributes, created files, and deleted files.</span></span>|  
|<xref:System.IO.FileSystemWatcher.OnRenamed%2A>|<xref:System.IO.FileSystemWatcher.Renamed>|<span data-ttu-id="c0806-140">パスを一覧表示、古いマスター_キーと新しい名前が変更されたファイルとフォルダーのために必要な場合は再帰的に、展開します。</span><span class="sxs-lookup"><span data-stu-id="c0806-140">List the old and new paths of renamed files and folders, expanding recursively if needed.</span></span>|  
  
## <a name="events-and-buffer-sizes"></a><span data-ttu-id="c0806-141">イベントとバッファー サイズ</span><span class="sxs-lookup"><span data-stu-id="c0806-141">Events and Buffer Sizes</span></span>  
 <span data-ttu-id="c0806-142">次の説明に従ってことに注意いくつかの要因に影響するファイル システムの変更イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-142">Note that several factors can affect which file system change events are raised, as described by the following:</span></span>  
  
-   <span data-ttu-id="c0806-143">一般的なファイル システム操作では、1 つ以上のイベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-143">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="c0806-144">たとえば、移動した場合、ファイル別に、いくつかの 1 つのディレクトリから<xref:System.IO.FileSystemWatcher.OnChanged%2A>といくつか<xref:System.IO.FileSystemWatcher.OnCreated%2A>と<xref:System.IO.FileSystemWatcher.OnDeleted%2A>イベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-144">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="c0806-145">複数のイベントを発生させるためファイルが複数の単純な操作で構成される複雑な操作を移動するには、します。</span><span class="sxs-lookup"><span data-stu-id="c0806-145">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="c0806-146">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) がによって検出された追加のファイル システムのイベントを発生可能性があります<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-146">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
-   <span data-ttu-id="c0806-147"><xref:System.IO.FileSystemWatcher>切り替えされたり削除しない限り、ディスクを見ることができます。</span><span class="sxs-lookup"><span data-stu-id="c0806-147">The <xref:System.IO.FileSystemWatcher> can watch disks as long as they are not switched or removed.</span></span> <span data-ttu-id="c0806-148"><xref:System.IO.FileSystemWatcher>イベントを発生させない Cd および Dvd のタイムスタンプとプロパティを変更できないためです。</span><span class="sxs-lookup"><span data-stu-id="c0806-148">The <xref:System.IO.FileSystemWatcher> does not raise events for CDs and DVDs, because time stamps and properties cannot change.</span></span> <span data-ttu-id="c0806-149">リモート コンピューターは、正常に機能するコンポーネントのインストールされている必要なプラットフォームのいずれかが必要です。</span><span class="sxs-lookup"><span data-stu-id="c0806-149">Remote computers must have one of the required platforms installed for the component to function properly.</span></span>  
  
-   <span data-ttu-id="c0806-150">複数<xref:System.IO.FileSystemWatcher>Windows XP Service Pack 1 以前で UNC パスと同じを視聴しているオブジェクトまたは Windows 2000 SP2 またはオブジェクトの以前のバージョンのいずれかでイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-150">If multiple <xref:System.IO.FileSystemWatcher> objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event.</span></span> <span data-ttu-id="c0806-151">Windows XP SP1 を実行しているコンピューターで以降では Windows 2000 SP3 以降または Windows Server 2003 では、すべて<xref:System.IO.FileSystemWatcher>オブジェクトが適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="c0806-151">On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all <xref:System.IO.FileSystemWatcher> objects will raise the appropriate events.</span></span>  
  
 <span data-ttu-id="c0806-152">なお、<xref:System.IO.FileSystemWatcher>バッファー サイズを超えたときにイベントを見逃す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-152">Note that a <xref:System.IO.FileSystemWatcher> may miss an event when the buffer size is exceeded.</span></span> <span data-ttu-id="c0806-153">イベントの欠落を回避するには、次のガイドラインに従います。</span><span class="sxs-lookup"><span data-stu-id="c0806-153">To avoid missing events, follow these guidelines:</span></span>  
  
-   <span data-ttu-id="c0806-154">設定してバッファー サイズを増やす、<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c0806-154">Increase the buffer size by setting the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property.</span></span>  
  
-   <span data-ttu-id="c0806-155">長いファイル名が、バッファーがいっぱいに貢献ため長いファイル名、ファイルの監視を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="c0806-155">Avoid watching files with long file names, because a long file name contributes to filling up the buffer.</span></span> <span data-ttu-id="c0806-156">短い名前を使用してこれらのファイルの名前を変更することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="c0806-156">Consider renaming these files using shorter names.</span></span>  
  
-   <span data-ttu-id="c0806-157">イベントの処理コードをできるだけ短くしてください。</span><span class="sxs-lookup"><span data-stu-id="c0806-157">Keep your event handling code as short as possible.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0806-158">次の例を作成、<xref:System.IO.FileSystemWatcher>実行時に指定されたディレクトリを監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-158">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="c0806-159">変更を監視するコンポーネントを設定`LastWrite`と`LastAccess`時、作成、削除、または、ディレクトリ内のテキスト ファイルの名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="c0806-159">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="c0806-160">場合は、ファイルは、変更、作成、または削除は、ファイルへのパスは、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="c0806-160">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="c0806-161">ファイルの名前が変更されると、新旧のパスは、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="c0806-161">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 <span data-ttu-id="c0806-162">使用して、<xref:System.Diagnostics>と<xref:System.IO>この例の名前空間。</span><span class="sxs-lookup"><span data-stu-id="c0806-162">Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="c0806-163">派生させるため、<see cref="T:System.Diagnostics.ProcessStartInfo" />クラスです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c0806-163">for deriving from the <see cref="T:System.Diagnostics.ProcessStartInfo" /> class.</span>
      </span>
      <span data-ttu-id="c0806-164">要求値:<see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />です。名前付き権限セット:<see langword="FullTrust" />です。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c0806-164">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />; Named Permission Sets: <see langword="FullTrust" />.</span>
      </span>
    </permission>
    <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
    <altmember cref="T:System.IO.NotifyFilters" />
    <altmember cref="T:System.IO.FileSystemEventArgs" />
    <altmember cref="T:System.IO.FileSystemEventHandler" />
    <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
    <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
    <altmember cref="T:System.IO.InternalBufferOverflowException" />
    <altmember cref="T:System.IO.RenamedEventArgs" />
    <altmember cref="T:System.IO.RenamedEventHandler" />
    <altmember cref="T:System.IO.WaitForChangedResult" />
    <altmember cref="T:System.IO.WatcherChangeTypes" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-165">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-165">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c0806-166">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-166">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-167">Windows NT または Windows 2000 がないリモート コンピューターを監視することはできません。</span><span class="sxs-lookup"><span data-stu-id="c0806-167">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="c0806-168">Windows NT 4.0 のコンピューターからリモートの Windows NT 4.0 コンピューターを監視することはできません。</span><span class="sxs-lookup"><span data-stu-id="c0806-168">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span>  
  
 <span data-ttu-id="c0806-169">次の表は、のインスタンスの初期プロパティ値を示しています。<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-169">The following table shows initial property values for an instance of <xref:System.IO.FileSystemWatcher>.</span></span>  
  
|<span data-ttu-id="c0806-170">プロパティ</span><span class="sxs-lookup"><span data-stu-id="c0806-170">Property</span></span>|<span data-ttu-id="c0806-171">初期値</span><span class="sxs-lookup"><span data-stu-id="c0806-171">Initial Value</span></span>|  
|--------------|-------------------|  
|<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>|<span data-ttu-id="c0806-172">ビットごとの OR の組み合わせ`LastWrite`、 `FileName`、および `DirectoryName`</span><span class="sxs-lookup"><span data-stu-id="c0806-172">bitwise OR combination of `LastWrite`, `FileName`, and `DirectoryName`</span></span>|  
|<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>|`false`|  
|<xref:System.IO.FileSystemWatcher.Filter%2A>|<span data-ttu-id="c0806-173">"*.\*"(すべてのファイルを監視します)。</span><span class="sxs-lookup"><span data-stu-id="c0806-173">"*.\*" (Watch all files.)</span></span>|  
|<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>|`false`|  
|<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>|<span data-ttu-id="c0806-174">8192</span><span class="sxs-lookup"><span data-stu-id="c0806-174">8192</span></span>|  
|<xref:System.IO.FileSystemWatcher.Path%2A>|<span data-ttu-id="c0806-175">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="c0806-175">empty string ("")</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c0806-176">コンポーネントは、指定したディレクトリまでを視聴しません、<xref:System.IO.FileSystemWatcher.Path%2A>が設定されていると<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="c0806-176">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0806-177">次の例を作成、<xref:System.IO.FileSystemWatcher>実行時に指定されたディレクトリを監視するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c0806-177">The following example creates a <xref:System.IO.FileSystemWatcher> object to watch the directory specified at run time.</span></span> <span data-ttu-id="c0806-178"><xref:System.IO.FileSystemWatcher>オブジェクトの変更は、監視`LastWrite`と`LastAccess`時刻、および作成するため、削除、テキストの名前を変更するファイルまたはディレクトリにします。</span><span class="sxs-lookup"><span data-stu-id="c0806-178">The <xref:System.IO.FileSystemWatcher> object watches for changes in `LastWrite` and `LastAccess` times, and for the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="c0806-179">ファイルは、変更、作成、または削除は、ファイルへのパスをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="c0806-179">If a file is changed, created, or deleted, the path to the file displays to the console.</span></span> <span data-ttu-id="c0806-180">ファイルの名前が変更されると、新旧のパスは、コンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="c0806-180">When a file is renamed, the old and new paths display to the console.</span></span>  
  
 <span data-ttu-id="c0806-181">この例では、<xref:System.Diagnostics>と<xref:System.IO>名前空間。</span><span class="sxs-lookup"><span data-stu-id="c0806-181">This example uses the <xref:System.Diagnostics> and <xref:System.IO> namespaces.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="c0806-182">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-182">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c0806-183">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-183">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.IO.FileSystemWatcher : string -&gt; System.IO.FileSystemWatcher" Usage="new System.IO.FileSystemWatcher path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="c0806-184">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-184">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0806-185">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory to monitor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-185">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory to monitor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c0806-186">コンポーネントは、指定したディレクトリまでを視聴しません、<xref:System.IO.FileSystemWatcher.Path%2A>が設定されていると<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="c0806-186">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="c0806-187">コンポーネントは、パーソナル コンピューター、ネットワーク ドライブ、またはリモート コンピューター上のファイルを見ることができます。</span><span class="sxs-lookup"><span data-stu-id="c0806-187">The component can watch files on your personal computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="c0806-188">Windows NT または Windows 2000 がないリモート コンピューターを監視することはできません。</span><span class="sxs-lookup"><span data-stu-id="c0806-188">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="c0806-189">Windows NT 4.0 のコンピューターからリモートの Windows NT 4.0 コンピューターを監視することはできません。</span><span class="sxs-lookup"><span data-stu-id="c0806-189">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span> <span data-ttu-id="c0806-190"><xref:System.IO.FileSystemWatcher.Filter%2A>プロパティが既定ですべてのファイルを監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-190">The <xref:System.IO.FileSystemWatcher.Filter%2A> property is set by default to watch all files.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0806-191">The <paramref name="path" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-191">The <paramref name="path" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0806-192">The <paramref name="path" /> parameter is an empty string ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-192">The <paramref name="path" /> parameter is an empty string ("").</span>
          </span>
          <span data-ttu-id="c0806-193">-or-  The path specified through the <paramref name="path" /> parameter does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-193">-or-  The path specified through the <paramref name="path" /> parameter does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="c0806-194">
            <paramref name="path" /> is too long.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-194">
              <paramref name="path" /> is too long.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="c0806-195">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-195">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c0806-196">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-196">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher (string path, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, filter As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher(System::String ^ path, System::String ^ filter);" />
      <MemberSignature Language="F#" Value="new System.IO.FileSystemWatcher : string * string -&gt; System.IO.FileSystemWatcher" Usage="new System.IO.FileSystemWatcher (path, filter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="c0806-197">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-197">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="c0806-198">The type of files to watch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-198">The type of files to watch.</span>
          </span>
          <span data-ttu-id="c0806-199">For example, "\*.txt" watches for changes to all text files.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-199">For example, "\*.txt" watches for changes to all text files.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0806-200">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory and type of files to monitor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-200">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory and type of files to monitor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c0806-201">コンポーネントは、指定したディレクトリまでを視聴しません、<xref:System.IO.FileSystemWatcher.Path%2A>が設定されていると<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="c0806-201">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="c0806-202">コンポーネントは、パーソナル コンピューター、ネットワーク ドライブ、またはリモート コンピューター上のファイルを見ることができます。</span><span class="sxs-lookup"><span data-stu-id="c0806-202">The component can watch files on your personal computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="c0806-203">Windows NT または Windows 2000 がないリモート コンピューターを監視することはできません。</span><span class="sxs-lookup"><span data-stu-id="c0806-203">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="c0806-204">Windows NT 4.0 のコンピューターからリモートの Windows NT 4.0 コンピューターを監視することはできません。</span><span class="sxs-lookup"><span data-stu-id="c0806-204">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c0806-205">The <paramref name="path" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-205">The <paramref name="path" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c0806-206">-or-  The <paramref name="filter" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-206">-or-  The <paramref name="filter" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0806-207">The <paramref name="path" /> parameter is an empty string ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-207">The <paramref name="path" /> parameter is an empty string ("").</span>
          </span>
          <span data-ttu-id="c0806-208">-or-  The path specified through the <paramref name="path" /> parameter does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-208">-or-  The path specified through the <paramref name="path" /> parameter does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="c0806-209">
            <paramref name="path" /> is too long.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-209">
              <paramref name="path" /> is too long.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="c0806-210">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-210">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c0806-211">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-211">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="fileSystemWatcher.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c0806-212">Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-212">Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span>
          </span>
          <span data-ttu-id="c0806-213">The initialization occurs at run time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-213">The initialization occurs at run time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-214">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]デザイン環境では、このメソッドを使用して、コンポーネントの初期化を開始フォームまたは別のコンポーネントを使用します。</span><span class="sxs-lookup"><span data-stu-id="c0806-214">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component used on a form or used by another component.</span></span> <span data-ttu-id="c0806-215"><xref:System.IO.FileSystemWatcher.EndInit%2A>メソッドが初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="c0806-215">The <xref:System.IO.FileSystemWatcher.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="c0806-216">使用して、<xref:System.IO.FileSystemWatcher.BeginInit%2A>と<xref:System.IO.FileSystemWatcher.EndInit%2A>メソッド使用されないように、コントロールが完全に初期化される前にします。</span><span class="sxs-lookup"><span data-stu-id="c0806-216">Using the <xref:System.IO.FileSystemWatcher.BeginInit%2A> and <xref:System.IO.FileSystemWatcher.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.EndInit" />
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Changed" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changed As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Changed;" />
      <MemberSignature Language="F#" Value="member this.Changed : System.IO.FileSystemEventHandler " Usage="member this.Changed : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory change matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-217">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is changed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-217">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-218"><xref:System.IO.FileSystemWatcher.Changed>イベントが発生するは、サイズが変更されたときに、システム属性では、最終書き込み時刻、最終アクセス時刻、またはファイルまたはディレクトリのセキュリティ アクセス許可で監視されているディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="c0806-218">The <xref:System.IO.FileSystemWatcher.Changed> event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-219">一般的なファイル システム操作では、1 つ以上のイベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-219">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="c0806-220">たとえば、移動した場合、ファイル別に、いくつかの 1 つのディレクトリから<xref:System.IO.FileSystemWatcher.OnChanged%2A>といくつか<xref:System.IO.FileSystemWatcher.OnCreated%2A>と<xref:System.IO.FileSystemWatcher.OnDeleted%2A>イベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-220">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="c0806-221">複数のイベントを発生させるためファイルが複数の単純な操作で構成される複雑な操作を移動するには、します。</span><span class="sxs-lookup"><span data-stu-id="c0806-221">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="c0806-222">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) がによって検出された追加のファイル システムのイベントを発生可能性があります<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-222">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
 <span data-ttu-id="c0806-223">使用して<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>をこのイベントが処理されるときに発生する通知の数を制限します。</span><span class="sxs-lookup"><span data-stu-id="c0806-223">Use <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> to restrict the number of notifications raised when this event is handled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-224"><xref:System.IO.FileSystemWatcher.Changed>イベントは、予期しないファイルの名前を変更がディレクトリの名前が変更されるには発生しません。</span><span class="sxs-lookup"><span data-stu-id="c0806-224">The <xref:System.IO.FileSystemWatcher.Changed> event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed.</span></span> <span data-ttu-id="c0806-225">名前を変更するをウォッチするを使用して、<xref:System.IO.FileSystemWatcher.Renamed>イベント。</span><span class="sxs-lookup"><span data-stu-id="c0806-225">To watch for renaming, use the <xref:System.IO.FileSystemWatcher.Renamed> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-226">順序、<xref:System.IO.FileSystemWatcher.Changed>イベントは、他の関連<xref:System.IO.FileSystemWatcher>イベントが変更可能性があります、<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>プロパティは使用されません`null`です。</span><span class="sxs-lookup"><span data-stu-id="c0806-226">The order in which the <xref:System.IO.FileSystemWatcher.Changed> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0806-227">次の例では、<xref:System.IO.FileSystemWatcher.Changed>ウォッチ対象のファイルが変更されるたびに、ファイルのパスをコンソールに表示するイベントです。</span><span class="sxs-lookup"><span data-stu-id="c0806-227">The following example uses the <xref:System.IO.FileSystemWatcher.Changed> event to display the file path to the console whenever the watched file is changed.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Created;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Created" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Created" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Created As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Created;" />
      <MemberSignature Language="F#" Value="member this.Created : System.IO.FileSystemEventHandler " Usage="member this.Created : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory creation matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-228">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-228">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-229">ファイルまたはディレクトリにコピーまたは移動など、いくつかの一般的な状況は、イベントに直接対応していないが発生しないでくださいイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-229">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="c0806-230">ファイルまたはディレクトリをコピーすると、システムを発生させます、<xref:System.IO.FileSystemWatcher.Created>コピー先となるファイルが、そのディレクトリが監視されている場合、ディレクトリ内のイベントです。</span><span class="sxs-lookup"><span data-stu-id="c0806-230">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="c0806-231">コピー元となるディレクトリを別のインスタンスで監視対象がかどうか<xref:System.IO.FileSystemWatcher>イベントは生成されません。</span><span class="sxs-lookup"><span data-stu-id="c0806-231">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="c0806-232">たとえば、2 つのインスタンスを作成する<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-232">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="c0806-233">"C:\My Documents"を監視する FileSystemWatcher1 が設定され、"C:\Your Documents"を監視する FileSystemWatcher2 が設定されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-233">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="c0806-234">「マイ ドキュメント」から"Your Documents"にファイルをコピーする場合、 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 でイベントを発生させるが FileSystemWatcher1 のイベントは生成されません。</span><span class="sxs-lookup"><span data-stu-id="c0806-234">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="c0806-235">コピーとは異なりファイルまたはディレクトリの移動が発生させる 2 つのイベントです。</span><span class="sxs-lookup"><span data-stu-id="c0806-235">Unlike copying, moving a file or directory would raise two events.</span></span> <span data-ttu-id="c0806-236">「マイ ドキュメント」から"Your Documents"にファイルを移動する場合、前の例から、 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 でイベントを発生させると、 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1 によってイベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-236">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-237">一般的なファイル システム操作では、1 つ以上のイベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-237">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="c0806-238">たとえば、移動した場合、ファイル別に、いくつかの 1 つのディレクトリから<xref:System.IO.FileSystemWatcher.OnChanged%2A>といくつか<xref:System.IO.FileSystemWatcher.OnCreated%2A>と<xref:System.IO.FileSystemWatcher.OnDeleted%2A>イベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-238">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="c0806-239">複数のイベントを発生させるためファイルが複数の単純な操作で構成される複雑な操作を移動するには、します。</span><span class="sxs-lookup"><span data-stu-id="c0806-239">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="c0806-240">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) がによって検出された追加のファイル システムのイベントを発生可能性があります<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-240">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-241">順序、<xref:System.IO.FileSystemWatcher.Created>イベントは、他の関連<xref:System.IO.FileSystemWatcher>イベントが変更可能性があります、<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>プロパティは使用されません`null`です。</span><span class="sxs-lookup"><span data-stu-id="c0806-241">The order in which the <xref:System.IO.FileSystemWatcher.Created> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
 <span data-ttu-id="c0806-242"><xref:System.IO.FileSystemWatcher.OnCreated%2A>ファイルが作成されるとすぐにイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-242">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="c0806-243">ファイルの中の場合コピーしたり、監視対象のディレクトリに転送したり、<xref:System.IO.FileSystemWatcher.OnCreated%2A>イベントを発生させる、すぐに続く 1 つ以上<xref:System.IO.FileSystemWatcher.OnChanged%2A>イベント。</span><span class="sxs-lookup"><span data-stu-id="c0806-243">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0806-244">次の例では、<xref:System.IO.FileSystemWatcher.Created>ウォッチ対象のファイルが作成されるたびに、ファイルのパスをコンソールに表示するイベントです。</span><span class="sxs-lookup"><span data-stu-id="c0806-244">The following example uses the <xref:System.IO.FileSystemWatcher.Created> event to display the file path to the console whenever the watched file is created.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.IO.FileSystemEventHandler " Usage="member this.Deleted : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory deletion matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-245">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-245">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is deleted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-246">ファイルまたはディレクトリにコピーまたは移動など、いくつかの一般的な状況は、イベントに直接対応していないが発生しないでくださいイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-246">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="c0806-247">ファイルまたはディレクトリをコピーすると、システムを発生させます、<xref:System.IO.FileSystemWatcher.Created>コピー先となるファイルが、そのディレクトリが監視されている場合、ディレクトリ内のイベントです。</span><span class="sxs-lookup"><span data-stu-id="c0806-247">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="c0806-248">コピー元となるディレクトリを別のインスタンスで監視対象がかどうか<xref:System.IO.FileSystemWatcher>イベントは生成されません。</span><span class="sxs-lookup"><span data-stu-id="c0806-248">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="c0806-249">たとえば、2 つのインスタンスを作成する<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-249">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="c0806-250">"C:\My Documents"を監視する FileSystemWatcher1 が設定され、"C:\Your Documents"を監視する FileSystemWatcher2 が設定されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-250">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="c0806-251">「マイ ドキュメント」から"Your Documents"にファイルをコピーする場合、 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 でイベントを発生させるが FileSystemWatcher1 のイベントは生成されません。</span><span class="sxs-lookup"><span data-stu-id="c0806-251">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="c0806-252">コピーとは異なりファイルまたはディレクトリの移動が発生させる 2 つのイベントです。</span><span class="sxs-lookup"><span data-stu-id="c0806-252">Unlike copying, moving a file or directory would raise two events.</span></span> <span data-ttu-id="c0806-253">「マイ ドキュメント」から"Your Documents"にファイルを移動する場合、前の例から、 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 でイベントを発生させると、 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1 によってイベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-253">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-254">一般的なファイル システム操作では、1 つ以上のイベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-254">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="c0806-255">たとえば、移動した場合、ファイル別に、いくつかの 1 つのディレクトリから<xref:System.IO.FileSystemWatcher.OnChanged%2A>といくつか<xref:System.IO.FileSystemWatcher.OnCreated%2A>と<xref:System.IO.FileSystemWatcher.OnDeleted%2A>イベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-255">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="c0806-256">複数のイベントを発生させるためファイルが複数の単純な操作で構成される複雑な操作を移動するには、します。</span><span class="sxs-lookup"><span data-stu-id="c0806-256">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="c0806-257">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) がによって検出された追加のファイル システムのイベントを発生可能性があります<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-257">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-258">順序、<xref:System.IO.FileSystemWatcher.Deleted>イベントは、他の関連<xref:System.IO.FileSystemWatcher>イベントが変更可能性があります、<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>プロパティは使用されません`null`です。</span><span class="sxs-lookup"><span data-stu-id="c0806-258">The order in which the <xref:System.IO.FileSystemWatcher.Deleted> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0806-259">次の例では、<xref:System.IO.FileSystemWatcher.Deleted>ウォッチ対象のファイルを削除するたびに、ファイルのパスをコンソールに表示するイベントです。</span><span class="sxs-lookup"><span data-stu-id="c0806-259">The following example uses the <xref:System.IO.FileSystemWatcher.Deleted> event to display the file path to the console whenever the watched file is deleted.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="override this.Dispose : unit -&gt; unit" Usage="fileSystemWatcher.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileSystemWatcher.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="c0806-260">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-260">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0806-261">Releases the unmanaged resources used by the <see cref="T:System.IO.FileSystemWatcher" /> and optionally releases the managed resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-261">Releases the unmanaged resources used by the <see cref="T:System.IO.FileSystemWatcher" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-262">このメソッドは、パブリック<xref:System.ComponentModel.Component.Dispose%2A>メソッドおよび<xref:System.Object.Finalize%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c0806-262">This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="c0806-263"><xref:System.ComponentModel.Component.Dispose%2A> プロテクト呼び出します<xref:System.IO.FileSystemWatcher.Dispose%2A>メソッドを`disposing`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="c0806-263"><xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.FileSystemWatcher.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="c0806-264"><xref:System.Object.Finalize%2A> 呼び出す<xref:System.IO.FileSystemWatcher.Dispose%2A>で`disposing`'éý'`false`です。</span><span class="sxs-lookup"><span data-stu-id="c0806-264"><xref:System.Object.Finalize%2A> invokes <xref:System.IO.FileSystemWatcher.Dispose%2A> with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="c0806-265">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.IO.Compression.DeflateStream> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="c0806-265">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.Compression.DeflateStream> references.</span></span> <span data-ttu-id="c0806-266">このメソッドは、参照される各オブジェクトの <xref:System.ComponentModel.Component.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c0806-266">This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c0806-267">
            <para>
              <see cref="M:System.ComponentModel.Component.Dispose" /> 複数回呼び出す他のオブジェクトから。オーバーライドする場合<see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />既に破棄されているを以前の呼び出しでオブジェクトを参照しないように注意する<see cref="M:System.ComponentModel.Component.Dispose" />です。実装する方法の詳細についての<see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />、[Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) を実装を参照してください。 します。詳細については<see cref="M:System.ComponentModel.Component.Dispose" />と<see cref="M:System.Object.Finalize" />、[管理されていない Resources](~/docs/standard/garbage-collection/unmanaged.md) をクリーニングを参照してください。 します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-267">
              <para>
                <see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects. When overriding <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />. For more information about how to implement <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableRaisingEvents : bool with get, set" Usage="System.IO.FileSystemWatcher.EnableRaisingEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("Flag to indicate if this instance is active")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-268">Gets or sets a value indicating whether the component is enabled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-268">Gets or sets a value indicating whether the component is enabled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0806-269">コンポーネントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-269">
              <see langword="true" /> if the component is enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c0806-270">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-270">The default is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c0806-271">デザイナーでコンポーネントを使用しているかどうかは [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]、既定値は<see langword="true" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-271">If you are using the component on a designer in [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], the default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-272">設定しない限り、コンポーネントはイベントを発生させないは<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>に`true`です。</span><span class="sxs-lookup"><span data-stu-id="c0806-272">The component will not raise events unless you set <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-273">コンポーネントは、指定したディレクトリまでを視聴しません、<xref:System.IO.FileSystemWatcher.Path%2A>プロパティが設定されていると<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="c0806-273">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> property has been set and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="c0806-274"><xref:System.IO.FileSystemWatcher.WaitForChanged%2A>メソッドにより、イベント ハンドラーをこのプロパティ設定されている場合でも、ファイルの変更に応答するに呼び出せる`false`です。</span><span class="sxs-lookup"><span data-stu-id="c0806-274">The <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method allows event handlers to be invoked to respond to file changes even if this property is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0806-275">次の例を作成、<xref:System.IO.FileSystemWatcher>実行時に指定されたディレクトリを監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-275">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="c0806-276">変更を監視するコンポーネントを設定`LastWrite`と`LastAccess`時、作成、削除、または、ディレクトリ内のテキスト ファイルの名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="c0806-276">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="c0806-277">場合は、ファイルは、変更、作成、または削除は、ファイルへのパスは、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="c0806-277">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="c0806-278">ファイルの名前が変更されると、新旧のパスは、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="c0806-278">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 <span data-ttu-id="c0806-279">使用して、<xref:System.Diagnostics>と<xref:System.IO>この例の名前空間。</span><span class="sxs-lookup"><span data-stu-id="c0806-279">Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="c0806-280">The <see cref="T:System.IO.FileSystemWatcher" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-280">The <see cref="T:System.IO.FileSystemWatcher" /> object has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="c0806-281">The current operating system is not Microsoft Windows NT or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-281">The current operating system is not Microsoft Windows NT or later.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c0806-282">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path" /> could not be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-282">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path" /> could not be found.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0806-283">
            <see cref="P:System.IO.FileSystemWatcher.Path" /> has not been set or is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-283">
              <see cref="P:System.IO.FileSystemWatcher.Path" /> has not been set or is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="fileSystemWatcher.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c0806-284">Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-284">Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span>
          </span>
          <span data-ttu-id="c0806-285">The initialization occurs at run time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-285">The initialization occurs at run time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-286">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]デザイン環境では、このメソッドを使用して、コンポーネントの初期化を終了フォームまたは別のコンポーネントを使用します。</span><span class="sxs-lookup"><span data-stu-id="c0806-286">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component used on a form or used by another component.</span></span> <span data-ttu-id="c0806-287"><xref:System.IO.FileSystemWatcher.BeginInit%2A>メソッドは、初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="c0806-287">The <xref:System.IO.FileSystemWatcher.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="c0806-288">使用して、<xref:System.IO.FileSystemWatcher.BeginInit%2A>と<xref:System.IO.FileSystemWatcher.EndInit%2A>メソッド使用されないように、コントロールが完全に初期化される前にします。</span><span class="sxs-lookup"><span data-stu-id="c0806-288">Using the <xref:System.IO.FileSystemWatcher.BeginInit%2A> and <xref:System.IO.FileSystemWatcher.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.BeginInit" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.IO.ErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.ErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As ErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::ErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.IO.ErrorEventHandler " Usage="member this.Error : System.IO.ErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.ErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-289">Occurs when the instance of <see cref="T:System.IO.FileSystemWatcher" /> is unable to continue monitoring changes or when the internal buffer overflows.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-289">Occurs when the instance of <see cref="T:System.IO.FileSystemWatcher" /> is unable to continue monitoring changes or when the internal buffer overflows.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-290">このイベントは、問題を防止するたびに、<xref:System.IO.FileSystemWatcher>オブジェクトからの変更の監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-290">This event is raised whenever something prevents the <xref:System.IO.FileSystemWatcher> object from monitoring changes.</span></span> <span data-ttu-id="c0806-291">たとえば、オブジェクトがリモート ディレクトリ内の変更を監視し、そのディレクトリへの接続が失われる、<xref:System.IO.FileSystemWatcher.Error>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-291">For example, if the object is monitoring changes in a remote directory and the connection to that directory is lost, the <xref:System.IO.FileSystemWatcher.Error> event is raised.</span></span>  
  
 <span data-ttu-id="c0806-292">システムでは、ファイルの変更、ユーザーに通知し、その変更をコンポーネントを作成し、Api に渡すバッファーに格納します。</span><span class="sxs-lookup"><span data-stu-id="c0806-292">The system notifies you of file changes, and it stores those changes in a buffer that the component creates and passes to the APIs.</span></span> <span data-ttu-id="c0806-293">短期間に多数の変更がある場合、バッファーがオーバーフローすることができます。</span><span class="sxs-lookup"><span data-stu-id="c0806-293">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="c0806-294">これにより、コンポーネントは、ディレクトリ内の変更の追跡とブランケットの通知のみ提供されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-294">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="c0806-295">バッファーのサイズを増やす、負荷が高い、以外のものであるためにページは維持する、ディスクにスワップ アウトできないメモリ バッファーをできるだけ小さくします。</span><span class="sxs-lookup"><span data-stu-id="c0806-295">Increasing the size of the buffer is expensive, because it comes from non paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</span></span> <span data-ttu-id="c0806-296">バッファー オーバーフローを避けるためを使用して、 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>、 <xref:System.IO.FileSystemWatcher.Filter%2A>、および<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>望ましくないを除外するプロパティの変更通知します。</span><span class="sxs-lookup"><span data-stu-id="c0806-296">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties to filter out unwanted change notifications.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-297">一般的なファイル システム操作では、1 つ以上のイベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-297">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="c0806-298">たとえば、移動した場合、ファイル別に、いくつかの 1 つのディレクトリから<xref:System.IO.FileSystemWatcher.OnChanged%2A>といくつか<xref:System.IO.FileSystemWatcher.OnCreated%2A>と<xref:System.IO.FileSystemWatcher.OnDeleted%2A>イベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-298">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="c0806-299">複数のイベントを発生させるためファイルが複数の単純な操作で構成される複雑な操作を移動するには、します。</span><span class="sxs-lookup"><span data-stu-id="c0806-299">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="c0806-300">同様に、一部のアプリケーション (ウイルス対策ソフトウェアなど) がによって検出された追加のファイル システムのイベントを発生可能性があります<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-300">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.ErrorEventArgs" />
        <altmember cref="T:System.IO.ErrorEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.IO.FileSystemWatcher.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("*.*")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("File name filter pattern")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-301">Gets or sets the filter string used to determine what files are monitored in a directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-301">Gets or sets the filter string used to determine what files are monitored in a directory.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0806-302">フィルター文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-302">The filter string.</span>
          </span>
          <span data-ttu-id="c0806-303">既定値は"* です。\*"(すべてのファイルを監視します)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-303">The default is "*.\*" (Watches all files.)</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-304">すべてのファイルの変更をウォッチする、<xref:System.IO.FileSystemWatcher.Filter%2A>プロパティを空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="c0806-304">To watch changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string ("").</span></span> <span data-ttu-id="c0806-305">特定のファイルをウォッチする、<xref:System.IO.FileSystemWatcher.Filter%2A>プロパティをファイル名。</span><span class="sxs-lookup"><span data-stu-id="c0806-305">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span> <span data-ttu-id="c0806-306">たとえば、MyDoc.txt ファイル内の変更をウォッチする次のように設定します。、<xref:System.IO.FileSystemWatcher.Filter%2A>プロパティを"MyDoc.txt"です。</span><span class="sxs-lookup"><span data-stu-id="c0806-306">For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "MyDoc.txt".</span></span> <span data-ttu-id="c0806-307">特定の種類のファイルでの変更のウォッチできます。</span><span class="sxs-lookup"><span data-stu-id="c0806-307">You can also watch for changes in a certain type of file.</span></span> <span data-ttu-id="c0806-308">たとえば、任意のテキスト ファイルの変更をウォッチする次のように設定します。、<xref:System.IO.FileSystemWatcher.Filter%2A>プロパティを"\*.txt"です。</span><span class="sxs-lookup"><span data-stu-id="c0806-308">For example, to watch for changes in any text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt".</span></span> <span data-ttu-id="c0806-309">などの複数のフィルターの使用"\*.txt&#124;\*.doc"はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="c0806-309">Use of multiple filters such as "\*.txt&#124;\*.doc" is not supported.</span></span>  
  
 <span data-ttu-id="c0806-310"><xref:System.IO.FileSystemWatcher.Filter%2A>プロパティは、後に変更することができます、<xref:System.IO.FileSystemWatcher>オブジェクトがイベントの受信を開始します。</span><span class="sxs-lookup"><span data-stu-id="c0806-310">The <xref:System.IO.FileSystemWatcher.Filter%2A> property can be changed after the <xref:System.IO.FileSystemWatcher> object has started receiving events.</span></span>  
  
 <span data-ttu-id="c0806-311">不必要な通知をフィルター処理の詳細については、次を参照してください。、 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>、 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>、および<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c0806-311">For more information about filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
 <span data-ttu-id="c0806-312"><xref:System.IO.FileSystemWatcher.Filter%2A> 次の例に示すように、一致するファイルのワイルドカードを受け付けます。</span><span class="sxs-lookup"><span data-stu-id="c0806-312"><xref:System.IO.FileSystemWatcher.Filter%2A> accepts wildcards for matching files, as shown in the following examples.</span></span>  
  
|<span data-ttu-id="c0806-313">フィルター文字列</span><span class="sxs-lookup"><span data-stu-id="c0806-313">Filter string</span></span>|<span data-ttu-id="c0806-314">次のファイルを監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-314">Watches the following files</span></span>|  
|-------------------|---------------------------------|  
|<span data-ttu-id="c0806-315">*.\*</span><span class="sxs-lookup"><span data-stu-id="c0806-315">*.\*</span></span>|<span data-ttu-id="c0806-316">すべてのファイル (既定値)。</span><span class="sxs-lookup"><span data-stu-id="c0806-316">All files (default).</span></span> <span data-ttu-id="c0806-317">空の文字列 ("") もすべてのファイルを監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-317">An empty string ("") also watches all files.</span></span>|  
|<span data-ttu-id="c0806-318">「\*.txt」</span><span class="sxs-lookup"><span data-stu-id="c0806-318">\*.txt</span></span>|<span data-ttu-id="c0806-319">"Txt"拡張子を持つすべてのファイル。</span><span class="sxs-lookup"><span data-stu-id="c0806-319">All files with a "txt" extension.</span></span>|  
|<span data-ttu-id="c0806-320">\*recipe.doc</span><span class="sxs-lookup"><span data-stu-id="c0806-320">\*recipe.doc</span></span>|<span data-ttu-id="c0806-321">"Doc"拡張子を持つには、「料理」で終わるすべてのファイル。</span><span class="sxs-lookup"><span data-stu-id="c0806-321">All files ending in "recipe" with a "doc" extension.</span></span>|  
|<span data-ttu-id="c0806-322">win\*.xml</span><span class="sxs-lookup"><span data-stu-id="c0806-322">win\*.xml</span></span>|<span data-ttu-id="c0806-323">"Xml"拡張子が"win"で始まるすべてのファイル。</span><span class="sxs-lookup"><span data-stu-id="c0806-323">All files beginning with "win" with an "xml" extension.</span></span>|  
|<span data-ttu-id="c0806-324">Sales \* 200 ですか。xls</span><span class="sxs-lookup"><span data-stu-id="c0806-324">Sales\*200?.xls</span></span>|<span data-ttu-id="c0806-325">次に一致します。</span><span class="sxs-lookup"><span data-stu-id="c0806-325">Matches the following:</span></span><br /><br /> <span data-ttu-id="c0806-326">販売年 7 月 2001.xlsSales Aug 2002.xlsSales 年 3 月 2004.xls</span><span class="sxs-lookup"><span data-stu-id="c0806-326">Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls</span></span><br /><br /> <span data-ttu-id="c0806-327">一致しません。</span><span class="sxs-lookup"><span data-stu-id="c0806-327">but does not match:</span></span><br /><br /> <span data-ttu-id="c0806-328">販売 Nov 1999.xls</span><span class="sxs-lookup"><span data-stu-id="c0806-328">Sales Nov 1999.xls</span></span>|  
|<span data-ttu-id="c0806-329">MyReport.Doc</span><span class="sxs-lookup"><span data-stu-id="c0806-329">MyReport.Doc</span></span>|<span data-ttu-id="c0806-330">MyReport.doc のみを監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-330">Watches only MyReport.doc</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c0806-331">次の例を作成、<xref:System.IO.FileSystemWatcher>実行時に指定されたディレクトリを監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-331">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="c0806-332">変更を監視するコンポーネントを設定`LastWrite`と`LastAccess`時、作成、削除、または、ディレクトリ内のテキスト ファイルの名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="c0806-332">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="c0806-333">場合は、ファイルは、変更、作成、または削除は、ファイルへのパスは、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="c0806-333">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="c0806-334">ファイルの名前が変更されると、新旧のパスは、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="c0806-334">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 <span data-ttu-id="c0806-335">使用して、<xref:System.Diagnostics>と<xref:System.IO>この例の名前空間。</span><span class="sxs-lookup"><span data-stu-id="c0806-335">Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~FileSystemWatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!FileSystemWatcher ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="fileSystemWatcher.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeSubdirectories">
      <MemberSignature Language="C#" Value="public bool IncludeSubdirectories { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeSubdirectories" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeSubdirectories As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeSubdirectories { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeSubdirectories : bool with get, set" Usage="System.IO.FileSystemWatcher.IncludeSubdirectories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("Flag to indicate we want to watch subdirectories")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-336">Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-336">Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0806-337">サブディレクトリを監視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-337">
              <see langword="true" /> if you want to monitor subdirectories; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c0806-338">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-338">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-339">設定<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>に`true`ファイルとディレクトリを指定したディレクトリ内に含まれる変更通知を監視する場合、<xref:System.IO.FileSystemWatcher.Path%2A>プロパティ、およびそのサブディレクトリです。</span><span class="sxs-lookup"><span data-stu-id="c0806-339">Set <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> to `true` when you want to watch for change notifications for files and directories contained within the directory specified through the <xref:System.IO.FileSystemWatcher.Path%2A> property, and its subdirectories.</span></span> <span data-ttu-id="c0806-340">設定、<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>プロパティを`false`内部バッファーに送信された通知の数を削減できます。</span><span class="sxs-lookup"><span data-stu-id="c0806-340">Setting the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property to `false` helps reduce the number of notifications sent to the internal buffer.</span></span> <span data-ttu-id="c0806-341">不必要な通知をフィルター処理の詳細については、次を参照してください。、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>と<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c0806-341">For more information on filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
 <span data-ttu-id="c0806-342">ときに`true`、<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>は直下の子ディレクトリだけでなく、全体のサブ ツリーを再帰的です。</span><span class="sxs-lookup"><span data-stu-id="c0806-342">When `true`, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> is recursive through the entire sub tree, not just the immediate child directories.</span></span> <span data-ttu-id="c0806-343">内のファイルまたはサブツリー内のディレクトリへの相対パスを返します、<xref:System.IO.FileSystemEventArgs.Name%2A>プロパティの<xref:System.IO.FileSystemEventArgs>と<xref:System.IO.RenamedEventArgs.OldName%2A>プロパティの<xref:System.IO.RenamedEventArgs>を試聴している変更に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="c0806-343">The relative path to a file or directory within the sub tree returns in the <xref:System.IO.FileSystemEventArgs.Name%2A> property of <xref:System.IO.FileSystemEventArgs> and the <xref:System.IO.RenamedEventArgs.OldName%2A> property of <xref:System.IO.RenamedEventArgs>, depending on changes you are watching for.</span></span> <span data-ttu-id="c0806-344">完全修飾パスを取得することができます、<xref:System.IO.FileSystemEventArgs.FullPath%2A>プロパティの<xref:System.IO.FileSystemEventArgs>と<xref:System.IO.RenamedEventArgs.OldFullPath%2A>のプロパティ<xref:System.IO.RenamedEventArgs>を試聴している変更に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="c0806-344">You can get the fully qualified path from the <xref:System.IO.FileSystemEventArgs.FullPath%2A> property of <xref:System.IO.FileSystemEventArgs> and the <xref:System.IO.RenamedEventArgs.OldFullPath%2A> property of <xref:System.IO.RenamedEventArgs>, depending on the changes you are watching for.</span></span>  
  
 <span data-ttu-id="c0806-345">試聴しているディレクトリのサブ ツリーで、ディレクトリが作成された場合と<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>は`true`、そのディレクトリが自動的に監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-345">If a directory is created in the sub tree of the directory you are watching, and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> is `true`, that directory will automatically be watched.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemEventArgs.FullPath" />
        <altmember cref="P:System.IO.RenamedEventArgs.OldFullPath" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
        <altmember cref="P:System.IO.FileSystemEventArgs.Name" />
        <altmember cref="P:System.IO.RenamedEventArgs.OldName" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="InternalBufferSize">
      <MemberSignature Language="C#" Value="public int InternalBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InternalBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property InternalBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int InternalBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.InternalBufferSize : int with get, set" Usage="System.IO.FileSystemWatcher.InternalBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(8192)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-346">Gets or sets the size (in bytes) of the internal buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-346">Gets or sets the size (in bytes) of the internal buffer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0806-347">内部バッファー サイズ (バイト単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-347">The internal buffer size in bytes.</span>
          </span>
          <span data-ttu-id="c0806-348">既定値は 8192 (8 KB) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-348">The default is 8192 (8 KB).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-349">4 KB 以上では、バッファーを設定することができますが、64 KB を超えない必要があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-349">You can set the buffer to 4 KB or larger, but it must not exceed 64 KB.</span></span> <span data-ttu-id="c0806-350">設定を試行した場合、<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>プロパティにより小さい 4096 (バイト単位)、値は破棄されます、<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>プロパティが 4096 バイトに設定します。</span><span class="sxs-lookup"><span data-stu-id="c0806-350">If you try to set the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property to less than 4096 bytes, your value is discarded and the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is set to 4096 bytes.</span></span> <span data-ttu-id="c0806-351">パフォーマンスを得るには、Intel ベース コンピューター上で 4 KB の倍数を使用します。</span><span class="sxs-lookup"><span data-stu-id="c0806-351">For best performance, use a multiple of 4 KB on Intel-based computers.</span></span>  
  
 <span data-ttu-id="c0806-352">システム ファイルの変更のコンポーネントに通知し、その変更をコンポーネントを作成し、Api に渡すバッファーに格納します。</span><span class="sxs-lookup"><span data-stu-id="c0806-352">The system notifies the component of file changes, and it stores those changes in a buffer the component creates and passes to the APIs.</span></span> <span data-ttu-id="c0806-353">各イベントには、最大 16 バイトのファイル名を含まない、メモリを使用できます。</span><span class="sxs-lookup"><span data-stu-id="c0806-353">Each event can use up to 16 bytes of memory, not including the file name.</span></span> <span data-ttu-id="c0806-354">短期間に多数の変更がある場合、バッファーがオーバーフローすることができます。</span><span class="sxs-lookup"><span data-stu-id="c0806-354">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="c0806-355">これにより、コンポーネントは、ディレクトリ内の変更の追跡とブランケットの通知のみ提供されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-355">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="c0806-356">バッファーのサイズを増やすことを防ぐことができます変更イベントをファイル システムがありません。</span><span class="sxs-lookup"><span data-stu-id="c0806-356">Increasing the size of the buffer can prevent missing file system change events.</span></span> <span data-ttu-id="c0806-357">ただし、バッファー サイズを増やすことは、コストがディスクに保管しておいてバッファー可能な限り小さくスワップ アウトできない非ページ メモリのものであるためです。</span><span class="sxs-lookup"><span data-stu-id="c0806-357">However, increasing buffer size is expensive, because it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</span></span> <span data-ttu-id="c0806-358">バッファー オーバーフローを避けるためを使用して、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>と<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>望ましくないを除外するプロパティの変更通知します。</span><span class="sxs-lookup"><span data-stu-id="c0806-358">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties to filter out unwanted change notifications.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
      </Docs>
    </Member>
    <Member MemberName="NotifyFilter">
      <MemberSignature Language="C#" Value="public System.IO.NotifyFilters NotifyFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.NotifyFilters NotifyFilter" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.NotifyFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyFilter As NotifyFilters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::NotifyFilters NotifyFilter { System::IO::NotifyFilters get(); void set(System::IO::NotifyFilters value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyFilter : System.IO.NotifyFilters with get, set" Usage="System.IO.FileSystemWatcher.NotifyFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("Flag to indicate which change event we want to monitor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.NotifyFilters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-359">Gets or sets the type of changes to watch for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-359">Gets or sets the type of changes to watch for.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0806-360">
            <see cref="T:System.IO.NotifyFilters" /> 値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-360">One of the <see cref="T:System.IO.NotifyFilters" /> values.</span>
          </span>
          <span data-ttu-id="c0806-361">既定値は <see langword="LastWrite" />、<see langword="FileName" />、および <see langword="DirectoryName" /> のビットごとの OR の組み合わせです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-361">The default is the bitwise OR combination of <see langword="LastWrite" />, <see langword="FileName" />, and <see langword="DirectoryName" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-362">メンバーを組み合わせることができます、<xref:System.IO.NotifyFilters>列挙型を一度に変更の 1 つ以上の種類を監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-362">You can combine the members of the <xref:System.IO.NotifyFilters> enumeration to watch for more than one type of change at a time.</span></span> <span data-ttu-id="c0806-363">たとえば、ファイルのサイズの変更との変更を見ることができます、`LastWrite`時間。</span><span class="sxs-lookup"><span data-stu-id="c0806-363">For example, you can watch for changes in size of a file, and for changes in the `LastWrite` time.</span></span> <span data-ttu-id="c0806-364">これは、イベントを発生させますが、ファイルまたはフォルダーのサイズの変更や、`LastWrite`ファイルまたはフォルダーの時間。</span><span class="sxs-lookup"><span data-stu-id="c0806-364">This raises an event anytime there is a change in file or folder size, or a change in the `LastWrite` time of the file or folder.</span></span>  
  
 <span data-ttu-id="c0806-365">これは、不必要な通知をフィルター処理する方法の 1 つです。</span><span class="sxs-lookup"><span data-stu-id="c0806-365">This is one way to filter out unwanted notifications.</span></span> <span data-ttu-id="c0806-366">不必要な通知をフィルター処理の詳細については、次を参照してください。、 <xref:System.IO.FileSystemWatcher.Filter%2A>、 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>、および<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c0806-366">For more information on filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0806-367">次の例を作成、<xref:System.IO.FileSystemWatcher>実行時に指定されたディレクトリを監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-367">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="c0806-368">変更を監視するコンポーネントを設定`LastWrite`と`LastAccess`時、作成、削除、または、ディレクトリ内のテキスト ファイルの名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="c0806-368">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="c0806-369">場合は、ファイルは、変更、作成、または削除は、ファイルへのパスは、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="c0806-369">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="c0806-370">ファイルの名前が変更されると、新旧のパスは、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="c0806-370">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 <span data-ttu-id="c0806-371">使用して、<xref:System.Diagnostics>と<xref:System.IO>この例の名前空間。</span><span class="sxs-lookup"><span data-stu-id="c0806-371">Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0806-372">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-372">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="c0806-373">The value that is being set is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-373">The value that is being set is not valid.</span>
          </span>
        </exception>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="c0806-374">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-374">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0806-375">Raises the <see cref="E:System.IO.FileSystemWatcher.Changed" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-375">Raises the <see cref="E:System.IO.FileSystemWatcher.Changed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-376"><xref:System.IO.FileSystemWatcher.OnChanged%2A> サイズ、システム属性、最終書き込み時刻、最終アクセス時刻、または、ファイルまたはディレクトリの監視されているディレクトリのセキュリティ アクセス許可に変更が加えられたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-376"><xref:System.IO.FileSystemWatcher.OnChanged%2A> is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</span></span>  
  
 <span data-ttu-id="c0806-377">使用して、<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>いつ発生するイベントの数を制限するプロパティ、<xref:System.IO.FileSystemWatcher.Changed>イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="c0806-377">Use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to restrict the number of events raised when the <xref:System.IO.FileSystemWatcher.Changed> event is handled.</span></span>  
  
 <span data-ttu-id="c0806-378"><xref:System.IO.FileSystemWatcher.OnCreated%2A>ファイルが作成されるとすぐにイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-378">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="c0806-379">ファイルの中の場合コピーしたり、監視対象のディレクトリに転送したり、<xref:System.IO.FileSystemWatcher.OnCreated%2A>イベントを発生させる、すぐに続く 1 つ以上<xref:System.IO.FileSystemWatcher.OnChanged%2A>イベント。</span><span class="sxs-lookup"><span data-stu-id="c0806-379">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
 <span data-ttu-id="c0806-380">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-380">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="c0806-381">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。</span><span class="sxs-lookup"><span data-stu-id="c0806-381">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c0806-382">
            <para>オーバーライドする場合<see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />メソッドです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-382">
              <para>When overriding <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Changed" />
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnCreated">
      <MemberSignature Language="C#" Value="protected void OnCreated (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnCreated(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnCreated (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnCreated(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnCreated : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="c0806-383">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-383">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0806-384">Raises the <see cref="E:System.IO.FileSystemWatcher.Created" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-384">Raises the <see cref="E:System.IO.FileSystemWatcher.Created" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-385"><xref:System.IO.FileSystemWatcher.OnCreated%2A> ファイルまたはディレクトリが監視されているディレクトリに作成されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-385"><xref:System.IO.FileSystemWatcher.OnCreated%2A> is called when a file or directory is created in the directory being monitored.</span></span>  
  
 <span data-ttu-id="c0806-386">ファイルまたはディレクトリにコピーまたは移動など、いくつかの一般的な状況は、イベントに直接対応していないが発生しないでくださいイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-386">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="c0806-387">ファイルまたはディレクトリをコピーすると、システムを発生させます、<xref:System.IO.FileSystemWatcher.Created>コピー先となるファイルが、そのディレクトリが監視されている場合、ディレクトリ内のイベントです。</span><span class="sxs-lookup"><span data-stu-id="c0806-387">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="c0806-388">コピー元となるディレクトリを別のインスタンスで監視対象がかどうか<xref:System.IO.FileSystemWatcher>イベントは生成されません。</span><span class="sxs-lookup"><span data-stu-id="c0806-388">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="c0806-389">たとえば、2 つのインスタンスを作成する<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-389">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="c0806-390">"C:\My Documents"を監視する FileSystemWatcher1 が設定され、"C:\Your Documents"を監視する FileSystemWatcher2 が設定されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-390">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="c0806-391">「マイ ドキュメント」からファイルをコピーし、"Your Documents"に貼り付ける場合、 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 でイベントを発生させるが FileSystemWatcher1 のイベントは生成されません。</span><span class="sxs-lookup"><span data-stu-id="c0806-391">If you copy a file from "My Documents" and paste it into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="c0806-392">、コピーとは異なり、ファイルまたはディレクトリの移動にも 2 つのイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="c0806-392">Unlike copying, moving a file or directory raises two events.</span></span> <span data-ttu-id="c0806-393">「マイ ドキュメント」から"Your Documents"にファイルを移動する場合、前の例から、 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 でイベントを発生させると、 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1 でイベントを発生させるとします。</span><span class="sxs-lookup"><span data-stu-id="c0806-393">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised in FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised in FileSystemWatcher1.</span></span>  
  
 <span data-ttu-id="c0806-394"><xref:System.IO.FileSystemWatcher.OnCreated%2A>ファイルが作成されるとすぐにイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-394">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="c0806-395">ファイルの中の場合コピーしたり、監視対象のディレクトリに転送したり、<xref:System.IO.FileSystemWatcher.OnCreated%2A>イベントを発生させる、すぐに続く 1 つ以上<xref:System.IO.FileSystemWatcher.OnChanged%2A>イベント。</span><span class="sxs-lookup"><span data-stu-id="c0806-395">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
 <span data-ttu-id="c0806-396">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-396">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="c0806-397">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。</span><span class="sxs-lookup"><span data-stu-id="c0806-397">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c0806-398">
            <para>オーバーライドする場合<see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />メソッドです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-398">
              <para>When overriding <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnDeleted">
      <MemberSignature Language="C#" Value="protected void OnDeleted (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnDeleted(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnDeleted (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnDeleted(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnDeleted : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="c0806-399">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-399">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0806-400">Raises the <see cref="E:System.IO.FileSystemWatcher.Deleted" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-400">Raises the <see cref="E:System.IO.FileSystemWatcher.Deleted" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-401"><xref:System.IO.FileSystemWatcher.OnDeleted%2A> ファイルまたは、監視されているディレクトリ内のディレクトリが削除されると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-401"><xref:System.IO.FileSystemWatcher.OnDeleted%2A> is called when a file or directory, within the directory being monitored, is deleted.</span></span>  
  
 <span data-ttu-id="c0806-402">ファイルまたはディレクトリにコピーまたは移動など、いくつかの一般的な状況は、イベントに直接対応していないが発生しないでくださいイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-402">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="c0806-403">ファイルまたはディレクトリをコピーすると、システムを発生させます、<xref:System.IO.FileSystemWatcher.Created>コピー先となるファイルが、そのディレクトリが監視されている場合、ディレクトリ内のイベントです。</span><span class="sxs-lookup"><span data-stu-id="c0806-403">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="c0806-404">コピー元となるディレクトリを別のインスタンスで監視対象がかどうか<xref:System.IO.FileSystemWatcher>イベントは生成されません。</span><span class="sxs-lookup"><span data-stu-id="c0806-404">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="c0806-405">たとえば、2 つのインスタンスを作成する<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-405">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="c0806-406">"C:\My Documents"を監視する FileSystemWatcher1 が設定され、"C:\Your Documents"を監視する FileSystemWatcher2 が設定されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-406">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="c0806-407">「マイ ドキュメント」から"Your Documents"にファイルをコピーする場合、 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 でイベントを発生させるが FileSystemWatcher1 のイベントは生成されません。</span><span class="sxs-lookup"><span data-stu-id="c0806-407">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="c0806-408">、コピーとは異なり、ファイルまたはディレクトリの移動にも 2 つのイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="c0806-408">Unlike copying, moving a file or directory raises two events.</span></span> <span data-ttu-id="c0806-409">「マイ ドキュメント」から"Your Documents"にファイルを移動する場合、前の例から、 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 でイベントを発生させると、 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1 によってイベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-409">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
 <span data-ttu-id="c0806-410">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-410">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="c0806-411">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。</span><span class="sxs-lookup"><span data-stu-id="c0806-411">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c0806-412">
            <para>オーバーライドする場合<see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />メソッドです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-412">
              <para>When overriding <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="protected void OnError (System.IO.ErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnError(class System.IO.ErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnError (e As ErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnError(System::IO::ErrorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnError : System.IO.ErrorEventArgs -&gt; unit" Usage="fileSystemWatcher.OnError e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.ErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="c0806-413">An <see cref="T:System.IO.ErrorEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-413">An <see cref="T:System.IO.ErrorEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0806-414">Raises the <see cref="E:System.IO.FileSystemWatcher.Error" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-414">Raises the <see cref="E:System.IO.FileSystemWatcher.Error" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-415"><xref:System.IO.FileSystemWatcher.OnError%2A> エラーが発生すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-415"><xref:System.IO.FileSystemWatcher.OnError%2A> is called when an error occurs.</span></span>  
  
 <span data-ttu-id="c0806-416">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-416">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="c0806-417">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。</span><span class="sxs-lookup"><span data-stu-id="c0806-417">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c0806-418">
            <para>オーバーライドする場合<see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />メソッドです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-418">
              <para>When overriding <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Error" />
        <altmember cref="T:System.IO.ErrorEventArgs" />
        <altmember cref="T:System.IO.ErrorEventHandler" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
      </Docs>
    </Member>
    <Member MemberName="OnRenamed">
      <MemberSignature Language="C#" Value="protected void OnRenamed (System.IO.RenamedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnRenamed(class System.IO.RenamedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnRenamed (e As RenamedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnRenamed(System::IO::RenamedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnRenamed : System.IO.RenamedEventArgs -&gt; unit" Usage="fileSystemWatcher.OnRenamed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.RenamedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="c0806-419">A <see cref="T:System.IO.RenamedEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-419">A <see cref="T:System.IO.RenamedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0806-420">Raises the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-420">Raises the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-421"><xref:System.IO.FileSystemWatcher.OnRenamed%2A> ファイルまたは監視されているディレクトリ内のディレクトリの名前を変更すると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-421"><xref:System.IO.FileSystemWatcher.OnRenamed%2A> is called when a file or directory within the directory being monitored is renamed.</span></span> <span data-ttu-id="c0806-422">その<xref:System.IO.RenamedEventArgs>引数には、変更、新旧のパスと、古いマスター_キーと新しい名前の型など、名前変更操作に関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="c0806-422">Its <xref:System.IO.RenamedEventArgs> argument contains information about the renaming operation, such as the type of change, the old and new path, and the old and new name.</span></span> <span data-ttu-id="c0806-423">なお、<xref:System.IO.FileSystemEventArgs.Name>プロパティが null の可能性がある場合のイベントの名前を変更、<xref:System.IO.FileSystemWatcher>はオペレーティング システムから古いマスター_キーと新しい名前イベントの照合を取得できません。</span><span class="sxs-lookup"><span data-stu-id="c0806-423">Note that its <xref:System.IO.FileSystemEventArgs.Name> property may be null for renamed events if the <xref:System.IO.FileSystemWatcher> does not get matching old and new name events from the operating system.</span></span> 
  
 <span data-ttu-id="c0806-424">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-424">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="c0806-425">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。</span><span class="sxs-lookup"><span data-stu-id="c0806-425">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="c0806-426">
            <para>オーバーライドする場合<see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />メソッドです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-426">
              <para>When overriding <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Renamed" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.IO.FileSystemWatcher.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Diagnostics.Design.FSWPathEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("The directory to monitor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-427">Gets or sets the path of the directory to watch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-427">Gets or sets the path of the directory to watch.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0806-428">監視するパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-428">The path to monitor.</span>
          </span>
          <span data-ttu-id="c0806-429">既定値は、空の文字列 ("") です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-429">The default is an empty string ("").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-430">これは、ディレクトリへの完全修飾パスです。</span><span class="sxs-lookup"><span data-stu-id="c0806-430">This is a fully qualified path to a directory.</span></span> <span data-ttu-id="c0806-431">場合、<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>プロパティは`true`、このディレクトリは、システムが変更を監視するルートです。 それ以外の場合は、のみのディレクトリを監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-431">If the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property is `true`, this directory is the root at which the system watches for changes; otherwise it is the only directory watched.</span></span> <span data-ttu-id="c0806-432">特定のファイルをウォッチする、<xref:System.IO.FileSystemWatcher.Path%2A>プロパティを完全修飾、正しいディレクトリと<xref:System.IO.FileSystemWatcher.Filter%2A>プロパティをファイル名。</span><span class="sxs-lookup"><span data-stu-id="c0806-432">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Path%2A> property to the fully qualified, correct directory, and the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span>  
  
 <span data-ttu-id="c0806-433"><xref:System.IO.FileSystemWatcher.Path%2A>プロパティは、汎用名前付け規則 (UNC) パスをサポートします。</span><span class="sxs-lookup"><span data-stu-id="c0806-433">The <xref:System.IO.FileSystemWatcher.Path%2A> property supports Universal Naming Convention (UNC) paths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-434">コンポーネントの変更を監視できる前に、このプロパティを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-434">This property must be set before the component can watch for changes.</span></span>  
  
 <span data-ttu-id="c0806-435">ディレクトリの名前が変更される、<xref:System.IO.FileSystemWatcher>自動的にそれ自体が再接続されると、新しく名前を変更した項目にします。</span><span class="sxs-lookup"><span data-stu-id="c0806-435">When a directory is renamed, the <xref:System.IO.FileSystemWatcher> automatically reattaches itself to the newly renamed item.</span></span> <span data-ttu-id="c0806-436">設定する場合など、<xref:System.IO.FileSystemWatcher.Path%2A>プロパティ"C:\My Documents"を"C:\Your Documents"にディレクトリを手動で変更し、コンポーネントは、新しく名前を変更したディレクトリの変更通知を待機してが続行されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-436">For example, if you set the <xref:System.IO.FileSystemWatcher.Path%2A> property to "C:\My Documents" and then manually rename the directory to "C:\Your Documents", the component continues listening for change notifications on the newly renamed directory.</span></span> <span data-ttu-id="c0806-437">ただし、ときに問い合わせる必要が、<xref:System.IO.FileSystemWatcher.Path%2A>プロパティ、古いパスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="c0806-437">However, when you ask for the <xref:System.IO.FileSystemWatcher.Path%2A> property, it contains the old path.</span></span> <span data-ttu-id="c0806-438">これは、コンポーネントがウォッチするディレクトリを判断されるため、ディレクトリの名前ではなく、ハンドルに基づきます。</span><span class="sxs-lookup"><span data-stu-id="c0806-438">This happens because the component determines what directory watches based on the handle, rather than the name of the directory.</span></span> <span data-ttu-id="c0806-439">名前を変更しても、ハンドルは影響しません。</span><span class="sxs-lookup"><span data-stu-id="c0806-439">Renaming does not affect the handle.</span></span> <span data-ttu-id="c0806-440">したがって、コンポーネントを破棄し、更新することがなく再作成する場合、<xref:System.IO.FileSystemWatcher.Path%2A>プロパティ、アプリケーションは、ディレクトリが存在しないために失敗します。</span><span class="sxs-lookup"><span data-stu-id="c0806-440">So, if you destroy the component, and then recreate it without updating the <xref:System.IO.FileSystemWatcher.Path%2A> property, your application will fail because the directory no longer exists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0806-441">次の例を作成、<xref:System.IO.FileSystemWatcher>実行時に指定されたディレクトリを監視します。</span><span class="sxs-lookup"><span data-stu-id="c0806-441">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="c0806-442">変更を監視するコンポーネントを設定`LastWrite`と`LastAccess`時、作成、削除、または、ディレクトリ内のテキスト ファイルの名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="c0806-442">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="c0806-443">場合は、ファイルは、変更、作成、または削除は、ファイルへのパスは、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="c0806-443">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="c0806-444">ファイルの名前が変更されると、新旧のパスは、コンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="c0806-444">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 <span data-ttu-id="c0806-445">使用して、<xref:System.Diagnostics>と<xref:System.IO>この例の名前空間。</span><span class="sxs-lookup"><span data-stu-id="c0806-445">Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c0806-446">The specified path does not exist or could not be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-446">The specified path does not exist or could not be found.</span>
          </span>
          <span data-ttu-id="c0806-447">-or-  The specified path contains wildcard characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-447">-or-  The specified path contains wildcard characters.</span>
          </span>
          <span data-ttu-id="c0806-448">-or-  The specified path contains invalid path characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-448">-or-  The specified path contains invalid path characters.</span>
          </span>
        </exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Renamed">
      <MemberSignature Language="C#" Value="public event System.IO.RenamedEventHandler Renamed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.RenamedEventHandler Renamed" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Renamed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Renamed As RenamedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::RenamedEventHandler ^ Renamed;" />
      <MemberSignature Language="F#" Value="member this.Renamed : System.IO.RenamedEventHandler " Usage="member this.Renamed : System.IO.RenamedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory rename matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.RenamedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-449">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is renamed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-449">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is renamed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-450">`Renamed`イベントは、<xref:System.IO.RenamedEventHandler>を次のシグネチャを持つデリゲート。</span><span class="sxs-lookup"><span data-stu-id="c0806-450">The `Renamed` event is an <xref:System.IO.RenamedEventHandler> delegate that has the following signature:</span></span>

 ```csharp
public delegate void Renamed(object sender, RenamedEventArgs e);
 ```
 ```vb
Public Delegate Sub RenamedEventHandler(sender As Object, e As RenamedEventArgs)
 ```
 <span data-ttu-id="c0806-451"><xref:System.IO.RenamedEventArgs>オブジェクトは、名前の変更の種類など、名前変更操作に関する情報を提供 (、<xref:System.IO.FileSystemEventArgs.ChangeType>プロパティ) を古いマスター_キーと新しい名前と、新旧のパス。</span><span class="sxs-lookup"><span data-stu-id="c0806-451">The <xref:System.IO.RenamedEventArgs> object provides information about the renaming operation, such as the type of the rename (the <xref:System.IO.FileSystemEventArgs.ChangeType> property), the old and new name, and the old and new path.</span></span> <span data-ttu-id="c0806-452">なお、<xref:System.IO.FileSystemEventArgs.Name>プロパティが null の可能性がある場合のイベントの名前を変更、<xref:System.IO.FileSystemWatcher>はオペレーティング システムから古いマスター_キーと新しい名前イベントの照合を取得できません。</span><span class="sxs-lookup"><span data-stu-id="c0806-452">Note that the <xref:System.IO.FileSystemEventArgs.Name> property may be null for renamed events if the <xref:System.IO.FileSystemWatcher> does not get matching old and new name events from the operating system.</span></span>

 <span data-ttu-id="c0806-453">ウォッチするディレクトリの名前を変更する場合は、通知は発生しません。</span><span class="sxs-lookup"><span data-stu-id="c0806-453">Renaming the directory you are watching will not raise a notification.</span></span> <span data-ttu-id="c0806-454">通知を試聴しているディレクトリ内のエントリに対してのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="c0806-454">Notifications are only raised for entries inside the directory you are watching.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0806-455">次の例では、<xref:System.IO.FileSystemWatcher.Renamed>ウォッチ対象のファイルの名前が変更されるたびに、ファイルのパスをコンソールに表示するイベントです。</span><span class="sxs-lookup"><span data-stu-id="c0806-455">The following example uses the <xref:System.IO.FileSystemWatcher.Renamed> event to display the file path to the console whenever the watched file is renamed.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.IO.FileSystemWatcher.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-456">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-456">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0806-457">
            <see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.IO.FileSystemWatcher" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-457">An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-458">サイトのバインド、<xref:System.ComponentModel.Component>を<xref:System.ComponentModel.Design.IDesignerHost.Container%2A>とそれらの間で通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="c0806-458">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Design.IDesignerHost.Container%2A> and enable communication between them, as well as provide a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.IO.FileSystemWatcher.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("The object used to marshal the event handler calls resulting from a directory change")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-459">Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-459">Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c0806-460">ディレクトリ変更の結果として発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-460">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> that represents the object used to marshal the event handler calls issued as a result of a directory change.</span>
          </span>
          <span data-ttu-id="c0806-461">既定値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-461">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-462">ときに<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>は`null`、処理方法、 <xref:System.IO.FileSystemWatcher.Changed>、 <xref:System.IO.FileSystemWatcher.Created>、<xref:System.IO.FileSystemWatcher.Deleted>と<xref:System.IO.FileSystemWatcher.Renamed>イベントがシステムのスレッド プールのスレッドで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c0806-462">When <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> is `null`, methods handling the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events are called on a thread from the system thread pool.</span></span> <span data-ttu-id="c0806-463">システム スレッド プールの詳細については、次を参照してください。<xref:System.Threading.ThreadPool>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-463">For more information on system thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="c0806-464">ときに、 <xref:System.IO.FileSystemWatcher.Changed>、 <xref:System.IO.FileSystemWatcher.Created>、 <xref:System.IO.FileSystemWatcher.Deleted>、および<xref:System.IO.FileSystemWatcher.Renamed>ようイベントを Windows フォームのビジュアル コンポーネントによって処理される、 <xref:System.Windows.Forms.Button>、システム スレッド プールを介したコンポーネントへのアクセスが機能しない、または例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c0806-464">When the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events are handled by a visual Windows Forms component, such as a <xref:System.Windows.Forms.Button>, accessing the component through the system thread pool might not work, or may result in an exception.</span></span> <span data-ttu-id="c0806-465">設定してこれを回避する<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>を処理するメソッドを停止する Windows フォームのコンポーネントを<xref:System.IO.FileSystemWatcher.Changed>、 <xref:System.IO.FileSystemWatcher.Created>、 <xref:System.IO.FileSystemWatcher.Deleted>、および<xref:System.IO.FileSystemWatcher.Renamed>コンポーネントが作成されたスレッドと同じスレッドで呼び出されるイベント。</span><span class="sxs-lookup"><span data-stu-id="c0806-465">Avoid this by setting <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> to a Windows Forms component, which causes the methods that handle the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events to be called on the same thread on which the component was created.</span></span>  
  
 <span data-ttu-id="c0806-466">場合、<xref:System.IO.FileSystemWatcher>内で使用する[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]、Windows フォーム デザイナーで<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>を含むコントロールに自動的に設定、<xref:System.IO.FileSystemWatcher>です。</span><span class="sxs-lookup"><span data-stu-id="c0806-466">If the <xref:System.IO.FileSystemWatcher> is used inside [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] in a Windows Forms designer, <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> automatically sets to the control that contains the <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="c0806-467">配置する場合など、 <xref:System.IO.FileSystemWatcher> Form1 のデザイナー上 (から継承される<xref:System.Windows.Forms.Form>)、<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>プロパティの<xref:System.IO.FileSystemWatcher>Form1 のインスタンスに設定されています。</span><span class="sxs-lookup"><span data-stu-id="c0806-467">For example, if you place a <xref:System.IO.FileSystemWatcher> on a designer for Form1 (which inherits from <xref:System.Windows.Forms.Form>) the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property of <xref:System.IO.FileSystemWatcher> is set to the instance of Form1.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForChanged">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c0806-468">A synchronous method that returns a structure that contains specific information on the change that occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-468">A synchronous method that returns a structure that contains specific information on the change that occurred.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForChanged">
      <MemberSignature Language="C#" Value="public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.WaitForChangedResult WaitForChanged(valuetype System.IO.WatcherChangeTypes changeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChanged (changeType As WatcherChangeTypes) As WaitForChangedResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::WaitForChangedResult WaitForChanged(System::IO::WatcherChangeTypes changeType);" />
      <MemberSignature Language="F#" Value="member this.WaitForChanged : System.IO.WatcherChangeTypes -&gt; System.IO.WaitForChangedResult" Usage="fileSystemWatcher.WaitForChanged changeType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.WaitForChangedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
      </Parameters>
      <Docs>
        <param name="changeType">
          <span data-ttu-id="c0806-469">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-469">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0806-470">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-470">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0806-471">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-471">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-472">このメソッドは、最初の変更が発生し、返しますまで無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="c0806-472">This method waits indefinitely until the first change occurs and then returns.</span></span> <span data-ttu-id="c0806-473">これは、使用する場合と同じ<xref:System.IO.FileSystemWatcher.WaitForChanged%2A>で、`timeout`パラメーターが-1 に設定します。</span><span class="sxs-lookup"><span data-stu-id="c0806-473">This is the same as using <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> with the `timeout` parameter set to -1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-474">このメソッドに応答ファイルの変更の場合でも呼び出されるイベント ハンドラーを使用する、<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>プロパティに設定されている`false`です。</span><span class="sxs-lookup"><span data-stu-id="c0806-474">This method allows an event handler to be invoked to respond to file changes even if the <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="c0806-475">一部のシステムで<xref:System.IO.FileSystemWatcher>短い 8.3 ファイル名の形式を使用してファイルへの変更を報告します。</span><span class="sxs-lookup"><span data-stu-id="c0806-475">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="c0806-476">たとえば、"LongFileName.LongExtension"への変更として報告する"LongFi ~ です。Lon"です。</span><span class="sxs-lookup"><span data-stu-id="c0806-476">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.WaitForChangedResult" />
      </Docs>
    </Member>
    <Member MemberName="WaitForChanged">
      <MemberSignature Language="C#" Value="public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.WaitForChangedResult WaitForChanged(valuetype System.IO.WatcherChangeTypes changeType, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChanged (changeType As WatcherChangeTypes, timeout As Integer) As WaitForChangedResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::WaitForChangedResult WaitForChanged(System::IO::WatcherChangeTypes changeType, int timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitForChanged : System.IO.WatcherChangeTypes * int -&gt; System.IO.WaitForChangedResult" Usage="fileSystemWatcher.WaitForChanged (changeType, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.WaitForChangedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="changeType">
          <span data-ttu-id="c0806-477">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-477">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="c0806-478">The time (in milliseconds) to wait before timing out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-478">The time (in milliseconds) to wait before timing out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c0806-479">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-479">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c0806-480">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c0806-480">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0806-481">このメソッドは、変更が発生したかがタイムアウトするまで待機します。達すると-1 の値、`timeout`パラメーターは、無期限に待機することを意味します。</span><span class="sxs-lookup"><span data-stu-id="c0806-481">This method waits until a change occurs or it has timed out. A value of -1 for the `timeout` parameter means wait indefinitely.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c0806-482">このメソッドに応答ファイルの変更の場合でも呼び出されるイベント ハンドラーを使用する、<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>プロパティに設定されている`false`です。</span><span class="sxs-lookup"><span data-stu-id="c0806-482">This method allows an event handler to be invoked to respond to file changes even if the <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="c0806-483">一部のシステムで<xref:System.IO.FileSystemWatcher>短い 8.3 ファイル名の形式を使用してファイルへの変更を報告します。</span><span class="sxs-lookup"><span data-stu-id="c0806-483">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="c0806-484">たとえば、"LongFileName.LongExtension"への変更として報告する"LongFi ~ です。Lon"です。</span><span class="sxs-lookup"><span data-stu-id="c0806-484">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.WaitForChangedResult" />
      </Docs>
    </Member>
  </Members>
</Type>