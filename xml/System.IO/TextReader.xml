<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TextReader.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c6862423f98168f7a3dfd8baa4b6dabc6629b49d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6862423f98168f7a3dfd8baa4b6dabc6629b49d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.TextReader">
          <source>Represents a reader that can read a sequential series of characters.</source>
          <target state="translated">一連の文字を読み取ることができるリーダーを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> is the abstract base class of <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.StringReader&gt;</ph>, which read characters from streams and strings, respectively.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> 抽象基本クラスは、<ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph>と<ph id="ph3">&lt;xref:System.IO.StringReader&gt;</ph>、それぞれストリームと、文字列から文字を読み取るをします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>Use these derived classes to open a text file for reading a specified range of characters, or to create a reader based on an existing stream.</source>
          <target state="translated">これらの派生クラスを使用して、指定された範囲の文字を読み取るためのテキスト ファイルを開く、または既存のストリームに基づくリーダーを作成します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">この型は、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">この型から派生した任意の型を使用してが完了したら、直接的または間接的にそれを破棄する必要があります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">型の直接 dispose を呼び出す、<ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph>メソッドで、 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">直接ことのない破棄する場合など、言語コンストラクトを使用して<ph id="ph1">`using`</ph>(C# の場合) または<ph id="ph2">`Using`</ph>(Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>For more information, see Dispose and the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">詳細については、Dispose、"を使用して、オブジェクトを実装する IDisposable"」、およびを参照してください、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスに関するトピック。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> クラスは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">そのため、コードでそれをインスタンス化することはありません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>The <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> class derives from <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> and provides implementations of the members for reading from a stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph>クラスから派生<ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>し、ストリームから読み取るのために、メンバーの実装を提供します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>The following example shows how to read all the characters in a file by using the <ph id="ph1">&lt;xref:System.IO.StreamReader.ReadAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">次の例を使用して、ファイルのすべての文字を読み取る方法を示しています、<ph id="ph1">&lt;xref:System.IO.StreamReader.ReadAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>It checks whether each character is a letter, digit, or white space before adding the character to an instance of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class.</source>
          <target state="translated">インスタンスに文字を追加する前に、アルファベット、数字、または空白文字に各文字かどうかを確認、<ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>A derived class must minimally implement the <ph id="ph1">&lt;see cref="M:System.IO.TextReader.Peek" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.TextReader.Read" /&gt;</ph> methods to make a useful instance of <ph id="ph3">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">派生クラスで実装する必要があります最小限、<ph id="ph1">&lt;see cref="M:System.IO.TextReader.Peek" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.IO.TextReader.Read" /&gt;</ph>させるに便利なインスタンス メソッド<ph id="ph3">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.#ctor">
          <source>Use this constructor for derived classes.</source>
          <target state="translated">派生クラスのこのコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Close">
          <source>Closes the <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> and releases any system resources associated with the <ph id="ph2">&lt;see langword="TextReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> を閉じ、その <ph id="ph2">&lt;see langword="TextReader" /&gt;</ph> と関連付けられているシステム リソースを解放します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>This implementation of <ph id="ph1">`Close`</ph> calls the <ph id="ph2">&lt;xref:System.IO.StringReader.Dispose%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> method and passes it a <ph id="ph3">`true`</ph> value.</source>
          <target state="translated">この実装<ph id="ph1">`Close`</ph>呼び出し、<ph id="ph2">&lt;xref:System.IO.StringReader.Dispose%28System.Boolean%29?displayProperty=nameWithType&gt;</ph>メソッド渡します、<ph id="ph3">`true`</ph>値。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>Flushing the text reader will not flush its underlying encoder unless you explicitly call <ph id="ph1">`Close`</ph>.</source>
          <target state="translated">明示的に呼び出す場合を除き、フラッシュされたテキスト リーダーは、基になるエンコーダー フラッシュされません<ph id="ph1">`Close`</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>Setting the <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType&gt;</ph> property to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType&gt;</ph>プロパティを<ph id="ph2">`true`</ph>に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</source>
          <target state="translated">このシナリオでは、UTF8、UTF7、エンコーダーは、隣接する文字または文字列を受信した後にのみ特定の文字をエンコードすることができますに影響します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>In derived classes, do not override the <ph id="ph1">&lt;xref:System.IO.TextReader.Close%2A&gt;</ph> method.</source>
          <target state="translated">派生クラスでオーバーライドしない、<ph id="ph1">&lt;xref:System.IO.TextReader.Close%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>Instead, override the <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> method to add code for releasing resources.</source>
          <target state="translated">代わりに、オーバーライド、<ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%28System.Boolean%29?displayProperty=nameWithType&gt;</ph>リソースを解放するためのコードを追加するメソッド。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:System.IO.TextReader">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> object.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> オブジェクトによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> object.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> オブジェクトによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> を使い終わったら <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> メソッドによって、<ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> は使用不可の状態になります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.IO.TextReader&gt;</ph> was occupying.</source>
          <target state="translated">呼び出した後<ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph>へのすべての参照を解放する必要があります、<ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>ガベージ コレクターがメモリを再利用できるようにする、<ph id="ph3">&lt;xref:System.IO.TextReader&gt;</ph>占有されていた。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>と<bpt id="p2">[</bpt>Dispose メソッドの実装<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> への最後の参照を解放する前に、必ず <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> を呼び出してください。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> object's <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">そうしないと、ガベージ コレクターが <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> オブジェクトの <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> メソッドを呼び出すまで、使用されているリソースは解放されません。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">`Dispose`</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>By default, this method specifies the <ph id="ph1">`disposing`</ph> parameter as <ph id="ph2">`true`</ph>.</source>
          <target state="translated">既定では、このメソッドを指定します、<ph id="ph1">`disposing`</ph>パラメーターとして<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> specifies the <ph id="ph2">`disposing`</ph> parameter as <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 指定します、<ph id="ph2">`disposing`</ph>パラメーターとして<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.TextReader&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> パラメーターが <ph id="ph2">`true`</ph> の場合、このメソッドは、この <ph id="ph3">&lt;xref:System.IO.TextReader&gt;</ph> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドは、参照される各オブジェクトの <ph id="ph1">`Dispose`</ph> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> は、他のオブジェクトから複数回呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">このメソッドをオーバーライドする場合は、既に破棄されているを以前の呼び出しでオブジェクトを参照しないように注意する<ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>For more information about how to implement this method, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">このメソッドを実装する方法の詳細については、次を参照してください。 <bpt id="p1">[</bpt>Dispose メソッドの実装<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.IO.TextReader.Null">
          <source>Provides a <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> with no data to read from.</source>
          <target state="translated">読み取り対象のデータを <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> に提供しません。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.TextReader.Null">
          <source>Reading from the <ph id="ph1">&lt;xref:System.IO.TextReader.Null&gt;</ph> text reader is similar to reading from the end of a stream:</source>
          <target state="translated">読み取り、<ph id="ph1">&lt;xref:System.IO.TextReader.Null&gt;</ph>テキスト リーダーは、ストリームの末尾からの読み取りと似ています。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.TextReader.Null">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> methods return -1.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph>メソッドは-1 を返します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.TextReader.Null">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.ReadBlock%2A&gt;</ph> method returns zero.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader.ReadBlock%2A&gt;</ph>は 0 を返します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.TextReader.Null">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph>メソッドを返します。<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.TextReader.Null">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> method returns an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph>メソッドは、空の文字列を返します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Peek">
          <source>Reads the next character without changing the state of the reader or the character source.</source>
          <target state="translated">リーダーや文字の読み取り元の状態を変更せずに、次の文字を読み取ります。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Peek">
          <source>Returns the next available character without actually reading it from the reader.</source>
          <target state="translated">リーダーから実際に文字を読み取らずに次の文字を返します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Peek">
          <source>An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.</source>
          <target state="translated">読み取り対象の次の文字を表す整数。使用できる文字がないか、リーダーがシークをサポートしていない場合は -1。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> method returns an integer value in order to determine whether the end of the file, or another error has occurred.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph>メソッドは、ファイル、または別のエラーの終了が発生したかどうかを確認するために整数値を返します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>This allows a user to first check if the returned value is -1 before casting it to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> type.</source>
          <target state="translated">これにより、ユーザーをまず確認かどうか、返される値は-1 にキャストする前に、<ph id="ph1">&lt;xref:System.Char&gt;</ph>型です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>The current position of the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> is not changed by this operation.</source>
          <target state="translated">現在の位置、<ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>この操作では変更されません。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>The returned value is -1 if no more characters are available.</source>
          <target state="translated">可能な文字がない場合、返される値は-1 です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>The default implementation returns -1.</source>
          <target state="translated">既定の実装では、-1 が返されます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> クラスは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">そのため、コードでそれをインスタンス化することはありません。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.Peek%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">使用する例については、<ph id="ph1">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph>メソッドを参照してください、<ph id="ph2">&lt;xref:System.IO.StreamReader.Peek%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Peek">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="T:System.IO.TextReader">
          <source>Reads data from the text reader.</source>
          <target state="translated">テキスト リーダーからデータを読み取ります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read">
          <source>Reads the next character from the text reader and advances the character position by one character.</source>
          <target state="translated">テキスト リーダーから次の文字を読み取り、1 文字分だけ文字位置を進めます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read">
          <source>The next character from the text reader, or -1 if no more characters are available.</source>
          <target state="translated">テキスト リーダーからの次の文字。それ以上読み取り可能な文字がない場合は -1。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read">
          <source>The default implementation returns -1.</source>
          <target state="translated">既定の実装では、-1 が返されます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> クラスは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">そのため、コードでそれをインスタンス化することはありません。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.Read%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">使用する例については、<ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph>メソッドを参照してください、<ph id="ph2">&lt;xref:System.IO.StreamReader.Read%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified character array with the values between <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the characters read from the current source.</source>
          <target state="translated">このメソッドが返るときに、指定した文字配列のうち、<bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> から (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) までの値を、現在のソースから読み取られた文字に置き換えられたものが含まれます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The position in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing.</source>
          <target state="translated">書き込みを開始する <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内の位置。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The maximum number of characters to read.</source>
          <target state="translated">読み取り対象の最大文字数。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.</source>
          <target state="translated">指定された文字数をバッファーに読み取る前にリーダーの末尾に到達した場合、メソッドは制御を返します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.</source>
          <target state="translated">指定した最大文字数を現在のリーダーから読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters that have been read.</source>
          <target state="translated">読み取られた文字数。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The number will be less than or equal to <ph id="ph1">&lt;paramref name="count" /&gt;</ph>, depending on whether the data is available within the reader.</source>
          <target state="translated">この数値は、リーダー内に使用できるデータがあるかどうかによって異なりますが、<ph id="ph1">&lt;paramref name="count" /&gt;</ph> 以下の数値になります。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This method returns 0 (zero) if it is called when no more characters are left to read.</source>
          <target state="translated">読み取り対象の文字がない場合にこのメソッドを呼び出すと、0 (ゼロ) が返されます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This method returns after either <ph id="ph1">`count`</ph> characters are read or the end of the file is reached.</source>
          <target state="translated">いずれかの後にこのメソッドが戻る<ph id="ph1">`count`</ph>文字が読み取られたか、ファイルの末尾に到達します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.TextReader.ReadBlock%2A&gt;</ph> is a blocking version of this method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader.ReadBlock%2A&gt;</ph> このメソッドのブロックのバージョンです。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> クラスは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">そのため、コードでそれをインスタンス化することはありません。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.Read%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">使用する例については、<ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph>メソッドを参照してください、<ph id="ph2">&lt;xref:System.IO.StreamReader.Read%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">バッファーの長さから <ph id="ph1">&lt;paramref name="index" /&gt;</ph> を引いた値が <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified character array with the values between <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the characters read from the current source.</source>
          <target state="translated">このメソッドが返るときに、指定した文字配列のうち、<bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> から (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) までの値を、現在のソースから読み取られた文字に置き換えられたものが含まれます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The position in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing.</source>
          <target state="translated">書き込みを開始する <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内の位置。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The maximum number of characters to read.</source>
          <target state="translated">読み取り対象の最大文字数。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</source>
          <target state="translated">指定された文字数をバッファーに読み取る前にテキストの末尾に到達した場合は、現在のメソッドが返ります。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.</source>
          <target state="translated">指定した最大文字数を現在のテキスト リーダーから非同期に読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">非同期の読み取り操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</source>
          <target state="translated">現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、テキストの末尾に到達した場合は 0 になることがあります。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The task completes after either the number of characters specified by the <ph id="ph1">`count`</ph> parameter are read or the end of the file is reached.</source>
          <target state="translated">タスクが完了した後にいずれかで指定された文字の数、<ph id="ph1">`count`</ph>パラメーターの読み取りまたはファイルの末尾に到達します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> クラスは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">そのため、コードでそれをインスタンス化することはありません。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadAsync%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">使用する例については、<ph id="ph1">&lt;xref:System.IO.TextReader.ReadAsync%2A&gt;</ph>メソッドを参照してください、<ph id="ph2">&lt;xref:System.IO.StreamReader.ReadAsync%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が、バッファーの長さよりも大きくなっています。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The text reader has been disposed.</source>
          <target state="translated">テキスト リーダーは破棄されています。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The reader is currently in use by a previous read operation.</source>
          <target state="translated">リーダーは、前の読み取り操作によって現在使用されています。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>When this method returns, this parameter contains the specified character array with the values between <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> -1) replaced by the characters read from the current source.</source>
          <target state="translated">このメソッドが返るときに、このパラメーターには、指定した文字配列のうち、<bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> から (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) までの値を、現在のソースから読み取られた文字に置き換えられたものが含まれます。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The position in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing.</source>
          <target state="translated">書き込みを開始する <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内の位置。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The maximum number of characters to read.</source>
          <target state="translated">読み取り対象の最大文字数。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.</source>
          <target state="translated">指定した最大文字数を現在のテキスト リーダーから読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters that have been read.</source>
          <target state="translated">読み取られた文字数。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The number will be less than or equal to <ph id="ph1">&lt;paramref name="count" /&gt;</ph>, depending on whether all input characters have been read.</source>
          <target state="translated">この数値は、すべての入力文字が読み取られたかどうかによって異なりますが、<ph id="ph1">&lt;paramref name="count" /&gt;</ph> 以下の数値になります。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The position of the underlying text reader is advanced by the number of characters that were read into <ph id="ph1">`buffer`</ph>.</source>
          <target state="translated">基になるテキスト リーダーの位置に読み取られた文字数による高度な<ph id="ph1">`buffer`</ph>します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The method blocks until either <ph id="ph1">`count`</ph> characters are read, or all characters have been read.</source>
          <target state="translated">メソッド ブロックされるまで、<ph id="ph1">`count`</ph>文字が読み取られ、またはすべての文字が読み取られました。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>This is a blocking version of <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph>.</source>
          <target state="translated">これは、ブロックしているバージョンの<ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">バッファーの長さから <ph id="ph1">&lt;paramref name="index" /&gt;</ph> を引いた値が <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified character array with the values between <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the characters read from the current source.</source>
          <target state="translated">このメソッドが返るときに、指定した文字配列のうち、<bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> から (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) までの値を、現在のソースから読み取られた文字に置き換えられたものが含まれます。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The position in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing.</source>
          <target state="translated">書き込みを開始する <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内の位置。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The maximum number of characters to read.</source>
          <target state="translated">読み取り対象の最大文字数。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</source>
          <target state="translated">指定された文字数をバッファーに読み取る前にテキストの末尾に到達した場合は、現在のメソッドが返ります。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.</source>
          <target state="translated">指定した最大文字数を現在のテキスト リーダーから非同期に読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">非同期の読み取り操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</source>
          <target state="translated">現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、テキストの末尾に到達した場合は 0 になることがあります。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The task does not complete until either the number of characters specified by the <ph id="ph1">`count`</ph> parameter are read, or the end of the text has been reached.</source>
          <target state="translated">タスクが完了しないかまでで指定された文字の数、<ph id="ph1">`count`</ph>パラメーターが読み取られ、または、テキストの末尾に達しています。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が負の値です。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が、バッファーの長さよりも大きくなっています。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The text reader has been disposed.</source>
          <target state="translated">テキスト リーダーは破棄されています。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The reader is currently in use by a previous read operation.</source>
          <target state="translated">リーダーは、前の読み取り操作によって現在使用されています。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>Reads a line of characters from the text reader and returns the data as a string.</source>
          <target state="translated">テキスト リーダーから 1 行分の文字を読み取り、そのデータを文字列として返します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>The next line from the reader, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if all characters have been read.</source>
          <target state="translated">リーダーの次の行。またはすべての文字が読み取られた場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>A line is defined as a sequence of characters followed by a carriage return (0x000d), a line feed (0x000a), a carriage return followed by a line feed, <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=nameWithType&gt;</ph>, or the end-of-stream marker.</source>
          <target state="translated">行は、一連の文字の後にキャリッジ リターン (0x000d)、ライン フィード (0x000a) として定義されます、キャリッジ リターン、ライン フィード、続いて<ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=nameWithType&gt;</ph>、またはストリームの終わりのマーカー。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>The string that is returned does not contain the terminating carriage return or line feed.</source>
          <target state="translated">返される文字列には、末尾にキャリッジ リターンとライン フィードが含まれていません。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>The return value is <ph id="ph1">`null`</ph> if the end of the input stream has been reached.</source>
          <target state="translated">戻り値は<ph id="ph1">`null`</ph>入力ストリームの末尾に達している場合。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>If the method throws an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, the reader's position in the underlying <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <ph id="ph3">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> buffer are discarded.</source>
          <target state="translated">メソッドがスローされた場合、<ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph>例外、基になるリーダーの位置<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>文字を読み取るには、メソッドができましたが、内部に既に読み取られた文字の数によっては、高度な<ph id="ph3">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph>バッファーは破棄されます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> object.</source>
          <target state="translated">既に読み取られた文字が回復することはできず、再初期化してのみアクセスできるストリーム内のリーダーの位置は変更できないため、<ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>If the initial position within the stream is unknown or the stream does not support seeking, the underlying <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> also needs to be reinitialized.</source>
          <target state="translated">ストリーム内の最初の位置が不明か、ストリームがシークを基になるをサポートしていない場合<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>も再初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>To avoid such a situation and produce robust code you should use the <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method and store the read characters in a preallocated buffer.</source>
          <target state="translated">このような状況を回避する必要がありますを使用する堅牢なコードを生成して、<ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph>読み取りが事前に割り当てられたバッファーの文字メソッドとストアです。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> クラスは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">そのため、コードでそれをインスタンス化することはありません。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">使用する例については、<ph id="ph1">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph>メソッドを参照してください、<ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>There is insufficient memory to allocate a buffer for the returned string.</source>
          <target state="translated">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>The number of characters in the next line is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph></source>
          <target state="translated">次の行の文字数が、<ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>Reads a line of characters asynchronously and returns the data as a string.</source>
          <target state="translated">1 行分の文字を非同期的に読み取り、そのデータを文字列として返します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">非同期の読み取り操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the next line from the text reader, or is <ph id="ph2">&lt;see langword="null" /&gt;</ph> if all of the characters have been read.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> パラメーターの値には、テキスト リーダーの次の行が含まれます。または、すべての文字が読み取られた場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> クラスは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">そのため、コードでそれをインスタンス化することはありません。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLineAsync%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">使用する例については、<ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph>メソッドを参照してください、<ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLineAsync%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>If the current <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> represents the standard input stream returned by the <ph id="ph2">&lt;xref:System.Console.In%2A?displayProperty=nameWithType&gt;</ph> property, the <ph id="ph3">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph> method executes synchronously rather than asynchronously.</source>
          <target state="translated">場合、現在<ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>によって返される標準入力ストリームを表す、<ph id="ph2">&lt;xref:System.Console.In%2A?displayProperty=nameWithType&gt;</ph>プロパティ、<ph id="ph3">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph>メソッドの非同期的にではなく同期的に実行します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>The number of characters in the next line is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">次の行の文字数が、<ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>The text reader has been disposed.</source>
          <target state="translated">テキスト リーダーは破棄されています。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>The reader is currently in use by a previous read operation.</source>
          <target state="translated">リーダーは、前の読み取り操作によって現在使用されています。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>Reads all characters from the current position to the end of the text reader and returns them as one string.</source>
          <target state="translated">テキスト リーダーの現在位置から末尾まですべての文字を読み取り、1 つの文字列として返します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>A string that contains all characters from the current position to the end of the text reader.</source>
          <target state="translated">テキスト リーダーの現在位置から末尾までのすべての文字を含む文字列。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>If the method throws an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, the reader's position in the underlying <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <ph id="ph3">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> buffer are discarded.</source>
          <target state="translated">メソッドがスローされた場合、<ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph>例外、基になるリーダーの位置<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>文字を読み取るには、メソッドができましたが、内部に既に読み取られた文字の数によっては、高度な<ph id="ph3">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph>バッファーは破棄されます。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated">既に読み取られた文字が回復することはできず、再初期化してのみアクセスできるストリーム内のリーダーの位置は変更できないため、<ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>If the initial position within the stream is unknown or the stream does not support seeking, the underlying <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> also needs to be reinitialized.</source>
          <target state="translated">ストリーム内の最初の位置が不明か、ストリームがシークを基になるをサポートしていない場合<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>も再初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>To avoid such a situation and produce robust code you should use the <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method and store the read characters in a preallocated buffer.</source>
          <target state="translated">このような状況を回避する必要がありますを使用する堅牢なコードを生成して、<ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph>読み取りが事前に割り当てられたバッファーの文字メソッドとストアです。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> クラスは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">そのため、コードでそれをインスタンス化することはありません。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadToEnd%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">使用する例については、<ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph>メソッドを参照してください、<ph id="ph2">&lt;xref:System.IO.StreamReader.ReadToEnd%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>There is insufficient memory to allocate a buffer for the returned string.</source>
          <target state="translated">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>The number of characters in the next line is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph></source>
          <target state="translated">次の行の文字数が、<ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.</source>
          <target state="translated">テキスト リーダーの現在位置から末尾まですべての文字を非同期的に読み取り、1 つの文字列として返します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">非同期の読み取り操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains a string with the characters from the current position to the end of the text reader.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> パラメーターの値には、現在位置からテキスト リーダーの末尾までの文字から成る文字列が含まれます。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> クラスは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">そのため、コードでそれをインスタンス化することはありません。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEndAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadToEndAsync%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">使用する例については、<ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEndAsync%2A&gt;</ph>メソッドを参照してください、<ph id="ph2">&lt;xref:System.IO.StreamReader.ReadToEndAsync%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>The number of characters is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">文字数が <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>The text reader has been disposed.</source>
          <target state="translated">テキスト リーダーは破棄されています。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>The reader is currently in use by a previous read operation.</source>
          <target state="translated">リーダーは、前の読み取り操作によって現在使用されています。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> to synchronize.</source>
          <target state="translated">同期する <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source>Creates a thread-safe wrapper around the specified <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> をラップするスレッド セーフ ラッパーを作成します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source>A thread-safe <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">スレッド セーフな <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source>The current method returns a class that wraps around the specified <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> instance and restricts access to it by multiple threads.</source>
          <target state="translated">現在のメソッドは、指定の周りをラップするクラスを返します<ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>インスタンスし、複数のスレッドによってそのへのアクセスを制限します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source>All reads from the returned wrapper will be thread safe.</source>
          <target state="translated">返されるラッパーからのすべての読み取りは、スレッド セーフになります。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source><ph id="ph1">&lt;paramref name="reader" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="reader" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>