<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IServiceBehavior.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b723d08671b5f1e88e283ba03f6a467bbef0c30b5ce.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d08671b5f1e88e283ba03f6a467bbef0c30b5ce</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>Provides a mechanism to modify or insert custom extensions across an entire service, including the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceHostBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceHostBase" /&gt;</ph> などの、サービス全体にわたるカスタム拡張機能を変更または挿入するための機構を提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> to modify, examine, or extend some aspect of service-wide execution at the application level:</source>
          <target state="translated">サービス全体にわたる実行の一部の側面を、アプリケーション レベルで変更、確認、または拡張するには、<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> を実装します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A&gt;</ph> method to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A&gt;</ph> メソッドを使用して、ランタイム プロパティの値を変更し、エラー ハンドラー、メッセージ インターセプター、パラメーター インターセプター、セキュリティ拡張などのカスタム拡張オブジェクトを挿入できるようにします。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A&gt;</ph> method to examine the description before <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> constructs the executing service to confirm that it can execute properly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A&gt;</ph> メソッドを使用して、<ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> が実行対象のサービスを構築する前に説明を検査し、サービスを正常に実行できることを確認します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A&gt;</ph> method to pass to a binding element the custom information for the service so that it can support the service correctly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A&gt;</ph> メソッドを使用して、バインディング要素にサービスのカスタム情報を渡し、バインディング要素がサービスを正しくサポートできるようにします。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> objects can make use of any of these methods, but often only one is important; in such cases the unused methods can return without a value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> オブジェクトは、これらのメソッドをどれでも使用できますが、通常は、重要なメソッドは 1 つだけです。この場合、使用されないメソッドは、値なしで戻ることができます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>All of the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> methods pass <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType&gt;</ph> objects as a parameters.</source>
          <target state="translated">すべての <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> メソッドは <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType&gt;</ph> オブジェクトおよび <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType&gt;</ph> オブジェクトをパラメーターとして渡します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> parameter is for examination only; if you modify these objects the execution behavior is undefined.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> パラメーターは、検査にのみ使用されます。これらのオブジェクトを変更した場合、実行の動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>To perform the customization task for which it is intended, the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> object must be added to the <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A&gt;</ph> property prior to the construction of the service runtime.</source>
          <target state="translated">想定されているカスタマイズ タスクを実行するには、サービス ランタイムの構築の前に、<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> オブジェクトを <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A&gt;</ph> プロパティに追加しておく必要があります。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>There are three ways to do this:</source>
          <target state="translated">これには、次の 3 つの方法があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>Programmatically add the custom service behavior to the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A&gt;</ph> property prior to the point where the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType&gt;</ph> method is called on the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A&gt;</ph> メソッドが <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType&gt;</ph> オブジェクトで呼び出される前に、プログラムを使用して、<ph id="ph3">&lt;xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType&gt;</ph> プロパティにサービスのカスタム動作を追加します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>Create a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> and use it to mark service classes that are to be modified.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> を実装するカスタム属性を作成し、それを使用して、変更するサービス クラスをマークします。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>When a <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> object is constructed, WCF uses reflection to discover the attributes on the service type.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>オブジェクトを構築、WCF では、リフレクションを使用して、サービスの種類の属性を検出します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>If any attributes implement <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>, they are added to the behaviors collection on <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph>.</source>
          <target state="translated">これらの属性のいずれかが <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> を実装している場合、<ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> の動作コレクションに追加されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>Extend the <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType&gt;</ph> class to support the specification of the behavior in an application or machine configuration file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType&gt;</ph> クラスを拡張して、アプリケーションまたはコンピューターの構成ファイルで動作を指定できるようにします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>See the Example section for more information.</source>
          <target state="translated">詳細については、「使用例」を参照してください。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>Examples of service behaviors in WCF include the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute&gt;</ph> attribute, the <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType&gt;</ph>, the <ph id="ph3">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType&gt;</ph> and the <ph id="ph4">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType&gt;</ph> behavior.</source>
          <target state="translated">Wcf サービスの動作の例を示します、<ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute&gt;</ph>属性、 <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType&gt;</ph>、<ph id="ph3">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType&gt;</ph>と<ph id="ph4">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType&gt;</ph>動作します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</source>
          <target state="translated">構成ファイルで指定されたサービスの動作を使用してカスタム エラー ハンドラーをサービス アプリケーションに挿入する方法を次のコード例に示します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>In this example, the error handler catches all exceptions and converts them into a custom <ph id="ph1">`GreetingFault`</ph> SOAP fault that is then returned to the client.</source>
          <target state="translated">この例では、エラー ハンドラーがすべての例外をキャッチし、それらを <ph id="ph1">`GreetingFault`</ph> SOAP カスタム エラーに変換してからクライアントに返します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>The following <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> implementation adds no binding parameter objects, adds the custom <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType&gt;</ph> object to each <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType&gt;</ph> property, and validates that each operation of the service to which the service behavior is applied and has a <ph id="ph4">&lt;xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType&gt;</ph> of type <ph id="ph5">`GreetingFault`</ph>.</source>
          <target state="translated">次の <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> 実装は、バインディング パラメーター オブジェクトは追加せず、カスタムの <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType&gt;</ph> オブジェクトを各 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType&gt;</ph> プロパティに追加します。さらに、サービスの動作が適用され、<ph id="ph4">&lt;xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType&gt;</ph> 型の <ph id="ph5">`GreetingFault`</ph> を持つサービスの各操作を検証します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Description.IServiceBehavior">
          <source>In this example, the behavior class also implements <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType&gt;</ph>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</source>
          <target state="translated">この例では、動作クラスは、<ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType&gt;</ph> も実装します。これで、次のコード例で示すように、サービス動作をアプリケーション構成ファイルで使用するよう挿入できます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>The service description of the service.</source>
          <target state="translated">サービスの説明。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>The host of the service.</source>
          <target state="translated">サービスのホスト。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>The service endpoints.</source>
          <target state="translated">サービス エンドポイント。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>Custom objects to which binding elements have access.</source>
          <target state="translated">バインド要素がアクセスできるカスタム オブジェクト。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>Provides the ability to pass custom data to binding elements to support the contract implementation.</source>
          <target state="translated">コントラクトの実装をサポートするカスタム データをバインド要素に渡せるようにします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A&gt;</ph> method to add custom data objects to the <ph id="ph2">`parameters`</ph> collection that binding elements can use to acquire extra information to enable them to support the contract.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A&gt;</ph> メソッドを使用して、<ph id="ph2">`parameters`</ph> コレクションにカスタム データ オブジェクトを追加します。バインディング要素は、このオブジェクトを使用して、コントラクトをサポートするための追加情報を取得します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>This method is called once for each listen URI.</source>
          <target state="translated">このメソッドは、リッスン URI ごとに 1 回呼び出されます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>For example, if a service has four endpoints, and two of them have the same listen URI, then this method gets called three times.</source>
          <target state="translated">たとえば、サービスに 4 つのエンドポイントがあり、そのうちの 2 つのリッスン URI が同じである場合は、このメソッドが 3 回呼び出されます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>The reason is that the <ph id="ph1">`bindingParameters`</ph> target each channel stack and there is one channel stack for each listen URI.</source>
          <target state="translated">これは、<ph id="ph1">`bindingParameters`</ph> が各チャネル スタックをターゲットとし、リッスン URI ごとに 1 つのチャネル スタックが存在するからです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>Because each call receives those endpoints at that listen URI, two calls each get a single <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType&gt;</ph>, and one call gets a collection of two <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType&gt;</ph> objects.</source>
          <target state="translated">呼び出しごとにそのリッスン URI のエンドポイントが取得されるため、2 回の呼び出しでそれぞれ 1 つの <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType&gt;</ph> が取得され、1 回の呼び出しで 2 つの <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType&gt;</ph> オブジェクトのコレクションが取得されます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>All of the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> methods pass <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType&gt;</ph> objects as a parameters.</source>
          <target state="translated">すべての <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> メソッドは <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType&gt;</ph> オブジェクトおよび <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType&gt;</ph> オブジェクトをパラメーターとして渡します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> パラメーターは、カスタマイズの検査および挿入にのみ使用されます。それ以外でこれらのオブジェクトを変更した場合、実行動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>The service description.</source>
          <target state="translated">サービスの説明。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>The host that is currently being built.</source>
          <target state="translated">現在構築中のホスト。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</source>
          <target state="translated">ランタイム プロパティの値を変更したり、エラー ハンドラー、メッセージ インターセプター、パラメーター インターセプター、セキュリティ拡張などのカスタム拡張オブジェクトを挿入したりできるようにします。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A&gt;</ph> method to inspect or modify the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> object that is being constructed in order to support some custom execution scenario.</source>
          <target state="translated">一部のカスタム実行シナリオをサポートするために構築される <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A&gt;</ph> オブジェクトを検査または変更するには、<ph id="ph2">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> メソッドを実装します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>All of the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> methods pass <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType&gt;</ph> objects as a parameters.</source>
          <target state="translated">すべての <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> メソッドは <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType&gt;</ph> オブジェクトおよび <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType&gt;</ph> オブジェクトをパラメーターとして渡します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> パラメーターは、カスタマイズの検査および挿入にのみ使用されます。それ以外でこれらのオブジェクトを変更した場合、実行動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</source>
          <target state="translated">構成ファイルで指定されたサービスの動作を使用してカスタム エラー ハンドラーをサービス アプリケーションに挿入する方法を次のコード例に示します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>In this example, the error handler catches all exceptions and converts them into a custom <ph id="ph1">`GreetingFault`</ph> SOAP fault that is then returned to the client.</source>
          <target state="translated">この例では、エラー ハンドラーがすべての例外をキャッチし、それらを <ph id="ph1">`GreetingFault`</ph> SOAP カスタム エラーに変換してからクライアントに返します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>The following <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> implementation adds no binding parameter objects, adds the custom <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType&gt;</ph> object to each <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType&gt;</ph> property, and validates that each operation of the service to which the service behavior is applied and has a <ph id="ph4">&lt;xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType&gt;</ph> of type <ph id="ph5">`GreetingFault`</ph>.</source>
          <target state="translated">次の <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> 実装は、バインディング パラメーター オブジェクトは追加せず、カスタムの <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType&gt;</ph> オブジェクトを各 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType&gt;</ph> プロパティに追加します。さらに、サービスの動作が適用され、<ph id="ph4">&lt;xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType&gt;</ph> 型の <ph id="ph5">`GreetingFault`</ph> を持つサービスの各操作を検証します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>In this example, the behavior class also implements <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType&gt;</ph>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</source>
          <target state="translated">この例では、動作クラスは、<ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType&gt;</ph> も実装します。これで、次のコード例で示すように、サービス動作をアプリケーション構成ファイルで使用するよう挿入できます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>The service description.</source>
          <target state="translated">サービスの説明。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>The service host that is currently being constructed.</source>
          <target state="translated">現在構築中のサービス ホスト。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.</source>
          <target state="translated">サービス ホストおよびサービスの説明を検査して、サービスを正常に実行できることを確認できるようにします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A&gt;</ph> method to confirm whether the current service can execute properly according to your scenario.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A&gt;</ph> メソッドを使用して、現在のサービスをシナリオに従って正しく実行できるかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>All of the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> methods pass <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType&gt;</ph> objects as a parameters.</source>
          <target state="translated">すべての <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> メソッドは <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType&gt;</ph> オブジェクトおよび <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType&gt;</ph> オブジェクトをパラメーターとして渡します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> パラメーターは、カスタマイズの検査および挿入にのみ使用されます。それ以外でこれらのオブジェクトを変更した場合、実行動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</source>
          <target state="translated">構成ファイルで指定されたサービスの動作を使用してカスタム エラー ハンドラーをサービス アプリケーションに挿入する方法を次のコード例に示します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>In this example, the error handler catches all exceptions and converts them into a custom <ph id="ph1">`GreetingFault`</ph> SOAP fault that is then returned to the client.</source>
          <target state="translated">この例では、エラー ハンドラーがすべての例外をキャッチし、それらを <ph id="ph1">`GreetingFault`</ph> SOAP カスタム エラーに変換してからクライアントに返します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>The following <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> implementation adds no binding parameter objects, adds the custom <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType&gt;</ph> object to each <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType&gt;</ph> property, and validates that each operation of the service to which the service behavior is applied and has a <ph id="ph4">&lt;xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType&gt;</ph> of type <ph id="ph5">`GreetingFault`</ph>.</source>
          <target state="translated">次の <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> 実装は、バインディング パラメーター オブジェクトは追加せず、カスタムの <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType&gt;</ph> オブジェクトを各 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType&gt;</ph> プロパティに追加します。さらに、サービスの動作が適用され、<ph id="ph4">&lt;xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType&gt;</ph> 型の <ph id="ph5">`GreetingFault`</ph> を持つサービスの各操作を検証します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
          <source>In this example, the behavior class also implements <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType&gt;</ph>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</source>
          <target state="translated">この例では、動作クラスは、<ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType&gt;</ph> も実装します。これで、次のコード例で示すように、サービス動作をアプリケーション構成ファイルで使用するよう挿入できます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>