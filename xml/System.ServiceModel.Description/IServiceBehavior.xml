<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8f180c5c844145924ad16b66d821004bfbce2f07" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70496688" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e5104-101"><see cref="T:System.ServiceModel.ServiceHostBase" /> などの、サービス全体にわたるカスタム拡張機能を変更または挿入するための機構を提供します。</span><span class="sxs-lookup"><span data-stu-id="e5104-101">Provides a mechanism to modify or insert custom extensions across an entire service, including the <see cref="T:System.ServiceModel.ServiceHostBase" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5104-102">サービス全体にわたる実行の一部の側面を、アプリケーション レベルで変更、確認、または拡張するには、<xref:System.ServiceModel.Description.IServiceBehavior> を実装します。</span><span class="sxs-lookup"><span data-stu-id="e5104-102">Implement <xref:System.ServiceModel.Description.IServiceBehavior> to modify, examine, or extend some aspect of service-wide execution at the application level:</span></span>  
  
-   <span data-ttu-id="e5104-103"><xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> メソッドを使用して、ランタイム プロパティの値を変更し、エラー ハンドラー、メッセージ インターセプター、パラメーター インターセプター、セキュリティ拡張などのカスタム拡張オブジェクトを挿入できるようにします。</span><span class="sxs-lookup"><span data-stu-id="e5104-103">Use the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span>  
  
-   <span data-ttu-id="e5104-104"><xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>メソッドを使用して、Windows Communication Foundation (WCF) が実行中のサービスを構築してから、正常に実行できることを確認します。</span><span class="sxs-lookup"><span data-stu-id="e5104-104">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to examine the description before Windows Communication Foundation (WCF) constructs the executing service to confirm that it can execute properly.</span></span>  
  
-   <span data-ttu-id="e5104-105"><xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> メソッドを使用して、バインディング要素にサービスのカスタム情報を渡し、バインディング要素がサービスを正しくサポートできるようにします。</span><span class="sxs-lookup"><span data-stu-id="e5104-105">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to pass to a binding element the custom information for the service so that it can support the service correctly.</span></span>  
  
 <span data-ttu-id="e5104-106"><xref:System.ServiceModel.Description.IServiceBehavior> オブジェクトは、これらのメソッドをどれでも使用できますが、通常は、重要なメソッドは 1 つだけです。この場合、使用されないメソッドは、値なしで戻ることができます。</span><span class="sxs-lookup"><span data-stu-id="e5104-106"><xref:System.ServiceModel.Description.IServiceBehavior> objects can make use of any of these methods, but often only one is important; in such cases the unused methods can return without a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5104-107">すべての <xref:System.ServiceModel.Description.IServiceBehavior> メソッドは <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> オブジェクトおよび <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> オブジェクトをパラメーターとして渡します。</span><span class="sxs-lookup"><span data-stu-id="e5104-107">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="e5104-108"><xref:System.ServiceModel.Description.ServiceDescription> パラメーターは、検査にのみ使用されます。これらのオブジェクトを変更した場合、実行の動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="e5104-108">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination only; if you modify these objects the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="e5104-109">想定されているカスタマイズ タスクを実行するには、サービス ランタイムの構築の前に、<xref:System.ServiceModel.Description.IServiceBehavior> オブジェクトを <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> プロパティに追加しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="e5104-109">To perform the customization task for which it is intended, the <xref:System.ServiceModel.Description.IServiceBehavior> object must be added to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the construction of the service runtime.</span></span> <span data-ttu-id="e5104-110">これには、次の 3 つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="e5104-110">There are three ways to do this:</span></span>  
  
-   <span data-ttu-id="e5104-111"><xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> メソッドが <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> オブジェクトで呼び出される前に、プログラムを使用して、<xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> プロパティにサービスのカスタム動作を追加します。</span><span class="sxs-lookup"><span data-stu-id="e5104-111">Programmatically add the custom service behavior to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the point where the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> object.</span></span>  
  
-   <span data-ttu-id="e5104-112"><xref:System.ServiceModel.Description.IServiceBehavior> を実装するカスタム属性を作成し、それを使用して、変更するサービス クラスをマークします。</span><span class="sxs-lookup"><span data-stu-id="e5104-112">Create a custom attribute that implements <xref:System.ServiceModel.Description.IServiceBehavior> and use it to mark service classes that are to be modified.</span></span> <span data-ttu-id="e5104-113"><xref:System.ServiceModel.ServiceHost>オブジェクトが構築されると、WCF はリフレクションを使用してサービス型の属性を検出します。</span><span class="sxs-lookup"><span data-stu-id="e5104-113">When a <xref:System.ServiceModel.ServiceHost> object is constructed, WCF uses reflection to discover the attributes on the service type.</span></span> <span data-ttu-id="e5104-114">これらの属性のいずれかが <xref:System.ServiceModel.Description.IServiceBehavior> を実装している場合、<xref:System.ServiceModel.Description.ServiceDescription> の動作コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="e5104-114">If any attributes implement <xref:System.ServiceModel.Description.IServiceBehavior>, they are added to the behaviors collection on <xref:System.ServiceModel.Description.ServiceDescription>.</span></span>  
  
-   <span data-ttu-id="e5104-115"><xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> クラスを拡張して、アプリケーションまたはコンピューターの構成ファイルで動作を指定できるようにします。</span><span class="sxs-lookup"><span data-stu-id="e5104-115">Extend the <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> class to support the specification of the behavior in an application or machine configuration file.</span></span> <span data-ttu-id="e5104-116">詳細については、「使用例」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e5104-116">See the Example section for more information.</span></span>  
  
 <span data-ttu-id="e5104-117">WCF のサービス動作の例には<xref:System.ServiceModel.ServiceBehaviorAttribute> 、属性<xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType> <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> 、、、および<xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType>の動作が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e5104-117">Examples of service behaviors in WCF include the <xref:System.ServiceModel.ServiceBehaviorAttribute> attribute, the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, the <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> and the <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5104-118">構成ファイルで指定されたサービスの動作を使用してカスタム エラー ハンドラーをサービス アプリケーションに挿入する方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="e5104-118">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="e5104-119">この例では、エラー ハンドラーがすべての例外をキャッチし、それらを `GreetingFault` SOAP カスタム エラーに変換してからクライアントに返します。</span><span class="sxs-lookup"><span data-stu-id="e5104-119">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="e5104-120">次の <xref:System.ServiceModel.Description.IServiceBehavior> 実装は、バインディング パラメーター オブジェクトは追加せず、カスタムの <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> オブジェクトを各 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> プロパティに追加します。さらに、サービスの動作が適用され、<xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 型の `GreetingFault` を持つサービスの各操作を検証します。</span><span class="sxs-lookup"><span data-stu-id="e5104-120">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="e5104-121">この例では、動作クラスは、<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> も実装します。これで、次のコード例で示すように、サービス動作をアプリケーション構成ファイルで使用するよう挿入できます。</span><span class="sxs-lookup"><span data-stu-id="e5104-121">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="e5104-122">サービスの説明。</span><span class="sxs-lookup"><span data-stu-id="e5104-122">The service description of the service.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="e5104-123">サービスのホスト。</span><span class="sxs-lookup"><span data-stu-id="e5104-123">The host of the service.</span></span></param>
        <param name="endpoints"><span data-ttu-id="e5104-124">サービス エンドポイント。</span><span class="sxs-lookup"><span data-stu-id="e5104-124">The service endpoints.</span></span></param>
        <param name="bindingParameters"><span data-ttu-id="e5104-125">バインド要素がアクセスできるカスタム オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e5104-125">Custom objects to which binding elements have access.</span></span></param>
        <summary><span data-ttu-id="e5104-126">コントラクトの実装をサポートするカスタム データをバインド要素に渡せるようにします。</span><span class="sxs-lookup"><span data-stu-id="e5104-126">Provides the ability to pass custom data to binding elements to support the contract implementation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5104-127"><xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> メソッドを使用して、`parameters` コレクションにカスタム データ オブジェクトを追加します。バインディング要素は、このオブジェクトを使用して、コントラクトをサポートするための追加情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="e5104-127">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to add custom data objects to the `parameters` collection that binding elements can use to acquire extra information to enable them to support the contract.</span></span>  
  
 <span data-ttu-id="e5104-128">このメソッドは、リッスン URI ごとに 1 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e5104-128">This method is called once for each listen URI.</span></span> <span data-ttu-id="e5104-129">たとえば、サービスに 4 つのエンドポイントがあり、そのうちの 2 つのリッスン URI が同じである場合は、このメソッドが 3 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e5104-129">For example, if a service has four endpoints, and two of them have the same listen URI, then this method gets called three times.</span></span> <span data-ttu-id="e5104-130">これは、`bindingParameters` が各チャネル スタックをターゲットとし、リッスン URI ごとに 1 つのチャネル スタックが存在するからです。</span><span class="sxs-lookup"><span data-stu-id="e5104-130">The reason is that the `bindingParameters` target each channel stack and there is one channel stack for each listen URI.</span></span> <span data-ttu-id="e5104-131">呼び出しごとにそのリッスン URI のエンドポイントが取得されるため、2 回の呼び出しでそれぞれ 1 つの <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> が取得され、1 回の呼び出しで 2 つの <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> オブジェクトのコレクションが取得されます。</span><span class="sxs-lookup"><span data-stu-id="e5104-131">Because each call receives those endpoints at that listen URI, two calls each get a single <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>, and one call gets a collection of two <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5104-132">すべての <xref:System.ServiceModel.Description.IServiceBehavior> メソッドは <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> オブジェクトおよび <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> オブジェクトをパラメーターとして渡します。</span><span class="sxs-lookup"><span data-stu-id="e5104-132">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="e5104-133"><xref:System.ServiceModel.Description.ServiceDescription> パラメーターは、カスタマイズの検査および挿入にのみ使用されます。それ以外でこれらのオブジェクトを変更した場合、実行動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="e5104-133">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="e5104-134">サービスの説明。</span><span class="sxs-lookup"><span data-stu-id="e5104-134">The service description.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="e5104-135">現在構築中のホスト。</span><span class="sxs-lookup"><span data-stu-id="e5104-135">The host that is currently being built.</span></span></param>
        <summary><span data-ttu-id="e5104-136">ランタイム プロパティの値を変更したり、エラー ハンドラー、メッセージ インターセプター、パラメーター インターセプター、セキュリティ拡張などのカスタム拡張オブジェクトを挿入したりできるようにします。</span><span class="sxs-lookup"><span data-stu-id="e5104-136">Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5104-137">一部のカスタム実行シナリオをサポートするために構築される <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> オブジェクトを検査または変更するには、<xref:System.ServiceModel.ServiceHostBase> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="e5104-137">Implement the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to inspect or modify the <xref:System.ServiceModel.ServiceHostBase> object that is being constructed in order to support some custom execution scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5104-138">すべての <xref:System.ServiceModel.Description.IServiceBehavior> メソッドは <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> オブジェクトおよび <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> オブジェクトをパラメーターとして渡します。</span><span class="sxs-lookup"><span data-stu-id="e5104-138">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="e5104-139"><xref:System.ServiceModel.Description.ServiceDescription> パラメーターは、カスタマイズの検査および挿入にのみ使用されます。それ以外でこれらのオブジェクトを変更した場合、実行動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="e5104-139">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5104-140">構成ファイルで指定されたサービスの動作を使用してカスタム エラー ハンドラーをサービス アプリケーションに挿入する方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="e5104-140">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="e5104-141">この例では、エラー ハンドラーがすべての例外をキャッチし、それらを `GreetingFault` SOAP カスタム エラーに変換してからクライアントに返します。</span><span class="sxs-lookup"><span data-stu-id="e5104-141">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="e5104-142">次の <xref:System.ServiceModel.Description.IServiceBehavior> 実装は、バインディング パラメーター オブジェクトは追加せず、カスタムの <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> オブジェクトを各 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> プロパティに追加します。さらに、サービスの動作が適用され、<xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 型の `GreetingFault` を持つサービスの各操作を検証します。</span><span class="sxs-lookup"><span data-stu-id="e5104-142">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="e5104-143">この例では、動作クラスは、<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> も実装します。これで、次のコード例で示すように、サービス動作をアプリケーション構成ファイルで使用するよう挿入できます。</span><span class="sxs-lookup"><span data-stu-id="e5104-143">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="e5104-144">サービスの説明。</span><span class="sxs-lookup"><span data-stu-id="e5104-144">The service description.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="e5104-145">現在構築中のサービス ホスト。</span><span class="sxs-lookup"><span data-stu-id="e5104-145">The service host that is currently being constructed.</span></span></param>
        <summary><span data-ttu-id="e5104-146">サービス ホストおよびサービスの説明を検査して、サービスを正常に実行できることを確認できるようにします。</span><span class="sxs-lookup"><span data-stu-id="e5104-146">Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5104-147"><xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> メソッドを使用して、現在のサービスをシナリオに従って正しく実行できるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="e5104-147">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to confirm whether the current service can execute properly according to your scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5104-148">すべての <xref:System.ServiceModel.Description.IServiceBehavior> メソッドは <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> オブジェクトおよび <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> オブジェクトをパラメーターとして渡します。</span><span class="sxs-lookup"><span data-stu-id="e5104-148">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="e5104-149"><xref:System.ServiceModel.Description.ServiceDescription> パラメーターは、カスタマイズの検査および挿入にのみ使用されます。それ以外でこれらのオブジェクトを変更した場合、実行動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="e5104-149">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5104-150">構成ファイルで指定されたサービスの動作を使用してカスタム エラー ハンドラーをサービス アプリケーションに挿入する方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="e5104-150">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="e5104-151">この例では、エラー ハンドラーがすべての例外をキャッチし、それらを `GreetingFault` SOAP カスタム エラーに変換してからクライアントに返します。</span><span class="sxs-lookup"><span data-stu-id="e5104-151">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="e5104-152">次の <xref:System.ServiceModel.Description.IServiceBehavior> 実装は、バインディング パラメーター オブジェクトは追加せず、カスタムの <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> オブジェクトを各 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> プロパティに追加します。さらに、サービスの動作が適用され、<xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 型の `GreetingFault` を持つサービスの各操作を検証します。</span><span class="sxs-lookup"><span data-stu-id="e5104-152">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="e5104-153">この例では、動作クラスは、<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> も実装します。これで、次のコード例で示すように、サービス動作をアプリケーション構成ファイルで使用するよう挿入できます。</span><span class="sxs-lookup"><span data-stu-id="e5104-153">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
