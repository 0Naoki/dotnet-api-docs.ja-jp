<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a02bb0b53a4cd2e350e1aae65a0cb84c0f8a8c0a" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52609147" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, ISecurityEncodable, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::ISecurityEncodable, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>リソースへのアクセスがアクティブなプリンシパルに許可されているかどうかを判断する <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> の実装を使用する権限を表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>クラスを使用して強制アクセス チェックを実行する機能を提供する、<xref:System.Security.Claims.ClaimsAuthorizationManager>アプリケーションに対して構成されています。 呼び出すことによって、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>メソッドまたは静的な<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>メソッドをクレーム認証マネージャーで定義された承認ポリシーに従って、コードの実行パス内でのリソースへの保護を提供できます。 宣言型のアクセス チェックを使用して実行できる、<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>クラス。  
  
> [!IMPORTANT]
>  <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>クラスで構成されているクレーム承認マネージャーを使用して、<xref:System.IdentityModel.Configuration.IdentityConfiguration>で設定されている、<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>プロパティ。 これは、Ws-federation が使用されていない; シナリオであっても、すべてのケースでは true です。たとえば、アクティブな (WCF) Web アプリケーションとコンソール アプリケーションです。 クレーム承認マネージャーの構成で、またはプログラムを指定できます。 クレーム承認マネージャーは、構成ファイルで指定するには、設定、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)の下の要素、 [ &lt;identityConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)要素でこの id 構成が参照されていることを確認し、 [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)要素は、ランタイムによって読み込まれる (たとえばを設定、`identityConfigurationName`属性)。 クレーム承認マネージャーをプログラムで設定するには、ハンドラーを提供、<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType>イベント。  
  
 1 つのレベルでは、によって提供される機能<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>によって提供されるロールベースのアクセス チェック (RBAC) のような<xref:System.Security.Permissions.PrincipalPermission>クラスです。 ただし、、<xref:System.Security.Claims.ClaimsAuthorizationManager>クラスは、アクティブなプリンシパルによって提示されるクレームに基づくチェックを実行します。 これにより、アクセス許可が多通常 1 つのロールで収集、純粋な RBAC で使用できるよりもかなり多くの粒度です。 おそらく、さらに、クレーム ベースの承認有効ビジネス ロジックと承認に関するポリシーをより適切に分離コード内のリソースに対する特定のアクションのアクセス許可を要求することができ、バックエンド ポリシーは、どの要求を構成するために使用できます、エンティティを表示すると、需要を満たすために持つ必要があります。 などの RBAC、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>から派生するクラスによって実装されるコード アクセス セキュリティとは異なり、ユーザーに基づくアクセス チェックは、実行、<xref:System.Security.CodeAccessPermission>クラスし、アクセス許可がコードのすべての呼び出し元に付与されていることを確認するスタック ウォークを使用して<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>、現在のプリンシパルにのみ、チェックを実行します。  
  
 静的な<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>メソッドは、指定したリソースに対して指定されたアクションのアクセス許可を確認します。 リソースと操作両方の文字列、通常は Uri です。 インスタンスを初期化することもできます。<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>アクションとリソースの呼び出しと、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>メソッド。 コンス トラクターは、1 つのリソースとアクションにのみは<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>でオブジェクトを結合することができます、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>と<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>メソッド。 これらのメソッドを使用して作成されたアクセス許可は、複数のリソースとアクションのペアを含めることができます。  
  
 両方のメソッドを呼び出すことによってアクセスを決定する、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>で構成されているクレーム承認マネージャーのメソッド、 <xref:System.Security.Claims.AuthorizationContext> 、アクティブなプリンシパルで構成されます (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>)、リソース、および操作します。 スロー、<xref:System.Security.SecurityException>現在のプリンシパルがリソースに対して操作を実行する権限がない場合のそれ以外の場合、実行されます。  
  
 場合、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>複数のリソースとアクションのペアを格納している、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>アクセス許可に含まれているリソースとアクションのペアの各メソッドが呼び出されます。  呼び出しに<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>を成功させるには、すべてのアクセス許可に含まれているリソースとアクションのペアのアクティブなプリンシパルを承認します。  
  
   
  
## Examples  
 次の例を使用してリソースを保護する方法を示しています、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>メソッド、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>メソッド、または<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>宣言します。 各ケースは、構成済みで<xref:System.Security.Claims.ClaimsAuthorizationManager>に対して指定されたリソースとアクションの現在のプリンシパルを評価するために呼び出します。 指定したリソースで指定したアクションの現在のプリンシパルが権限がない場合、<xref:System.Security.SecurityException>がスローされます。 それ以外に処理が進行します。  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 次の XML は、カスタム要求の承認を使用するために必要な最小の構成マネージャーで、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>クラス。 、少なくとも、宣言する必要あります両方、`system.identityModel`と`system.identityModel.services`セクション、`<configSection>`要素で、承認マネージャーを指定し、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)[既定の id 構成要素。 既定のフェデレーション構成から、承認マネージャーが参照されているようになります。 承認マネージャーを指定する id 構成の名前を指定する代わりに、`identityConfigurationName`の属性、 [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)要素。  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/8b14054c-6d07-46ab-ab58-03f14beac0f2">&lt;federationConfiguration&gt;</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">プリンシパルを承認する対象のリソース。</param>
        <param name="action">プリンシパルを承認する対象のアクション。</param>
        <summary>
          <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>とリソースの指定したアクションのペア オブジェクトを初期化します。 呼び出すことができます、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>アクセス チェックを実行するメソッド。  
  
 コンス トラクターは、1 つのリソースとアクションにのみは<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>でオブジェクトを結合することができます、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>と<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>メソッド。 これらの方法で作成されたアクセス許可は、複数のリソースとアクションのペアを含めることができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resource" /> が <see langword="null" /> または空の文字列です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime's behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">プリンシパルを承認する対象のリソース。</param>
        <param name="action">プリンシパルを承認する対象のアクション。</param>
        <summary>指定したリソースの指定したアクションを実行する権限が現在のプリンシパルにあるかどうかを確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したリソースで指定したアクションのプリンシパルを承認する必要がありますまたは<xref:System.Security.SecurityException>例外がスローされます。  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>構成済みのクレーム承認マネージャーのメソッドが呼び出されると、 <xref:System.Security.Claims.AuthorizationContext> 、アクティブなプリンシパルで構成されます (<xref:System.Threading.Thread.CurrentPrincipal%2A>)、リソース、および操作します。  
  
   
  
## Examples  
 次の例を使用してリソースを保護する方法を示しています、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A>メソッド。 指定されたリソースと操作に対する現在のプリンシパルを評価する構成済みのクレーム承認マネージャーが呼び出されます。 指定したリソースで指定したアクションの現在のプリンシパルが権限がない場合、<xref:System.Security.SecurityException>がスローされます。 それ以外に処理が進行します。  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在のプリンシパルは <see cref="T:System.Security.Claims.ClaimsPrincipal" /> から割り当てることはできません。  
  
- または - 
<see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> が構成されていません。</exception>
        <exception cref="T:System.Security.SecurityException">失敗した承認チェック。</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime's behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> インスタンスのコピーを返します。</summary>
        <returns>現在のインスタンスからコピーされた <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスに関連付けられているリソースとアクションのペアに対して現在のプリンシパルが承認されるかどうかを確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このインスタンスに関連付けられているリソースとアクションのペアのすべての現在のプリンシパルを承認する必要がありますまたは<xref:System.Security.SecurityException>例外がスローされます。  
  
 コンス トラクターは、1 つのリソースとアクションにのみは<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>でオブジェクトを結合することができます、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>と<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>メソッド。 これらの方法で作成されたアクセス許可は、複数のリソースとアクションのペアを含めることができます。  
  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>メソッドを呼び出す、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType>で構成されているクレーム承認マネージャーのメソッド、 <xref:System.Security.Claims.AuthorizationContext> 、アクティブなプリンシパルで構成されます (<xref:System.Threading.Thread.CurrentPrincipal%2A>)、リソースとのそれぞれに含まれているリソースとアクションのペアの動作アクセス許可。 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>をアクティブなを成功させるのには、すべてのアクセス許可に含まれているリソースとアクションのペアのプリンシパルが承認する必要があります。  
  
   
  
## Examples  
 次の例を使用してリソースを保護する方法を示しています、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>メソッド。 指定されたリソースと操作に対する現在のプリンシパルを評価する構成済みのクレーム承認マネージャーが呼び出されます。 指定したリソースで指定したアクションの現在のプリンシパルが権限がない場合、<xref:System.Security.SecurityException>がスローされます。 それ以外に処理が進行します。  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在のプリンシパルは <see cref="T:System.Security.Claims.ClaimsPrincipal" /> から割り当てることはできません。  
  
- または - 
<see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> が構成されていません。</exception>
        <exception cref="T:System.Security.SecurityException">失敗した承認チェック。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">アクセス許可の再構築に使用する XML エンコード。</param>
        <summary>指定された XML エンコーディングから現在のアクセス許可と状態を再構築します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出しによって作成された XML エンコーディングからアクセス許可を再構築、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">エンコーディングに、認識されない要素または属性、あるいは不適切な形式の XML が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可との積集合を持つアクセス許可。 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> のインスタンスである必要があります。</param>
        <summary>現在のアクセス許可と指定したアクセス許可を統合 (論理積) して 1 つの新しいアクセス許可を返します。</summary>
        <returns>現在のアクセス許可と指定したアクセス許可の積集合を表す新しい <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。または、<paramref name="target" /> が <paramref name="null" /> であるか、<see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> のインスタンスではない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されるアクセス許可には、現在のアクセス許可と指定した権限の両方に存在していたリソース アクションのペアだけがいます。 1 つだけ、またはアクセス許可の他に存在していたリソースとアクションのペアは含まれません。 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功すると、新しいアクセス許可で、現在のプリンシパルだけする必要がありますが現在のアクセス許可と指定した権限に共通するリソースとアクションのペアが承認されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">サブセットの関係を調べる対象のアクセス許可。 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> のインスタンスである必要があります。</param>
        <summary>現在のアクセス許可が、指定したアクセス許可のサブセットであるかどうかを示す値を返します。</summary>
        <returns>現在のアクセス許可が、指定したアクセス許可のサブセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のアクセス許可は、指定した権限にもすべて現在のアクセス許可に含まれているリソースとアクションのペアの場合、指定したアクセス許可のサブセットです。 場合`target`は`null`のインスタンスではないまたは<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A>返します`false`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アクセス許可が無制限かどうかを示す値を返します。</summary>
        <returns>アクセス許可が無制限である場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 アクセス許可が制限されていることを示す <see langword="true" /> を常に返します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のアクセス許可とその状態の XML にエンコードされたフォームを返します。</summary>
        <returns>現在のアクセス許可とその状態の XML にエンコードされたフォーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プリンシパルはエンコードされた XML 形式から呼び出すことによって再構築することができます、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A>メソッド。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可と和集合を持つアクセス許可。 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 型でなければなりません。</param>
        <summary>現在のアクセス許可と指定したアクセス許可を統合 (和集合) して 1 つの新しいアクセス許可を返します。 現在のインスタンスとターゲット インスタンスにあるリソース操作のペアすべてがある <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> のオブジェクト。</summary>
        <returns>現在のアクセス許可と指定したアクセス許可の和集合を表す新しい <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。または、<paramref name="target" /> が <paramref name="null" /> であるか、<see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> のインスタンスではない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返されるアクセス許可ではすべての現在のアクセス許可に存在するリソースとアクションのペアと、指定した権限を表示できるリソースとアクションのペアのすべて。 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>には、新しいアクセス許可で成功の現在のアクセス許可に存在していたリソース アクションのペアのすべてと、指定した権限に存在していたリソースとアクションのペアのすべての現在のプリンシパルを承認する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>