<Namespace Name="System.Net.Http">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2063a170f178d32b2b4247950e12f485f7bd123" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51877789" /></Metadata><Docs>
    <summary><see cref="N:System.Net.Http" /> 名前空間は、最新の HTTP アプリケーション用のプログラミング インターフェイスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Http>名前空間は、次を提供する設計されています。  
  
1.  HTTP 経由で最新の web サービスを使用するようにすることが HTTP クライアント コンポーネント。  
  
2.  使用できる HTTP コンポーネント クライアントとサーバー (HTTP ヘッダーと例については、メッセージ) の両方でします。 これは、一貫性のあるプログラミング モデル、クライアントとサーバー側の両方で最新の web サービスの HTTP 経由の提供します。  
  
 <xref:System.Net.Http>名前空間と、関連<xref:System.Net.Http.Headers>名前空間は、次のコンポーネントのセットを提供します。  
  
1.  <xref:System.Net.Http.HttpClient> -主要なクラスを送信して、HTTP 経由で要求を受信するために使用します。  
  
2.  <xref:System.Net.Http.HttpRequestMessage> <xref:System.Net.Http.HttpResponseMessage> -HTTP メッセージのように、IETF によって RFC 2616 で定義します。  
  
3.  <xref:System.Net.Http.Headers.HttpHeaders> HTTP ヘッダー、IETF によって RFC 2616 で定義されているようです。  
  
4.  <xref:System.Net.Http.HttpClientHandler> HTTP ハンドラーが HTTP 応答メッセージの生成を担当します。  
  
 使用できるさまざまな HTTP メッセージ ハンドルがあります。 これらは、次に示します。  
  
1.  <xref:System.Net.Http.DelegatingHandler> -クラスでは、ハンドラー チェーンにハンドラーを接続するために使用します。  
  
2.  <xref:System.Net.Http.HttpMessageHandler> ほとんどのアプリケーションの最も一般的な要件をサポートするクラスから派生する-簡単です。  
  
3.  <xref:System.Net.Http.HttpClientHandler> -は実際には、HTTP トランスポートの操作を処理するハンドラー チェーンの下で動作するクラス。  
  
4.  <xref:System.Net.Http.WebRequestHandler> -に固有のオプションを使用して HTTP トランスポートの操作を処理するハンドラー チェーン クラスの下で動作する特殊クラス、<xref:System.Net.HttpWebRequest?displayProperty=nameWithType>オブジェクト。  
  
 HTTP メッセージの内容は、RFC 2616 で定義されているエンティティ ボディに対応します。  
  
 クラスの数は、HTTP コンテンツを使用できます。 これらは、次に示します。  
  
1.  <xref:System.Net.Http.ByteArrayContent> -に基づく HTTP コンテンツをバイト配列。  
  
2.  <xref:System.Net.Http.FormUrlEncodedContent> 名前/値の組の HTTP コンテンツは、アプリケーション/x-www-form-urlencoded MIME の種類を使用してエンコードされます。  
  
3.  <xref:System.Net.Http.MultipartContent> 、マルチパートを使用してシリアル化され HTTP コンテンツ/* コンテンツ タイプの指定。  
  
4.  <xref:System.Net.Http.MultipartFormDataContent> HTTP コンテンツは、マルチパート/フォーム データの MIME の種類を使用してエンコードされます。  
  
5.  <xref:System.Net.Http.StreamContent> -に基づく HTTP コンテンツ ストリーム。  
  
6.  <xref:System.Net.Http.StringContent> -に基づく HTTP コンテンツを文字列。  
  
 使用して、アプリの場合、<xref:System.Net.Http>と<xref:System.Net.Http.Headers>名前空間が、大量のデータ (50 メガバイトまたはそれ以上) をダウンロードしようとしています。 その後、アプリのダウンロードのストリームと既定のバッファリングを使用しない必要があります。 既定のバッファリングを使用する場合は、クライアントのメモリ使用量が非常に大きな取得、パフォーマンスが低下するためになる可能性があります。  
  
 クラス、<xref:System.Net.Http>と<xref:System.Net.Http.Headers>名前空間は、Windows ストア アプリまたはデスクトップ アプリを開発に使用できます。 クラスでの Windows ストア アプリで使用する場合、<xref:System.Net.Http>と<xref:System.Net.Http.Headers>名前空間がによって使用されるアプリケーションのセキュリティ モデルの一部であるネットワーク分離機能によって影響を受ける、[!INCLUDE[win8](~/includes/win8-md.md)]します。 システムがネットワーク アクセスを許可するため、Windows ストア アプリでの Windows ストア アプリのアプリ マニフェストでは、適切なネットワーク機能を有効にする必要があります。 詳細については、「[Network Isolation for Windows Store Apps (Windows ストア アプリのネットワークの分離)](~/docs/framework/network-programming/network-isolation-for-windows-store-apps.md)」をご覧ください。  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Net.Http.Headers" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696">Web サービスに接続します。</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550">HttpClient のサンプル</related>
  </Docs>
</Namespace>