<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d8244a38f035a96f53aaf4b667da80a3de717304" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69358528" /></Metadata><TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="26284-101">メッセージ キューの配信機構のサーバー側再生エラーおよびクライアント側エラーの異常処理において、キュー コンポーネント内で機能します。</span><span class="sxs-lookup"><span data-stu-id="26284-101">Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26284-102">Com + カタログのコンポーネントに対して定義されている<xref:System.EnterpriseServices.IPlaybackControl>例外クラスは、元のクラスのインターフェイスとインターフェイスの両方を実装します。</span><span class="sxs-lookup"><span data-stu-id="26284-102">The exception class defined for the component in the COM+ catalog implements both <xref:System.EnterpriseServices.IPlaybackControl> and the interface for the original class.</span></span> <span data-ttu-id="26284-103">元のクラスインターフェイスのメソッド実装は、クラス自体の失敗したメソッドの例外処理を実行するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="26284-103">The method implementations of the original class interface are used to perform the exception handling for the failed methods in the class itself.</span></span> <span data-ttu-id="26284-104">これらのメソッドは、 <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>最初<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>に呼び出されたメソッドの例外を処理するまたはの後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="26284-104">They will be called after <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> or <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> to process exceptions for the method originally called.</span></span>  
  
 <span data-ttu-id="26284-105">キューに置かれたコンポーネントプレーヤーは<xref:System.EnterpriseServices.IPlaybackControl> 、のメソッドを呼び出して、メッセージが最終的な静止キューまたは配信不能キューに配置されることを例外ハンドラーオブジェクトに通知します。</span><span class="sxs-lookup"><span data-stu-id="26284-105">The Queued Components Player calls the methods of <xref:System.EnterpriseServices.IPlaybackControl> to inform the exception-handler object that a message is about to be placed on the final resting or dead letter queue.</span></span> <span data-ttu-id="26284-106">キューに登録されたコンポーネントプレーヤーは、元のメソッド呼び出しで失敗した例外ハンドラーオブジェクトで同じメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="26284-106">The Queued Components Player then calls the same method in the exception-handler object that had failed in the original method call.</span></span> <span data-ttu-id="26284-107">例外ハンドラーオブジェクトは、たとえば、問題の診断情報を収集したり、問題をクライアントに通知するオブジェクトやメッセージを生成したりするなど、別のを実装できます。</span><span class="sxs-lookup"><span data-stu-id="26284-107">The exception-handler object can implement an alternative, for example, by gathering problem diagnosis information or generating an object or message that informs the client of the problem.</span></span> <span data-ttu-id="26284-108">アプリケーションでが実装<xref:System.EnterpriseServices.IPlaybackControl>されていない場合、キューに置かれたコンポーネントプレーヤーがすべての再試行を実行すると、有害メッセージが最終的な静止キューまたは配信不能キューに配置されます。</span><span class="sxs-lookup"><span data-stu-id="26284-108">If the application does not implement <xref:System.EnterpriseServices.IPlaybackControl>, the poison message is placed on the final resting or dead letter queue when the Queued Components Player exhausts all retries.</span></span>  
  
 <span data-ttu-id="26284-109">有害なメッセージとは、何らかの理由で処理できないメッセージのことです。サーバーまたはキューシステムの問題が原因である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="26284-109">A poison message is a message that cannot be processed for some reason, perhaps because of a problem with the server or queuing system.</span></span> <span data-ttu-id="26284-110">トランザクションがロールバックされ、有害メッセージがキューの先頭に移動します。</span><span class="sxs-lookup"><span data-stu-id="26284-110">The transaction is rolled back, and the poison message goes to the top of the queue.</span></span> <span data-ttu-id="26284-111">メッセージが再度デキューされると、同じ状態が発生します。</span><span class="sxs-lookup"><span data-stu-id="26284-111">When the message is dequeued again, the same condition occurs.</span></span> <span data-ttu-id="26284-112">このメッセージは、問題を修正するために何かが行われるまで、無限にループを続行できます。</span><span class="sxs-lookup"><span data-stu-id="26284-112">This message can continue looping indefinitely until something is done to correct the problem.</span></span> <span data-ttu-id="26284-113">キューに登録されたコンポーネントサービスは、一連の再試行を使用して有害メッセージを処理します。</span><span class="sxs-lookup"><span data-stu-id="26284-113">The Queued Components service handles the poison message by using a series of retries.</span></span> <span data-ttu-id="26284-114">いくつかの再試行に失敗すると、メッセージは最後の静止キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="26284-114">After several unsuccessful retries, the message is moved to a final resting queue.</span></span> <span data-ttu-id="26284-115">有害なメッセージは、キューに置かれたコンポーネントのメッセージムーバーツールを使用して手動で移動するまで、静止キューに保持されます。</span><span class="sxs-lookup"><span data-stu-id="26284-115">Poison messages remain in the resting queue until manually moved by using the Queued Components Message Mover tool.</span></span>  
  
 <span data-ttu-id="26284-116">有害なメッセージの状況は、メソッドを使用して<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>プログラムで解決することもできます。このメソッドは、遅延アクティベーションを再生しようとするすべての試行が失敗したことをサーバー側コンポーネントの作成者に通知します。</span><span class="sxs-lookup"><span data-stu-id="26284-116">The poison message situation can also be resolved programmatically, using the <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> method, which informs the server-side component author that all attempts to play back the deferred activation have failed.</span></span>  
  
 <span data-ttu-id="26284-117">有害なメッセージが検出された場合は、問題の根底にある原因を迅速に解決できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="26284-117">If you discover a poison message, you might be able to solve the underlying cause of the problem quickly.</span></span> <span data-ttu-id="26284-118">たとえば、何らかの理由でサーバーがオフラインだった場合は、サーバーをオンラインに戻すことができます。</span><span class="sxs-lookup"><span data-stu-id="26284-118">For example, if the server was offline for some reason, you can bring the server back online.</span></span> <span data-ttu-id="26284-119">問題を迅速に解決できない場合は、トランザクションが発生していないことを要求元に通知する別のトランザクションを自動的に生成できます。</span><span class="sxs-lookup"><span data-stu-id="26284-119">If you cannot solve the problem quickly, you can automatically generate another transaction that notifies the requestor that the transaction did not occur.</span></span> <span data-ttu-id="26284-120">次に、要求元は、既にコミットされたトランザクションの影響を元に戻す補正トランザクションを作成できます。</span><span class="sxs-lookup"><span data-stu-id="26284-120">The requestor can then make a compensating transaction that reverses the effect of a transaction that has already committed.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="26284-121">サーバーにメッセージを配信しようとするすべてのメッセージ キュー試行が拒否され、最終的にメッセージがクライアント側のトランザクション配信不能キューに置かれていることをクライアント側の例外処理コンポーネントに通知します。</span><span class="sxs-lookup"><span data-stu-id="26284-121">Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26284-122">メッセージが Xact 配信不能キューに到着すると、COM + は、この通知を配信するために、サーバークラスに関連するクライアント側の例外ハンドラーを呼び出そうとします。</span><span class="sxs-lookup"><span data-stu-id="26284-122">As messages arrive in the Xact Dead Letter queue, COM+ attempts to invoke a client-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="26284-123">これを行うには、 <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>最初にを呼び出し、次に例外ハンドラーオブジェクトで失敗したメソッドの例外処理バージョンを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="26284-123">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, then calling the exception-handling version of the failed method in the exception-handler object.</span></span> <span data-ttu-id="26284-124">この例外メソッドは、エラーの記録、管理者へのメールメッセージの送信、クライアント側の補正アクション (以前のトランザクションの影響の反転) などの例外アクションを実行できます。</span><span class="sxs-lookup"><span data-stu-id="26284-124">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="26284-125">例外メソッドが失敗した場合、メッセージは Xact 配信不能キューに残されます。</span><span class="sxs-lookup"><span data-stu-id="26284-125">If the exception method is not successful, the message is left on the Xact Dead Letter queue.</span></span>  
  
 <span data-ttu-id="26284-126">Microsoft メッセージキュー (MSMQ) エクスプローラーでは、Xact 配信不能キューを表示できます。</span><span class="sxs-lookup"><span data-stu-id="26284-126">The Xact Dead Letter queue can be viewed in the Microsoft Message Queue (MSMQ) Explorer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="26284-127">サーバーへの遅延アクティベーションを再生しようとするすべての試行が失敗し、メッセージが最後の静止キューに移動されようとしていることをサーバー側の例外クラスの実装に通知します。</span><span class="sxs-lookup"><span data-stu-id="26284-127">Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26284-128">メッセージが Xact 配信不能キューに到着すると、COM + はサーバークラスに関連するサーバー側の例外ハンドラーを呼び出そうとして、この通知を配信しようとします。</span><span class="sxs-lookup"><span data-stu-id="26284-128">As messages arrive on the Xact Dead Letter queue, COM+ attempts to invoke a server-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="26284-129">これを行うには、 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>最初にを呼び出し、次に例外ハンドラーオブジェクトで失敗したメソッドの例外処理バージョンを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="26284-129">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, then calling the exception handling version of the failed method in the exception handler object.</span></span> <span data-ttu-id="26284-130">この例外メソッドは、エラーの記録、管理者へのメールメッセージの送信、クライアント側の補正アクション (以前のトランザクションの影響の反転) などの例外アクションを実行できます。</span><span class="sxs-lookup"><span data-stu-id="26284-130">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="26284-131">サーバーオブジェクトは、このトランザクションを正常に完了するためにすべての作業を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="26284-131">The server object should make every effort to complete this transaction successfully.</span></span> <span data-ttu-id="26284-132">それ以外の場合、メッセージを再処理するには手動操作が必要です。</span><span class="sxs-lookup"><span data-stu-id="26284-132">Otherwise, manual intervention is required to reprocess the message.</span></span> <span data-ttu-id="26284-133">例外メソッドが失敗した場合、メッセージは最後の静止キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="26284-133">If the exception method is not successful, the message is moved to the final resting queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
