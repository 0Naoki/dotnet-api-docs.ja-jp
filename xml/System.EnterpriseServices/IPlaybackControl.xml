<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d8244a38f035a96f53aaf4b667da80a3de717304" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70540363" /></Metadata><TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>メッセージ キューの配信機構のサーバー側再生エラーおよびクライアント側エラーの異常処理において、キュー コンポーネント内で機能します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Com + カタログのコンポーネントに対して定義されている<xref:System.EnterpriseServices.IPlaybackControl>例外クラスは、元のクラスのインターフェイスとインターフェイスの両方を実装します。 元のクラスインターフェイスのメソッド実装は、クラス自体の失敗したメソッドの例外処理を実行するために使用されます。 これらのメソッドは、 <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>最初<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>に呼び出されたメソッドの例外を処理するまたはの後に呼び出されます。  
  
 キューに置かれたコンポーネントプレーヤーは<xref:System.EnterpriseServices.IPlaybackControl> 、のメソッドを呼び出して、メッセージが最終的な静止キューまたは配信不能キューに配置されることを例外ハンドラーオブジェクトに通知します。 キューに登録されたコンポーネントプレーヤーは、元のメソッド呼び出しで失敗した例外ハンドラーオブジェクトで同じメソッドを呼び出します。 例外ハンドラーオブジェクトは、たとえば、問題の診断情報を収集したり、問題をクライアントに通知するオブジェクトやメッセージを生成したりするなど、別のを実装できます。 アプリケーションでが実装<xref:System.EnterpriseServices.IPlaybackControl>されていない場合、キューに置かれたコンポーネントプレーヤーがすべての再試行を実行すると、有害メッセージが最終的な静止キューまたは配信不能キューに配置されます。  
  
 有害なメッセージとは、何らかの理由で処理できないメッセージのことです。サーバーまたはキューシステムの問題が原因である可能性があります。 トランザクションがロールバックされ、有害メッセージがキューの先頭に移動します。 メッセージが再度デキューされると、同じ状態が発生します。 このメッセージは、問題を修正するために何かが行われるまで、無限にループを続行できます。 キューに登録されたコンポーネントサービスは、一連の再試行を使用して有害メッセージを処理します。 いくつかの再試行に失敗すると、メッセージは最後の静止キューに移動されます。 有害なメッセージは、キューに置かれたコンポーネントのメッセージムーバーツールを使用して手動で移動するまで、静止キューに保持されます。  
  
 有害なメッセージの状況は、メソッドを使用して<xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>プログラムで解決することもできます。このメソッドは、遅延アクティベーションを再生しようとするすべての試行が失敗したことをサーバー側コンポーネントの作成者に通知します。  
  
 有害なメッセージが検出された場合は、問題の根底にある原因を迅速に解決できる可能性があります。 たとえば、何らかの理由でサーバーがオフラインだった場合は、サーバーをオンラインに戻すことができます。 問題を迅速に解決できない場合は、トランザクションが発生していないことを要求元に通知する別のトランザクションを自動的に生成できます。 次に、要求元は、既にコミットされたトランザクションの影響を元に戻す補正トランザクションを作成できます。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サーバーにメッセージを配信しようとするすべてのメッセージ キュー試行が拒否され、最終的にメッセージがクライアント側のトランザクション配信不能キューに置かれていることをクライアント側の例外処理コンポーネントに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージが Xact 配信不能キューに到着すると、COM + は、この通知を配信するために、サーバークラスに関連するクライアント側の例外ハンドラーを呼び出そうとします。 これを行うには、 <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>最初にを呼び出し、次に例外ハンドラーオブジェクトで失敗したメソッドの例外処理バージョンを呼び出します。 この例外メソッドは、エラーの記録、管理者へのメールメッセージの送信、クライアント側の補正アクション (以前のトランザクションの影響の反転) などの例外アクションを実行できます。 例外メソッドが失敗した場合、メッセージは Xact 配信不能キューに残されます。  
  
 Microsoft メッセージキュー (MSMQ) エクスプローラーでは、Xact 配信不能キューを表示できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サーバーへの遅延アクティベーションを再生しようとするすべての試行が失敗し、メッセージが最後の静止キューに移動されようとしていることをサーバー側の例外クラスの実装に通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージが Xact 配信不能キューに到着すると、COM + はサーバークラスに関連するサーバー側の例外ハンドラーを呼び出そうとして、この通知を配信しようとします。 これを行うには、 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>最初にを呼び出し、次に例外ハンドラーオブジェクトで失敗したメソッドの例外処理バージョンを呼び出します。 この例外メソッドは、エラーの記録、管理者へのメールメッセージの送信、クライアント側の補正アクション (以前のトランザクションの影響の反転) などの例外アクションを実行できます。 サーバーオブジェクトは、このトランザクションを正常に完了するためにすべての作業を行う必要があります。 それ以外の場合、メッセージを再処理するには手動操作が必要です。 例外メソッドが失敗した場合、メッセージは最後の静止キューに移動されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
