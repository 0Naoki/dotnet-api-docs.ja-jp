<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ServicedComponent.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5825295aba3162ad64d7c1325b0c7adc2b191a980.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">825295aba3162ad64d7c1325b0c7adc2b191a980</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>Represents the base class of all classes using COM+ services.</source>
          <target state="translated">COM+ サービスを使用するすべてのクラスの基本クラスを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>Under certain conditions, a class that is derived from <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> that runs in a COM+ application may stop responding.</source>
          <target state="translated">派生したクラスの特定の条件下で<ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>いる COM + アプリケーションの実行が応答を停止します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>This problem is caused by an Activity deadlock.</source>
          <target state="translated">この問題は、アクティビティのデッドロックが原因です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>Activities can deadlock on multithreaded applications because of an asynchronous cleanup of component references.</source>
          <target state="translated">アクティビティは、コンポーネント参照の非同期のクリーンアップのためマルチ スレッド アプリケーションでデッドロックことができます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>To work around this problem, call the <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph> method when you complete work with objects derived from <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>.</source>
          <target state="translated">この問題を回避する、<ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph>から派生したオブジェクトを操作を完了したときにメソッド<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>For more information, see <bpt id="p1">[</bpt><ph id="ph1">http://support.microsoft.com/default.aspx?scid=kb</ph>;en-us;327443<ept id="p1">](http://support.microsoft.com/default.aspx?scid=kb;en-us;327443)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt> <ph id="ph1">http://support.microsoft.com/default.aspx?scid=kb</ph>; en-us; 327443<ept id="p1">](http://support.microsoft.com/default.aspx?scid=kb;en-us;327443)</ept>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>Client code must call <ph id="ph1">`Dispose`</ph> on serviced components to ensure proper operation.</source>
          <target state="translated">クライアント コードを呼び出す必要があります<ph id="ph1">`Dispose`</ph>でを適切に操作を確認するにはコンポーネント サービスを提供します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>The following code example demonstrates how to expose a class as a configured COM component.</source>
          <target state="translated">次のコード例では、構成済みの COM コンポーネントとしてクラスを公開する方法を示します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>To deploy this class as a configured COM component, you must generate a strong key, compile the class as a library, and register the library.</source>
          <target state="translated">このクラスは、構成済みの COM コンポーネントとしてを展開するには、強力なキーを生成、ライブラリとしてクラスをコンパイルしてライブラリを登録します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>These three steps are accomplished by the following three commands.</source>
          <target state="translated">これら 3 つの手順は、次の 3 つのコマンドによって実現されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.#ctor">
          <source>This constructor is called by derived class constructors to initialize state in this type.</source>
          <target state="translated">このコンス トラクターは、この型の状態を初期化するために、派生クラスのコンス トラクターによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Activate">
          <source>Called by the infrastructure when the object is created or allocated from a pool.</source>
          <target state="translated">オブジェクトが作成されるかプールから割り当てられるときにインフラストラクチャによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Activate">
          <source>Override this method to add custom initialization code to objects.</source>
          <target state="translated">カスタム初期化コードをオブジェクトに追加するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Activate">
          <source>The following code example demonstrates the use of this method.</source>
          <target state="translated">次のコード例では、このメソッドの使用方法を示します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.CanBePooled">
          <source>This method is called by the infrastructure before the object is put back into the pool.</source>
          <target state="translated">このメソッドは、オブジェクトがプールに戻される前にインフラストラクチャによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.CanBePooled">
          <source>Override this method to vote on whether the object is put back into the pool.</source>
          <target state="translated">オブジェクトがプールに戻されるかどうかを断定するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.CanBePooled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the serviced component can be pooled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">サービス コンポーネントをプールできる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.CanBePooled">
          <source>The following code example demonstrates the use of this method.</source>
          <target state="translated">次のコード例では、このメソッドの使用方法を示します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)">
          <source>The construction string.</source>
          <target state="translated">構築文字列。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)">
          <source>Called by the infrastructure just after the constructor is called, passing in the constructor string.</source>
          <target state="translated">コンストラクターが呼び出された直後にインフラストラクチャによって呼び出されて、コンストラクター文字列を渡します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)">
          <source>Override this method to make use of the construction string value.</source>
          <target state="translated">構築文字列値を使用するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Deactivate">
          <source>Called by the infrastructure when the object is about to be deactivated.</source>
          <target state="translated">オブジェクトが非アクティブになる直前にインフラストラクチャによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Deactivate">
          <source>Override this method to add custom finalization code to objects when just-in-time (JIT) compiled code or object pooling is used.</source>
          <target state="translated">ジャスト イン タイム (JIT: Just-In-Time) のコンパイル コードまたはオブジェクト プーリングを使用する場合にカスタム終了コードを追加するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Deactivate">
          <source>The following code example demonstrates the use of this method.</source>
          <target state="translated">次のコード例では、このメソッドの使用方法を示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.EnterpriseServices.ServicedComponent">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> で使用したリソースを解放します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> によって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>Finalizes the object and removes the associated COM+ context.</source>
          <target state="translated">オブジェクトを終了し、関連付けられている COM + コンテキストを削除します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>It is recommended to explicitly release COM+ objects and external resources before the garbage collector frees the object.</source>
          <target state="translated">ガベージ コレクターがオブジェクトを解放する前に明示的に COM + オブジェクトおよび外部リソースを解放することをお勧めします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>If the external resource is scarce or expensive, better performance can be achieved by explicitly releasing COM+ resources when they are no longer needed.</source>
          <target state="translated">外部のリソースが不足しているか高コストの場合は、不要になったときに、COM + リソースを明示的に解放することによってパフォーマンスが向上を実現できます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>Explicit control is provided by the <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">明示的な制御がによって提供される、<ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>Calling <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph>によりによって使用されるリソース、<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>を他の目的に再割り当てされます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>For more information about <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose">
          <source>Override the <ph id="ph1">&lt;see cref="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" /&gt;</ph> method to customize the dispose logic for this class.</source>
          <target state="translated">上書き、<ph id="ph1">&lt;see cref="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" /&gt;</ph>このクラスで dispose ロジックをカスタマイズする方法です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">`Dispose`</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> プロテクト呼び出します<ph id="ph2">`Dispose(Boolean)`</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 呼び出す<ph id="ph2">`Dispose`</ph>で<ph id="ph3">`disposing`</ph>'éý'<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> パラメーターが <ph id="ph2">`true`</ph> の場合、このメソッドは、この <ph id="ph3">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドは、参照される各オブジェクトの <ph id="ph1">`Dispose`</ph> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> は、他のオブジェクトから複数回呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> をオーバーライドする場合は、以前に <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">実装する方法の詳細についての<ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>Dispose メソッドの実装<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>と<bpt id="p2">[</bpt>Finalize メソッドをオーバーライドする<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)">
          <source>The object to dispose.</source>
          <target state="translated">破棄対象のオブジェクト。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)">
          <source>Finalizes the object and removes the associated COM+ reference.</source>
          <target state="translated">オブジェクトを終了し、関連付けられている COM+ 参照を削除します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)">
          <source>It is preferable to use the <ph id="ph1">`Dispose`</ph> design pattern rather than <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent.DisposeObject%2A&gt;</ph>.</source>
          <target state="translated">使用することをお勧め、<ph id="ph1">`Dispose`</ph>デザイン パターンではなくより<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent.DisposeObject%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)">
          <source>Ensures that, in the COM+ context, the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> class object's <ph id="ph2">&lt;see langword="done" /&gt;</ph> bit is set to <ph id="ph3">&lt;see langword="true" /&gt;</ph> after a remote method invocation.</source>
          <target state="translated">COM+ コンテキストで、リモート メソッド呼び出しの後に、<ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> クラス オブジェクトの <ph id="ph2">&lt;see langword="done" /&gt;</ph> ビットが <ph id="ph3">&lt;see langword="true" /&gt;</ph> に設定されるようにします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)">
          <source>A string converted from a response object that implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /&gt;</ph> インターフェイスを実装する応答オブジェクトから変換された文字列。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A&gt;</ph> method does not belong to the published interface of the <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> class and does not need to be implemented elsewhere.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A&gt;</ph>の公開されたインターフェイスにメソッドが属していない、<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>クラスし、他の場所で実装する必要はありません。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
          <source>A string to be converted into a request object that implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> インターフェイスを実装する要求オブジェクトに変換される文字列。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
          <source>Does not ensure that, in the COM+ context, the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> class object's <ph id="ph2">&lt;see langword="done" /&gt;</ph> bit is set to <ph id="ph3">&lt;see langword="true" /&gt;</ph> after a remote method invocation.</source>
          <target state="translated">COM+ コンテキストで、リモート メソッド呼び出しの後に、<ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> クラス オブジェクトの <ph id="ph2">&lt;see langword="done" /&gt;</ph> ビットが <ph id="ph3">&lt;see langword="true" /&gt;</ph> に設定されるとは限りません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
          <source>A string converted from a response object that implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /&gt;</ph> インターフェイスを実装する応答オブジェクトから変換された文字列。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A&gt;</ph> method does not belong to the published interface of the <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> class and does not need to be implemented elsewhere.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A&gt;</ph>の公開されたインターフェイスにメソッドが属していない、<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>クラスし、他の場所で実装する必要はありません。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
          <source>A bitmask where 0x00000001 is a key for the serviced component's process ID, 0x00000002 is a key for the application domain ID, and 0x00000004 is a key for the serviced component's remote URI.</source>
          <target state="translated">0x00000001 がサービス コンポーネントのプロセス ID のキーであり、0x00000002 がアプリケーション ドメイン ID のキーであり、0x00000004 がサービス コンポーネントのリモート URI のキーである、ビットマスク。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
          <source>A string array that may contain any or all of the following, in order: the serviced component's process ID, the application domain ID, and the serviced component's remote URI.</source>
          <target state="translated">サービス コンポーネントのプロセス ID、アプリケーション ドメイン ID、サービス コンポーネントのリモート URI のいずれか、またはすべてをこの順番で格納できる文字列配列。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
          <source>Obtains certain information about the <ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> class instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EnterpriseServices.ServicedComponent" /&gt;</ph> クラス インターフェイスに関する特定の情報を取得します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
          <source>The <ph id="ph1">&lt;xref:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo%2A&gt;</ph> method does not belong to the published interface of the <ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> class and does not need to be implemented elsewhere.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo%2A&gt;</ph>の公開されたインターフェイスにメソッドが属していない、<ph id="ph2">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>クラスし、他の場所で実装する必要はありません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>