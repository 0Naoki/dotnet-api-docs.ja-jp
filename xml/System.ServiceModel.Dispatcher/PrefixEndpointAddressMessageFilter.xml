<Type Name="PrefixEndpointAddressMessageFilter" FullName="System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter">
  <TypeSignature Language="C#" Value="public class PrefixEndpointAddressMessageFilter : System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PrefixEndpointAddressMessageFilter extends System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class PrefixEndpointAddressMessageFilter&#xA;Inherits MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrefixEndpointAddressMessageFilter : System::ServiceModel::Dispatcher::MessageFilter" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Dispatcher.MessageFilter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="231e7-101">URI コンポーネントの*最長プレフィックス マッチ*を使用してメッセージが EndpointAddress と一致しているかどうかを検査するクエリを表します。</span><span class="sxs-lookup"><span data-stu-id="231e7-101">Represents a query that tests whether a message matches an EndpointAddress using a *Longest-Prefix Match* for the URI component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="231e7-102"><xref:System.ServiceModel.EndpointAddress> オブジェクトは、URI とオプションのアドレス指定ヘッダーのコレクションからなります。</span><span class="sxs-lookup"><span data-stu-id="231e7-102">An <xref:System.ServiceModel.EndpointAddress> object includes a URI and an optional collection of addressing headers.</span></span> <span data-ttu-id="231e7-103">アドレス指定ヘッダーとメッセージ ヘッダーは、等価性の比較のために正規化されます。</span><span class="sxs-lookup"><span data-stu-id="231e7-103">The addressing and message headers are canonicalized to be compared for equality.</span></span> <span data-ttu-id="231e7-104"><xref:System.ServiceModel.EndpointAddress> 内に同じパラメーターが 2 回以上現れる場合は、少なくともそれと同じ回数だけ、対応するヘッダーがメッセージ内に出現する必要があります。</span><span class="sxs-lookup"><span data-stu-id="231e7-104">If a parameter appears more than once in an <xref:System.ServiceModel.EndpointAddress>, the corresponding header must appear in the message at least that many times.</span></span>  
  
 <span data-ttu-id="231e7-105">このフィルターと同じクエリを実行する<xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter>によって、メッセージがエンドポイント アドレスに一致するかどうかのテストを実行する点を除いて、*最長プレフィックス マッチ*です。</span><span class="sxs-lookup"><span data-stu-id="231e7-105">This filter performs the same query as <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter>, except that the test for whether a message matches an endpoint address is done by a *Longest-Prefix Match*.</span></span> <span data-ttu-id="231e7-106">これは、フィルターで指定されている URI がメッセージの URI に厳密に一致している必要はないが、プレフィックスとして URI に含まれている必要があるという意味です。</span><span class="sxs-lookup"><span data-stu-id="231e7-106">This means that the URI specified in the filter does not have to match the message's URI exactly, but must be contained in that URI as a prefix.</span></span> <span data-ttu-id="231e7-107">たとえば、フィルターでアドレス "www.foo.com" が指定されており、メッセージの宛先が "www.foo.com/customerA" である場合、フィルター クエリ条件の URI 部分は満たされます。</span><span class="sxs-lookup"><span data-stu-id="231e7-107">For example, if a filter specifies the address "www.foo.com", and a message is addressed to "www.foo.com/customerA", then the URI part of the filter query condition will be met.</span></span> <span data-ttu-id="231e7-108">ただし、フィルター クエリのヘッダー部分はまだ、実行される必要があります。</span><span class="sxs-lookup"><span data-stu-id="231e7-108">However, the header portion of the filter query still has to be done.</span></span>  
  
 <span data-ttu-id="231e7-109">インターネット インフォメーション サービス (IIS) と基になるファイル システム (NTFS または FAT) は、大文字と小文字を区別しません。</span><span class="sxs-lookup"><span data-stu-id="231e7-109">Internet Information Services (IIS) and the underlying file system (NTFS or FAT) are case-insensitive.</span></span> <span data-ttu-id="231e7-110">このクラスによって実行される URI の比較も、大文字と小文字を区別しません。</span><span class="sxs-lookup"><span data-stu-id="231e7-110">URI comparisons done by this class are also case-insensitive.</span></span> <span data-ttu-id="231e7-111">したがって、たとえば、http://www.microsoft.comに等しいと評価http://WWW.microsoft.comです。</span><span class="sxs-lookup"><span data-stu-id="231e7-111">So, for example, http://www.microsoft.com is evaluated as equal to http://WWW.microsoft.com.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="231e7-112"><see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="231e7-112">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrefixEndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As EndpointAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrefixEndpointAddressMessageFilter(System::ServiceModel::EndpointAddress ^ address);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="231e7-113">メッセージの判定に使用される <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="231e7-113">The <see cref="T:System.ServiceModel.EndpointAddress" /> against which messages are tested.</span></span></param>
        <summary><span data-ttu-id="231e7-114"><see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="231e7-114">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="231e7-115"><paramref name="address" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="231e7-115"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrefixEndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As EndpointAddress, includeHostNameInComparison As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrefixEndpointAddressMessageFilter(System::ServiceModel::EndpointAddress ^ address, bool includeHostNameInComparison);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="includeHostNameInComparison" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="231e7-116">メッセージの判定に使用される <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="231e7-116">The <see cref="T:System.ServiceModel.EndpointAddress" /> against which messages are tested.</span></span></param>
        <param name="includeHostNameInComparison">
          <span data-ttu-id="231e7-117">エンドポイント アドレスの比較にホスト名が含まれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="231e7-117"><see langword="true" /> if the host name is included in the endpoint address comparison; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="231e7-118"><see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="231e7-118">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="231e7-119">Web サービスをローカル コンピューターにインストールしている場合は、次のようなさまざまな参照方法があります。</span><span class="sxs-lookup"><span data-stu-id="231e7-119">If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:</span></span>  
  
-   http://localhost/foo.svc  
  
-   http://192.168.1.100/foo.svc  
  
-   <span data-ttu-id="231e7-120">http://[コンピューター名]/foo.svc</span><span class="sxs-lookup"><span data-stu-id="231e7-120">http://[my-machine-name]/foo.svc</span></span>  
  
-   <span data-ttu-id="231e7-121">http://[コンピューター名].[会社].com/foo.svc</span><span class="sxs-lookup"><span data-stu-id="231e7-121">http://[my-machine-name].[my-company].com/foo.svc.</span></span>  
  
 <span data-ttu-id="231e7-122">`includeHostNameInComparison` パラメーターの値が `false` の場合、上記の URI はすべて同じエンドポイントに解決されます。</span><span class="sxs-lookup"><span data-stu-id="231e7-122">If the value of the `includeHostNameInComparison` parameter is `false`, the above URIs all resolve to the same endpoint.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="231e7-123"><paramref name="address" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="231e7-123"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ Address { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="231e7-124"><see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> がメッセージを検査する対象のエンドポイント アドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="231e7-124">Gets the Endpoint Address that the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> tests messages against.</span></span></summary>
        <value><span data-ttu-id="231e7-125"><see cref="T:System.ServiceModel.EndpointAddress" /> がメッセージを比較するとき基準とする <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />。</span><span class="sxs-lookup"><span data-stu-id="231e7-125">The <see cref="T:System.ServiceModel.EndpointAddress" /> that the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> tests messages against.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal override System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; override System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData"><span data-ttu-id="231e7-126">テーブル内のフィルターに関連付けられたデータ。</span><span class="sxs-lookup"><span data-stu-id="231e7-126">Data associated with the filters in the table.</span></span></typeparam>
        <summary><span data-ttu-id="231e7-127">メッセージを複数のエンドポイント アドレスについて同時に検査する新しいフィルター テーブルを作成します。</span><span class="sxs-lookup"><span data-stu-id="231e7-127">Creates a new filter table that tests a message against multiple endpoint addresses simultaneously.</span></span></summary>
        <returns><span data-ttu-id="231e7-128"><see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> および対応する <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> を格納できる <paramref name="FilterData" /> インターフェイスを実装するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="231e7-128">An object that implements the <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> interface that can contain <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />s with associated <paramref name="FilterData" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="231e7-129">このメソッドは、特定のメッセージ エンドポイントの判定に最適化された <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="231e7-129">The method returns an instance of <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> that is optimized to test for specific message endpoints.</span></span>  
  
 <span data-ttu-id="231e7-130">このメソッドは、<xref:System.ServiceModel.Dispatcher.MessageFilterTable%601> によって使用されることを想定しています。</span><span class="sxs-lookup"><span data-stu-id="231e7-130">This method is intended to be used by <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeHostNameInComparison">
      <MemberSignature Language="C#" Value="public bool IncludeHostNameInComparison { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostNameInComparison" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IncludeHostNameInComparison As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostNameInComparison { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="231e7-131">エンドポイント アドレスの比較にホスト名が含まれるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="231e7-131">Gets a value that indicates whether the host name is included in the endpoint address comparison.</span></span></summary>
        <value>
          <span data-ttu-id="231e7-132">エンドポイント アドレスの比較にホスト名が含まれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="231e7-132"><see langword="true" /> if the host name is included in the endpoint address comparison; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="231e7-133">Web サービスをローカル コンピューターにインストールしている場合は、次のようなさまざまな参照方法があります。</span><span class="sxs-lookup"><span data-stu-id="231e7-133">If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:</span></span>  
  
-   http://localhost/foo.svc  
  
-   http://192.168.1.100/foo.svc  
  
-   <span data-ttu-id="231e7-134">http://[コンピューター名]/foo.svc</span><span class="sxs-lookup"><span data-stu-id="231e7-134">http://[my-machine-name]/foo.svc</span></span>  
  
-   <span data-ttu-id="231e7-135">http://[コンピューター名].[会社].com/foo.svc</span><span class="sxs-lookup"><span data-stu-id="231e7-135">http://[my-machine-name].[my-company].com/foo.svc.</span></span>  
  
 <span data-ttu-id="231e7-136">このプロパティの既定値は `false` であるため、プロパティを変更しない限り、上記の URI はすべて同じエンドポイントに解決されます。</span><span class="sxs-lookup"><span data-stu-id="231e7-136">The default value of this property is `false`, so the above URIs all resolve to the same endpoint, unless you change this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="231e7-137">メッセージまたはバッファー内のメッセージがエンドポイント フィルターの基準を満たすかどうかを検査します。</span><span class="sxs-lookup"><span data-stu-id="231e7-137">Tests whether a message or buffered message satisfies the criteria of the endpoint filter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="231e7-138">このフィルターは、メッセージ本文を検査せず、最長プレフィックス マッチを行うためにアドレスのみを検査した後にヘッダーを検査するため、このメソッドの 2 つのオーバーロードは等価です。</span><span class="sxs-lookup"><span data-stu-id="231e7-138">The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="231e7-139">テスト対象の <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="231e7-139">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test.</span></span></param>
        <summary><span data-ttu-id="231e7-140">メッセージが指定したエンドポイント アドレスを満たすかどうかを検査します。</span><span class="sxs-lookup"><span data-stu-id="231e7-140">Tests whether a message satisfies the specified endpoint address.</span></span></summary>
        <returns>
          <span data-ttu-id="231e7-141"><see langword="true" /> オブジェクトがフィルターに指定されたエンドポイント アドレスとの一致条件を満たす場合は <see cref="T:System.ServiceModel.Channels.Message" />、そうでない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="231e7-141"><see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.Message" /> object satisfies the endpoint address specified in the filter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="231e7-142">このフィルターは、メッセージ本文を検査せず、最長プレフィックス マッチを行うためにアドレスのみを検査した後にヘッダーを検査するため、このメソッドの 2 つのオーバーロードは等価です。</span><span class="sxs-lookup"><span data-stu-id="231e7-142">The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="231e7-143"><paramref name="message" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="231e7-143"><paramref name="message" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (System.ServiceModel.Channels.MessageBuffer messageBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer messageBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Match(System::ServiceModel::Channels::MessageBuffer ^ messageBuffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageBuffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="messageBuffer"><span data-ttu-id="231e7-144">テスト対象の <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="231e7-144">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test.</span></span></param>
        <summary><span data-ttu-id="231e7-145">バッファー内のメッセージが指定したエンドポイント アドレスを満たすかどうかを検査します。</span><span class="sxs-lookup"><span data-stu-id="231e7-145">Tests whether a buffered message satisfies the specified endpoint address.</span></span></summary>
        <returns>
          <span data-ttu-id="231e7-146"><see langword="true" /> オブジェクトがエンドポイント アドレスとの一致条件を満たす場合は <see cref="T:System.ServiceModel.Channels.MessageBuffer" />、そうでない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="231e7-146"><see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object satisfies the endpoint address; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="231e7-147">このフィルターは、メッセージ本文を検査せず、最長プレフィックス マッチを行うためにアドレスのみを検査した後にヘッダーを検査するため、このメソッドの 2 つのオーバーロードは等価です。</span><span class="sxs-lookup"><span data-stu-id="231e7-147">The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="231e7-148"><paramref name="messageBuffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="231e7-148"><paramref name="messageBuffer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>