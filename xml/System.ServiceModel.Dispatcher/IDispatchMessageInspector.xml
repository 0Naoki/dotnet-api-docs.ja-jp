<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDispatchMessageInspector.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b993105bcecb3322ed5684bf4865f5440f8cc008.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b993105bcecb3322ed5684bf4865f5440f8cc008</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</source>
          <target state="translated">サービス アプリケーションで受信および送信アプリケーション メッセージのカスタム検査または変更を可能にするメソッドを定義します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</source>
          <target state="translated">要求メッセージを操作にディスパッチする前に、または応答メッセージを呼び出し元に返す前に、受信または送信アプリケーション メッセージを検査または変更するには、<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> を実装します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</source>
          <target state="translated">メッセージの宛先の操作を呼び出す前にメッセージをインターセプトする必要のあるシナリオは、数多くあります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>For example, you can log incoming application messages or perform some feature based on a message header.</source>
          <target state="translated">たとえば、受信アプリケーション メッセージをログに記録したり、メッセージ ヘッダーに基づいてなんらかの機能を実行したりすることが考えられます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>Typically, message inspectors are inserted by a service behavior (<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>), an endpoint behavior (<ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>), or a contract behavior (<ph id="ph3">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">通常、メッセージ インスペクターは、サービス動作 (<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>)、エンドポイント動作 (<ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>)、またはコントラクト動作 (<ph id="ph3">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>) により挿入されます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The behavior then adds the message inspector to the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">その後、動作は、メッセージ インスペクターを <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> コレクションに追加します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>For more information about extending the runtime using behaviors, see <bpt id="p1">[</bpt>Extending ServiceHost and the Service Model Layer<ept id="p1">](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)</ept>.</source>
          <target state="translated">動作を使用してランタイムを拡張する方法の詳細については、次を参照してください。 <bpt id="p1">[</bpt>ServiceHost を拡張すると、サービス モデル レイヤー<ept id="p1">](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> メソッドを使用すると、メッセージを受信した後で、目的の操作にメッセージをディスパッチする前に、カスタム動作を実行できます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method enables custom behavior after the operation returns but before the reply is sent.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> メソッドを使用すると、操作から返った後で、応答を送信する前に、カスタム動作を実行できます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</source>
          <target state="translated">操作が一方向か要求/応答かに関係なく、<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> オブジェクトは常に、メッセージ ディスパッチの間の同じ位置で呼び出されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The following code example shows a basic <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> that writes a string to the console when it is invoked.</source>
          <target state="translated">次のコード例では、呼び出されるときにコンソールに文字列を書き出す基本的な <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> を示します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The following code example shows the implementation of an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> that adds the <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph><ph id="ph2">`Inspector`</ph> を <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> に追加する <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> の実装を示します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
          <source>The following code example shows the use of an application configuration file to load the service behavior that inserts the <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</source>
          <target state="translated">次のコード例では、アプリケーション構成ファイルを使用して、<ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> を挿入するサービス動作を読み込む方法を示しています。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The request message.</source>
          <target state="translated">要求メッセージ。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The incoming channel.</source>
          <target state="translated">受信チャネル。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The current service instance.</source>
          <target state="translated">現在のサービス インスタンス。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>Called after an inbound message has been received but before the message is dispatched to the intended operation.</source>
          <target state="translated">受信メッセージを受信した後で、ただし、目的の操作にメッセージをディスパッチする前に、呼び出されます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The object used to correlate state.</source>
          <target state="translated">状態を相関させるために使用するオブジェクト。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>This object is passed back in the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">このオブジェクトは、<ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> メソッドに戻します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> メソッドは、受信メッセージ、メッセージを提供したクライアント チャネル、および現在のサービス インスタンスを検査または変更するために使用します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The return value can be any object that you want to use for correlation purposes; it is returned to you as the <ph id="ph1">`correlationState`</ph> parameter in the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method.</source>
          <target state="translated">戻り値は、相関のために使用する任意のオブジェクトです。<ph id="ph1">`correlationState`</ph> メソッドの <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> パラメーターとして返されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>You cannot use the body of the message unless you buffer the entire message and make a copy.</source>
          <target state="translated">メッセージ全体をバッファーに格納してコピーを作成しない限り、メッセージの本文を使用することはできません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the <ph id="ph1">`request`</ph> parameter.</source>
          <target state="translated">これを行う場合は、メッセージのコピーを 2 つ作成する必要があります。1 つは検査用で、もう 1 つは <ph id="ph1">`request`</ph> パラメーターを上書きするためです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The following code example shows a basic <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> that writes a string to the console when it is invoked.</source>
          <target state="translated">次のコード例では、呼び出されるときにコンソールに文字列を書き出す基本的な <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> を示します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The following code example shows the implementation of an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> that adds the <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph><ph id="ph2">`Inspector`</ph> を <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> に追加する <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> の実装を示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
          <source>The following code example shows the use of an application configuration file to load the service behavior that inserts the <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</source>
          <target state="translated">次のコード例では、アプリケーション構成ファイルを使用して、<ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> を挿入するサービス動作を読み込む方法を示しています。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The reply message.</source>
          <target state="translated">応答メッセージ。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>This value is null if the operation is one way.</source>
          <target state="translated">操作が一方向の場合は、この値が null です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The correlation object returned from the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /&gt;</ph> メソッドから返された相関オブジェクト。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Called after the operation has returned but before the reply message is sent.</source>
          <target state="translated">操作から返った後で、ただし、応答メッセージを送信する前に、呼び出されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method to perform custom behavior prior to sending the return message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> メソッドは、戻りメッセージを送信する前にカスタム動作を実行するために使用します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The <ph id="ph1">`correlationState`</ph> is the object returned from the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</source>
          <target state="translated"><ph id="ph1">`correlationState`</ph> は <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> メソッドから返されるオブジェクトで、これを使用すると、受信呼び出しと送信呼び出しの間の相関を実行し、独自の動作をサポートすることができます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows a basic <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> that writes a string to the console when it is invoked.</source>
          <target state="translated">次のコード例では、呼び出されるときにコンソールに文字列を書き出す基本的な <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> を示します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows the implementation of an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> that adds the <ph id="ph2">`Inspector`</ph><ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph><ph id="ph2">`Inspector`</ph> を <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> に追加する <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType&gt;</ph> の実装を示します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows the use of an application configuration file to load the service behavior that inserts the <ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph>.</source>
          <target state="translated">次のコード例では、アプリケーション構成ファイルを使用して、<ph id="ph1">`Inspector`</ph><ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> を挿入するサービス動作を読み込む方法を示しています。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>