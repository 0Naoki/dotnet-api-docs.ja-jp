<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2cf35-101"><see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> クラスを拡張し、Windows Communication Foundation (WCF) ランタイム内で発生する未処理の例外に対する例外ハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-101">Extend the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cf35-102"><xref:System.ServiceModel.Dispatcher.ExceptionHandler> クラスを拡張し、<xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> メソッドをオーバーライドして、例外によりアプリケーションを修了する必要があるかどうかを判定します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-102">Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application.</span></span> <span data-ttu-id="2cf35-103">独自の新しいインスタンスを作成し、<xref:System.ServiceModel.Dispatcher.ExceptionHandler>クラスし、静的に割り当てる<xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>または<xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A>WCF クライアントまたはサービスを作成する前にプロパティです。</span><span class="sxs-lookup"><span data-stu-id="2cf35-103">Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating WCF clients or services.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cf35-104">次のコード例は、<xref:System.ServiceModel.Dispatcher.ExceptionHandler> メソッドをオーバーライドする <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 抽象クラスを実装しています。</span><span class="sxs-lookup"><span data-stu-id="2cf35-104">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 <span data-ttu-id="2cf35-105">次のコード例は、ユーザー設定を有効にする方法を示しています。 `MyExceptionHandler` WCF ランタイム内で発生する未処理の例外。</span><span class="sxs-lookup"><span data-stu-id="2cf35-105">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2cf35-106"><see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-106">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cf35-107">すべての例外を処理する <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> のインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-107">Gets an instance of <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> that handles all exceptions.</span></span></summary>
        <value><span data-ttu-id="2cf35-108">すべての例外に <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> を返す <see langword="true" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2cf35-108">An <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that returns <see langword="true" /> for all exceptions.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cf35-109">アプリケーション ドメインの現在の <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> の実装を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-109">Gets or sets the current <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span></span></summary>
        <value><span data-ttu-id="2cf35-110">非同期 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> スレッドで発生する未処理の例外を受け取るカスタム [!INCLUDE[indigo1](~/includes/indigo1-md.md)] オブジェクトを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="2cf35-110">Assign a custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur on asynchronous [!INCLUDE[indigo1](~/includes/indigo1-md.md)] threads.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cf35-111">既定では、<xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>プロパティは`null`、および非同期の WCF スレッドで未処理の例外がアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-111">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous WCF threads terminate the application.</span></span>  <span data-ttu-id="2cf35-112">このような例外を受け取って対応するには、このプロパティに <xref:System.ServiceModel.Dispatcher.ExceptionHandler> オブジェクトを設定します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-112">Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="2cf35-113">未処理の例外は、非同期 WCF スレッドに行われ、このハンドラーに達すると、アプリケーション ドメインの状態が危険にさらされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cf35-113">If an unhandled exception occurs on an asynchronous WCF thread and reaches this handler, the state of the application domain may be compromised.</span></span>  <span data-ttu-id="2cf35-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 返されません`true`で例外をします。</span><span class="sxs-lookup"><span data-stu-id="2cf35-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="2cf35-115">[!INCLUDE[indigo1](~/includes/indigo1-md.md)] ランタイム内で発生し、アプリケーションを終了させる可能性のある例外。</span><span class="sxs-lookup"><span data-stu-id="2cf35-115">The exception the occurred within the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] runtime and which may terminate the application.</span></span></param>
        <summary><span data-ttu-id="2cf35-116">派生クラスでオーバーライドされると、例外が処理された場合は <see langword="true" /> を返し、例外を再スローしてアプリケーションを終了する必要がある場合は <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-116">When overridden in a derived class, returns <see langword="true" /> if the exception has been handled, or <see langword="false" /> if the exception should be rethrown and the application terminated.</span></span></summary>
        <returns>
          <span data-ttu-id="2cf35-117">例外が処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2cf35-117"><see langword="true" /> if the exception has been handled; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cf35-118">例外が処理された場合、<xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> プロパティは `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-118">The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled.</span></span> <span data-ttu-id="2cf35-119">このプロパティが `false` を返す場合、または別の例外をスローする場合は、元の例外が再スローされます。</span><span class="sxs-lookup"><span data-stu-id="2cf35-119">If it returns `false` or throws a different exception, the original exception is rethrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2cf35-120">次のコード例は、<xref:System.ServiceModel.Dispatcher.ExceptionHandler> メソッドをオーバーライドする <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 抽象クラスを実装しています。</span><span class="sxs-lookup"><span data-stu-id="2cf35-120">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
  
  
 <span data-ttu-id="2cf35-121">次のコード例は、ユーザー設定を有効にする方法を示しています。 `MyExceptionHandler` WCF ランタイム内で発生する未処理の例外。</span><span class="sxs-lookup"><span data-stu-id="2cf35-121">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2cf35-122">アプリケーション ドメインの現在のトランスポート <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> の実装を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-122">Gets or sets the current transport <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span></span></summary>
        <value><span data-ttu-id="2cf35-123">グローバル <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> トランスポート内で発生する未処理の例外を受け取るカスタム [!INCLUDE[indigo1](~/includes/indigo1-md.md)] オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2cf35-123">A custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur within the global [!INCLUDE[indigo1](~/includes/indigo1-md.md)] transports.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2cf35-124">既定では、<xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A>の値に設定されて<xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>、無視するように WCF トランスポート内で未処理の例外の原因です。</span><span class="sxs-lookup"><span data-stu-id="2cf35-124">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within WCF transports to be ignored.</span></span>  <span data-ttu-id="2cf35-125">このような例外を受け取って対応するには、このプロパティに <xref:System.ServiceModel.Dispatcher.ExceptionHandler> のインスタンスを設定します。</span><span class="sxs-lookup"><span data-stu-id="2cf35-125">Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="2cf35-126">場合は、未処理の例外は、グローバルの WCF トランスポート内で発生し、このハンドラーに達すると、アプリケーション ドメインの状態が侵害された可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2cf35-126">If an unhandled exception occurs within a global WCF transport and reaches this handler, there is a possibility that the state of the application domain is compromised.</span></span> <span data-ttu-id="2cf35-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 返すことができる`false`で、アプリケーションが終了する例外をします。</span><span class="sxs-lookup"><span data-stu-id="2cf35-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>