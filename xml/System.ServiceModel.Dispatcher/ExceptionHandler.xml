<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExceptionHandler.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72d5542b8db2be95a211477297f4b5bb3a5f284100.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5542b8db2be95a211477297f4b5bb3a5f284100</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>Extend the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> クラスを拡張し、Windows Communication Foundation (WCF) ランタイム内で発生する未処理の例外に対する例外ハンドラーを作成します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>Extend the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> class and override the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> method to determine whether an exception should terminate the application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> クラスを拡張し、<ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> メソッドをオーバーライドして、例外によりアプリケーションを修了する必要があるかどうかを判定します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>Then create a new instance of your custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> class and assign it to the static <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph> property prior to creating WCF clients or services.</source>
          <target state="translated">独自の新しいインスタンスを作成し、<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph>クラスし、静的に割り当てる<ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph>WCF クライアントまたはサービスを作成する前にプロパティです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>The following code example shows an implementation of the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> abstract class that overrides the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例は、<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> メソッドをオーバーライドする <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> 抽象クラスを実装しています。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.ExceptionHandler">
          <source>The following code example shows how to enable the custom <ph id="ph1">`MyExceptionHandler`</ph> for unhandled exceptions that occur within the WCF runtime.</source>
          <target state="translated">次のコード例は、ユーザー設定を有効にする方法を示しています。 <ph id="ph1">`MyExceptionHandler`</ph> WCF ランタイム内で発生する未処理の例外。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle">
          <source>Gets an instance of <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> that handles all exceptions.</source>
          <target state="translated">すべての例外を処理する <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> のインスタンスを取得します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> object that returns <ph id="ph2">&lt;see langword="true" /&gt;</ph> for all exceptions.</source>
          <target state="translated">すべての例外に <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> を返す <ph id="ph2">&lt;see langword="true" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>Gets or sets the current <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> implementation for the application domain.</source>
          <target state="translated">アプリケーション ドメインの現在の <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> の実装を取得または設定します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>Assign a custom <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> object that receives unhandled exceptions that occur on asynchronous <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> threads.</source>
          <target state="translated">非同期 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> スレッドで発生する未処理の例外を受け取るカスタム <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> オブジェクトを割り当てます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>By default, the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, and unhandled exceptions on asynchronous WCF threads terminate the application.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph>プロパティは<ph id="ph2">`null`</ph>、および非同期の WCF スレッドで未処理の例外がアプリケーションを終了します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>Set this property to an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> object to receive and react to these exceptions.</source>
          <target state="translated">このような例外を受け取って対応するには、このプロパティに <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> オブジェクトを設定します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source>If an unhandled exception occurs on an asynchronous WCF thread and reaches this handler, the state of the application domain may be compromised.</source>
          <target state="translated">未処理の例外は、非同期 WCF スレッドに行われ、このハンドラーに達すると、アプリケーション ドメインの状態が危険にさらされる可能性があります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> should not return <ph id="ph2">`true`</ph> for these exceptions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> 返されません<ph id="ph2">`true`</ph>で例外をします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The exception the occurred within the <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> runtime and which may terminate the application.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> ランタイム内で発生し、アプリケーションを終了させる可能性のある例外。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>When overridden in a derived class, returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the exception has been handled, or <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the exception should be rethrown and the application terminated.</source>
          <target state="translated">派生クラスでオーバーライドされると、例外が処理された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph> を返し、例外を再スローしてアプリケーションを終了する必要がある場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the exception has been handled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">例外が処理された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> if the exception has been handled.</source>
          <target state="translated">例外が処理された場合、<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> プロパティは <ph id="ph2">`true`</ph> を返します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>If it returns <ph id="ph1">`false`</ph> or throws a different exception, the original exception is rethrown.</source>
          <target state="translated">このプロパティが <ph id="ph1">`false`</ph> を返す場合、または別の例外をスローする場合は、元の例外が再スローされます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The following code example shows an implementation of the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> abstract class that overrides the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例は、<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> メソッドをオーバーライドする <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> 抽象クラスを実装しています。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
          <source>The following code example shows how to enable the custom <ph id="ph1">`MyExceptionHandler`</ph> for unhandled exceptions that occur within the WCF runtime.</source>
          <target state="translated">次のコード例は、ユーザー設定を有効にする方法を示しています。 <ph id="ph1">`MyExceptionHandler`</ph> WCF ランタイム内で発生する未処理の例外。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>Gets or sets the current transport <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> implementation for the application domain.</source>
          <target state="translated">アプリケーション ドメインの現在のトランスポート <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> の実装を取得または設定します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>A custom <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> object that receives unhandled exceptions that occur within the global <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> transports.</source>
          <target state="translated">グローバル <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /&gt;</ph> トランスポート内で発生する未処理の例外を受け取るカスタム <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>By default, the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph> property is set to the value of <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A&gt;</ph>, causing unhandled exceptions within WCF transports to be ignored.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph>の値に設定されて<ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A&gt;</ph>、無視するように WCF トランスポート内で未処理の例外の原因です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>Set this property to an instance of <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> to receive and react to these exceptions.</source>
          <target state="translated">このような例外を受け取って対応するには、このプロパティに <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> のインスタンスを設定します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source>If an unhandled exception occurs within a global WCF transport and reaches this handler, there is a possibility that the state of the application domain is compromised.</source>
          <target state="translated">場合は、未処理の例外は、グローバルの WCF トランスポート内で発生し、このハンドラーに達すると、アプリケーション ドメインの状態が侵害された可能性があります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> can return <ph id="ph2">`false`</ph> for these exceptions to cause the application to be terminated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> 返すことができる<ph id="ph2">`false`</ph>で、アプリケーションが終了する例外をします。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>