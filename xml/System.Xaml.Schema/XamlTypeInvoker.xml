<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlTypeInvoker.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5504f5574033cb4de7a3c6a42e6208306d4dd86e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">504f5574033cb4de7a3c6a42e6208306d4dd86e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</source>
          <target state="translated">リフレクションまたはコンストラクター以外の方法で XAML 型のインスタンスを構築できる拡張ポイントを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>The purpose of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <ph id="ph2">&lt;xref:System.Type&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">目的は、<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>拡張の XAML 型システム、スキーマ、および、動作中の CLR 属性を使用してリフレクション情報などの CLR 機能に完全に依存せずに実行を有効にするのには、<ph id="ph2">&lt;xref:System.Type&gt;</ph>と<ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>のようにします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> are used as input parameters for the alternate constructors of XAML schema classes such as <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">サブクラス<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>などの XAML スキーマのクラスの別のコンス トラクターの入力パラメーターとして使用されます<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>You subclass <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and pass the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> through to the base constructor.</source>
          <target state="translated">サブクラス<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>を渡すと、<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>を通じて、基底コンス トラクターにします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Along with defining a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> for the constructor, you must also provide overrides for at least some of the <ph id="ph2">`Lookup`</ph> methods of <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">定義すると共に、 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 、コンス トラクターも指定してください用の上書きには、少なくともいくつかの<ph id="ph2">`Lookup`</ph>のメソッド<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> has a default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 既定の実装があります。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>The default implementation follows a similar model to the default implementation of XAML schema types <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <ph id="ph3">&lt;xref:System.Type&gt;</ph> and <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">既定の実装では、類似のモデルを XAML スキーマの種類の既定の実装に依存<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>と<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: インスタンス化、値、および CLR 属性の使用を含む、参照の CLR 型システムが使用される<ph id="ph3">&lt;xref:System.Type&gt;</ph>と<ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>のようにします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> provides methods for basic instantiation (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A&gt;</ph>) and methods that are relevant for types where the <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a collection, dictionary or array (<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A&gt;</ph>; <ph id="ph5">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A&gt;</ph>; <ph id="ph6">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A&gt;</ph>; <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A&gt;</ph>; <ph id="ph8">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 基本的なインスタンス化するメソッドを提供 (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A&gt;</ph>) とメソッドの種類に関連する場所、<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>コレクション、ディクショナリまたは配列を表します (<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A&gt;</ph>です。<ph id="ph5">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A&gt;</ph>;<ph id="ph6">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A&gt;</ph>;<ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A&gt;</ph>;<ph id="ph8">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>The default implementation is empty.</source>
          <target state="translated">既定の実装は、空です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>This constructor is invoked internally to provide a value for <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A&gt;</ph>.</source>
          <target state="translated">値を指定するこのコンス トラクターが内部的に呼び出される<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>For a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> subclass, it is expected that you either use the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> signature for construction or provide an override that calls <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> as base.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>サブクラスは、いずれかを使用することを想定して、<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph>を作成するための署名を呼び出すオーバーライドを提供または<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph>基本です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>Providing the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> implements a default pattern where <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is immutable.</source>
          <target state="translated">提供する、<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>既定の実装パターン where<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>は変更できません。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> value for the specific XAML type relevant to this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> に関連する固有の XAML 型の <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 値。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class, based on a provided <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">提供された <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> に基づいて、<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>This constructor is called internally based on the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> where the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is used for construction.</source>
          <target state="translated">このコンス トラクターは内部でに基づいてと呼ばれる、<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>場所、<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>構築に使用します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>The <ph id="ph1">`type`</ph> provided here is relevant to all other method calls for <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`type`</ph>の他のすべてのメソッドの呼び出しに関連するここでは<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> を構築するために使用した <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> によって指定された型のインスタンス。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The item to add.</source>
          <target state="translated">追加する項目。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Adds the provided item to an instance of the type that is relevant to this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">指定した項目を、この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> に関連する型のインスタンスに追加します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>You should only call this method on a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that represents a collection.</source>
          <target state="translated">のみこのメソッドを呼び出す必要があります、<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>を表すコレクション。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">不明な <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> に基づく <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> で、このメソッドを呼び出しました。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt> -または- <ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a collection.</source>
          <target state="translated">関連する型がコレクションではない <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> で、このメソッドを呼び出しました。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> の <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> は、<ph id="ph3">&lt;see langword="null" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">基底の実装には、内部ヘルパーの呼び出しが含まれています。 <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">このヘルパーは常に場合にスロー場所、<ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>は不明なに基づいて<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>であるケースが含まれている、<ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>の<ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>は<ph id="ph5">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Internally, the base implementation calls <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsCollection" /&gt;</ph>, and throws if the result is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">基底の実装の呼び出しでは内部的には、 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsCollection" /&gt;</ph>、し、結果は場合スロー<ph id="ph2">&lt;see langword="false" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementation.</source>
          <target state="translated">基底の実装は必ずしも使用独自<ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is attempted.</source>
          <target state="translated">最初の cast<ph id="ph1">&lt;paramref name="instance" /&gt;</ph>に<ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>しようとするとします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IList.Add(System.Object)" /&gt;</ph> is made and the method returns.</source>
          <target state="translated">これが成功するへの呼び出し<ph id="ph1">&lt;see cref="M:System.Collections.IList.Add(System.Object)" /&gt;</ph>が行われますが返されます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">基底の実装が CLR を使用する場合は、<ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph>を呼び出す、基になる<ph id="ph2">&lt;see langword="Add" /&gt;</ph>メソッドへの呼び出しから取得した<ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph>この<ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>In the base implementation no exception is raised at this level if <ph id="ph1">&lt;paramref name="item" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">基本の実装で例外は発生しない場合、このレベルで<ph id="ph1">&lt;paramref name="item" /&gt;</ph>は<ph id="ph2">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>It is still possible that the underlying <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method will raise an exception when invoked.</source>
          <target state="translated">可能性がありますする、基になる<ph id="ph1">&lt;see langword="Add" /&gt;</ph>メソッドが呼び出されたときに例外を発生させます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Other run time exceptions are possible if <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> does not return a valid result.</source>
          <target state="translated">他の実行時例外が考えられる場合<ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph>は有効な結果を返しません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> を構築するために使用した <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> によって指定された型のインスタンス。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Dictionary key for the item to add.</source>
          <target state="translated">追加するアイテムのディクショナリ キー。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The item value to add.</source>
          <target state="translated">追加する項目値。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Adds the provided key and item value to an instance of the type that is relevant to this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">指定したキーと項目の値を、この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> に関連する型のインスタンスに追加します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>You should only call this method on a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that represents a dictionary.</source>
          <target state="translated">のみこのメソッドを呼び出す必要があります、<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>を表すディクショナリ。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">不明な <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> に基づく <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> で、このメソッドを呼び出しました。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt> -または- <ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a dictionary.</source>
          <target state="translated">関連する型がディクショナリではない <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> で、このメソッドを呼び出しました。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> の <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> は、<ph id="ph3">&lt;see langword="null" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">基底の実装には、内部ヘルパーの呼び出しが含まれています。 <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">このヘルパーは常に場合にスロー場所、<ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>は不明なに基づいて<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>であるケースが含まれている、<ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>の<ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>は<ph id="ph5">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Internally, the base implementation calls <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsDictionary" /&gt;</ph>, and throws if the result is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">基底の実装の呼び出しでは内部的には、 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsDictionary" /&gt;</ph>、し、結果は場合スロー<ph id="ph2">&lt;see langword="false" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementation.</source>
          <target state="translated">基底の実装は必ずしも使用独自<ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is attempted.</source>
          <target state="translated">最初の cast<ph id="ph1">&lt;paramref name="instance" /&gt;</ph>に<ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>しようとするとします。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /&gt;</ph> is made and the method returns.</source>
          <target state="translated">これが成功するへの呼び出し<ph id="ph1">&lt;see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /&gt;</ph>が行われますが返されます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">基底の実装が CLR を使用する場合は、<ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph>を呼び出す、基になる<ph id="ph2">&lt;see langword="Add" /&gt;</ph>メソッドへの呼び出しから取得した<ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph>この<ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>In the base implementation no exception is raised at this level if <ph id="ph1">&lt;paramref name="item" /&gt;</ph> or <ph id="ph2">&lt;paramref name="key" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">基本の実装で例外は発生しない場合、このレベルで<ph id="ph1">&lt;paramref name="item" /&gt;</ph>または<ph id="ph2">&lt;paramref name="key" /&gt;</ph>は<ph id="ph3">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>It is still possible that the underlying <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method will raise an exception when invoked.</source>
          <target state="translated">可能性がありますする、基になる<ph id="ph1">&lt;see langword="Add" /&gt;</ph>メソッドが呼び出されたときに例外を発生させます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Other run time exceptions are possible if <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> does not return a valid result.</source>
          <target state="translated">他の実行時例外が考えられる場合<ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph>は有効な結果を返しません。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>An array of objects that supply the <ph id="ph1">&lt;see langword="x:ConstructorArgs" /&gt;</ph> for the instance.</source>
          <target state="translated">インスタンスの <ph id="ph1">&lt;see langword="x:ConstructorArgs" /&gt;</ph> を指定するオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for types that do not require or use <ph id="ph2">&lt;see langword="x:ConstructorArgs" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> を必要としないか、または使用しない型の場合は <ph id="ph2">&lt;see langword="x:ConstructorArgs" /&gt;</ph> にできます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>Creates an object instance based on the construction-initiated <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の構築が開始された <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> に基づいて、オブジェクト インスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>The created instance based on the construction-initiated <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の構築が開始された <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> に基づいて作成されたインスタンス。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>Could not resolve a constructor.</source>
          <target state="translated">コンストラクターを解決できませんでした。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">基底の実装には、内部ヘルパーの呼び出しが含まれています。 <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">このヘルパーは常に場合にスロー場所、<ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>は不明なに基づいて<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>であるケースが含まれている、<ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>の<ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>は<ph id="ph5">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the item type that is used by the <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="Add" /&gt;</ph> メソッドで使用されるアイテムの種類の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>Returns the relevant <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method for a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is relevant to a collection or dictionary.</source>
          <target state="translated">コレクションまたはディクショナリに関連する <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> の関連する <ph id="ph1">&lt;see langword="Add" /&gt;</ph> メソッドを返します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>CLR <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> information for the <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, or null.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="Add" /&gt;</ph> メソッドの CLR <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 情報、または null。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>This method should return <ph id="ph1">`null`</ph> for cases where the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> for this <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is not a writeable collection or dictionary.</source>
          <target state="translated">このメソッドが返す<ph id="ph1">`null`</ph>のケースの場所、<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>この<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>書き込み可能なコレクションまたはディクショナリではありません。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>Specifically, should return <ph id="ph1">`null`</ph> for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> returns <ph id="ph3">`None`</ph>.</source>
          <target state="translated">具体的には、返す必要があります<ph id="ph1">`null`</ph>のケースの<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph>返します<ph id="ph3">`None`</ph>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>If you are not accessing a fully trusted XAML type system, this method has the potential to report false <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> information to callers.</source>
          <target state="translated">このメソッドにレポート false する可能性がある場合は、完全に信頼された XAML 型システムにアクセスしている場合、<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>呼び出し元情報です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="contentType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="contentType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>The base implementation returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">基底の実装を返します<ph id="ph1">&lt;see langword="null" /&gt;</ph>のケースの場所、<ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>は不明なに基づいて<ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>であるケースが含まれている、<ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>の<ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>は<ph id="ph6">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>It also returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">返します<ph id="ph1">&lt;see langword="null" /&gt;</ph>場合<ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph>は<ph id="ph3">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>XAML collections potentially have more than one <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method, because a XAML collection can potentially support more than one content type (see <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.AllowedContentTypes" /&gt;</ph>, or see <ph id="ph3">&lt;see cref="T:System.Windows.Markup.ContentWrapperAttribute" /&gt;</ph> for information about one implementation of this concept in WPF).</source>
          <target state="translated">XAML のコレクションに可能性がある 1 つ以上<ph id="ph1">&lt;see langword="Add" /&gt;</ph>メソッド、XAML コレクションが 1 つ以上のコンテンツ タイプをサポートできる可能性がありますので (を参照してください<ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.AllowedContentTypes" /&gt;</ph>、または参照してください<ph id="ph3">&lt;see cref="T:System.Windows.Markup.ContentWrapperAttribute" /&gt;</ph>WPF でのこの概念の 1 つの実装方法について)。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>The default implementation uses internal logic to return the best match based on the signatures and the type of the supplied <ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>.</source>
          <target state="translated">既定の実装では、内部ロジックを使用して、署名と指定された型に基づいて最適な一致を返す<ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>Returns an object representing a method that can enumerate over items.</source>
          <target state="translated">アイテムを列挙できるメソッドを表すオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for an enumerator method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">列挙子メソッドの <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>、または <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>Should return <ph id="ph1">`null`</ph> for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> returns <ph id="ph3">`None`</ph>.</source>
          <target state="translated">返す必要があります<ph id="ph1">`null`</ph>のケースの<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph>返します<ph id="ph3">`None`</ph>です。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>If you are not accessing a fully trusted XAML type system, this method has the potential to report false <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> information to callers.</source>
          <target state="translated">このメソッドにレポート false する可能性がある場合は、完全に信頼された XAML 型システムにアクセスしている場合、<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>呼び出し元情報です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>The base implementation calls an internal helper method.</source>
          <target state="translated">基底の実装では、内部のヘルパー メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>That helper returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">そのヘルパーを返します<ph id="ph1">&lt;see langword="null" /&gt;</ph>のケースの場所、<ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>は不明なに基づいて<ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>であるケースが含まれている、<ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>の<ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>は<ph id="ph6">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>It also returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where <ph id="ph2">&lt;see cref="M:System.Xaml.XamlType.LookupCollectionKind" /&gt;</ph> returns <ph id="ph3">&lt;see langword="None" /&gt;</ph>.</source>
          <target state="translated">返します<ph id="ph1">&lt;see langword="null" /&gt;</ph>のケースの<ph id="ph2">&lt;see cref="M:System.Xaml.XamlType.LookupCollectionKind" /&gt;</ph>返します<ph id="ph3">&lt;see langword="None" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> を構築するために使用した <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> によって指定された型のインスタンス。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object representing the set of items.</source>
          <target state="translated">アイテムのセットを表す <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> オブジェクト、または <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">不明な <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> に基づく <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> で、このメソッドを呼び出しました。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt> -または- <ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a collection or dictionary.</source>
          <target state="translated">このメソッドを、関連する型がコレクションまたは辞書でない <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> で呼び出しました。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">基底の実装には、内部ヘルパーの呼び出しが含まれています。 <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">このヘルパーは常に場合にスロー場所、<ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>は不明なに基づいて<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>であるケースが含まれている、<ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph>の<ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>は<ph id="ph5">&lt;see langword="null" /&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> implementation.</source>
          <target state="translated">基底の実装は必ずしも使用独自<ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> is attempted.</source>
          <target state="translated">最初の cast<ph id="ph1">&lt;paramref name="instance" /&gt;</ph>に<ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>しようとするとします。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph> is made and the method returns that return value.</source>
          <target state="translated">これが成功するへの呼び出し<ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph>が行われますと値を返すメソッドを返します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="GetEnumerator" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">基底の実装が CLR を使用する場合は、<ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph>を呼び出す、基になる<ph id="ph2">&lt;see langword="GetEnumerator" /&gt;</ph>メソッドへの呼び出しから取得した<ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph>この<ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>Gets the handler to use when a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> calls into an implemented <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> が実装された <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph> を呼び出すときに使用するハンドラーを取得します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>A handler implementation that handles this case.</source>
          <target state="translated">このような場合の処理を行うハンドラーの実装。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The event handler is based on <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> constrained with <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> event data.</source>
          <target state="translated">イベント ハンドラーがに基づいて<ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph>で制約<ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph>イベント データ。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The value returned invokes the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A&gt;</ph> behavior of the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that the <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is based on.</source>
          <target state="translated">返される値を呼び出す、<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A&gt;</ph>の動作、<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>を<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>に基づきます。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The return value is <ph id="ph1">`null`</ph> for a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> that is based on an unknown <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">戻り値は<ph id="ph1">`null`</ph>の<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>不明に基づく<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>Gets the handler to use when a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> calls into a CLR-implemented <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> が CLR によって実装された <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> を呼び出したときに使用するハンドラーを取得します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>A handler implementation that handles this case.</source>
          <target state="translated">このような場合の処理を行うハンドラーの実装。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The event handler is based on <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> constrained with <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> event data.</source>
          <target state="translated">イベント ハンドラーがに基づいて<ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph>で制約<ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph>イベント データ。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The value returned invokes the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A&gt;</ph> behavior of the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that the <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is based on.</source>
          <target state="translated">返される値を呼び出す、<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A&gt;</ph>の動作、<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>を<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>に基づきます。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The return value is <ph id="ph1">`null`</ph> for a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> that is based on an unknown <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">戻り値は<ph id="ph1">`null`</ph>の<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>不明に基づく<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>Provides a static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">不明な、完全に実装されていない <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> を表す静的な値を提供します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>A static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">不明な、完全に実装されていない <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> を表す静的な値。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>Supplying this value for a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</source>
          <target state="translated">この値を指定する、 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> System.Xaml のパラメーターには、API が定義されている例外をスローすると呼ばれるコードを通常発生することです。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>