<Type Name="Encoding" FullName="System.Text.Encoding">
  <TypeSignature Language="C#" Value="public abstract class Encoding : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Encoding extends System.Object implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Encoding" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Encoding&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Encoding abstract : ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b1671-101">文字エンコーディングを表します。</span><span class="sxs-lookup"><span data-stu-id="b1671-101">Represents a character encoding.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-102">エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="b1671-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="b1671-103">これに対し、デコードは、エンコードされたバイトのシーケンスを Unicode 文字のセットに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="b1671-103">In contrast, decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span> <span data-ttu-id="b1671-104">Unicode 変換形式 (UTFs) とでサポートされているその他のエンコーディングについて<xref:System.Text.Encoding>を参照してください[.NET Framework の文字エンコーディング](~/docs/standard/base-types/character-encoding.md)です。</span><span class="sxs-lookup"><span data-stu-id="b1671-104">For information about the Unicode Transformation Formats (UTFs) and other encodings supported by <xref:System.Text.Encoding>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="b1671-105">なお<xref:System.Text.Encoding>はバイト配列など、任意の種類のバイナリ データではなく Unicode 文字を操作するためのものです。</span><span class="sxs-lookup"><span data-stu-id="b1671-105">Note that <xref:System.Text.Encoding> is intended to operate on Unicode characters instead of arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="b1671-106">テキストには、任意のバイナリ データをエンコードする必要がある場合、は、uuencode などのメソッドによって実装されるなどのプロトコルを使用する必要があります<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-106">If you must encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b1671-107">.NET Framework の次の実装を提供する、<xref:System.Text.Encoding>を現在の Unicode エンコーディング、およびその他のエンコーディングをサポートするクラス。</span><span class="sxs-lookup"><span data-stu-id="b1671-107">The .NET Framework provides the following implementations of the <xref:System.Text.Encoding> class to support current Unicode encodings and other encodings:</span></span>  
  
-   <span data-ttu-id="b1671-108"><xref:System.Text.ASCIIEncoding> 1 つの 7 ビット ASCII 文字として Unicode 文字をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-108"><xref:System.Text.ASCIIEncoding> encodes Unicode characters as single 7-bit ASCII characters.</span></span> <span data-ttu-id="b1671-109">このエンコード U +0 間の文字値のみをサポートしている 0000 および U +0 007F です。</span><span class="sxs-lookup"><span data-stu-id="b1671-109">This encoding only supports character values between U+0000 and U+007F.</span></span> <span data-ttu-id="b1671-110">コード ページ 20127 です。</span><span class="sxs-lookup"><span data-stu-id="b1671-110">Code page 20127.</span></span> <span data-ttu-id="b1671-111">でも、<xref:System.Text.Encoding.ASCII%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-111">Also available through the <xref:System.Text.Encoding.ASCII%2A> property.</span></span>  
  
-   <span data-ttu-id="b1671-112"><xref:System.Text.UTF7Encoding> Unicode 文字の utf-7 エンコードを使用してエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-112"><xref:System.Text.UTF7Encoding> encodes Unicode characters using the UTF-7 encoding.</span></span> <span data-ttu-id="b1671-113">このエンコードには、Unicode 文字の値をすべてサポートしています。</span><span class="sxs-lookup"><span data-stu-id="b1671-113">This encoding supports all Unicode character values.</span></span> <span data-ttu-id="b1671-114">コード ページ 65000 です。</span><span class="sxs-lookup"><span data-stu-id="b1671-114">Code page 65000.</span></span> <span data-ttu-id="b1671-115">でも、<xref:System.Text.Encoding.UTF7%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-115">Also available through the <xref:System.Text.Encoding.UTF7%2A> property.</span></span>  
  
-   <span data-ttu-id="b1671-116"><xref:System.Text.UTF8Encoding> utf-8 エンコーディングを使用して Unicode 文字をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-116"><xref:System.Text.UTF8Encoding> encodes Unicode characters using the UTF-8 encoding.</span></span> <span data-ttu-id="b1671-117">このエンコードには、Unicode 文字の値をすべてサポートしています。</span><span class="sxs-lookup"><span data-stu-id="b1671-117">This encoding supports all Unicode character values.</span></span> <span data-ttu-id="b1671-118">コード ページ 65001 です。</span><span class="sxs-lookup"><span data-stu-id="b1671-118">Code page 65001.</span></span> <span data-ttu-id="b1671-119">でも、<xref:System.Text.Encoding.UTF8%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-119">Also available through the <xref:System.Text.Encoding.UTF8%2A> property.</span></span>  
  
-   <span data-ttu-id="b1671-120"><xref:System.Text.UnicodeEncoding> Unicode 文字の utf-16 エンコーディングを使用してエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-120"><xref:System.Text.UnicodeEncoding> encodes Unicode characters using the UTF-16 encoding.</span></span> <span data-ttu-id="b1671-121">両方リトル エンディアンとビッグ エンディアン バイト順をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="b1671-121">Both little endian and big endian byte orders are supported.</span></span> <span data-ttu-id="b1671-122">でも、<xref:System.Text.Encoding.Unicode%2A>プロパティおよび<xref:System.Text.Encoding.BigEndianUnicode%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-122">Also available through the <xref:System.Text.Encoding.Unicode%2A> property and the <xref:System.Text.Encoding.BigEndianUnicode%2A> property.</span></span>  
  
-   <span data-ttu-id="b1671-123"><xref:System.Text.UTF32Encoding> Unicode 文字の utf-32 エンコーディングを使用してエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-123"><xref:System.Text.UTF32Encoding> encodes Unicode characters using the UTF-32 encoding.</span></span> <span data-ttu-id="b1671-124">リトル エンディアン (コード ページ 12000) との両方 (コード ページ 12001) ビッグ エンディアン バイト順をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="b1671-124">Both little endian (code page 12000) and big endian (code page 12001) byte orders are supported.</span></span> <span data-ttu-id="b1671-125">でも、<xref:System.Text.Encoding.UTF32%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-125">Also available through the <xref:System.Text.Encoding.UTF32%2A> property.</span></span>  
  
 <span data-ttu-id="b1671-126"><xref:System.Text.Encoding>クラスは、主にさまざまなエンコーディングと Unicode の間で変換を目的としています。</span><span class="sxs-lookup"><span data-stu-id="b1671-126">The <xref:System.Text.Encoding> class is primarily intended to convert between different encodings and Unicode.</span></span> <span data-ttu-id="b1671-127">多くの場合、Unicode の派生クラスのいずれかは、アプリに対して適切な選択です。</span><span class="sxs-lookup"><span data-stu-id="b1671-127">Often one of the derived Unicode classes is the correct choice for your app.</span></span>  
  
 <span data-ttu-id="b1671-128">使用して、<xref:System.Text.Encoding.GetEncoding%2A>をその他のエンコーディングを取得するメソッドを呼び出すと、<xref:System.Text.Encoding.GetEncodings%2A>すべてのエンコーディングの一覧を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-128">Use the <xref:System.Text.Encoding.GetEncoding%2A> method to obtain other encodings, and call the <xref:System.Text.Encoding.GetEncodings%2A> method to get a list of all encodings.</span></span>  
  
 <span data-ttu-id="b1671-129">次の表では、.NET Framework でサポートされているエンコーディングが一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-129">The following table lists the encodings supported by the .NET Framework.</span></span> <span data-ttu-id="b1671-130">これには、各エンコーディングのコード ページ番号とエンコーディングの値が一覧表示<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>と<xref:System.Text.EncodingInfo.DisplayName%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-130">It lists each encoding's code page number and the values of the encoding's <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType> and <xref:System.Text.EncodingInfo.DisplayName%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="b1671-131">最後の列にアスタリスクは、コード ページが、基になるプラットフォームに関係なく、.NET Framework でネイティブにサポートされていることを示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-131">An asterisk in the last column indicates that the code page is natively supported by the .NET Framework, regardless of the underlying platform.</span></span> <span data-ttu-id="b1671-132">コード ページのことに注意してください<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>プロパティは国際基準に対応しています必ずしもその標準に完全に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-132">Note that code pages whose <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType> property corresponds to an international standard do not necessarily comply in full with that standard.</span></span>  
  
|<span data-ttu-id="b1671-133">コード ページ</span><span class="sxs-lookup"><span data-stu-id="b1671-133">Code page</span></span>|<span data-ttu-id="b1671-134">name</span><span class="sxs-lookup"><span data-stu-id="b1671-134">Name</span></span>|<span data-ttu-id="b1671-135">表示名</span><span class="sxs-lookup"><span data-stu-id="b1671-135">Display name</span></span>|<span data-ttu-id="b1671-136">.NET framework のサポート</span><span class="sxs-lookup"><span data-stu-id="b1671-136">.NET Framework support</span></span>|  
|---------------|----------|------------------|----------------------------|  
|<span data-ttu-id="b1671-137">37</span><span class="sxs-lookup"><span data-stu-id="b1671-137">37</span></span>|<span data-ttu-id="b1671-138">IBM037</span><span class="sxs-lookup"><span data-stu-id="b1671-138">IBM037</span></span>|<span data-ttu-id="b1671-139">IBM EBCDIC (米国およびカナダ)</span><span class="sxs-lookup"><span data-stu-id="b1671-139">IBM EBCDIC (US-Canada)</span></span>||  
|<span data-ttu-id="b1671-140">437</span><span class="sxs-lookup"><span data-stu-id="b1671-140">437</span></span>|<span data-ttu-id="b1671-141">IBM437</span><span class="sxs-lookup"><span data-stu-id="b1671-141">IBM437</span></span>|<span data-ttu-id="b1671-142">OEM United States</span><span class="sxs-lookup"><span data-stu-id="b1671-142">OEM United States</span></span>||  
|<span data-ttu-id="b1671-143">500</span><span class="sxs-lookup"><span data-stu-id="b1671-143">500</span></span>|<span data-ttu-id="b1671-144">IBM500</span><span class="sxs-lookup"><span data-stu-id="b1671-144">IBM500</span></span>|<span data-ttu-id="b1671-145">IBM EBCDIC (インターナショナル)</span><span class="sxs-lookup"><span data-stu-id="b1671-145">IBM EBCDIC (International)</span></span>||  
|<span data-ttu-id="b1671-146">708</span><span class="sxs-lookup"><span data-stu-id="b1671-146">708</span></span>|<span data-ttu-id="b1671-147">ASMO-708</span><span class="sxs-lookup"><span data-stu-id="b1671-147">ASMO-708</span></span>|<span data-ttu-id="b1671-148">アラビア語 (ASMO 708)</span><span class="sxs-lookup"><span data-stu-id="b1671-148">Arabic (ASMO 708)</span></span>||  
|<span data-ttu-id="b1671-149">720</span><span class="sxs-lookup"><span data-stu-id="b1671-149">720</span></span>|<span data-ttu-id="b1671-150">DOS-720</span><span class="sxs-lookup"><span data-stu-id="b1671-150">DOS-720</span></span>|<span data-ttu-id="b1671-151">アラビア語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-151">Arabic (DOS)</span></span>||  
|<span data-ttu-id="b1671-152">737</span><span class="sxs-lookup"><span data-stu-id="b1671-152">737</span></span>|<span data-ttu-id="b1671-153">ibm737</span><span class="sxs-lookup"><span data-stu-id="b1671-153">ibm737</span></span>|<span data-ttu-id="b1671-154">ギリシャ語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-154">Greek (DOS)</span></span>||  
|<span data-ttu-id="b1671-155">775</span><span class="sxs-lookup"><span data-stu-id="b1671-155">775</span></span>|<span data-ttu-id="b1671-156">ibm775</span><span class="sxs-lookup"><span data-stu-id="b1671-156">ibm775</span></span>|<span data-ttu-id="b1671-157">バルト語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-157">Baltic (DOS)</span></span>||  
|<span data-ttu-id="b1671-158">850</span><span class="sxs-lookup"><span data-stu-id="b1671-158">850</span></span>|<span data-ttu-id="b1671-159">ibm850</span><span class="sxs-lookup"><span data-stu-id="b1671-159">ibm850</span></span>|<span data-ttu-id="b1671-160">西ヨーロッパ言語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-160">Western European (DOS)</span></span>||  
|<span data-ttu-id="b1671-161">852</span><span class="sxs-lookup"><span data-stu-id="b1671-161">852</span></span>|<span data-ttu-id="b1671-162">ibm852</span><span class="sxs-lookup"><span data-stu-id="b1671-162">ibm852</span></span>|<span data-ttu-id="b1671-163">中央ヨーロッパ言語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-163">Central European (DOS)</span></span>||  
|<span data-ttu-id="b1671-164">855</span><span class="sxs-lookup"><span data-stu-id="b1671-164">855</span></span>|<span data-ttu-id="b1671-165">IBM855</span><span class="sxs-lookup"><span data-stu-id="b1671-165">IBM855</span></span>|<span data-ttu-id="b1671-166">OEM (キリル)</span><span class="sxs-lookup"><span data-stu-id="b1671-166">OEM Cyrillic</span></span>||  
|<span data-ttu-id="b1671-167">857</span><span class="sxs-lookup"><span data-stu-id="b1671-167">857</span></span>|<span data-ttu-id="b1671-168">ibm857</span><span class="sxs-lookup"><span data-stu-id="b1671-168">ibm857</span></span>|<span data-ttu-id="b1671-169">トルコ語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-169">Turkish (DOS)</span></span>||  
|<span data-ttu-id="b1671-170">858</span><span class="sxs-lookup"><span data-stu-id="b1671-170">858</span></span>|<span data-ttu-id="b1671-171">IBM00858</span><span class="sxs-lookup"><span data-stu-id="b1671-171">IBM00858</span></span>|<span data-ttu-id="b1671-172">OEM マルチリンガル ラテン I</span><span class="sxs-lookup"><span data-stu-id="b1671-172">OEM Multilingual Latin I</span></span>||  
|<span data-ttu-id="b1671-173">860</span><span class="sxs-lookup"><span data-stu-id="b1671-173">860</span></span>|<span data-ttu-id="b1671-174">IBM860</span><span class="sxs-lookup"><span data-stu-id="b1671-174">IBM860</span></span>|<span data-ttu-id="b1671-175">ポルトガル語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-175">Portuguese (DOS)</span></span>||  
|<span data-ttu-id="b1671-176">861</span><span class="sxs-lookup"><span data-stu-id="b1671-176">861</span></span>|<span data-ttu-id="b1671-177">ibm861</span><span class="sxs-lookup"><span data-stu-id="b1671-177">ibm861</span></span>|<span data-ttu-id="b1671-178">アイスランド語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-178">Icelandic (DOS)</span></span>||  
|<span data-ttu-id="b1671-179">862</span><span class="sxs-lookup"><span data-stu-id="b1671-179">862</span></span>|<span data-ttu-id="b1671-180">DOS-862</span><span class="sxs-lookup"><span data-stu-id="b1671-180">DOS-862</span></span>|<span data-ttu-id="b1671-181">ヘブライ語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-181">Hebrew (DOS)</span></span>||  
|<span data-ttu-id="b1671-182">863</span><span class="sxs-lookup"><span data-stu-id="b1671-182">863</span></span>|<span data-ttu-id="b1671-183">IBM863</span><span class="sxs-lookup"><span data-stu-id="b1671-183">IBM863</span></span>|<span data-ttu-id="b1671-184">カナダ系フランス語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-184">French Canadian (DOS)</span></span>||  
|<span data-ttu-id="b1671-185">864</span><span class="sxs-lookup"><span data-stu-id="b1671-185">864</span></span>|<span data-ttu-id="b1671-186">IBM864</span><span class="sxs-lookup"><span data-stu-id="b1671-186">IBM864</span></span>|<span data-ttu-id="b1671-187">アラビア語 (864)</span><span class="sxs-lookup"><span data-stu-id="b1671-187">Arabic (864)</span></span>||  
|<span data-ttu-id="b1671-188">865</span><span class="sxs-lookup"><span data-stu-id="b1671-188">865</span></span>|<span data-ttu-id="b1671-189">IBM865</span><span class="sxs-lookup"><span data-stu-id="b1671-189">IBM865</span></span>|<span data-ttu-id="b1671-190">スカンジナビア語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-190">Nordic (DOS)</span></span>||  
|<span data-ttu-id="b1671-191">866</span><span class="sxs-lookup"><span data-stu-id="b1671-191">866</span></span>|<span data-ttu-id="b1671-192">cp866</span><span class="sxs-lookup"><span data-stu-id="b1671-192">cp866</span></span>|<span data-ttu-id="b1671-193">キリル語 (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-193">Cyrillic (DOS)</span></span>||  
|<span data-ttu-id="b1671-194">869</span><span class="sxs-lookup"><span data-stu-id="b1671-194">869</span></span>|<span data-ttu-id="b1671-195">ibm869</span><span class="sxs-lookup"><span data-stu-id="b1671-195">ibm869</span></span>|<span data-ttu-id="b1671-196">ギリシャ語、モダン (DOS)</span><span class="sxs-lookup"><span data-stu-id="b1671-196">Greek, Modern (DOS)</span></span>||  
|<span data-ttu-id="b1671-197">870</span><span class="sxs-lookup"><span data-stu-id="b1671-197">870</span></span>|<span data-ttu-id="b1671-198">IBM870</span><span class="sxs-lookup"><span data-stu-id="b1671-198">IBM870</span></span>|<span data-ttu-id="b1671-199">IBM EBCDIC (多言語ラテン語-2)</span><span class="sxs-lookup"><span data-stu-id="b1671-199">IBM EBCDIC (Multilingual Latin-2)</span></span>||  
|<span data-ttu-id="b1671-200">874</span><span class="sxs-lookup"><span data-stu-id="b1671-200">874</span></span>|<span data-ttu-id="b1671-201">windows-874</span><span class="sxs-lookup"><span data-stu-id="b1671-201">windows-874</span></span>|<span data-ttu-id="b1671-202">タイ語 (Windows)</span><span class="sxs-lookup"><span data-stu-id="b1671-202">Thai (Windows)</span></span>||  
|<span data-ttu-id="b1671-203">875</span><span class="sxs-lookup"><span data-stu-id="b1671-203">875</span></span>|<span data-ttu-id="b1671-204">cp875</span><span class="sxs-lookup"><span data-stu-id="b1671-204">cp875</span></span>|<span data-ttu-id="b1671-205">IBM EBCDIC (モダン ギリシャ語)</span><span class="sxs-lookup"><span data-stu-id="b1671-205">IBM EBCDIC (Greek Modern)</span></span>||  
|<span data-ttu-id="b1671-206">932</span><span class="sxs-lookup"><span data-stu-id="b1671-206">932</span></span>|<span data-ttu-id="b1671-207">shift_jis</span><span class="sxs-lookup"><span data-stu-id="b1671-207">shift_jis</span></span>|<span data-ttu-id="b1671-208">日本語 (SHIFT-JIS)</span><span class="sxs-lookup"><span data-stu-id="b1671-208">Japanese (Shift-JIS)</span></span>||  
|<span data-ttu-id="b1671-209">936</span><span class="sxs-lookup"><span data-stu-id="b1671-209">936</span></span>|<span data-ttu-id="b1671-210">gb2312</span><span class="sxs-lookup"><span data-stu-id="b1671-210">gb2312</span></span>|<span data-ttu-id="b1671-211">簡体字中国語 (GB2312)</span><span class="sxs-lookup"><span data-stu-id="b1671-211">Chinese Simplified (GB2312)</span></span>|<span data-ttu-id="b1671-212">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-212">✓</span></span>|  
|<span data-ttu-id="b1671-213">949</span><span class="sxs-lookup"><span data-stu-id="b1671-213">949</span></span>|<span data-ttu-id="b1671-214">ks_c_5601-1987</span><span class="sxs-lookup"><span data-stu-id="b1671-214">ks_c_5601-1987</span></span>|<span data-ttu-id="b1671-215">韓国語</span><span class="sxs-lookup"><span data-stu-id="b1671-215">Korean</span></span>||  
|<span data-ttu-id="b1671-216">950</span><span class="sxs-lookup"><span data-stu-id="b1671-216">950</span></span>|<span data-ttu-id="b1671-217">big5</span><span class="sxs-lookup"><span data-stu-id="b1671-217">big5</span></span>|<span data-ttu-id="b1671-218">繁体字中国語 (Big5)</span><span class="sxs-lookup"><span data-stu-id="b1671-218">Chinese Traditional (Big5)</span></span>||  
|<span data-ttu-id="b1671-219">1026</span><span class="sxs-lookup"><span data-stu-id="b1671-219">1026</span></span>|<span data-ttu-id="b1671-220">IBM1026</span><span class="sxs-lookup"><span data-stu-id="b1671-220">IBM1026</span></span>|<span data-ttu-id="b1671-221">IBM EBCDIC (トルコ語ラテン語-5)</span><span class="sxs-lookup"><span data-stu-id="b1671-221">IBM EBCDIC (Turkish Latin-5)</span></span>||  
|<span data-ttu-id="b1671-222">1047</span><span class="sxs-lookup"><span data-stu-id="b1671-222">1047</span></span>|<span data-ttu-id="b1671-223">IBM01047</span><span class="sxs-lookup"><span data-stu-id="b1671-223">IBM01047</span></span>|<span data-ttu-id="b1671-224">IBM ラテン語-1</span><span class="sxs-lookup"><span data-stu-id="b1671-224">IBM Latin-1</span></span>||  
|<span data-ttu-id="b1671-225">1140</span><span class="sxs-lookup"><span data-stu-id="b1671-225">1140</span></span>|<span data-ttu-id="b1671-226">IBM01140</span><span class="sxs-lookup"><span data-stu-id="b1671-226">IBM01140</span></span>|<span data-ttu-id="b1671-227">IBM EBCDIC (米国-カナダ-ユーロ)</span><span class="sxs-lookup"><span data-stu-id="b1671-227">IBM EBCDIC (US-Canada-Euro)</span></span>||  
|<span data-ttu-id="b1671-228">1141</span><span class="sxs-lookup"><span data-stu-id="b1671-228">1141</span></span>|<span data-ttu-id="b1671-229">IBM01141</span><span class="sxs-lookup"><span data-stu-id="b1671-229">IBM01141</span></span>|<span data-ttu-id="b1671-230">IBM EBCDIC (ドイツ ユーロ)</span><span class="sxs-lookup"><span data-stu-id="b1671-230">IBM EBCDIC (Germany-Euro)</span></span>||  
|<span data-ttu-id="b1671-231">1142</span><span class="sxs-lookup"><span data-stu-id="b1671-231">1142</span></span>|<span data-ttu-id="b1671-232">IBM01142</span><span class="sxs-lookup"><span data-stu-id="b1671-232">IBM01142</span></span>|<span data-ttu-id="b1671-233">IBM EBCDIC (デンマーク ノルウェー ユーロ)</span><span class="sxs-lookup"><span data-stu-id="b1671-233">IBM EBCDIC (Denmark-Norway-Euro)</span></span>||  
|<span data-ttu-id="b1671-234">1143</span><span class="sxs-lookup"><span data-stu-id="b1671-234">1143</span></span>|<span data-ttu-id="b1671-235">IBM01143</span><span class="sxs-lookup"><span data-stu-id="b1671-235">IBM01143</span></span>|<span data-ttu-id="b1671-236">IBM EBCDIC (フィンランド-スウェーデン語-ユーロ)</span><span class="sxs-lookup"><span data-stu-id="b1671-236">IBM EBCDIC (Finland-Sweden-Euro)</span></span>||  
|<span data-ttu-id="b1671-237">1144</span><span class="sxs-lookup"><span data-stu-id="b1671-237">1144</span></span>|<span data-ttu-id="b1671-238">IBM01144</span><span class="sxs-lookup"><span data-stu-id="b1671-238">IBM01144</span></span>|<span data-ttu-id="b1671-239">IBM EBCDIC (イタリア ユーロ)</span><span class="sxs-lookup"><span data-stu-id="b1671-239">IBM EBCDIC (Italy-Euro)</span></span>||  
|<span data-ttu-id="b1671-240">1145</span><span class="sxs-lookup"><span data-stu-id="b1671-240">1145</span></span>|<span data-ttu-id="b1671-241">IBM01145</span><span class="sxs-lookup"><span data-stu-id="b1671-241">IBM01145</span></span>|<span data-ttu-id="b1671-242">IBM EBCDIC (スペイン ユーロ)</span><span class="sxs-lookup"><span data-stu-id="b1671-242">IBM EBCDIC (Spain-Euro)</span></span>||  
|<span data-ttu-id="b1671-243">1146</span><span class="sxs-lookup"><span data-stu-id="b1671-243">1146</span></span>|<span data-ttu-id="b1671-244">IBM01146</span><span class="sxs-lookup"><span data-stu-id="b1671-244">IBM01146</span></span>|<span data-ttu-id="b1671-245">IBM EBCDIC (英国ユーロ)</span><span class="sxs-lookup"><span data-stu-id="b1671-245">IBM EBCDIC (UK-Euro)</span></span>||  
|<span data-ttu-id="b1671-246">1147</span><span class="sxs-lookup"><span data-stu-id="b1671-246">1147</span></span>|<span data-ttu-id="b1671-247">IBM01147</span><span class="sxs-lookup"><span data-stu-id="b1671-247">IBM01147</span></span>|<span data-ttu-id="b1671-248">IBM EBCDIC (フランス ユーロ)</span><span class="sxs-lookup"><span data-stu-id="b1671-248">IBM EBCDIC (France-Euro)</span></span>||  
|<span data-ttu-id="b1671-249">1148</span><span class="sxs-lookup"><span data-stu-id="b1671-249">1148</span></span>|<span data-ttu-id="b1671-250">IBM01148</span><span class="sxs-lookup"><span data-stu-id="b1671-250">IBM01148</span></span>|<span data-ttu-id="b1671-251">IBM EBCDIC (国際ユーロ)</span><span class="sxs-lookup"><span data-stu-id="b1671-251">IBM EBCDIC (International-Euro)</span></span>||  
|<span data-ttu-id="b1671-252">1149</span><span class="sxs-lookup"><span data-stu-id="b1671-252">1149</span></span>|<span data-ttu-id="b1671-253">IBM01149</span><span class="sxs-lookup"><span data-stu-id="b1671-253">IBM01149</span></span>|<span data-ttu-id="b1671-254">IBM EBCDIC (アイスランド語ユーロ)</span><span class="sxs-lookup"><span data-stu-id="b1671-254">IBM EBCDIC (Icelandic-Euro)</span></span>||  
|<span data-ttu-id="b1671-255">1200</span><span class="sxs-lookup"><span data-stu-id="b1671-255">1200</span></span>|<span data-ttu-id="b1671-256">utf-16</span><span class="sxs-lookup"><span data-stu-id="b1671-256">utf-16</span></span>|<span data-ttu-id="b1671-257">Unicode</span><span class="sxs-lookup"><span data-stu-id="b1671-257">Unicode</span></span>|<span data-ttu-id="b1671-258">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-258">✓</span></span>|  
|<span data-ttu-id="b1671-259">1201</span><span class="sxs-lookup"><span data-stu-id="b1671-259">1201</span></span>|<span data-ttu-id="b1671-260">unicodeFFFE</span><span class="sxs-lookup"><span data-stu-id="b1671-260">unicodeFFFE</span></span>|<span data-ttu-id="b1671-261">Unicode (ビッグ エンディアン)</span><span class="sxs-lookup"><span data-stu-id="b1671-261">Unicode (Big endian)</span></span>|<span data-ttu-id="b1671-262">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-262">✓</span></span>|  
|<span data-ttu-id="b1671-263">1250</span><span class="sxs-lookup"><span data-stu-id="b1671-263">1250</span></span>|<span data-ttu-id="b1671-264">windows-1250</span><span class="sxs-lookup"><span data-stu-id="b1671-264">windows-1250</span></span>|<span data-ttu-id="b1671-265">中央ヨーロッパ言語 (Windows)</span><span class="sxs-lookup"><span data-stu-id="b1671-265">Central European (Windows)</span></span>||  
|<span data-ttu-id="b1671-266">1251</span><span class="sxs-lookup"><span data-stu-id="b1671-266">1251</span></span>|<span data-ttu-id="b1671-267">windows-1251</span><span class="sxs-lookup"><span data-stu-id="b1671-267">windows-1251</span></span>|<span data-ttu-id="b1671-268">キリル語 (Windows)</span><span class="sxs-lookup"><span data-stu-id="b1671-268">Cyrillic (Windows)</span></span>||  
|<span data-ttu-id="b1671-269">1252</span><span class="sxs-lookup"><span data-stu-id="b1671-269">1252</span></span>|<span data-ttu-id="b1671-270">utf-8</span><span class="sxs-lookup"><span data-stu-id="b1671-270">Windows-1252</span></span>|<span data-ttu-id="b1671-271">西ヨーロッパ言語 (Windows)</span><span class="sxs-lookup"><span data-stu-id="b1671-271">Western European (Windows)</span></span>|<span data-ttu-id="b1671-272">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-272">✓</span></span>|  
|<span data-ttu-id="b1671-273">1253</span><span class="sxs-lookup"><span data-stu-id="b1671-273">1253</span></span>|<span data-ttu-id="b1671-274">windows-1253</span><span class="sxs-lookup"><span data-stu-id="b1671-274">windows-1253</span></span>|<span data-ttu-id="b1671-275">ギリシャ語 (Windows)</span><span class="sxs-lookup"><span data-stu-id="b1671-275">Greek (Windows)</span></span>||  
|<span data-ttu-id="b1671-276">1254</span><span class="sxs-lookup"><span data-stu-id="b1671-276">1254</span></span>|<span data-ttu-id="b1671-277">windows-1254</span><span class="sxs-lookup"><span data-stu-id="b1671-277">windows-1254</span></span>|<span data-ttu-id="b1671-278">トルコ語 (Windows)</span><span class="sxs-lookup"><span data-stu-id="b1671-278">Turkish (Windows)</span></span>||  
|<span data-ttu-id="b1671-279">1255</span><span class="sxs-lookup"><span data-stu-id="b1671-279">1255</span></span>|<span data-ttu-id="b1671-280">windows-1255</span><span class="sxs-lookup"><span data-stu-id="b1671-280">windows-1255</span></span>|<span data-ttu-id="b1671-281">ヘブライ語 (Windows)</span><span class="sxs-lookup"><span data-stu-id="b1671-281">Hebrew (Windows)</span></span>||  
|<span data-ttu-id="b1671-282">1256</span><span class="sxs-lookup"><span data-stu-id="b1671-282">1256</span></span>|<span data-ttu-id="b1671-283">windows-1256</span><span class="sxs-lookup"><span data-stu-id="b1671-283">windows-1256</span></span>|<span data-ttu-id="b1671-284">アラビア語 (Windows)</span><span class="sxs-lookup"><span data-stu-id="b1671-284">Arabic (Windows)</span></span>||  
|<span data-ttu-id="b1671-285">1257</span><span class="sxs-lookup"><span data-stu-id="b1671-285">1257</span></span>|<span data-ttu-id="b1671-286">windows-1257</span><span class="sxs-lookup"><span data-stu-id="b1671-286">windows-1257</span></span>|<span data-ttu-id="b1671-287">バルト語 (Windows)</span><span class="sxs-lookup"><span data-stu-id="b1671-287">Baltic (Windows)</span></span>||  
|<span data-ttu-id="b1671-288">1258</span><span class="sxs-lookup"><span data-stu-id="b1671-288">1258</span></span>|<span data-ttu-id="b1671-289">windows-1258</span><span class="sxs-lookup"><span data-stu-id="b1671-289">windows-1258</span></span>|<span data-ttu-id="b1671-290">ベトナム語 (Windows)</span><span class="sxs-lookup"><span data-stu-id="b1671-290">Vietnamese (Windows)</span></span>||  
|<span data-ttu-id="b1671-291">1361</span><span class="sxs-lookup"><span data-stu-id="b1671-291">1361</span></span>|<span data-ttu-id="b1671-292">Johab</span><span class="sxs-lookup"><span data-stu-id="b1671-292">Johab</span></span>|<span data-ttu-id="b1671-293">韓国語 (Johab)</span><span class="sxs-lookup"><span data-stu-id="b1671-293">Korean (Johab)</span></span>||  
|<span data-ttu-id="b1671-294">10000</span><span class="sxs-lookup"><span data-stu-id="b1671-294">10000</span></span>|<span data-ttu-id="b1671-295">macintosh</span><span class="sxs-lookup"><span data-stu-id="b1671-295">macintosh</span></span>|<span data-ttu-id="b1671-296">西ヨーロッパ言語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-296">Western European (Mac)</span></span>||  
|<span data-ttu-id="b1671-297">10001</span><span class="sxs-lookup"><span data-stu-id="b1671-297">10001</span></span>|<span data-ttu-id="b1671-298">日本語 mac x</span><span class="sxs-lookup"><span data-stu-id="b1671-298">x-mac-japanese</span></span>|<span data-ttu-id="b1671-299">日本語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-299">Japanese (Mac)</span></span>||  
|<span data-ttu-id="b1671-300">10002</span><span class="sxs-lookup"><span data-stu-id="b1671-300">10002</span></span>|<span data-ttu-id="b1671-301">x-mac-chinesetrad</span><span class="sxs-lookup"><span data-stu-id="b1671-301">x-mac-chinesetrad</span></span>|<span data-ttu-id="b1671-302">繁体字中国語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-302">Chinese Traditional (Mac)</span></span>||  
|<span data-ttu-id="b1671-303">10003</span><span class="sxs-lookup"><span data-stu-id="b1671-303">10003</span></span>|<span data-ttu-id="b1671-304">x-mac-korean</span><span class="sxs-lookup"><span data-stu-id="b1671-304">x-mac-korean</span></span>|<span data-ttu-id="b1671-305">韓国語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-305">Korean (Mac)</span></span>|<span data-ttu-id="b1671-306">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-306">✓</span></span>|  
|<span data-ttu-id="b1671-307">10004</span><span class="sxs-lookup"><span data-stu-id="b1671-307">10004</span></span>|<span data-ttu-id="b1671-308">x-mac-arabic</span><span class="sxs-lookup"><span data-stu-id="b1671-308">x-mac-arabic</span></span>|<span data-ttu-id="b1671-309">アラビア語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-309">Arabic (Mac)</span></span>||  
|<span data-ttu-id="b1671-310">10005</span><span class="sxs-lookup"><span data-stu-id="b1671-310">10005</span></span>|<span data-ttu-id="b1671-311">x-mac-hebrew</span><span class="sxs-lookup"><span data-stu-id="b1671-311">x-mac-hebrew</span></span>|<span data-ttu-id="b1671-312">ヘブライ語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-312">Hebrew (Mac)</span></span>||  
|<span data-ttu-id="b1671-313">10006</span><span class="sxs-lookup"><span data-stu-id="b1671-313">10006</span></span>|<span data-ttu-id="b1671-314">x-mac-greek</span><span class="sxs-lookup"><span data-stu-id="b1671-314">x-mac-greek</span></span>|<span data-ttu-id="b1671-315">ギリシャ語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-315">Greek (Mac)</span></span>||  
|<span data-ttu-id="b1671-316">10007</span><span class="sxs-lookup"><span data-stu-id="b1671-316">10007</span></span>|<span data-ttu-id="b1671-317">x mac (キリル)</span><span class="sxs-lookup"><span data-stu-id="b1671-317">x-mac-cyrillic</span></span>|<span data-ttu-id="b1671-318">キリル語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-318">Cyrillic (Mac)</span></span>||  
|<span data-ttu-id="b1671-319">10008</span><span class="sxs-lookup"><span data-stu-id="b1671-319">10008</span></span>|<span data-ttu-id="b1671-320">x-mac-chinesesimp</span><span class="sxs-lookup"><span data-stu-id="b1671-320">x-mac-chinesesimp</span></span>|<span data-ttu-id="b1671-321">簡体字中国語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-321">Chinese Simplified (Mac)</span></span>|<span data-ttu-id="b1671-322">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-322">✓</span></span>|  
|<span data-ttu-id="b1671-323">10010</span><span class="sxs-lookup"><span data-stu-id="b1671-323">10010</span></span>|<span data-ttu-id="b1671-324">x-mac-ルーマニア語</span><span class="sxs-lookup"><span data-stu-id="b1671-324">x-mac-romanian</span></span>|<span data-ttu-id="b1671-325">ルーマニア語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-325">Romanian (Mac)</span></span>||  
|<span data-ttu-id="b1671-326">10017</span><span class="sxs-lookup"><span data-stu-id="b1671-326">10017</span></span>|<span data-ttu-id="b1671-327">x-mac-ukrainian</span><span class="sxs-lookup"><span data-stu-id="b1671-327">x-mac-ukrainian</span></span>|<span data-ttu-id="b1671-328">ウクライナ語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-328">Ukrainian (Mac)</span></span>||  
|<span data-ttu-id="b1671-329">10021</span><span class="sxs-lookup"><span data-stu-id="b1671-329">10021</span></span>|<span data-ttu-id="b1671-330">x-mac-thai</span><span class="sxs-lookup"><span data-stu-id="b1671-330">x-mac-thai</span></span>|<span data-ttu-id="b1671-331">タイ語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-331">Thai (Mac)</span></span>||  
|<span data-ttu-id="b1671-332">10029</span><span class="sxs-lookup"><span data-stu-id="b1671-332">10029</span></span>|<span data-ttu-id="b1671-333">x-mac-ce</span><span class="sxs-lookup"><span data-stu-id="b1671-333">x-mac-ce</span></span>|<span data-ttu-id="b1671-334">中央ヨーロッパ言語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-334">Central European (Mac)</span></span>||  
|<span data-ttu-id="b1671-335">10079</span><span class="sxs-lookup"><span data-stu-id="b1671-335">10079</span></span>|<span data-ttu-id="b1671-336">x-mac-アイスランド語</span><span class="sxs-lookup"><span data-stu-id="b1671-336">x-mac-icelandic</span></span>|<span data-ttu-id="b1671-337">アイスランド語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-337">Icelandic (Mac)</span></span>||  
|<span data-ttu-id="b1671-338">10081</span><span class="sxs-lookup"><span data-stu-id="b1671-338">10081</span></span>|<span data-ttu-id="b1671-339">x-mac-turkish</span><span class="sxs-lookup"><span data-stu-id="b1671-339">x-mac-turkish</span></span>|<span data-ttu-id="b1671-340">トルコ語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-340">Turkish (Mac)</span></span>||  
|<span data-ttu-id="b1671-341">10082</span><span class="sxs-lookup"><span data-stu-id="b1671-341">10082</span></span>|<span data-ttu-id="b1671-342">クロアチア語 mac x</span><span class="sxs-lookup"><span data-stu-id="b1671-342">x-mac-croatian</span></span>|<span data-ttu-id="b1671-343">クロアチア語 (Mac)</span><span class="sxs-lookup"><span data-stu-id="b1671-343">Croatian (Mac)</span></span>||  
|<span data-ttu-id="b1671-344">12000</span><span class="sxs-lookup"><span data-stu-id="b1671-344">12000</span></span>|<span data-ttu-id="b1671-345">utf-32</span><span class="sxs-lookup"><span data-stu-id="b1671-345">utf-32</span></span>|<span data-ttu-id="b1671-346">Unicode (utf-32)</span><span class="sxs-lookup"><span data-stu-id="b1671-346">Unicode (UTF-32)</span></span>|<span data-ttu-id="b1671-347">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-347">✓</span></span>|  
|<span data-ttu-id="b1671-348">12001</span><span class="sxs-lookup"><span data-stu-id="b1671-348">12001</span></span>|<span data-ttu-id="b1671-349">utf-32be</span><span class="sxs-lookup"><span data-stu-id="b1671-349">utf-32BE</span></span>|<span data-ttu-id="b1671-350">Unicode (utf-32 Big endian)</span><span class="sxs-lookup"><span data-stu-id="b1671-350">Unicode (UTF-32 Big endian)</span></span>|<span data-ttu-id="b1671-351">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-351">✓</span></span>|  
|<span data-ttu-id="b1671-352">20000</span><span class="sxs-lookup"><span data-stu-id="b1671-352">20000</span></span>|<span data-ttu-id="b1671-353">x-中国語-CN</span><span class="sxs-lookup"><span data-stu-id="b1671-353">x-Chinese-CNS</span></span>|<span data-ttu-id="b1671-354">繁体字中国語 (CN)</span><span class="sxs-lookup"><span data-stu-id="b1671-354">Chinese Traditional (CNS)</span></span>||  
|<span data-ttu-id="b1671-355">20001</span><span class="sxs-lookup"><span data-stu-id="b1671-355">20001</span></span>|<span data-ttu-id="b1671-356">x-cp20001</span><span class="sxs-lookup"><span data-stu-id="b1671-356">x-cp20001</span></span>|<span data-ttu-id="b1671-357">TCA 台湾</span><span class="sxs-lookup"><span data-stu-id="b1671-357">TCA Taiwan</span></span>||  
|<span data-ttu-id="b1671-358">20002</span><span class="sxs-lookup"><span data-stu-id="b1671-358">20002</span></span>|<span data-ttu-id="b1671-359">x-中国語-Eten</span><span class="sxs-lookup"><span data-stu-id="b1671-359">x-Chinese-Eten</span></span>|<span data-ttu-id="b1671-360">繁体字中国語 (Eten)</span><span class="sxs-lookup"><span data-stu-id="b1671-360">Chinese Traditional (Eten)</span></span>||  
|<span data-ttu-id="b1671-361">20003</span><span class="sxs-lookup"><span data-stu-id="b1671-361">20003</span></span>|<span data-ttu-id="b1671-362">x-cp20003</span><span class="sxs-lookup"><span data-stu-id="b1671-362">x-cp20003</span></span>|<span data-ttu-id="b1671-363">IBM5550 台湾</span><span class="sxs-lookup"><span data-stu-id="b1671-363">IBM5550 Taiwan</span></span>||  
|<span data-ttu-id="b1671-364">20004</span><span class="sxs-lookup"><span data-stu-id="b1671-364">20004</span></span>|<span data-ttu-id="b1671-365">x-cp20004</span><span class="sxs-lookup"><span data-stu-id="b1671-365">x-cp20004</span></span>|<span data-ttu-id="b1671-366">文字放送台湾</span><span class="sxs-lookup"><span data-stu-id="b1671-366">TeleText Taiwan</span></span>||  
|<span data-ttu-id="b1671-367">20005</span><span class="sxs-lookup"><span data-stu-id="b1671-367">20005</span></span>|<span data-ttu-id="b1671-368">x-cp20005</span><span class="sxs-lookup"><span data-stu-id="b1671-368">x-cp20005</span></span>|<span data-ttu-id="b1671-369">Wang 台湾</span><span class="sxs-lookup"><span data-stu-id="b1671-369">Wang Taiwan</span></span>||  
|<span data-ttu-id="b1671-370">20105</span><span class="sxs-lookup"><span data-stu-id="b1671-370">20105</span></span>|<span data-ttu-id="b1671-371">x-IA5</span><span class="sxs-lookup"><span data-stu-id="b1671-371">x-IA5</span></span>|<span data-ttu-id="b1671-372">西ヨーロッパ言語 (IA5)</span><span class="sxs-lookup"><span data-stu-id="b1671-372">Western European (IA5)</span></span>||  
|<span data-ttu-id="b1671-373">20106</span><span class="sxs-lookup"><span data-stu-id="b1671-373">20106</span></span>|<span data-ttu-id="b1671-374">ドイツ語 IA5 x</span><span class="sxs-lookup"><span data-stu-id="b1671-374">x-IA5-German</span></span>|<span data-ttu-id="b1671-375">ドイツ語 (IA5)</span><span class="sxs-lookup"><span data-stu-id="b1671-375">German (IA5)</span></span>||  
|<span data-ttu-id="b1671-376">20107</span><span class="sxs-lookup"><span data-stu-id="b1671-376">20107</span></span>|<span data-ttu-id="b1671-377">x IA5-スウェーデン語</span><span class="sxs-lookup"><span data-stu-id="b1671-377">x-IA5-Swedish</span></span>|<span data-ttu-id="b1671-378">スウェーデン語 (IA5)</span><span class="sxs-lookup"><span data-stu-id="b1671-378">Swedish (IA5)</span></span>||  
|<span data-ttu-id="b1671-379">20108</span><span class="sxs-lookup"><span data-stu-id="b1671-379">20108</span></span>|<span data-ttu-id="b1671-380">ノルウェー語 IA5 x</span><span class="sxs-lookup"><span data-stu-id="b1671-380">x-IA5-Norwegian</span></span>|<span data-ttu-id="b1671-381">ノルウェー語 (IA5)</span><span class="sxs-lookup"><span data-stu-id="b1671-381">Norwegian (IA5)</span></span>||  
|<span data-ttu-id="b1671-382">20127</span><span class="sxs-lookup"><span data-stu-id="b1671-382">20127</span></span>|<span data-ttu-id="b1671-383">us-ascii</span><span class="sxs-lookup"><span data-stu-id="b1671-383">us-ascii</span></span>|<span data-ttu-id="b1671-384">US-ASCII</span><span class="sxs-lookup"><span data-stu-id="b1671-384">US-ASCII</span></span>|<span data-ttu-id="b1671-385">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-385">✓</span></span>|  
|<span data-ttu-id="b1671-386">20261</span><span class="sxs-lookup"><span data-stu-id="b1671-386">20261</span></span>|<span data-ttu-id="b1671-387">x-cp20261</span><span class="sxs-lookup"><span data-stu-id="b1671-387">x-cp20261</span></span>|<span data-ttu-id="b1671-388">T.61</span><span class="sxs-lookup"><span data-stu-id="b1671-388">T.61</span></span>||  
|<span data-ttu-id="b1671-389">20269</span><span class="sxs-lookup"><span data-stu-id="b1671-389">20269</span></span>|<span data-ttu-id="b1671-390">x-cp20269</span><span class="sxs-lookup"><span data-stu-id="b1671-390">x-cp20269</span></span>|<span data-ttu-id="b1671-391">ISO-6937</span><span class="sxs-lookup"><span data-stu-id="b1671-391">ISO-6937</span></span>||  
|<span data-ttu-id="b1671-392">20273</span><span class="sxs-lookup"><span data-stu-id="b1671-392">20273</span></span>|<span data-ttu-id="b1671-393">IBM273</span><span class="sxs-lookup"><span data-stu-id="b1671-393">IBM273</span></span>|<span data-ttu-id="b1671-394">IBM EBCDIC (ドイツ)</span><span class="sxs-lookup"><span data-stu-id="b1671-394">IBM EBCDIC (Germany)</span></span>||  
|<span data-ttu-id="b1671-395">20277</span><span class="sxs-lookup"><span data-stu-id="b1671-395">20277</span></span>|<span data-ttu-id="b1671-396">IBM277</span><span class="sxs-lookup"><span data-stu-id="b1671-396">IBM277</span></span>|<span data-ttu-id="b1671-397">IBM EBCDIC (デンマーク ノルウェー)</span><span class="sxs-lookup"><span data-stu-id="b1671-397">IBM EBCDIC (Denmark-Norway)</span></span>||  
|<span data-ttu-id="b1671-398">20278</span><span class="sxs-lookup"><span data-stu-id="b1671-398">20278</span></span>|<span data-ttu-id="b1671-399">IBM278</span><span class="sxs-lookup"><span data-stu-id="b1671-399">IBM278</span></span>|<span data-ttu-id="b1671-400">IBM EBCDIC (フィンランド-スウェーデン語)</span><span class="sxs-lookup"><span data-stu-id="b1671-400">IBM EBCDIC (Finland-Sweden)</span></span>||  
|<span data-ttu-id="b1671-401">20280</span><span class="sxs-lookup"><span data-stu-id="b1671-401">20280</span></span>|<span data-ttu-id="b1671-402">IBM280</span><span class="sxs-lookup"><span data-stu-id="b1671-402">IBM280</span></span>|<span data-ttu-id="b1671-403">IBM EBCDIC (イタリア)</span><span class="sxs-lookup"><span data-stu-id="b1671-403">IBM EBCDIC (Italy)</span></span>||  
|<span data-ttu-id="b1671-404">20284</span><span class="sxs-lookup"><span data-stu-id="b1671-404">20284</span></span>|<span data-ttu-id="b1671-405">IBM284</span><span class="sxs-lookup"><span data-stu-id="b1671-405">IBM284</span></span>|<span data-ttu-id="b1671-406">IBM EBCDIC (スペイン)</span><span class="sxs-lookup"><span data-stu-id="b1671-406">IBM EBCDIC (Spain)</span></span>||  
|<span data-ttu-id="b1671-407">20285</span><span class="sxs-lookup"><span data-stu-id="b1671-407">20285</span></span>|<span data-ttu-id="b1671-408">IBM285</span><span class="sxs-lookup"><span data-stu-id="b1671-408">IBM285</span></span>|<span data-ttu-id="b1671-409">IBM EBCDIC (英国)</span><span class="sxs-lookup"><span data-stu-id="b1671-409">IBM EBCDIC (UK)</span></span>||  
|<span data-ttu-id="b1671-410">20290</span><span class="sxs-lookup"><span data-stu-id="b1671-410">20290</span></span>|<span data-ttu-id="b1671-411">IBM290</span><span class="sxs-lookup"><span data-stu-id="b1671-411">IBM290</span></span>|<span data-ttu-id="b1671-412">IBM EBCDIC (日本語カタカナ)</span><span class="sxs-lookup"><span data-stu-id="b1671-412">IBM EBCDIC (Japanese katakana)</span></span>||  
|<span data-ttu-id="b1671-413">20297</span><span class="sxs-lookup"><span data-stu-id="b1671-413">20297</span></span>|<span data-ttu-id="b1671-414">IBM297</span><span class="sxs-lookup"><span data-stu-id="b1671-414">IBM297</span></span>|<span data-ttu-id="b1671-415">IBM EBCDIC (フランス)</span><span class="sxs-lookup"><span data-stu-id="b1671-415">IBM EBCDIC (France)</span></span>||  
|<span data-ttu-id="b1671-416">20420</span><span class="sxs-lookup"><span data-stu-id="b1671-416">20420</span></span>|<span data-ttu-id="b1671-417">IBM420</span><span class="sxs-lookup"><span data-stu-id="b1671-417">IBM420</span></span>|<span data-ttu-id="b1671-418">IBM EBCDIC (アラビア語)</span><span class="sxs-lookup"><span data-stu-id="b1671-418">IBM EBCDIC (Arabic)</span></span>||  
|<span data-ttu-id="b1671-419">20423</span><span class="sxs-lookup"><span data-stu-id="b1671-419">20423</span></span>|<span data-ttu-id="b1671-420">IBM423</span><span class="sxs-lookup"><span data-stu-id="b1671-420">IBM423</span></span>|<span data-ttu-id="b1671-421">IBM EBCDIC (ギリシャ語)</span><span class="sxs-lookup"><span data-stu-id="b1671-421">IBM EBCDIC (Greek)</span></span>||  
|<span data-ttu-id="b1671-422">20424</span><span class="sxs-lookup"><span data-stu-id="b1671-422">20424</span></span>|<span data-ttu-id="b1671-423">IBM424</span><span class="sxs-lookup"><span data-stu-id="b1671-423">IBM424</span></span>|<span data-ttu-id="b1671-424">IBM EBCDIC (ヘブライ語)</span><span class="sxs-lookup"><span data-stu-id="b1671-424">IBM EBCDIC (Hebrew)</span></span>||  
|<span data-ttu-id="b1671-425">20833</span><span class="sxs-lookup"><span data-stu-id="b1671-425">20833</span></span>|<span data-ttu-id="b1671-426">x-EBCDIC-KoreanExtended</span><span class="sxs-lookup"><span data-stu-id="b1671-426">x-EBCDIC-KoreanExtended</span></span>|<span data-ttu-id="b1671-427">IBM EBCDIC (韓国語拡張)</span><span class="sxs-lookup"><span data-stu-id="b1671-427">IBM EBCDIC (Korean Extended)</span></span>||  
|<span data-ttu-id="b1671-428">20838</span><span class="sxs-lookup"><span data-stu-id="b1671-428">20838</span></span>|<span data-ttu-id="b1671-429">IBM タイ語</span><span class="sxs-lookup"><span data-stu-id="b1671-429">IBM-Thai</span></span>|<span data-ttu-id="b1671-430">IBM EBCDIC (タイ語)</span><span class="sxs-lookup"><span data-stu-id="b1671-430">IBM EBCDIC (Thai)</span></span>||  
|<span data-ttu-id="b1671-431">20866</span><span class="sxs-lookup"><span data-stu-id="b1671-431">20866</span></span>|<span data-ttu-id="b1671-432">koi8-r</span><span class="sxs-lookup"><span data-stu-id="b1671-432">koi8-r</span></span>|<span data-ttu-id="b1671-433">キリル語 (KOI8 R)</span><span class="sxs-lookup"><span data-stu-id="b1671-433">Cyrillic (KOI8-R)</span></span>||  
|<span data-ttu-id="b1671-434">20871</span><span class="sxs-lookup"><span data-stu-id="b1671-434">20871</span></span>|<span data-ttu-id="b1671-435">IBM871</span><span class="sxs-lookup"><span data-stu-id="b1671-435">IBM871</span></span>|<span data-ttu-id="b1671-436">IBM EBCDIC (アイスランド語)</span><span class="sxs-lookup"><span data-stu-id="b1671-436">IBM EBCDIC (Icelandic)</span></span>||  
|<span data-ttu-id="b1671-437">20880</span><span class="sxs-lookup"><span data-stu-id="b1671-437">20880</span></span>|<span data-ttu-id="b1671-438">IBM880</span><span class="sxs-lookup"><span data-stu-id="b1671-438">IBM880</span></span>|<span data-ttu-id="b1671-439">IBM EBCDIC (キリル ロシア語)</span><span class="sxs-lookup"><span data-stu-id="b1671-439">IBM EBCDIC (Cyrillic Russian)</span></span>||  
|<span data-ttu-id="b1671-440">20905</span><span class="sxs-lookup"><span data-stu-id="b1671-440">20905</span></span>|<span data-ttu-id="b1671-441">IBM905</span><span class="sxs-lookup"><span data-stu-id="b1671-441">IBM905</span></span>|<span data-ttu-id="b1671-442">IBM EBCDIC (トルコ語)</span><span class="sxs-lookup"><span data-stu-id="b1671-442">IBM EBCDIC (Turkish)</span></span>||  
|<span data-ttu-id="b1671-443">20924</span><span class="sxs-lookup"><span data-stu-id="b1671-443">20924</span></span>|<span data-ttu-id="b1671-444">IBM00924</span><span class="sxs-lookup"><span data-stu-id="b1671-444">IBM00924</span></span>|<span data-ttu-id="b1671-445">IBM ラテン語-1</span><span class="sxs-lookup"><span data-stu-id="b1671-445">IBM Latin-1</span></span>||  
|<span data-ttu-id="b1671-446">20932</span><span class="sxs-lookup"><span data-stu-id="b1671-446">20932</span></span>|<span data-ttu-id="b1671-447">EUC-JP</span><span class="sxs-lookup"><span data-stu-id="b1671-447">EUC-JP</span></span>|<span data-ttu-id="b1671-448">日本語 (JIS 0208-1990 および 0212-1990)</span><span class="sxs-lookup"><span data-stu-id="b1671-448">Japanese (JIS 0208-1990 and 0212-1990)</span></span>||  
|<span data-ttu-id="b1671-449">20936</span><span class="sxs-lookup"><span data-stu-id="b1671-449">20936</span></span>|<span data-ttu-id="b1671-450">x-cp20936</span><span class="sxs-lookup"><span data-stu-id="b1671-450">x-cp20936</span></span>|<span data-ttu-id="b1671-451">簡体字中国語 (GB2312 80)</span><span class="sxs-lookup"><span data-stu-id="b1671-451">Chinese Simplified (GB2312-80)</span></span>|<span data-ttu-id="b1671-452">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-452">✓</span></span>|  
|<span data-ttu-id="b1671-453">20949</span><span class="sxs-lookup"><span data-stu-id="b1671-453">20949</span></span>|<span data-ttu-id="b1671-454">x-cp20949</span><span class="sxs-lookup"><span data-stu-id="b1671-454">x-cp20949</span></span>|<span data-ttu-id="b1671-455">韓国語 Wansung</span><span class="sxs-lookup"><span data-stu-id="b1671-455">Korean Wansung</span></span>|<span data-ttu-id="b1671-456">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-456">✓</span></span>|  
|<span data-ttu-id="b1671-457">21025</span><span class="sxs-lookup"><span data-stu-id="b1671-457">21025</span></span>|<span data-ttu-id="b1671-458">cp1025</span><span class="sxs-lookup"><span data-stu-id="b1671-458">cp1025</span></span>|<span data-ttu-id="b1671-459">IBM EBCDIC (キリル セルビア語、ブルガリア語)</span><span class="sxs-lookup"><span data-stu-id="b1671-459">IBM EBCDIC (Cyrillic Serbian-Bulgarian)</span></span>||  
|<span data-ttu-id="b1671-460">21866</span><span class="sxs-lookup"><span data-stu-id="b1671-460">21866</span></span>|<span data-ttu-id="b1671-461">koi8-u</span><span class="sxs-lookup"><span data-stu-id="b1671-461">koi8-u</span></span>|<span data-ttu-id="b1671-462">キリル語 (KOI8 U)</span><span class="sxs-lookup"><span data-stu-id="b1671-462">Cyrillic (KOI8-U)</span></span>||  
|<span data-ttu-id="b1671-463">28591</span><span class="sxs-lookup"><span data-stu-id="b1671-463">28591</span></span>|<span data-ttu-id="b1671-464">iso 8859-1</span><span class="sxs-lookup"><span data-stu-id="b1671-464">iso-8859-1</span></span>|<span data-ttu-id="b1671-465">西ヨーロッパ言語 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-465">Western European (ISO)</span></span>|<span data-ttu-id="b1671-466">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-466">✓</span></span>|  
|<span data-ttu-id="b1671-467">28592</span><span class="sxs-lookup"><span data-stu-id="b1671-467">28592</span></span>|<span data-ttu-id="b1671-468">iso 8859-2</span><span class="sxs-lookup"><span data-stu-id="b1671-468">iso-8859-2</span></span>|<span data-ttu-id="b1671-469">中央ヨーロッパ言語 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-469">Central European (ISO)</span></span>||  
|<span data-ttu-id="b1671-470">28593</span><span class="sxs-lookup"><span data-stu-id="b1671-470">28593</span></span>|<span data-ttu-id="b1671-471">iso 8859-3</span><span class="sxs-lookup"><span data-stu-id="b1671-471">iso-8859-3</span></span>|<span data-ttu-id="b1671-472">ラテン 3 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-472">Latin 3 (ISO)</span></span>||  
|<span data-ttu-id="b1671-473">28594</span><span class="sxs-lookup"><span data-stu-id="b1671-473">28594</span></span>|<span data-ttu-id="b1671-474">iso 8859-4</span><span class="sxs-lookup"><span data-stu-id="b1671-474">iso-8859-4</span></span>|<span data-ttu-id="b1671-475">バルト語 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-475">Baltic (ISO)</span></span>||  
|<span data-ttu-id="b1671-476">28595</span><span class="sxs-lookup"><span data-stu-id="b1671-476">28595</span></span>|<span data-ttu-id="b1671-477">iso 8859-5</span><span class="sxs-lookup"><span data-stu-id="b1671-477">iso-8859-5</span></span>|<span data-ttu-id="b1671-478">キリル語 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-478">Cyrillic (ISO)</span></span>||  
|<span data-ttu-id="b1671-479">28596</span><span class="sxs-lookup"><span data-stu-id="b1671-479">28596</span></span>|<span data-ttu-id="b1671-480">iso 8859-6</span><span class="sxs-lookup"><span data-stu-id="b1671-480">iso-8859-6</span></span>|<span data-ttu-id="b1671-481">アラビア語 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-481">Arabic (ISO)</span></span>||  
|<span data-ttu-id="b1671-482">28597</span><span class="sxs-lookup"><span data-stu-id="b1671-482">28597</span></span>|<span data-ttu-id="b1671-483">iso 8859-7</span><span class="sxs-lookup"><span data-stu-id="b1671-483">iso-8859-7</span></span>|<span data-ttu-id="b1671-484">ギリシャ語 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-484">Greek (ISO)</span></span>||  
|<span data-ttu-id="b1671-485">28598</span><span class="sxs-lookup"><span data-stu-id="b1671-485">28598</span></span>|<span data-ttu-id="b1671-486">iso 8859-8</span><span class="sxs-lookup"><span data-stu-id="b1671-486">iso-8859-8</span></span>|<span data-ttu-id="b1671-487">ヘブライ語 (Iso-visual)</span><span class="sxs-lookup"><span data-stu-id="b1671-487">Hebrew (ISO-Visual)</span></span>|<span data-ttu-id="b1671-488">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-488">✓</span></span>|  
|<span data-ttu-id="b1671-489">28599</span><span class="sxs-lookup"><span data-stu-id="b1671-489">28599</span></span>|<span data-ttu-id="b1671-490">iso 8859-9</span><span class="sxs-lookup"><span data-stu-id="b1671-490">iso-8859-9</span></span>|<span data-ttu-id="b1671-491">トルコ語 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-491">Turkish (ISO)</span></span>||  
|<span data-ttu-id="b1671-492">28603</span><span class="sxs-lookup"><span data-stu-id="b1671-492">28603</span></span>|<span data-ttu-id="b1671-493">iso 8859-13</span><span class="sxs-lookup"><span data-stu-id="b1671-493">iso-8859-13</span></span>|<span data-ttu-id="b1671-494">エストニア語 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-494">Estonian (ISO)</span></span>||  
|<span data-ttu-id="b1671-495">28605</span><span class="sxs-lookup"><span data-stu-id="b1671-495">28605</span></span>|<span data-ttu-id="b1671-496">iso 8859-15</span><span class="sxs-lookup"><span data-stu-id="b1671-496">iso-8859-15</span></span>|<span data-ttu-id="b1671-497">ラテン 9 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-497">Latin 9 (ISO)</span></span>||  
|<span data-ttu-id="b1671-498">29001</span><span class="sxs-lookup"><span data-stu-id="b1671-498">29001</span></span>|<span data-ttu-id="b1671-499">x ヨーロッパ</span><span class="sxs-lookup"><span data-stu-id="b1671-499">x-Europa</span></span>|<span data-ttu-id="b1671-500">ヨーロッパ</span><span class="sxs-lookup"><span data-stu-id="b1671-500">Europa</span></span>||  
|<span data-ttu-id="b1671-501">38598</span><span class="sxs-lookup"><span data-stu-id="b1671-501">38598</span></span>|<span data-ttu-id="b1671-502">iso 8859-8 i</span><span class="sxs-lookup"><span data-stu-id="b1671-502">iso-8859-8-i</span></span>|<span data-ttu-id="b1671-503">ヘブライ語 (ISO 論理)</span><span class="sxs-lookup"><span data-stu-id="b1671-503">Hebrew (ISO-Logical)</span></span>|<span data-ttu-id="b1671-504">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-504">✓</span></span>|  
|<span data-ttu-id="b1671-505">50220</span><span class="sxs-lookup"><span data-stu-id="b1671-505">50220</span></span>|<span data-ttu-id="b1671-506">iso-2022-jp</span><span class="sxs-lookup"><span data-stu-id="b1671-506">iso-2022-jp</span></span>|<span data-ttu-id="b1671-507">日本語 (JIS)</span><span class="sxs-lookup"><span data-stu-id="b1671-507">Japanese (JIS)</span></span>|<span data-ttu-id="b1671-508">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-508">✓</span></span>|  
|<span data-ttu-id="b1671-509">50221</span><span class="sxs-lookup"><span data-stu-id="b1671-509">50221</span></span>|<span data-ttu-id="b1671-510">csISO2022JP</span><span class="sxs-lookup"><span data-stu-id="b1671-510">csISO2022JP</span></span>|<span data-ttu-id="b1671-511">日本語 (JIS 1 バイト カタカナ可)</span><span class="sxs-lookup"><span data-stu-id="b1671-511">Japanese (JIS-Allow 1 byte Kana)</span></span>|<span data-ttu-id="b1671-512">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-512">✓</span></span>|  
|<span data-ttu-id="b1671-513">50222</span><span class="sxs-lookup"><span data-stu-id="b1671-513">50222</span></span>|<span data-ttu-id="b1671-514">iso-2022-jp</span><span class="sxs-lookup"><span data-stu-id="b1671-514">iso-2022-jp</span></span>|<span data-ttu-id="b1671-515">日本語 (JIS 1 バイト カタカナ可 -、/SI)</span><span class="sxs-lookup"><span data-stu-id="b1671-515">Japanese (JIS-Allow 1 byte Kana - SO/SI)</span></span>|<span data-ttu-id="b1671-516">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-516">✓</span></span>|  
|<span data-ttu-id="b1671-517">50225</span><span class="sxs-lookup"><span data-stu-id="b1671-517">50225</span></span>|<span data-ttu-id="b1671-518">iso-2022-大韓民国</span><span class="sxs-lookup"><span data-stu-id="b1671-518">iso-2022-kr</span></span>|<span data-ttu-id="b1671-519">韓国語 (ISO)</span><span class="sxs-lookup"><span data-stu-id="b1671-519">Korean (ISO)</span></span>|<span data-ttu-id="b1671-520">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-520">✓</span></span>|  
|<span data-ttu-id="b1671-521">50227</span><span class="sxs-lookup"><span data-stu-id="b1671-521">50227</span></span>|<span data-ttu-id="b1671-522">x-cp50227</span><span class="sxs-lookup"><span data-stu-id="b1671-522">x-cp50227</span></span>|<span data-ttu-id="b1671-523">簡体字中国語 (iso-2022)</span><span class="sxs-lookup"><span data-stu-id="b1671-523">Chinese Simplified (ISO-2022)</span></span>|<span data-ttu-id="b1671-524">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-524">✓</span></span>|  
|<span data-ttu-id="b1671-525">51932</span><span class="sxs-lookup"><span data-stu-id="b1671-525">51932</span></span>|<span data-ttu-id="b1671-526">-euc-jp</span><span class="sxs-lookup"><span data-stu-id="b1671-526">euc-jp</span></span>|<span data-ttu-id="b1671-527">日本語 (EUC)</span><span class="sxs-lookup"><span data-stu-id="b1671-527">Japanese (EUC)</span></span>|<span data-ttu-id="b1671-528">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-528">✓</span></span>|  
|<span data-ttu-id="b1671-529">51936</span><span class="sxs-lookup"><span data-stu-id="b1671-529">51936</span></span>|<span data-ttu-id="b1671-530">EUC CN</span><span class="sxs-lookup"><span data-stu-id="b1671-530">EUC-CN</span></span>|<span data-ttu-id="b1671-531">簡体字中国語 (EUC)</span><span class="sxs-lookup"><span data-stu-id="b1671-531">Chinese Simplified (EUC)</span></span>|<span data-ttu-id="b1671-532">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-532">✓</span></span>|  
|<span data-ttu-id="b1671-533">51949</span><span class="sxs-lookup"><span data-stu-id="b1671-533">51949</span></span>|<span data-ttu-id="b1671-534">-euc-kr</span><span class="sxs-lookup"><span data-stu-id="b1671-534">euc-kr</span></span>|<span data-ttu-id="b1671-535">韓国語 (EUC)</span><span class="sxs-lookup"><span data-stu-id="b1671-535">Korean (EUC)</span></span>|<span data-ttu-id="b1671-536">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-536">✓</span></span>|  
|<span data-ttu-id="b1671-537">52936</span><span class="sxs-lookup"><span data-stu-id="b1671-537">52936</span></span>|<span data-ttu-id="b1671-538">hz-gb-2312</span><span class="sxs-lookup"><span data-stu-id="b1671-538">hz-gb-2312</span></span>|<span data-ttu-id="b1671-539">簡体字中国語 (HZ)</span><span class="sxs-lookup"><span data-stu-id="b1671-539">Chinese Simplified (HZ)</span></span>|<span data-ttu-id="b1671-540">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-540">✓</span></span>|  
|<span data-ttu-id="b1671-541">54936</span><span class="sxs-lookup"><span data-stu-id="b1671-541">54936</span></span>|<span data-ttu-id="b1671-542">GB18030</span><span class="sxs-lookup"><span data-stu-id="b1671-542">GB18030</span></span>|<span data-ttu-id="b1671-543">簡体字中国語 (GB18030)</span><span class="sxs-lookup"><span data-stu-id="b1671-543">Chinese Simplified (GB18030)</span></span>|<span data-ttu-id="b1671-544">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-544">✓</span></span>|  
|<span data-ttu-id="b1671-545">57002</span><span class="sxs-lookup"><span data-stu-id="b1671-545">57002</span></span>|<span data-ttu-id="b1671-546">x-iscii-de</span><span class="sxs-lookup"><span data-stu-id="b1671-546">x-iscii-de</span></span>|<span data-ttu-id="b1671-547">ISCII デバナーガリ</span><span class="sxs-lookup"><span data-stu-id="b1671-547">ISCII Devanagari</span></span>|<span data-ttu-id="b1671-548">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-548">✓</span></span>|  
|<span data-ttu-id="b1671-549">57003</span><span class="sxs-lookup"><span data-stu-id="b1671-549">57003</span></span>|<span data-ttu-id="b1671-550">x iscii です。</span><span class="sxs-lookup"><span data-stu-id="b1671-550">x-iscii-be</span></span>|<span data-ttu-id="b1671-551">ISCII ベンガル語</span><span class="sxs-lookup"><span data-stu-id="b1671-551">ISCII Bengali</span></span>|<span data-ttu-id="b1671-552">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-552">✓</span></span>|  
|<span data-ttu-id="b1671-553">57004</span><span class="sxs-lookup"><span data-stu-id="b1671-553">57004</span></span>|<span data-ttu-id="b1671-554">x-iscii-ta</span><span class="sxs-lookup"><span data-stu-id="b1671-554">x-iscii-ta</span></span>|<span data-ttu-id="b1671-555">ISCII タミール語</span><span class="sxs-lookup"><span data-stu-id="b1671-555">ISCII Tamil</span></span>|<span data-ttu-id="b1671-556">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-556">✓</span></span>|  
|<span data-ttu-id="b1671-557">57005</span><span class="sxs-lookup"><span data-stu-id="b1671-557">57005</span></span>|<span data-ttu-id="b1671-558">x-iscii-te</span><span class="sxs-lookup"><span data-stu-id="b1671-558">x-iscii-te</span></span>|<span data-ttu-id="b1671-559">ISCII テルグ語</span><span class="sxs-lookup"><span data-stu-id="b1671-559">ISCII Telugu</span></span>|<span data-ttu-id="b1671-560">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-560">✓</span></span>|  
|<span data-ttu-id="b1671-561">57006</span><span class="sxs-lookup"><span data-stu-id="b1671-561">57006</span></span>|<span data-ttu-id="b1671-562">x-iscii-として</span><span class="sxs-lookup"><span data-stu-id="b1671-562">x-iscii-as</span></span>|<span data-ttu-id="b1671-563">ISCII アッサム語</span><span class="sxs-lookup"><span data-stu-id="b1671-563">ISCII Assamese</span></span>|<span data-ttu-id="b1671-564">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-564">✓</span></span>|  
|<span data-ttu-id="b1671-565">57007</span><span class="sxs-lookup"><span data-stu-id="b1671-565">57007</span></span>|<span data-ttu-id="b1671-566">x iscii または</span><span class="sxs-lookup"><span data-stu-id="b1671-566">x-iscii-or</span></span>|<span data-ttu-id="b1671-567">ISCII オリヤー語</span><span class="sxs-lookup"><span data-stu-id="b1671-567">ISCII Oriya</span></span>|<span data-ttu-id="b1671-568">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-568">✓</span></span>|  
|<span data-ttu-id="b1671-569">57008</span><span class="sxs-lookup"><span data-stu-id="b1671-569">57008</span></span>|<span data-ttu-id="b1671-570">x-iscii-ka</span><span class="sxs-lookup"><span data-stu-id="b1671-570">x-iscii-ka</span></span>|<span data-ttu-id="b1671-571">ISCII カンナダ語</span><span class="sxs-lookup"><span data-stu-id="b1671-571">ISCII Kannada</span></span>|<span data-ttu-id="b1671-572">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-572">✓</span></span>|  
|<span data-ttu-id="b1671-573">57009</span><span class="sxs-lookup"><span data-stu-id="b1671-573">57009</span></span>|<span data-ttu-id="b1671-574">x-iscii-ma</span><span class="sxs-lookup"><span data-stu-id="b1671-574">x-iscii-ma</span></span>|<span data-ttu-id="b1671-575">ISCII マラヤーラム語</span><span class="sxs-lookup"><span data-stu-id="b1671-575">ISCII Malayalam</span></span>|<span data-ttu-id="b1671-576">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-576">✓</span></span>|  
|<span data-ttu-id="b1671-577">57010</span><span class="sxs-lookup"><span data-stu-id="b1671-577">57010</span></span>|<span data-ttu-id="b1671-578">x-iscii-gu</span><span class="sxs-lookup"><span data-stu-id="b1671-578">x-iscii-gu</span></span>|<span data-ttu-id="b1671-579">ISCII グジャラート語</span><span class="sxs-lookup"><span data-stu-id="b1671-579">ISCII Gujarati</span></span>|<span data-ttu-id="b1671-580">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-580">✓</span></span>|  
|<span data-ttu-id="b1671-581">57011</span><span class="sxs-lookup"><span data-stu-id="b1671-581">57011</span></span>|<span data-ttu-id="b1671-582">x-iscii-pa</span><span class="sxs-lookup"><span data-stu-id="b1671-582">x-iscii-pa</span></span>|<span data-ttu-id="b1671-583">ISCII パンジャーブ語</span><span class="sxs-lookup"><span data-stu-id="b1671-583">ISCII Punjabi</span></span>|<span data-ttu-id="b1671-584">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-584">✓</span></span>|  
|<span data-ttu-id="b1671-585">65000</span><span class="sxs-lookup"><span data-stu-id="b1671-585">65000</span></span>|<span data-ttu-id="b1671-586">utf-7</span><span class="sxs-lookup"><span data-stu-id="b1671-586">utf-7</span></span>|<span data-ttu-id="b1671-587">Unicode (utf-7)</span><span class="sxs-lookup"><span data-stu-id="b1671-587">Unicode (UTF-7)</span></span>|<span data-ttu-id="b1671-588">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-588">✓</span></span>|  
|<span data-ttu-id="b1671-589">65001</span><span class="sxs-lookup"><span data-stu-id="b1671-589">65001</span></span>|<span data-ttu-id="b1671-590">utf-8</span><span class="sxs-lookup"><span data-stu-id="b1671-590">utf-8</span></span>|<span data-ttu-id="b1671-591">Unicode (UTF-8)</span><span class="sxs-lookup"><span data-stu-id="b1671-591">Unicode (UTF-8)</span></span>|<span data-ttu-id="b1671-592">✓</span><span class="sxs-lookup"><span data-stu-id="b1671-592">✓</span></span>|  
  
 <span data-ttu-id="b1671-593">次の例では、<xref:System.Text.Encoding.GetEncoding%28System.Int32%29>と<xref:System.Text.Encoding.GetEncoding%28System.String%29>ギリシャ語 (Windows) を取得するメソッドのコード ページ エンコーディングします。</span><span class="sxs-lookup"><span data-stu-id="b1671-593">The following example calls the <xref:System.Text.Encoding.GetEncoding%28System.Int32%29> and <xref:System.Text.Encoding.GetEncoding%28System.String%29> methods to get the Greek (Windows) code page encoding.</span></span> <span data-ttu-id="b1671-594">比較、<xref:System.Text.Encoding>こと、それらが等しく、し、マップ、Unicode コード ポイントとの各文字の対応するコード ページの値に表示ギリシャ文字を表示するメソッドの呼び出しによって返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-594">It compares the <xref:System.Text.Encoding> objects returned by the method calls to show that they are equal, and then maps displays the Unicode code point and the corresponding code page value for each character in the Greek alphabet.</span></span>  
  
 [!code-csharp[System.Text.Encoding#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding/cs/getencoding1.cs#1)]
 [!code-vb[System.Text.Encoding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding/vb/getencoding1.vb#1)]  
  
 <span data-ttu-id="b1671-595">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-595">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-596">Utf-16、utf-32 エンコーダーは、ビッグ エンディアン バイト順を使用できます (最上位バイト最初) またはリトル エンディアン バイト順 (最下位バイト最初)。</span><span class="sxs-lookup"><span data-stu-id="b1671-596">The UTF-16 and the UTF-32 encoders can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first).</span></span> <span data-ttu-id="b1671-597">たとえば、(u+0041) としてシリアル化 Latin Capital Letter 次のように 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="b1671-597">For example, the Latin Capital Letter A (U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="b1671-598">Utf-16 ビッグ エンディアン バイト順: 00 41</span><span class="sxs-lookup"><span data-stu-id="b1671-598">UTF-16 big endian byte order: 00 41</span></span>  
  
-   <span data-ttu-id="b1671-599">Utf-16 リトル エンディアン バイト順: 41 00</span><span class="sxs-lookup"><span data-stu-id="b1671-599">UTF-16 little endian byte order: 41 00</span></span>  
  
-   <span data-ttu-id="b1671-600">Utf-32 ビッグ エンディアン バイト順: 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="b1671-600">UTF-32 big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="b1671-601">リトル エンディアン バイト順の utf-32: 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="b1671-601">UTF-32 little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="b1671-602">これは、ネイティブのバイト順を使用して Unicode 文字を格納する方が効率的です。</span><span class="sxs-lookup"><span data-stu-id="b1671-602">It is generally more efficient to store Unicode characters using the native byte order.</span></span> <span data-ttu-id="b1671-603">たとえば、Intel のコンピューターなど、リトル エンディアンのプラットフォームでリトル エンディアン バイト順を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-603">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span>  
  
 <span data-ttu-id="b1671-604"><xref:System.Text.Encoding.GetPreamble%2A>メソッドはバイト順マーク (BOM) を含むバイト配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-604">The <xref:System.Text.Encoding.GetPreamble%2A> method retrieves an array of bytes that includes the byte order mark (BOM).</span></span> <span data-ttu-id="b1671-605">このバイト配列の先頭が、エンコード済みストリームに、デコーダーが使用されるエンコード形式を識別するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="b1671-605">If this byte array is prefixed to an encoded stream, it helps the decoder to identify the encoding format used.</span></span>  
  
 <span data-ttu-id="b1671-606">バイト順とバイト順マークの詳細については、Unicode 標準を参照してください、 [Unicode ホームページ](http://go.microsoft.com/fwlink/?LinkId=37123)です。</span><span class="sxs-lookup"><span data-stu-id="b1671-606">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
 <span data-ttu-id="b1671-607">エンコーディングのクラスがエラーを許可することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b1671-607">Note that the encoding classes allow errors to:</span></span>  
  
-   <span data-ttu-id="b1671-608">通知なしに変更、"?"文字です。</span><span class="sxs-lookup"><span data-stu-id="b1671-608">Silently change to a "?" character.</span></span>  
  
-   <span data-ttu-id="b1671-609">"Best fit"の文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-609">Use a "best fit" character.</span></span>  
  
-   <span data-ttu-id="b1671-610">使用して、アプリケーション固有の動作を変更、<xref:System.Text.EncoderFallback>と<xref:System.Text.DecoderFallback>U + FFFD Unicode replacement character を持つクラス。</span><span class="sxs-lookup"><span data-stu-id="b1671-610">Change to an application-specific behavior through use of the <xref:System.Text.EncoderFallback> and <xref:System.Text.DecoderFallback> classes with the U+FFFD Unicode replacement character.</span></span>  
  
 <span data-ttu-id="b1671-611">例外をスローすると、データ ストリーム エラーが発生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-611">You should throw an exception on any data stream error.</span></span> <span data-ttu-id="b1671-612">アプリが該当する場合は、"throwonerror"フラグを使用してまたはを使用して、<xref:System.Text.EncoderExceptionFallback>と<xref:System.Text.DecoderExceptionFallback>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b1671-612">An app either uses a "throwonerror" flag when applicable or uses the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> classes.</span></span> <span data-ttu-id="b1671-613">単純な文字の置換項目よりも遅くなりますがあり、データの損失や混乱を招くために、最もふさわしいフォールバックは、ほとんどの場合お勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-613">Best fit fallback is often not recommended because it can cause data loss or confusion and is slower than simple character replacements.</span></span> <span data-ttu-id="b1671-614">ANSI エンコーディングでは、既定値は、最適動作です。</span><span class="sxs-lookup"><span data-stu-id="b1671-614">For ANSI encodings, the best fit behavior is the default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-615">次の例では、別のエンコーディングにから文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="b1671-615">The following example converts a string from one encoding to another.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b1671-616">バイト配列は、エンコードされたデータを含むこの例では唯一の種類です。</span><span class="sxs-lookup"><span data-stu-id="b1671-616">The byte[] array is the only type in this example that contains the encoded data.</span></span> <span data-ttu-id="b1671-617">.NET の文字と文字列の型は Unicode、ため、<xref:System.Text.Encoding.GetChars%2A>呼び出しが Unicode にデータをデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-617">The .NET Char and String types are themselves Unicode, so the <xref:System.Text.Encoding.GetChars%2A> call decodes the data back to Unicode.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1671-618"><see cref="T:System.Text.Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b1671-618">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1671-619"><see cref="T:System.Text.Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b1671-619">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-620">派生クラスでは、このコンス トラクターをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="b1671-620">Derived classes override this constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding (int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (codePage As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding(int codePage);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePage"><span data-ttu-id="b1671-621">使用するエンコーディングのコード ページ ID。</span><span class="sxs-lookup"><span data-stu-id="b1671-621">The code page identifier of the preferred encoding.</span></span>  
  
 <span data-ttu-id="b1671-622">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-622">-or-</span></span>  
  
 <span data-ttu-id="b1671-623">既定のエンコーディングを使用する場合は 0。</span><span class="sxs-lookup"><span data-stu-id="b1671-623">0, to use the default encoding.</span></span></param>
        <summary><span data-ttu-id="b1671-624">指定したコード ページに対応する <see cref="T:System.Text.Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b1671-624">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-625">派生クラスでは、このコンス トラクターをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="b1671-625">Derived classes override this constructor.</span></span>  
  
 <span data-ttu-id="b1671-626">派生クラスからこのコンス トラクターへの呼び出しを作成、<xref:System.Text.Encoding>エンコードとデコード操作の両方の最適フォールバックが使用するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-626">Calls to this constructor from a derived class create an <xref:System.Text.Encoding> object that uses best-fit fallback for both encoding and decoding operations.</span></span> <span data-ttu-id="b1671-627">両方の<xref:System.Text.Encoding.DecoderFallback%2A>と<xref:System.Text.Encoding.EncoderFallback%2A>プロパティは読み取り専用と変更できません。</span><span class="sxs-lookup"><span data-stu-id="b1671-627">Both the <xref:System.Text.Encoding.DecoderFallback%2A> and <xref:System.Text.Encoding.EncoderFallback%2A> properties are read-only and cannot be modified.</span></span> <span data-ttu-id="b1671-628">派生したクラスのフォールバック ストラテジを制御する<xref:System.Text.Encoding>を呼び出して、<xref:System.Text.Encoding.%23ctor%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="b1671-628">To control the fallback strategy for a class derived from <xref:System.Text.Encoding>, call the <xref:System.Text.Encoding.%23ctor%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-629"><paramref name="codePage" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-629"><paramref name="codePage" /> is less than zero.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding (int codePage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 codePage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding(int codePage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codePage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codePage"><span data-ttu-id="b1671-630">エンコーディングのコード ページ ID。</span><span class="sxs-lookup"><span data-stu-id="b1671-630">The encoding code page identifier.</span></span></param>
        <param name="encoderFallback"><span data-ttu-id="b1671-631">現在のエンコーディングで文字をエンコードできない場合にエラー処理プロシージャを提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-631">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span></span></param>
        <param name="decoderFallback"><span data-ttu-id="b1671-632">現在のエンコーディングでバイト シーケンスをデコードできない場合にエラー処理プロシージャを提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-632">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span></span></param>
        <summary><span data-ttu-id="b1671-633">指定したコード ページに対応する <see cref="T:System.Text.Encoding" /> クラスの新しいインスタンスを、指定したエンコーダーとデコーダーのフォールバック方法を使用して初期化します。</span><span class="sxs-lookup"><span data-stu-id="b1671-633">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-634">このコンス トラクターは`protected`以外の場合は派生クラスでは、メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="b1671-634">This constructor is `protected`; derived classes override it.</span></span>  
  
 <span data-ttu-id="b1671-635">フォールバックのエンコードおよびデコードの戦略を制御する派生クラスからは、このコンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b1671-635">You call this constructor from a derived class to control the fallback encoding and decoding strategies.</span></span> <span data-ttu-id="b1671-636"><xref:System.Text.Encoding>クラスのコンス トラクターがオブジェクトの作成後に設定するには、エンコーダーまたはデコーダーのフォールバックを許可しない読み取り専用のエンコーディング オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="b1671-636">The <xref:System.Text.Encoding> class constructors create read-only encoding objects that don't allow encoder or decoder fallback to be set after the object is created.</span></span>  
  
 <span data-ttu-id="b1671-637">いずれか`encoderFallback`または`decoderFallback`が null で、対応するフォールバック ストラテジとして最適フォールバックが使用されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-637">If either `encoderFallback` or `decoderFallback` is null, best-fit fallback is used as the corresponding fallback strategy.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-638"><paramref name="codePage" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-638"><paramref name="codePage" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ASCII">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding ASCII { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding ASCII" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.ASCII" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ASCII As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ ASCII { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-639">ASCII (7 ビット) 文字セットのエンコーディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-639">Gets an encoding for the ASCII (7-bit) character set.</span></span></summary>
        <value><span data-ttu-id="b1671-640">ASCII (7 ビット) 文字セットのエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="b1671-640">An  encoding for the ASCII (7-bit) character set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-641">ASCII 文字は、u+0000 U +0 007F ~ から下位 128 Unicode 文字に制限されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-641">ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F.</span></span>  
  
 <span data-ttu-id="b1671-642">アプリの ASCII エンコードを選択する場合は、次を考慮してください。</span><span class="sxs-lookup"><span data-stu-id="b1671-642">When selecting the ASCII encoding for your app, consider the following:</span></span>  
  
-   <span data-ttu-id="b1671-643">ASCII エンコードすることは、通常、ASCII が必要なプロトコルに適しています。</span><span class="sxs-lookup"><span data-stu-id="b1671-643">The ASCII encoding is usually appropriate for protocols that require ASCII.</span></span>  
  
-   <span data-ttu-id="b1671-644">8 ビット エンコーディング (場合によっては、正しくないと呼びます"ASCII") を必要とする場合、utf-8 エンコーディングよりもお勧め、ASCII エンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-644">If you requires 8-bit encoding (which is sometimes incorrectly referred to as "ASCII"), the UTF-8 encoding is recommended over the ASCII encoding.</span></span> <span data-ttu-id="b1671-645">文字 0 ~ 7 f の場合、結果は同じですが utf-8 の使用が表現可能なすべての Unicode 文字の表現を許可することでデータの損失を回避できます。</span><span class="sxs-lookup"><span data-stu-id="b1671-645">For the characters 0-7F, the results are identical, but use of UTF-8 avoids data loss by allowing representation of all Unicode characters that are representable.</span></span> <span data-ttu-id="b1671-646">ASCII エンコーディングは、8 ビットあいまいなため、悪意のある使用することが許可されるが、8 番目のビットについて明確に utf-8 エンコードことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b1671-646">Note that the ASCII encoding has an 8th bit ambiguity that can allow malicious use, but the UTF-8 encoding removes ambiguity about the 8th bit.</span></span>  
  
-   <span data-ttu-id="b1671-647">.NET Framework version 2.0 では、前に、.NET Framework は、8 番目のビットを無視してスプーフィングを許可します。</span><span class="sxs-lookup"><span data-stu-id="b1671-647">Prior to the .NET Framework version 2.0, the .NET Framework allowed spoofing by ignoring the 8th bit.</span></span> <span data-ttu-id="b1671-648">以降、.NET Framework 2.0 では、非 ASCII コード ポイントを代替でデコード中にします。</span><span class="sxs-lookup"><span data-stu-id="b1671-648">Beginning with the .NET Framework 2.0, non-ASCII code points fall back during decoding.</span></span>  
  
 <span data-ttu-id="b1671-649"><xref:System.Text.ASCIIEncoding>このプロパティによって返されるオブジェクトは、アプリの適切な動作をいない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-649">The <xref:System.Text.ASCIIEncoding> object that is returned by this property might not have the appropriate behavior for your app.</span></span> <span data-ttu-id="b1671-650">置換フォールバックを使用して各エンコードできない文字列とデコードできない各バイトを置き換える、疑問符 (?) を ("?") 文字です。</span><span class="sxs-lookup"><span data-stu-id="b1671-650">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</span></span> <span data-ttu-id="b1671-651">代わりに、呼び出すことができます、<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>をインスタンス化するメソッド、<xref:System.Text.ASCIIEncoding>がフォールバックは、いずれかのオブジェクト、<xref:System.Text.EncoderFallbackException>または<xref:System.Text.DecoderFallbackException>、次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b1671-651">Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> method to instantiate an <xref:System.Text.ASCIIEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.ASCII#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.ascii/cs/encoding.ascii2.cs#1)]
 [!code-vb[System.Text.Encoding.ASCII#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.ascii/vb/encoding.ascii2.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="b1671-652">次の例では、ASCII ASCII の範囲外にある文字エンコーディングの効果を示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-652">The following example demonstrates the effect of the ASCII encoding on characters that are outside the ASCII range.</span></span>  
  
 [!code-cpp[System.Text.Encoding.ASCII Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/CPP/ascii.cpp#1)]
 [!code-csharp[System.Text.Encoding.ASCII Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/CS/ascii.cs#1)]
 [!code-vb[System.Text.Encoding.ASCII Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/VB/ascii.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.ASCIIEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
      </Docs>
    </Member>
    <Member MemberName="BigEndianUnicode">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding BigEndianUnicode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding BigEndianUnicode" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.BigEndianUnicode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BigEndianUnicode As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ BigEndianUnicode { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-653">ビッグ エンディアンのバイト順を使用する UTF-16 形式のエンコーディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-653">Gets an encoding for the UTF-16 format that uses the big endian byte order.</span></span></summary>
        <value><span data-ttu-id="b1671-654">ビッグ エンディアンのバイト順を使用する UTF-16 形式のエンコーディング オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-654">An encoding object for the UTF-16 format that uses the big endian byte order.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-655"><xref:System.Text.UnicodeEncoding>このプロパティによって返されるオブジェクトには、アプリの適切な動作はありません。</span><span class="sxs-lookup"><span data-stu-id="b1671-655">The <xref:System.Text.UnicodeEncoding> object that is returned by this property may not have the appropriate behavior for your app.</span></span> <span data-ttu-id="b1671-656">置換フォールバックを使用して各エンコードできない文字列とデコードできない各バイトを置き換える、疑問符 (?) を ("?") 文字です。</span><span class="sxs-lookup"><span data-stu-id="b1671-656">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</span></span> <span data-ttu-id="b1671-657">代わりに、呼び出すことができます、<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>ビッグ エンディアンをインスタンス化するコンス トラクター<xref:System.Text.UnicodeEncoding>がフォールバックは、いずれかのオブジェクト、<xref:System.Text.EncoderFallbackException>または<xref:System.Text.DecoderFallbackException>、次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b1671-657">Instead, you can call the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a big endian <xref:System.Text.UnicodeEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.BigEndianUnicode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CS/bigendianunicode1.cs#2)]
 [!code-vb[System.Text.Encoding.BigEndianUnicode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/VB/bigendianunicode1.vb#2)]  
  
 <span data-ttu-id="b1671-658">返された<xref:System.Text.UnicodeEncoding>オブジェクトが<xref:System.Text.Encoding.BodyName%2A>、 <xref:System.Text.Encoding.HeaderName%2A>、および<xref:System.Text.Encoding.WebName%2A>プロパティで、"unicodeFFFE"という名前を生成します。</span><span class="sxs-lookup"><span data-stu-id="b1671-658">The returned <xref:System.Text.UnicodeEncoding> object has <xref:System.Text.Encoding.BodyName%2A>, <xref:System.Text.Encoding.HeaderName%2A>, and <xref:System.Text.Encoding.WebName%2A> properties, which yield the name "unicodeFFFE".</span></span> <span data-ttu-id="b1671-659">Utf-16 ビッグ エンディアン バイト順マークが 16 進数の FEFF が、名前"unicodeFFFE"リトル エンディアン Windows コンピューターで 16 進数の FFFE とバイト順マークが表示されるために選ばれました。</span><span class="sxs-lookup"><span data-stu-id="b1671-659">Although the UTF-16 big endian byte order mark is hexadecimal FEFF, the name "unicodeFFFE" was chosen because the byte order mark appears as hexadecimal FFFE on little endian Windows computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-660">次の例では、utf-16 エンコーディングをビッグ エンディアン バイト順を使用して、テキスト ファイルを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="b1671-660">The following example reads a text file with a UTF-16 encoding using the big endian byte order.</span></span>  
  
 [!code-cpp[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CPP/bigendianunicode.cpp#1)]
 [!code-csharp[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CS/bigendianunicode.cs#1)]
 [!code-vb[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/VB/bigendianunicode.vb#1)]  
  
 <span data-ttu-id="b1671-661">次の例は、文字配列をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-661">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UnicodeEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
      </Docs>
    </Member>
    <Member MemberName="BodyName">
      <MemberSignature Language="C#" Value="public virtual string BodyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BodyName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.BodyName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BodyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BodyName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-662">派生クラスでオーバーライドされた場合、メール エージェントの Body タグと共に使用できる現在のエンコーディングの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-662">When overridden in a derived class, gets a name for the current encoding that can be used with mail agent body tags.</span></span></summary>
        <value><span data-ttu-id="b1671-663">メール エージェントの Body タグと共に使用できる、現在の <see cref="T:System.Text.Encoding" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="b1671-663">A name for the current <see cref="T:System.Text.Encoding" /> that can be used with mail agent body tags.</span></span>  
  
 <span data-ttu-id="b1671-664">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-664">-or-</span></span>  
  
 <span data-ttu-id="b1671-665">現在の <see cref="T:System.Text.Encoding" /> が使用できない場合は、空の文字列 ("")。</span><span class="sxs-lookup"><span data-stu-id="b1671-665">An empty string (""), if the current <see cref="T:System.Text.Encoding" /> cannot be used.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-666">ボディ名のエンコードを必要がある場合を呼び出す必要があります<xref:System.Text.Encoding.GetEncoding%2A>で、<xref:System.Text.Encoding.BodyName%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-666">If you need an encoding for a body name, you should call <xref:System.Text.Encoding.GetEncoding%2A> with the <xref:System.Text.Encoding.BodyName%2A> property.</span></span> <span data-ttu-id="b1671-667">多くの場合、メソッドの呼び出しで提供されるテスト エンコーディングから別のエンコーディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-667">Often the method retrieves a different encoding from the test encoding furnished in the call.</span></span> <span data-ttu-id="b1671-668">通常、電子メール アプリケーションだけは、そのエンコーディングを取得します。 する必要があります。エンコーディングを記述する必要があるその他のほとんどのアプリケーションを使用する必要があります、<xref:System.Text.Encoding.WebName%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-668">Generally only email applications need to retrieve such an encoding; most other applications that need to describe an encoding should use its <xref:System.Text.Encoding.WebName%2A>.</span></span>  
  
 <span data-ttu-id="b1671-669">場合によっては、値で、<xref:System.Text.Encoding.BodyName%2A>プロパティは、そのエンコーディングを定義する国際標準に対応しています。</span><span class="sxs-lookup"><span data-stu-id="b1671-669">In some cases, the value of the <xref:System.Text.Encoding.BodyName%2A> property corresponds to the international standard that defines that encoding.</span></span> <span data-ttu-id="b1671-670">実装は、その標準に完全に準拠しているわけです。</span><span class="sxs-lookup"><span data-stu-id="b1671-670">This doesn't mean that the implementation complies in full with that standard.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-671">次の例は、エンコーディングごとに異なる名前を取得し、エンコーディングとは異なる 1 つまたは複数の名前を持つを表示<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-671">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b1671-672">表示<xref:System.Text.Encoding.EncodingName%2A>しますが、それに対しては比較されません。</span><span class="sxs-lookup"><span data-stu-id="b1671-672">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1671-673">派生クラスでオーバーライドされた場合、現在の <see cref="T:System.Text.Encoding" /> オブジェクトの簡易コピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="b1671-673">When overridden in a derived class, creates a shallow copy of the current <see cref="T:System.Text.Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="b1671-674">現在の <see cref="T:System.Text.Encoding" /> オブジェクトのコピー。</span><span class="sxs-lookup"><span data-stu-id="b1671-674">A copy of the current <see cref="T:System.Text.Encoding" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-675">クローンが書き込み可能な場合でも、元の<xref:System.Text.Encoding>オブジェクトは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b1671-675">The clone is writable even if the original <xref:System.Text.Encoding> object is read-only.</span></span> <span data-ttu-id="b1671-676">そのため、複製のプロパティを変更できます。</span><span class="sxs-lookup"><span data-stu-id="b1671-676">Therefore, the properties of the clone can be modified.</span></span>  
  
 <span data-ttu-id="b1671-677">オブジェクトのシャロー コピーのみのオブジェクトのコピーであります。</span><span class="sxs-lookup"><span data-stu-id="b1671-677">A shallow copy of an object is a copy of the object only.</span></span> <span data-ttu-id="b1671-678">オブジェクトに他のオブジェクトへの参照が含まれている場合でも、シャロー コピーでは、参照されるオブジェクトのコピーは作成されません。</span><span class="sxs-lookup"><span data-stu-id="b1671-678">If the object contains references to other objects, the shallow copy does not create copies of the referred objects.</span></span> <span data-ttu-id="b1671-679">元のオブジェクトを代わりに参照します。</span><span class="sxs-lookup"><span data-stu-id="b1671-679">It refers to the original objects instead.</span></span> <span data-ttu-id="b1671-680">これに対し、オブジェクトのディープ コピーは、オブジェクトのコピーとそのオブジェクトが直接または間接的に参照するすべてのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="b1671-680">In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodePage">
      <MemberSignature Language="C#" Value="public virtual int CodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CodePage" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.CodePage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CodePage { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-681">派生クラスでオーバーライドされた場合、現在の <see cref="T:System.Text.Encoding" /> のコード ページ ID を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-681">When overridden in a derived class, gets the code page identifier of the current <see cref="T:System.Text.Encoding" />.</span></span></summary>
        <value><span data-ttu-id="b1671-682">現在の <see cref="T:System.Text.Encoding" /> のコード ページ ID。</span><span class="sxs-lookup"><span data-stu-id="b1671-682">The code page identifier of the current <see cref="T:System.Text.Encoding" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1671-683">次の例は、エンコーディングごとに異なる名前を取得し、エンコーディングとは異なる 1 つまたは複数の名前を持つを表示<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-683">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b1671-684">表示<xref:System.Text.Encoding.EncodingName%2A>しますが、それに対しては比較されません。</span><span class="sxs-lookup"><span data-stu-id="b1671-684">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.CodePage" />
        <altmember cref="P:System.Text.Encoding.WindowsCodePage" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1671-685">バイト配列を、あるエンコーディングから別のエンコーディングに変換します。</span><span class="sxs-lookup"><span data-stu-id="b1671-685">Converts a byte array from one encoding to another.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Convert(class System.Text.Encoding srcEncoding, class System.Text.Encoding dstEncoding, unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert (srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Convert(System::Text::Encoding ^ srcEncoding, System::Text::Encoding ^ dstEncoding, cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcEncoding" Type="System.Text.Encoding" />
        <Parameter Name="dstEncoding" Type="System.Text.Encoding" />
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="srcEncoding"><span data-ttu-id="b1671-686"><c>bytes</c> のエンコーディング形式。</span><span class="sxs-lookup"><span data-stu-id="b1671-686">The encoding format of <c>bytes</c>.</span></span></param>
        <param name="dstEncoding"><span data-ttu-id="b1671-687">変換後のエンコーディング形式。</span><span class="sxs-lookup"><span data-stu-id="b1671-687">The target encoding format.</span></span></param>
        <param name="bytes"><span data-ttu-id="b1671-688">変換対象のバイト。</span><span class="sxs-lookup"><span data-stu-id="b1671-688">The bytes to convert.</span></span></param>
        <summary><span data-ttu-id="b1671-689">バイト配列全体を、あるエンコーディングから別のエンコーディングに変換します。</span><span class="sxs-lookup"><span data-stu-id="b1671-689">Converts an entire byte array from one encoding to another.</span></span></summary>
        <returns><span data-ttu-id="b1671-690"><see cref="T:System.Byte" /> を <paramref name="bytes" /> から <paramref name="srcEncoding" /> へ変換した結果を格納する <paramref name="dstEncoding" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-690">An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1671-691">次の例では、ASCII エンコードの文字列に Unicode でエンコードされた文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="b1671-691">The following example converts a Unicode-encoded string to an ASCII-encoded string.</span></span> <span data-ttu-id="b1671-692">ASCII エンコード オブジェクトがによって返されたため、<xref:System.Text.Encoding.ASCII%2A>プロパティは、置換フォールバックを使用し、Pi 文字は、ASCII 文字セットの一部ではない、Pi 文字は、例から出力として疑問符 () に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="b1671-692">Because the ASCII encoding object returned by the <xref:System.Text.Encoding.ASCII%2A> property uses replacement fallback and the Pi character is not part of the ASCII character set, the Pi character is replaced with a question mark, as the output from the example shows.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-693"><paramref name="srcEncoding" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-693"><paramref name="srcEncoding" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="b1671-694">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-694">-or-</span></span>  
  
 <span data-ttu-id="b1671-695"><paramref name="dstEncoding" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-695"><paramref name="dstEncoding" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="b1671-696">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-696">-or-</span></span>  
  
 <span data-ttu-id="b1671-697"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-697"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-698">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-698">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-699">および</span><span class="sxs-lookup"><span data-stu-id="b1671-699">-and-</span></span>  
  
 <span data-ttu-id="b1671-700">**srcEncoding です。**</span><span class="sxs-lookup"><span data-stu-id="b1671-700">**srcEncoding.**</span></span> <span data-ttu-id="b1671-701"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-701"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-702">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-702">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-703">および</span><span class="sxs-lookup"><span data-stu-id="b1671-703">-and-</span></span>  
  
 <span data-ttu-id="b1671-704">**dstEncoding です。**</span><span class="sxs-lookup"><span data-stu-id="b1671-704">**dstEncoding.**</span></span> <span data-ttu-id="b1671-705"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-705"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Convert(class System.Text.Encoding srcEncoding, class System.Text.Encoding dstEncoding, unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert (srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte(), index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Convert(System::Text::Encoding ^ srcEncoding, System::Text::Encoding ^ dstEncoding, cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcEncoding" Type="System.Text.Encoding" />
        <Parameter Name="dstEncoding" Type="System.Text.Encoding" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="srcEncoding"><span data-ttu-id="b1671-706">変換前の配列 <c>bytes</c> のエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="b1671-706">The encoding of the source array, <c>bytes</c>.</span></span></param>
        <param name="dstEncoding"><span data-ttu-id="b1671-707">変換後の配列のエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="b1671-707">The encoding of the output array.</span></span></param>
        <param name="bytes"><span data-ttu-id="b1671-708">変換対象のバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-708">The array of bytes to convert.</span></span></param>
        <param name="index"><span data-ttu-id="b1671-709">変換対象の <c>bytes</c> の最初の要素を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-709">The index of the first element of <c>bytes</c> to convert.</span></span></param>
        <param name="count"><span data-ttu-id="b1671-710">変換するバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-710">The number of bytes to convert.</span></span></param>
        <summary><span data-ttu-id="b1671-711">バイト配列内のバイトの範囲を、あるエンコーディングから別のエンコーディングに変換します。</span><span class="sxs-lookup"><span data-stu-id="b1671-711">Converts a range of bytes in a byte array from one encoding to another.</span></span></summary>
        <returns><span data-ttu-id="b1671-712"><see cref="T:System.Byte" /> に含まれる特定の範囲のバイトを <paramref name="bytes" /> から <paramref name="srcEncoding" /> へ変換した結果が格納されている <paramref name="dstEncoding" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-712">An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-713"><paramref name="srcEncoding" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-713"><paramref name="srcEncoding" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="b1671-714">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-714">-or-</span></span>  
  
 <span data-ttu-id="b1671-715"><paramref name="dstEncoding" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-715"><paramref name="dstEncoding" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="b1671-716">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-716">-or-</span></span>  
  
 <span data-ttu-id="b1671-717"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-717"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-718"><paramref name="index" /> および <paramref name="count" /> がバイト配列内の有効範囲を指定していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-718"><paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-719">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-719">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-720">および</span><span class="sxs-lookup"><span data-stu-id="b1671-720">-and-</span></span>  
  
 <span data-ttu-id="b1671-721">**srcEncoding です。**</span><span class="sxs-lookup"><span data-stu-id="b1671-721">**srcEncoding.**</span></span> <span data-ttu-id="b1671-722"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-722"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-723">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-723">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-724">および</span><span class="sxs-lookup"><span data-stu-id="b1671-724">-and-</span></span>  
  
 <span data-ttu-id="b1671-725">**dstEncoding です。**</span><span class="sxs-lookup"><span data-stu-id="b1671-725">**dstEncoding.**</span></span> <span data-ttu-id="b1671-726"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-726"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DecoderFallback">
      <MemberSignature Language="C#" Value="public System.Text.DecoderFallback DecoderFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.DecoderFallback DecoderFallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.DecoderFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property DecoderFallback As DecoderFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::DecoderFallback ^ DecoderFallback { System::Text::DecoderFallback ^ get(); void set(System::Text::DecoderFallback ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.DecoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-727">現在の <see cref="T:System.Text.DecoderFallback" /> オブジェクトの <see cref="T:System.Text.Encoding" /> オブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b1671-727">Gets or sets the <see cref="T:System.Text.DecoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</span></span></summary>
        <value><span data-ttu-id="b1671-728">現在の <see cref="T:System.Text.Encoding" /> オブジェクトのデコーダー フォールバック オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-728">The decoder fallback object for the current <see cref="T:System.Text.Encoding" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-729"><xref:System.Text.DecoderFallback>オブジェクトは、文字をエンコード済みバイト シーケンスをデコードできないときに呼び出されるエラー ハンドラーを表します。</span><span class="sxs-lookup"><span data-stu-id="b1671-729">The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be decoded into a character.</span></span> <span data-ttu-id="b1671-730">ハンドラーの種類は次のいずれかがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-730">Any one of the following handler types is supported:</span></span>  
  
-   <span data-ttu-id="b1671-731">デコードできないバイトをいくつかの適切な代替文字に置き換え、最適フォールバックのハンドラー。</span><span class="sxs-lookup"><span data-stu-id="b1671-731">A best-fit fallback handler, which replaces bytes that cannot be decoded with some suitable replacement character.</span></span>  
  
-   <span data-ttu-id="b1671-732">置換フォールバック ハンドラー、いくつかの任意の置換文字とデコードできないバイトに置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="b1671-732">A replacement fallback handler, which replaces bytes that cannot be decoded with some arbitrary replacement character.</span></span> <span data-ttu-id="b1671-733">.NET Framework には、1 つの置換フォールバック ハンドラーが含まれています。 <xref:System.Text.DecoderFallback>、疑問符 () とデコードできないバイトを置き換える既定で ("?") 文字です。</span><span class="sxs-lookup"><span data-stu-id="b1671-733">The .NET Framework includes one replacement fallback handler, <xref:System.Text.DecoderFallback>, which by default replaces bytes that cannot be decoded with a question mark ("?") character.</span></span>  
  
-   <span data-ttu-id="b1671-734">例外フォールバック ハンドラーのバイトをデコードできないときに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b1671-734">An exception fallback handler, which throws an exception when bytes cannot be decoded.</span></span> <span data-ttu-id="b1671-735">.NET Framework には、1 つの例外フォールバック ハンドラーが含まれています。 <xref:System.Text.DecoderExceptionFallback>、どのがスローされます、<xref:System.Text.DecoderFallbackException>バイトをデコードできません。</span><span class="sxs-lookup"><span data-stu-id="b1671-735">The .NET Framework includes one exception fallback handler, <xref:System.Text.DecoderExceptionFallback>, which throws a <xref:System.Text.DecoderFallbackException> when bytes cannot be decoded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b1671-736">設定操作の値が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b1671-736">The value in a set operation is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1671-737">現在の <see cref="T:System.Text.Encoding" /> オブジェクトが読み取り専用であるため、値を設定操作に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="b1671-737">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</span></span></exception>
        <altmember cref="T:System.Text.DecoderFallback" />
        <altmember cref="T:System.Text.DecoderFallbackBuffer" />
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding Default" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ Default { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-738">この .NET 実装の既定のエンコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-738">Gets the default encoding for this .NET implementation.</span></span></summary>
        <value><span data-ttu-id="b1671-739">この実装は .NET のエンコーディングの既定値です。</span><span class="sxs-lookup"><span data-stu-id="b1671-739">The default encoding for this .NET implementation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="b1671-740">別のコンピューターは、さまざまなエンコードを使用して、既定値として、1 台のコンピューターで既定のエンコーディングを変更できます。</span><span class="sxs-lookup"><span data-stu-id="b1671-740">Different computers can use different encodings as the default, and the default encoding can change on a single computer.</span></span> <span data-ttu-id="b1671-741">使用する場合、<xref:System.Text.Encoding.Default%2A>エンコーディングのエンコードし、デコードのコンピューター間でストリーム配信モードと同じコンピューター上の別々 の時間に取得されたデータをその可能性がありますいないデータを正しく変換します。</span><span class="sxs-lookup"><span data-stu-id="b1671-741">If you use the <xref:System.Text.Encoding.Default%2A> encoding to encode and decode data streamed between computers or retrieved at different times on the same computer, it may translate that data incorrectly.</span></span> <span data-ttu-id="b1671-742">さらに、によって返される、エンコーディング、<xref:System.Text.Encoding.Default%2A>プロパティでは、最適フォールバックを使用して、サポートされていない文字をコード ページによってサポートされる文字にマップします。</span><span class="sxs-lookup"><span data-stu-id="b1671-742">In addition, the encoding returned by the <xref:System.Text.Encoding.Default%2A> property uses best-fit fallback to map unsupported characters to characters supported by the code page.</span></span> <span data-ttu-id="b1671-743">これらの理由から、既定のエンコーディングを使用することはお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="b1671-743">For these reasons, using the default encoding is not recommended.</span></span> <span data-ttu-id="b1671-744">エンコードされたバイトを正しくデコードは、Unicode エンコーディングなどを使用する必要があります<xref:System.Text.UTF8Encoding>または<xref:System.Text.UnicodeEncoding>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-744">To ensure that encoded bytes are decoded properly, you should use a Unicode encoding, such as <xref:System.Text.UTF8Encoding> or <xref:System.Text.UnicodeEncoding>.</span></span> <span data-ttu-id="b1671-745">同じ形式をエンコードおよびデコードに使用されるようにするのに高レベルのプロトコルを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="b1671-745">You could also use a higher-level protocol to ensure that the same format is used for encoding and decoding.</span></span>  

### <a name="the-default-property-in-the-net-framework"></a><span data-ttu-id="b1671-746">.NET Framework の既定のプロパティ</span><span class="sxs-lookup"><span data-stu-id="b1671-746">The Default property in the .NET Framework</span></span>

<span data-ttu-id="b1671-747">Windows デスクトップで、.NET Framework で、<xref:System.Text.Encoding.Default%2A>プロパティは常に、システムのアクティブなコード ページを取得し、作成、<xref:System.Text.Encoding>それに対応するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-747">In the .NET Framework on the Windows desktop, the <xref:System.Text.Encoding.Default%2A> property always gets the system's active code page and creates a <xref:System.Text.Encoding> object that corresponds to it.</span></span> <span data-ttu-id="b1671-748">現在のコード ページには、ASCII 文字コード ページでと、異なるその他の文字セットが含まれています、ANSI コード ページ、可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-748">The active code page may be an ANSI code page, which includes the ASCII character set along with additional characters that vary by code page.</span></span> <span data-ttu-id="b1671-749">すべて<xref:System.Text.Encoding.Default%2A>ANSI コード ページに基づいてエンコード データが失われる、使用を検討して、<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>代わりにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-749">Because all <xref:System.Text.Encoding.Default%2A> encodings based on ANSI code pages lose data, consider using the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> encoding instead.</span></span> <span data-ttu-id="b1671-750">Utf-8 が一般 U + 00 は U +0 7 f の範囲と同じですが失うことがなく ASCII の範囲外の文字をエンコードすることができます。</span><span class="sxs-lookup"><span data-stu-id="b1671-750">UTF-8 is often identical in the U+00 to U+7F range, but can encode characters outside the ASCII range without loss.</span></span>

## <a name="the-default-property-on-net-core"></a><span data-ttu-id="b1671-751">.NET Core の既定のプロパティ</span><span class="sxs-lookup"><span data-stu-id="b1671-751">The Default property on .NET Core</span></span>

<span data-ttu-id="b1671-752">.NET Core 上、<xref:System.Text.Encoding.Default%2A>プロパティは常に返します、<xref:System.Text.UTF8Encoding>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-752">On .NET Core, the <xref:System.Text.Encoding.Default%2A> property always returns the <xref:System.Text.UTF8Encoding>.</span></span> <span data-ttu-id="b1671-753">実行される .NET Core アプリケーションのすべてのオペレーティング システム (Windows、Linux、および Max OS X) では、utf-8 をサポートします。</span><span class="sxs-lookup"><span data-stu-id="b1671-753">UTF-8 is supported on all the operating systems (Windows, Linux, and Max OS X) on which .NET Core applications run.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncoderFallback">
      <MemberSignature Language="C#" Value="public System.Text.EncoderFallback EncoderFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.EncoderFallback EncoderFallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.EncoderFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property EncoderFallback As EncoderFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::EncoderFallback ^ EncoderFallback { System::Text::EncoderFallback ^ get(); void set(System::Text::EncoderFallback ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.EncoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-754">現在の <see cref="T:System.Text.EncoderFallback" /> オブジェクトの <see cref="T:System.Text.Encoding" /> オブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b1671-754">Gets or sets the <see cref="T:System.Text.EncoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</span></span></summary>
        <value><span data-ttu-id="b1671-755">現在の <see cref="T:System.Text.Encoding" /> オブジェクトのエンコーダー フォールバック オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-755">The encoder fallback object for the current <see cref="T:System.Text.Encoding" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-756"><xref:System.Text.EncoderFallback>オブジェクトは、文字をエンコード済みバイト シーケンスに変換できないときに呼び出されるエラー ハンドラーを表します。</span><span class="sxs-lookup"><span data-stu-id="b1671-756">The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.</span></span> <span data-ttu-id="b1671-757">ハンドラーの種類は次のいずれかがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-757">Any one of the following handler types is supported:</span></span>  
  
-   <span data-ttu-id="b1671-758">エンコードできない文字をいくつかの適切な代替文字に置き換え、最適フォールバックのハンドラー。</span><span class="sxs-lookup"><span data-stu-id="b1671-758">A best-fit fallback handler, which replaces characters that cannot be encoded with some suitable replacement character.</span></span>  
  
-   <span data-ttu-id="b1671-759">置換フォールバック ハンドラー、いくつかの任意の置換文字をエンコードできない文字に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="b1671-759">A replacement fallback handler, which replaces characters that cannot be encoded with some arbitrary replacement character.</span></span> <span data-ttu-id="b1671-760">.NET Framework には、1 つの置換フォールバック ハンドラーが含まれています。 <xref:System.Text.EncoderFallback>、エンコードできない文字を疑問符 () 既定で置き換えます ("?") 文字です。</span><span class="sxs-lookup"><span data-stu-id="b1671-760">The .NET Framework includes one replacement fallback handler, <xref:System.Text.EncoderFallback>, which by default replaces characters that cannot be encoded with a question mark ("?") character.</span></span>  
  
-   <span data-ttu-id="b1671-761">例外フォールバック ハンドラーの文字をエンコードできないときに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b1671-761">An exception fallback handler, which throws an exception when characters cannot be encoded.</span></span> <span data-ttu-id="b1671-762">.NET Framework には、1 つの例外フォールバック ハンドラーが含まれています。 <xref:System.Text.EncoderExceptionFallback>、どのがスローされます、<xref:System.Text.EncoderFallbackException>文字をデコードできません。</span><span class="sxs-lookup"><span data-stu-id="b1671-762">The .NET Framework includes one exception fallback handler, <xref:System.Text.EncoderExceptionFallback>, which throws an <xref:System.Text.EncoderFallbackException> when characters cannot be decoded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b1671-763">設定操作の値が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b1671-763">The value in a set operation is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b1671-764">現在の <see cref="T:System.Text.Encoding" /> オブジェクトが読み取り専用であるため、値を設定操作に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="b1671-764">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</span></span></exception>
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallbackBuffer" />
      </Docs>
    </Member>
    <Member MemberName="EncodingName">
      <MemberSignature Language="C#" Value="public virtual string EncodingName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncodingName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.EncodingName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EncodingName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EncodingName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-765">派生クラスでオーバーライドされた場合、現在のエンコーディングについての記述を、ユーザーが判読できる形式で取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-765">When overridden in a derived class, gets the human-readable description of the current encoding.</span></span></summary>
        <value><span data-ttu-id="b1671-766">ユーザーが判読できる形式の、現在の <see cref="T:System.Text.Encoding" /> の記述。</span><span class="sxs-lookup"><span data-stu-id="b1671-766">The human-readable description of the current <see cref="T:System.Text.Encoding" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-767"><xref:System.Text.Encoding.EncodingName%2A>プロパティが表示を目的とします。</span><span class="sxs-lookup"><span data-stu-id="b1671-767">The <xref:System.Text.Encoding.EncodingName%2A> property is intended for display.</span></span> <span data-ttu-id="b1671-768">渡すことができる名の検索、<xref:System.Text.Encoding.GetEncoding%2A>メソッドを使用して、<xref:System.Text.Encoding.WebName%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-768">To find a name that can be passed to the <xref:System.Text.Encoding.GetEncoding%2A> method, use the <xref:System.Text.Encoding.WebName%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-769">次の例は、エンコーディングごとに異なる名前を取得し、エンコーディングとは異なる 1 つまたは複数の名前を持つを表示<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-769">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b1671-770">表示<xref:System.Text.Encoding.EncodingName%2A>しますが、それに対しては比較されません。</span><span class="sxs-lookup"><span data-stu-id="b1671-770">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.DisplayName" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1671-771">現在のインスタンスと比較する <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-771">The <see cref="T:System.Object" /> to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="b1671-772">指定した <see cref="T:System.Object" /> が、現在のインスタンスと等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b1671-772">Determines whether the specified <see cref="T:System.Object" /> is equal to the current instance.</span></span></summary>
        <returns>
          <span data-ttu-id="b1671-773"><paramref name="value" /> が <see cref="T:System.Text.Encoding" /> のインスタンスで、現在のインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-773"><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.Encoding" /> and is equal to the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-774">2 つのインスタンス<xref:System.Text.Encoding>同じコード ページに対応している場合は、等しいと見なされますされ、その`EncoderFallback`と`DecoderFallback`オブジェクトが等しい。</span><span class="sxs-lookup"><span data-stu-id="b1671-774">Two instances of <xref:System.Text.Encoding> are considered equal if they correspond to the same code page and their `EncoderFallback` and `DecoderFallback` objects are equal.</span></span> <span data-ttu-id="b1671-775">具体的には、派生のコード ページは、すべて 0 のコード ページがあり、通常は、フォールバック`null`(`Nothing` Visual Basic .NET で)。</span><span class="sxs-lookup"><span data-stu-id="b1671-775">In particular, derived code pages all have a code page of 0 and their fallbacks are normally `null` (`Nothing` in Visual Basic .NET).</span></span> <span data-ttu-id="b1671-776">したがって、すべて等しいと見なされます互いにします。</span><span class="sxs-lookup"><span data-stu-id="b1671-776">Thus they are all considered equal to one another.</span></span> <span data-ttu-id="b1671-777">1 つの結果は、ときに<xref:System.Text.Encoding.Equals%2A>ハッシュ テーブルを設定するために使用、すべての派生エンコーディング比較および同じハッシュ テーブルのスロットに分類されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-777">One consequence is that when <xref:System.Text.Encoding.Equals%2A> is used to populate a hash table, all derived encodings compare equal and fall into the same hash table slot.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-778">次の例では、(コード ページによって 1 つ)、もう一方は名前をエンコードするには、同じ 2 つのインスタンスを取得し、等価性を確認します。</span><span class="sxs-lookup"><span data-stu-id="b1671-778">The following example gets two instances of the same encoding (one by codepage and another by name), and checks their equality.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Text.Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1671-779">派生クラスでオーバーライドされた場合、文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-779">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (char[] chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char[] chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (chars As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(cli::array &lt;char&gt; ^ chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="b1671-780">エンコード対象の文字を格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-780">The character array containing the characters to encode.</span></span></param>
        <summary><span data-ttu-id="b1671-781">派生クラスでオーバーライドされた場合、指定した文字配列に格納されているすべての文字をエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-781">When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</span></span></summary>
        <returns><span data-ttu-id="b1671-782">指定した文字配列に格納されているすべての文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-782">The number of bytes produced by encoding all the characters in the specified character array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-783">必要な厳密な配列のサイズを計算する<xref:System.Text.Encoding.GetBytes%2A>結果のバイトを格納する呼び出し、<xref:System.Text.Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-783">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="b1671-784">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-784">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="b1671-785"><xref:System.Text.Encoding.GetByteCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-785">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-786"><xref:System.Text.Encoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.Encoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-786">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="b1671-787"><xref:System.Text.Encoding.GetBytes%2A>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数の変換を処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-787">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-788">複数のバージョンの<xref:System.Text.Encoding.GetByteCount%2A>と<xref:System.Text.Encoding.GetBytes%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-788">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="b1671-789">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-789">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-790">アプリは、コード ページに多くの入力文字をエンコードし、複数の呼び出しを使用して文字を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-790">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="b1671-791">この場合、おそらく必要がありますが保存されている状態を考慮に入れて、呼び出し間で状態を維持するために、<xref:System.Text.Encoder>使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="b1671-791">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="b1671-792">アプリでは、文字列入力を処理する場合は、文字列のバージョンを使用する必要があります、<xref:System.Text.Encoding.GetBytes%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-792">If your app handles string inputs, you should use the string versions of the <xref:System.Text.Encoding.GetBytes%2A> method.</span></span>  
  
-   <span data-ttu-id="b1671-793">Unicode 文字バッファー バージョン<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>を使用して複数の呼び出しで特に、高速なテクニックをいくつかの許可、<xref:System.Text.Encoder>オブジェクトまたは既存のバッファーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b1671-793">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="b1671-794">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-794">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-795">アプリでは、大量のデータを変換する必要がある場合に、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-795">If your app must convert a large amount of data, you should reuse the output buffer.</span></span> <span data-ttu-id="b1671-796">ここで、<xref:System.Text.Encoding.GetBytes%2A>バイト配列をサポートするバージョンをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-796">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-797">使用を検討して、<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-797">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b1671-798">変換メソッドでは、可能な限り多くのデータを変換し、出力バッファーが小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1671-798">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-799">連続的に、ストリームのエンコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-799">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-800">次の例は、文字配列をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-800">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-801"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-801"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-802">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-802">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-803">および</span><span class="sxs-lookup"><span data-stu-id="b1671-803">-and-</span></span>  
  
 <span data-ttu-id="b1671-804"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-804"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(valuetype System.ReadOnlySpan`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (chars As ReadOnlySpan(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(ReadOnlySpan&lt;char&gt; chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b1671-805">エンコード対象の文字のセットを格納している文字列。</span><span class="sxs-lookup"><span data-stu-id="b1671-805">The string containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="b1671-806">派生クラスでオーバーライドされた場合、指定した文字列に含まれる文字をエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-806">When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</span></span></summary>
        <returns><span data-ttu-id="b1671-807">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-807">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-808">必要な厳密な配列のサイズを計算する<xref:System.Text.Encoding.GetBytes%2A>結果のバイトを格納する呼び出し、<xref:System.Text.Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-808">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="b1671-809">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-809">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="b1671-810"><xref:System.Text.Encoding.GetByteCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-810">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-811"><xref:System.Text.Encoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.Encoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-811">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="b1671-812"><xref:System.Text.Encoding.GetBytes%2A>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数の変換を処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-812">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-813">複数のバージョンの<xref:System.Text.Encoding.GetByteCount%2A>と<xref:System.Text.Encoding.GetBytes%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-813">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="b1671-814">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-814">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-815">アプリは、コード ページに多くの入力文字をエンコードし、複数の呼び出しを使用して文字を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-815">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="b1671-816">この場合、おそらく必要がありますが保存されている状態を考慮に入れて、呼び出し間で状態を維持するために、<xref:System.Text.Encoder>使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="b1671-816">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="b1671-817">アプリは、文字列入力値の文字列バージョンを処理する場合<xref:System.Text.Encoding.GetBytes%2A>をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-817">If your app handles string inputs, the string version of <xref:System.Text.Encoding.GetBytes%2A> is recommended.</span></span>  
  
-   <span data-ttu-id="b1671-818">Unicode 文字バッファー バージョン<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>を使用して複数の呼び出しで特に、高速なテクニックをいくつかの許可、<xref:System.Text.Encoder>オブジェクトまたは既存のバッファーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b1671-818">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="b1671-819">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-819">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-820">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-820">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-821">ここで、<xref:System.Text.Encoding.GetBytes%2A>バイト配列をサポートするバージョンをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-821">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-822">使用を検討して、<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-822">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b1671-823">変換メソッドでは、可能な限り多くのデータを変換し、出力バッファーが小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1671-823">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-824">連続的に、ストリームのエンコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-824">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-825">次の例は、文字列または文字列の範囲をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-825">The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-826"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-826"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-827">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-827">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-828">および</span><span class="sxs-lookup"><span data-stu-id="b1671-828">-and-</span></span>  
  
 <span data-ttu-id="b1671-829"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-829"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="b1671-830">エンコードする最初の文字へのポインター。</span><span class="sxs-lookup"><span data-stu-id="b1671-830">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="b1671-831">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-831">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="b1671-832">派生クラスでオーバーライドされた場合、指定した文字ポインターから始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-832">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="b1671-833">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-833">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-834">計算する正確な配列のサイズを<xref:System.Text.Encoding.GetBytes%2A>必要と結果のバイトを保存するを呼び出す必要があります、<xref:System.Text.Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-834">To calculate the exact array size that <xref:System.Text.Encoding.GetBytes%2A> requires to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="b1671-835">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-835">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="b1671-836"><xref:System.Text.Encoding.GetByteCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-836">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-837"><xref:System.Text.Encoding.GetByteCount%28System.Char%2A%2CSystem.Int32%29>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-837">The <xref:System.Text.Encoding.GetByteCount%28System.Char%2A%2CSystem.Int32%29> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> method performs the actual encoding.</span></span> <span data-ttu-id="b1671-838"><xref:System.Text.Encoding.GetBytes%2A>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数の変換を処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-838">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-839">複数のバージョンの<xref:System.Text.Encoding.GetByteCount%2A>と<xref:System.Text.Encoding.GetBytes%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-839">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="b1671-840">これらのメソッドの使用に関する注意事項を次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-840">The following are some considerations for using these methods:</span></span>  
  
-   <span data-ttu-id="b1671-841">アプリは、コード ページに多くの入力文字をエンコードし、複数の呼び出しを使用して文字を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-841">Your app may need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="b1671-842">この場合、おそらく必要がありますが保存されている状態を考慮に入れて、呼び出し間で状態を維持するために、<xref:System.Text.Encoder>使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="b1671-842">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="b1671-843">アプリでは、文字列入力を処理する場合は、文字列形式を使用する必要があります、<xref:System.Text.Encoding.GetBytes%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-843">If your app handles string inputs, you should use the string version of the <xref:System.Text.Encoding.GetBytes%2A> method.</span></span>  
  
-   <span data-ttu-id="b1671-844">Unicode 文字バッファー バージョン<xref:System.Text.Encoding.GetBytes%2A>を使用して複数の呼び出しで特に、高速なテクニックをいくつかの許可、<xref:System.Text.Encoder>オブジェクトまたは既存のバッファーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b1671-844">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%2A> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="b1671-845">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-845">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-846">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-846">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-847">ここで、<xref:System.Text.Encoding.GetBytes%2A>バイト配列をサポートするバージョンをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-847">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-848">使用を検討して、<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-848">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b1671-849">変換メソッドでは、可能な限り多くのデータを変換し、出力バッファーが小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1671-849">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-850">連続的に、ストリームのエンコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-850">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-851"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-851"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-852"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-852"><paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-853">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-853">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-854">および</span><span class="sxs-lookup"><span data-stu-id="b1671-854">-and-</span></span>  
  
 <span data-ttu-id="b1671-855"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-855"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b1671-856">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="b1671-856">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="b1671-857">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="b1671-857">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public abstract int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="b1671-858">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-858">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="b1671-859">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-859">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="b1671-860">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-860">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="b1671-861">派生クラスでオーバーライドされた場合、指定した文字配列に格納されている文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-861">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="b1671-862">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-862">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-863">必要な厳密な配列のサイズを計算する<xref:System.Text.Encoding.GetBytes%2A>結果のバイトを格納する呼び出し、<xref:System.Text.Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-863">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="b1671-864">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-864">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="b1671-865"><xref:System.Text.Encoding.GetByteCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-865">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-866"><xref:System.Text.Encoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.Encoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-866">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="b1671-867"><xref:System.Text.Encoding.GetBytes%2A>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数の変換を処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-867">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-868">複数のバージョンの<xref:System.Text.Encoding.GetByteCount%2A>と<xref:System.Text.Encoding.GetBytes%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-868">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="b1671-869">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-869">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-870">アプリは、コード ページに多くの入力文字をエンコードし、複数の呼び出しを使用して文字を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-870">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="b1671-871">この場合、おそらく必要がありますが保存されている状態を考慮に入れて、呼び出し間で状態を維持するために、<xref:System.Text.Encoder>使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="b1671-871">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="b1671-872">アプリは、文字列入力値の文字列バージョンを処理する場合<xref:System.Text.Encoding.GetBytes%2A>をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-872">If your app handles string inputs, the string version of <xref:System.Text.Encoding.GetBytes%2A> is recommended.</span></span>  
  
-   <span data-ttu-id="b1671-873">Unicode 文字バッファー バージョン<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>を使用して複数の呼び出しで特に、高速なテクニックをいくつかの許可、<xref:System.Text.Encoder>オブジェクトまたは既存のバッファーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b1671-873">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="b1671-874">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-874">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-875">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-875">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-876">ここで、<xref:System.Text.Encoding.GetBytes%2A>バイト配列をサポートするバージョンをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-876">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-877">使用を検討して、<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-877">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b1671-878">変換メソッドでは、可能な限り多くのデータを変換し、出力バッファーが小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1671-878">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-879">連続的に、ストリームのエンコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-879">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-880">次の例は、文字配列から次の 3 つの文字をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-880">The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-881"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-881"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-882"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-882"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1671-883">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-883">-or-</span></span>  
  
 <span data-ttu-id="b1671-884"><paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-884"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-885">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-885">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-886">および</span><span class="sxs-lookup"><span data-stu-id="b1671-886">-and-</span></span>  
  
 <span data-ttu-id="b1671-887"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-887"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public int GetByteCount (string s, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetByteCount(string s, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteCount (s As String, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetByteCount(System::String ^ s, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="index">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1671-888">派生クラスでオーバーライドされた場合、文字のセットをバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-888">When overridden in a derived class, encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (char[] chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(char[] chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As Char()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(cli::array &lt;char&gt; ^ chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="b1671-889">エンコード対象の文字を格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-889">The character array containing the characters to encode.</span></span></param>
        <summary><span data-ttu-id="b1671-890">派生クラスでオーバーライドされた場合、指定した文字配列に格納されているすべての文字をバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-890">When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="b1671-891">指定した文字のセットをエンコードした結果を格納しているバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-891">A byte array containing the results of encoding the specified set of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-892">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-892">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-893"><xref:System.Text.Encoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.Encoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-893">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="b1671-894"><xref:System.Text.Encoding.GetBytes%2A>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数の変換を処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-894">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-895">複数のバージョンの<xref:System.Text.Encoding.GetByteCount%2A>と<xref:System.Text.Encoding.GetBytes%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-895">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="b1671-896">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-896">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-897">アプリは、コード ページに多くの入力文字をエンコードし、複数の呼び出しを使用して文字を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-897">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="b1671-898">この場合、おそらく必要がありますが保存されている状態を考慮に入れて、呼び出し間で状態を維持するために、<xref:System.Text.Encoder>使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="b1671-898">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="b1671-899">(たとえば、サロゲート ペアを含む文字シーケンスから上位サロゲートで終わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-899">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="b1671-900"><xref:System.Text.Encoder>できるので、次の呼び出しの先頭に下位サロゲートで組み合わせることができます、上位サロゲートが記憶されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-900">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="b1671-901"><xref:System.Text.Encoding> 文字に送信されるように、状態を維持することはできません、 <xref:System.Text.EncoderFallback>)。</span><span class="sxs-lookup"><span data-stu-id="b1671-901"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="b1671-902">アプリでは、文字列入力を処理する場合の文字列バージョンを呼び出す必要があります、<xref:System.Text.Encoding.GetBytes%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-902">If your app handles string inputs, you should call the string version of the <xref:System.Text.Encoding.GetBytes%2A> method.</span></span>  
  
-   <span data-ttu-id="b1671-903">Unicode 文字バッファー バージョン<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>を使用して複数の呼び出しで特に、高速なテクニックをいくつかの許可、<xref:System.Text.Encoder>オブジェクトまたは既存のバッファーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b1671-903">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="b1671-904">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-904">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-905">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-905">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-906">ここで、<xref:System.Text.Encoding.GetBytes%2A>バイト配列をサポートするバージョンをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-906">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-907">使用を検討して、<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-907">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b1671-908">変換メソッドでは、可能な限り多くのデータを変換し、出力バッファーが小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1671-908">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-909">連続的に、ストリームのエンコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-909">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-910">次の例は、文字配列をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-910">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-911"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-911"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-912">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-912">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-913">および</span><span class="sxs-lookup"><span data-stu-id="b1671-913">-and-</span></span>  
  
 <span data-ttu-id="b1671-914"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-914"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b1671-915">エンコードする文字を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="b1671-915">The string containing the characters to encode.</span></span></param>
        <summary><span data-ttu-id="b1671-916">派生クラスでオーバーライドされた場合、指定した文字列に含まれるすべての文字をバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-916">When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="b1671-917">指定した文字のセットをエンコードした結果を格納しているバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-917">A byte array containing the results of encoding the specified set of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-918">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-918">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-919"><xref:System.Text.Encoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.Encoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-919">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="b1671-920"><xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数の変換を処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-920">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-921">複数のバージョンの<xref:System.Text.Encoding.GetByteCount%2A>と<xref:System.Text.Encoding.GetBytes%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-921">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="b1671-922">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-922">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-923">アプリは、コード ページに多くの入力文字をエンコードし、複数の呼び出しを使用して文字を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-923">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="b1671-924">この場合、おそらく必要がありますが保存されている状態を考慮に入れて、呼び出し間で状態を維持するために、<xref:System.Text.Encoder>使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="b1671-924">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="b1671-925">(たとえば、サロゲート ペアを含む文字シーケンスから上位サロゲートで終わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-925">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="b1671-926"><xref:System.Text.Encoder>できるので、次の呼び出しの先頭に下位サロゲートで組み合わせることができます、上位サロゲートが記憶されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-926">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="b1671-927"><xref:System.Text.Encoding> 文字に送信されるように、状態を維持することはできません、 <xref:System.Text.EncoderFallback>)。</span><span class="sxs-lookup"><span data-stu-id="b1671-927"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="b1671-928">アプリでは、文字列入力を処理する場合は、文字列形式を使用する必要があります<xref:System.Text.Encoding.GetBytes%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-928">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="b1671-929">Unicode 文字バッファー バージョン<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>を使用して複数の呼び出しで特に、高速なテクニックをいくつかの許可、<xref:System.Text.Encoder>オブジェクトまたは既存のバッファーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b1671-929">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="b1671-930">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-930">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-931">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-931">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-932">ここで、<xref:System.Text.Encoding.GetBytes%2A>バイト配列をサポートするバージョンをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-932">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-933">使用を検討して、<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-933">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b1671-934">変換メソッドでは、可能な限り多くのデータを変換し、出力バッファーが小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1671-934">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-935">連続的に、ストリームのエンコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-935">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-936">次の例は、文字列または文字列の範囲をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-936">The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-937"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-937"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-938">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-938">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-939">および</span><span class="sxs-lookup"><span data-stu-id="b1671-939">-and-</span></span>  
  
 <span data-ttu-id="b1671-940"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-940"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As Char(), index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="b1671-941">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-941">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="b1671-942">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-942">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="b1671-943">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-943">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="b1671-944">派生クラスでオーバーライドされた場合、指定した文字配列に格納されている文字のセットをバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-944">When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="b1671-945">指定した文字のセットをエンコードした結果を格納しているバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-945">A byte array containing the results of encoding the specified set of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-946">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-946">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-947"><xref:System.Text.Encoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.Encoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-947">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="b1671-948"><xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数の変換を処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-948">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-949">複数のバージョンの<xref:System.Text.Encoding.GetByteCount%2A>と<xref:System.Text.Encoding.GetBytes%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-949">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="b1671-950">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-950">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-951">アプリは、コード ページに多くの入力文字をエンコードし、複数の呼び出しを使用して文字を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-951">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="b1671-952">この場合、おそらく必要がありますが保存されている状態を考慮に入れて、呼び出し間で状態を維持するために、<xref:System.Text.Encoder>使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="b1671-952">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="b1671-953">(たとえば、サロゲート ペアを含む文字シーケンスから上位サロゲートで終わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-953">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="b1671-954"><xref:System.Text.Encoder>できるので、次の呼び出しの先頭に下位サロゲートで組み合わせることができます、上位サロゲートが記憶されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-954">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="b1671-955"><xref:System.Text.Encoding> 文字に送信されるように、状態を維持することはできません、 <xref:System.Text.EncoderFallback>)。</span><span class="sxs-lookup"><span data-stu-id="b1671-955"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="b1671-956">アプリでは、文字列入力を処理する場合は、文字列形式を使用する必要があります<xref:System.Text.Encoding.GetBytes%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-956">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="b1671-957">Unicode 文字バッファー バージョン<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>を使用して複数の呼び出しで特に、高速なテクニックをいくつかの許可、<xref:System.Text.Encoder>オブジェクトまたは既存のバッファーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b1671-957">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="b1671-958">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-958">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-959">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-959">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-960">ここで、<xref:System.Text.Encoding.GetBytes%2A>バイト配列をサポートするバージョンをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-960">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-961">使用を検討して、<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-961">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b1671-962">変換メソッドでは、可能な限り多くのデータを変換し、出力バッファーが小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1671-962">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-963">連続的に、ストリームのエンコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-963">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-964">次の例は、文字配列から次の 3 つの文字をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-964">The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-965"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-965"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-966"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-966"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1671-967">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-967">-or-</span></span>  
  
 <span data-ttu-id="b1671-968"><paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-968"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-969">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-969">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-970">および</span><span class="sxs-lookup"><span data-stu-id="b1671-970">-and-</span></span>  
  
 <span data-ttu-id="b1671-971"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-971"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public byte[] GetBytes (string s, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytes(string s, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytes (s As String, index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="index">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="b1671-972">エンコードする最初の文字へのポインター。</span><span class="sxs-lookup"><span data-stu-id="b1671-972">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="b1671-973">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-973">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="b1671-974">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</span><span class="sxs-lookup"><span data-stu-id="b1671-974">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="b1671-975">書き込む最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-975">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="b1671-976">派生クラスでオーバーライドされた場合、指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-976">When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="b1671-977"><paramref name="bytes" /> パラメーターによって示される位置に書き込む実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-977">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-978">計算する正確な配列のサイズを<xref:System.Text.Encoding.GetBytes%2A>必要がありますを結果のバイトを格納する呼び出す、<xref:System.Text.Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-978">To calculate the exact array size that <xref:System.Text.Encoding.GetBytes%2A> requires to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="b1671-979">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-979">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="b1671-980"><xref:System.Text.Encoding.GetByteCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-980">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-981">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>オブジェクトによって提供される、<xref:System.Text.Encoding.GetDecoder%2A>または<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-981">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.Encoding.GetDecoder%2A> or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-982"><xref:System.Text.Encoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.Encoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-982">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="b1671-983"><xref:System.Text.Encoding.GetBytes%2A>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数の変換を処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-983">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-984">複数のバージョンの<xref:System.Text.Encoding.GetByteCount%2A>と<xref:System.Text.Encoding.GetBytes%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-984">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="b1671-985">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-985">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-986">アプリは、コード ページに多くの入力文字をエンコードし、複数の呼び出しを使用して文字を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-986">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="b1671-987">この場合、おそらく必要がありますが保存されている状態を考慮に入れて、呼び出し間で状態を維持するために、<xref:System.Text.Encoder>使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="b1671-987">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="b1671-988">(たとえば、サロゲート ペアを含む文字シーケンスから上位サロゲートで終わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-988">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="b1671-989"><xref:System.Text.Encoder>できるので、次の呼び出しの先頭に下位サロゲートで組み合わせることができます、上位サロゲートが記憶されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-989">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="b1671-990"><xref:System.Text.Encoding> 文字に送信されるように、状態を維持することはできません、 <xref:System.Text.EncoderFallback>)。</span><span class="sxs-lookup"><span data-stu-id="b1671-990"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="b1671-991">アプリでは、文字列入力を処理する場合は、文字列形式を使用する必要があります<xref:System.Text.Encoding.GetBytes%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-991">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="b1671-992">Unicode 文字バッファー バージョン<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>を使用して複数の呼び出しで特に、高速なテクニックをいくつかの許可、<xref:System.Text.Encoder>オブジェクトまたは既存のバッファーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b1671-992">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="b1671-993">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-993">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-994">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-994">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-995">ここで、<xref:System.Text.Encoding.GetBytes%2A>バイト配列をサポートするバージョンをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-995">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-996">使用を検討して、<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-996">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b1671-997">変換メソッドでは、可能な限り多くのデータを変換し、出力バッファーが小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1671-997">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-998">連続的に、ストリームのエンコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-998">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-999"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-999"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="b1671-1000">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1000">-or-</span></span>  
  
 <span data-ttu-id="b1671-1001"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1001"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1002"><paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1002"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1671-1003"><paramref name="byteCount" /> が結果のバイト数より少なくなっています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1003"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-1004">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1004">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1005">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1005">-and-</span></span>  
  
 <span data-ttu-id="b1671-1006"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1006"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b1671-1007">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1007">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="b1671-1008">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1008">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="b1671-1009">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1009">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="b1671-1010">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1010">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="b1671-1011">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1011">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="b1671-1012">結果のバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1012">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="b1671-1013">結果のバイト シーケンスを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1013">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="b1671-1014">派生クラスでオーバーライドされた場合、指定した文字配列に格納されている文字のセットを、指定したバイト配列にエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1014">When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="b1671-1015"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1015">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1016">必要な厳密な配列のサイズを計算する<xref:System.Text.Encoding.GetBytes%2A>結果のバイトを保存するを呼び出す必要があります、<xref:System.Text.Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1016">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="b1671-1017">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1017">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="b1671-1018"><xref:System.Text.Encoding.GetByteCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1018">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-1019">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1019">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-1020"><xref:System.Text.Encoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.Encoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1020">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="b1671-1021"><xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数の変換を処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1021">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1022">複数のバージョンの<xref:System.Text.Encoding.GetByteCount%2A>と<xref:System.Text.Encoding.GetBytes%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1022">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="b1671-1023">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1023">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-1024">アプリは、コード ページに多くの入力文字をエンコードし、複数の呼び出しを使用して文字を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1024">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="b1671-1025">この場合、おそらく必要がありますが保存されている状態を考慮に入れて、呼び出し間で状態を維持するために、<xref:System.Text.Encoder>使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1025">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="b1671-1026">(たとえば、サロゲート ペアを含む文字シーケンスから上位サロゲートで終わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1026">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="b1671-1027"><xref:System.Text.Encoder>できるので、次の呼び出しの先頭に下位サロゲートで組み合わせることができます、上位サロゲートが記憶されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1027">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="b1671-1028"><xref:System.Text.Encoding> 文字に送信されるように、状態を維持することはできません、 <xref:System.Text.EncoderFallback>)。</span><span class="sxs-lookup"><span data-stu-id="b1671-1028"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="b1671-1029">アプリでは、文字列入力を処理する場合は、文字列形式を使用する必要があります<xref:System.Text.Encoding.GetBytes%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1029">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="b1671-1030">Unicode 文字バッファー バージョン<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>を使用して複数の呼び出しで特に、高速なテクニックをいくつかの許可、<xref:System.Text.Encoder>オブジェクトまたは既存のバッファーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1030">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="b1671-1031">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1031">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-1032">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1032">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-1033">ここで、<xref:System.Text.Encoding.GetBytes%2A>バイト配列をサポートするバージョンをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1033">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-1034">使用を検討して、<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1034">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b1671-1035">変換メソッドでは、可能な限り多くのデータを変換し、出力バッファーが小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1035">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-1036">連続的に、ストリームのエンコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1036">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1037">次の例は、文字配列から次の 3 つの文字をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1037">The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1038"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1038"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="b1671-1039">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1039">-or-</span></span>  
  
 <span data-ttu-id="b1671-1040"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1040"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1041"><paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1041"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1671-1042">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1042">-or-</span></span>  
  
 <span data-ttu-id="b1671-1043"><paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1043"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
 <span data-ttu-id="b1671-1044">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1044">-or-</span></span>  
  
 <span data-ttu-id="b1671-1045"><paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1045"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1671-1046"><paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1046"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-1047">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1047">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1048">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1048">-and-</span></span>  
  
 <span data-ttu-id="b1671-1049"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1049"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b1671-1050">エンコード対象の文字のセットを格納している文字列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1050">The string containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="b1671-1051">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1051">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="b1671-1052">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1052">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="b1671-1053">結果のバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1053">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="b1671-1054">結果のバイト シーケンスを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1054">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="b1671-1055">派生クラスでオーバーライドされた場合、指定した文字列に含まれる文字のセットを、指定したバイト配列にエンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1055">When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="b1671-1056"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1056">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1057">必要な厳密な配列のサイズを計算する<xref:System.Text.Encoding.GetBytes%2A>結果のバイトを保存するを呼び出す必要があります、<xref:System.Text.Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1057">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="b1671-1058">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1058">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="b1671-1059"><xref:System.Text.Encoding.GetByteCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1059">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-1060">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1060">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-1061"><xref:System.Text.Encoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.Encoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1061">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="b1671-1062"><xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数の変換を処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1062">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1063">複数のバージョンの<xref:System.Text.Encoding.GetByteCount%2A>と<xref:System.Text.Encoding.GetBytes%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1063">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="b1671-1064">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1064">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-1065">アプリは、コード ページに多くの入力文字をエンコードし、複数の呼び出しを使用して文字を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1065">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="b1671-1066">この場合、おそらく必要がありますが保存されている状態を考慮に入れて、呼び出し間で状態を維持するために、<xref:System.Text.Encoder>使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1066">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="b1671-1067">(たとえば、サロゲート ペアを含む文字シーケンスから上位サロゲートで終わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1067">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="b1671-1068"><xref:System.Text.Encoder>できるので、次の呼び出しの先頭に下位サロゲートで組み合わせることができます、上位サロゲートが記憶されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1068">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="b1671-1069"><xref:System.Text.Encoding> 文字に送信されるように、状態を維持することはできません、 <xref:System.Text.EncoderFallback>)。</span><span class="sxs-lookup"><span data-stu-id="b1671-1069"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="b1671-1070">アプリでは、文字列入力を処理する場合は、文字列形式を使用する必要があります<xref:System.Text.Encoding.GetBytes%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1070">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="b1671-1071">Unicode 文字バッファー バージョン<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>を使用して複数の呼び出しで特に、高速なテクニックをいくつかの許可、<xref:System.Text.Encoder>オブジェクトまたは既存のバッファーに挿入します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1071">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="b1671-1072">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1072">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-1073">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1073">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-1074">ここで、<xref:System.Text.Encoding.GetBytes%2A>バイト配列をサポートするバージョンをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1074">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-1075">使用を検討して、<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1075">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b1671-1076">変換メソッドでは、可能な限り多くのデータを変換し、出力バッファーが小さすぎる場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1076">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-1077">連続的に、ストリームのエンコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1077">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1078">次の例は、文字列または文字列の範囲をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1078">The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1079"><paramref name="s" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1079"><paramref name="s" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="b1671-1080">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1080">-or-</span></span>  
  
 <span data-ttu-id="b1671-1081"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1081"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1082"><paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1082"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1671-1083">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1083">-or-</span></span>  
  
 <span data-ttu-id="b1671-1084"><paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1084"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
 <span data-ttu-id="b1671-1085">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1085">-or-</span></span>  
  
 <span data-ttu-id="b1671-1086"><paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1086"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1671-1087"><paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1087"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-1088">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1088">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1089">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1089">-and-</span></span>  
  
 <span data-ttu-id="b1671-1090"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1090"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1671-1091">派生クラスでオーバーライドされた場合、バイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1091">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCharCount (bytes As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b1671-1092">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1092">The byte array containing the sequence of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="b1671-1093">派生クラスでオーバーライドされた場合、指定したバイト配列に格納されているすべてのバイトをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1093">When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="b1671-1094">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1094">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1095">必要な厳密な配列のサイズを計算する<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29>結果の文字を格納する必要がありますを使用する、<xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1095">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method.</span></span> <span data-ttu-id="b1671-1096">配列の最大サイズを計算する必要がありますを使用する、<xref:System.Text.Encoding.GetMaxCharCount%28System.Int32%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1096">To calculate the maximum array size, you should use the <xref:System.Text.Encoding.GetMaxCharCount%28System.Int32%29> method.</span></span> <span data-ttu-id="b1671-1097"><xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1097">The <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-1098"><xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29>メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1098">The <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method determines how many characters result in decoding a sequence of bytes, and the  <xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29> method performs the actual decoding.</span></span> <span data-ttu-id="b1671-1099"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数のパスを処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1099">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1100">複数のバージョンの<xref:System.Text.Encoding.GetCharCount%2A>と<xref:System.Text.Encoding.GetChars%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1100">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="b1671-1101">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1101">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-1102">アプリは、コード ページから複数の入力バイトをデコードし、複数の呼び出しを使用してバイトを処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1102">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="b1671-1103">この場合、おそらく、呼び出し間で状態を維持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1103">In this case, you probably need to maintain state between calls.</span></span>  
  
-   <span data-ttu-id="b1671-1104">使用する必要があります、アプリは、文字列の出力を処理する場合、<xref:System.Text.Encoding.GetString%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1104">If your app handles string outputs, you should use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="b1671-1105">若干低下しますが、このメソッドは、文字列の長さを確認し、バッファーを割り当てる必要があります、ため、その結果が<xref:System.String>型を優先します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1105">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="b1671-1106">バイトのバージョンの<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>により、特に大きなバッファーを複数回呼び出すと、高速なテクニックをいくつか。</span><span class="sxs-lookup"><span data-stu-id="b1671-1106">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="b1671-1107">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1107">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-1108">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1108">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-1109">ここで、[\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > バージョンをサポートしていますが、文字バッファーを出力するをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1109">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-1110">使用を検討して、<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1110">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b1671-1111">変換メソッドは、可能なデータを変換し、出力バッファーが小さすぎる場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1111">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-1112">継続的なストリームのデコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1112">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1113">次の例では、(バイト単位) の配列に文字列をエンコードし、その文字の配列にバイトをデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1113">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1114"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1114"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1115">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1115">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1116">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1116">-and-</span></span>  
  
 <span data-ttu-id="b1671-1117"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1117"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCharCount (bytes As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b1671-1118">デコードする最初のバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="b1671-1118">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="b1671-1119">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1119">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="b1671-1120">派生クラスでオーバーライドされた場合、指定したバイト ポインターから始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1120">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="b1671-1121">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1121">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1122">計算する正確な配列のサイズを<xref:System.Text.Encoding.GetChars%2A>必要があります文字を格納する、結果として得られる、使用する必要があります、<xref:System.Text.Encoding.GetCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1122">To calculate the exact array size that <xref:System.Text.Encoding.GetChars%2A> requires to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="b1671-1123">配列の最大サイズを計算するには、使用、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1123">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="b1671-1124"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1124">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-1125"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、<xref:System.Text.Encoding.GetChars%2A>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1125">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="b1671-1126"><xref:System.Text.Encoding.GetChars%2A>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数のパスを処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1126">The <xref:System.Text.Encoding.GetChars%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1127">複数のバージョンの<xref:System.Text.Encoding.GetCharCount%2A>と<xref:System.Text.Encoding.GetChars%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1127">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="b1671-1128">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1128">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-1129">アプリは、コード ページから複数の入力バイトをデコードし、複数の呼び出しを使用してバイトを処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1129">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="b1671-1130">この場合、おそらく、呼び出し間で状態を維持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1130">In this case, you probably need to maintain state between calls.</span></span>  
  
-   <span data-ttu-id="b1671-1131">使用するアプリでは、文字列の出力を処理する場合をお勧め、<xref:System.Text.Encoding.GetString%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1131">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="b1671-1132">若干低下しますが、このメソッドは、文字列の長さを確認し、バッファーを割り当てる必要があります、ため、その結果が<xref:System.String>型を優先します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1132">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="b1671-1133">バイトのバージョンの<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>により、特に大きなバッファーを複数回呼び出すと、高速なテクニックをいくつか。</span><span class="sxs-lookup"><span data-stu-id="b1671-1133">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="b1671-1134">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1134">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-1135">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1135">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-1136">ここで、[\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > バージョンをサポートしていますが、文字バッファーを出力するをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1136">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-1137">使用を検討して、<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1137">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b1671-1138">変換メソッドは、可能なデータを変換し、出力バッファーが小さすぎる場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1138">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-1139">継続的なストリームのデコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1139">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1140"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1140"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1141"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1141"><paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1142">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1142">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1143">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1143">-and-</span></span>  
  
 <span data-ttu-id="b1671-1144"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1144"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b1671-1145">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1145">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="b1671-1146">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1146">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public abstract int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b1671-1147">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1147">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="b1671-1148">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1148">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="b1671-1149">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1149">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="b1671-1150">派生クラスでオーバーライドされた場合、指定したバイト配列に格納されているバイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1150">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="b1671-1151">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1151">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1152">必要な厳密な配列のサイズを計算する<xref:System.Text.Encoding.GetChars%2A>結果の文字を格納する必要がありますを使用する、<xref:System.Text.Encoding.GetCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1152">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="b1671-1153">配列の最大サイズを計算するには、使用、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1153">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="b1671-1154"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1154">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-1155"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、<xref:System.Text.Encoding.GetChars%2A>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1155">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="b1671-1156"><xref:System.Text.Encoding.GetChars%2A>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数のパスを処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1156">The <xref:System.Text.Encoding.GetChars%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1157">複数のバージョンの<xref:System.Text.Encoding.GetCharCount%2A>と<xref:System.Text.Encoding.GetChars%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1157">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="b1671-1158">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1158">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-1159">アプリは、コード ページから複数の入力バイトをデコードし、複数の呼び出しを使用してバイトを処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1159">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="b1671-1160">この場合、おそらく、呼び出し間で状態を維持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1160">In this case, you probably need to maintain state between calls.</span></span>  
  
-   <span data-ttu-id="b1671-1161">使用するアプリでは、文字列の出力を処理する場合をお勧め、<xref:System.Text.Encoding.GetString%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1161">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="b1671-1162">若干低下しますが、このメソッドは、文字列の長さを確認し、バッファーを割り当てる必要があります、ため、その結果が<xref:System.String>型を優先します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1162">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="b1671-1163">バイトのバージョンの<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>により、特に大きなバッファーを複数回呼び出すと、高速なテクニックをいくつか。</span><span class="sxs-lookup"><span data-stu-id="b1671-1163">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="b1671-1164">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1164">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-1165">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1165">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-1166">ここで、[\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > バージョンをサポートしていますが、文字バッファーを出力するをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1166">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-1167">使用を検討して、<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1167">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b1671-1168">変換メソッドは、可能なデータを変換し、出力バッファーが小さすぎる場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1168">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-1169">継続的なストリームのデコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1169">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1170">次の例では、別のエンコーディングにから文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1170">The following example converts a string from one encoding to another.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 <span data-ttu-id="b1671-1171">次の例では、(バイト単位) の配列に文字列をエンコードし、その文字の配列にバイトの範囲をデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1171">The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1172"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1172"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1173"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1173"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1671-1174">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1174">-or-</span></span>  
  
 <span data-ttu-id="b1671-1175"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1175"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1176">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1176">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1177">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1177">-and-</span></span>  
  
 <span data-ttu-id="b1671-1178"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1178"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1671-1179">派生クラスでオーバーライドされた場合、バイト シーケンスを文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1179">When overridden in a derived class, decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual char[] GetChars (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] GetChars(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As Byte()) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;char&gt; ^ GetChars(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b1671-1180">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1180">The byte array containing the sequence of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="b1671-1181">派生クラスでオーバーライドされた場合、指定したバイト配列に格納されているすべてのバイトを文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1181">When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</span></span></summary>
        <returns><span data-ttu-id="b1671-1182">指定したバイト シーケンスのデコード結果が格納された文字配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1182">A character array containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1183"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 入力バイト シーケンスから文字を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1183"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="b1671-1184"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 異なる<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>ため<xref:System.Text.Encoding>、不連続の変換が必要ですが中に<xref:System.Text.Decoder>1 つの入力ストリームに複数のパスに適しています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1184"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1185">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1185">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-1186">**注**バイト配列など、任意のバイナリ データではなく、Unicode 文字を操作するために、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1186">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="b1671-1187">テキストを任意のバイナリ データをエンコードする必要がある場合などのメソッドによって実装される uuencode などのプロトコルを使用する必要があります<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1187">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b1671-1188"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、<xref:System.Text.Encoding.GetChars%2A>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1188">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="b1671-1189"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数のパスを処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1189">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1190">複数のバージョンの<xref:System.Text.Encoding.GetCharCount%2A>と<xref:System.Text.Encoding.GetChars%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1190">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="b1671-1191">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1191">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-1192">アプリは、コード ページから複数の入力バイトをデコードし、複数の呼び出しを使用してバイトを処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1192">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="b1671-1193">ここでは、おそらく必要があります、呼び出し間で状態を維持するためにバッチで処理されるときに、バイト シーケンスを中断することがあるためです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1193">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="b1671-1194">(たとえば、iso-2022 シフト シーケンスの一部がなる可能性がありますいずれかの<xref:System.Text.Encoding.GetChars%2A>を呼び出すし、次の先頭から継続<xref:System.Text.Encoding.GetChars%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1194">(For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="b1671-1195"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> その不完全なシーケンスのフォールバックによって呼び出されますが、<xref:System.Text.Decoder>は、次の呼び出しのシーケンスに注意してください)。</span><span class="sxs-lookup"><span data-stu-id="b1671-1195"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="b1671-1196">使用するアプリでは、文字列の出力を処理する場合をお勧め、<xref:System.Text.Encoding.GetString%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1196">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="b1671-1197">若干低下しますが、このメソッドは、文字列の長さを確認し、バッファーを割り当てる必要があります、ため、その結果が<xref:System.String>型を優先します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1197">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="b1671-1198">バイトのバージョンの<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>により、特に大きなバッファーを複数回呼び出すと、高速なテクニックをいくつか。</span><span class="sxs-lookup"><span data-stu-id="b1671-1198">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="b1671-1199">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1199">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-1200">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1200">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-1201">ここで、[\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > バージョンをサポートしていますが、文字バッファーを出力するをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1201">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-1202">使用を検討して、<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1202">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b1671-1203">変換メソッドは、可能なデータを変換し、出力バッファーが小さすぎる場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1203">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-1204">継続的なストリームのデコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1204">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1205">次の例では、(バイト単位) の配列に文字列をエンコードし、その文字の配列にバイトをデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1205">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1206"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1206"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1207">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1207">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1208">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1208">-and-</span></span>  
  
 <span data-ttu-id="b1671-1209"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1209"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(ReadOnlySpan&lt;System::Byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual char[] GetChars (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] GetChars(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As Byte(), index As Integer, count As Integer) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;char&gt; ^ GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b1671-1210">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1210">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="b1671-1211">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1211">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="b1671-1212">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1212">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="b1671-1213">派生クラスでオーバーライドされた場合、指定したバイト配列に格納されているバイト シーケンスを文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1213">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</span></span></summary>
        <returns><span data-ttu-id="b1671-1214">指定したバイト シーケンスのデコード結果が格納された文字配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1214">A character array containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1215"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 入力バイト シーケンスから文字を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1215"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="b1671-1216"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 異なる<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>ため<xref:System.Text.Encoding>、不連続の変換が必要ですが中に<xref:System.Text.Decoder>1 つの入力ストリームに複数のパスに適しています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1216"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1217">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1217">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-1218">**注**バイト配列など、任意のバイナリ データではなく、Unicode 文字を操作するために、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1218">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="b1671-1219">テキストを任意のバイナリ データをエンコードする必要がある場合などのメソッドによって実装される uuencode などのプロトコルを使用する必要があります<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1219">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b1671-1220"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、<xref:System.Text.Encoding.GetChars%2A>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1220">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="b1671-1221"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数のパスを処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1221">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1222">複数のバージョンの<xref:System.Text.Encoding.GetCharCount%2A>と<xref:System.Text.Encoding.GetChars%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1222">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="b1671-1223">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1223">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-1224">アプリは、コード ページから複数の入力バイトをデコードし、複数の呼び出しを使用してバイトを処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1224">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="b1671-1225">ここでは、おそらく必要があります、呼び出し間で状態を維持するためにバッチで処理されるときに、バイト シーケンスを中断することがあるためです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1225">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="b1671-1226">(たとえば、iso-2022 シフト シーケンスの一部がなる可能性がありますいずれかの<xref:System.Text.Encoding.GetChars%2A>を呼び出すし、次の先頭から継続<xref:System.Text.Encoding.GetChars%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1226">(For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="b1671-1227"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> その不完全なシーケンスのフォールバックによって呼び出されますが、<xref:System.Text.Decoder>は、次の呼び出しのシーケンスに注意してください)。</span><span class="sxs-lookup"><span data-stu-id="b1671-1227"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="b1671-1228">使用するアプリでは、文字列の出力を処理する場合をお勧め、<xref:System.Text.Encoding.GetString%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1228">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="b1671-1229">若干低下しますが、このメソッドは、文字列の長さを確認し、バッファーを割り当てる必要があります、ため、その結果が<xref:System.String>型を優先します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1229">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="b1671-1230">バイトのバージョンの<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>により、特に大きなバッファーを複数回呼び出すと、高速なテクニックをいくつか。</span><span class="sxs-lookup"><span data-stu-id="b1671-1230">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="b1671-1231">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1231">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-1232">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1232">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-1233">ここで、[\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > バージョンをサポートしていますが、文字バッファーを出力するをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1233">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-1234">使用を検討して、<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1234">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b1671-1235">変換メソッドは、可能なデータを変換し、出力バッファーが小さすぎる場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1235">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-1236">継続的なストリームのデコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1236">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1237">次の例では、(バイト単位) の配列に文字列をエンコードし、その文字の配列にバイトの範囲をデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1237">The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1238"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1238"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1239"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1239"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1671-1240">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1240">-or-</span></span>  
  
 <span data-ttu-id="b1671-1241"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1241"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1242">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1242">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1243">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1243">-and-</span></span>  
  
 <span data-ttu-id="b1671-1244"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1244"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b1671-1245">デコードする最初のバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="b1671-1245">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="b1671-1246">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1246">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="b1671-1247">結果の文字セットの書き込みを開始する位置へのポインター。</span><span class="sxs-lookup"><span data-stu-id="b1671-1247">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="b1671-1248">書き込む文字の最大数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1248">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="b1671-1249">派生クラスでオーバーライドされた場合、指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1249">When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="b1671-1250"><paramref name="chars" /> パラメーターによって示される位置に書き込む実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1250">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1251">計算する正確な配列のサイズを<xref:System.Text.Encoding.GetChars%2A>必要があります文字を格納する、結果として得られる、使用する必要があります、<xref:System.Text.Encoding.GetCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1251">To calculate the exact array size that <xref:System.Text.Encoding.GetChars%2A> requires to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="b1671-1252">配列の最大サイズを計算するには、使用、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1252">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="b1671-1253"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1253">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-1254"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 入力バイト シーケンスから文字を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1254"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="b1671-1255"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> 異なる<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>ため<xref:System.Text.Encoding>、不連続の変換が必要ですが中に<xref:System.Text.Decoder>1 つの入力ストリームに複数のパスに適しています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1255"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1256">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>オブジェクトによって提供される、<xref:System.Text.Encoding.GetDecoder%2A>または<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1256">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.Encoding.GetDecoder%2A> or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-1257">**注**バイト配列など、任意のバイナリ データではなく、Unicode 文字を操作するために、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1257">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="b1671-1258">テキストを任意のバイナリ データをエンコードする必要がある場合などのメソッドによって実装される uuencode などのプロトコルを使用する必要があります<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1258">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b1671-1259"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、<xref:System.Text.Encoding.GetChars%2A>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1259">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="b1671-1260"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数のパスを処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1260">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1261">複数のバージョンの<xref:System.Text.Encoding.GetCharCount%2A>と<xref:System.Text.Encoding.GetChars%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1261">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="b1671-1262">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1262">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-1263">アプリは、コード ページから複数の入力バイトをデコードし、複数の呼び出しを使用してバイトを処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1263">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="b1671-1264">ここでは、おそらく必要があります、呼び出し間で状態を維持するためにバッチで処理されるときに、バイト シーケンスを中断することがあるためです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1264">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="b1671-1265">(たとえば、iso-2022 シフト シーケンスの一部がなる可能性がありますいずれかの<xref:System.Text.Encoding.GetChars%2A>を呼び出すし、次の先頭から継続<xref:System.Text.Encoding.GetChars%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1265">(For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="b1671-1266"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> その不完全なシーケンスのフォールバックによって呼び出されますが、<xref:System.Text.Decoder>は、次の呼び出しのシーケンスに注意してください)。</span><span class="sxs-lookup"><span data-stu-id="b1671-1266"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="b1671-1267">アプリは、文字列の出力を処理する場合、<xref:System.Text.Encoding.GetString%2A>方法はお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1267">If your app handles string outputs, the <xref:System.Text.Encoding.GetString%2A> method is recommended.</span></span> <span data-ttu-id="b1671-1268">若干低下しますが、このメソッドは、文字列の長さを確認し、バッファーを割り当てる必要があります、ため、その結果が<xref:System.String>型を優先します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1268">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="b1671-1269">バイトのバージョンの<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>により、特に大きなバッファーを複数回呼び出すと、高速なテクニックをいくつか。</span><span class="sxs-lookup"><span data-stu-id="b1671-1269">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="b1671-1270">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1270">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-1271">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1271">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-1272">ここで、[\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > バージョンをサポートしていますが、文字バッファーを出力するをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1272">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-1273">使用を検討して、<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1273">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b1671-1274">変換メソッドは、可能なデータを変換し、出力バッファーが小さすぎる場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1274">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-1275">継続的なストリームのデコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1275">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1276"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1276"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="b1671-1277">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1277">-or-</span></span>  
  
 <span data-ttu-id="b1671-1278"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1278"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1279"><paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1279"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1671-1280"><paramref name="charCount" /> が結果の文字数より少なくなっています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1280"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1281">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1281">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1282">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1282">-and-</span></span>  
  
 <span data-ttu-id="b1671-1283"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1283"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b1671-1284">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1284">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="b1671-1285">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1285">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b1671-1286">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1286">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="b1671-1287">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1287">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="b1671-1288">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1288">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="b1671-1289">結果の文字のセットを格納する文字配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1289">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="b1671-1290">結果の文字のセットを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1290">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="b1671-1291">派生クラスでオーバーライドされた場合、指定したバイト配列に格納されているバイト シーケンスを、指定した文字配列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1291">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="b1671-1292"><paramref name="chars" /> に書き込まれた実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1292">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1293">必要な厳密な配列のサイズを計算する<xref:System.Text.Encoding.GetChars%2A>結果の文字を格納する必要がありますを使用する、<xref:System.Text.Encoding.GetCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1293">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="b1671-1294">配列の最大サイズを計算するには、使用、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1294">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="b1671-1295"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1295">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-1296">[\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType > 済み入力バイト シーケンスから文字を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1296">[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="b1671-1297">[\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType > とは異なる<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>ため<xref:System.Text.Encoding>、不連続の変換が必要ですが、<xref:System.Text.Decoder>に適しています1 つの入力ストリームに複数のパス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1297">[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1298">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1298">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-1299">**注**バイト配列など、任意のバイナリ データではなく、Unicode 文字を操作するために、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1299">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="b1671-1300">テキストを任意のバイナリ データをエンコードする必要がある場合などのメソッドによって実装される uuencode などのプロトコルを使用する必要があります<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1300">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b1671-1301"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、<xref:System.Text.Encoding.GetChars%2A>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1301">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="b1671-1302"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>メソッドの対照的に、不連続の変換が必要ですが、<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドで、1 つの入力ストリームに複数のパスを処理します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1302">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="b1671-1303">複数のバージョンの<xref:System.Text.Encoding.GetCharCount%2A>と<xref:System.Text.Encoding.GetChars%2A>はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1303">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="b1671-1304">プログラミングの考慮事項を使用してこれらのメソッドを次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1304">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="b1671-1305">アプリは、コード ページから複数の入力バイトをデコードし、複数の呼び出しを使用してバイトを処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1305">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="b1671-1306">ここでは、おそらく必要があります、呼び出し間で状態を維持するためにバッチで処理されるときに、バイト シーケンスを中断することがあるためです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1306">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="b1671-1307">(たとえば、iso-2022 シフト シーケンスの一部がなる可能性がありますいずれかの [\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%2A > を呼び出すし、次の先頭から継続 [\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%2A > を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1307">(For example, part of an ISO-2022 shift sequence may end one [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="b1671-1308">[\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType > その不完全なシーケンスのフォールバックによって呼び出されますが、<xref:System.Text.Decoder>は、次の呼び出しのシーケンスに注意してください)。</span><span class="sxs-lookup"><span data-stu-id="b1671-1308">[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="b1671-1309">アプリは、文字列の出力を処理する場合、<xref:System.Text.Encoding.GetString%2A>方法はお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1309">If your app handles string outputs, the <xref:System.Text.Encoding.GetString%2A> method is recommended.</span></span> <span data-ttu-id="b1671-1310">若干低下しますが、このメソッドは、文字列の長さを確認し、バッファーを割り当てる必要があります、ため、その結果が<xref:System.String>型を優先します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1310">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="b1671-1311">バイトのバージョンの<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>により、特に大きなバッファーを複数回呼び出すと、高速なテクニックをいくつか。</span><span class="sxs-lookup"><span data-stu-id="b1671-1311">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="b1671-1312">ただし、このメソッド バージョンがないことも、安全なポインターが必要なので念頭に置いてください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1312">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="b1671-1313">場合は、アプリは、大量のデータを変換する必要がありますは、出力バッファーを再利用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1313">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="b1671-1314">ここで、[\]、Int32、Int32、Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 > バージョンをサポートしていますが、文字バッファーを出力するをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1314">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="b1671-1315">使用を検討して、<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>メソッドの代わりに<xref:System.Text.Encoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1315">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b1671-1316">変換メソッドは、可能なデータを変換し、出力バッファーが小さすぎる場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1316">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="b1671-1317">継続的なストリームのデコード、このメソッドは多くの場合、最適な選択肢です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1317">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1318">次の例では、別のエンコーディングにから文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1318">The following example converts a string from one encoding to another.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 <span data-ttu-id="b1671-1319">次の例では、(バイト単位) の配列に文字列をエンコードし、その文字の配列にバイトの範囲をデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1319">The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1320"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1320"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="b1671-1321">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1321">-or-</span></span>  
  
 <span data-ttu-id="b1671-1322"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1322"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1323"><paramref name="byteIndex" />、<paramref name="byteCount" />、または <paramref name="charIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1323"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1671-1324">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1324">-or-</span></span>  
  
 <span data-ttu-id="b1671-1325"><paramref name="byteindex" /> および <paramref name="byteCount" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1325"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
 <span data-ttu-id="b1671-1326">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1326">-or-</span></span>  
  
 <span data-ttu-id="b1671-1327"><paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1327"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1671-1328"><paramref name="chars" /> には、<paramref name="charIndex" /> から配列の末尾までに十分なサイズがなく、結果の文字を格納できません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1328"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1329">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1329">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1330">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1330">-and-</span></span>  
  
 <span data-ttu-id="b1671-1331"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1331"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public virtual System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1671-1332">派生クラスでオーバーライドされた場合、エンコード済みバイト シーケンスを文字シーケンスに変換するデコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1332">When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</span></span></summary>
        <returns><span data-ttu-id="b1671-1333">エンコード済みバイト シーケンスを文字シーケンスに変換する <see cref="T:System.Text.Decoder" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-1333">A <see cref="T:System.Text.Decoder" /> that converts an encoded sequence of bytes into a sequence of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1334"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドと同様の方法で、文字のシーケンシャル ブロックにバイトのシーケンシャル ブロックを変換する、<xref:System.Text.Encoding.GetChars%2A>このクラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1334">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="b1671-1335">ただし、<xref:System.Text.Decoder>のブロックをまたぐバイト シーケンスを正しくデコードするための呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1335">However, a <xref:System.Text.Decoder> maintains state information between calls so it correctly decodes byte sequences that span blocks.</span></span> <span data-ttu-id="b1671-1336"><xref:System.Text.Decoder>もデータ ブロックの末尾にある末尾バイトを保持し、[次へ] のデコード操作で末尾バイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1336">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="b1671-1337">したがって、<xref:System.Text.Encoding.GetDecoder%2A>と<xref:System.Text.Encoding.GetEncoder%2A>の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためにネットワーク転送、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1337">Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="b1671-1338">既定の実装を返します、<see cref="T:System.Text.Decoder" />を呼び出す、<see cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />と<see cref="M:System.Text.Encoding.GetChars(System.Byte[])" />、現在のメソッド<see cref="T:System.Text.Encoding" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1338">The default implementation returns a <see cref="T:System.Text.Decoder" /> that calls the <see cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" /> and <see cref="M:System.Text.Encoding.GetChars(System.Byte[])" /> methods of the current <see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b1671-1339">返すには、このメソッドをオーバーライドする必要があります、<see cref="T:System.Text.Decoder" />呼び出しの間の状態を保持します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1339">You must override this method to return a <see cref="T:System.Text.Decoder" /> that maintains its state between calls.</span></span></para>
        </block>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1671-1340">派生クラスでオーバーライドされた場合、Unicode 文字のシーケンスをエンコード済みバイト シーケンスに変換するエンコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1340">When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="b1671-1341">Unicode 文字のシーケンスをエンコード済みバイト シーケンスに変換する <see cref="T:System.Text.Encoder" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-1341">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into an encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1342"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドと同様のバイト数のシーケンシャル ブロックに文字のシーケンシャル ブロックを変換する、<xref:System.Text.Encoding.GetBytes%2A>このクラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1342">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.Encoding.GetBytes%2A> method of this class.</span></span> <span data-ttu-id="b1671-1343">ただし、<xref:System.Text.Encoder>のブロックをまたぐ文字シーケンスが正しくエンコードするための呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1343">However, a <xref:System.Text.Encoder> maintains state information between calls so it correctly encodes character sequences that span blocks.</span></span> <span data-ttu-id="b1671-1344"><xref:System.Text.Encoder>末尾が保存されますが、データ ブロックの最後の文字し、末尾の文字を使用して、次のエンコード操作もします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1344">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="b1671-1345">たとえば、データ ブロックが上位サロゲートで終了し、一致する下位サロゲートが [次へ] のデータ ブロック内にある可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1345">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="b1671-1346">したがって、<xref:System.Text.Encoding.GetDecoder%2A>と<xref:System.Text.Encoding.GetEncoder%2A>の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためにネットワーク転送、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1346">Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="b1671-1347">既定の実装を返します、<see cref="T:System.Text.Encoder" />を呼び出す、<see cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />と<see cref="M:System.Text.Encoding.GetBytes(System.Char[])" />、現在のメソッド<see cref="T:System.Text.Encoding" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1347">The default implementation returns a <see cref="T:System.Text.Encoder" /> that calls the <see cref="M:System.Text.Encoding.GetByteCount(System.Char[])" /> and <see cref="M:System.Text.Encoding.GetBytes(System.Char[])" /> methods of the current <see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="b1671-1348">返すには、このメソッドをオーバーライドする必要があります、<see cref="T:System.Text.Encoder" />呼び出しの間の状態を保持します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1348">You must override this method to return a <see cref="T:System.Text.Encoder" /> that maintains its state between calls.</span></span></para>
        </block>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1671-1349">指定したコード ページのエンコーディングを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1349">Returns an encoding for the specified code page.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage"><span data-ttu-id="b1671-1350">使用するエンコーディングのコード ページ ID。</span><span class="sxs-lookup"><span data-stu-id="b1671-1350">The code page identifier of the preferred encoding.</span></span> <span data-ttu-id="b1671-1351">使用可能な値は、<see cref="T:System.Text.Encoding" /> クラスのトピックに記載されている表の、コード ページの列にリストされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1351">Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span></span>  
  
 <span data-ttu-id="b1671-1352">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1352">-or-</span></span>  
  
 <span data-ttu-id="b1671-1353">既定のエンコーディングを使用する場合は 0。</span><span class="sxs-lookup"><span data-stu-id="b1671-1353">0 (zero), to use the default encoding.</span></span></param>
        <summary><span data-ttu-id="b1671-1354">指定したコード ページ ID に関連付けられたエンコーディングを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1354">Returns the encoding associated with the specified code page identifier.</span></span></summary>
        <returns><span data-ttu-id="b1671-1355">指定したコード ページに関連付けられたエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="b1671-1355">The encoding that is associated with the specified code page.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1356">エンコーディングの種類によって異なります、フォールバック ハンドラー`codepage`です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1356">The fallback handler depends on the encoding type of `codepage`.</span></span> <span data-ttu-id="b1671-1357">場合`codepage`コード ページや 2 バイト文字セット (DBCS) エンコーディングを設定すると、最適フォールバック ハンドラーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1357">If `codepage` is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used.</span></span> <span data-ttu-id="b1671-1358">それ以外の場合、置換フォールバック ハンドラーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1358">Otherwise, a replacement fallback handler is used.</span></span> <span data-ttu-id="b1671-1359">これらのフォールバック ハンドラーは、アプリの適切でない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1359">These fallback handlers may not be appropriate for your app.</span></span> <span data-ttu-id="b1671-1360">指定するエンコードで使用されるフォールバック ハンドラーを指定する`codepage`、呼び出すことができます、<xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1360">To specify the fallback handler used by the encoding specified by `codepage`, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> overload.</span></span>  
  
 <span data-ttu-id="b1671-1361"><xref:System.Text.Encoding.GetEncoding%2A>メソッドは、ほとんどのコード ページをサポートするために基になるプラットフォームに依存します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1361">The <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="b1671-1362">ただし、.NET Framework では、一部のエンコーディングをネイティブにサポートします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1362">However, the .NET Framework natively supports some encodings.</span></span> <span data-ttu-id="b1671-1363">コード ページの一覧は、次を参照してください。、<xref:System.Text.Encoding>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="b1671-1363">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="b1671-1364">代わりに、呼び出すことができます、<xref:System.Text.Encoding.GetEncodings%2A>の配列を取得するメソッド<xref:System.Text.EncodingInfo>すべてのエンコーディングに関する情報を含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1364">Alternatively, you can call the <xref:System.Text.Encoding.GetEncodings%2A> method to get an array of <xref:System.Text.EncodingInfo> objects that contains information about all encodings.</span></span>  
  
 <span data-ttu-id="b1671-1365">.NET Framework の特定のプラットフォームのバージョンで本質的にサポートされているエンコーディングに加えて、<xref:System.Text.Encoding.GetEncoding%2A>メソッドを登録することによって利用できる追加のエンコーディングを返します、<xref:System.Text.EncodingProvider>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1365">In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span> <span data-ttu-id="b1671-1366">同じエンコーディングが複数登録されている場合<xref:System.Text.EncodingProvider>オブジェクトをこのメソッドは、登録されている最後の 1 つを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1366">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span>  

<span data-ttu-id="b1671-1367">場合は 0 の値を指定することもできます、`codepage`引数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1367">You can also supply a value of 0 for the `codepage` argument.</span></span> <span data-ttu-id="b1671-1368">その正確な動作がかどうか、エンコーディングが使用可能な登録することによって異なります、<xref:System.Text.EncodingProvider>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1368">Its precise behavior depends on whether any encodings have been made available by registering an <xref:System.Text.EncodingProvider> object:</span></span>

- <span data-ttu-id="b1671-1369">返す場合にエンコーディングが選択した最後の登録済みのプロバイダーのエンコーディングを返す、1 つまたは複数のエンコーディング プロバイダーが登録されている場合、<xref:System.Text.Encoding.GetEncoding%2A>メソッドに渡されます、`codepage`引数 0 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1369">If one or more encoding providers have been registered, it returns the encoding of the last registered provider that has chosen to return a encoding when the <xref:System.Text.Encoding.GetEncoding%2A> method is passed a `codepage` argument of 0.</span></span>     

- <span data-ttu-id="b1671-1370">.NET Framework の場合はエンコードなしプロバイダーが登録されて場合、<xref:System.Text.CodePagesEncodingProvider>は、登録済みのエンコーディング プロバイダーまたは登録されているエンコーディング プロバイダーを処理しません、`codepage`値 0 の場合のオペレーティング システムの現在のコード ページを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1370">On the .NET Framework, if no encoding provider has been registered, if the <xref:System.Text.CodePagesEncodingProvider> is the registered encoding provider, or if no registered encoding provider handles a `codepage` value of 0, it returns the operating system's active code page.</span></span> <span data-ttu-id="b1671-1371">Windows システム上のアクティブなコード ページを確認するのには Windows を呼び出す[GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx) Windows デスクトップで、.NET Framework の関数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1371">To determine the active code page on Windows systems, call the Windows [GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx) function from the .NET Framework on the Windows desktop.</span></span>

- <span data-ttu-id="b1671-1372">.NET Core、エンコーディング プロバイダーが登録されているか、登録されているエンコーディング プロバイダーを処理なしの場合に、`codepage`値 0 を返します、<xref:System.Text.UTF8Encoding>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1372">On .NET Core, if no encoding provider has been registered or if no registered encoding provider handles a `codepage` value of 0, it returns the <xref:System.Text.UTF8Encoding>.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="b1671-1373">いくつかサポートされていないコード ページの原因、<xref:System.ArgumentException>をスローする他のユーザーが発生する一方、<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1373">Some unsupported code pages cause an <xref:System.ArgumentException> to be thrown, whereas others cause a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="b1671-1374">したがって、コードでキャッチする必要がありますすべて例外 セクションに示される例外。</span><span class="sxs-lookup"><span data-stu-id="b1671-1374">Therefore, your code must catch all exceptions indicated in the Exceptions section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b1671-1375">ANSI コード ページは、別のコンピューターに異なる場合があり、データの破損につながる、1 台のコンピューターで変更できます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1375">The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</span></span> <span data-ttu-id="b1671-1376">このため、アクティブなコード ページが、ANSI コード ページの場合のエンコードとデコードの既定のコード ページを使用してデータをによって返される`Encoding.GetEncoding(0)`はお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1376">For this reason, if the active code page is an ANSI code page, encoding and decoding data using the default code page returned by `Encoding.GetEncoding(0)` is not recommended.</span></span> <span data-ttu-id="b1671-1377">最も一貫性のある結果を得るには、Unicode エンコーディング (コード ページ 65001) を utf-8 や utf-16 など特定のコード ページではなくを使用してください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1377">For the most consistent results, you should use a Unicode encoding, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span>  
  
 <span data-ttu-id="b1671-1378"><xref:System.Text.Encoding.GetEncoding%2A> 既定の設定でキャッシュされたインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1378"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="b1671-1379">派生クラスのコンス トラクターを使用して、設定が異なるインスタンスを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1379">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="b1671-1380">たとえば、<xref:System.Text.UTF32Encoding>クラスには、エラーの検出を有効にすることができますをコンス トラクターが用意されています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1380">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  

   
  
## Examples  
 <span data-ttu-id="b1671-1381">次の例では、(コード ページで 1 つ)、もう一方は名前をエンコードするには、同じ 2 つのインスタンスを取得し、等価性を確認します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1381">The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1382"><paramref name="codepage" /> が 0 未満か、65535 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1382"><paramref name="codepage" /> is less than zero or greater than 65535.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1671-1383"><paramref name="codepage" /> は、基になるプラットフォームでサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1383"><paramref name="codepage" /> is not supported by the underlying platform.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b1671-1384"><paramref name="codepage" /> は、基になるプラットフォームでサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1384"><paramref name="codepage" /> is not supported by the underlying platform.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="b1671-1385">使用するエンコーディングのコード ページ名。</span><span class="sxs-lookup"><span data-stu-id="b1671-1385">The code page name of the preferred encoding.</span></span> <span data-ttu-id="b1671-1386"><see cref="P:System.Text.Encoding.WebName" /> プロパティが返す値はすべて有効です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1386">Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid.</span></span> <span data-ttu-id="b1671-1387">使用可能な値は、<see cref="T:System.Text.Encoding" /> クラスのトピックに記載されている表の、名前の列にリストされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1387">Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span></span></param>
        <summary><span data-ttu-id="b1671-1388">指定したコード ページ名に関連付けられたエンコーディングを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1388">Returns the encoding associated with the specified code page name.</span></span></summary>
        <returns><span data-ttu-id="b1671-1389">指定したコード ページに関連付けられたエンコード。</span><span class="sxs-lookup"><span data-stu-id="b1671-1389">The encoding  associated with the specified code page.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1390">エンコーディングの種類によって異なります、フォールバック ハンドラー`name`です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1390">The fallback handler depends on the encoding type of `name`.</span></span> <span data-ttu-id="b1671-1391">場合`name`コード ページや 2 バイト文字セット (DBCS) エンコーディングを設定すると、最適フォールバック ハンドラーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1391">If `name` is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used.</span></span> <span data-ttu-id="b1671-1392">それ以外の場合、置換フォールバック ハンドラーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1392">Otherwise, a replacement fallback handler is used.</span></span> <span data-ttu-id="b1671-1393">これらのフォールバック ハンドラーは、アプリの適切でない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1393">These fallback handlers may not be appropriate for your app.</span></span> <span data-ttu-id="b1671-1394">指定するエンコードで使用されるフォールバック ハンドラーを指定する`name`、呼び出すことができます、<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1394">To specify the fallback handler used by the encoding specified by `name`, you can call the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> overload.</span></span>  
  
 <span data-ttu-id="b1671-1395"><xref:System.Text.Encoding.GetEncoding%2A>メソッドは、ほとんどのコード ページをサポートするために基になるプラットフォームに依存します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1395">The <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="b1671-1396">ただし、.NET Framework では、一部のエンコーディングをネイティブにサポートします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1396">However, the .NET Framework natively supports some encodings.</span></span> <span data-ttu-id="b1671-1397">コード ページの一覧は、次を参照してください。、<xref:System.Text.Encoding>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="b1671-1397">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="b1671-1398">代わりに、呼び出すことができます、<xref:System.Text.Encoding.GetEncodings%2A>の配列を取得するメソッド<xref:System.Text.EncodingInfo>すべてのエンコーディングに関する情報を含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1398">Alternatively, you can call the <xref:System.Text.Encoding.GetEncodings%2A> method to get an array of <xref:System.Text.EncodingInfo> objects that contains information about all encodings.</span></span> 
  
 <span data-ttu-id="b1671-1399">.NET Framework の特定のプラットフォームのバージョンで本質的にサポートされているエンコーディングに加えて、<xref:System.Text.Encoding.GetEncoding%2A>メソッドを登録することによって利用できる追加のエンコーディングを返します、<xref:System.Text.EncodingProvider>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1399">In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span> <span data-ttu-id="b1671-1400">同じエンコーディングが複数登録されている場合<xref:System.Text.EncodingProvider>オブジェクトをこのメソッドは、登録されている最後の 1 つを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1400">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span>  
   
> [!NOTE]
>  <span data-ttu-id="b1671-1401">ANSI コード ページは、別々 のコンピューターに異なる場合があります。 またはデータの破損につながる、1 台のコンピューターに変更できます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1401">The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption.</span></span> <span data-ttu-id="b1671-1402">最も一貫性のある結果を得るには、特定のコード ページではなく utf-8 (コード ページ 65001) や utf-16 などの Unicode を使用してください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1402">For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span>  
 
  
 <span data-ttu-id="b1671-1403"><xref:System.Text.Encoding.GetEncoding%2A> 既定の設定でキャッシュされたインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1403"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="b1671-1404">派生クラスのコンス トラクターを使用して、設定が異なるインスタンスを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1404">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="b1671-1405">たとえば、<xref:System.Text.UTF32Encoding>クラスには、エラーの検出を有効にすることができますをコンス トラクターが用意されています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1405">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  
  
## Examples  
 <span data-ttu-id="b1671-1406">次の例では、(コード ページで 1 つ)、もう一方は名前をエンコードするには、同じ 2 つのインスタンスを取得し、等価性を確認します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1406">The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1671-1407"><paramref name="name" /> が有効なコード ページ名ではありません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1407"><paramref name="name" /> is not a valid code page name.</span></span>  
  
 <span data-ttu-id="b1671-1408">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1408">-or-</span></span>  
  
 <span data-ttu-id="b1671-1409"><paramref name="name" /> が示すコード ページは基になるプラットフォームでサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1409">The code page indicated by <paramref name="name" /> is not supported by the underlying platform.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage"><span data-ttu-id="b1671-1410">使用するエンコーディングのコード ページ ID。</span><span class="sxs-lookup"><span data-stu-id="b1671-1410">The code page identifier of the preferred encoding.</span></span> <span data-ttu-id="b1671-1411">使用可能な値は、<see cref="T:System.Text.Encoding" /> クラスのトピックに記載されている表の、コード ページの列にリストされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1411">Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span></span>  
  
 <span data-ttu-id="b1671-1412">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1412">-or-</span></span>  
  
 <span data-ttu-id="b1671-1413">既定のエンコーディングを使用する場合は 0。</span><span class="sxs-lookup"><span data-stu-id="b1671-1413">0 (zero), to use the default encoding.</span></span></param>
        <param name="encoderFallback"><span data-ttu-id="b1671-1414">現在のエンコーディングで文字をエンコードできない場合にエラー処理プロシージャを提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1414">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span></span></param>
        <param name="decoderFallback"><span data-ttu-id="b1671-1415">現在のエンコーディングでバイト シーケンスをデコードできない場合にエラー処理プロシージャを提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1415">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span></span></param>
        <summary><span data-ttu-id="b1671-1416">指定したコード ページ ID に関連付けられたエンコーディングを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1416">Returns the encoding associated with the specified code page identifier.</span></span> <span data-ttu-id="b1671-1417">パラメーターには、エンコードできない文字とデコードできないバイト シーケンスのためのエラー ハンドラーを指定します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1417">Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</span></span></summary>
        <returns><span data-ttu-id="b1671-1418">指定したコード ページに関連付けられたエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="b1671-1418">The encoding that is associated with the specified code page.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b1671-1419">サポートされていないコード ページによって、例外が発生する<xref:System.ArgumentException>が発生する他のユーザーに対してスローされる<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1419">Some unsupported code pages cause the exception <xref:System.ArgumentException> to be thrown, whereas others cause <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="b1671-1420">したがって、コードでキャッチする必要がありますすべて例外 セクションに示される例外。</span><span class="sxs-lookup"><span data-stu-id="b1671-1420">Therefore, your code must catch all exceptions indicated in the Exceptions section.</span></span>  
  
 <span data-ttu-id="b1671-1421"><xref:System.Text.Encoding.GetEncoding%2A>メソッドは、ほとんどのコード ページをサポートするために基になるプラットフォームに依存します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1421">The <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="b1671-1422">ただし、.NET Framework では、一部のエンコーディングをネイティブにサポートします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1422">However, the .NET Framework natively supports some encodings.</span></span> <span data-ttu-id="b1671-1423">コード ページの一覧は、次を参照してください。、<xref:System.Text.Encoding>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="b1671-1423">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="b1671-1424">呼び出すことができます、<xref:System.Text.Encoding.GetEncodings%2A>完全な .NET Framework で Windows デスクトップですべてのエンコーディングの一覧を取得するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b1671-1424">You can call the <xref:System.Text.Encoding.GetEncodings%2A> method in the full .NET Framework on the Windows desktop to get a list of all encodings.</span></span>   
  
 <span data-ttu-id="b1671-1425">.NET Framework の特定のプラットフォームのバージョンで本質的にサポートされているエンコーディングに加えて、<xref:System.Text.Encoding.GetEncoding%2A>メソッドを登録することによって利用できる追加のエンコーディングを返します、<xref:System.Text.EncodingProvider>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1425">In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span>  <span data-ttu-id="b1671-1426">同じエンコーディングが複数登録されている場合<xref:System.Text.EncodingProvider>オブジェクトをこのメソッドは、登録されている最後の 1 つを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1426">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span>  

<span data-ttu-id="b1671-1427">場合は 0 の値を指定することもできます、`codepage`引数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1427">You can also supply a value of 0 for the `codepage` argument.</span></span> <span data-ttu-id="b1671-1428">その正確な動作がかどうか、エンコーディングが使用可能な登録することによって異なります、<xref:System.Text.EncodingProvider>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1428">Its precise behavior depends on whether any encodings have been made available by registering an <xref:System.Text.EncodingProvider> object:</span></span>

- <span data-ttu-id="b1671-1429">返す場合にエンコーディングが選択した最後の登録済みのプロバイダーのエンコーディングを返す、1 つまたは複数のエンコーディング プロバイダーが登録されている場合、<xref:System.Text.Encoding.GetEncoding%2A>メソッドに渡されます、`codepage`引数 0 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1429">If one or more encoding providers have been registered, it returns the encoding of the last registered provider that has chosen to return a encoding when the <xref:System.Text.Encoding.GetEncoding%2A> method is passed a `codepage` argument of 0.</span></span>     

- <span data-ttu-id="b1671-1430">.NET Framework の場合はエンコードなしプロバイダーが登録されて場合、<xref:System.Text.CodePagesEncodingProvider>は、登録済みのエンコーディング プロバイダーまたは登録されているエンコーディング プロバイダーを処理しません、`codepage`値は 0、現在のコード ページを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1430">On the .NET Framework, if no encoding provider has been registered, if the <xref:System.Text.CodePagesEncodingProvider> is the registered encoding provider, or if no registered encoding provider handles a `codepage` value of 0, it returns the active code page.</span></span>

- <span data-ttu-id="b1671-1431">.NET Core、エンコーディング プロバイダーが登録されているか、登録されているエンコーディング プロバイダーを処理なしの場合に、`codepage`値 0 を返します、<xref:System.Text.UTF8Encoding>エンコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1431">On .NET Core, if no encoding provider has been registered or if no registered encoding provider handles a `codepage` value of 0, it returns the <xref:System.Text.UTF8Encoding> encoding.</span></span>

> [!NOTE]
>  <span data-ttu-id="b1671-1432">ANSI コード ページは、別のコンピューターに異なる場合があり、データの破損につながる、1 台のコンピューターで変更できます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1432">The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</span></span> <span data-ttu-id="b1671-1433">このため、アクティブなコード ページが、ANSI コード ページの場合のエンコードとデコードの既定のコード ページを使用してデータをによって返される`Encoding.GetEncoding(0)`はお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1433">For this reason, if the active code page is an ANSI code page, encoding and decoding data using the default code page returned by `Encoding.GetEncoding(0)` is not recommended.</span></span> <span data-ttu-id="b1671-1434">最も一貫性のある結果を得るには、特定のコード ページではなく utf-8 (コード ページ 65001) や utf-16 などの Unicode を使用してください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1434">For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span> 
  
 <span data-ttu-id="b1671-1435">アクティブなコード ページに関連付けられたエンコーディングを取得する、0 に設定する値を指定することができますか、`codepage`引数または、コードが Windows デスクトップで、完全な .NET Framework で実行されている場合の値の取得、<xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1435">To get the encoding associated with the active code page, you can either supply a value of 0 for the `codepage` argument or, if your code is running on the full .NET Framework on the Windows desktop, retrieve the value of the <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="b1671-1436">現在のアクティブなコード ページを調べるには、するには、Windows を呼び出します[GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx) Windows デスクトップで、.NET Framework の関数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1436">To determine the current active code page, call the Windows [GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx) function from the .NET Framework on the Windows desktop.</span></span>  
  
 <span data-ttu-id="b1671-1437"><xref:System.Text.Encoding.GetEncoding%2A> 既定の設定でキャッシュされたインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1437"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="b1671-1438">派生クラスのコンス トラクターを使用して、設定が異なるインスタンスを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1438">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="b1671-1439">たとえば、<xref:System.Text.UTF32Encoding>クラスには、エラーの検出を有効にすることができますをコンス トラクターが用意されています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1439">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1440">次の例で、<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1440">The following example demonstrates the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[sys.txt.fallbackEncRpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cpp/fallEncRpl.cpp#1)]
 [!code-csharp[sys.txt.fallbackEncRpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cs/fallEncRpl.cs#1)]
 [!code-vb[sys.txt.fallbackEncRpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncRpl/vb/fallEncRpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1441"><paramref name="codepage" /> が 0 未満か、65535 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1441"><paramref name="codepage" /> is less than zero or greater than 65535.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1671-1442"><paramref name="codepage" /> は、基になるプラットフォームでサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1442"><paramref name="codepage" /> is not supported by the underlying platform.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b1671-1443"><paramref name="codepage" /> は、基になるプラットフォームでサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1443"><paramref name="codepage" /> is not supported by the underlying platform.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="b1671-1444">使用するエンコーディングのコード ページ名。</span><span class="sxs-lookup"><span data-stu-id="b1671-1444">The code page name of the preferred encoding.</span></span> <span data-ttu-id="b1671-1445"><see cref="P:System.Text.Encoding.WebName" /> プロパティが返す値はすべて有効です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1445">Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid.</span></span> <span data-ttu-id="b1671-1446">使用可能な値は、<see cref="T:System.Text.Encoding" /> クラスのトピックに記載されている表の、名前の列にリストされています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1446">Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span></span></param>
        <param name="encoderFallback"><span data-ttu-id="b1671-1447">現在のエンコーディングで文字をエンコードできない場合にエラー処理プロシージャを提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1447">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span></span></param>
        <param name="decoderFallback"><span data-ttu-id="b1671-1448">現在のエンコーディングでバイト シーケンスをデコードできない場合にエラー処理プロシージャを提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1448">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span></span></param>
        <summary><span data-ttu-id="b1671-1449">指定したコード ページ名に関連付けられたエンコーディングを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1449">Returns the encoding associated with the specified code page name.</span></span> <span data-ttu-id="b1671-1450">パラメーターには、エンコードできない文字とデコードできないバイト シーケンスのためのエラー ハンドラーを指定します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1450">Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</span></span></summary>
        <returns><span data-ttu-id="b1671-1451">指定したコード ページに関連付けられたエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="b1671-1451">The encoding that is associated with the specified code page.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1452"><xref:System.Text.Encoding.GetEncoding%2A>メソッドは、ほとんどのコード ページをサポートするために基になるプラットフォームに依存します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1452">The <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="b1671-1453">ただし、.NET Framework では、一部のエンコーディングをネイティブにサポートします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1453">However, the .NET Framework natively supports some encodings.</span></span>  
  
 <span data-ttu-id="b1671-1454">.NET Framework の特定のプラットフォームのバージョンで本質的にサポートされているエンコーディングに加えて、<xref:System.Text.Encoding.GetEncoding%2A>メソッドを登録することによって利用できる追加のエンコーディングを返します、<xref:System.Text.EncodingProvider>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1454">In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span> <span data-ttu-id="b1671-1455">同じエンコーディングが複数登録されている場合<xref:System.Text.EncodingProvider>オブジェクトをこのメソッドは、登録されている最後の 1 つを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1455">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span> 
  
> [!NOTE]
>  <span data-ttu-id="b1671-1456">ANSI コード ページは、別のコンピューターに異なる場合があり、データの破損につながる、1 台のコンピューターで変更できます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1456">The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</span></span> <span data-ttu-id="b1671-1457">最も一貫性のある結果を得るには、Unicode エンコーディング (コード ページ 65001) を utf-8 や utf-16 など特定のコード ページではなくを使用してください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1457">For the most consistent results, you should use a Unicode encoding, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span>  
  
 <span data-ttu-id="b1671-1458">コード ページの一覧は、次を参照してください。、<xref:System.Text.Encoding>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="b1671-1458">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="b1671-1459">呼び出すことができます、<xref:System.Text.Encoding.GetEncodings%2A>メソッドを完全な .NET Framework Windows デスクトップですべてのエンコーディングの一覧を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1459">You can call the <xref:System.Text.Encoding.GetEncodings%2A> method on the full .NET Framework on the Windows desktop to get a list of all encodings.</span></span>  
  
 <span data-ttu-id="b1671-1460"><xref:System.Text.Encoding.GetEncoding%2A> 既定の設定でキャッシュされたインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1460"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="b1671-1461">派生クラスのコンス トラクターを使用して、設定が異なるインスタンスを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1461">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="b1671-1462">たとえば、<xref:System.Text.UTF32Encoding>クラスには、エラーの検出を有効にすることができますをコンス トラクターが用意されています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1462">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1463">次の例で、<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1463">The following example demonstrates the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[sys.txt.fallbackEncRpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cpp/fallEncRpl.cpp#1)]
 [!code-csharp[sys.txt.fallbackEncRpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cs/fallEncRpl.cs#1)]
 [!code-vb[sys.txt.fallbackEncRpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncRpl/vb/fallEncRpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1671-1464"><paramref name="name" /> が有効なコード ページ名ではありません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1464"><paramref name="name" /> is not a valid code page name.</span></span>  
  
 <span data-ttu-id="b1671-1465">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1465">-or-</span></span>  
  
 <span data-ttu-id="b1671-1466"><paramref name="name" /> が示すコード ページは基になるプラットフォームでサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1466">The code page indicated by <paramref name="name" /> is not supported by the underlying platform.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
      </Docs>
    </Member>
    <Member MemberName="GetEncodings">
      <MemberSignature Language="C#" Value="public static System.Text.EncodingInfo[] GetEncodings ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.EncodingInfo[] GetEncodings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncodings" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncodings () As EncodingInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Text::EncodingInfo ^&gt; ^ GetEncodings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.EncodingInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1671-1467">すべてのエンコーディングを格納した配列を返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1467">Returns an array that contains all encodings.</span></span></summary>
        <returns><span data-ttu-id="b1671-1468">すべてのエンコーディングを格納する配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1468">An array that contains all encodings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1469">このメソッドは、サポートされているエンコーディングでは、コード ページによって一意に区別の一覧を返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1469">This method returns a list of supported encodings, uniquely distinguished by code page.</span></span> <span data-ttu-id="b1671-1470">サポートされているエンコーディングを示す表を参照してください、<xref:System.Text.Encoding>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="b1671-1470">For a table that lists the supported encodings, see the <xref:System.Text.Encoding> class topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b1671-1471">によって返される、サポートされているエンコーディングの一覧、<xref:System.Text.Encoding.GetEncodings%2A>メソッドがいずれかで利用できる、追加のエンコーディングを含まない<xref:System.Text.EncodingProvider>への呼び出しによって登録済みの実装、<xref:System.Text.Encoding.RegisterProvider%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1471">The list of supported encodings returned by the <xref:System.Text.Encoding.GetEncodings%2A> method does not include any additional encodings made available by any <xref:System.Text.EncodingProvider> implementations that were registered by calls to the <xref:System.Text.Encoding.RegisterProvider%2A> method.</span></span>  
  
 <span data-ttu-id="b1671-1472">50220 と 50222 は、"iso-2022-jp"、名前に関連付けられている両方が同じではありません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1472">Encodings 50220 and 50222 are both associated with the name "iso-2022-jp", but they are not identical.</span></span> <span data-ttu-id="b1671-1473">50220 をエンコード、半角カタカナの文字を全角カタカナの文字に変換され、50222 のエンコードは、半角カタカナの文字をエンコードするシフト/シフト アウト シーケンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1473">Encoding 50220 converts half-width Katakana characters to full-width Katakana characters, whereas encoding 50222 uses a shift-in/shift-out sequence to encode half-width Katakana characters.</span></span> <span data-ttu-id="b1671-1474">50222 をエンコードするための表示名が"日本語 (Jis 1 バイト カタカナ可 -、/SI)"をディスプレイを持つ 50220 エンコーディングと区別する"日本語 (JIS)"という名前です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1474">The display name for encoding 50222 is "Japanese (JIS-Allow 1 byte Kana - SO/SI)" to distinguish it from encoding 50220, which has the display name "Japanese (JIS)".</span></span>  
  
 <span data-ttu-id="b1671-1475">かどうかを要求する、エンコード名"iso-2022-jp"、50220 をエンコードする .NET Framework を返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1475">If you request the encoding name "iso-2022-jp", the .NET Framework returns encoding 50220.</span></span> <span data-ttu-id="b1671-1476">ただし、アプリを適切なエンコードは、半角カタカナの文字の推奨される処理方法によって異なります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1476">However, the encoding that is appropriate for your app depends on the preferred treatment of the half-width Katakana characters.</span></span>  
  
 <span data-ttu-id="b1671-1477">特定のエンコーディングを取得する必要がありますを使用する、<xref:System.Text.Encoding.GetEncoding%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1477">To get a specific encoding, you should use the <xref:System.Text.Encoding.GetEncoding%2A> method.</span></span>  
  
 <span data-ttu-id="b1671-1478"><xref:System.Text.Encoding.GetEncodings%2A> ファイルのエンコーディングのリストを持つユーザーを表示するためにも**付けて** ダイアログ ボックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1478"><xref:System.Text.Encoding.GetEncodings%2A> is sometimes used to present the user with a list of encodings in a File **Save as** dialog box.</span></span> <span data-ttu-id="b1671-1479">ただし、多くの非 Unicode エンコーディングは、いずれかの不完全な多くの文字と"?"、微妙に異なる動作をさまざまなプラットフォームであるか。</span><span class="sxs-lookup"><span data-stu-id="b1671-1479">However, many non-Unicode encodings are either incomplete and translate many characters to "?", or have subtly different behavior on different platforms.</span></span> <span data-ttu-id="b1671-1480">既定として utf-8 または utf-16 を使用してください。</span><span class="sxs-lookup"><span data-stu-id="b1671-1480">Consider using UTF-8 or UTF-16 as the default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1481">次の例では、各エンコードのブール型プロパティの値を確認します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1481">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1671-1482">現在のインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1482">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="b1671-1483">現在のインスタンスのハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="b1671-1483">The hash code for the current instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public abstract int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="b1671-1484">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1484">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="b1671-1485">派生クラスでオーバーライドされた場合、指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1485">When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="b1671-1486">指定した文字数をエンコードすることによって生成される最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1486">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1487">`charCount`パラメーターの数が実際には指定<xref:System.Char>を内部的には、.NET Framework は Unicode 文字を表す utf-16 を使用するため、エンコードする Unicode 文字を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1487">The `charCount` parameter actually specifies the number of <xref:System.Char> objects that represent the Unicode characters to encode, because the .NET Framework internally uses UTF-16 to represent Unicode characters.</span></span> <span data-ttu-id="b1671-1488">1 つでその結果、ほとんどの Unicode 文字を表すことが<xref:System.Char>オブジェクトがサロゲート ペアで表される Unicode 文字が必要です 2<xref:System.Char>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1488">Consequently, most Unicode characters can be represented by one <xref:System.Char> object, but a Unicode character represented by a surrogate pair, for example, requires two <xref:System.Char> objects.</span></span>  
  
 <span data-ttu-id="b1671-1489">必要な厳密な配列のサイズを計算する<xref:System.Text.Encoding.GetBytes%2A>結果のバイトを格納する必要がありますを使用する、<xref:System.Text.Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1489">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should use the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="b1671-1490">配列の最大サイズを計算するには、使用、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1490">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="b1671-1491"><xref:System.Text.Encoding.GetByteCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1491">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-1492"><xref:System.Text.Encoding.GetMaxByteCount%2A> 現在選択されている最悪のケースを含む、最悪のシナリオの数を取得<xref:System.Text.EncoderFallback>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1492"><xref:System.Text.Encoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="b1671-1493">フォールバックがある可能性がある文字列で、選択されている場合<xref:System.Text.Encoding.GetMaxByteCount%2A>特にここでのエンコーディングの最悪の場合は、すべての文字に対してモードを切り替える場合に、大きな値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1493">If a fallback is chosen with a potentially large string, <xref:System.Text.Encoding.GetMaxByteCount%2A> retrieves large values, particularly in cases where the worst case for the encoding involves switching modes for every character.</span></span> <span data-ttu-id="b1671-1494">たとえば、ISO-2022-JP のこれが発生することができます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1494">For example, this can happen for ISO-2022-JP.</span></span> <span data-ttu-id="b1671-1495">詳細については、ブログ記事を参照してください"[Encoding.GetMaxByteCount() Encoding.GetMaxCharCount() とは何ですか?](http://go.microsoft.com/fwlink/?LinkId=153702)"。</span><span class="sxs-lookup"><span data-stu-id="b1671-1495">For more information, see the blog entry "[What's with Encoding.GetMaxByteCount() and Encoding.GetMaxCharCount()?](http://go.microsoft.com/fwlink/?LinkId=153702)"</span></span> <span data-ttu-id="b1671-1496">(http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx).</span><span class="sxs-lookup"><span data-stu-id="b1671-1496">(http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx).</span></span>  
  
 <span data-ttu-id="b1671-1497">ほとんどの場合は、このメソッドは、短い文字列で妥当な値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1497">In most cases, this method retrieves reasonable values for small strings.</span></span> <span data-ttu-id="b1671-1498">大きな文字列は、非常に大きなバッファーを使用してより適切なバッファーが小さすぎる場合、まれなケースでエラーをキャッチから選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1498">For large strings, you might have to choose between using very large buffers and catching errors in the rare case when a more reasonable buffer is too small.</span></span> <span data-ttu-id="b1671-1499">使用して、別のアプローチを検討することも<xref:System.Text.Encoding.GetByteCount%2A>または<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1499">You might also want to consider a different approach using <xref:System.Text.Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b1671-1500">使用する場合<xref:System.Text.Encoding.GetMaxByteCount%2A>、入力バッファーの最大サイズに基づいて、出力バッファーを割り当てる必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1500">When using <xref:System.Text.Encoding.GetMaxByteCount%2A>, you should allocate the output buffer based on the maximum size of the input buffer.</span></span> <span data-ttu-id="b1671-1501">出力バッファーがサイズの制約がある場合がありますを使用する、<xref:System.Text.Encoding.Convert%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1501">If the output buffer is constrained in size, you might use the <xref:System.Text.Encoding.Convert%2A> method.</span></span>  
  
 <span data-ttu-id="b1671-1502">なお<xref:System.Text.Encoding.GetMaxByteCount%2A>以前のデコーダー操作にサロゲートが残っている可能性があると見なします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1502">Note that <xref:System.Text.Encoding.GetMaxByteCount%2A> considers potential leftover surrogates from a previous decoder operation.</span></span> <span data-ttu-id="b1671-1503">デコーダーのため、1 の値をメソッドに渡すと、単一バイト エンコーディングに対して、ASCII などの 2 を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1503">Because of the decoder, passing a value of 1 to the method retrieves 2 for a single-byte encoding, such as ASCII.</span></span> <span data-ttu-id="b1671-1504">使用する必要があります、<xref:System.Text.ASCIIEncoding.IsSingleByte%2A>プロパティがこの情報が必要な場合です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1504">You should use the <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> property if this information is necessary.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b1671-1505">`GetMaxByteCount(N)` 必ずしもと同じ値ではない`N* GetMaxByteCount(1)`です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1505">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1506">次の例は、文字配列をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1506">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1507"><paramref name="charCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1507"><paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="b1671-1508">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1508">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1509">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1509">-and-</span></span>  
  
 <span data-ttu-id="b1671-1510"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1510"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="b1671-1511">すべて<see cref="T:System.Text.Encoding" />実装は、バッファー オーバーフロー例外が発生しなかった場合、このメソッドの計算の結果に基づくバッファーのサイズを保証する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1511">All <see cref="T:System.Text.Encoding" /> implementations must guarantee that no buffer overflow exceptions occur if buffers are sized according to the results of this method's calculations.</span></span></para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public abstract int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="b1671-1512">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1512">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="b1671-1513">派生クラスでオーバーライドされた場合、指定したバイト数をデコードすることによって生成される最大文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1513">When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="b1671-1514">指定したバイト数をデコードすることによって生成される最大文字数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1514">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1515">必要な厳密な配列のサイズを計算する<xref:System.Text.Encoding.GetChars%2A>結果の文字を格納する必要がありますを使用する、<xref:System.Text.Encoding.GetCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1515">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="b1671-1516">配列の最大サイズを計算するには、使用、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1516">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="b1671-1517"><xref:System.Text.Encoding.GetCharCount%2A>メソッドは通常より少ないメモリの割り当てを使用するときに、<xref:System.Text.Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1517">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b1671-1518"><xref:System.Text.Encoding.GetMaxCharCount%2A> 現在選択されている最悪のケースを含む、最悪のシナリオの数を取得<xref:System.Text.DecoderFallback>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1518"><xref:System.Text.Encoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="b1671-1519">フォールバックがある可能性がある文字列で、選択されている場合<xref:System.Text.Encoding.GetMaxCharCount%2A>大きな値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1519">If a fallback is chosen with a potentially large string, <xref:System.Text.Encoding.GetMaxCharCount%2A> retrieves large values.</span></span>  
  
 <span data-ttu-id="b1671-1520">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1520">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="b1671-1521">大きな文字列は、非常に大きなバッファーを使用してより適切なバッファーが小さすぎることというまれなケースでエラーをキャッチするかを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1521">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is too small.</span></span> <span data-ttu-id="b1671-1522">使用して、別のアプローチを検討することも<xref:System.Text.Encoding.GetCharCount%2A>または<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1522">You might also want to consider a different approach using <xref:System.Text.Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b1671-1523"><xref:System.Text.Encoding.GetMaxCharCount%2A> 関係を持たない<xref:System.Text.Encoding.GetBytes%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1523"><xref:System.Text.Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="b1671-1524">同様の機能を使用する必要がある場合<xref:System.Text.Encoding.GetBytes%2A>、使用する必要があります<xref:System.Text.Encoding.GetMaxByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1524">If you needs a similar function to use with <xref:System.Text.Encoding.GetBytes%2A>, you should use <xref:System.Text.Encoding.GetMaxByteCount%2A>.</span></span>  
  
 <span data-ttu-id="b1671-1525">使用する場合<xref:System.Text.Encoding.GetMaxCharCount%2A>、入力バッファーの最大サイズに基づいて、出力バッファーを割り当てる必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1525">When using <xref:System.Text.Encoding.GetMaxCharCount%2A>, you should allocate the output buffer based on the maximum size of the input buffer.</span></span> <span data-ttu-id="b1671-1526">出力バッファーがサイズの制約がある場合がありますを使用する、<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1526">If the output buffer is constrained in size, you might use the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b1671-1527">なお<xref:System.Text.Encoding.GetMaxCharCount%2A>以前エンコーダー操作から残されたバイトの最悪のケースを検討します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1527">Note that <xref:System.Text.Encoding.GetMaxCharCount%2A> considers the worst case for leftover bytes from a previous encoder operation.</span></span> <span data-ttu-id="b1671-1528">ほとんどのコード ページに、このメソッドに 0 の値を渡すより大きいかを 1 に等しい値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1528">For most code pages, passing a value of 0 to this method retrieves values greater than or equal to 1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b1671-1529">`GetMaxCharCount(N)` 必ずしもと同じ値ではない`N* GetMaxCharCount(1)`です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1529">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1530">次の例では、(バイト単位) の配列に文字列をエンコードし、その文字の配列にバイトをデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1530">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1531"><paramref name="byteCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1531"><paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1532">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1532">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1533">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1533">-and-</span></span>  
  
 <span data-ttu-id="b1671-1534"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1534"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="b1671-1535">すべて<see cref="T:System.Text.Encoding" />実装は、バッファー オーバーフロー例外が発生しなかった場合、このメソッドの計算の結果に基づくバッファーのサイズを保証する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1535">All <see cref="T:System.Text.Encoding" /> implementations must guarantee that no buffer overflow exceptions occur if buffers are sized according to the results of this method's calculations.</span></span></para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public virtual byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1671-1536">派生クラスでオーバーライドされた場合、使用するエンコーディングを指定するバイト シーケンスを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1536">When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</span></span></summary>
        <returns><span data-ttu-id="b1671-1537">使用するエンコーディングを指定するバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1537">A byte array containing a sequence of bytes that specifies the encoding used.</span></span>  
  
 <span data-ttu-id="b1671-1538">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1538">-or-</span></span>  
  
 <span data-ttu-id="b1671-1539">プリアンブルが不要な場合は、長さ 0 のバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1539">A byte array of length zero, if a preamble is not required.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1540">必要に応じて、<xref:System.Text.Encoding>オブジェクトの先頭には、エンコード プロセスからバイトのシーケンスにバイトの配列である preamble を提供します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1540">Optionally, the <xref:System.Text.Encoding> object provides a preamble that is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="b1671-1541">Preamble、バイト順マーク (Unicode では、コード ポイント U+FEFF) が含まれている場合、バイト順および変換形式または UTF 決定デコーダーと役に立ちます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1541">If the preamble contains a byte order mark (in Unicode, code point U+FEFF), it helps the decoder determine the byte order and the transformation format or UTF.</span></span>  
  
 <span data-ttu-id="b1671-1542">Unicode バイト順マーク (BOM) が (16 進) に次のようにシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1542">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="b1671-1543">UTF 8: EF BB BF</span><span class="sxs-lookup"><span data-stu-id="b1671-1543">UTF-8: EF BB BF</span></span>  
  
-   <span data-ttu-id="b1671-1544">Utf-16 ビッグ エンディアン バイト順: FE FF</span><span class="sxs-lookup"><span data-stu-id="b1671-1544">UTF-16 big endian byte order: FE FF</span></span>  
  
-   <span data-ttu-id="b1671-1545">Utf-16 リトル エンディアン バイト順: FF FE</span><span class="sxs-lookup"><span data-stu-id="b1671-1545">UTF-16 little endian byte order: FF FE</span></span>  
  
-   <span data-ttu-id="b1671-1546">Utf-32 ビッグ エンディアン バイト順: 00 00 FE FF</span><span class="sxs-lookup"><span data-stu-id="b1671-1546">UTF-32 big endian byte order: 00 00 FE FF</span></span>  
  
-   <span data-ttu-id="b1671-1547">リトル エンディアン バイト順の utf-32: FF FE 00 00</span><span class="sxs-lookup"><span data-stu-id="b1671-1547">UTF-32 little endian byte order: FF FE 00 00</span></span>  
  
 <span data-ttu-id="b1671-1548">特定の id への参照を紛失するファイルのエンコーディングのほとんどを提供しているため、BOM を使用する必要があります、<xref:System.Text.Encoding>オブジェクト、たとえば、タグなし web データの不適切なタグまたはときビジネス保存されたランダム テキスト ファイルは、国際化に関する注意事項やその他のデータがありませんでした。</span><span class="sxs-lookup"><span data-stu-id="b1671-1548">You should use the BOM, because it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <xref:System.Text.Encoding> object, for example, untagged or improperly tagged web data or random text files stored when a business did not have international concerns or other data.</span></span> <span data-ttu-id="b1671-1549">データが一貫して正しく、できればをタグ utf-8 または utf-16 と、多くの場合、ユーザーの問題を回避できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1549">Often user problems might be avoided if data is consistently and properly tagged, preferably in UTF-8 or UTF-16.</span></span>  
  
 <span data-ttu-id="b1671-1550">エンコードの種類を提供する標準、BOM は冗長です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1550">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="b1671-1551">ただし、正しいエンコード ヘッダーを送信するサーバーのヘルプを使用できます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1551">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="b1671-1552">または、するとして使用できます、フォールバック エンコーディングが失われたそれ以外の場合に備えてです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1552">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="b1671-1553">BOM を使用するには、いくつか欠点があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1553">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="b1671-1554">たとえば、BOM を使用するデータベース フィールドを制限する方法を知ることが難しいがあります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1554">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="b1671-1555">ファイルの連結問題になる場合も、たとえばなどのファイルをマージするとデータの途中で不要な文字が最終的な形です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1555">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="b1671-1556">いくつかの欠点を行ってもただし、BOM の使用が強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1556">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="b1671-1557">バイト順とバイト順マークの詳細については、Unicode 標準を参照してください、 [Unicode ホームページ](http://go.microsoft.com/fwlink/?LinkId=37123)です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1557">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b1671-1558">エンコードされたバイト数が正しくデコードするためには、エンコード済みバイトのプリアンブルとプレフィックスにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1558">To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble.</span></span> <span data-ttu-id="b1671-1559">ただし、ほとんどのエンコーディングでは、preamble を提供しません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1559">However, most encodings do not provide a preamble.</span></span> <span data-ttu-id="b1671-1560">確実にエンコードされたバイト数が正常にデコードする必要がありますを使用して Unicode エンコーディングは、 <xref:System.Text.UTF8Encoding>、 <xref:System.Text.UnicodeEncoding>、または<xref:System.Text.UTF32Encoding>にプリアンブルを付加します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1560">To ensure that the encoded bytes are decoded properly, you should use a Unicode encoding, that is, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding>, with a preamble.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1561">次の例では、preamble に基づいてエンコーディングのバイト順を決定します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1561">The following example determines the byte order of the encoding based on the preamble.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/CPP/preamble.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/CS/preamble.cs#1)]
 [!code-vb[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/VB/preamble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetString">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1671-1562">派生クラスでオーバーライドされた場合、バイト シーケンスを文字列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1562">When overridden in a derived class, decodes a sequence of bytes into a string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (bytes As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b1671-1563">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1563">The byte array containing the sequence of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="b1671-1564">派生クラスでオーバーライドされた場合、指定したバイト配列に格納されているすべてのバイトを文字列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1564">When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="b1671-1565">指定したバイト シーケンスのデコード結果が格納されている文字列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1565">A string that contains the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1566">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>によって返されるオブジェクト、<xref:System.Text.Encoding.GetDecoder%2A>派生クラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1566">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> object returned by the <xref:System.Text.Encoding.GetDecoder%2A> method of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-1567">「解説」セクションを参照してください、<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>デコード手法と考慮事項については、リファレンス トピックです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1567">See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> reference topic for a discussion of decoding techniques and considerations.</span></span>  
  
 <span data-ttu-id="b1671-1568">なおの正確な動作、 <xref:System.Text.Encoding.GetString%2A> 、特定のメソッド<xref:System.Text.Encoding>の実装をに対して定義されているフォールバック ストラテジに依存<xref:System.Text.Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1568">Note that the precise behavior of the <xref:System.Text.Encoding.GetString%2A> method for a particular <xref:System.Text.Encoding> implementation depends on the fallback strategy defined for that <xref:System.Text.Encoding> object.</span></span> <span data-ttu-id="b1671-1569">詳細については、「フォールバック ストラテジを選択する」セクションを参照してください、 [.NET Framework の文字エンコーディング](~/docs/standard/base-types/character-encoding.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1569">For more information, see the "Choosing a Fallback Strategy" section of the [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1570">次の例では、utf-8 でエンコードされた文字列を読み取りますで表されるバイナリ ファイルから、<xref:System.IO.FileStream>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1570">The following example reads a UTF-8 encoded string from a binary file represented by a <xref:System.IO.FileStream> object.</span></span> <span data-ttu-id="b1671-1571">2,048 バイトよりも小さいファイル、バイト配列と呼び出しにファイル全体の内容を読み取りますが、<xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%29>のデコードを実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b1671-1571">For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the <xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%29> method to perform the decoding.</span></span> <span data-ttu-id="b1671-1572">大きなファイルの場合、2,048 バイトが一度に読み取るを呼び出し、バイト配列に、<xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>文字数を決定するメソッドは、配列に含まれを呼び出して、<xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType>のデコードを実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b1671-1572">For larger files, it reads 2,048 bytes at a time into a byte array, calls the <xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to determine how many characters are contained in the array, and then calls the <xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType> method to perform the decoding.</span></span>  
  
 [!code-csharp[System.Text.Encoding.GetString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetString/CS/getstring1.cs#2)]
 [!code-vb[System.Text.Encoding.GetString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetString/VB/getstring1.vb#2)]  
  
 <span data-ttu-id="b1671-1573">Utf8Example.txt をという名前の utf-8 でエンコードされたファイルを保存するか、次のテキストを使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1573">The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.</span></span>  
  
```  
  
This is a UTF-8-encoded file that contains primarily Latin text, although it   
does list the first twelve letters of the Russian (Cyrillic) alphabet:  
  
А б в г д е ё ж з и й к  
  
The goal is to save this file, then open and decode it as a binary stream.  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1671-1574">このバイト配列には、無効な Unicode コード ポイントが含まれています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1574">The byte array contains invalid Unicode code points.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1575"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1575"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1576">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1576">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1577">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1577">-and-</span></span>  
  
 <span data-ttu-id="b1671-1578"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1578"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString (bytes As ReadOnlySpan(Of Byte)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString(System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b1671-1579">バイト配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="b1671-1579">A pointer to a byte array.</span></span></param>
        <param name="byteCount"><span data-ttu-id="b1671-1580">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1580">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="b1671-1581">派生クラスでオーバーライドされた場合、指定したアドレスで始まる指定したバイト数を文字列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1581">When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string.</span></span></summary>
        <returns><span data-ttu-id="b1671-1582">指定したバイト シーケンスのデコード結果が格納されている文字列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1582">A string that contains the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1583"><xref:System.Text.Encoding.GetString%2A>メソッドがバイト配列へのネイティブ ポインターがある場合は、パフォーマンスを最適化するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1583">The <xref:System.Text.Encoding.GetString%2A> method is designed to optimize performance when you have a native pointer to a byte array.</span></span> <span data-ttu-id="b1671-1584">管理対象のバイト配列を作成し、デコードし、代わりには、中間オブジェクトを作成することがなく代わりにこのメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1584">Instead of creating a managed byte array and then decoding it, you can instead call this method without having to create any intermediate objects.</span></span>  
  
 <span data-ttu-id="b1671-1585">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>によって返されるオブジェクト、<xref:System.Text.Encoding.GetDecoder%2A>派生クラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1585">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> object returned by the <xref:System.Text.Encoding.GetDecoder%2A> method of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-1586">「解説」セクションを参照してください、<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>デコード手法と考慮事項については、リファレンス トピックです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1586">See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> reference topic for a discussion of decoding techniques and considerations.</span></span>  
  
 <span data-ttu-id="b1671-1587">なおの正確な動作、 <xref:System.Text.Encoding.GetString%2A> 、特定のメソッド<xref:System.Text.Encoding>の実装をに対して定義されているフォールバック ストラテジに依存<xref:System.Text.Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1587">Note that the precise behavior of the <xref:System.Text.Encoding.GetString%2A> method for a particular <xref:System.Text.Encoding> implementation depends on the fallback strategy defined for that <xref:System.Text.Encoding> object.</span></span> <span data-ttu-id="b1671-1588">詳細については、「フォールバック ストラテジを選択する」セクションを参照してください、 [.NET Framework の文字エンコーディング](~/docs/standard/base-types/character-encoding.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1588">For more information, see the "Choosing a Fallback Strategy" section of the [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) topic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1589"><paramref name="bytes" /> が null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1589"><paramref name="bytes" /> is a null pointer.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1590"><paramref name="byteCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1590"><paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1591">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1591">A   fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1592">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1592">-and-</span></span>  
  
 <span data-ttu-id="b1671-1593"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1593"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="b1671-1594">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1594">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="b1671-1595">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1595">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="b1671-1596">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="b1671-1596">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="b1671-1597">派生クラスでオーバーライドされた場合、指定したバイト配列に格納されているバイト シーケンスを文字列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1597">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="b1671-1598">指定したバイト シーケンスのデコード結果が格納されている文字列。</span><span class="sxs-lookup"><span data-stu-id="b1671-1598">A string that contains the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1599">変換するデータが (データのストリームからの読み取り) などの連続ブロック内でのみ使用可能な場合、またはデータの量が非常に大きいのでより小さなブロックに分割する必要がある、使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.Encoding.GetEncoder%2A>メソッド、派生クラスのそれぞれに、します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1599">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="b1671-1600">「解説」セクションを参照してください、<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>デコード手法と考慮事項については、リファレンス トピックです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1600">See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> reference topic for a discussion of decoding techniques and considerations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1601">次の例では、utf-8 でエンコードされた文字列を読み取りますで表されるバイナリ ファイルから、<xref:System.IO.FileStream>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1601">The following example reads a UTF-8 encoded string from a binary file that is represented by a <xref:System.IO.FileStream> object.</span></span> <span data-ttu-id="b1671-1602">2,048 バイトよりも小さいファイル、バイト配列と呼び出しにファイル全体の内容を読み取りますが、<xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>のデコードを実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b1671-1602">For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the <xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to perform the decoding.</span></span> <span data-ttu-id="b1671-1603">大きなファイルの場合、2,048 バイトが一度に読み取るを呼び出し、バイト配列に、<xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>文字数を決定するメソッドは、配列に含まれを呼び出して、<xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType>のデコードを実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b1671-1603">For larger files, it reads 2,048 bytes at a time into a byte array, calls the <xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to determine how many characters are contained in the array, and then calls the <xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType> method to perform the decoding.</span></span>  
  
 [!code-csharp[System.Text.Encoding.GetString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetString/CS/getstring2.cs#3)]
 [!code-vb[System.Text.Encoding.GetString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetString/VB/getstring2.vb#3)]  
  
 <span data-ttu-id="b1671-1604">Utf8Example.txt をという名前の utf-8 でエンコードされたファイルを保存するか、次のテキストを使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1604">The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.</span></span>  
  
```  
  
This is a UTF-8-encoded file that contains primarily Latin text, although it   
does list the first twelve letters of the Russian (Cyrillic) alphabet:  
  
А б в г д е ё ж з и й к  
  
The goal is to save this file, then open and decode it as a binary stream.  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1671-1605">このバイト配列には、無効な Unicode コード ポイントが含まれています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1605">The byte array contains invalid Unicode code points.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1606"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1606"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1671-1607"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1607"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1671-1608">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1608">-or-</span></span>  
  
 <span data-ttu-id="b1671-1609"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1609"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="b1671-1610">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="b1671-1610">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="b1671-1611">および</span><span class="sxs-lookup"><span data-stu-id="b1671-1611">-and-</span></span>  
  
 <span data-ttu-id="b1671-1612"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1612"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HeaderName">
      <MemberSignature Language="C#" Value="public virtual string HeaderName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.HeaderName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HeaderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HeaderName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1613">派生クラスでオーバーライドされた場合、メール エージェント ヘッダー タグと共に使用できる現在のエンコーディングの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1613">When overridden in a derived class, gets a name for the current encoding that can be used with mail agent header tags.</span></span></summary>
        <value><span data-ttu-id="b1671-1614">メール エージェント ヘッダー タグと共に使用する、現在の <see cref="T:System.Text.Encoding" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="b1671-1614">A name for the current <see cref="T:System.Text.Encoding" /> to use with mail agent header tags.</span></span>  
  
 <span data-ttu-id="b1671-1615">- または -</span><span class="sxs-lookup"><span data-stu-id="b1671-1615">-or-</span></span>  
  
 <span data-ttu-id="b1671-1616">現在の <see cref="T:System.Text.Encoding" /> が使用できない場合は、空の文字列 ("")。</span><span class="sxs-lookup"><span data-stu-id="b1671-1616">An empty string (""), if the current <see cref="T:System.Text.Encoding" /> cannot be used.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1617">ヘッダー名のエンコードを必要がある場合を呼び出す必要があります、<xref:System.Text.Encoding.GetEncoding%2A>メソッドを<xref:System.Text.Encoding.HeaderName%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1617">If you need an encoding for a header name, you should call the <xref:System.Text.Encoding.GetEncoding%2A> method with the <xref:System.Text.Encoding.HeaderName%2A> property.</span></span> <span data-ttu-id="b1671-1618">多くの場合、メソッドの呼び出しで提供されるテスト エンコーディングから別のエンコーディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1618">Often the method retrieves a different encoding from the test encoding furnished in the call.</span></span> <span data-ttu-id="b1671-1619">通常、電子メール アプリケーションのみでは、このようなエンコーディングを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1619">Generally only email applications need to retrieve such an encoding.</span></span>  
  
 <span data-ttu-id="b1671-1620">場合によっては、値で、<xref:System.Text.Encoding.BodyName%2A>プロパティは、そのエンコーディングを定義する国際標準に対応しています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1620">In some cases, the value of the <xref:System.Text.Encoding.BodyName%2A> property corresponds to the international standard that defines that encoding.</span></span> <span data-ttu-id="b1671-1621">実装は、その標準に完全に準拠しているわけです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1621">This doesn't mean that the implementation complies in full with that standard.</span></span>  
  
 <span data-ttu-id="b1671-1622">なお<xref:System.Text.Encoding.WebName%2A>を使用してエンコード方法を説明する名前を返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1622">Note that <xref:System.Text.Encoding.WebName%2A> returns the name to use to describe an encoding.</span></span> <span data-ttu-id="b1671-1623"><xref:System.Text.Encoding.HeaderName%2A>プロパティは、エンコードが異なる場合があります方が適切な電子メール アプリケーションなどを定義します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1623">The <xref:System.Text.Encoding.HeaderName%2A> property defines a different encoding that might work better for an email application, for example.</span></span> <span data-ttu-id="b1671-1624">ただし、エンコードを定義するプロパティの使用は推奨されません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1624">However, use of the property to define the encoding is not recommended.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1625">次の例は、エンコーディングごとに異なる名前を取得し、エンコーディングとは異なる 1 つまたは複数の名前を持つを表示<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1625">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b1671-1626">表示<xref:System.Text.Encoding.EncodingName%2A>しますが、それに対しては比較されません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1626">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAlwaysNormalized">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1671-1627">現在のエンコーディングが常に正規化されるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1627">Gets a value indicating whether the current encoding is always normalized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAlwaysNormalized">
      <MemberSignature Language="C#" Value="public bool IsAlwaysNormalized ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAlwaysNormalized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.IsAlwaysNormalized" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAlwaysNormalized () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAlwaysNormalized();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1671-1628">現在のエンコーディングが、既定の正規形を使用して常に正規化されるかどうかを示す値。</span><span class="sxs-lookup"><span data-stu-id="b1671-1628">Gets a value indicating whether the current encoding is always normalized, using the default normalization form.</span></span></summary>
        <returns>
          <span data-ttu-id="b1671-1629">現在の <see cref="T:System.Text.Encoding" /> が常に正規化される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-1629"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> is always normalized; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b1671-1630">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1630">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1631">既定の正規化フォームは<xref:System.Text.NormalizationForm.FormC>、可能な場合は、シーケンスをプライマリ複合文字の置換後に、正式な分解を使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1631">The default normalization form is <xref:System.Text.NormalizationForm.FormC>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.NormalizationForm" />
      </Docs>
    </Member>
    <Member MemberName="IsAlwaysNormalized">
      <MemberSignature Language="C#" Value="public virtual bool IsAlwaysNormalized (System.Text.NormalizationForm form);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAlwaysNormalized(valuetype System.Text.NormalizationForm form) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAlwaysNormalized (form As NormalizationForm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAlwaysNormalized(System::Text::NormalizationForm form);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="form" Type="System.Text.NormalizationForm" />
      </Parameters>
      <Docs>
        <param name="form"><span data-ttu-id="b1671-1632"><see cref="T:System.Text.NormalizationForm" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="b1671-1632">One of the <see cref="T:System.Text.NormalizationForm" /> values.</span></span></param>
        <summary><span data-ttu-id="b1671-1633">派生クラスでオーバーライドされた場合、現在のエンコーディングが、指定した正規形を使用して常に正規化されるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1633">When overridden in a derived class, gets a value indicating whether the current encoding is always normalized, using the specified normalization form.</span></span></summary>
        <returns>
          <span data-ttu-id="b1671-1634">現在の <see langword="true" /> オブジェクトが、指定した <see cref="T:System.Text.Encoding" /> 値を使用して常に正規化される場合は <see cref="T:System.Text.NormalizationForm" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-1634"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> object is always normalized using the specified <see cref="T:System.Text.NormalizationForm" /> value; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b1671-1635">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1635">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1636">既定の正規化フォームは<xref:System.Text.NormalizationForm.FormC>、可能な場合は、シーケンスをプライマリ複合文字の置換後に、正式な分解を使用します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1636">The default normalization form is <xref:System.Text.NormalizationForm.FormC>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.NormalizationForm" />
      </Docs>
    </Member>
    <Member MemberName="IsBrowserDisplay">
      <MemberSignature Language="C#" Value="public virtual bool IsBrowserDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBrowserDisplay" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsBrowserDisplay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsBrowserDisplay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsBrowserDisplay { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1637">派生クラスでオーバーライドされた場合、ブラウザー クライアントが現在のエンコーディングを使用してコンテンツを表示できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1637">When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for displaying content.</span></span></summary>
        <value>
          <span data-ttu-id="b1671-1638">ブラウザー クライアントが現在の <see cref="T:System.Text.Encoding" /> を使用してコンテンツを表示できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-1638"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by browser clients for displaying content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1671-1639">次の例では、各エンコードのブール型プロパティの値を確認します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1639">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsBrowserSave" />
      </Docs>
    </Member>
    <Member MemberName="IsBrowserSave">
      <MemberSignature Language="C#" Value="public virtual bool IsBrowserSave { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBrowserSave" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsBrowserSave" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsBrowserSave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsBrowserSave { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1640">派生クラスでオーバーライドされた場合、ブラウザー クライアントが現在のエンコーディングを使用してコンテンツを保存できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1640">When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for saving content.</span></span></summary>
        <value>
          <span data-ttu-id="b1671-1641">ブラウザー クライアントが現在の <see cref="T:System.Text.Encoding" /> を使用してコンテンツを保存できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-1641"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by browser clients for saving content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1671-1642">次の例では、各エンコードのブール型プロパティの値を確認します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1642">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsBrowserDisplay" />
      </Docs>
    </Member>
    <Member MemberName="IsMailNewsDisplay">
      <MemberSignature Language="C#" Value="public virtual bool IsMailNewsDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMailNewsDisplay" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsMailNewsDisplay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMailNewsDisplay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMailNewsDisplay { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1643">派生クラスでオーバーライドされた場合、メール クライアントおよびニュース クライアントが現在のエンコーディングを使用してコンテンツを表示できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1643">When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for displaying content.</span></span></summary>
        <value>
          <span data-ttu-id="b1671-1644">メール クライアントおよびニュース クライアントが現在の <see cref="T:System.Text.Encoding" /> を使用してコンテンツを表示できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-1644"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by mail and news clients for displaying content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1671-1645">次の例では、各エンコードのブール型プロパティの値を確認します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1645">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsMailNewsDisplay" />
      </Docs>
    </Member>
    <Member MemberName="IsMailNewsSave">
      <MemberSignature Language="C#" Value="public virtual bool IsMailNewsSave { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMailNewsSave" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsMailNewsSave" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMailNewsSave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMailNewsSave { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1646">派生クラスでオーバーライドされた場合、メール クライアントおよびニュース クライアントが現在のエンコーディングを使用してコンテンツを保存できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1646">When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for saving content.</span></span></summary>
        <value>
          <span data-ttu-id="b1671-1647">メール クライアントおよびニュース クライアントが現在の <see langword="true" /> を使用してコンテンツを保存できる場合は <see cref="T:System.Text.Encoding" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-1647"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by mail and news clients for saving content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1671-1648">次の例では、各エンコードのブール型プロパティの値を確認します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1648">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsMailNewsSave" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1649">派生クラスでオーバーライドされた場合、現在のエンコーディングが読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1649">When overridden in a derived class, gets a value indicating whether the current encoding is read-only.</span></span></summary>
        <value>
          <span data-ttu-id="b1671-1650">現在の <see langword="true" /> が読み取り専用の場合は <see cref="T:System.Text.Encoding" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-1650"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b1671-1651">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1651">The default is <see langword="true" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSingleByte">
      <MemberSignature Language="C#" Value="public virtual bool IsSingleByte { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleByte" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsSingleByte" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSingleByte As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSingleByte { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1652">派生クラスでオーバーライドされた場合、現在のエンコーディングが 1 バイトのコード ポイントを使用するかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1652">When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</span></span></summary>
        <value>
          <span data-ttu-id="b1671-1653">現在の <see langword="true" /> が 1 バイトのコード ポイントを使用する場合は <see cref="T:System.Text.Encoding" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b1671-1653"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> uses single-byte code points; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1654">1 バイトのエンコード、たとえば、 <xref:System.Text.ASCIIEncoding>、このプロパティを取得`true`です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1654">For a single-byte encoding, for example, <xref:System.Text.ASCIIEncoding>, this property retrieves `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b1671-1655">値で、アプリケーションの動作に注意する必要があります<xref:System.Text.Encoding.IsSingleByte%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1655">You should be careful in what your application does with the value for <xref:System.Text.Encoding.IsSingleByte%2A>.</span></span> <span data-ttu-id="b1671-1656">エンコードの続行方法であると仮定は、正しくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1656">An assumption of how an Encoding will proceed may still be wrong.</span></span> <span data-ttu-id="b1671-1657">たとえば、Windows 1252 がの値を持つ`true`の<xref:System.Text.Encoding.IsSingleByte%2A?displayProperty=nameWithType>Encoding.GetMaxByteCount(1) 2 が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1657">For example, Windows-1252 has a value of `true` for <xref:System.Text.Encoding.IsSingleByte%2A?displayProperty=nameWithType>, but Encoding.GetMaxByteCount(1) returns 2.</span></span> <span data-ttu-id="b1671-1658">これは、メソッドが以前のデコーダー操作にサロゲートが残っている可能性があると見なされるためです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1658">This is because the method considers potential leftover surrogates from a previous decoder operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1659">次の例では、各エンコードのブール型プロパティの値を確認します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1659">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Preamble">
      <MemberSignature Language="C#" Value="public virtual ReadOnlySpan&lt;byte&gt; Preamble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; Preamble" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Preamble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Preamble As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property ReadOnlySpan&lt;System::Byte&gt; Preamble { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterProvider">
      <MemberSignature Language="C#" Value="public static void RegisterProvider (System.Text.EncodingProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterProvider(class System.Text.EncodingProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterProvider (provider As EncodingProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterProvider(System::Text::EncodingProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Text.EncodingProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b1671-1660">追加の文字エンコーディングへのアクセスを提供する <see cref="T:System.Text.EncodingProvider" /> のサブクラス。</span><span class="sxs-lookup"><span data-stu-id="b1671-1660">A subclass of <see cref="T:System.Text.EncodingProvider" /> that provides access to additional character encodings.</span></span></param>
        <summary><span data-ttu-id="b1671-1661">エンコーディング プロバイダーを登録します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1661">Registers an encoding provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1662"><xref:System.Text.Encoding.RegisterProvider%2A>メソッドから派生するクラスを登録できます。<xref:System.Text.EncodingProvider>文字の場合はそれらをサポートしないプラットフォームで利用可能なエンコーディングをによりします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1662">The <xref:System.Text.Encoding.RegisterProvider%2A> method allows you to register a class derived from <xref:System.Text.EncodingProvider> that makes character encodings available on a platform that does not otherwise support them.</span></span> <span data-ttu-id="b1671-1663">いずれかの呼び出しをサポートしているエンコーディングを取得できるエンコーディング プロバイダーを登録すると、<xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>オーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1663">Once the encoding provider is registered, the encodings that it supports can be retrieved by calling any <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> overload.</span></span> <span data-ttu-id="b1671-1664">複数のエンコーディング プロバイダーがある場合、<xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>メソッドは以降で最も最近登録されている各プロバイダーから指定されたエンコーディングを取得しようとしています。</span><span class="sxs-lookup"><span data-stu-id="b1671-1664">If there are multiple encoding providers, the <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> method attempts to retrieve a specified encoding from each provider starting with the one most recently registered.</span></span>

<span data-ttu-id="b1671-1665">使用して、エンコーディング プロバイダーの登録、<xref:System.Text.Encoding.RegisterProvider%2A>メソッドの動作を変更も、 [Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>)と[EncodingProvider.GetEncoding (Int32、EncoderFallback、DecoderFallback)](xref:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback))メソッドの引数を渡されるときに`0`:</span><span class="sxs-lookup"><span data-stu-id="b1671-1665">Registering an encoding provider by using the <xref:System.Text.Encoding.RegisterProvider%2A> method also modifies the behavior of the [Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) and [EncodingProvider.GetEncoding(Int32, EncoderFallback, DecoderFallback)](xref:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)) methods when passed an argument of `0`:</span></span>

- <span data-ttu-id="b1671-1666">登録済みのプロバイダーがある場合、<xref:System.Text.CodePagesEncodingProvider>メソッドは、Windows オペレーティング システムで実行されているときに、システムのアクティブなコード ページに一致するエンコーディングを返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1666">If the registered provider is the <xref:System.Text.CodePagesEncodingProvider>, the method returns the encoding that matches the system active code page when running on the Windows operating system.</span></span>

- <span data-ttu-id="b1671-1667">カスタム エンコーディング プロバイダーでは、どの場合に返されるエンコードを選択できますいずれかの<xref:System.Text.Encoding.GetEncoding%2A>メソッドのオーバー ロードがの引数を渡しました`0`です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1667">A custom encoding provider can choose which encoding to return when either of these <xref:System.Text.Encoding.GetEncoding%2A> method overloads is passed an argument of `0`.</span></span> <span data-ttu-id="b1671-1668">プロバイダーは返さないことでエンコードすることもできます、<xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType>メソッドの戻り値`null`です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1668">The provider can also choose to not return an encoding by having the <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> method return `null`.</span></span> 
  
 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]<span data-ttu-id="b1671-1669"> 1 つのエンコーディング プロバイダーを含む<xref:System.Text.CodePagesEncodingProvider>、により、利用可能なエンコーディングがあるが、完全な .NET Framework 内にあるでは使用できない[!INCLUDE[net_v46](~/includes/net-v46-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1669"> includes one encoding provider, <xref:System.Text.CodePagesEncodingProvider>, that makes the encodings available that are present in the full .NET Framework but are not available in [!INCLUDE[net_v46](~/includes/net-v46-md.md)].</span></span> <span data-ttu-id="b1671-1670">既定では、 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] Unicode エンコーディング、ASCII、およびコード ページ 28591 のみをサポートします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1670">By default, [!INCLUDE[net_v46](~/includes/net-v46-md.md)] only supports the Unicode encodings, ASCII, and code page 28591.</span></span>  
  
 <span data-ttu-id="b1671-1671">同じエンコーディング プロバイダーは複数の呼び出しで使用されているかどうか、<xref:System.Text.Encoding.RegisterProvider%2A>メソッド、最初のメソッドの呼び出しのみが、プロバイダーを登録します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1671">If the same encoding provider is used in multiple calls to the <xref:System.Text.Encoding.RegisterProvider%2A> method, only the first method call registers the provider.</span></span> <span data-ttu-id="b1671-1672">後続の呼び出しは無視されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1672">Subsequent calls are ignored.</span></span>  
  
 <span data-ttu-id="b1671-1673">場合、<xref:System.Text.Encoding.RegisterProvider%2A>でも同じエンコードを処理する複数のプロバイダーを登録するメソッドが呼び出すと、最後の登録済みのプロバイダーがすべてのエンコードとデコード操作で使用されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1673">If the <xref:System.Text.Encoding.RegisterProvider%2A> method is called to register multiple providers that handle the same encoding, the last registered provider is the used for all encoding and decoding operations.</span></span> <span data-ttu-id="b1671-1674">以前に登録済みの任意のプロバイダーは無視されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1674">Any previously registered providers are ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b1671-1675"><paramref name="provider" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1675"><paramref name="provider" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Text.CodePagesEncodingProvider" />
        <altmember cref="T:System.Text.EncodingProvider" />
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding Unicode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding Unicode" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Unicode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Unicode As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ Unicode { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1676">リトル エンディアン バイト順を使用する UTF-16 形式のエンコーディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1676">Gets an encoding for the UTF-16 format using the little endian byte order.</span></span></summary>
        <value><span data-ttu-id="b1671-1677">リトル エンディアンのバイト順を使用する UTF-16 形式のエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="b1671-1677">An encoding for the UTF-16 format using the little endian byte order.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1678">.NET Framework とどの Unicode を使用するエンコーディングの詳細については、サポートされているエンコーディングの詳細については、次を参照してください。 [.NET Framework の文字エンコーディング](~/docs/standard/base-types/character-encoding.md)です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1678">For information about the encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="b1671-1679"><xref:System.Text.UnicodeEncoding>このプロパティによって返されるオブジェクトには、アプリの適切な動作はありません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1679">The <xref:System.Text.UnicodeEncoding> object that is returned by this property may not have the appropriate behavior for your app.</span></span> <span data-ttu-id="b1671-1680">置換フォールバックを使用して各エンコードできない文字列とデコードできない各バイトを置き換える、疑問符 (?) を ("?") 文字です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1680">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</span></span> <span data-ttu-id="b1671-1681">代わりに、呼び出すことができます、 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> 、リトル エンディアンをインスタンス化するコンス トラクター<xref:System.Text.UnicodeEncoding>がフォールバックは、いずれかのオブジェクト、<xref:System.Text.EncoderFallbackException>または<xref:System.Text.DecoderFallbackException>、次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1681">Instead, you can call the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a little endian <xref:System.Text.UnicodeEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.Unicode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.unicode/cs/unicode1.cs#2)]
 [!code-vb[System.Text.Encoding.Unicode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.unicode/vb/unicode1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1682">次の例は、文字配列をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1682">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UnicodeEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.BigEndianUnicode" />
      </Docs>
    </Member>
    <Member MemberName="UTF32">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF32 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF32" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF32" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF32 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF32 { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1683">リトル エンディアン バイト順を使用する UTF-32 形式のエンコーディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1683">Gets an encoding for the UTF-32 format using the little endian byte order.</span></span></summary>
        <value><span data-ttu-id="b1671-1684">リトル エンディアンのバイト順を使用する UTF-32 形式のエンコーディング オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1684">An  encoding object for the UTF-32 format using the little endian byte order.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1685"><xref:System.Text.UTF32Encoding>このプロパティによって返されるオブジェクトには、アプリの適切な動作はありません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1685">The <xref:System.Text.UTF32Encoding> object that is returned by this property may not have the appropriate behavior for your app.</span></span> <span data-ttu-id="b1671-1686">置換フォールバックを使用して各エンコードできない文字列とデコードできないバイトがごとに、Unicode REPLACEMENT CHARACTER (U + FFFE) を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1686">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with the Unicode REPLACEMENT CHARACTER (U+FFFE).</span></span> <span data-ttu-id="b1671-1687">代わりに、呼び出すことができます、<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>をインスタンス化するコンス トラクター、<xref:System.Text.UTF32Encoding>がフォールバックは、いずれかのオブジェクト、<xref:System.Text.EncoderFallbackException>または<xref:System.Text.DecoderFallbackException>、次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1687">Instead, you can call the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a <xref:System.Text.UTF32Encoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.UTF32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf32/cs/encoding.utf32.1.cs#1)]
 [!code-vb[System.Text.Encoding.UTF32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf32/vb/encoding.utf32.1.vb#1)]  
  
 <span data-ttu-id="b1671-1688">リトル エンディアン バイト順の詳細については、次を参照してください。、<xref:System.Text.Encoding>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="b1671-1688">For a discussion of little endian byte order, see the <xref:System.Text.Encoding> class topic.</span></span>  
  
 <span data-ttu-id="b1671-1689">.NET Framework とどの Unicode を使用するエンコーディングの詳細については、サポートされているエンコーディングの詳細については、次を参照してください。 [.NET Framework の文字エンコーディング](~/docs/standard/base-types/character-encoding.md)です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1689">For information about the encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1690">次の例は、文字配列をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1690">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF32Encoding" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
        <altmember cref="P:System.Text.Encoding.BigEndianUnicode" />
      </Docs>
    </Member>
    <Member MemberName="UTF7">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF7" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF7 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF7 { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1691">UTF-7 形式のエンコーディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1691">Gets an encoding for the UTF-7 format.</span></span></summary>
        <value><span data-ttu-id="b1671-1692">UTF-7 形式のエンコード。</span><span class="sxs-lookup"><span data-stu-id="b1671-1692">An encoding for the UTF-7 format.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1693">Utf-7 エンコードは、7 ビットは、NNTP など、一部の電子メール アプリケーションをこれまでに制限されている環境で主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1693">UTF-7 encoding is used primarily in environments that historically have been restricted to 7 bits, such as NNTP and some email applications.</span></span> <span data-ttu-id="b1671-1694">堅牢性とセキュリティの問題のため使用しないで UTF7 8 ビット環境でのエンコード、utf-8 エンコードで代わりを使用できます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1694">Because of issues with robustness and security, you should not use UTF7 encoding in 8-bit environments where UTF-8 encoding can be used instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1695">次の例は、文字配列をエンコードするために必要なバイト数を決定し、文字をエンコード、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1695">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF7Encoding" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
      </Docs>
    </Member>
    <Member MemberName="UTF8">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF8 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF8" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF8 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF8 { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1696">UTF-8 形式のエンコーディングを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1696">Gets an encoding for the UTF-8 format.</span></span></summary>
        <value><span data-ttu-id="b1671-1697">UTF-8 形式のエンコード。</span><span class="sxs-lookup"><span data-stu-id="b1671-1697">An encoding for the UTF-8 format.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1698">このプロパティを返します、 <xref:System.Text.UTF8Encoding> 1 文字を 1 ~ 4 バイトのシーケンスを Unicode (UTF エンコード) 文字をエンコードして、Unicode (UTF エンコード) 文字に UTF 8 でエンコードされたバイト配列をデコードするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1698">This property returns a <xref:System.Text.UTF8Encoding> object that encodes Unicode (UTF-16-encoded) characters into a sequence of one to four bytes per character, and that decodes a UTF-8-encoded byte array to Unicode (UTF-16-encoded) characters.</span></span> <span data-ttu-id="b1671-1699">.NET Framework、およびどの Unicode エンコードを使用するのでサポートされている文字エン コードの詳細については、次を参照してください。 [.NET Framework の文字エンコーディング](~/docs/standard/base-types/character-encoding.md)です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1699">For information about the character encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="b1671-1700"><xref:System.Text.UTF8Encoding>このプロパティによって返されるオブジェクトは、アプリの適切な動作をいない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b1671-1700">The <xref:System.Text.UTF8Encoding> object that is returned by this property might not have the appropriate behavior for your app.</span></span>  
  
-   <span data-ttu-id="b1671-1701">返します、 <xref:System.Text.UTF8Encoding> Unicode バイト順マーク (BOM) を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1671-1701">It returns a <xref:System.Text.UTF8Encoding> object that provides a Unicode byte order mark (BOM).</span></span> <span data-ttu-id="b1671-1702">BOM を提供しません UTF8 エンコーディング、インスタンス化するには、任意のオーバー ロードを呼び出して、<xref:System.Text.UTF8Encoding.%23ctor%2A>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1702">To instantiate a UTF8 encoding that doesn't provide a BOM, call any overload of the <xref:System.Text.UTF8Encoding.%23ctor%2A> constructor.</span></span>  
  
-   <span data-ttu-id="b1671-1703">返します、<xref:System.Text.UTF8Encoding>置換フォールバックを使用して各エンコードできない文字列とデコードできない各バイトを疑問符 () に置き換えるオブジェクト ("?") 文字です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1703">It returns a <xref:System.Text.UTF8Encoding> object that uses replacement fallback to replace each string that it can't encode and each byte that it can't decode with a question mark ("?") character.</span></span> <span data-ttu-id="b1671-1704">代わりに、呼び出すことができます、<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>をインスタンス化するコンス トラクター、<xref:System.Text.UTF8Encoding>がフォールバックは、いずれかのオブジェクト、<xref:System.Text.EncoderFallbackException>または<xref:System.Text.DecoderFallbackException>、次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1704">Instead, you can call the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a <xref:System.Text.UTF8Encoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
     [!code-csharp[System.Text.Encoding.UTF8#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf8/cs/encoding.utf8.1.cs#1)]
     [!code-vb[System.Text.Encoding.UTF8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf8/vb/encoding.utf8.1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1705">次の例では、次の文字で構成される配列を定義します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1705">The following example defines an array that consists of the following characters:</span></span>  
  
-   <span data-ttu-id="b1671-1706">LATIN SMALL LETTER Z (U +0 007A)</span><span class="sxs-lookup"><span data-stu-id="b1671-1706">LATIN SMALL LETTER Z (U+007A)</span></span>  
  
-   <span data-ttu-id="b1671-1707">ラテン文字の小さい文字で表される、(U +0 0061)</span><span class="sxs-lookup"><span data-stu-id="b1671-1707">LATIN SMALL LETTER A (U+0061)</span></span>  
  
-   <span data-ttu-id="b1671-1708">結合 BREVE (U +0 0306)</span><span class="sxs-lookup"><span data-stu-id="b1671-1708">COMBINING BREVE (U+0306)</span></span>  
  
-   <span data-ttu-id="b1671-1709">鋭角 (U +0 01FD) で LATIN SMALL LETTER AE</span><span class="sxs-lookup"><span data-stu-id="b1671-1709">LATIN SMALL LETTER AE WITH ACUTE (U+01FD)</span></span>  
  
-   <span data-ttu-id="b1671-1710">ギリシャ文字の小文字 BETA (U +0 03B2)</span><span class="sxs-lookup"><span data-stu-id="b1671-1710">GREEK SMALL LETTER BETA (U+03B2)</span></span>  
  
-   <span data-ttu-id="b1671-1711">ギリシャ語 ACROPHONIC ATTIC 1 桁 STATERS (U +0 10154) を形成するサロゲート ペア (u+d800 U + DD54)。</span><span class="sxs-lookup"><span data-stu-id="b1671-1711">A surrogate pair (U+D800 U+DD54) that forms GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS (U+10154).</span></span>  
  
 <span data-ttu-id="b1671-1712">各文字の utf-16 コード単位を表示し、utf-8 エンコーダーでエンコードした文字配列に必要なバイト数を決定します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1712">It displays the UTF-16 code units of each character and determines the number of bytes required by a UTF-8 encoder to encode the character array.</span></span> <span data-ttu-id="b1671-1713">文字をエンコードし、結果として得られる UTF で 8 でエンコードされたバイト数を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1713">It then encodes the characters and displays the resulting UTF-8-encoded bytes.</span></span>  
  
 [!code-csharp[System.Text.Encoding.UTF8#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf8/cs/example1.cs#2)]
 [!code-vb[System.Text.Encoding.UTF8#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf8/vb/example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF8Encoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WebName">
      <MemberSignature Language="C#" Value="public virtual string WebName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WebName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.WebName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property WebName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ WebName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1714">派生クラスでオーバーライドされた場合、現在のエンコーディングの IANA (Internet Assigned Numbers Authority) に登録されている名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1714">When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</span></span></summary>
        <value><span data-ttu-id="b1671-1715">現在の <see cref="T:System.Text.Encoding" /> の IANA 名。</span><span class="sxs-lookup"><span data-stu-id="b1671-1715">The IANA name for the current <see cref="T:System.Text.Encoding" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1716"><xref:System.Text.Encoding.WebName%2A>プロパティと同じ、<xref:System.Text.EncodingInfo.Name%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b1671-1716">The <xref:System.Text.Encoding.WebName%2A> property is the same as the <xref:System.Text.EncodingInfo.Name%2A> property.</span></span>  
  
 <span data-ttu-id="b1671-1717">なお<xref:System.Text.Encoding.WebName%2A>のエンコーディングの IANA 登録の名前を返します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1717">Note that <xref:System.Text.Encoding.WebName%2A> returns an IANA-registered name for the encoding.</span></span> <span data-ttu-id="b1671-1718">その値が、標準の名前である場合は、エンコーディングの実装がその標準に完全に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1718">When its value is the name of a standard, the implementation of the encoding might not conform in full to that standard.</span></span> <span data-ttu-id="b1671-1719"><xref:System.Text.Encoding.HeaderName%2A>プロパティは、エンコードが異なる場合があります方が適切な電子メールのヘッダーを定義します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1719">The <xref:System.Text.Encoding.HeaderName%2A> property defines a different encoding that might work better for email headers.</span></span> <span data-ttu-id="b1671-1720">ただし、ほとんどのアプリを使用する必要があります<xref:System.Text.Encoding.WebName%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1720">However, most apps should use <xref:System.Text.Encoding.WebName%2A> instead.</span></span>  
  
 <span data-ttu-id="b1671-1721">IANA の詳細についてを参照してください[www.iana.org](https://www.iana.org/)です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1721">For more information on the IANA, go to [www.iana.org](https://www.iana.org/).</span></span>  
  
 <span data-ttu-id="b1671-1722"><xref:System.Text.Encoding.WebName%2A?displayProperty=nameWithType>と同じ、<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>によって返される<xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1722">The <xref:System.Text.Encoding.WebName%2A?displayProperty=nameWithType> is the same as the <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType> returned by <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b1671-1723">Web の名前の一部は、重複しています。「解説」を参照してください<xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1723">Some of the web names are duplicates; see the remarks for <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1724">次の例が含まれています、 <xref:System.Text.Encoding.WebName%2A> HTML ヘッダー。</span><span class="sxs-lookup"><span data-stu-id="b1671-1724">The following example includes the <xref:System.Text.Encoding.WebName%2A> in an HTML header.</span></span>  
  
 [!code-cpp[System.Text.Encoding.WebName#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.WebName/CPP/webname.cpp#1)]
 [!code-csharp[System.Text.Encoding.WebName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.WebName/CS/webname.cs#1)]
 [!code-vb[System.Text.Encoding.WebName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.WebName/VB/webname.vb#1)]  
  
 <span data-ttu-id="b1671-1725">次の例は、エンコーディングごとに異なる名前を取得し、エンコーディングとは異なる 1 つまたは複数の名前を持つを表示<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1671-1725">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b1671-1726">表示<xref:System.Text.Encoding.EncodingName%2A>しますが、それに対しては比較されません。</span><span class="sxs-lookup"><span data-stu-id="b1671-1726">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
      </Docs>
    </Member>
    <Member MemberName="WindowsCodePage">
      <MemberSignature Language="C#" Value="public virtual int WindowsCodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WindowsCodePage" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.WindowsCodePage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property WindowsCodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WindowsCodePage { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b1671-1727">派生クラスでオーバーライドされた場合、現在のエンコーディングに最も厳密に対応する Windows オペレーティング システムのコード ページを取得します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1727">When overridden in a derived class, gets the Windows operating system code page that most closely corresponds to the current encoding.</span></span></summary>
        <value><span data-ttu-id="b1671-1728">現在の <see cref="T:System.Text.Encoding" /> に最も厳密に対応する、Windows オペレーティング システムのコード ページ。</span><span class="sxs-lookup"><span data-stu-id="b1671-1728">The Windows operating system code page that most closely corresponds to the current <see cref="T:System.Text.Encoding" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1671-1729">このプロパティは、フォント ファミリを決定するなど、Windows 多言語 (MLang) Api は、互換性のため提供されます。</span><span class="sxs-lookup"><span data-stu-id="b1671-1729">This property is provided for compatibility with the Windows MultiLanguage (MLang) APIs, for example, in determining font families.</span></span> <span data-ttu-id="b1671-1730">グローバリゼーション、Unicode エンコーディングのいずれかを使用して勧め代わりにします。</span><span class="sxs-lookup"><span data-stu-id="b1671-1730">For globalization, using one of the Unicode encodings is recommended instead.</span></span> <span data-ttu-id="b1671-1731">使用をお勧めも<xref:System.Text.Encoding.WebName%2A>の代わりに<xref:System.Text.Encoding.WindowsCodePage%2A>コード ページを特定します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1731">It is also recommended to use <xref:System.Text.Encoding.WebName%2A> instead of <xref:System.Text.Encoding.WindowsCodePage%2A> to identify the code page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1671-1732">次の例では、各エンコーディングに最も密接に対応する Windows コード ページを決定します。</span><span class="sxs-lookup"><span data-stu-id="b1671-1732">The following example determines the Windows code page that most closely corresponds to each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.CodePage#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/CPP/codepage.cpp#1)]
 [!code-csharp[System.Text.Encoding.CodePage#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/CS/codepage.cs#1)]
 [!code-vb[System.Text.Encoding.CodePage#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/VB/codepage.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.EncodingInfo.CodePage" />
      </Docs>
    </Member>
  </Members>
</Type>