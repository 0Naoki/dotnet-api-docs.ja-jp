<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnicodeEncoding.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac537bb8ffd133cbb1ddd3c3fdd2f593086d39584aa.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37bb8ffd133cbb1ddd3c3fdd2f593086d39584aa</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Represents a UTF-16 encoding of Unicode characters.</source>
          <target state="translated">Unicode 文字の UTF-16 エンコーディングを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</source>
          <target state="translated">エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</source>
          <target state="translated">デコードは、エンコードされたバイトのシーケンスを Unicode 文字のセットに変換するプロセスです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> assigns a code point (a number) to each character in every supported script.</source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 標準<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept>コード ポイント (数値) をすべてサポートされているスクリプト内の各文字を割り当てます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>A Unicode Transformation Format (UTF) is a way to encode that code point.</source>
          <target state="translated">Unicode 変換形式 (UTF) は、そのコード ポイントをエンコードする方法です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> uses the following UTFs:</source>
          <target state="translated"><bpt id="p1">[</bpt>Unicode 標準<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept>次 UTFs を使用します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>UTF-8, which represents each code point as a sequence of one to four bytes.</source>
          <target state="translated">Utf-8、1 ~ 4 バイトのシーケンスとして各コード ポイントを表します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</source>
          <target state="translated">Utf-16、1 ~ 2 の 16 ビット整数のシーケンスとして各コード ポイントを表します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>UTF-32, which represents each code point as a 32-bit integer.</source>
          <target state="translated">Utf-32、32 ビット整数値としては、各コード ポイントを表します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>For more information about the UTFs and other encodings supported by <ph id="ph1">&lt;xref:System.Text&gt;</ph>, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</source>
          <target state="translated">詳細については、UTFs とでサポートされているその他のエンコーディングの<ph id="ph1">&lt;xref:System.Text&gt;</ph>を参照してください<bpt id="p1">[</bpt>.NET Framework の文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class represents a UTF-16 encoding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>クラスは、utf-16 エンコードを表します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first).</source>
          <target state="translated">エンコーダーは、ビッグ エンディアン バイト順を使用できます (最上位バイト最初) またはリトル エンディアン バイト順 (最下位バイト最初)。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</source>
          <target state="translated">たとえば、(コード ポイント u+0041) としてシリアル化 Latin Capital Letter 次のように 16 進数)。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Big endian byte order: 00 00 00 41</source>
          <target state="translated">ビッグ エンディアン バイト順: 00 00 00 41</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Little endian byte order: 41 00 00 00</source>
          <target state="translated">リトル エンディアン バイト順: 41 00 00 00</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>It is generally more efficient to store Unicode characters using the native byte order of a particular platform.</source>
          <target state="translated">これは、特定のプラットフォームのネイティブのバイト順を使用して Unicode 文字を格納する方が効率的です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</source>
          <target state="translated">たとえば、Intel のコンピューターなど、リトル エンディアンのプラットフォームでリトル エンディアン バイト順を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>クラスは、Windows コード ページ 1200 (リトル エンディアン バイト順) と 1201 (ビッグ エンディアン バイト順) に対応します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>You can determine the "endianness" of a particular architecture by calling the <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">呼び出して、特定のアーキテクチャ「エンディアン」を指定できます、<ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Optionally, the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</source>
          <target state="translated">必要に応じて、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクトの先頭には、エンコード プロセスからバイトのシーケンスにバイトの配列をあるバイト順マーク (BOM) を提供します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</source>
          <target state="translated">Preamble、バイト順マーク (BOM) が含まれている場合、バイト順および変換形式または UTF 決定デコーダーが役立ちます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>If the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> instance is configured to provide a BOM, you can retrieve it by calling the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method; otherwise, the method returns an empty array.</source>
          <target state="translated">場合、 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 、BOM を指定するインスタンスが構成されている、呼び出すことによって取得することができます、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph>メソッドです。 空の配列を返しますそれ以外の場合。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Note that, even if a <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class do not do this automatically.</source>
          <target state="translated">なお、場合でも、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクトは、BOM のサポートのために構成されている、適切な; としてエンコードされたバイト ストリームの先頭の BOM を含める必要がありますのエンコード方法、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>クラスしないで自動的にします。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>To enable error detection and to make the class instance more secure, you should instantiate a <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and setting its <ph id="ph3">`throwOnInvalidBytes`</ph> argument to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">エラーの検出を有効にして、クラスのインスタンスのセキュリティを強化するには、インスタンスを作成、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクトを呼び出すことによって、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph>コンス トラクターと設定、<ph id="ph3">`throwOnInvalidBytes`</ph>に渡す引数<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>With error detection, a method that detects an invalid sequence of characters or bytes throws a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">エラーの検出、無効な文字またはバイトのシーケンスを検出するメソッドがスローされます、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</source>
          <target state="translated">エラーの検出、例外はスローされませんし、無効なシーケンスは、通常は無視されます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</source>
          <target state="translated">インスタンス化することができます、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>するかどうか、バイト順マーク (BOM) を提供する、ビッグ エンディアンまたはリトル エンディアン エンコードするかどうか、およびエラーの検出を有効にするかどうかに応じて、方法の数のオブジェクト。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The following table lists the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> constructors and the <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> properties that return a <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object.</source>
          <target state="translated">次の表、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>コンス トラクターと<ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph>を返すプロパティ、<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Member</source>
          <target state="translated">メンバー</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Endianness</source>
          <target state="translated">エンディアン</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>BOM</source>
          <target state="translated">BOM</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Error detection</source>
          <target state="translated">エラーの検出</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Big-endian</source>
          <target state="translated">ビッグ エンディアン</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Yes</source>
          <target state="translated">[はい]</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>No (Replacement fallback)</source>
          <target state="translated">なし (置換フォールバック)</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Little-endian</source>
          <target state="translated">リトル エンディアン</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Yes</source>
          <target state="translated">[はい]</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>No (Replacement fallback)</source>
          <target state="translated">なし (置換フォールバック)</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Little-endian</source>
          <target state="translated">リトル エンディアン</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Yes</source>
          <target state="translated">[はい]</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>No (Replacement fallback)</source>
          <target state="translated">なし (置換フォールバック)</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Configurable</source>
          <target state="translated">構成可能</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Configurable</source>
          <target state="translated">構成可能</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>No (Replacement fallback)</source>
          <target state="translated">なし (置換フォールバック)</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Configurable</source>
          <target state="translated">構成可能</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Configurable</source>
          <target state="translated">構成可能</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Configurable</source>
          <target state="translated">構成可能</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>メソッドでは、実際のエンコードを実行します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Likewise, the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetString%2A&gt;</ph> methods perform the actual decoding.</source>
          <target state="translated">同様に、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetString%2A&gt;</ph>メソッドでは、実際のデコードを実行します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> properties, respectively.</source>
          <target state="translated">エンコーダーまたはデコーダーを使用して、エンコードまたはデコード (100万文字のエンコードされた文字列に 100,000 文字セグメント単位で) などの複数のブロックにわたるデータと状態情報を保存できるため、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph>プロパティ、それぞれします。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The following example demonstrates how to encode a string of Unicode characters into a byte array by using a <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object.</source>
          <target state="translated">次の例では、バイト配列を使用して Unicode 文字の文字列をエンコードする方法、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The byte array is decoded into a string to demonstrate that there is no loss of data.</source>
          <target state="translated">バイト配列は、データの損失がないことを示すために文字列にデコードされます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</source>
          <target state="translated">次の例は、ファイルにエンコードされたバイトを書き込みます、バイト順マーク (BOM) をバイト ストリームをプレフィックスする点を除いて、前の 1 つとして、同じ文字列を使用します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>It then reads the file in two different ways: as a text file by using a <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> object; and as a binary file.</source>
          <target state="translated">これは、後、2 つの異なる方法でファイルを読み取ります: を使用してテキスト ファイルとして、<ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph>オブジェクトおよびバイナリ ファイルとして。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>As you would expect, in neither case is the BOM included in the newly read string.</source>
          <target state="translated">予想できるように、どちらの場合は、BOM 文字列に含める新しく読み取り。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor">
          <source>This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</source>
          <target state="translated">このコンス トラクターは、リトル エンディアン バイト順を使用して、Unicode バイト順マークを提供し、無効なエンコードが検出された場合、例外をスローしませんが、インスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor">
          <source>For security reasons, you should enable error detection by calling the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and setting its <ph id="ph2">`throwOnInvalidBytes`</ph> argument to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">セキュリティ上の理由から呼び出すことによってエラー検出を有効にする必要があります、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph>コンス トラクターと設定、<ph id="ph2">`throwOnInvalidBytes`</ph>引数<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor">
          <source>The following example demonstrates how to create a new <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> instance and display the name of the encoding.</source>
          <target state="translated">次の例では、新規作成<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>をインスタンス化し、エンコーディングの名前を表示します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to use the big endian byte order (most significant byte first), or <ph id="ph2">&lt;see langword="false" /&gt;</ph> to use the little endian byte order (least significant byte first).</source>
          <target state="translated">最上位バイトが先頭に配置されるビッグ エンディアン バイト順を使用する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。最下位バイトが先頭に配置されるリトル エンディアン バイト順を使用する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to specify that the <ph id="ph2">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> method returns a Unicode byte order mark; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> メソッドが Unicode バイト順マークを返すよう指定する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>Parameters specify whether to use the big endian byte order and whether the <ph id="ph1">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> method returns a Unicode byte order mark.</source>
          <target state="translated">パラメーターでは、ビッグ エンディアン バイト順を使用するかどうか、および <ph id="ph1">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> メソッドが Unicode バイト順マークを返すかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</source>
          <target state="translated">このコンス トラクターでは、無効なエンコードが検出されたときに例外をスローしないインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>For security reasons, you should enable error detection by calling the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and setting its <ph id="ph2">`throwOnInvalidBytes`</ph> argument to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">セキュリティ上の理由から呼び出すことによってエラー検出を有効にする必要があります、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph>コンス トラクターと設定、<ph id="ph2">`throwOnInvalidBytes`</ph>引数<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">`byteOrderMark`</ph> parameter controls the operation of the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`byteOrderMark`</ph>パラメーターの動作を制御する、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">`true`</ph>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</source>
          <target state="translated">場合<ph id="ph1">`true`</ph>、utf-16 形式で Unicode バイト順マーク (BOM) を格納するバイト配列を返します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">`false`</ph>, it returns a zero-length byte array.</source>
          <target state="translated">場合<ph id="ph1">`false`</ph>長さが 0 バイトの配列を返します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>However, setting <ph id="ph1">`byteOrderMark`</ph> to <ph id="ph2">`true`</ph> does not cause the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method to prefix the BOM at the beginning of the byte array, nor does it cause the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method to include the number of bytes in the BOM in the byte count.</source>
          <target state="translated">ただし、設定<ph id="ph1">`byteOrderMark`</ph>に<ph id="ph2">`true`</ph>は行われません、<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>とプレフィックスのバイト配列の先頭の BOM メソッドはこれが発生すると、<ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>をバイト数の BOM でのバイト数を含める方法です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>The following example demonstrates how to create a new <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> instance specifying whether to support little endian or big endian byte ordering and the Unicode byte order mark.</source>
          <target state="translated">次の例では、新しい<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>リトル エンディアンまたはビッグ エンディアン バイト順をサポートするかどうかを指定してインスタンスと、Unicode バイト オーダー マークします。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to use the big endian byte order (most significant byte first); <ph id="ph2">&lt;see langword="false" /&gt;</ph> to use the little endian byte order (least significant byte first).</source>
          <target state="translated">最上位バイトが先頭に配置されるビッグ エンディアン バイト順を使用する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。最下位バイトが先頭に配置されるリトル エンディアン バイト順を使用する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to specify that the <ph id="ph2">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> method returns a Unicode byte order mark; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> メソッドが Unicode バイト順マークを返すよう指定する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">無効なエンコーディングが検出された場合に、例外をスローすることを指定する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</source>
          <target state="translated">パラメーターでは、ビッグ エンディアン バイト順を使用するかどうか、Unicode バイト順マークを付加するかどうか、および無効なエンコーディングを検出したときに例外をスローするかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">`byteOrderMark`</ph> parameter controls the operation of the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`byteOrderMark`</ph>パラメーターの動作を制御する、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">`true`</ph>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</source>
          <target state="translated">場合<ph id="ph1">`true`</ph>、utf-16 形式で Unicode バイト順マーク (BOM) を格納するバイト配列を返します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">`false`</ph>, it returns a zero-length byte array.</source>
          <target state="translated">場合<ph id="ph1">`false`</ph>長さが 0 バイトの配列を返します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>However, setting <ph id="ph1">`byteOrderMark`</ph> to <ph id="ph2">`true`</ph> does not cause the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method to prefix the BOM at the beginning of the byte array, nor does it cause the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method to include the number of bytes in the BOM in the byte count.</source>
          <target state="translated">ただし、設定<ph id="ph1">`byteOrderMark`</ph>に<ph id="ph2">`true`</ph>は行われません、<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>とプレフィックスのバイト配列の先頭の BOM メソッドはこれが発生すると、<ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>をバイト数の BOM でのバイト数を含める方法です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>If the <ph id="ph1">`throwOnInvalidBytes`</ph> parameter is <ph id="ph2">`true`</ph>, a method that detects an invalid byte sequence throws <ph id="ph3">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">場合、<ph id="ph1">`throwOnInvalidBytes`</ph>パラメーターは<ph id="ph2">`true`</ph>、無効なバイト シーケンスを検出するためのメソッドをスロー<ph id="ph3">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</source>
          <target state="translated">それ以外の場合、メソッドが例外をスローしていないと、無効なシーケンスが無視されます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>For security reasons, your applications are recommended to use this constructor to create an instance of the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class and turn on error detection by setting <ph id="ph2">`throwOnInvalidBytes`</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">このコンス トラクターを使用してのインスタンスを作成するセキュリティ上の理由から、アプリケーションの推奨、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>クラスし、設定してエラーの検出を有効に<ph id="ph2">`throwOnInvalidBytes`</ph>に<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>The following example demonstrates the behavior of <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, both with error detection enabled and without.</source>
          <target state="translated">次の例での動作<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>、両方とない場合のエラー検出を有効にします。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="F:System.Text.UnicodeEncoding.CharSize">
          <source>Represents the Unicode character size in bytes.</source>
          <target state="translated">Unicode 文字サイズをバイト単位で表します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="F:System.Text.UnicodeEncoding.CharSize">
          <source>This field is a constant.</source>
          <target state="translated">このフィールドは定数です。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Text.UnicodeEncoding.CharSize">
          <source>The value of this field is a 32-bit signed constant with a value of 2.</source>
          <target state="translated">このフィールドの値は、32 ビット符号付きを持つ定数が 2 の値です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Text.UnicodeEncoding.CharSize">
          <source>The following example demonstrates how to return the value of <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.CharSize&gt;</ph> and display it.</source>
          <target state="translated">次の例は、の値を返す方法を示します<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.CharSize&gt;</ph>し表示します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>The object to compare with the current object.</source>
          <target state="translated">現在のオブジェクトと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> is equal to the current <ph id="ph2">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> object.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> が、現在の <ph id="ph2">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> オブジェクトと等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is an instance of <ph id="ph3">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> and is equal to the current object; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="value" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> のインスタンスで、現在のオブジェクトと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Two <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> objects are considered equal if all of the following conditions are true:</source>
          <target state="translated">2 つ<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクトは、以下の条件がすべて当てはまる場合、等しいと見なされます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Both objects use the same byte order (little-endian or big-endian).</source>
          <target state="translated">両方のオブジェクトは、同じバイト順序 (リトル エンディアンまたはビッグ エンディアン) を使用します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Both objects provide the byte order mark, or both do not.</source>
          <target state="translated">両方のオブジェクトでは、バイト順序マークを提供するかどうか。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Both objects use the same encoder fallback.</source>
          <target state="translated">両方のオブジェクトは、同じエンコーダー フォールバックを使用します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Both objects use the same decoder fallback.</source>
          <target state="translated">両方のオブジェクトは、同じデコーダー フォールバックを使用します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.Equals%2A&gt;</ph> method to test whether the current <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object is equal to a different <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object.</source>
          <target state="translated">次の例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.Equals%2A&gt;</ph>メソッドをテストするかどうか、現在<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクトが異なると等しい<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Five <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> objects are created and compared, and the results of the comparisons are displayed.</source>
          <target state="translated">5 つ<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクトが作成され、比較、および、比較の結果が表示されます。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Calculates the number of bytes produced by encoding a set of characters.</source>
          <target state="translated">文字のセットをエンコードすることによって生成されるバイト数を計算します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>The string that contains the set of characters to encode.</source>
          <target state="translated">エンコード対象の文字のセットを格納する文字列。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>Calculates the number of bytes produced by encoding the characters in the specified string.</source>
          <target state="translated">指定した文字列内の文字をエンコードすることによって生成されるバイト数を計算します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>The number of bytes produced by encoding the specified characters.</source>
          <target state="translated">指定した文字をエンコードすることによって生成されるバイト数。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">必要な厳密な配列のサイズを計算する<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>呼び出した結果のバイトを格納する、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">最大配列サイズを計算するには、呼び出します、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンス エラーの検出でこのメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29&gt;</ph> method.</source>
          <target state="translated">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、preamble のバイト数がによって返される値に反映されません、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29&gt;</ph> methods to calculate the maximum and actual number of bytes required to encode a string.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29&gt;</ph>文字列をエンコードするために必要なバイトの最大値と実際の数を計算する方法です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>It also displays the actual number of bytes required to store a byte stream with a byte order mark.</source>
          <target state="translated">実際のバイト ストリームにバイト オーダー マークの保存に必要なバイト数も表示されます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">結果のバイト数が、整数として返すことのできる最大数を超えています。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="s" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">エラーの検出が有効になり、<ph id="ph1">&lt;paramref name="s" /&gt;</ph> に無効な文字のシーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>A pointer to the first character to encode.</source>
          <target state="translated">エンコードする最初の文字へのポインター。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">エンコードする文字数。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</source>
          <target state="translated">指定した文字ポインターで始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>The number of bytes produced by encoding the specified characters.</source>
          <target state="translated">指定した文字をエンコードすることによって生成されるバイト数。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> requires to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">計算する正確な配列のサイズを<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>必要がありますを結果のバイトを格納するを呼び出す、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">最大配列サイズを計算するには、呼び出します、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンス エラーの検出でこのメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、preamble のバイト数がによって返される値に反映されません、<ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">結果のバイト数が、整数として返すことのできる最大数を超えています。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>Error detection is enabled and <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">エラー検出が有効であり、<ph id="ph1">&lt;paramref name="chars" /&gt;</ph> に無効な文字シーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The character array containing the set of characters to encode.</source>
          <target state="translated">エンコード対象の文字のセットを格納している文字配列。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The index of the first character to encode.</source>
          <target state="translated">エンコードする最初の文字のインデックス。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">エンコードする文字数。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</source>
          <target state="translated">指定した文字配列から文字のセットをエンコードすることによって生成されるバイト数を計算します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The number of bytes produced by encoding the specified characters.</source>
          <target state="translated">指定した文字をエンコードすることによって生成されるバイト数。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">必要な厳密な配列のサイズを計算する<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>結果のバイトを格納するアプリケーションを使用して<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">最大配列サイズを計算するには、呼び出します、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>With error detection enabled, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンスでエラーの検出が有効になっている、このメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、preamble のバイト数がによって返される値に反映されません、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The following example populates an array with a Latin uppercase and lowercase characters and calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to determine the number of bytes needed to encode the Latin lowercase characters.</source>
          <target state="translated">次の例は、配列ラテン文字の大文字と小文字および呼び出しは追加、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>ラテン文字の小文字の文字をエンコードするために必要なバイト数を調べます。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>It then displays this information along with the total number of bytes needed if a byte order mark is added.</source>
          <target state="translated">バイト順マークが追加された場合に必要なバイトの合計数と共に、この情報が表示されます。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>It compares this number with the value returned by the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</source>
          <target state="translated">この番号によって返される値と比較してその、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドで、ラテン文字の小文字の文字をエンコードするために必要なバイトの最大数を示します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The following example populates an array with a combination of Greek and Cyrillic characters and calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to determine the number of bytes needed to encode the Cyrillic characters.</source>
          <target state="translated">次の例は、ギリシャ語 (キリル) の文字と呼び出しの組み合わせを含む配列を設定、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>キリル文字をエンコードするために必要なバイト数を調べます。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>It then displays this information along with the total number of bytes needed if a byte order mark is added.</source>
          <target state="translated">バイト順マークが追加された場合に必要なバイトの合計数と共に、この情報が表示されます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>It compares this number with the value returned by the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</source>
          <target state="translated">この番号によって返される値と比較してその、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドで、キリル文字をエンコードするために必要なバイトの最大数を示します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> は <ph id="ph3">&lt;paramref name="chars" /&gt;</ph> において有効な範囲を表していません。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">結果のバイト数が、整数として返すことのできる最大数を超えています。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">エラーの検出が有効になり、<ph id="ph1">&lt;paramref name="chars" /&gt;</ph> に無効な文字のシーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Encodes a set of characters into a sequence of bytes.</source>
          <target state="translated">文字のセットをバイト シーケンスにエンコードします。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>A pointer to the first character to encode.</source>
          <target state="translated">エンコードする最初の文字へのポインター。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">エンコードする文字数。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>A pointer to the location at which to start writing the resulting sequence of bytes.</source>
          <target state="translated">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込む最大バイト数。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</source>
          <target state="translated">指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The actual number of bytes written at the location indicated by the <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> パラメーターによって示される位置に書き込む実際のバイト数。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> requires to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">計算する正確な配列のサイズを<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>必要がありますを結果のバイトを格納するを呼び出す、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">最大配列サイズを計算するには、呼び出します、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンス エラーの検出でこのメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph>または<ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph>オブジェクトによって提供される、<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph>または<ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</source>
          <target state="translated">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>メソッドはエンコードされたバイトのシーケンスの先頭に preamble を追加しません。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> または <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">エラーの検出が有効になり、<ph id="ph1">&lt;paramref name="chars" /&gt;</ph> に無効な文字のシーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> is less than the resulting number of bytes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> が結果のバイト数より少なくなっています。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The character array containing the set of characters to encode.</source>
          <target state="translated">エンコード対象の文字のセットを格納している文字配列。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index of the first character to encode.</source>
          <target state="translated">エンコードする最初の文字のインデックス。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">エンコードする文字数。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The byte array to contain the resulting sequence of bytes.</source>
          <target state="translated">結果のバイト シーケンスを格納するバイト配列。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index at which to start writing the resulting sequence of bytes.</source>
          <target state="translated">結果のバイト シーケンスを書き込む開始位置のインデックス。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Encodes a set of characters from the specified character array into the specified byte array.</source>
          <target state="translated">指定した文字配列に格納されている文字のセットを指定したバイト配列にエンコードします。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The actual number of bytes written into <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> に書き込まれた実際のバイト数。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">必要な厳密な配列のサイズを計算する<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>呼び出した結果のバイトを格納する、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">最大配列サイズを計算するには、呼び出します、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンス エラーの検出でこのメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph>または<ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph>によって提供される、<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph>メソッドまたは<ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</source>
          <target state="translated">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>メソッドはエンコードされたバイトのシーケンスの先頭に preamble を追加しません。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method to encode a range of characters from a <ph id="ph2">&lt;xref:System.String&gt;</ph> and store the encoded bytes in a range of elements in a byte array.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>から文字の範囲をエンコードする方法、<ph id="ph2">&lt;xref:System.String&gt;</ph>し、バイト配列の要素の範囲内でエンコードされたバイトを格納します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph>、<ph id="ph2">&lt;paramref name="charCount" /&gt;</ph>、または <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> および <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> は <ph id="ph3">&lt;paramref name="chars" /&gt;</ph> において有効な範囲を表していません。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> が <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> の有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">エラーの検出が有効になり、<ph id="ph1">&lt;paramref name="chars" /&gt;</ph> に無効な文字のシーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> to the end of the array to accommodate the resulting bytes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> には、<ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The string containing the set of characters to encode.</source>
          <target state="translated">エンコード対象の文字のセットを格納している文字列。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index of the first character to encode.</source>
          <target state="translated">エンコードする最初の文字のインデックス。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">エンコードする文字数。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The byte array to contain the resulting sequence of bytes.</source>
          <target state="translated">結果のバイト シーケンスを格納するバイト配列。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index at which to start writing the resulting sequence of bytes.</source>
          <target state="translated">結果のバイト シーケンスを書き込む開始位置のインデックス。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Encodes a set of characters from the specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> into the specified byte array.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> の文字セットを、指定したバイト配列にエンコードします。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The actual number of bytes written into <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> に書き込まれた実際のバイト数。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">必要な厳密な配列のサイズを計算する<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>呼び出した結果のバイトを格納する、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">最大配列サイズを計算するには、呼び出します、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンス エラーの検出でこのメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph>または<ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph>によって提供される、<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph>メソッドまたは<ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</source>
          <target state="translated">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、します。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>メソッドはエンコードされたバイトのシーケンスの先頭に preamble を追加しません。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The following example demonstrates how to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</source>
          <target state="translated">次の例では、Unicode 文字配列から要素の範囲をエンコードおよびバイト配列の要素の範囲内でエンコードされたバイトを格納する方法を示します。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph>、<ph id="ph2">&lt;paramref name="charCount" /&gt;</ph>、または <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> および <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> は <ph id="ph3">&lt;paramref name="chars" /&gt;</ph> において有効な範囲を表していません。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> が <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> の有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="s" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">エラーの検出が有効になり、<ph id="ph1">&lt;paramref name="s" /&gt;</ph> に無効な文字のシーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> to the end of the array to accommodate the resulting bytes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> には、<ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Calculates the number of characters produced by decoding a sequence of bytes.</source>
          <target state="translated">バイト シーケンスをデコードすることによって生成される文字数を計算します。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>A pointer to the first byte to decode.</source>
          <target state="translated">デコードする最初のバイトへのポインター。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">デコードするバイト数。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</source>
          <target state="translated">指定したバイト ポインターで始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The number of characters produced by decoding the specified sequence of bytes.</source>
          <target state="translated">指定したバイト シーケンスをデコードすることによって生成される文字数。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> requires to store the resulting characters, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">計算する正確な配列のサイズを<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>アプリケーションは、結果として得られる文字を格納する必要があります<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">配列の最大サイズを計算するアプリケーションを使用する必要があります<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンス エラーの検出でこのメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">結果のバイト数が、整数として返すことのできる最大数を超えています。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> contains an invalid sequence of bytes.</source>
          <target state="translated">エラーの検出が有効になり、<ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> に無効なバイト シーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          <target state="translated">デコード対象のバイト シーケンスが格納されたバイト配列。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the first byte to decode.</source>
          <target state="translated">デコードする最初のバイトのインデックス。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">デコードするバイト数。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</source>
          <target state="translated">指定したバイト配列からバイト シーケンスをデコードすることによって生成される文字数を計算します。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The number of characters produced by decoding the specified sequence of bytes.</source>
          <target state="translated">指定したバイト シーケンスをデコードすることによって生成される文字数。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">必要な厳密な配列のサイズを計算する<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>結果の文字を格納するアプリケーションを使用して<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">配列の最大サイズを計算するアプリケーションを使用する必要があります<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンス エラーの検出でこのメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method to return the number of characters produced by decoding a range of elements in a byte array using <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>範囲の要素を使用してバイト配列にデコードすることによって生成される文字数を返すメソッドを<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> は <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph> において有効な範囲を表していません。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">結果のバイト数が、整数として返すことのできる最大数を超えています。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> contains an invalid sequence of bytes.</source>
          <target state="translated">エラーの検出が有効になり、<ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> に無効なバイト シーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Decodes a sequence of bytes into a set of characters.</source>
          <target state="translated">バイト シーケンスを文字のセットにデコードします。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>A pointer to the first byte to decode.</source>
          <target state="translated">デコードする最初のバイトへのポインター。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">デコードするバイト数。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>A pointer to the location at which to start writing the resulting set of characters.</source>
          <target state="translated">結果の文字セットの書き込みを開始する位置へのポインター。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The maximum number of characters to write.</source>
          <target state="translated">書き込む文字の最大数。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</source>
          <target state="translated">指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The actual number of characters written at the location indicated by the <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> パラメーターによって示される位置に書き込む実際の文字数。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> requires to store the resulting characters, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">計算する正確な配列のサイズを<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>アプリケーションは、結果として得られる文字を格納する必要があります<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">配列の最大サイズを計算するアプリケーションを使用する必要があります<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンス エラーの検出でこのメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</source>
          <target state="translated">デコードするバイトの範囲には、バイト順マーク (BOM) が含まれています。 バイト配列が BOM で非対応型のメソッドによって返される場合は、文字 U + FFFE はこのメソッドによって返される文字配列に含まれています。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>You can remove it by calling the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">これを削除するには呼び出すことによって、<ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph>または<ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph>オブジェクトによって提供される、<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph>または<ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> または <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> contains an invalid sequence of bytes.</source>
          <target state="translated">エラーの検出が有効になり、<ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> に無効なバイト シーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> is less than the resulting number of characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> が結果の文字数より少なくなっています。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          <target state="translated">デコード対象のバイト シーケンスが格納されたバイト配列。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The index of the first byte to decode.</source>
          <target state="translated">デコードする最初のバイトのインデックス。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">デコードするバイト数。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The character array to contain the resulting set of characters.</source>
          <target state="translated">結果の文字のセットを格納する文字配列。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The index at which to start writing the resulting set of characters.</source>
          <target state="translated">結果の文字のセットを書き込む開始位置のインデックス。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Decodes a sequence of bytes from the specified byte array into the specified character array.</source>
          <target state="translated">指定したバイト配列に格納されているバイト シーケンスを指定した文字配列にデコードします。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The actual number of characters written into <ph id="ph1">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> に書き込まれた実際の文字数。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">必要な厳密な配列のサイズを計算する<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>結果の文字を格納するアプリケーションを使用して<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">配列の最大サイズを計算するアプリケーションを使用する必要があります<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンス エラーの検出でこのメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</source>
          <target state="translated">デコードするバイトの範囲には、バイト順マーク (BOM) が含まれています。 バイト配列が BOM で非対応型のメソッドによって返される場合は、文字 U + FFFE はこのメソッドによって返される文字配列に含まれています。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>You can remove it by calling the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">これを削除するには呼び出すことによって、<ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph>または<ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph>によって提供される、<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph>メソッドまたは<ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> method to decode a range of elements in a byte array and store the result in a character array.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>バイト配列の要素の範囲をデコードし、結果を文字配列に格納します。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph>、<ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph>、または <ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteindex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteindex" /&gt;</ph> および <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> は <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph> において有効な範囲を表していません。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> が <ph id="ph2">&lt;paramref name="chars" /&gt;</ph> の有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> contains an invalid sequence of bytes.</source>
          <target state="translated">エラーの検出が有効になり、<ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> に無効なバイト シーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="charIndex" /&gt;</ph> to the end of the array to accommodate the resulting characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> には、<ph id="ph2">&lt;paramref name="charIndex" /&gt;</ph> から配列の末尾までに十分なサイズがなく、結果の文字を格納できません。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</source>
          <target state="translated">UTF-16 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダーを取得します。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>A <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</source>
          <target state="translated">UTF-16 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換する <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph>メソッドと同様の方法で、文字のシーケンシャル ブロックにバイトのシーケンシャル ブロックを変換する、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>However, a <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> maintains state information between calls so it can correctly decode byte sequences that span blocks.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph>のブロックをまたぐバイト シーケンスを正しくデコードすることができますのでの呼び出しの間の状態情報を保持します。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph>もデータ ブロックの末尾にある末尾バイトを保持し、[次へ] のデコード操作で末尾バイトを使用します。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</source>
          <target state="translated">したがって、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph>の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためにネットワーク転送、ファイル操作に便利です。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>If error detection is enabled, that is, the <ph id="ph1">`throwOnInvalidBytes`</ph> parameter of the constructor is set to <ph id="ph2">`true`</ph>, error detection is also enabled in the <ph id="ph3">&lt;xref:System.Text.Decoder&gt;</ph> returned by this method.</source>
          <target state="translated">エラーの検出が有効なかどうか、つまり、<ph id="ph1">`throwOnInvalidBytes`</ph>にコンス トラクターのパラメーターが設定されている<ph id="ph2">`true`</ph>でエラーの検出が有効にも、<ph id="ph3">&lt;xref:System.Text.Decoder&gt;</ph>このメソッドによって返されます。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</source>
          <target state="translated">エラーの検出が有効にし、無効なシーケンスが発生した、デコーダーの状態が定義されていないと、処理が停止する必要があります。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</source>
          <target state="translated">次の例では、エンコーダーとデコーダーを使用して、(バイト単位) の配列に文字列をエンコードを文字の配列にバイトをデコードします。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</source>
          <target state="translated">Unicode 文字のシーケンスを UTF-16 でエンコードされたバイト シーケンスに変換するエンコーダーを取得します。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>A <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</source>
          <target state="translated">Unicode 文字のシーケンスを UTF-16 でエンコードされたバイト シーケンスに変換する <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method of this class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph>メソッドと同様のバイト数のシーケンシャル ブロックに文字のシーケンシャル ブロックを変換する、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>このクラスのメソッドです。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>However, a <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object maintains state information between calls so that it can correctly encode character sequences that span blocks.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph>のブロックをまたぐ文字シーケンスを正しくエンコードすることができるように、オブジェクトが呼び出しの間の状態情報を保持します。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph>オブジェクトはまた、データ ブロックの最後の文字を保持し、末尾の文字を使用して、次のエンコード操作します。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</source>
          <target state="translated">たとえば、データ ブロックが上位サロゲートで終了し、一致する下位サロゲートが [次へ] のデータ ブロック内にある可能性があります。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</source>
          <target state="translated">したがって、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph>の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためにネットワーク転送、ファイル操作に便利です。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>If error detection is enabled, that is, the <ph id="ph1">`throwOnInvalidBytes`</ph> parameter of the constructor is set to <ph id="ph2">`true`</ph>, error detection is also enabled in the <ph id="ph3">&lt;xref:System.Text.Encoder&gt;</ph> object returned by this method.</source>
          <target state="translated">エラーの検出が有効なかどうか、つまり、<ph id="ph1">`throwOnInvalidBytes`</ph>にコンス トラクターのパラメーターが設定されている<ph id="ph2">`true`</ph>でエラーの検出が有効にも、<ph id="ph3">&lt;xref:System.Text.Encoder&gt;</ph>このメソッドによって返されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</source>
          <target state="translated">エラーの検出が有効にし、無効なシーケンスが発生した、エンコーダーの状態が定義されていないと、処理が停止する必要があります。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</source>
          <target state="translated">次の例では、エンコーダーとデコーダーを使用して、(バイト単位) の配列に文字列をエンコードを文字の配列にバイトをデコードします。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetHashCode">
          <source>Returns the hash code for the current instance.</source>
          <target state="translated">現在のインスタンスのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetHashCode">
          <source>The hash code for the current <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> オブジェクトのハッシュ コード。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">エンコードする文字数。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>Calculates the maximum number of bytes produced by encoding the specified number of characters.</source>
          <target state="translated">指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>The maximum number of bytes produced by encoding the specified number of characters.</source>
          <target state="translated">指定した文字数をエンコードすることによって生成される最大バイト数。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">必要な厳密な配列のサイズを計算する<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>結果のバイトを格納するアプリケーションを使用して<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>.</source>
          <target state="translated">配列の最大サイズを計算するアプリケーションを使用する必要があります<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> retrieves a worst-case number, including the worst case for the currently selected <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 現在選択されている最悪のケースを含む、最悪のシナリオの数を取得<ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>If a fallback is chosen with a potentially large string, <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> can return large values.</source>
          <target state="translated">フォールバックがある可能性がある文字列で、選択されている場合<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>大きな値を返すことができます。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>In most cases, this method retrieves reasonable numbers for small strings.</source>
          <target state="translated">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を取得します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</source>
          <target state="translated">大きな文字列は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでエラーをキャッチするかを選択する必要があります。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>You might also want to consider a different approach using <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">使用して、別のアプローチを検討することも<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> has no relation to <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 関係を持たない<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>If your application needs a similar function to use with <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>, it should use <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">使用するような関数が、アプリケーションに必要なかどうかは<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>、それを使用する必要があります<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">`GetMaxByteCount(N)`</ph> is not necessarily the same value as <ph id="ph2">`N* GetMaxByteCount(1)`</ph>.</source>
          <target state="translated"><ph id="ph1">`GetMaxByteCount(N)`</ph> 必ずしもと同じ値ではない<ph id="ph2">`N* GetMaxByteCount(1)`</ph>です。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method to return the maximum number of bytes required to encode a specified number of characters.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>最大指定数の文字をエンコードするために必要なバイト数を返します。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">結果のバイト数が、整数として返すことのできる最大数を超えています。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">デコードするバイト数。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>Calculates the maximum number of characters produced by decoding the specified number of bytes.</source>
          <target state="translated">指定したバイト数をデコードすることによって生成される最大文字数を計算します。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>The maximum number of characters produced by decoding the specified number of bytes.</source>
          <target state="translated">指定したバイト数をデコードすることによって生成される最大文字数。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">必要な厳密な配列のサイズを計算する<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>結果の文字を格納するアプリケーションを使用して<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">配列の最大サイズを計算するアプリケーションを使用する必要があります<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>メソッドでは、メモリが少なく、通常が割り当てるときに、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>メソッドは通常、速く実行します。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> retrieves a worst-case number, including the worst case for the currently selected <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 現在選択されている最悪のケースを含む、最悪のシナリオの数を取得<ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>If a fallback is chosen with a potentially large string, <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> retrieves large values.</source>
          <target state="translated">フォールバックがある可能性がある文字列で、選択されている場合<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>大きな値を取得します。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>In most cases, this method retrieves reasonable numbers for small strings.</source>
          <target state="translated">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を取得します。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</source>
          <target state="translated">大きな文字列は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでエラーをキャッチするかを選択する必要があります。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>You might also want to consider a different approach using <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>.</source>
          <target state="translated">使用して、別のアプローチを検討することも<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> has no relation to <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 関係を持たない<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>If your application needs a similar function to use with <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>, it should use <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>.</source>
          <target state="translated">使用するような関数が、アプリケーションに必要なかどうかは<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>、それを使用する必要があります<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">`GetMaxCharCount(N)`</ph> is not necessarily the same value as <ph id="ph2">`N* GetMaxCharCount(1)`</ph>.</source>
          <target state="translated"><ph id="ph1">`GetMaxCharCount(N)`</ph> 必ずしもと同じ値ではない<ph id="ph2">`N* GetMaxCharCount(1)`</ph>です。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method to return the maximum number of characters produced by decoding a specified number of bytes.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>を文字の最大数を返すメソッドが、指定したバイト数をデコードすることによって生成されます。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">結果のバイト数が、整数として返すことのできる最大数を超えています。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</source>
          <target state="translated">このインスタンスのコンストラクターでバイト順マークを要求した場合は、UTF-16 形式でエンコードされた Unicode バイト順マークを返します。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>A byte array containing the Unicode byte order mark, if the <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> object is configured to supply one.</source>
          <target state="translated">Unicode のバイト順マークが格納されたバイト配列を提供するように <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> オブジェクトが構成されている場合には、そうしたバイト配列。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Otherwise, this method returns a zero-length byte array.</source>
          <target state="translated">それ以外の場合、このメソッドは長さがゼロのバイト配列を返します。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクトは、preamble、これは、エンコード プロセスからバイトのシーケンスにプレフィックスとして付けることができますをバイト配列を提供できます。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF.</source>
          <target state="translated">バイト順マーク (コード ポイント U+FEFF) でエンコードされたバイトのシーケンスの先頭には、バイト順および変換形式または UTF 決定デコーダーことができます。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</source>
          <target state="translated">Unicode バイト順マーク (BOM) が (16 進) に次のようにシリアル化されます。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Big endian byte order: FE FF</source>
          <target state="translated">ビッグ エンディアン バイト順: FE FF</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Little endian byte order: FF FE</source>
          <target state="translated">リトル エンディアン バイト順: FF FE</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object whose <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method returns a valid BOM in the following ways:</source>
          <target state="translated">インスタンス化することができます、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクト<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph>メソッドは、次の方法で有効な BOM を返します。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">取得することによって、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>によって返されるオブジェクト、<ph id="ph2">&lt;xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph3">&lt;xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>By calling the parameterless <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor&gt;</ph> constructor to instantiate a <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object.</source>
          <target state="translated">パラメーターなしで呼び出すことによって<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor&gt;</ph>をインスタンス化するコンス トラクター、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>By supplying <ph id="ph1">`true`</ph> as the value of the <ph id="ph2">`byteOrderMark`</ph> argument to the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29&gt;</ph> or <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructors.</source>
          <target state="translated">指定することによって<ph id="ph1">`true`</ph>の値として、<ph id="ph2">`byteOrderMark`</ph>への引数、<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29&gt;</ph>または<ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</source>
          <target state="translated">BOM を使用すると、それ以外の場合が失われた参照、エンコード、または不適切なタグなしなどのファイルのエンコーディングの特定の id にほぼため web データまたはランダム テキスト ファイルの場合、ビジネスの格納がありませんでした国際化に関する注意事項ことをお勧めします。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Often user problems might be avoided if data is consistently and properly tagged.</source>
          <target state="translated">データが一貫して適切なタグとは、多くの場合、ユーザーの問題を回避できる可能性があります。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>For standards that provide an encoding type, a BOM is somewhat redundant.</source>
          <target state="translated">エンコードの種類を提供する標準、BOM は冗長です。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>However, it can be used to help a server send the correct encoding header.</source>
          <target state="translated">ただし、正しいエンコード ヘッダーを送信するサーバーのヘルプを使用できます。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</source>
          <target state="translated">または、するとして使用できます、フォールバック エンコーディングが失われたそれ以外の場合に備えてです。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>There are some disadvantages to using a BOM.</source>
          <target state="translated">BOM を使用するには、いくつか欠点があります。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>For example, knowing how to limit the database fields that use a BOM can be difficult.</source>
          <target state="translated">たとえば、BOM を使用するデータベース フィールドを制限する方法を知ることが難しいがあります。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</source>
          <target state="translated">ファイルの連結問題になる場合も、たとえばなどのファイルをマージするとデータの途中で不要な文字が最終的な形です。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>In spite of the few disadvantages, however, the use of a BOM is highly recommended.</source>
          <target state="translated">いくつかの欠点を行ってもただし、BOM の使用が強くお勧めします。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble.</source>
          <target state="translated">エンコードされたバイト数が正しくデコードするためには、プリアンブルでエンコードされたバイトのストリームの先頭プレフィックスにする必要があります。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Note that the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>メソッドでエンコードされたバイトのシーケンスに BOM が付加されません以外の場合は、開発者の責任は、適切なバイト ストリームの先頭の BOM を指定します。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method to retrieve the Unicode byte order mark in big endian or little endian byte order for an instance of a <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph>ビッグ エンディアンまたはのインスタンスのリトル エンディアン バイト順で Unicode バイト順マークを取得する方法を<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>The following example instantiates two <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> objects, the first of which does not provide a BOM, and the second of which does.</source>
          <target state="translated">次の例では、2 つをインスタンス化<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>オブジェクト、BOM やの 2 番目の最初が提供されません。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method to write the BOM to a file before writing a Unicode-encoded string.</source>
          <target state="translated">呼び出して、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph>に Unicode でエンコードされた文字列を書き込む前に、BOM をファイルに書き込みます。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</source>
          <target state="translated">コンソール出力の例を示すように、2 番目のエンコーダーからのバイトを保存するファイルは最初より多く 3 つのバイト数。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>You can also compare the files by using the <ph id="ph1">`fc`</ph> command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</source>
          <target state="translated">使用して、ファイルを比較することもできます、<ph id="ph1">`fc`</ph>するか、コンソール ウィンドウ内のコマンドは 16 進表示モードを含むテキスト エディターでファイルを調査できます。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Note that when the file is opened in an editor that supports UTF-16 encoding, the BOM is not displayed.</source>
          <target state="translated">Utf-16 エンコーディングをサポートするエディターで、ファイルを開くときに、BOM が表示されないことに注意してください。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          <target state="translated">デコード対象のバイト シーケンスが格納されたバイト配列。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the first byte to decode.</source>
          <target state="translated">デコードする最初のバイトのインデックス。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">デコードするバイト数。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>Decodes a range of bytes from a byte array into a string.</source>
          <target state="translated">バイト配列に格納されているある範囲のバイトを文字列にデコードします。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object containing the results of decoding the specified sequence of bytes.</source>
          <target state="translated">指定したバイト シーケンスのデコード結果が格納されている <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">無効なシーケンス エラーの検出でこのメソッドをスローすると、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</source>
          <target state="translated">デコードするバイトの範囲には、バイト順マーク (BOM) が含まれています。 バイト配列が BOM で非対応型のメソッドによって返される場合は、文字 U + FFFE はこのメソッドによって返される文字配列に含まれています。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>You can remove it by calling the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">これを削除するには呼び出すことによって、<ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph>または<ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph>オブジェクトによって提供される、<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph>または<ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The following example initializes an array by calling the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</source>
          <target state="translated">次の例では、配列を初期化を呼び出して、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>バイト数がエンコードされた文字列とバイト順マーク (BOM) のサイズを追加するために必要なだけを調べます。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The example then calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method to store the BOM to the array before calling the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method to store the encoded bytes to the array.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph>は BOM を呼び出す前に、配列を格納する方法、<ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>配列にエンコードされたバイトを格納するメソッド。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The example then calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetString%2A&gt;</ph> method to decode the string.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetString%2A&gt;</ph>文字列をデコードします。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</source>
          <target state="translated">ここでは、デコードした文字列が異なること、元の文字列から 16 ビットのバイト順マーク U+FFFD で始まっているので注意してください。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</source>
          <target state="translated">つまり、2 つの文字列が、等しくないものとして比較されます、文字列が出力の場合は、BOM が表示されること、置換文字として"?"。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>To remove the BOM at the beginning of the string, you can call the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">文字列の先頭の BOM を削除するに呼び出せる、<ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> は <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph> において有効な範囲を表していません。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> contains an invalid sequence of bytes.</source>
          <target state="translated">エラーの検出が有効になり、<ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> に無効なバイト シーケンスが含まれています。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">フォールバックが発生しました (詳細な説明は、「<bpt id="p1">[</bpt>.NET Framework における文字エンコーディング<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>」をご覧ください)。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>-and-</source>
          <target state="translated">および</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> に設定されます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>