<Type Name="UnicodeEncoding" FullName="System.Text.UnicodeEncoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d2a94f37e28b665d37de1abced900273f0f295e0" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52376024" /></Metadata><TypeSignature Language="C#" Value="public class UnicodeEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnicodeEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UnicodeEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UnicodeEncoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnicodeEncoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UnicodeEncoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="25e5e-101">Unicode 文字の UTF-16 エンコーディングを表します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-101">Represents a UTF-16 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-102">エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="25e5e-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="25e5e-103">デコードは、Unicode 文字のセットにエンコードされたバイトのシーケンスを変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="25e5e-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="25e5e-104">[Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)コード ポイント (数値) をすべてサポートされているスクリプト内の各文字に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-104">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script.</span></span> <span data-ttu-id="25e5e-105">Unicode 変換形式 (UTF) は、そのコード ポイントをエンコードする方法です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-105">A Unicode Transformation Format (UTF) is a way to encode that code point.</span></span> <span data-ttu-id="25e5e-106">[Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)次 UTFs を使用します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-106">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:</span></span>  
  
-   <span data-ttu-id="25e5e-107">1 ~ 4 バイトのシーケンスとして各コード ポイントを表現する utf-8、します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-107">UTF-8, which represents each code point as a sequence of one to four bytes.</span></span>  
  
-   <span data-ttu-id="25e5e-108">Utf-16、各コード ポイントを表す 1 ~ 2 の 16 ビット整数のシーケンスとして。</span><span class="sxs-lookup"><span data-stu-id="25e5e-108">UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</span></span>  
  
-   <span data-ttu-id="25e5e-109">Utf-32、32 ビット整数として各コード ポイントを表します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-109">UTF-32, which represents each code point as a 32-bit integer.</span></span>  
  
 <span data-ttu-id="25e5e-110">UTFs とでサポートされているその他のエンコーディングの詳細については<xref:System.Text>を参照してください[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-110">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="25e5e-111"><xref:System.Text.UnicodeEncoding>クラスは、utf-16 エンコーディングを表します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-111">The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding.</span></span> <span data-ttu-id="25e5e-112">エンコーダーは、いずれかビッグ エンディアン バイト順を使用できます (最上位バイト最初) またはリトル エンディアン バイト順 (最下位バイト最初)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-112">The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first).</span></span> <span data-ttu-id="25e5e-113">たとえば、としてシリアル化されます (コード ポイント u+0041) Latin Capital Letter は (16 進数) で次に示します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-113">For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="25e5e-114">ビッグ エンディアン バイト順: 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="25e5e-114">Big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="25e5e-115">リトル エンディアン バイト順: 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="25e5e-115">Little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="25e5e-116">特定のプラットフォームのネイティブのバイト順を使用して Unicode 文字を格納する方が効率的になります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-116">It is generally more efficient to store Unicode characters using the native byte order of a particular platform.</span></span> <span data-ttu-id="25e5e-117">たとえば、intel ベースのコンピューターなど、リトル エンディアンのプラットフォームでリトル エンディアン バイト順を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-117">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span> <span data-ttu-id="25e5e-118"><xref:System.Text.UnicodeEncoding>クラスは、Windows コード ページ (リトル エンディアン バイト順) の 1200 と 1201 (ビッグ エンディアン バイト順) に対応します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-118">The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order).</span></span> <span data-ttu-id="25e5e-119">呼び出すことによって、特定のアーキテクチャの「エンディアン」を指定できます、<xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-119">You can determine the "endianness" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="25e5e-120">必要に応じて、<xref:System.Text.UnicodeEncoding>オブジェクトがバイト エンコーディング プロセスの結果のシーケンスに先頭バイトの配列、バイト順マーク (BOM) を提供します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-120">Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="25e5e-121">Preamble にバイト オーダー マーク (BOM) が含まれている場合は、バイト順と変換形式または UTF デコーダーが役立ちます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-121">If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span>  
  
 <span data-ttu-id="25e5e-122">場合、<xref:System.Text.UnicodeEncoding>インスタンスが BOM を提供するよう構成を呼び出すことで取得することができます、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>メソッド、メソッドは空の配列を返しますそれ以外の場合、します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-122">If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="25e5e-123">なお、場合でも、 <xref:System.Text.UnicodeEncoding> BOM のサポートのために、オブジェクトが構成されている、適切な; としてエンコードされたバイト ストリームの先頭の BOM を含める必要がありますのエンコード方法、<xref:System.Text.UnicodeEncoding>クラスしないで自動的にします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-123">Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically.</span></span>  
  
 <span data-ttu-id="25e5e-124">エラーの検出を有効にして、クラスのインスタンスのセキュリティを強化するには、インスタンス化、<xref:System.Text.UnicodeEncoding>オブジェクトを呼び出すことによって、<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターと設定、`throwOnInvalidBytes`引数`true`。</span><span class="sxs-lookup"><span data-stu-id="25e5e-124">To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UnicodeEncoding> object by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span> <span data-ttu-id="25e5e-125">エラーの検出の無効な文字またはバイトのシーケンスを検出するメソッドがスローされます、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-125">With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-126">エラーの検出、例外がスローされないと、無効なシーケンスは、通常は無視されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-126">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
 <span data-ttu-id="25e5e-127">インスタンス化することができます、<xref:System.Text.UnicodeEncoding>するかどうか、バイト順マーク (BOM) を提供する、ビッグ エンディアンまたはリトル エンディアン エンコーディングするかどうか、およびエラーの検出を有効にするかどうかに応じて、方法数のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="25e5e-127">You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</span></span> <span data-ttu-id="25e5e-128">次の表、<xref:System.Text.UnicodeEncoding>コンス トラクターと<xref:System.Text.Encoding>プロパティを返す、<xref:System.Text.UnicodeEncoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="25e5e-128">The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
|<span data-ttu-id="25e5e-129">メンバー</span><span class="sxs-lookup"><span data-stu-id="25e5e-129">Member</span></span>|<span data-ttu-id="25e5e-130">エンディアン</span><span class="sxs-lookup"><span data-stu-id="25e5e-130">Endianness</span></span>|<span data-ttu-id="25e5e-131">BOM</span><span class="sxs-lookup"><span data-stu-id="25e5e-131">BOM</span></span>|<span data-ttu-id="25e5e-132">エラーの検出</span><span class="sxs-lookup"><span data-stu-id="25e5e-132">Error detection</span></span>|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.BigEndianUnicode%2A>|<span data-ttu-id="25e5e-133">ビッグ エンディアン</span><span class="sxs-lookup"><span data-stu-id="25e5e-133">Big-endian</span></span>|<span data-ttu-id="25e5e-134">[はい]</span><span class="sxs-lookup"><span data-stu-id="25e5e-134">Yes</span></span>|<span data-ttu-id="25e5e-135">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="25e5e-135">No (Replacement fallback)</span></span>|  
|<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>|<span data-ttu-id="25e5e-136">リトル エンディアン</span><span class="sxs-lookup"><span data-stu-id="25e5e-136">Little-endian</span></span>|<span data-ttu-id="25e5e-137">[はい]</span><span class="sxs-lookup"><span data-stu-id="25e5e-137">Yes</span></span>|<span data-ttu-id="25e5e-138">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="25e5e-138">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="25e5e-139">リトル エンディアン</span><span class="sxs-lookup"><span data-stu-id="25e5e-139">Little-endian</span></span>|<span data-ttu-id="25e5e-140">[はい]</span><span class="sxs-lookup"><span data-stu-id="25e5e-140">Yes</span></span>|<span data-ttu-id="25e5e-141">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="25e5e-141">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|<span data-ttu-id="25e5e-142">構成可能</span><span class="sxs-lookup"><span data-stu-id="25e5e-142">Configurable</span></span>|<span data-ttu-id="25e5e-143">構成可能</span><span class="sxs-lookup"><span data-stu-id="25e5e-143">Configurable</span></span>|<span data-ttu-id="25e5e-144">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="25e5e-144">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="25e5e-145">構成可能</span><span class="sxs-lookup"><span data-stu-id="25e5e-145">Configurable</span></span>|<span data-ttu-id="25e5e-146">構成可能</span><span class="sxs-lookup"><span data-stu-id="25e5e-146">Configurable</span></span>|<span data-ttu-id="25e5e-147">構成可能</span><span class="sxs-lookup"><span data-stu-id="25e5e-147">Configurable</span></span>|  
  
 <span data-ttu-id="25e5e-148"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドでは、バイト数が、Unicode 文字のセットがエンコードされるかを判断します。 および<xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッドは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-148">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="25e5e-149">同様に、<xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドでは、文字数が発生するシーケンス (バイト単位) をデコードするかを判断します。 および<xref:System.Text.UnicodeEncoding.GetChars%2A>と<xref:System.Text.UnicodeEncoding.GetString%2A>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-149">Likewise, the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UnicodeEncoding.GetChars%2A> and <xref:System.Text.UnicodeEncoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="25e5e-150">エンコーダーまたはデコーダーがエンコードまたはデコード (100,000 文字のセグメントにエンコードされている 1,000,000 文字の文字列) などの複数のブロックにわたるデータと状態情報を保存、使用できる、<xref:System.Text.UnicodeEncoding.GetEncoder%2A>と<xref:System.Text.UnicodeEncoding.GetDecoder%2A>プロパティそれぞれします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-150">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> and <xref:System.Text.UnicodeEncoding.GetDecoder%2A> properties, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-151">次の例では、バイト配列を使用して Unicode 文字の文字列をエンコードする方法、<xref:System.Text.UnicodeEncoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="25e5e-151">The following example demonstrates how to encode a string of Unicode characters into a byte array by using a <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="25e5e-152">バイト配列は、データの損失がないことを示す文字列にデコードされます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-152">The byte array is decoded into a string to demonstrate that there is no loss of data.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="25e5e-153">ファイルにエンコードされたバイトを書き込みます、バイト順マーク (BOM) をバイト ストリームをプレフィックスする点を除いて次の例は、前と同じ文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-153">The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="25e5e-154">これは、後、2 つの方法でファイルを読み取ります: を使用してテキスト ファイルとして、<xref:System.IO.StreamReader>オブジェクト、およびバイナリ ファイルとして。</span><span class="sxs-lookup"><span data-stu-id="25e5e-154">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="25e5e-155">期待どおりには、どちらも新しく読み取り文字列には、BOM が含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-155">As you would expect, neither newly-read string includes the BOM.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF32Encoding" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.UTF7Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="25e5e-156">エンコーディングの理解</span><span class="sxs-lookup"><span data-stu-id="25e5e-156">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="25e5e-157"><see cref="T:System.Text.UnicodeEncoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-157">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="25e5e-158"><see cref="T:System.Text.UnicodeEncoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-158">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-159">このコンス トラクターは、リトル エンディアン バイト順を使用し、Unicode バイト順マークし、無効なエンコーディングが検出されたときに、例外をスローしないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-159">This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e5e-160">セキュリティ上の理由から、呼び出すことによってエラー検出を有効する必要があります、<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターと設定、`throwOnInvalidBytes`引数`true`します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-160">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-161">次の例は、新たに作成する方法を示します<xref:System.Text.UnicodeEncoding>インスタンスし、エンコーディングの名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-161">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><span data-ttu-id="25e5e-162">最上位バイトが先頭に配置されるビッグ エンディアン バイト順を使用する場合は <see langword="true" />。最下位バイトが先頭に配置されるリトル エンディアン バイト順を使用する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="25e5e-162"><see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><span data-ttu-id="25e5e-163"><see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> メソッドが Unicode バイト順マークを返すよう指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="25e5e-163"><see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="25e5e-164"><see cref="T:System.Text.UnicodeEncoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-164">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span> <span data-ttu-id="25e5e-165">パラメーターでは、ビッグ エンディアン バイト順を使用するかどうか、および <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> メソッドが Unicode バイト順マークを返すかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-165">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-166">このコンス トラクターは、無効なエンコーディングが検出されたときに例外をスローしないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-166">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e5e-167">セキュリティ上の理由から、呼び出すことによってエラー検出を有効する必要があります、<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターと設定、`throwOnInvalidBytes`引数`true`します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-167">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
 <span data-ttu-id="25e5e-168">`byteOrderMark`の操作を制御するパラメーター、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-168">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="25e5e-169">場合`true`、utf-16 形式で Unicode バイト順マーク (BOM) を格納するバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-169">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="25e5e-170">場合`false`長さが 0 バイトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-170">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="25e5e-171">ただし、設定`byteOrderMark`に`true`は行われません、<xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッド、バイト配列の先頭の BOM のプレフィックスを発生しても、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>バイト数をバイト数で BOM に含めるメソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-171">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-172">次の例は、新たに作成する方法を示します<xref:System.Text.UnicodeEncoding>リトル エンディアンまたはビッグ エンディアン バイト順がサポートするかどうかを指定してインスタンスと、Unicode バイト オーダー マークします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-172">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance specifying whether to support little endian or big endian byte ordering and the Unicode byte order mark.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><span data-ttu-id="25e5e-173">最上位バイトが先頭に配置されるビッグ エンディアン バイト順を使用する場合は <see langword="true" />。最下位バイトが先頭に配置されるリトル エンディアン バイト順を使用する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="25e5e-173"><see langword="true" /> to use the big endian byte order (most significant byte first); <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><span data-ttu-id="25e5e-174"><see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> メソッドが Unicode バイト順マークを返すよう指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="25e5e-174"><see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <param name="throwOnInvalidBytes"><span data-ttu-id="25e5e-175">無効なエンコーディングが検出された場合に、例外をスローすることを指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="25e5e-175"><see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="25e5e-176"><see cref="T:System.Text.UnicodeEncoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-176">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span> <span data-ttu-id="25e5e-177">パラメーターでは、ビッグ エンディアン バイト順を使用するかどうか、Unicode バイト順マークを付加するかどうか、および無効なエンコーディングを検出したときに例外をスローするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-177">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-178">`byteOrderMark`の操作を制御するパラメーター、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-178">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="25e5e-179">場合`true`、utf-16 形式で Unicode バイト順マーク (BOM) を格納するバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-179">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="25e5e-180">場合`false`長さが 0 バイトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-180">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="25e5e-181">ただし、設定`byteOrderMark`に`true`は行われません、<xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッド、バイト配列の先頭の BOM のプレフィックスを発生しても、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>バイト数をバイト数で BOM に含めるメソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-181">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="25e5e-182">場合、`throwOnInvalidBytes`パラメーターが`true`、無効なバイト シーケンスを検出するメソッドをスローします<xref:System.ArgumentException?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-182">If the `throwOnInvalidBytes` parameter is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=nameWithType>.</span></span> <span data-ttu-id="25e5e-183">それ以外の場合、メソッドが例外をスローしないと、無効なシーケンスが無視されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-183">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e5e-184">このコンス トラクターを使用してのインスタンスを作成するセキュリティ上の理由から、アプリケーションの推奨、<xref:System.Text.UnicodeEncoding>クラスを設定してエラーの検出を有効に`throwOnInvalidBytes`に`true`します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-184">For security reasons, your applications are recommended to use this constructor to create an instance of the <xref:System.Text.UnicodeEncoding> class and turn on error detection by setting `throwOnInvalidBytes` to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-185">次の例の動作を示します<xref:System.Text.UnicodeEncoding>エラーの検出を有効になっているのとなしの両方。</span><span class="sxs-lookup"><span data-stu-id="25e5e-185">The following example demonstrates the behavior of <xref:System.Text.UnicodeEncoding>, both with error detection enabled and without.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/VB/errordetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="CharSize">
      <MemberSignature Language="C#" Value="public const int CharSize = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CharSize = (2)" />
      <MemberSignature Language="DocId" Value="F:System.Text.UnicodeEncoding.CharSize" />
      <MemberSignature Language="VB.NET" Value="Public Const CharSize As Integer  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: int CharSize = 2;" />
      <MemberSignature Language="F#" Value="val mutable CharSize : int" Usage="System.Text.UnicodeEncoding.CharSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="25e5e-186">Unicode 文字サイズをバイト単位で表します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-186">Represents the Unicode character size in bytes.</span></span> <span data-ttu-id="25e5e-187">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-187">This field is a constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-188">このフィールドの値は、2 という値の 32 ビット符号付き定数です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-188">The value of this field is a 32-bit signed constant with a value of 2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-189">次の例は、の値を返す方法を示します<xref:System.Text.UnicodeEncoding.CharSize>し表示します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-189">The following example demonstrates how to return the value of <xref:System.Text.UnicodeEncoding.CharSize> and display it.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CPP/charsize.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CS/charsize.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/VB/charsize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="unicodeEncoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="25e5e-190">現在のオブジェクトと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="25e5e-190">The object to compare with the current object.</span></span></param>
        <summary><span data-ttu-id="25e5e-191">指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Text.UnicodeEncoding" /> オブジェクトと等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-191">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="25e5e-192"><paramref name="value" /> が <see cref="T:System.Text.UnicodeEncoding" /> のインスタンスで、現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="25e5e-192"><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UnicodeEncoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-193">2 つ<xref:System.Text.UnicodeEncoding>オブジェクトは、次の条件がすべて当てはまる場合に等価と見なされます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-193">Two <xref:System.Text.UnicodeEncoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="25e5e-194">両方のオブジェクトは、同じバイト順序 (リトル エンディアンまたはビッグ エンディアン) を使用します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-194">Both objects use the same byte order (little-endian or big-endian).</span></span>  
  
-   <span data-ttu-id="25e5e-195">両方のオブジェクトがバイト順マークを指定するか、両方はありません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-195">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="25e5e-196">両方のオブジェクトは、同じエンコーダー フォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-196">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="25e5e-197">両方のオブジェクトは、同じデコーダーのフォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-197">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-198">次の例では、使用する方法、<xref:System.Text.UnicodeEncoding.Equals%2A>メソッドをテストするかどうか、現在<xref:System.Text.UnicodeEncoding>オブジェクトが異なると等しい<xref:System.Text.UnicodeEncoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="25e5e-198">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.Equals%2A> method to test whether the current <xref:System.Text.UnicodeEncoding> object is equal to a different <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="25e5e-199">5 つ<xref:System.Text.UnicodeEncoding>オブジェクトが作成され、比較、および比較の結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-199">Five <xref:System.Text.UnicodeEncoding> objects are created and compared, and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="25e5e-200">文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-200">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="unicodeEncoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="25e5e-201">エンコード対象の文字のセットを格納する文字列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-201">The string that contains the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="25e5e-202">指定した文字列内の文字をエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-202">Calculates the number of bytes produced by encoding the characters in the specified string.</span></span></summary>
        <returns><span data-ttu-id="25e5e-203">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-203">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-204">必要な正確な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-204">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-205">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-205">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-206"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-206">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-207">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-207">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-208">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-208">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e5e-209">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-209">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="25e5e-210">バイト ストリームの先頭に、preamble を挿入 (など、一連のファイルに書き込まれるバイトの先頭に)、開発者の責任であり、preamble のバイト数がによって返される値に反映されていない、<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-210">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-211">次の例では、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>と<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>文字列をエンコードするために必要なバイトの最大値と実際の数を計算するメソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-211">The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="25e5e-212">実際のバイト順マークを付けるバイト ストリームを格納するために必要なバイト数も表示されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-212">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-213"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-213"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-214">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-214">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-215">エラーの検出が有効になり、<paramref name="s" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-215">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="25e5e-216">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-216">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-217">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-217">-and-</span></span> 
 <span data-ttu-id="25e5e-218"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-218"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="25e5e-219">エンコードする最初の文字へのポインター。</span><span class="sxs-lookup"><span data-stu-id="25e5e-219">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="25e5e-220">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-220">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="25e5e-221">指定した文字ポインターで始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-221">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="25e5e-222">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-222">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-223">計算する正確な配列のサイズを<xref:System.Text.UnicodeEncoding.GetBytes%2A>必要がありますを呼び出し、結果のバイトを格納する、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-223">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-224">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-224">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-225"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-225">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-226">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-226">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-227">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-227">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e5e-228">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-228">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="25e5e-229">バイト ストリームの先頭に、preamble を挿入 (など、一連のファイルに書き込まれるバイトの先頭に)、開発者の責任であり、preamble のバイト数がによって返される値に反映されていない、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-229">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-230"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-230"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-231"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-231"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="25e5e-232">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-232">-or-</span></span> 
<span data-ttu-id="25e5e-233">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-233">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-234">エラー検出が有効であり、<paramref name="chars" /> に無効な文字シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-234">Error detection is enabled and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="25e5e-235">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-235">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-236">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-236">-and-</span></span> 
 <span data-ttu-id="25e5e-237"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-237"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="25e5e-238">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-238">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="25e5e-239">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-239">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="25e5e-240">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-240">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="25e5e-241">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="25e5e-241">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="25e5e-242">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-242">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="25e5e-243">指定した文字配列から文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-243">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="25e5e-244">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-244">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-245">必要な正確な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetBytes%2A>アプリケーションが使用するには、結果のバイトを格納するには、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-245">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="25e5e-246">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-246">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-247"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-247">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-248">無効なシーケンス エラーの検出が有効になっているで、このメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-248">With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-249">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-249">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="25e5e-250">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-250">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="25e5e-251">バイト ストリームの先頭に、preamble を挿入 (など、一連のファイルに書き込まれるバイトの先頭に)、開発者の責任であり、preamble のバイト数がによって返される値に反映されていない、<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-251">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-252">次の例では、配列 Latin の大文字と小文字および呼び出しを設定します、<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>ラテン文字の小文字の文字をエンコードするために必要なバイト数を判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-252">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="25e5e-253">バイト順マークが追加された場合に必要なバイトの合計数と共にこの情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-253">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="25e5e-254">この番号によって返される値の比較、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは、ラテン文字の小文字の文字をエンコードするために必要なバイトの最大数を示します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-254">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="25e5e-255">次の例では、ギリシャ語、キリル文字と呼び出しの組み合わせを含む配列を設定します、<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>キリル文字をエンコードするために必要なバイト数を判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-255">The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters.</span></span> <span data-ttu-id="25e5e-256">バイト順マークが追加された場合に必要なバイトの合計数と共にこの情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-256">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="25e5e-257">この番号によって返される値の比較、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは、キリル文字をエンコードするために必要なバイトの最大数を示します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-257">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-258"><paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-258"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-259"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-259"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="25e5e-260">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-260">-or-</span></span> 
 <span data-ttu-id="25e5e-261"><paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-261"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="25e5e-262">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-262">-or-</span></span> 
<span data-ttu-id="25e5e-263">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-263">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-264">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-264">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="25e5e-265">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-265">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-266">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-266">-and-</span></span> 
 <span data-ttu-id="25e5e-267"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-267"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="25e5e-268">文字のセットをバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-268">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string -&gt; byte[]" Usage="unicodeEncoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="25e5e-269">エンコードする最初の文字へのポインター。</span><span class="sxs-lookup"><span data-stu-id="25e5e-269">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="25e5e-270">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-270">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="25e5e-271">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</span><span class="sxs-lookup"><span data-stu-id="25e5e-271">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="25e5e-272">書き込む最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-272">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="25e5e-273">指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-273">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="25e5e-274"><paramref name="bytes" /> パラメーターによって示される位置に書き込む実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-274">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-275">計算する正確な配列のサイズを<xref:System.Text.UnicodeEncoding.GetBytes%2A>必要がありますを呼び出し、結果のバイトを格納する、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-275">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-276">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-276">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-277"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-277">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-278">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-278">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-279">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-279">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="25e5e-280">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-280">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="25e5e-281">この場合、またはデータの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションを使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>が提供するオブジェクト、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>または<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-281">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e5e-282">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-282">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="25e5e-283">Preamble をバイト ストリームの先頭に挿入 (など、一連のファイルに書き込まれるバイトの先頭に) 開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-283">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="25e5e-284"><xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッドがエンコードされたバイト シーケンスの先頭に、preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-284">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-285"><paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-285"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="25e5e-286">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-286">-or-</span></span> 
 <span data-ttu-id="25e5e-287"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-287"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-288"><paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-288"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-289">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-289">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="25e5e-290">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-290">-or-</span></span> 
 <span data-ttu-id="25e5e-291"><paramref name="byteCount" /> が結果のバイト数より少なくなっています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-291"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="25e5e-292">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-292">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-293">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-293">-and-</span></span> 
 <span data-ttu-id="25e5e-294"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-294"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="25e5e-295">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-295">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="25e5e-296">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-296">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="25e5e-297">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-297">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="25e5e-298">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="25e5e-298">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="25e5e-299">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-299">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="25e5e-300">結果のバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-300">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="25e5e-301">結果のバイト シーケンスを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="25e5e-301">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="25e5e-302">指定した文字配列に格納されている文字のセットを指定したバイト配列にエンコードします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-302">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="25e5e-303"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-303">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-304">必要な正確な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-304">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-305">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-305">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-306"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-306">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-307">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-307">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-308">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-308">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="25e5e-309">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-309">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="25e5e-310">ここでは、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションで使用するか、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-310">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e5e-311">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-311">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="25e5e-312">Preamble をバイト ストリームの先頭に挿入 (など、一連のファイルに書き込まれるバイトの先頭に) 開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-312">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="25e5e-313"><xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッドがエンコードされたバイト シーケンスの先頭に、preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-313">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-314">次の例では、使用する方法、<xref:System.Text.UnicodeEncoding.GetBytes%2A>から文字の範囲をエンコードする方法、<xref:System.String>し、バイト配列内の要素の範囲内でエンコードされたバイトを格納します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-314">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-315"><paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-315"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="25e5e-316">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-316">-or-</span></span> 
 <span data-ttu-id="25e5e-317"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-317"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-318"><paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-318"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="25e5e-319">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-319">-or-</span></span> 
 <span data-ttu-id="25e5e-320"><paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-320"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="25e5e-321">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-321">-or-</span></span> 
 <span data-ttu-id="25e5e-322"><paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-322"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-323">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-323">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="25e5e-324">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-324">-or-</span></span> 
 <span data-ttu-id="25e5e-325"><paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-325"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="25e5e-326">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-326">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-327">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-327">-and-</span></span> 
 <span data-ttu-id="25e5e-328"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-328"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="25e5e-329">エンコード対象の文字のセットを格納している文字列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-329">The string containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="25e5e-330">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="25e5e-330">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="25e5e-331">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-331">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="25e5e-332">結果のバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-332">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="25e5e-333">結果のバイト シーケンスを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="25e5e-333">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="25e5e-334">指定した <see cref="T:System.String" /> の文字セットを、指定したバイト配列にエンコードします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-334">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="25e5e-335"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-335">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-336">必要な正確な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-336">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-337">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-337">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="25e5e-338"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-338">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-339">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-339">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-340">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-340">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="25e5e-341">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-341">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="25e5e-342">ここでは、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションで使用するか、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-342">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e5e-343">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-343">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="25e5e-344">Preamble をバイト ストリームの先頭に挿入 (など、一連のファイルに書き込まれるバイトの先頭に) 開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-344">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="25e5e-345"><xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッドがエンコードされたバイト シーケンスの先頭に、preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-345">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-346">次の例では、範囲の Unicode 文字配列から要素をエンコードおよびバイト配列内の要素の範囲内でエンコードされたバイトを格納する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-346">The following example demonstrates how to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-347"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-347"><paramref name="s" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="25e5e-348">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-348">-or-</span></span> 
 <span data-ttu-id="25e5e-349"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-349"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-350"><paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-350"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="25e5e-351">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-351">-or-</span></span> 
 <span data-ttu-id="25e5e-352"><paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-352"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="25e5e-353">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-353">-or-</span></span> 
 <span data-ttu-id="25e5e-354"><paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-354"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-355">エラーの検出が有効になり、<paramref name="s" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-355">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="25e5e-356">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-356">-or-</span></span> 
 <span data-ttu-id="25e5e-357"><paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-357"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="25e5e-358">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-358">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-359">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-359">-and-</span></span> 
 <span data-ttu-id="25e5e-360"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-360"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="25e5e-361">バイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-361">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="25e5e-362">デコードする最初のバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="25e5e-362">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="25e5e-363">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-363">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="25e5e-364">指定したバイト ポインターで始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-364">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="25e5e-365">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-365">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-366">計算する正確な配列のサイズを<xref:System.Text.UnicodeEncoding.GetChars%2A>アプリケーションは、結果として得られる文字を格納する必要があります<xref:System.Text.UnicodeEncoding.GetCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-366">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="25e5e-367">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-367">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="25e5e-368"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-368">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-369">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-369">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-370">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-370">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-371"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-371"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-372"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-372"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="25e5e-373">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-373">-or-</span></span> 
<span data-ttu-id="25e5e-374">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-374">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-375">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-375">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="25e5e-376">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-376">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-377">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-377">-and-</span></span> 
 <span data-ttu-id="25e5e-378"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-378"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="25e5e-379">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-379">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="25e5e-380">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-380">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="25e5e-381">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-381">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="25e5e-382">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="25e5e-382">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="25e5e-383">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-383">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="25e5e-384">指定したバイト配列からバイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-384">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="25e5e-385">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-385">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-386">必要な正確な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetChars%2A>アプリケーションが使用するには、結果の文字を格納するには、<xref:System.Text.UnicodeEncoding.GetCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-386">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="25e5e-387">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-387">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="25e5e-388"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-388">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-389">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-389">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-390">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-390">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-391">次の例では、使用する方法、<xref:System.Text.UnicodeEncoding.GetCharCount%2A>を使用してバイト配列内の要素の範囲をデコードすることによって生成される文字数を返すメソッド<xref:System.Text.UnicodeEncoding>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-391">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array using <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-392"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-392"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-393"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-393"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="25e5e-394">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-394">-or-</span></span> 
 <span data-ttu-id="25e5e-395"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-395"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="25e5e-396">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-396">-or-</span></span> 
<span data-ttu-id="25e5e-397">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-397">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-398">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-398">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="25e5e-399">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-399">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-400">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-400">-and-</span></span> 
 <span data-ttu-id="25e5e-401"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-401"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="25e5e-402">バイト シーケンスを文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-402">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="25e5e-403">デコードする最初のバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="25e5e-403">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="25e5e-404">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-404">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="25e5e-405">結果の文字セットの書き込みを開始する位置へのポインター。</span><span class="sxs-lookup"><span data-stu-id="25e5e-405">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="25e5e-406">書き込む文字の最大数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-406">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="25e5e-407">指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-407">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="25e5e-408"><paramref name="chars" /> パラメーターによって示される位置に書き込む実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-408">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-409">計算する正確な配列のサイズを<xref:System.Text.UnicodeEncoding.GetChars%2A>アプリケーションは、結果として得られる文字を格納する必要があります<xref:System.Text.UnicodeEncoding.GetCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-409">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="25e5e-410">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-410">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="25e5e-411"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-411">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-412">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-412">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-413">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-413">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="25e5e-414">デコードするバイトの範囲にはバイト順マーク (BOM) が含まれていて、バイト配列が BOM 非対応の型のメソッドによって返される、このメソッドによって返される文字配列内で文字 U + FFFE が含まれます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-414">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="25e5e-415">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-415">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="25e5e-416">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-416">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="25e5e-417">この場合、またはデータの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションを使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>が提供するオブジェクト、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>または<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-417">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-418"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-418"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="25e5e-419">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-419">-or-</span></span> 
 <span data-ttu-id="25e5e-420"><paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-420"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-421"><paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-421"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-422">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-422">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="25e5e-423">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-423">-or-</span></span> 
 <span data-ttu-id="25e5e-424"><paramref name="charCount" /> が結果の文字数より少なくなっています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-424"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="25e5e-425">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-425">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-426">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-426">-and-</span></span> 
 <span data-ttu-id="25e5e-427"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-427"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="25e5e-428">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-428">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="25e5e-429">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-429">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="25e5e-430">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-430">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="25e5e-431">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="25e5e-431">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="25e5e-432">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-432">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="25e5e-433">結果の文字のセットを格納する文字配列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-433">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="25e5e-434">結果の文字のセットを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="25e5e-434">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="25e5e-435">指定したバイト配列に格納されているバイト シーケンスを指定した文字配列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-435">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="25e5e-436"><paramref name="chars" /> に書き込まれた実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-436">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-437">必要な正確な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetChars%2A>アプリケーションが使用するには、結果の文字を格納するには、<xref:System.Text.UnicodeEncoding.GetCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-437">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="25e5e-438">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-438">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="25e5e-439"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-439">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-440">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-440">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-441">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-441">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="25e5e-442">デコードするバイトの範囲にはバイト順マーク (BOM) が含まれていて、バイト配列が BOM 非対応の型のメソッドによって返される、このメソッドによって返される文字配列内で文字 U + FFFE が含まれます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-442">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="25e5e-443">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-443">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="25e5e-444">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-444">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="25e5e-445">ここでは、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションで使用するか、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-445">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-446">次の例では、使用する方法、<xref:System.Text.UnicodeEncoding.GetChars%2A>メソッドをバイト配列内の要素の範囲をデコードし、結果を文字配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-446">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-447"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-447"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="25e5e-448">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-448">-or-</span></span> 
 <span data-ttu-id="25e5e-449"><paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-449"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-450"><paramref name="byteIndex" />、<paramref name="byteCount" />、または <paramref name="charIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-450"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="25e5e-451">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-451">-or-</span></span> 
 <span data-ttu-id="25e5e-452"><paramref name="byteindex" /> および <paramref name="byteCount" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-452"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="25e5e-453">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-453">-or-</span></span> 
 <span data-ttu-id="25e5e-454"><paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-454"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-455">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-455">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="25e5e-456">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-456">-or-</span></span> 
 <span data-ttu-id="25e5e-457"><paramref name="chars" /> には、<paramref name="charIndex" /> から配列の末尾までに十分なサイズがなく、結果の文字を格納できません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-457"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="25e5e-458">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-458">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-459">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-459">-and-</span></span> 
 <span data-ttu-id="25e5e-460"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-460"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="unicodeEncoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="25e5e-461">UTF-16 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-461">Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="25e5e-462">UTF-16 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換する <see cref="T:System.Text.Decoder" />。</span><span class="sxs-lookup"><span data-stu-id="25e5e-462">A <see cref="T:System.Text.Decoder" /> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-463"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドと同様の方法で、文字のシーケンシャル ブロックにバイトのシーケンシャル ブロックを変換する、<xref:System.Text.UnicodeEncoding.GetChars%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-463">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="25e5e-464">ただし、<xref:System.Text.Decoder>のブロックをまたぐバイト シーケンスが正しくデコードするための呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-464">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="25e5e-465"><xref:System.Text.Decoder>もデータ ブロックの末尾にある後続バイトが保持され、[次へ] のデコード操作で末尾のバイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-465">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="25e5e-466">そのため、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>と<xref:System.Text.UnicodeEncoding.GetEncoder%2A>は完全なデータ ストリームではなくデータのブロックを頻繁にこれらの操作を処理するためにネットワーク転送と、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-466">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="25e5e-467">エラーの検出が有効なかどうか、つまり、`throwOnInvalidBytes`にコンス トラクターのパラメーターが設定されている`true`でエラーの検出が有効にも、<xref:System.Text.Decoder>このメソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-467">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="25e5e-468">エラー検出が有効に無効なシーケンスが発生した場合は、デコーダーの状態が定義されていないと、処理を停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-468">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-469">次の例では、(バイト単位) の配列を文字列にエンコードし、文字の配列にバイトをデコードするエンコーダーとデコーダーを使用します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-469">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="25e5e-470">エンコーディングの理解</span><span class="sxs-lookup"><span data-stu-id="25e5e-470">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="unicodeEncoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="25e5e-471">Unicode 文字のシーケンスを UTF-16 でエンコードされたバイト シーケンスに変換するエンコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-471">Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="25e5e-472">Unicode 文字のシーケンスを UTF-16 でエンコードされたバイト シーケンスに変換する <see cref="T:System.Text.Encoder" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="25e5e-472">A <see cref="T:System.Text.Encoder" /> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-473"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドと同様の方法のバイト数のシーケンシャル ブロックに文字のシーケンシャル ブロックを変換する、<xref:System.Text.UnicodeEncoding.GetBytes%2A>このクラスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-473">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class.</span></span> <span data-ttu-id="25e5e-474">ただし、<xref:System.Text.Encoder>のブロックをまたぐ文字シーケンスを正しくエンコードすることができるように、オブジェクトが呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-474">However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="25e5e-475"><xref:System.Text.Encoder>オブジェクトはまたデータ ブロックの最後に末尾の文字を保持し、末尾の文字を次のエンコードの操作に使用されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-475">The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="25e5e-476">たとえば、データ ブロック上位サロゲートで終了し、[次へ] のデータ ブロックに一致する下位サロゲートがあります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-476">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="25e5e-477">そのため、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>と<xref:System.Text.UnicodeEncoding.GetEncoder%2A>は完全なデータ ストリームではなくデータのブロックを頻繁にこれらの操作を処理するためにネットワーク転送と、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-477">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="25e5e-478">エラーの検出が有効なかどうか、つまり、`throwOnInvalidBytes`にコンス トラクターのパラメーターが設定されている`true`でエラーの検出が有効にも、<xref:System.Text.Encoder>このメソッドによって返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="25e5e-478">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> object returned by this method.</span></span> <span data-ttu-id="25e5e-479">エラー検出が有効に無効なシーケンスが発生した場合は、エンコーダーの状態が定義されていないと、処理を停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-479">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-480">次の例では、(バイト単位) の配列を文字列にエンコードし、文字の配列にバイトをデコードするエンコーダーとデコーダーを使用します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-480">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="25e5e-481">エンコーディングの理解</span><span class="sxs-lookup"><span data-stu-id="25e5e-481">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="unicodeEncoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="25e5e-482">現在のインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-482">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="25e5e-483">現在の <see cref="T:System.Text.UnicodeEncoding" /> オブジェクトのハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="25e5e-483">The hash code for the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="unicodeEncoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="25e5e-484">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-484">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="25e5e-485">指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-485">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="25e5e-486">指定した文字数をエンコードすることによって生成される最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-486">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-487">必要な正確な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetBytes%2A>アプリケーションが使用するには、結果のバイトを格納するには、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-487">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="25e5e-488">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-488">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="25e5e-489"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-489">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-490"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 現在選択されているは、最悪のケースを含む、最悪の数を取得<xref:System.Text.EncoderFallback>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-490"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="25e5e-491">フォールバックが大きくなる可能性の文字列で選択されている場合<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>大きな値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-491">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="25e5e-492">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を取得します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-492">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="25e5e-493">大きな文字列の場合は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでのエラーのキャッチを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-493">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="25e5e-494">使用して、別のアプローチを検討する可能性がありますも<xref:System.Text.UnicodeEncoding.GetByteCount%2A>または<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-494">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="25e5e-495"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 関係を持たない<xref:System.Text.UnicodeEncoding.GetChars%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-495"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="25e5e-496">アプリケーションで使用するような関数が必要なかどうか<xref:System.Text.UnicodeEncoding.GetChars%2A>、どちらを使用する<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-496">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e5e-497">`GetMaxByteCount(N)` 同じ値とは限りません`N* GetMaxByteCount(1)`します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-497">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-498">次の例では、使用する方法、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>指定数の文字をエンコードするために必要なバイトの最大数を返します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-498">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-499"><paramref name="charCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-499"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="25e5e-500">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-500">-or-</span></span> 
<span data-ttu-id="25e5e-501">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-501">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="25e5e-502">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-502">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-503">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-503">-and-</span></span> 
 <span data-ttu-id="25e5e-504"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-504"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="unicodeEncoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="25e5e-505">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-505">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="25e5e-506">指定したバイト数をデコードすることによって生成される最大文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-506">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="25e5e-507">指定したバイト数をデコードすることによって生成される最大文字数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-507">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-508">必要な正確な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetChars%2A>アプリケーションが使用するには、結果の文字を格納するには、<xref:System.Text.UnicodeEncoding.GetCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-508">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="25e5e-509">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-509">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="25e5e-510"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-510">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="25e5e-511"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 現在選択されているは、最悪のケースを含む、最悪の数を取得<xref:System.Text.DecoderFallback>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-511"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="25e5e-512">フォールバックが大きくなる可能性の文字列で選択されている場合<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>大きな値を取得します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-512">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values.</span></span>  
  
 <span data-ttu-id="25e5e-513">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を取得します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-513">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="25e5e-514">大きな文字列の場合は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでのエラーのキャッチを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-514">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="25e5e-515">使用して、別のアプローチを検討する可能性がありますも<xref:System.Text.UnicodeEncoding.GetCharCount%2A>または<xref:System.Text.Decoder.Convert%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-515">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.</span></span>  
  
 <span data-ttu-id="25e5e-516"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 関係を持たない<xref:System.Text.UnicodeEncoding.GetBytes%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-516"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>.</span></span> <span data-ttu-id="25e5e-517">アプリケーションで使用するような関数が必要なかどうか<xref:System.Text.UnicodeEncoding.GetBytes%2A>、どちらを使用する<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-517">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e5e-518">`GetMaxCharCount(N)` 同じ値とは限りません`N* GetMaxCharCount(1)`します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-518">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-519">次の例では、使用する方法、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>指定したバイト数をデコードすることによって生成される最大文字数を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-519">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-520"><paramref name="byteCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-520"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="25e5e-521">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-521">-or-</span></span> 
<span data-ttu-id="25e5e-522">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-522">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="25e5e-523">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-523">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-524">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-524">-and-</span></span> 
 <span data-ttu-id="25e5e-525"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-525"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="unicodeEncoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="25e5e-526">このインスタンスのコンストラクターでバイト順マークを要求した場合は、UTF-16 形式でエンコードされた Unicode バイト順マークを返します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-526">Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</span></span></summary>
        <returns><span data-ttu-id="25e5e-527">Unicode のバイト順マークが格納されたバイト配列を提供するように <see cref="T:System.Text.UnicodeEncoding" /> オブジェクトが構成されている場合には、そうしたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-527">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UnicodeEncoding" /> object is configured to supply one.</span></span> <span data-ttu-id="25e5e-528">それ以外の場合、このメソッドは長さがゼロのバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-528">Otherwise, this method returns a zero-length byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-529"><xref:System.Text.UnicodeEncoding>オブジェクトが、プリアンブルは、バイト配列であり、エンコード処理の結果のバイトのシーケンスに付けることができますを提供します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-529">The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="25e5e-530">バイト オーダー マーク (コード ポイント U+FEFF) でエンコードされたバイトのシーケンスを付けるには、バイト順と変換形式または UTF デコーダーことができます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-530">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="25e5e-531">Unicode バイト順マーク (BOM) が (16 進数) で、次のようにシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-531">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="25e5e-532">ビッグ エンディアン バイト順: FE FF</span><span class="sxs-lookup"><span data-stu-id="25e5e-532">Big endian byte order: FE FF</span></span>  
  
-   <span data-ttu-id="25e5e-533">リトル エンディアン バイト順: FF FE</span><span class="sxs-lookup"><span data-stu-id="25e5e-533">Little endian byte order: FF FE</span></span>  
  
 <span data-ttu-id="25e5e-534">インスタンス化することができます、<xref:System.Text.UnicodeEncoding>オブジェクト<xref:System.Text.UnicodeEncoding.GetPreamble%2A>メソッドは、次の方法で有効な BOM を返します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-534">You can instantiate a <xref:System.Text.UnicodeEncoding> object whose <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="25e5e-535">取得することによって、<xref:System.Text.UnicodeEncoding>によって返されるオブジェクト、<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>または<xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="25e5e-535">By retrieving the <xref:System.Text.UnicodeEncoding> object returned by the <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> or <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="25e5e-536">パラメーターなしで呼び出すことによって<xref:System.Text.UnicodeEncoding.%23ctor>インスタンスを作成するコンス トラクター、<xref:System.Text.UnicodeEncoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="25e5e-536">By calling the parameterless <xref:System.Text.UnicodeEncoding.%23ctor> constructor to instantiate a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
-   <span data-ttu-id="25e5e-537">指定することによって`true`の値として、`byteOrderMark`への引数、<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>または<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="25e5e-537">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> or <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructors.</span></span>  
  
 <span data-ttu-id="25e5e-538">Web データまたはおランダムなテキスト ファイルがありませんでしたので、特定の id が失われた場合、参照、エンコード、または不適切なタグなしなどのファイルのエンコーディングのほとんどを提供して、BOM を使用することをお勧め国際対応の問題。</span><span class="sxs-lookup"><span data-stu-id="25e5e-538">We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="25e5e-539">データが一貫して適切なタグとは、多くの場合、ユーザーの問題を回避できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-539">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="25e5e-540">エンコードの種類を提供する標準では、BOM は、少し冗長です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-540">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="25e5e-541">ただし、server を正しくエンコード ヘッダーを送信するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-541">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="25e5e-542">または、そのできますフォールバックとして、エンコードを紛失するそれ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="25e5e-542">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="25e5e-543">BOM を使用するいくつかのデメリットがあります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-543">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="25e5e-544">たとえば、BOM を使用するデータベース フィールドを制限する方法を知ることは困難なできます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-544">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="25e5e-545">ファイルの連結問題になる可能性も、たとえば、ファイルを結合するように、不要な文字データの途中で終了できるようにします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-545">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="25e5e-546">いくつかの短所にもかかわらずただし、部品表の使用が強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-546">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="25e5e-547">エンコードされたバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリームの先頭プレフィックスにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-547">To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="25e5e-548">なお、<xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッドでエンコードされたバイトのシーケンスに BOM が付加しない; 開発者の責任には、適切なバイト ストリームの先頭の BOM を指定します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-548">Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-549">次の例では、使用する方法、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>ビッグ エンディアンまたはのインスタンスのリトル エンディアン バイト順で Unicode バイト順マークを取得するメソッドを<xref:System.Text.UnicodeEncoding>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-549">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to retrieve the Unicode byte order mark in big endian or little endian byte order for an instance of a <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="25e5e-550">次の例では、2 つのインスタンス化します<xref:System.Text.UnicodeEncoding>オブジェクト、最初は、BOM との行われますが、2 つ目は提供しません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-550">The following example instantiates two <xref:System.Text.UnicodeEncoding> objects, the first of which does not provide a BOM, and the second of which does.</span></span> <span data-ttu-id="25e5e-551">呼び出して、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>ファイルに Unicode でエンコードされた文字列を書き込む前に、BOM を書き込む方法。</span><span class="sxs-lookup"><span data-stu-id="25e5e-551">It then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to write the BOM to a file before writing a Unicode-encoded string.</span></span> <span data-ttu-id="25e5e-552">出力例では、元のコンソールに表示されます、2 つ目のエンコーダーからのバイトを保存するファイルが最初よりもより多くの容量を 3 つあります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-552">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/cs/GetPreamble1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/vb/GetPreamble1.vb#1)]  
  
 <span data-ttu-id="25e5e-553">使用して、ファイルを比較することもできます、`fc`するか、コンソール ウィンドウでコマンドを含む 16 進表示モードをテキスト エディターでファイルを検査できます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-553">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="25e5e-554">Utf-16 エンコーディングをサポートするエディターでファイルが開かれるときに、BOM が表示されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="25e5e-554">Note that when the file is opened in an editor that supports UTF-16 encoding, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="unicodeEncoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="25e5e-555">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="25e5e-555">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="25e5e-556">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="25e5e-556">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="25e5e-557">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="25e5e-557">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="25e5e-558">バイト配列に格納されているある範囲のバイトを文字列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-558">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="25e5e-559">指定したバイト シーケンスのデコード結果が格納されている <see cref="T:System.String" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="25e5e-559">A <see cref="T:System.String" /> object containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e5e-560">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="25e5e-560">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="25e5e-561">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-561">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="25e5e-562">デコードするバイトの範囲にはバイト順マーク (BOM) が含まれていて、バイト配列が BOM 非対応の型のメソッドによって返される、このメソッドによって返される文字配列内で文字 U + FFFE が含まれます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-562">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="25e5e-563">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-563">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="25e5e-564">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="25e5e-564">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="25e5e-565">この場合、またはデータの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションを使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>が提供するオブジェクト、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>または<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="25e5e-565">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="25e5e-566">次の例では、呼び出すことによって、配列を初期化します、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>正確にエンコードされた文字列とバイト順マーク (BOM) のサイズを追加し、必要なのバイト数を調べます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-566">The following example initializes an array by calling the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="25e5e-567">例を呼び出して、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>は BOM を呼び出す前に配列を格納する方法、<xref:System.Text.Encoding.GetBytes%2A>配列にエンコードされたバイトを格納するメソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-567">The example then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="25e5e-568">例を呼び出して、<xref:System.Text.UnicodeEncoding.GetString%2A>文字列をデコードするメソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-568">The example then calls the <xref:System.Text.UnicodeEncoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="25e5e-569">ここでデコードされた文字列が異なることから元の文字列では、16 ビットのバイト順マーク U+FFFD で始まっているので注意してください。</span><span class="sxs-lookup"><span data-stu-id="25e5e-569">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="25e5e-570">つまり、2 つの文字列が、等しくないものとして比較されます、文字列が出力の場合、BOM は置換文字として表示されることと"?"。</span><span class="sxs-lookup"><span data-stu-id="25e5e-570">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="25e5e-571">削除するには、文字列の先頭の BOM を呼び出すことができます、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="25e5e-571">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="25e5e-572"><paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-572"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="25e5e-573"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="25e5e-573"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="25e5e-574">- または -</span><span class="sxs-lookup"><span data-stu-id="25e5e-574">-or-</span></span> 
 <span data-ttu-id="25e5e-575"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="25e5e-575"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="25e5e-576">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="25e5e-576">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="25e5e-577">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span><span class="sxs-lookup"><span data-stu-id="25e5e-577">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="25e5e-578">および</span><span class="sxs-lookup"><span data-stu-id="25e5e-578">-and-</span></span> 
 <span data-ttu-id="25e5e-579"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="25e5e-579"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>