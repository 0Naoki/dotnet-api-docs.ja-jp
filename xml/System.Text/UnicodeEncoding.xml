<Type Name="UnicodeEncoding" FullName="System.Text.UnicodeEncoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="22ebf97fd5f5abb243ec2a9c45f66697f07852d6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408037" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UnicodeEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnicodeEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UnicodeEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UnicodeEncoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnicodeEncoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UnicodeEncoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7cda6-101">Represents a UTF-16 encoding of Unicode characters.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7cda6-101">Represents a UTF-16 encoding of Unicode characters.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-102">エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="7cda6-103">デコードは、エンコードされたバイトのシーケンスを Unicode 文字のセットに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="7cda6-104">[Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)コード ポイント (数値) をすべてサポートされているスクリプト内の各文字を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-104">The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script.</span></span> <span data-ttu-id="7cda6-105">Unicode 変換形式 (UTF) は、そのコード ポイントをエンコードする方法です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-105">A Unicode Transformation Format (UTF) is a way to encode that code point.</span></span> <span data-ttu-id="7cda6-106">[Unicode 標準](http://go.microsoft.com/fwlink/?linkid=37123)次 UTFs を使用します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-106">The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:</span></span>  
  
-   <span data-ttu-id="7cda6-107">Utf-8、1 ~ 4 バイトのシーケンスとして各コード ポイントを表します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-107">UTF-8, which represents each code point as a sequence of one to four bytes.</span></span>  
  
-   <span data-ttu-id="7cda6-108">Utf-16、1 ~ 2 の 16 ビット整数のシーケンスとして各コード ポイントを表します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-108">UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</span></span>  
  
-   <span data-ttu-id="7cda6-109">Utf-32、32 ビット整数値としては、各コード ポイントを表します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-109">UTF-32, which represents each code point as a 32-bit integer.</span></span>  
  
 <span data-ttu-id="7cda6-110">詳細については、UTFs とでサポートされているその他のエンコーディングの<xref:System.Text>を参照してください[.NET Framework の文字エンコーディング](~/docs/standard/base-types/character-encoding.md)です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-110">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="7cda6-111"><xref:System.Text.UnicodeEncoding>クラスは、utf-16 エンコードを表します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-111">The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding.</span></span> <span data-ttu-id="7cda6-112">エンコーダーは、ビッグ エンディアン バイト順を使用できます (最上位バイト最初) またはリトル エンディアン バイト順 (最下位バイト最初)。</span><span class="sxs-lookup"><span data-stu-id="7cda6-112">The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first).</span></span> <span data-ttu-id="7cda6-113">たとえば、(コード ポイント u+0041) としてシリアル化 Latin Capital Letter 次のように 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="7cda6-113">For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="7cda6-114">ビッグ エンディアン バイト順: 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="7cda6-114">Big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="7cda6-115">リトル エンディアン バイト順: 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="7cda6-115">Little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="7cda6-116">これは、特定のプラットフォームのネイティブのバイト順を使用して Unicode 文字を格納する方が効率的です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-116">It is generally more efficient to store Unicode characters using the native byte order of a particular platform.</span></span> <span data-ttu-id="7cda6-117">たとえば、Intel のコンピューターなど、リトル エンディアンのプラットフォームでリトル エンディアン バイト順を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-117">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span> <span data-ttu-id="7cda6-118"><xref:System.Text.UnicodeEncoding>クラスは、Windows コード ページ 1200 (リトル エンディアン バイト順) と 1201 (ビッグ エンディアン バイト順) に対応します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-118">The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order).</span></span> <span data-ttu-id="7cda6-119">呼び出して、特定のアーキテクチャ「エンディアン」を指定できます、<xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-119">You can determine the "endianness" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7cda6-120">必要に応じて、<xref:System.Text.UnicodeEncoding>オブジェクトの先頭には、エンコード プロセスからバイトのシーケンスにバイトの配列をあるバイト順マーク (BOM) を提供します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-120">Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="7cda6-121">Preamble、バイト順マーク (BOM) が含まれている場合、バイト順および変換形式または UTF 決定デコーダーが役立ちます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-121">If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span>  
  
 <span data-ttu-id="7cda6-122">場合、 <xref:System.Text.UnicodeEncoding> 、BOM を指定するインスタンスが構成されている、呼び出すことによって取得することができます、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>メソッドです。 空の配列を返しますそれ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="7cda6-122">If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="7cda6-123">なお、場合でも、<xref:System.Text.UnicodeEncoding>オブジェクトは、BOM のサポートのために構成されている、適切な; としてエンコードされたバイト ストリームの先頭の BOM を含める必要がありますのエンコード方法、<xref:System.Text.UnicodeEncoding>クラスしないで自動的にします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-123">Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically.</span></span>  
  
 <span data-ttu-id="7cda6-124">エラーの検出を有効にして、クラスのインスタンスのセキュリティを強化するには、インスタンスを作成、<xref:System.Text.UnicodeEncoding>オブジェクトを呼び出すことによって、<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターと設定、`throwOnInvalidBytes`に渡す引数`true`です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-124">To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UnicodeEncoding> object by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span> <span data-ttu-id="7cda6-125">エラーの検出、無効な文字またはバイトのシーケンスを検出するメソッドがスローされます、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-125">With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-126">エラーの検出、例外はスローされませんし、無効なシーケンスは、通常は無視されます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-126">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
 <span data-ttu-id="7cda6-127">インスタンス化することができます、<xref:System.Text.UnicodeEncoding>するかどうか、バイト順マーク (BOM) を提供する、ビッグ エンディアンまたはリトル エンディアン エンコードするかどうか、およびエラーの検出を有効にするかどうかに応じて、方法の数のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7cda6-127">You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</span></span> <span data-ttu-id="7cda6-128">次の表、<xref:System.Text.UnicodeEncoding>コンス トラクターと<xref:System.Text.Encoding>を返すプロパティ、<xref:System.Text.UnicodeEncoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7cda6-128">The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
|<span data-ttu-id="7cda6-129">メンバー</span><span class="sxs-lookup"><span data-stu-id="7cda6-129">Member</span></span>|<span data-ttu-id="7cda6-130">エンディアン</span><span class="sxs-lookup"><span data-stu-id="7cda6-130">Endianness</span></span>|<span data-ttu-id="7cda6-131">BOM</span><span class="sxs-lookup"><span data-stu-id="7cda6-131">BOM</span></span>|<span data-ttu-id="7cda6-132">エラーの検出</span><span class="sxs-lookup"><span data-stu-id="7cda6-132">Error detection</span></span>|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.BigEndianUnicode%2A>|<span data-ttu-id="7cda6-133">ビッグ エンディアン</span><span class="sxs-lookup"><span data-stu-id="7cda6-133">Big-endian</span></span>|<span data-ttu-id="7cda6-134">[はい]</span><span class="sxs-lookup"><span data-stu-id="7cda6-134">Yes</span></span>|<span data-ttu-id="7cda6-135">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="7cda6-135">No (Replacement fallback)</span></span>|  
|<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>|<span data-ttu-id="7cda6-136">リトル エンディアン</span><span class="sxs-lookup"><span data-stu-id="7cda6-136">Little-endian</span></span>|<span data-ttu-id="7cda6-137">[はい]</span><span class="sxs-lookup"><span data-stu-id="7cda6-137">Yes</span></span>|<span data-ttu-id="7cda6-138">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="7cda6-138">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="7cda6-139">リトル エンディアン</span><span class="sxs-lookup"><span data-stu-id="7cda6-139">Little-endian</span></span>|<span data-ttu-id="7cda6-140">[はい]</span><span class="sxs-lookup"><span data-stu-id="7cda6-140">Yes</span></span>|<span data-ttu-id="7cda6-141">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="7cda6-141">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|<span data-ttu-id="7cda6-142">構成可能</span><span class="sxs-lookup"><span data-stu-id="7cda6-142">Configurable</span></span>|<span data-ttu-id="7cda6-143">構成可能</span><span class="sxs-lookup"><span data-stu-id="7cda6-143">Configurable</span></span>|<span data-ttu-id="7cda6-144">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="7cda6-144">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="7cda6-145">構成可能</span><span class="sxs-lookup"><span data-stu-id="7cda6-145">Configurable</span></span>|<span data-ttu-id="7cda6-146">構成可能</span><span class="sxs-lookup"><span data-stu-id="7cda6-146">Configurable</span></span>|<span data-ttu-id="7cda6-147">構成可能</span><span class="sxs-lookup"><span data-stu-id="7cda6-147">Configurable</span></span>|  
  
 <span data-ttu-id="7cda6-148"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-148">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="7cda6-149">同様に、<xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、<xref:System.Text.UnicodeEncoding.GetChars%2A>と<xref:System.Text.UnicodeEncoding.GetString%2A>メソッドでは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-149">Likewise, the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UnicodeEncoding.GetChars%2A> and <xref:System.Text.UnicodeEncoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="7cda6-150">エンコーダーまたはデコーダーを使用して、エンコードまたはデコード (100万文字のエンコードされた文字列に 100,000 文字セグメント単位で) などの複数のブロックにわたるデータと状態情報を保存できるため、<xref:System.Text.UnicodeEncoding.GetEncoder%2A>と<xref:System.Text.UnicodeEncoding.GetDecoder%2A>プロパティそれぞれします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-150">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> and <xref:System.Text.UnicodeEncoding.GetDecoder%2A> properties, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-151">次の例では、バイト配列を使用して Unicode 文字の文字列をエンコードする方法、<xref:System.Text.UnicodeEncoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7cda6-151">The following example demonstrates how to encode a string of Unicode characters into a byte array by using a <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="7cda6-152">バイト配列は、データの損失がないことを示すために文字列にデコードされます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-152">The byte array is decoded into a string to demonstrate that there is no loss of data.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="7cda6-153">次の例は、ファイルにエンコードされたバイトを書き込みます、バイト順マーク (BOM) をバイト ストリームをプレフィックスする点を除いて、前の 1 つとして、同じ文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-153">The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="7cda6-154">これは、後、2 つの異なる方法でファイルを読み取ります: を使用してテキスト ファイルとして、<xref:System.IO.StreamReader>オブジェクトおよびバイナリ ファイルとして。</span><span class="sxs-lookup"><span data-stu-id="7cda6-154">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="7cda6-155">予想できるように、どちらの場合は、BOM 文字列に含める新しく読み取り。</span><span class="sxs-lookup"><span data-stu-id="7cda6-155">As you would expect, in neither case is the BOM included in the newly read string.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF32Encoding" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.UTF7Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-156">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-156">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-157">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-157">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-158">このコンス トラクターは、リトル エンディアン バイト順を使用して、Unicode バイト順マークを提供し、無効なエンコードが検出された場合、例外をスローしませんが、インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-158">This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cda6-159">セキュリティ上の理由から呼び出すことによってエラー検出を有効にする必要があります、<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターと設定、`throwOnInvalidBytes`引数`true`です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-159">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-160">次の例では、新規作成<xref:System.Text.UnicodeEncoding>をインスタンス化し、エンコーディングの名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-160">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          <span data-ttu-id="7cda6-161">
            <see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-161">
              <see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span>
          </span>
        </param>
        <param name="byteOrderMark">
          <span data-ttu-id="7cda6-162">
            <see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-162">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-163">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-163">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
          <span data-ttu-id="7cda6-164">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-164">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-165">このコンス トラクターでは、無効なエンコードが検出されたときに例外をスローしないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-165">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cda6-166">セキュリティ上の理由から呼び出すことによってエラー検出を有効にする必要があります、<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターと設定、`throwOnInvalidBytes`引数`true`です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-166">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
 <span data-ttu-id="7cda6-167">`byteOrderMark`パラメーターの動作を制御する、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-167">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="7cda6-168">場合`true`、utf-16 形式で Unicode バイト順マーク (BOM) を格納するバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-168">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="7cda6-169">場合`false`長さが 0 バイトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-169">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="7cda6-170">ただし、設定`byteOrderMark`に`true`は行われません、<xref:System.Text.UnicodeEncoding.GetBytes%2A>とプレフィックスのバイト配列の先頭の BOM メソッドはこれが発生すると、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>をバイト数の BOM でのバイト数を含める方法です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-170">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-171">次の例では、新しい<xref:System.Text.UnicodeEncoding>リトル エンディアンまたはビッグ エンディアン バイト順をサポートするかどうかを指定してインスタンスと、Unicode バイト オーダー マークします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-171">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance specifying whether to support little endian or big endian byte ordering and the Unicode byte order mark.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          <span data-ttu-id="7cda6-172">
            <see langword="true" /> to use the big endian byte order (most significant byte first); <see langword="false" /> to use the little endian byte order (least significant byte first).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-172">
              <see langword="true" /> to use the big endian byte order (most significant byte first); <see langword="false" /> to use the little endian byte order (least significant byte first).</span>
          </span>
        </param>
        <param name="byteOrderMark">
          <span data-ttu-id="7cda6-173">
            <see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-173">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="throwOnInvalidBytes">
          <span data-ttu-id="7cda6-174">
            <see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-174">
              <see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-175">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-175">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
          <span data-ttu-id="7cda6-176">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-176">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-177">`byteOrderMark`パラメーターの動作を制御する、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-177">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="7cda6-178">場合`true`、utf-16 形式で Unicode バイト順マーク (BOM) を格納するバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-178">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="7cda6-179">場合`false`長さが 0 バイトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-179">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="7cda6-180">ただし、設定`byteOrderMark`に`true`は行われません、<xref:System.Text.UnicodeEncoding.GetBytes%2A>とプレフィックスのバイト配列の先頭の BOM メソッドはこれが発生すると、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>をバイト数の BOM でのバイト数を含める方法です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-180">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="7cda6-181">場合、`throwOnInvalidBytes`パラメーターは`true`、無効なバイト シーケンスを検出するためのメソッドをスロー<xref:System.ArgumentException?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-181">If the `throwOnInvalidBytes` parameter is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7cda6-182">それ以外の場合、メソッドが例外をスローしていないと、無効なシーケンスが無視されます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-182">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cda6-183">このコンス トラクターを使用してのインスタンスを作成するセキュリティ上の理由から、アプリケーションの推奨、<xref:System.Text.UnicodeEncoding>クラスし、設定してエラーの検出を有効に`throwOnInvalidBytes`に`true`です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-183">For security reasons, your applications are recommended to use this constructor to create an instance of the <xref:System.Text.UnicodeEncoding> class and turn on error detection by setting `throwOnInvalidBytes` to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-184">次の例での動作<xref:System.Text.UnicodeEncoding>、両方とない場合のエラー検出を有効にします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-184">The following example demonstrates the behavior of <xref:System.Text.UnicodeEncoding>, both with error detection enabled and without.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/VB/errordetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="CharSize">
      <MemberSignature Language="C#" Value="public const int CharSize = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CharSize = (2)" />
      <MemberSignature Language="DocId" Value="F:System.Text.UnicodeEncoding.CharSize" />
      <MemberSignature Language="VB.NET" Value="Public Const CharSize As Integer  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: int CharSize = 2;" />
      <MemberSignature Language="F#" Value="val mutable CharSize : int" Usage="System.Text.UnicodeEncoding.CharSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-185">Represents the Unicode character size in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-185">Represents the Unicode character size in bytes.</span>
          </span>
          <span data-ttu-id="7cda6-186">This field is a constant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-186">This field is a constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-187">このフィールドの値は、32 ビット符号付きを持つ定数が 2 の値です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-187">The value of this field is a 32-bit signed constant with a value of 2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-188">次の例は、の値を返す方法を示します<xref:System.Text.UnicodeEncoding.CharSize>し表示します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-188">The following example demonstrates how to return the value of <xref:System.Text.UnicodeEncoding.CharSize> and display it.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CPP/charsize.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CS/charsize.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/VB/charsize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="unicodeEncoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="7cda6-189">The object to compare with the current object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-189">The object to compare with the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-190">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-190">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-191">
            <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UnicodeEncoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-191">
              <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UnicodeEncoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-192">2 つ<xref:System.Text.UnicodeEncoding>オブジェクトは、以下の条件がすべて当てはまる場合、等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-192">Two <xref:System.Text.UnicodeEncoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="7cda6-193">両方のオブジェクトは、同じバイト順序 (リトル エンディアンまたはビッグ エンディアン) を使用します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-193">Both objects use the same byte order (little-endian or big-endian).</span></span>  
  
-   <span data-ttu-id="7cda6-194">両方のオブジェクトでは、バイト順序マークを提供するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7cda6-194">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="7cda6-195">両方のオブジェクトは、同じエンコーダー フォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-195">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="7cda6-196">両方のオブジェクトは、同じデコーダー フォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-196">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-197">次の例を使用する方法を示しています、<xref:System.Text.UnicodeEncoding.Equals%2A>メソッドをテストするかどうか、現在<xref:System.Text.UnicodeEncoding>オブジェクトが異なると等しい<xref:System.Text.UnicodeEncoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7cda6-197">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.Equals%2A> method to test whether the current <xref:System.Text.UnicodeEncoding> object is equal to a different <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="7cda6-198">5 つ<xref:System.Text.UnicodeEncoding>オブジェクトが作成され、比較、および、比較の結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-198">Five <xref:System.Text.UnicodeEncoding> objects are created and compared, and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-199">Calculates the number of bytes produced by encoding a set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-199">Calculates the number of bytes produced by encoding a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="unicodeEncoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="7cda6-200">The string that contains the set of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-200">The string that contains the set of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-201">Calculates the number of bytes produced by encoding the characters in the specified string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-201">Calculates the number of bytes produced by encoding the characters in the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-202">The number of bytes produced by encoding the specified characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-202">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-203">必要な厳密な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetBytes%2A>呼び出した結果のバイトを格納する、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-203">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-204">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-204">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-205"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-205">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-206">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-206">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-207">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-207">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cda6-208">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-208">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7cda6-209">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、preamble のバイト数がによって返される値に反映されません、<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-209">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-210">次の例では、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>と<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>文字列をエンコードするために必要なバイトの最大値と実際の数を計算する方法です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-210">The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="7cda6-211">実際のバイト ストリームにバイト オーダー マークの保存に必要なバイト数も表示されます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-211">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-212">
            <paramref name="s" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-212">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-213">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-213">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-214">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-214">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7cda6-215">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-215">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="7cda6-216">A pointer to the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-216">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="7cda6-217">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-217">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-218">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-218">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-219">The number of bytes produced by encoding the specified characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-219">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-220">計算する正確な配列のサイズを<xref:System.Text.UnicodeEncoding.GetBytes%2A>必要がありますを結果のバイトを格納するを呼び出す、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-220">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-221">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-221">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-222"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-222">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-223">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-223">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-224">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-224">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cda6-225">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-225">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7cda6-226">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、preamble のバイト数がによって返される値に反映されません、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-226">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-227">
            <paramref name="chars" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-227">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-228">
            <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-228">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7cda6-229">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-229">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-230">Error detection is enabled and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-230">Error detection is enabled and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7cda6-231">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-231">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7cda6-232">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-232">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7cda6-233">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-233">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="7cda6-234">The character array containing the set of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-234">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="7cda6-235">The index of the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-235">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="7cda6-236">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-236">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-237">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-237">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-238">The number of bytes produced by encoding the specified characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-238">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-239">必要な厳密な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetBytes%2A>結果のバイトを格納するアプリケーションを使用して<xref:System.Text.UnicodeEncoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-239">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="7cda6-240">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-240">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-241"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-241">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-242">無効なシーケンスでエラーの検出が有効になっている、このメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-242">With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-243">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-243">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7cda6-244">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-244">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7cda6-245">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、preamble のバイト数がによって返される値に反映されません、<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-245">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-246">次の例は、配列ラテン文字の大文字と小文字および呼び出しは追加、<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>ラテン文字の小文字の文字をエンコードするために必要なバイト数を調べます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-246">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="7cda6-247">バイト順マークが追加された場合に必要なバイトの合計数と共に、この情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-247">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="7cda6-248">この番号によって返される値と比較してその、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドで、ラテン文字の小文字の文字をエンコードするために必要なバイトの最大数を示します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-248">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="7cda6-249">次の例は、ギリシャ語 (キリル) の文字と呼び出しの組み合わせを含む配列を設定、<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>キリル文字をエンコードするために必要なバイト数を調べます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-249">The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters.</span></span> <span data-ttu-id="7cda6-250">バイト順マークが追加された場合に必要なバイトの合計数と共に、この情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-250">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="7cda6-251">この番号によって返される値と比較してその、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドで、キリル文字をエンコードするために必要なバイトの最大数を示します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-251">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-252">
            <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-252">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-253">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-253">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7cda6-254">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-254">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="7cda6-255">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-255">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-256">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-256">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7cda6-257">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-257">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-258">Encodes a set of characters into a sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-258">Encodes a set of characters into a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="7cda6-259">A pointer to the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-259">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="7cda6-260">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-260">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="7cda6-261">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-261">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="7cda6-262">The maximum number of bytes to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-262">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-263">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-263">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-264">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-264">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-265">計算する正確な配列のサイズを<xref:System.Text.UnicodeEncoding.GetBytes%2A>必要がありますを結果のバイトを格納するを呼び出す、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-265">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-266">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-266">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-267"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-267">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-268">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-268">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-269">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-269">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7cda6-270">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-270">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7cda6-271">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>オブジェクトによって提供される、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>または<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-271">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cda6-272">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-272">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7cda6-273">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-273">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="7cda6-274"><xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッドはエンコードされたバイトのシーケンスの先頭に preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-274">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-275">
            <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-275">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="7cda6-276">-or-  <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-276">-or-  <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-277">
            <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-277">
              <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-278">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-278">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="7cda6-279">-or-  <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-279">-or-  <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7cda6-280">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-280">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7cda6-281">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-281">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7cda6-282">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-282">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="7cda6-283">The character array containing the set of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-283">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="7cda6-284">The index of the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-284">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="7cda6-285">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-285">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="7cda6-286">The byte array to contain the resulting sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-286">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="7cda6-287">The index at which to start writing the resulting sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-287">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-288">Encodes a set of characters from the specified character array into the specified byte array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-288">Encodes a set of characters from the specified character array into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-289">The actual number of bytes written into <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-289">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-290">必要な厳密な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetBytes%2A>呼び出した結果のバイトを格納する、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-290">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-291">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-291">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-292"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-292">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-293">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-293">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-294">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-294">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7cda6-295">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-295">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7cda6-296">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-296">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cda6-297">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-297">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7cda6-298">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-298">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="7cda6-299"><xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッドはエンコードされたバイトのシーケンスの先頭に preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-299">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-300">次の例で使用する方法、<xref:System.Text.UnicodeEncoding.GetBytes%2A>から文字の範囲をエンコードする方法、<xref:System.String>し、バイト配列の要素の範囲内でエンコードされたバイトを格納します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-300">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-301">
            <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-301">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="7cda6-302">-or-  <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-302">-or-  <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-303">
            <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-303">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7cda6-304">-or-  <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-304">-or-  <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="7cda6-305">-or-  <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-305">-or-  <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-306">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-306">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="7cda6-307">-or-  <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-307">-or-  <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7cda6-308">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-308">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="7cda6-309">The string containing the set of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-309">The string containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="7cda6-310">The index of the first character to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-310">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="7cda6-311">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-311">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="7cda6-312">The byte array to contain the resulting sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-312">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="7cda6-313">The index at which to start writing the resulting sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-313">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-314">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-314">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-315">The actual number of bytes written into <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-315">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-316">必要な厳密な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetBytes%2A>呼び出した結果のバイトを格納する、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-316">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-317">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-317">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7cda6-318"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-318">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-319">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-319">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-320">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-320">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7cda6-321">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-321">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7cda6-322">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-322">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cda6-323">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-323">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7cda6-324">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-324">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="7cda6-325"><xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッドはエンコードされたバイトのシーケンスの先頭に preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-325">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-326">次の例では、Unicode 文字配列から要素の範囲をエンコードおよびバイト配列の要素の範囲内でエンコードされたバイトを格納する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-326">The following example demonstrates how to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-327">
            <paramref name="s" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-327">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="7cda6-328">-or-  <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-328">-or-  <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-329">
            <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-329">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7cda6-330">-or-  <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-330">-or-  <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="7cda6-331">-or-  <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-331">-or-  <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-332">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-332">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="7cda6-333">-or-  <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-333">-or-  <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7cda6-334">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-334">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-335">Calculates the number of characters produced by decoding a sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-335">Calculates the number of characters produced by decoding a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="7cda6-336">A pointer to the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-336">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="7cda6-337">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-337">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-338">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-338">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-339">The number of characters produced by decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-339">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-340">計算する正確な配列のサイズを<xref:System.Text.UnicodeEncoding.GetChars%2A>アプリケーションは、結果として得られる文字を格納する必要があります<xref:System.Text.UnicodeEncoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-340">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="7cda6-341">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-341">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="7cda6-342"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-342">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-343">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-343">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-344">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-344">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-345">
            <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-345">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-346">
            <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-346">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7cda6-347">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-347">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-348">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-348">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7cda6-349">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-349">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7cda6-350">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-350">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7cda6-351">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-351">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="7cda6-352">The byte array containing the sequence of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-352">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="7cda6-353">The index of the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-353">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="7cda6-354">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-354">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-355">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-355">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-356">The number of characters produced by decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-356">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-357">必要な厳密な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetChars%2A>結果の文字を格納するアプリケーションを使用して<xref:System.Text.UnicodeEncoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-357">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="7cda6-358">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-358">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="7cda6-359"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-359">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-360">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-360">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-361">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-361">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-362">次の例で使用する方法、<xref:System.Text.UnicodeEncoding.GetCharCount%2A>範囲の要素を使用してバイト配列にデコードすることによって生成される文字数を返すメソッドを<xref:System.Text.UnicodeEncoding>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-362">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array using <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-363">
            <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-363">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-364">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-364">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7cda6-365">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-365">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="7cda6-366">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-366">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-367">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-367">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7cda6-368">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-368">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-369">Decodes a sequence of bytes into a set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-369">Decodes a sequence of bytes into a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="7cda6-370">A pointer to the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-370">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="7cda6-371">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-371">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="7cda6-372">A pointer to the location at which to start writing the resulting set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-372">A pointer to the location at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="7cda6-373">The maximum number of characters to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-373">The maximum number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-374">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-374">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-375">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-375">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-376">計算する正確な配列のサイズを<xref:System.Text.UnicodeEncoding.GetChars%2A>アプリケーションは、結果として得られる文字を格納する必要があります<xref:System.Text.UnicodeEncoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-376">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="7cda6-377">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-377">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="7cda6-378"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-378">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-379">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-379">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-380">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-380">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7cda6-381">デコードするバイトの範囲には、バイト順マーク (BOM) が含まれています。 バイト配列が BOM で非対応型のメソッドによって返される場合は、文字 U + FFFE はこのメソッドによって返される文字配列に含まれています。</span><span class="sxs-lookup"><span data-stu-id="7cda6-381">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="7cda6-382">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-382">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7cda6-383">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-383">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7cda6-384">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>オブジェクトによって提供される、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>または<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-384">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-385">
            <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-385">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="7cda6-386">-or-  <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-386">-or-  <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-387">
            <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-387">
              <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-388">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-388">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="7cda6-389">-or-  <paramref name="charCount" /> is less than the resulting number of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-389">-or-  <paramref name="charCount" /> is less than the resulting number of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7cda6-390">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-390">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7cda6-391">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-391">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7cda6-392">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-392">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="7cda6-393">The byte array containing the sequence of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-393">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="7cda6-394">The index of the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-394">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="7cda6-395">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-395">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="7cda6-396">The character array to contain the resulting set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-396">The character array to contain the resulting set of characters.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="7cda6-397">The index at which to start writing the resulting set of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-397">The index at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-398">Decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-398">Decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-399">The actual number of characters written into <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-399">The actual number of characters written into <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-400">必要な厳密な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetChars%2A>結果の文字を格納するアプリケーションを使用して<xref:System.Text.UnicodeEncoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-400">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="7cda6-401">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-401">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="7cda6-402"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-402">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-403">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-403">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-404">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-404">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7cda6-405">デコードするバイトの範囲には、バイト順マーク (BOM) が含まれています。 バイト配列が BOM で非対応型のメソッドによって返される場合は、文字 U + FFFE はこのメソッドによって返される文字配列に含まれています。</span><span class="sxs-lookup"><span data-stu-id="7cda6-405">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="7cda6-406">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-406">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7cda6-407">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-407">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7cda6-408">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-408">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-409">次の例で使用する方法、<xref:System.Text.UnicodeEncoding.GetChars%2A>バイト配列の要素の範囲をデコードし、結果を文字配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-409">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-410">
            <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-410">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="7cda6-411">-or-  <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-411">-or-  <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-412">
            <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-412">
              <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7cda6-413">-or-  <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-413">-or-  <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="7cda6-414">-or-  <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-414">-or-  <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-415">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-415">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="7cda6-416">-or-  <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-416">-or-  <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7cda6-417">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-417">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="unicodeEncoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-418">Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-418">Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-419">A <see cref="T:System.Text.Decoder" /> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-419">A <see cref="T:System.Text.Decoder" /> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-420"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドと同様の方法で、文字のシーケンシャル ブロックにバイトのシーケンシャル ブロックを変換する、<xref:System.Text.UnicodeEncoding.GetChars%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-420">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="7cda6-421">ただし、<xref:System.Text.Decoder>のブロックをまたぐバイト シーケンスを正しくデコードすることができますのでの呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-421">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="7cda6-422"><xref:System.Text.Decoder>もデータ ブロックの末尾にある末尾バイトを保持し、[次へ] のデコード操作で末尾バイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-422">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="7cda6-423">したがって、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>と<xref:System.Text.UnicodeEncoding.GetEncoder%2A>の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためにネットワーク転送、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-423">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="7cda6-424">エラーの検出が有効なかどうか、つまり、`throwOnInvalidBytes`にコンス トラクターのパラメーターが設定されている`true`でエラーの検出が有効にも、<xref:System.Text.Decoder>このメソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-424">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="7cda6-425">エラーの検出が有効にし、無効なシーケンスが発生した、デコーダーの状態が定義されていないと、処理が停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-425">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-426">次の例では、エンコーダーとデコーダーを使用して、(バイト単位) の配列に文字列をエンコードを文字の配列にバイトをデコードします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-426">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="unicodeEncoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-427">Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-427">Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-428">A <see cref="T:System.Text.Encoder" /> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-428">A <see cref="T:System.Text.Encoder" /> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-429"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドと同様のバイト数のシーケンシャル ブロックに文字のシーケンシャル ブロックを変換する、<xref:System.Text.UnicodeEncoding.GetBytes%2A>このクラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-429">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class.</span></span> <span data-ttu-id="7cda6-430">ただし、<xref:System.Text.Encoder>のブロックをまたぐ文字シーケンスを正しくエンコードすることができるように、オブジェクトが呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-430">However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="7cda6-431"><xref:System.Text.Encoder>オブジェクトはまた、データ ブロックの最後の文字を保持し、末尾の文字を使用して、次のエンコード操作します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-431">The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="7cda6-432">たとえば、データ ブロックが上位サロゲートで終了し、一致する下位サロゲートが [次へ] のデータ ブロック内にある可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-432">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="7cda6-433">したがって、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>と<xref:System.Text.UnicodeEncoding.GetEncoder%2A>の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためにネットワーク転送、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-433">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="7cda6-434">エラーの検出が有効なかどうか、つまり、`throwOnInvalidBytes`にコンス トラクターのパラメーターが設定されている`true`でエラーの検出が有効にも、<xref:System.Text.Encoder>このメソッドによって返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7cda6-434">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> object returned by this method.</span></span> <span data-ttu-id="7cda6-435">エラーの検出が有効にし、無効なシーケンスが発生した、エンコーダーの状態が定義されていないと、処理が停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-435">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-436">次の例では、エンコーダーとデコーダーを使用して、(バイト単位) の配列に文字列をエンコードを文字の配列にバイトをデコードします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-436">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="unicodeEncoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-437">Returns the hash code for the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-437">Returns the hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-438">The hash code for the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-438">The hash code for the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="unicodeEncoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">
          <span data-ttu-id="7cda6-439">The number of characters to encode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-439">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-440">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-440">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-441">The maximum number of bytes produced by encoding the specified number of characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-441">The maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-442">必要な厳密な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetBytes%2A>結果のバイトを格納するアプリケーションを使用して<xref:System.Text.UnicodeEncoding.GetByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-442">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="7cda6-443">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-443">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="7cda6-444"><xref:System.Text.UnicodeEncoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-444">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-445"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 現在選択されている最悪のケースを含む、最悪のシナリオの数を取得<xref:System.Text.EncoderFallback>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-445"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="7cda6-446">フォールバックがある可能性がある文字列で、選択されている場合<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>大きな値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-446">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="7cda6-447">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を取得します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-447">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="7cda6-448">大きな文字列は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでエラーをキャッチするかを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-448">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="7cda6-449">使用して、別のアプローチを検討することも<xref:System.Text.UnicodeEncoding.GetByteCount%2A>または<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-449">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7cda6-450"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 関係を持たない<xref:System.Text.UnicodeEncoding.GetChars%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-450"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="7cda6-451">使用するような関数が、アプリケーションに必要なかどうかは<xref:System.Text.UnicodeEncoding.GetChars%2A>、それを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-451">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cda6-452">`GetMaxByteCount(N)` 必ずしもと同じ値ではない`N* GetMaxByteCount(1)`です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-452">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-453">次の例で使用する方法、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>最大指定数の文字をエンコードするために必要なバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-453">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-454">
            <paramref name="charCount" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-454">
              <paramref name="charCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7cda6-455">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-455">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7cda6-456">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-456">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="unicodeEncoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">
          <span data-ttu-id="7cda6-457">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-457">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-458">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-458">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-459">The maximum number of characters produced by decoding the specified number of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-459">The maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-460">必要な厳密な配列のサイズを計算する<xref:System.Text.UnicodeEncoding.GetChars%2A>結果の文字を格納するアプリケーションを使用して<xref:System.Text.UnicodeEncoding.GetCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-460">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="7cda6-461">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-461">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="7cda6-462"><xref:System.Text.UnicodeEncoding.GetCharCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-462">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7cda6-463"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 現在選択されている最悪のケースを含む、最悪のシナリオの数を取得<xref:System.Text.DecoderFallback>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-463"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="7cda6-464">フォールバックがある可能性がある文字列で、選択されている場合<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>大きな値を取得します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-464">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values.</span></span>  
  
 <span data-ttu-id="7cda6-465">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を取得します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-465">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="7cda6-466">大きな文字列は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでエラーをキャッチするかを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-466">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="7cda6-467">使用して、別のアプローチを検討することも<xref:System.Text.UnicodeEncoding.GetCharCount%2A>または<xref:System.Text.Decoder.Convert%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-467">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.</span></span>  
  
 <span data-ttu-id="7cda6-468"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 関係を持たない<xref:System.Text.UnicodeEncoding.GetBytes%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-468"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>.</span></span> <span data-ttu-id="7cda6-469">使用するような関数が、アプリケーションに必要なかどうかは<xref:System.Text.UnicodeEncoding.GetBytes%2A>、それを使用する必要があります<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-469">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cda6-470">`GetMaxCharCount(N)` 必ずしもと同じ値ではない`N* GetMaxCharCount(1)`です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-470">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-471">次の例で使用する方法、<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>を文字の最大数を返すメソッドが、指定したバイト数をデコードすることによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-471">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-472">
            <paramref name="byteCount" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-472">
              <paramref name="byteCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7cda6-473">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-473">-or-  The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7cda6-474">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-474">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="unicodeEncoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7cda6-475">Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-475">Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-476">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UnicodeEncoding" /> object is configured to supply one.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-476">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UnicodeEncoding" /> object is configured to supply one.</span>
          </span>
          <span data-ttu-id="7cda6-477">Otherwise, this method returns a zero-length byte array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-477">Otherwise, this method returns a zero-length byte array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-478"><xref:System.Text.UnicodeEncoding>オブジェクトは、preamble、これは、エンコード プロセスからバイトのシーケンスにプレフィックスとして付けることができますをバイト配列を提供できます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-478">The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="7cda6-479">バイト順マーク (コード ポイント U+FEFF) でエンコードされたバイトのシーケンスの先頭には、バイト順および変換形式または UTF 決定デコーダーことができます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-479">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="7cda6-480">Unicode バイト順マーク (BOM) が (16 進) に次のようにシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-480">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="7cda6-481">ビッグ エンディアン バイト順: FE FF</span><span class="sxs-lookup"><span data-stu-id="7cda6-481">Big endian byte order: FE FF</span></span>  
  
-   <span data-ttu-id="7cda6-482">リトル エンディアン バイト順: FF FE</span><span class="sxs-lookup"><span data-stu-id="7cda6-482">Little endian byte order: FF FE</span></span>  
  
 <span data-ttu-id="7cda6-483">インスタンス化することができます、<xref:System.Text.UnicodeEncoding>オブジェクト<xref:System.Text.UnicodeEncoding.GetPreamble%2A>メソッドは、次の方法で有効な BOM を返します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-483">You can instantiate a <xref:System.Text.UnicodeEncoding> object whose <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="7cda6-484">取得することによって、<xref:System.Text.UnicodeEncoding>によって返されるオブジェクト、<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>または<xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-484">By retrieving the <xref:System.Text.UnicodeEncoding> object returned by the <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> or <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="7cda6-485">パラメーターなしで呼び出すことによって<xref:System.Text.UnicodeEncoding.%23ctor>をインスタンス化するコンス トラクター、<xref:System.Text.UnicodeEncoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7cda6-485">By calling the parameterless <xref:System.Text.UnicodeEncoding.%23ctor> constructor to instantiate a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
-   <span data-ttu-id="7cda6-486">指定することによって`true`の値として、`byteOrderMark`への引数、<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>または<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-486">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> or <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructors.</span></span>  
  
 <span data-ttu-id="7cda6-487">BOM を使用すると、特定の id が失われた場合、参照、エンコード、または不適切なタグなしなどのファイルのエンコーディングのほとんどを提供するため web データまたはランダム テキスト ファイルの場合、ビジネスの格納がなかったことをお勧め国際化に関する注意事項です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-487">We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="7cda6-488">データが一貫して適切なタグとは、多くの場合、ユーザーの問題を回避できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-488">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="7cda6-489">エンコードの種類を提供する標準、BOM は冗長です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-489">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="7cda6-490">ただし、正しいエンコード ヘッダーを送信するサーバーのヘルプを使用できます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-490">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="7cda6-491">または、するとして使用できます、フォールバック エンコーディングが失われたそれ以外の場合に備えてです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-491">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="7cda6-492">BOM を使用するには、いくつか欠点があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-492">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="7cda6-493">たとえば、BOM を使用するデータベース フィールドを制限する方法を知ることが難しいがあります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-493">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="7cda6-494">ファイルの連結問題になる場合も、たとえばなどのファイルをマージするとデータの途中で不要な文字が最終的な形です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-494">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="7cda6-495">いくつかの欠点を行ってもただし、BOM の使用が強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-495">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7cda6-496">エンコードされたバイト数が正しくデコードするためには、プリアンブルでエンコードされたバイトのストリームの先頭プレフィックスにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-496">To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7cda6-497">なお、<xref:System.Text.UnicodeEncoding.GetBytes%2A>メソッドでエンコードされたバイトのシーケンスに BOM が付加されません以外の場合は、開発者の責任は、適切なバイト ストリームの先頭の BOM を指定します。</span><span class="sxs-lookup"><span data-stu-id="7cda6-497">Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-498">次の例で使用する方法、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>ビッグ エンディアンまたはのインスタンスのリトル エンディアン バイト順で Unicode バイト順マークを取得する方法を<xref:System.Text.UnicodeEncoding>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-498">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to retrieve the Unicode byte order mark in big endian or little endian byte order for an instance of a <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="7cda6-499">次の例では、2 つをインスタンス化<xref:System.Text.UnicodeEncoding>オブジェクト、BOM やの 2 番目の最初が提供されません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-499">The following example instantiates two <xref:System.Text.UnicodeEncoding> objects, the first of which does not provide a BOM, and the second of which does.</span></span> <span data-ttu-id="7cda6-500">呼び出して、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>に Unicode でエンコードされた文字列を書き込む前に、BOM をファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-500">It then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to write the BOM to a file before writing a Unicode-encoded string.</span></span> <span data-ttu-id="7cda6-501">コンソール出力の例を示すように、2 番目のエンコーダーからのバイトを保存するファイルは最初より多く 3 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="7cda6-501">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/cs/GetPreamble1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/vb/GetPreamble1.vb#1)]  
  
 <span data-ttu-id="7cda6-502">使用して、ファイルを比較することもできます、`fc`するか、コンソール ウィンドウ内のコマンドは 16 進表示モードを含むテキスト エディターでファイルを調査できます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-502">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="7cda6-503">Utf-16 エンコーディングをサポートするエディターで、ファイルを開くときに、BOM が表示されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="7cda6-503">Note that when the file is opened in an editor that supports UTF-16 encoding, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="unicodeEncoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="7cda6-504">The byte array containing the sequence of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-504">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="7cda6-505">The index of the first byte to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-505">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="7cda6-506">The number of bytes to decode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-506">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cda6-507">Decodes a range of bytes from a byte array into a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-507">Decodes a range of bytes from a byte array into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cda6-508">A <see cref="T:System.String" /> object containing the results of decoding the specified sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-508">A <see cref="T:System.String" /> object containing the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cda6-509">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="7cda6-509">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7cda6-510">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="7cda6-510">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7cda6-511">デコードするバイトの範囲には、バイト順マーク (BOM) が含まれています。 バイト配列が BOM で非対応型のメソッドによって返される場合は、文字 U + FFFE はこのメソッドによって返される文字配列に含まれています。</span><span class="sxs-lookup"><span data-stu-id="7cda6-511">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="7cda6-512">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-512">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7cda6-513">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7cda6-513">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7cda6-514">この場合、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>オブジェクトによって提供される、<xref:System.Text.UnicodeEncoding.GetDecoder%2A>または<xref:System.Text.UnicodeEncoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-514">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cda6-515">次の例では、配列を初期化を呼び出して、<xref:System.Text.UnicodeEncoding.GetByteCount%2A>バイト数がエンコードされた文字列とバイト順マーク (BOM) のサイズを追加するために必要なだけを調べます。</span><span class="sxs-lookup"><span data-stu-id="7cda6-515">The following example initializes an array by calling the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="7cda6-516">この例では、<xref:System.Text.UnicodeEncoding.GetPreamble%2A>は BOM を呼び出す前に、配列を格納する方法、<xref:System.Text.Encoding.GetBytes%2A>配列にエンコードされたバイトを格納するメソッド。</span><span class="sxs-lookup"><span data-stu-id="7cda6-516">The example then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="7cda6-517">この例では、<xref:System.Text.UnicodeEncoding.GetString%2A>文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="7cda6-517">The example then calls the <xref:System.Text.UnicodeEncoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="7cda6-518">ここでは、デコードした文字列が異なること、元の文字列から 16 ビットのバイト順マーク U+FFFD で始まっているので注意してください。</span><span class="sxs-lookup"><span data-stu-id="7cda6-518">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="7cda6-519">つまり、2 つの文字列が、等しくないものとして比較されます、文字列が出力の場合は、BOM が表示されること、置換文字として"?"。</span><span class="sxs-lookup"><span data-stu-id="7cda6-519">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="7cda6-520">文字列の先頭の BOM を削除するに呼び出せる、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="7cda6-520">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7cda6-521">
            <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-521">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7cda6-522">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-522">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7cda6-523">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-523">-or-  <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cda6-524">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-524">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7cda6-525">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cda6-525">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  -and-  <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>