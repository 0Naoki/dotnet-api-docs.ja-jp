<Type Name="StringBuilder" FullName="System.Text.StringBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c22b2b33743cc8b96ef99ed1b66eefab12bd62a1" />
    <Meta Name="ms.sourcegitcommit" Value="6f3d3181d9ca22a1ab46a7f61f3ee152f2b844ea" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/27/2018" />
    <Meta Name="ms.locfileid" Value="50174637" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class StringBuilder : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit StringBuilder extends System.Object implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Text.StringBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StringBuilder&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringBuilder sealed : System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type StringBuilder = class&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>可変型の文字列を表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスは、値が変更可能な一連の文字の文字列のようなオブジェクトを表します。  
  
 このセクションの内容:  
  
-   [文字列と StringBuilder 型](#StringAndSB)  
  
-   [StringBuilder のしくみ](#HowWorks)  
  
-   [メモリの割り当て](#Memory)  
  
-   [StringBuilder オブジェクトをインスタンス化します。](#Instantiating)  
  
-   [StringBuilder のメソッドを呼び出す](#Calling)  
  
-   [StringBuilder の操作を実行します。](#Operations)  
  
    -   [StringBuilder の文字を反復処理します。](#Iterating)  
  
    -   [StringBuilder オブジェクトへのテキストの追加](#Adding)  
  
    -   [StringBuilder オブジェクトからテキストを削除](#Deleting)  
  
    -   [StringBuilder オブジェクトの文字列を変更します。](#Modifying)  
  
-   [StringBuilder オブジェクトのテキストを検索](#Searching)  
  
-   [StringBuilder オブジェクトを文字列に変換します。](#Converting)  
  
<a name="StringAndSB"></a>   
## <a name="the-string-and-stringbuilder-types"></a>文字列と StringBuilder 型  
 <xref:System.Text.StringBuilder>と<xref:System.String>シーケンスを表す両方の文字の実装は異なります。 <xref:System.String> 変更不可の型です。 変更に表示される各操作を<xref:System.String>オブジェクトが実際に新しい文字列を作成します。  
  
 呼び出しなど、<xref:System.String.Concat%2A?displayProperty=nameWithType>という名前の文字列変数の値を変更する次の c# の例のメソッドが表示されます`value`します。 実際には、<xref:System.String.Concat%2A>メソッドを返します。 を`value`オブジェクト別の値とからのアドレスを持つ、`value`メソッドに渡されたオブジェクト。 使用して、例をコンパイルする必要がありますに注意してください、`/unsafe`コンパイラ オプション。  
  
 [!code-csharp[System.Text.StringBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/immutability2.cs#1)]  
  
 (ループ内で何度も文字列を変更するアプリ) などの広範な文字列操作を実行するルーチンの場合、繰り返しの文字列を変更することが、大幅なパフォーマンスの低下に正確なことができます。 使用する方法が<xref:System.Text.StringBuilder>文字列の変更可能なクラスです。 可変性では、クラスのインスタンスが作成されたら、それを変更できることによって追加、削除、置換、または文字を挿入することを意味します。 A<xref:System.Text.StringBuilder>オブジェクトは、文字列の拡張に対応するためにバッファーを保持します。 ルームがある場合、新しいデータがバッファーに追加されます。それ以外の場合、新しいより大きなバッファーを割り当て、元のバッファーからのデータは、新しいバッファーにコピーおよび、次に、新しいデータは新しいバッファーに追加します。  
  
> [!IMPORTANT]
>  ですが、<xref:System.Text.StringBuilder>クラスが通常よりも優れたパフォーマンスを提供、<xref:System.String>クラスを自動的に代わり使用しないでください<xref:System.String>で<xref:System.Text.StringBuilder>文字列を操作するたびにします。 パフォーマンスは、新しい文字列、アプリが実行されて、システムおよび操作の種類に割り当てられるメモリの量、文字列のサイズによって異なります。 判断するアプリをテストする準備しておくべきかどうか<xref:System.Text.StringBuilder>実際に大幅なパフォーマンスの向上を提供します。  
  
 使用を検討して、<xref:System.String>これらの条件下でクラス。  
  
-   文字列に、アプリが加えた変更の数が小さい場合です。 このような場合は、<xref:System.Text.StringBuilder>がごくわずかのプランまたは経由でパフォーマンスが向上しない<xref:System.String>します。  
  
-   ときに固定数のリテラル文字列で特に、連結演算を実行しています。 この場合、コンパイラは、1 回の操作に連結演算を組み合わせることがあります。  
  
-   ある場合、文字列を構築しているときに、広範な検索操作を実行します。 <xref:System.Text.StringBuilder>クラスにメソッドをなど、検索する`IndexOf`または`StartsWith`します。 変換する必要があります、<xref:System.Text.StringBuilder>オブジェクトを<xref:System.String>を使用してから、パフォーマンス上の利点を無効にでき、これらの操作の<xref:System.Text.StringBuilder>します。 詳細については、次を参照してください。、 [StringBuilder オブジェクトのテキストを検索](#Searching)セクション。  
  
 使用を検討して、<xref:System.Text.StringBuilder>これらの条件下でクラス。  
  
-   (たとえば、ユーザー入力を格納する文字列のランダムな数値を連結するループを使用している場合) のデザイン時に文字列を変更数が不明なするアプリを予期したタイミング。  
  
-   文字列を多数の変更を有効にするアプリを予期したタイミング。  
  
<a name="HowWorks"></a>   
## <a name="how-stringbuilder-works"></a>StringBuilder のしくみ  
 <xref:System.Text.StringBuilder.Length%2A?displayProperty=nameWithType>プロパティの文字数を示します、<xref:System.Text.StringBuilder>オブジェクトに現在含まれています。 文字を追加する場合、<xref:System.Text.StringBuilder>オブジェクト、その長さが増加のサイズが等しくなるまで、<xref:System.Text.StringBuilder.Capacity%2A?displayProperty=nameWithType>プロパティで、オブジェクトに格納できる文字数を定義します。 追加された文字の数の長さが発生した場合、<xref:System.Text.StringBuilder>をその現在の容量のほか、新しいメモリを超えるオブジェクトは、割り当て済みの値、<xref:System.Text.StringBuilder.Capacity%2A>プロパティが 2 倍に新しい文字が追加、<xref:System.Text.StringBuilder>オブジェクト、およびその<xref:System.Text.StringBuilder.Length%2A>プロパティを調整します。 追加のメモリを<xref:System.Text.StringBuilder>によって定義された値に達するまで、オブジェクトが動的に割り当てられます、<xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType>プロパティ。 最大容量に達すると、さらにメモリの割り当て可能なし、<xref:System.Text.StringBuilder>オブジェクト、および文字を追加または最大容量を超えて展開しようとしています。 いずれかをスローします。、<xref:System.ArgumentOutOfRangeException>または<xref:System.OutOfMemoryException>例外。  
  
 次の例を示して 方法、<xref:System.Text.StringBuilder>新しいメモリを割り当ておよびオブジェクトに割り当てられた文字列の拡張に伴い、その容量を動的に増加します。 コードを作成、<xref:System.Text.StringBuilder>既定 (パラメーターなしの) コンス トラクターを呼び出してオブジェクト。 このオブジェクトの既定の容量が 16 文字、およびその最大容量が 20億を超える文字。 文字列を追加する、"This is 文です"。 新しいメモリ割り当ての結果文字列の長さ (19 文字)、既定の容量を超えているため、<xref:System.Text.StringBuilder>オブジェクト。 32 文字以内に、オブジェクトの容量が 2 倍に、新しい文字列を追加すると、およびオブジェクトの長さは 19 文字を今すぐと等しい。 コード、文字列を追加「これは、追加の文です」。 値に、 <xref:System.Text.StringBuilder> 11 回のオブジェクトします。 追加操作がの長さを発生するたびに、<xref:System.Text.StringBuilder>をその容量はその既存の容量を超えるオブジェクトが 2 倍と<xref:System.Text.StringBuilder.Append%2A>操作が成功しました。  
  
 [!code-csharp[System.Text.StringBuilder.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/default1.cs#3)]
 [!code-vb[System.Text.StringBuilder.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/default1.vb#3)]  
  
<a name="Memory"></a>   
## <a name="memory-allocation"></a>メモリの割り当て  
 既定の容量を<xref:System.Text.StringBuilder>オブジェクトは、16 文字とその既定の最大容量は<xref:System.Int32.MaxValue?displayProperty=nameWithType>します。 呼び出す場合、これらの既定値が使用される、<xref:System.Text.StringBuilder.%23ctor>と<xref:System.Text.StringBuilder.%23ctor%28System.String%29>コンス トラクター。  
  
 初期量を明示的に定義することができます、<xref:System.Text.StringBuilder>次の方法でオブジェクト。  
  
-   いずれかを呼び出すことによって、<xref:System.Text.StringBuilder>コンス トラクターを含む、`capacity`パラメーター オブジェクトを作成するときにします。  
  
-   新しい値を明示的に割り当てることで、<xref:System.Text.StringBuilder.Capacity%2A?displayProperty=nameWithType>プロパティを既存の展開<xref:System.Text.StringBuilder>オブジェクト。 新しい容量が、既存の容量またはより大きいより小さい場合、このプロパティは例外をスローします。 注意してください、<xref:System.Text.StringBuilder>オブジェクトの最大容量。  
  
-   呼び出すことによって、<xref:System.Text.StringBuilder.EnsureCapacity%2A?displayProperty=nameWithType>新しい容量を持つメソッド。 新しい容量をより大きくなければなりません、<xref:System.Text.StringBuilder>オブジェクトの最大容量。 代入とは異なり、ただし、<xref:System.Text.StringBuilder.Capacity%2A>プロパティ、<xref:System.Text.StringBuilder.EnsureCapacity%2A>例外をスローしない場合は目的の新しい容量が、既存の容量より小さい。 この場合、メソッドの呼び出しには効果はありません。  
  
 文字列の長さが割り当てられている場合、<xref:System.Text.StringBuilder>コンス トラクターの呼び出し内のオブジェクトが既定の容量、または指定した容量を超えています、<xref:System.Text.StringBuilder.Capacity%2A>プロパティで指定した文字列の長さに設定されて、`value`パラメーター。  
  
 最大容量を明示的に定義することができます、<xref:System.Text.StringBuilder>オブジェクトを呼び出すことによって、<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29>コンス トラクター。 新しい値を割り当てることで、最大容量を変更することはできません、<xref:System.Text.StringBuilder.MaxCapacity%2A>プロパティは読み取り専用です。  
  
 前のセクションとして表示、既存の容量が不十分な追加のメモリが割り当てられていると容量を<xref:System.Text.StringBuilder>オブジェクトによって定義された値までの 2 倍、<xref:System.Text.StringBuilder.MaxCapacity%2A>プロパティ。  
  
 一般に、既定の容量と最大の容量は、ほとんどのアプリのための適切なは。 次の条件下でこれらの値の設定を検討する可能性があります。  
  
-   場合の最終的なサイズ、<xref:System.Text.StringBuilder>オブジェクトをメガ バイトを超える場合通常は非常に大きくなる可能性があります。 この場合、する可能性があります、最初の設定からのパフォーマンスが向上<xref:System.Text.StringBuilder.Capacity%2A>を格段に高い値に多くのメモリ再割り当てする必要のないプロパティです。  
  
-   場合は、アプリは限られたメモリを持つシステムで実行されています。 この場合、設定を考慮することがあります、<xref:System.Text.StringBuilder.MaxCapacity%2A>プロパティをより小さい<xref:System.Int32.MaxValue?displayProperty=nameWithType>場合は、アプリがメモリに制約がある環境で実行する可能性のある長い文字列を処理します。  
  
<a name="Instantiating"></a>   
## <a name="instantiating-a-stringbuilder-object"></a>StringBuilder オブジェクトをインスタンス化します。  
 インスタンス化する、<xref:System.Text.StringBuilder>その 6 つクラスのオーバー ロードされたコンス トラクターの次の表に示されているいずれかを呼び出すオブジェクト。 コンス トラクターの 3 つのインスタンスを作成、<xref:System.Text.StringBuilder>オブジェクトの値が空の文字列に設定がその<xref:System.Text.StringBuilder.Capacity%2A>と<xref:System.Text.StringBuilder.MaxCapacity%2A>値が異なります。 残りの 3 つのコンス トラクターを定義、<xref:System.Text.StringBuilder>特定の文字列値と容量を持つオブジェクト。 既定の最大容量を使用して、3 つのコンス トラクターの 2 つ<xref:System.Int32.MaxValue?displayProperty=nameWithType>、3 つ目では、最大容量を設定できます。  
  
|コンストラクター|文字列値|容量|最大容量|  
|-----------------|------------------|--------------|----------------------|  
|<xref:System.Text.StringBuilder.%23ctor>|<xref:System.String.Empty?displayProperty=nameWithType>|16|<xref:System.Int32.MaxValue?displayProperty=nameWithType>|  
|<xref:System.Text.StringBuilder.%23ctor%28System.Int32%29>|<xref:System.String.Empty?displayProperty=nameWithType>|によって定義されている、`capacity`パラメーター|<xref:System.Int32.MaxValue?displayProperty=nameWithType>|  
|<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29>|<xref:System.String.Empty?displayProperty=nameWithType>|によって定義されている、`capacity`パラメーター|によって定義されている、`maxCapacity`パラメーター|  
|<xref:System.Text.StringBuilder.%23ctor%28System.String%29>|によって定義されている、`value`パラメーター|16 または`value`します。 <xref:System.String.Length%2A>、大きい方になります|<xref:System.Int32.MaxValue?displayProperty=nameWithType>|  
|<xref:System.Text.StringBuilder.%23ctor%28System.String%2CSystem.Int32%29>|によって定義されている、`value`パラメーター|によって定義されている、`capacity`パラメーターまたは`value`します。 <xref:System.String.Length%2A>、大きい方になります。|<xref:System.Int32.MaxValue?displayProperty=nameWithType>|  
|<xref:System.Text.StringBuilder.%23ctor%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>|によって定義された`value`します。 <xref:System.String.Substring%2A>(`startIndex`, `length`)|によって定義されている、`capacity`パラメーターまたは`value`します。 <xref:System.String.Length%2A>、大きい方になります。|によって定義されている、`maxCapacity`パラメーター|  
  
 インスタンスを作成するのには次の例でこれらのコンス トラクター オーバー ロードのうち 3 つ<xref:System.Text.StringBuilder>オブジェクト。  
  
 [!code-csharp[System.Text.StringBuilder.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/instantiate1.cs#6)]
 [!code-vb[System.Text.StringBuilder.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/instantiate1.vb#6)]  
  
<a name="Calling"></a>   
## <a name="calling-stringbuilder-methods"></a>StringBuilder のメソッドを呼び出す  
 内の文字列を変更するメソッドのほとんどを<xref:System.Text.StringBuilder>インスタンスがその同じインスタンスへの参照を返します。 これを使用すると、呼び出す<xref:System.Text.StringBuilder>メソッドが 2 つの方法で。  
  
-   個々 のメソッドを呼び出すことし、次の例のように、戻り値を無視することができます。  
  
     [!code-csharp[System.Text.StringBuilder.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call1.cs#4)]
     [!code-vb[System.Text.StringBuilder.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call1.vb#4)]  
  
-   単一のステートメントでは、一連のメソッド呼び出しを行うことができます。 これは、一連の操作のチェーンを 1 つのステートメントを記述する場合に便利です。 次の例では、前の例から次の 3 つのメソッド呼び出しを 1 行のコードに統合します。  
  
     [!code-csharp[System.Text.StringBuilder.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call2.cs#5)]
     [!code-vb[System.Text.StringBuilder.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call2.vb#5)]  
  
<a name="Operations"></a>   
## <a name="performing-stringbuilder-operations"></a>StringBuilder の操作を実行します。  
 メソッドを使用することができます、<xref:System.Text.StringBuilder>反復処理する、追加、削除、または内の文字を変更するにはクラス、<xref:System.Text.StringBuilder>オブジェクト。  
  
<a name="Iterating"></a>   
### <a name="iterating-stringbuilder-characters"></a>StringBuilder の文字を反復処理します。  
 内の文字にアクセスすることができます、<xref:System.Text.StringBuilder>オブジェクトを使用して、<xref:System.Text.StringBuilder.Chars%2A?displayProperty=nameWithType>プロパティ。 C# で<xref:System.Text.StringBuilder.Chars%2A>。 インデクサーは、Visual basic での既定のプロパティは、<xref:System.Text.StringBuilder>クラス。 これにより、明示的に参照しなくても、インデックスのみを使用して、個々 の文字を取得または設定、<xref:System.Text.StringBuilder.Chars%2A>プロパティ。 内の文字を<xref:System.Text.StringBuilder>オブジェクトがインデックス 0 (ゼロ) から始まり、インデックスを続行<xref:System.Text.StringBuilder.Length%2A>- 1。  
  
 次の例を示しています、<xref:System.Text.StringBuilder.Chars%2A>プロパティ。 10 個のランダムな数字を追加、<xref:System.Text.StringBuilder>オブジェクト、および反復処理し、各文字。 場合は、文字の Unicode カテゴリ<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>数を減らすことを 1 つ (またはその値が 0 の場合、数は 9 に変更)。 この例の内容を表示する、<xref:System.Text.StringBuilder>前に、と後、個々 の文字の値が変更されたオブジェクトの両方。  
  
 [!code-csharp[System.Text.StringBuilder.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/chars1.cs#7)]
 [!code-vb[System.Text.StringBuilder.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/chars1.vb#7)]  

[!INCLUDE[stringbuilder-performance-note](~/includes/stringbuilder-perf-note.md)]
  
<a name="Adding"></a>   
### <a name="adding-text-to-a-stringbuilder-object"></a>StringBuilder オブジェクトへのテキストの追加  
 <xref:System.Text.StringBuilder>クラスには内容を拡張するために、次のメソッドが含まれています、<xref:System.Text.StringBuilder>オブジェクト。  
  
-   <xref:System.Text.StringBuilder.Append%2A>メソッドは、追加、文字列、部分文字列、文字配列を文字配列の一部分 1 つの文字が複数回繰り返されるまたはプリミティブ データの文字列形式の入力を<xref:System.Text.StringBuilder>オブジェクト。  
  
-   <xref:System.Text.StringBuilder.AppendLine%2A>行終端記号またはに行終端記号と共に、文字列、メソッドが追加され、<xref:System.Text.StringBuilder>オブジェクト。  
  
-   <xref:System.Text.StringBuilder.AppendFormat%2A>メソッドは、追加に、<xref:System.Text.StringBuilder>オブジェクト。 結果の文字列に含まれているオブジェクトの文字列形式には、現在のシステム カルチャまたは指定されたカルチャの書式指定規則を反映できます。  
  
-   <xref:System.Text.StringBuilder.Insert%2A>メソッドは、挿入、文字列を部分文字列、文字列の複数の繰り返し、文字配列、文字の配列の一部またはプリミティブ データの文字列形式の入力で指定した位置にある、<xref:System.Text.StringBuilder>オブジェクト。 位置は、0 から始まるインデックスによって定義されます。  
  
 次の例では、 <xref:System.Text.StringBuilder.Append%2A>、 <xref:System.Text.StringBuilder.AppendLine%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および<xref:System.Text.StringBuilder.Insert%2A>のテキストを展開する方法、<xref:System.Text.StringBuilder>オブジェクト。  
  
 [!code-csharp[System.Text.StringBuilder.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/expand1.cs#9)]
 [!code-vb[System.Text.StringBuilder.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/expand1.vb#9)]  
  
<a name="Deleting"></a>   
### <a name="deleting-text-from-a-stringbuilder-object"></a>StringBuilder オブジェクトからテキストを削除  
 <xref:System.Text.StringBuilder>クラスには、現在のサイズを減らすためのメソッドが含まれます。<xref:System.Text.StringBuilder>インスタンス。 <xref:System.Text.StringBuilder.Clear%2A>メソッドすべての文字を削除し、設定、<xref:System.Text.StringBuilder.Length%2A>プロパティを 0 にします。 <xref:System.Text.StringBuilder.Remove%2A>メソッドは、指定された数の特定のインデックス位置から始まる文字を削除します。 さらの末尾から文字を削除することができます、<xref:System.Text.StringBuilder>オブジェクトを設定してその<xref:System.Text.StringBuilder.Length%2A>プロパティを現在のインスタンスの長さよりも小さい値にします。  
  
 次の例では、削除からのテキストの一部を<xref:System.Text.StringBuilder>オブジェクト、その結果として得られる容量、最大容量は、および長さのプロパティの値を表示およびを呼び出して、<xref:System.Text.StringBuilder.Clear%2A>からすべての文字を削除する方法、<xref:System.Text.StringBuilder>オブジェクト。  
  
 [!code-csharp[System.Text.StringBuilder.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/delete1.cs#10)]
 [!code-vb[System.Text.StringBuilder.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/delete1.vb#10)]  
  
<a name="Modifying"></a>   
### <a name="modifying-the-text-in-a-stringbuilder-object"></a>StringBuilder オブジェクトの文字列を変更します。  
 <xref:System.Text.StringBuilder.Replace%2A?displayProperty=nameWithType>メソッドは文字または文字列全体でのすべての出現箇所を置き換える<xref:System.Text.StringBuilder>オブジェクトまたは特定の文字範囲内です。 次の例では、<xref:System.Text.StringBuilder.Replace%2A>疑問符 (?) ですべての感嘆符 (!) を置換するメソッド、<xref:System.Text.StringBuilder>オブジェクト。  
  
 [!code-csharp[System.Text.StringBuilder.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/replace1.cs#11)]
 [!code-vb[System.Text.StringBuilder.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/replace1.vb#11)]  
  
<a name="Searching"></a>   
## <a name="searching-the-text-in-a-stringbuilder-object"></a>StringBuilder オブジェクトのテキストを検索  
 <xref:System.Text.StringBuilder>クラスと同様の方法を含まない、 <xref:System.String.Contains%2A?displayProperty=nameWithType>、 <xref:System.String.IndexOf%2A?displayProperty=nameWithType>、および<xref:System.String.StartsWith%2A?displayProperty=nameWithType>によって提供されるメソッド、<xref:System.String>クラスは、特定の文字または部分文字列のオブジェクトを検索できます。 かどうかを決定する以降の部分文字列の文字の位置は、検索することが必要です、<xref:System.String>文字列検索メソッドまたは正規表現メソッドを使用して値。 次の表に示すよう、このような検索を実装するために 4 つの方法はあります。  
  
|手法|プロフェッショナル|短所|  
|---------------|----------|----------|  
|追加する前に文字列値を検索、<xref:System.Text.StringBuilder>オブジェクト。|部分文字列が存在するかどうかを決定するために便利です。|部分文字列のインデックス位置が重要では使用できません。|  
|呼び出す<xref:System.Text.StringBuilder.ToString%2A>と、返された検索<xref:System.String>オブジェクト。|簡単に使用するすべてのテキストを割り当てた場合、<xref:System.Text.StringBuilder>オブジェクト、および変更を開始します。|繰り返し呼び出すことの面倒な<xref:System.Text.StringBuilder.ToString%2A>かどうかにすべてのテキストを追加する前に変更を行う必要があります、<xref:System.Text.StringBuilder>オブジェクト。<br /><br /> 末尾から作業することが、<xref:System.Text.StringBuilder>変更を加えている場合は、オブジェクトのテキスト。|  
|使用して、<xref:System.Text.StringBuilder.Chars%2A>文字の範囲を順番に検索するプロパティ。|個々 の文字または小さな部分文字列の心配がある場合に役立ちます。|検索対象の文字数が多い場合、または検索ロジックが複雑な場合は煩雑です。<br /><br />繰り返されるメソッドの呼び出しを通じて、非常に大きなが大きくなったオブジェクトのパフォーマンスを大幅に低下の結果。  |  
|変換、<xref:System.Text.StringBuilder>オブジェクトを<xref:System.String>オブジェクトし、の変更を行う、<xref:System.String>オブジェクト。|変更の数が少ない場合に役立ちます。|パフォーマンスの利点を否定、<xref:System.Text.StringBuilder>クラスの変更の数が大きい場合。|  
  
 これらの手法を詳しく見ていきましょう。  
  
-   検索の目的でそれらを格納する前に文字列を検索することができます (つまり、部分文字列の位置に興味がない) 場合に特定の部分文字列が存在するかどうかを判断する場合、<xref:System.Text.StringBuilder>オブジェクト。 次の例では、1 つの考えられる実装を提供します。 定義、`StringBuilderFinder`クラスのコンス トラクターへの参照が渡される、<xref:System.Text.StringBuilder>オブジェクトと、文字列内で検索する部分文字列。 例が記録された気温が華氏または摂氏はおよびの先頭に適切な概要説明のテキストを追加するかどうかを決定しようとしたこの例では、<xref:System.Text.StringBuilder>オブジェクト。 乱数ジェネレーターを使用して、摂氏または華氏のいずれかでデータを格納する配列を選択します。  
  
     [!code-csharp[System.Text.StringBuilder.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern1.cs#12)]
     [!code-vb[System.Text.StringBuilder.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern1.vb#12)]  
  
-   呼び出す、<xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType>に変換するメソッド、<xref:System.Text.StringBuilder>オブジェクトを<xref:System.String>オブジェクト。 などのメソッドを使用して、文字列を検索する<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>または<xref:System.String.StartsWith%2A?displayProperty=nameWithType>、正規表現を使用することも、<xref:System.Text.RegularExpressions.Regex>パターンを検索するクラス。 両方<xref:System.Text.StringBuilder>と<xref:System.String>オブジェクトを使用して、utf-16 エンコード文字の部分文字列の文字のインデックス位置を格納して、正規表現の一致が両方のオブジェクトで同じです。 これにより、使用する<xref:System.Text.StringBuilder>でそのテキストが見つかった位置の同じ位置で変更を行う方法、<xref:System.String>オブジェクト。  
  
    > [!NOTE]
    >  このアプローチを採用する場合は、末尾から作業する必要があります、<xref:System.Text.StringBuilder>繰り返しに変換する必要があるないように、その以降にオブジェクト、<xref:System.Text.StringBuilder>オブジェクトを文字列。  
  
     このアプローチの例を次に示します。 英語のアルファベットの各文字の 4 つの出現回数を格納、<xref:System.Text.StringBuilder>オブジェクト。 テキストを次に、変換、<xref:System.String>オブジェクトごとの 4 文字のシーケンスの開始位置を識別するために正規表現を使用しています。 最後に、最初のシーケンスを除く各 4 文字のシーケンスの前にアンダー スコアを追加し、大文字に、シーケンスの最初の文字に変換します。  
  
     [!code-csharp[System.Text.StringBuilder.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern2.cs#13)]
     [!code-vb[System.Text.StringBuilder.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern2.vb#13)]  
  
-   使用して、<xref:System.Text.StringBuilder.Chars%2A?displayProperty=nameWithType>で文字の範囲を順番に検索するプロパティを<xref:System.Text.StringBuilder>オブジェクト。 検索する文字数が大きい場合や、検索ロジックが特に複雑な場合、このアプローチを実用的なできない可能性があります。 文字のインデックス ベースのアクセスのパフォーマンスに影響する非常に大きな、chunked<xref:System.Text.StringBuilder>オブジェクト、ドキュメントを参照して、<xref:System.Text.StringBuilder.Chars%2A?displayProperty=nameWithType>プロパティ。 
  
     次の例では、前の例と同じ機能ですが、実装では異なります。 使用して、<xref:System.Text.StringBuilder.Chars%2A>文字の値が変更されたときを検出するためにプロパティが、その位置にアンダー スコアを挿入し、新しいシーケンスの最初の文字を大文字に変換します。  
  
     [!code-csharp[System.Text.StringBuilder.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern3.cs#14)]
     [!code-vb[System.Text.StringBuilder.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern3.vb#14)]  
  
-   変更されていないすべてのテキストを格納、<xref:System.Text.StringBuilder>オブジェクトを呼び出し、<xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType>に変換するメソッド、<xref:System.Text.StringBuilder>オブジェクトを<xref:System.String>オブジェクトとに、変更が行わ、<xref:System.String>オブジェクト。 このアプローチを使用するには、いくつか変更にのみがある場合それ以外の場合、不変の文字列の操作のコストは可能性がありますを使用してのパフォーマンスの利点を負数化、<xref:System.Text.StringBuilder>オブジェクト。  
  
     次の例では、前の 2 つの例と同じ機能ですが、実装では異なります。 作成、<xref:System.Text.StringBuilder>オブジェクトに変換する、<xref:System.String>オブジェクト、および正規表現を使用して、文字列の残りのすべての変更を実行します。 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType>メソッドでは、ラムダ式を使用して、一致した各文字列の置換を実行します。  
  
     [!code-csharp[System.Text.StringBuilder.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern4.cs#15)]
     [!code-vb[System.Text.StringBuilder.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern4.vb#15)]  
  
<a name="Converting"></a>   
## <a name="converting-the-stringbuilder-object-to-a-string"></a>StringBuilder オブジェクトを文字列に変換します。  
 <xref:System.Text.StringBuilder> オブジェクトで表される文字列を <xref:System.String> パラメーターを持つメソッドに渡すかそれをユーザー インターフェイスに表示するには、事前に <xref:System.Text.StringBuilder> オブジェクトを <xref:System.String> オブジェクトに変換する必要があります。 呼び出すことによってこの変換を実行する、<xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType>メソッド。 例については、呼び出しの前の例を参照してください、<xref:System.Text.StringBuilder.ToString%2A>に変換するメソッド、<xref:System.Text.StringBuilder>オブジェクトの文字列を正規表現メソッドに渡すことができるようにします。  
  
   
  
## Examples  
 次の例で定義されたメソッドの多くを呼び出す方法を示しています、<xref:System.Text.StringBuilder>クラス。  
  
 [!code-cpp[StringBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringBuilder/cpp/StringBuilder.cpp#1)]
 [!code-csharp[StringBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringBuilder/CS/StringBuilder.cs#1)]
 [!code-vb[StringBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringBuilder/VB/StringBuilder.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
    </block>
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このインスタンスの文字列値に設定されます<xref:System.String.Empty?displayProperty=nameWithType>実装に固有の既定の容量に容量が設定されているとします。  
  
   
  
## Examples  
 次の例では、呼び出す方法、<xref:System.Text.StringBuilder.%23ctor%2A>パラメーターなしコンス トラクター。  
  
 [!code-cpp[System.Text.StringBuilder.Constructors#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#1)]
 [!code-csharp[System.Text.StringBuilder.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#1)]
 [!code-vb[System.Text.StringBuilder.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringBuilder (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringBuilder(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Text.StringBuilder : int -&gt; System.Text.StringBuilder" Usage="new System.Text.StringBuilder capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">このインスタンスの推奨される開始サイズ。</param>
        <summary>指定した容量を使用して、<see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `capacity`パラメーターは、現在のインスタンスによって割り当てられたメモリに格納できる文字の最大数を定義します。 その値は、<xref:System.Text.StringBuilder.Capacity%2A>プロパティ。 この現在のインスタンスに格納される文字数を超えたかどうか`capacity`値、<xref:System.Text.StringBuilder>オブジェクトがそれらを格納する追加のメモリを割り当てます。  
  
 このインスタンスの文字列値に設定されます<xref:System.String.Empty?displayProperty=nameWithType>します。 場合`capacity`0 の場合は、実装固有の既定の容量が使用されます。  
  
   
  
## Examples  
 次の例では、呼び出す方法、<xref:System.Text.StringBuilder.%23ctor%2A>コンス トラクター容量を指定します。  
  
 [!code-cpp[System.Text.StringBuilder.Constructors#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#3)]
 [!code-csharp[System.Text.StringBuilder.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#3)]
 [!code-vb[System.Text.StringBuilder.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> が 0 未満です。</exception>
        <altmember cref="P:System.Text.StringBuilder.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringBuilder (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringBuilder(System::String ^ value);" />
      <MemberSignature Language="F#" Value="new System.Text.StringBuilder : string -&gt; System.Text.StringBuilder" Usage="new System.Text.StringBuilder value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">インスタンスの値を初期化するために使用される文字列。 <c>value</c> が <see langword="null" /> の場合、新しい <see cref="T:System.Text.StringBuilder" /> は空の文字列、つまり、<see cref="F:System.String.Empty" /> を含みます。</param>
        <summary>指定した文字列を使用して、<see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` が `null` の場合、新しい <xref:System.Text.StringBuilder> は空の文字列、つまり、<xref:System.String.Empty> を含みます。  
  
   
  
## Examples  
 次の例では、呼び出す方法、<xref:System.Text.StringBuilder.%23ctor%2A>コンス トラクターで指定した文字列。  
  
 [!code-cpp[System.Text.StringBuilder.Constructors#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#4)]
 [!code-csharp[System.Text.StringBuilder.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#4)]
 [!code-vb[System.Text.StringBuilder.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringBuilder (int capacity, int maxCapacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, int32 maxCapacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, maxCapacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringBuilder(int capacity, int maxCapacity);" />
      <MemberSignature Language="F#" Value="new System.Text.StringBuilder : int * int -&gt; System.Text.StringBuilder" Usage="new System.Text.StringBuilder (capacity, maxCapacity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="maxCapacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <see cref="T:System.Text.StringBuilder" /> の推奨される開始サイズ。</param>
        <param name="maxCapacity">現在の文字列が含むことができる最大文字数。</param>
        <summary>指定した容量で始まり、指定した最大容量まで大きくなる <see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `capacity`パラメーターは、現在のインスタンスによって割り当てられたメモリに格納できる文字の最大数を定義します。 その値は、<xref:System.Text.StringBuilder.Capacity%2A>プロパティ。 この現在のインスタンスに格納される文字数を超えたかどうか`capacity`値、<xref:System.Text.StringBuilder>オブジェクトがそれらを格納する追加のメモリを割り当てます。  
  
 場合`capacity`0 の場合は、実装固有の既定の容量が使用されます。  
  
 `maxCapacity`プロパティは、現在のインスタンスを保持できる文字の最大数を定義します。 その値は、<xref:System.Text.StringBuilder.MaxCapacity%2A>プロパティ。 この現在のインスタンスに格納される文字数を超えたかどうか`maxCapacity`値、<xref:System.Text.StringBuilder>オブジェクトは、追加のメモリを割り当てられませんが、代わりに例外をスローします。  
  
   
  
## Examples  
 次の例では、呼び出す方法、<xref:System.Text.StringBuilder.%23ctor%2A>指定した容量と最大の容量を持つコンス トラクター。  
  
 [!code-cpp[System.Text.StringBuilder.Constructors#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#5)]
 [!code-csharp[System.Text.StringBuilder.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#5)]
 [!code-vb[System.Text.StringBuilder.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxCapacity" /> が 1 未満か、<paramref name="capacity" /> が 0 未満か、<paramref name="capacity" /> が <paramref name="maxCapacity" /> より大きいです。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="P:System.Text.StringBuilder.Capacity" />
        <altmember cref="P:System.Text.StringBuilder.MaxCapacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringBuilder (string value, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value, int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String, capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringBuilder(System::String ^ value, int capacity);" />
      <MemberSignature Language="F#" Value="new System.Text.StringBuilder : string * int -&gt; System.Text.StringBuilder" Usage="new System.Text.StringBuilder (value, capacity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">インスタンスの値を初期化するために使用される文字列。 <c>value</c> が <see langword="null" /> の場合、新しい <see cref="T:System.Text.StringBuilder" /> は空の文字列、つまり、<see cref="F:System.String.Empty" /> を含みます。</param>
        <param name="capacity">
          <see cref="T:System.Text.StringBuilder" /> の推奨される開始サイズ。</param>
        <summary>指定した文字列および容量を使用して、<see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `capacity`パラメーターは、現在のインスタンスによって割り当てられたメモリに格納できる文字の最大数を定義します。 その値は、<xref:System.Text.StringBuilder.Capacity%2A>プロパティ。 この現在のインスタンスに格納される文字数を超えたかどうか`capacity`値、<xref:System.Text.StringBuilder>オブジェクトがそれらを格納する追加のメモリを割り当てます。  
  
 場合`capacity`0 の場合は、実装固有の既定の容量が使用されます。  
  
   
  
## Examples  
 次の例では、呼び出す方法、<xref:System.Text.StringBuilder.%23ctor%2A>最初の文字列で指定された容量を持つコンス トラクター。  
  
 [!code-cpp[System.Text.StringBuilder.Constructors#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#7)]
 [!code-csharp[System.Text.StringBuilder.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#7)]
 [!code-vb[System.Text.StringBuilder.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> が 0 未満です。</exception>
        <altmember cref="P:System.Text.StringBuilder.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringBuilder (string value, int startIndex, int length, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value, int32 startIndex, int32 length, int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String, startIndex As Integer, length As Integer, capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringBuilder(System::String ^ value, int startIndex, int length, int capacity);" />
      <MemberSignature Language="F#" Value="new System.Text.StringBuilder : string * int * int * int -&gt; System.Text.StringBuilder" Usage="new System.Text.StringBuilder (value, startIndex, length, capacity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスの値を初期化するために使用される部分文字列を含む文字列。 <c>value</c> が <see langword="null" /> の場合、新しい <see cref="T:System.Text.StringBuilder" /> は空の文字列、つまり、<see cref="F:System.String.Empty" /> を含みます。</param>
        <param name="startIndex">
          <c>value</c> における部分文字列の開始位置。</param>
        <param name="length">部分文字列の文字数。</param>
        <param name="capacity">
          <see cref="T:System.Text.StringBuilder" /> の推奨される開始サイズ。</param>
        <summary>指定した部分文字列および容量から <see cref="T:System.Text.StringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `capacity`パラメーターは、現在のインスタンスによって割り当てられたメモリに格納できる文字の最大数を定義します。 その値は、<xref:System.Text.StringBuilder.Capacity%2A>プロパティ。 この現在のインスタンスに格納される文字数を超えたかどうか`capacity`値、<xref:System.Text.StringBuilder>オブジェクトがそれらを格納する追加のメモリを割り当てます。  
  
 場合`capacity`0 の場合は、実装固有の既定の容量が使用されます。  
  
   
  
## Examples  
 次の例では、呼び出す方法、<xref:System.Text.StringBuilder.%23ctor%2A>コンス トラクターで指定した文字列。  
  
 [!code-cpp[System.Text.StringBuilder.Constructors#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#6)]
 [!code-csharp[System.Text.StringBuilder.Constructors#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#6)]
 [!code-vb[System.Text.StringBuilder.Constructors#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> に <paramref name="length" /> を加算した値が <paramref name="value" /> 内の位置にありません。</exception>
        <altmember cref="P:System.Text.StringBuilder.Capacity" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したオブジェクトの文字列形式をこのインスタンスに追加します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Boolean) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(bool value);" />
      <MemberSignature Language="F#" Value="member this.Append : bool -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">追加するブール値。</param>
        <summary>指定したブール値の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Boolean%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)]
 [!code-vb[System.Text.StringBuilder.Append#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)]  
  
 <xref:System.Text.StringBuilder.Append%28System.Boolean%29>メソッドの呼び出し、<xref:System.Boolean.ToString?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`します。 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Byte) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::Byte value);" />
      <MemberSignature Language="F#" Value="member this.Append : byte -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定した 8 ビット符号なし整数の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Byte%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#3)]
 [!code-vb[System.Text.StringBuilder.Append#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#3)]  
  
 <xref:System.Text.StringBuilder.Append%28System.Byte%29>メソッドの呼び出し、<xref:System.Byte.ToString%28System.IFormatProvider%29>メソッドの文字列表現を取得する`value`現在のカルチャ。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Char) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(char value);" />
      <MemberSignature Language="F#" Value="member this.Append : char -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">追加する UTF-16 でエンコードされたコード単位。</param>
        <summary>指定した <see cref="T:System.Char" /> オブジェクトの文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Char%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#4)]
 [!code-vb[System.Text.StringBuilder.Append#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#4)]  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (char[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(char[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Char()) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(cli::array &lt;char&gt; ^ value);" />
      <MemberSignature Language="F#" Value="member this.Append : char[] -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="value">追加する文字の配列。</param>
        <summary>指定した配列内の Unicode 文字の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドに表示される現在のインスタンスと同じ順序で指定した配列内のすべての文字を追加`value`します。 場合`value`は`null`変更は行われません。  
  
 <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#6)]
 [!code-vb[System.Text.StringBuilder.Append#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#6)]  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Decimal) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.Append : decimal -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定した 10 進数の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Decimal%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#8)]
 [!code-vb[System.Text.StringBuilder.Append#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#8)]  
  
 <xref:System.Text.StringBuilder.Append%28System.Decimal%29>メソッドの呼び出し、<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`現在のカルチャ。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Double) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(double value);" />
      <MemberSignature Language="F#" Value="member this.Append : double -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定した倍精度浮動小数点数の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Double%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#9)]
 [!code-vb[System.Text.StringBuilder.Append#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#9)]  
  
 <xref:System.Text.StringBuilder.Append%28System.Double%29>メソッドの呼び出し、<xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`現在のカルチャ。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Short) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(short value);" />
      <MemberSignature Language="F#" Value="member this.Append : int16 -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定した 16 ビット符号付き整数の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Int16%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#10)]
 [!code-vb[System.Text.StringBuilder.Append#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#10)]  
  
 <xref:System.Text.StringBuilder.Append%28System.Int16%29>メソッドの呼び出し、<xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`現在のカルチャ。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(int value);" />
      <MemberSignature Language="F#" Value="member this.Append : int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定した 32 ビット符号付き整数の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Int32%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#11)]
 [!code-vb[System.Text.StringBuilder.Append#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#11)]  
  
 <xref:System.Text.StringBuilder.Append%28System.Int32%29>メソッドの呼び出し、<xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`現在のカルチャ。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Long) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(long value);" />
      <MemberSignature Language="F#" Value="member this.Append : int64 -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定した 64 ビット符号付き整数の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Int64%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#12)]
 [!code-vb[System.Text.StringBuilder.Append#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#12)]  
  
 <xref:System.Text.StringBuilder.Append%28System.Int64%29>メソッドの呼び出し、<xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>の文字列表現を取得する`value`現在のカルチャ。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Object) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.Append : obj -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">追加するオブジェクト。</param>
        <summary>指定したオブジェクトの文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Object%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。 定義しますを`Dog`クラスを作成、`Dog`オブジェクト、およびには 3 つの呼び出し、 <xref:System.Text.StringBuilder.Append%2A> dog の名前と種類を含む文字列を作成するメソッド。  
  
 [!code-csharp[System.Text.Stringbuilder.Append#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append4.cs#18)]
 [!code-vb[System.Text.Stringbuilder.Append#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append4.vb#18)]  
  
 <xref:System.Text.StringBuilder.Append%28System.Object%29>メソッドの呼び出し、<xref:System.Object.ToString%2A?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`します。 場合`value`は`null`に変更は行われません、<xref:System.Text.StringBuilder>オブジェクト。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As ReadOnlySpan(Of Char)) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.Append : ReadOnlySpan&lt;char&gt; -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As SByte) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::SByte value);" />
      <MemberSignature Language="F#" Value="member this.Append : sbyte -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定した 8 ビット符号付き整数の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.SByte%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#13)]
 [!code-vb[System.Text.StringBuilder.Append#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#13)]  
  
 <xref:System.Text.StringBuilder.Append%28System.SByte%29>メソッドの呼び出し、<xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`現在のカルチャ。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.SByte" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Single) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(float value);" />
      <MemberSignature Language="F#" Value="member this.Append : single -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定した単精度浮動小数点数の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Single%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#14)]
 [!code-vb[System.Text.StringBuilder.Append#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#14)]  
  
 <xref:System.Text.StringBuilder.Append%28System.Single%29>メソッドの呼び出し、<xref:System.Single.ToString%2A?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`現在のカルチャ。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As String) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Append : string -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">追加する文字列。</param>
        <summary>指定した文字列のコピーをこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.String%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)]
 [!code-vb[System.Text.StringBuilder.Append#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)]  
  
 場合`value`は`null`変更は行われません。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (System.Text.StringBuilder value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(class System.Text.StringBuilder value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As StringBuilder) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::Text::StringBuilder ^ value);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Text.StringBuilder -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As UShort) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="member this.Append : uint16 -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定した 16 ビット符号なし整数の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.UInt16%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#15)]
 [!code-vb[System.Text.StringBuilder.Append#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#15)]  
  
 <xref:System.Text.StringBuilder.Append%28System.UInt16%29>メソッドの呼び出し、<xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`します。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.UInt16" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As UInteger) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.Append : uint32 -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定された 32 ビット符号なし整数の文字列表記をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.UInt32%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#16)]
 [!code-vb[System.Text.StringBuilder.Append#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#16)]  
  
 <xref:System.Text.StringBuilder.Append%28System.UInt32%29>呼び出し、<xref:System.UInt32.ToString%2A?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`現在のカルチャ。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.UInt32" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As ULong) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.Append : uint64 -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">追加する値。</param>
        <summary>指定した 64 ビット符号なし整数の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.UInt64%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#17)]
 [!code-vb[System.Text.StringBuilder.Append#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#17)]  
  
 <xref:System.Text.StringBuilder.Append%28System.UInt64%29>メソッドの呼び出し、<xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドの文字列表現を取得する`value`現在のカルチャ。 書式を制御する`value`を呼び出し、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.UInt64" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (char value, int repeatCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(char value, int32 repeatCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Char, repeatCount As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(char value, int repeatCount);" />
      <MemberSignature Language="F#" Value="member this.Append : char * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append (value, repeatCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="repeatCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">追加する文字。</param>
        <param name="repeatCount">
          <c>value</c> を追加する回数。</param>
        <summary>Unicode 文字の文字列形式の、指定した数のコピーをこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Append%28System.Char%2CSystem.Int32%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#5)]
 [!code-vb[System.Text.StringBuilder.Append#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#5)]  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="repeatCount" /> が 0 未満です。  
  
- または - 
このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <exception cref="T:System.OutOfMemoryException">メモリが不足しています。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (char* value, int valueCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(char* value, int32 valueCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(char* value, int valueCount);" />
      <MemberSignature Language="F#" Value="member this.Append : nativeptr&lt;char&gt; * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append (value, valueCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="valueCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">文字の配列を指すポインター。</param>
        <param name="valueCount">配列の文字数。</param>
        <summary>指定したアドレスで始まる Unicode 文字の配列をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは追加`valueCount`アドレスで始まる文字`value`現在のインスタンス。  
  
 <xref:System.Text.StringBuilder.Append%28System.Char%2A%2CSystem.Int32%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクト。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)" />
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="valueCount" /> が 0 未満です。  
  
- または - 
このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="value" /> が null ポインターです。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (char[] value, int startIndex, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(char[] value, int32 startIndex, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As Char(), startIndex As Integer, charCount As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(cli::array &lt;char&gt; ^ value, int startIndex, int charCount);" />
      <MemberSignature Language="F#" Value="member this.Append : char[] * int * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append (value, startIndex, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">文字配列。</param>
        <param name="startIndex">
          <c>value</c> 内の開始位置。</param>
        <param name="charCount">追加する文字数。</param>
        <summary>Unicode 文字の指定した部分配列の文字列形式をこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定された文字の範囲を追加します。`value`現在のインスタンス。 場合`value`は`null`と`startIndex`と`count`はどちらもゼロの変更が行われました。  
  
 <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#7)]
 [!code-vb[System.Text.StringBuilder.Append#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#7)]  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> が <see langword="null" /> で、<paramref name="startIndex" /> と <paramref name="charCount" /> が 0 ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> + <paramref name="charCount" /> が <paramref name="value" /> の長さを超えています。  
  
- または - 
このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As String, startIndex As Integer, count As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.Append : string * int * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">追加する部分文字列を含む文字列。</param>
        <param name="startIndex">
          <c>value</c> 内の部分文字列の開始位置。</param>
        <param name="count">
          <c>value</c> 内の追加する文字数。</param>
        <summary>指定した部分文字列のコピーをこのインスタンスに追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定された文字の範囲を追加します。`value`現在のインスタンス。 場合`value`は`null`と`startIndex`と`count`はどちらもゼロの変更が行われました。  
  
 <xref:System.Text.StringBuilder.Append%28System.String%2CSystem.Int32%2CSystem.Int32%29>メソッドは、このクラスの既存のインスタンスを変更します; クラスの新しいインスタンスを返すことはできません。 このため、上で呼び出せるメソッドまたはプロパティを既存の参照および戻り値を代入する必要はありません、<xref:System.Text.StringBuilder>オブジェクトを次の例を示しています。  
  
 [!code-csharp[System.Text.StringBuilder.Append#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#19)]
 [!code-vb[System.Text.StringBuilder.Append#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#19)]  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> が <see langword="null" /> で、<paramref name="startIndex" /> と <paramref name="count" /> が 0 ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">0 より小さい <paramref name="count" />。  
  
- または - 
 0 より小さい <paramref name="startIndex" />。  
  
- または - 
 <paramref name="startIndex" /> + <paramref name="count" /> が <paramref name="value" /> の長さを超えています。  
  
- または - 
このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (System.Text.StringBuilder value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(class System.Text.StringBuilder value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Append(System.Text.StringBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Append (value As StringBuilder, startIndex As Integer, count As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Append(System::Text::StringBuilder ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Text.StringBuilder * int * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Append (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.StringBuilder" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="startIndex">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendFormat">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに追加します。 各書式項目は、対応するオブジェクト引数の文字列形式に置換されます。</summary>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式指定</related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">標準の数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">標準 TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">カスタム TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">列挙型書式指定文字列</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendFormat (format As String, arg0 As Object) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendFormat(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="member this.AppendFormat : string * obj -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendFormat (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0">書式指定するオブジェクト。</param>
        <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに追加します。 各書式項目は、単一の引数の文字列表記に置換されます。</summary>
        <returns>
          <paramref name="format" /> が追加されたこのインスタンスへの参照。 <paramref name="format" /> の各書式指定項目は、<paramref name="arg0" /> の文字列表記に置換されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)をテキスト形式のオブジェクトの値に変換し、現在の表現を埋め込む .NET Framework の<xref:System.Text.StringBuilder>オブジェクト。  
  
 `format`パラメーターは、0 または 0 個以上のインデックス付きプレース ホルダー、書式指定項目と呼ばれる個以上のテキストが混在します。 書式項目のインデックスに対応する場合は 0 をする必要があります`arg0`、このメソッドのパラメーター リスト内の 1 つのオブジェクト。 書式設定プロセスの文字列表現の各書式項目の置換`arg0`します。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*index*[,*length*][:*formatString*]}  
  
 角かっこ内の要素は省略可能です。 次の表は、それぞれの要素の説明です。  
  
|要素|説明|  
|-------------|-----------------|  
|*index*|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトを指定して場合*インデックス*は`null`、書式指定項目が置き換え<xref:System.String.Empty?displayProperty=nameWithType>。 内のパラメーターがない場合、*インデックス*、位置、<xref:System.FormatException>がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字の最小数。 パラメーターでは、右揃え、正の場合負の場合は、左揃えをお勧めします。|  
|:*formatString*|パラメーターでサポートされている標準またはカスタム書式指定文字列。|  
  
> [!NOTE]
>  日付と時刻の値で使用される標準およびカスタムの書式文字列を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 数値と共に使用される標準およびカスタムの書式文字列を参照してください。 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)します。 列挙体で使用する標準書式指定文字列を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)します。  
  
 `arg0` 書式設定するオブジェクトを表します。 各書式項目`format`の文字列形式に置き換えられます`arg0`します。 書式指定項目が含まれている場合`formatString`と`arg0`実装、<xref:System.IFormattable>インターフェイスし`arg0.ToString(formatString, null)`書式を定義します。 それ以外の場合、`arg0.ToString()`書式を定義します。  
  
 文字列が割り当てられている場合`format`は"いただきありがとうございます、献血の {0: ###}、慈善団体に食品の缶"。 `arg0`整数 10 の値を持つ、戻り値は「for your donation of 10 の cans of food to our charitable organization ありがとうございます」には。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 [!code-cpp[stringbuilder.appendformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendformat/CPP/appfmt.cpp#1)]
 [!code-csharp[stringbuilder.appendformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendformat/CS/appfmt.cs#1)]
 [!code-vb[stringbuilder.appendformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendformat/VB/appfmt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> が無効です。  
  
- または - 
書式項目のインデックスが 0 (ゼロ) 未満か、1 以上です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">拡張された文字列の長さが <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式指定</related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">標準の数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">標準 TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">カスタム TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">列挙型書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendFormat (format As String, ParamArray args As Object()) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendFormat(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.AppendFormat : string * obj[] -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendFormat (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="args">書式指定するオブジェクトの配列。</param>
        <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに追加します。 各書式項目は、パラメーター配列内の対応する引数の文字列形式に置換されます。</summary>
        <returns>
          <paramref name="format" /> が追加されたこのインスタンスへの参照。 <paramref name="format" /> の各書式項目は、対応するオブジェクト引数の文字列形式に置換されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)をテキスト形式のオブジェクトの値に変換し、現在の表現を埋め込む .NET Framework の<xref:System.Text.StringBuilder>オブジェクト。  
  
 `format`パラメーターは、0 または 0 個以上のインデックス付きプレース ホルダーをこのメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定プロセスでは、対応するオブジェクトの文字列形式で各書式項目を置き換えます。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*index*[,*length*][:*formatString*]}  
  
 角かっこ内の要素は省略可能です。 次の表は、それぞれの要素の説明です。  
  
|要素|説明|  
|-------------|-----------------|  
|*index*|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトを指定して場合*インデックス*は`null`、書式指定項目が置き換え<xref:System.String.Empty?displayProperty=nameWithType>。 内のパラメーターがない場合、*インデックス*、位置、<xref:System.FormatException>がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字の最小数。 パラメーターでは、右揃え、正の場合負の場合は、左揃えをお勧めします。|  
|:*formatString*|パラメーターでサポートされている標準またはカスタム書式指定文字列。|  
  
> [!NOTE]
>  日付と時刻の値で使用される標準およびカスタムの書式文字列を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 数値と共に使用される標準およびカスタムの書式文字列を参照してください。 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)します。 列挙体で使用する標準書式指定文字列を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)します。  
  
 `args` 書式設定されるオブジェクトを表します。 各書式項目`format`は内の対応するオブジェクトの文字列形式に置き換えられます`args`します。 書式指定項目が含まれている場合`formatString`との対応するオブジェクト`args`実装、<xref:System.IFormattable>インターフェイスし`args[index].ToString(formatString, provider)`書式を定義します。 それ以外の場合、`args[index].ToString()`書式を定義します。  
  
 文字列が割り当てられている場合`format`は"いただきありがとうございます、献血の {0: ###}、慈善団体に食品の缶"。 `arg0`整数 10 の値を持つ、戻り値は「for your donation of 10 の cans of food to our charitable organization ありがとうございます」には。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 [!code-cpp[stringbuilder.appendformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendformat/CPP/appfmt.cpp#1)]
 [!code-csharp[stringbuilder.appendformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendformat/CS/appfmt.cs#1)]
 [!code-vb[stringbuilder.appendformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendformat/VB/appfmt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> または <paramref name="args" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> が無効です。  
  
- または - 
書式項目のインデックスが 0 (ゼロ) 未満であるか、<paramref name="args" /> 配列の長さ以上です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">拡張された文字列の長さが <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式指定</related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">標準の数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">標準 TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">カスタム TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">列挙型書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(class System.IFormatProvider provider, string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendFormat (provider As IFormatProvider, format As String, arg0 As Object) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendFormat(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="member this.AppendFormat : IFormatProvider * string * obj -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendFormat (provider, format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0">書式指定するオブジェクト。</param>
        <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに追加します。 各書式項目は、指定された書式プロバイダーを使用して単一の引数の文字列形式に置換されます。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。 追加操作の完了後、このインスタンスには、操作前に存在していたデータの末尾に <paramref name="format" /> のコピーが付加されたものが含まれます。このコピーでは、書式指定が、<paramref name="arg0" /> の文字列形式に置換されています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)の値に変換する .NET Framework の`arg0`テキスト表現にし、現在の表現を埋め込む<xref:System.Text.StringBuilder>オブジェクト。  
  
 `format`パラメーターは、0 または 0 個以上のインデックス付きプレース ホルダー、書式指定項目と呼ばれる個以上のテキストが混在します。 このメソッドには、単一の引数、引数リストが含まれているために、各書式項目のインデックスはゼロ (0) にある必要があります。 書式設定プロセスの文字列表現の各書式項目の置換`arg0`します。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*index*[,*length*][:*formatString*]}  
  
 角かっこ内の要素は省略可能です。 次の表は、それぞれの要素の説明です。  
  
|要素|説明|  
|-------------|-----------------|  
|*index*|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトを指定して場合*インデックス*は`null`、書式指定項目が置き換え<xref:System.String.Empty?displayProperty=nameWithType>。 この場合、以降、<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%29>メソッドが引数リストの値の 1 つの引数を持つ*インデックス*常に 0 があります。 そうでない場合、<xref:System.FormatException>がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字の最小数。 パラメーターでは、右揃え、正の場合負の場合は、左揃えをお勧めします。|  
|:*formatString*|パラメーターでサポートされている標準またはカスタム書式指定文字列。|  
  
> [!NOTE]
>  日付と時刻の値で使用される標準およびカスタムの書式文字列を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 数値と共に使用される標準およびカスタムの書式文字列を参照してください。 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)します。 列挙体で使用する標準書式指定文字列を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)します。  
  
 `provider`パラメーターを指定します、<xref:System.IFormatProvider>内のオブジェクトの書式設定情報を提供する実装`args`します。 `provider` は、次のいずれかになります。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャ固有の書式情報を提供するオブジェクト。  
  
-   A<xref:System.Globalization.NumberFormatInfo>カルチャ固有の書式設定情報を提供するオブジェクト`arg0`が数値の値の場合。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>カルチャ固有の書式設定情報を提供するオブジェクト`arg0`が日付と時刻の値の場合。  
  
-   カスタム<xref:System.IFormatProvider>に対する書式設定情報を提供する実装`arg0`します。 通常、このようなもを実装する、<xref:System.ICustomFormatter>インターフェイス。  
  
 場合、`provider`パラメーターが`null`、書式設定情報は、現在のカルチャから取得されます。  
  
 `arg0` 書式設定するオブジェクトを表します。 各書式項目`format`の文字列形式に置き換えられます`arg0`します。 書式指定項目が含まれている場合`formatString`と`arg0`実装、<xref:System.IFormattable>インターフェイスし`arg0.ToString(formatString, provider)`書式を定義します。 それ以外の場合、`arg0.ToString()`書式を定義します。  
  
   
  
## Examples  
 次に 2 つの呼び出しが含まれています、<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%29>メソッド。 英語-英国 (EN-GB) カルチャの書式設定規則はどちらも使用します。 最初の文字列表現を挿入する、<xref:System.Decimal>結果の文字列に通貨の値します。 2 番目の挿入、<xref:System.DateTime>だけで、短い日付文字列と 2 番目の短い形式の時刻の文字列の最初のなどの結果を 2 か所に値が文字列します。  
  
 [!code-csharp[System.Text.StringBuilder.AppendFormat#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/cs/appendformat1.cs#2)]
 [!code-vb[System.Text.StringBuilder.AppendFormat#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/vb/appendformat1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> が無効です。  
  
- または - 
書式項目のインデックスが 0 (ゼロ) より小さいか、または 1 以上です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">拡張された文字列の長さが <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式指定</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md">方法 : カスタム数値書式プロバイダーを定義して使用する</related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">標準の数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">標準 TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">カスタム TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">列挙型書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(class System.IFormatProvider provider, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendFormat (provider As IFormatProvider, format As String, ParamArray args As Object()) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendFormat(IFormatProvider ^ provider, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.AppendFormat : IFormatProvider * string * obj[] -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendFormat (provider, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="format">複合書式設定文字列。</param>
        <param name="args">書式指定するオブジェクトの配列。</param>
        <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに追加します。 各書式項目は、指定された書式プロバイダーを使用した、パラメーター配列内の対応する引数の文字列形式に置換されます。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。 追加操作の完了後、このインスタンスには、操作前に存在していたデータの末尾に <paramref name="format" /> のコピーが付加されたものが含まれます。このコピーでは、書式指定が、対応するオブジェクト引数の文字列形式に置換されています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)をテキスト形式のオブジェクトの値に変換し、現在の表現を埋め込む .NET Framework の<xref:System.Text.StringBuilder>オブジェクト。  
  
 `format`パラメーターは、0 または 0 個以上のインデックス付きプレース ホルダーをこのメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定プロセスでは、対応するオブジェクトの文字列形式で各書式項目を置き換えます。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*index*[,*length*][:*formatString*]}  
  
 角かっこ内の要素は省略可能です。 次の表は、それぞれの要素の説明です。  
  
|要素|説明|  
|-------------|-----------------|  
|*index*|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトを指定して場合*インデックス*は`null`、書式指定項目が置き換え<xref:System.String.Empty?displayProperty=nameWithType>。 内のパラメーターがない場合、*インデックス*、位置、<xref:System.FormatException>がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字の最小数。 パラメーターでは、右揃え、正の場合負の場合は、左揃えをお勧めします。|  
|:*formatString*|パラメーターでサポートされている標準またはカスタム書式指定文字列。|  
  
> [!NOTE]
>  日付と時刻の値で使用される標準およびカスタムの書式文字列を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 数値と共に使用される標準およびカスタムの書式文字列を参照してください。 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)します。 列挙体で使用する標準書式指定文字列を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)します。  
  
 `provider`パラメーターを指定します、<xref:System.IFormatProvider>内のオブジェクトの書式設定情報を提供する実装`args`します。 `provider` は、次のいずれかになります。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャ固有の書式情報を提供するオブジェクト。  
  
-   A<xref:System.Globalization.NumberFormatInfo>内の数値のカルチャに固有の書式設定情報を提供するオブジェクト`args`します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>で日付と時刻の値をカルチャに固有の書式設定情報を提供するオブジェクト`args`します。  
  
-   カスタム<xref:System.IFormatProvider>内のオブジェクトの 1 つ以上の書式情報を提供する実装`args`します。 通常、このようなもを実装する、<xref:System.ICustomFormatter>インターフェイス。 次のセクションでは、2 番目の例を示しています、<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッドの呼び出しをカスタム<xref:System.IFormatProvider>実装します。  
  
 場合、`provider`パラメーターが`null`、現在のカルチャから書式プロバイダーの情報を取得します。  
  
 `args` 書式設定されるオブジェクトを表します。 各書式項目`format`は内の対応するオブジェクトの文字列形式に置き換えられます`args`します。 書式指定項目が含まれている場合`formatString`との対応するオブジェクト`args`実装、<xref:System.IFormattable>インターフェイスし`args[index].ToString(formatString, provider)`書式を定義します。 それ以外の場合、`args[index].ToString()`書式を定義します。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 [!code-cpp[stringbuilder.appendformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendformat/CPP/appfmt.cpp#1)]
 [!code-csharp[stringbuilder.appendformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendformat/CS/appfmt.cs#1)]
 [!code-vb[stringbuilder.appendformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendformat/VB/appfmt.vb#1)]  
  
 次の例では、カスタム<xref:System.IFormatProvider>という名前の実装`CustomerFormatter`10 桁の顧客番号をハイフンを 4 番目と 7 番目の数字の後に書式設定します。 渡される、<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>顧客名と書式設定された顧客の数を含む文字列を作成します。  
  
 [!code-csharp[System.Text.StringBuilder.AppendFormat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/cs/customernumberformatter1.cs#1)]
 [!code-vb[System.Text.StringBuilder.AppendFormat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/vb/customernumberformatter1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> が無効です。  
  
- または - 
書式項目のインデックスが 0 (ゼロ) 未満であるか、<paramref name="args" /> 配列の長さ以上です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">拡張された文字列の長さが <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式指定</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md">方法 : カスタム数値書式プロバイダーを定義して使用する</related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">標準の数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">標準 TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">カスタム TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">列挙型書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendFormat (format As String, arg0 As Object, arg1 As Object) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendFormat(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="member this.AppendFormat : string * obj * obj -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendFormat (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0">1 番目に書式設定するオブジェクト。</param>
        <param name="arg1">2 番目に書式設定するオブジェクト。</param>
        <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに追加します。 各書式項目は、2 つの引数のどちらかの文字列形式に置換されます。</summary>
        <returns>
          <paramref name="format" /> が追加されたこのインスタンスへの参照。 <paramref name="format" /> の各書式項目は、対応するオブジェクト引数の文字列形式に置換されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)をテキスト形式のオブジェクトの値に変換し、現在の表現を埋め込む .NET Framework の<xref:System.Text.StringBuilder>オブジェクト。  
  
 `format`パラメーターは、0 または 0 個以上のインデックス付きプレース ホルダーに対応する書式指定項目と呼ばれる個以上のテキストを混在させる`arg0`と`arg1`、このメソッドのパラメーター リスト内の 2 つのオブジェクト。 書式設定プロセスでは、対応するオブジェクトの文字列形式で各書式項目を置き換えます。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*index*[,*length*][:*formatString*]}  
  
 角かっこ内の要素は省略可能です。 次の表は、それぞれの要素の説明です。  
  
|要素|説明|  
|-------------|-----------------|  
|*index*|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトを指定して場合*インデックス*は`null`、書式指定項目が置き換え<xref:System.String.Empty?displayProperty=nameWithType>。 内のパラメーターがない場合、*インデックス*、位置、<xref:System.FormatException>がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字の最小数。 パラメーターでは、右揃え、正の場合負の場合は、左揃えをお勧めします。|  
|:*formatString*|パラメーターでサポートされている標準またはカスタム書式指定文字列。|  
  
> [!NOTE]
>  日付と時刻の値で使用される標準およびカスタムの書式文字列を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 数値と共に使用される標準およびカスタムの書式文字列を参照してください。 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)します。 列挙体で使用する標準書式指定文字列を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)します。  
  
 `arg0` `arg1`書式設定されるオブジェクトを表します。 各書式項目`format`はいずれかの文字列形式に置き換えられます`arg0`または`arg1`します。 書式指定項目が含まれている場合`formatString`し、対応するオブジェクトを実装、<xref:System.IFormattable>インターフェイスし`arg` *x* `.ToString(formatString, provider)` 、書式設定を定義*x*引数のインデックスです。 それ以外の場合、 `arg` *x* `.ToString()`書式を定義します。  
  
 文字列が割り当てられている場合`format`は"いただきありがとうございます、献血の {0: ###}、慈善団体に食品の缶"。 `arg0`整数 10 の値を持つ、戻り値は「for your donation of 10 の cans of food to our charitable organization ありがとうございます」には。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 [!code-cpp[stringbuilder.appendformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendformat/CPP/appfmt.cpp#1)]
 [!code-csharp[stringbuilder.appendformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendformat/CS/appfmt.cs#1)]
 [!code-vb[stringbuilder.appendformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendformat/VB/appfmt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> が無効です。  
  
- または - 
書式項目のインデックスが 0 (ゼロ) 未満か、または 2 以上です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">拡張された文字列の長さが <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式指定</related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">標準の数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">標準 TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">カスタム TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">列挙型書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(class System.IFormatProvider provider, string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendFormat (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendFormat(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="member this.AppendFormat : IFormatProvider * string * obj * obj -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendFormat (provider, format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0">1 番目に書式設定するオブジェクト。</param>
        <param name="arg1">2 番目に書式設定するオブジェクト。</param>
        <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに追加します。 各書式項目は、指定された書式プロバイダーを使用して 2 つの引数のいずれかの文字列形式に置換されます。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。 追加操作の完了後、このインスタンスには、操作前に存在していたデータの末尾に <paramref name="format" /> のコピーが付加されたものが含まれます。このコピーでは、書式指定が、対応するオブジェクト引数の文字列形式に置換されています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)をテキスト形式のオブジェクトの値に変換し、現在の表現を埋め込む .NET Framework の<xref:System.Text.StringBuilder>オブジェクト。  
  
 `format`パラメーターは、0 または 0 個以上のインデックス付きプレース ホルダーをこのメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定プロセスでは、対応するオブジェクトの文字列形式で各書式項目を置き換えます。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*index*[,*length*][:*formatString*]}  
  
 角かっこ内の要素は省略可能です。 次の表は、それぞれの要素の説明です。  
  
|要素|説明|  
|-------------|-----------------|  
|*index*|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトを指定して場合*インデックス*は`null`、書式指定項目が置き換え<xref:System.String.Empty?displayProperty=nameWithType>。 内のパラメーターがない場合、*インデックス*、位置、<xref:System.FormatException>がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字の最小数。 パラメーターでは、右揃え、正の場合負の場合は、左揃えをお勧めします。|  
|:*formatString*|パラメーターでサポートされている標準またはカスタム書式指定文字列。|  
  
> [!NOTE]
>  日付と時刻の値で使用される標準およびカスタムの書式文字列を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 数値と共に使用される標準およびカスタムの書式文字列を参照してください。 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)します。 列挙体で使用する標準書式指定文字列を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)します。  
  
 `provider`パラメーターを指定します、<xref:System.IFormatProvider>の書式設定情報を提供する実装`arg0`と`arg1`します。 `provider` は、次のいずれかになります。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャ固有の書式情報を提供するオブジェクト。  
  
-   A<xref:System.Globalization.NumberFormatInfo>カルチャ固有の書式設定情報を提供するオブジェクト`arg0`または`arg1`数値を指定している場合。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>カルチャ固有の書式設定情報を提供するオブジェクト`arg0`または`arg1`場合は、日付と時刻の値。  
  
-   カスタム<xref:System.IFormatProvider>に対する書式設定情報を提供する実装`arg0`と`arg1`します。 通常、このようなもを実装する、<xref:System.ICustomFormatter>インターフェイス。  
  
 場合、`provider`パラメーターが`null`、現在のカルチャから書式プロバイダーの情報を取得します。  
  
 `arg0` `arg1`書式設定されるオブジェクトを表します。 各書式項目`format`は対応するインデックスを持つオブジェクトの文字列表現に置き換えられます。 書式指定項目が含まれている場合`formatString`、対応する引数を実装して、<xref:System.IFormattable>インターフェイス、引数の`ToString(formatString, provider)`書式設定メソッドを定義します。 それ以外の場合、引数の`ToString()`書式設定メソッドを定義します。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%2CSystem.Object%29>ジェネリックに格納されている時間と温度データを表示するメソッドを<xref:System.Collections.Generic.Dictionary%602>オブジェクト。 書式設定するオブジェクトのみにありますが、書式指定文字列に 3 つの書式指定項目に注意してください。 これは (日付と時刻の値) の一覧の最初のオブジェクトが 2 つの書式指定項目によって使用されるためです。 時間、および 2 つ目は、日付を表示します。 最初の書式項目の表示。  
  
 [!code-csharp[System.Text.StringBuilder.AppendFormat#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/cs/appendformat2.cs#3)]
 [!code-vb[System.Text.StringBuilder.AppendFormat#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/vb/appendformat2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> が無効です。  
  
- または - 
書式項目のインデックスが 0 (ゼロ) 未満か、または 2 以上です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">拡張された文字列の長さが <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 と以降のバージョンでインスタンス化するときに、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式指定</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md">方法 : カスタム数値書式プロバイダーを定義して使用する</related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">標準の数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">標準 TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">カスタム TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">列挙型書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendFormat (format As String, arg0 As Object, arg1 As Object, arg2 As Object) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendFormat(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="member this.AppendFormat : string * obj * obj * obj -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendFormat (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0">1 番目に書式設定するオブジェクト。</param>
        <param name="arg1">2 番目に書式設定するオブジェクト。</param>
        <param name="arg2">3 番目に書式設定するオブジェクト。</param>
        <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに追加します。 各書式項目は、3 つの引数のいずれかの文字列形式に置換されます。</summary>
        <returns>
          <paramref name="format" /> が追加されたこのインスタンスへの参照。 <paramref name="format" /> の各書式項目は、対応するオブジェクト引数の文字列形式に置換されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)をテキスト形式のオブジェクトの値に変換し、現在の表現を埋め込む .NET Framework の<xref:System.Text.StringBuilder>オブジェクト。  
  
 `format`パラメーターは、0 または 0 個以上のインデックス付きプレース ホルダーに対応する書式指定項目と呼ばれる個以上のテキストを混在させる`arg0`を通じて`arg2`、このメソッドのパラメーター リスト内のオブジェクト。 書式設定プロセスでは、対応するオブジェクトの文字列形式で各書式項目を置き換えます。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*index*[,*length*][:*formatString*]}  
  
 角かっこ内の要素は省略可能です。 次の表は、それぞれの要素の説明です。  
  
|要素|説明|  
|-------------|-----------------|  
|*index*|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトを指定して場合*インデックス*は`null`、書式指定項目が置き換え<xref:System.String.Empty?displayProperty=nameWithType>。 内のパラメーターがない場合、*インデックス*、位置、<xref:System.FormatException>がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字の最小数。 パラメーターでは、右揃え、正の場合負の場合は、左揃えをお勧めします。|  
|:*formatString*|パラメーターでサポートされている標準またはカスタム書式指定文字列。|  
  
> [!NOTE]
>  日付と時刻の値で使用される標準およびカスタムの書式文字列を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 数値と共に使用される標準およびカスタムの書式文字列を参照してください。 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)します。 列挙体で使用する標準書式指定文字列を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)します。  
  
 `arg0`、 `arg1`、および`arg2`書式設定されるオブジェクトを表します。 各書式項目`format`はいずれかの文字列形式に置き換えられます`arg0`、 `arg1`、または`arg2`、書式指定項目のインデックスによって異なります。 書式指定項目が含まれている場合`formatString`との対応するオブジェクト`args`実装、<xref:System.IFormattable>インターフェイスし`arg` *x* `.ToString(formatString, null)`位置、書式設定を定義*x*は、引数のインデックスです。 それ以外の場合、 `arg` *x* `.ToString()`書式を定義します。  
  
 文字列が割り当てられている場合`format`は"いただきありがとうございます、献血の {0: ###}、慈善団体に食品の缶"。 `arg0`整数 10 の値を持つ、戻り値は「for your donation of 10 の cans of food to our charitable organization ありがとうございます」には。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.AppendFormat%2A>メソッド。  
  
 [!code-cpp[stringbuilder.appendformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendformat/CPP/appfmt.cpp#1)]
 [!code-csharp[stringbuilder.appendformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendformat/CS/appfmt.cs#1)]
 [!code-vb[stringbuilder.appendformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendformat/VB/appfmt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> が無効です。  
  
- または - 
書式項目のインデックスが 0 (ゼロ) 未満か、または 3 以上です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">拡張された文字列の長さが <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式指定</related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">標準の数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">標準 TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">カスタム TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">列挙型書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(class System.IFormatProvider provider, string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendFormat (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendFormat(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="member this.AppendFormat : IFormatProvider * string * obj * obj * obj -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendFormat (provider, format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0">1 番目に書式設定するオブジェクト。</param>
        <param name="arg1">2 番目に書式設定するオブジェクト。</param>
        <param name="arg2">3 番目に書式設定するオブジェクト。</param>
        <summary>0 個以上の書式項目を含んでいる複合書式指定文字列を処理することで返される文字列を、このインスタンスに追加します。 各書式項目は、指定された書式プロバイダーを使用して 3 つの引数のいずれかの文字列形式に置換されます。各書式項目は、指定された書式プロバイダーを使用して 3 つの引数のいずれかの文字列形式に置換されます。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。 追加操作の完了後、このインスタンスには、操作前に存在していたデータの末尾に <paramref name="format" /> のコピーが付加されたものが含まれます。このコピーでは、書式指定が、対応するオブジェクト引数の文字列形式に置換されています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)をテキスト形式のオブジェクトの値に変換し、現在の表現を埋め込む .NET Framework の<xref:System.Text.StringBuilder>オブジェクト。  
  
 `format`パラメーターは、0 または 0 個以上のインデックス付きプレース ホルダーをこのメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定プロセスでは、対応するオブジェクトの文字列形式で各書式項目を置き換えます。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*index*[,*length*][:*formatString*]}  
  
 角かっこ内の要素は省略可能です。 次の表は、それぞれの要素の説明です。  
  
|要素|説明|  
|-------------|-----------------|  
|*index*|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトを指定して場合*インデックス*は`null`、書式指定項目が置き換え<xref:System.String.Empty?displayProperty=nameWithType>。 内のパラメーターがない場合、*インデックス*、位置、<xref:System.FormatException>がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字の最小数。 パラメーターでは、右揃え、正の場合負の場合は、左揃えをお勧めします。|  
|:*formatString*|パラメーターでサポートされている標準またはカスタム書式指定文字列。|  
  
> [!NOTE]
>  日付と時刻の値で使用される標準およびカスタムの書式文字列を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 数値と共に使用される標準およびカスタムの書式文字列を参照してください。 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)します。 列挙体で使用する標準書式指定文字列を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)します。  
  
 `provider`パラメーターを指定します、<xref:System.IFormatProvider>の書式設定情報を提供する実装`arg0`と`arg1`します。 `provider` は、次のいずれかになります。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャ固有の書式情報を提供するオブジェクト。  
  
-   A<xref:System.Globalization.NumberFormatInfo>カルチャ固有の書式設定情報を提供するオブジェクト`arg0`または`arg1`数値を指定している場合。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>カルチャ固有の書式設定情報を提供するオブジェクト`arg0`、 `arg1`、または`arg2`場合は、日付と時刻の値。  
  
-   カスタム<xref:System.IFormatProvider>に対する書式設定情報を提供する実装`arg0`、 `arg1`、および`arg2`します。 通常、このようなもを実装する、<xref:System.ICustomFormatter>インターフェイス。  
  
 場合、`provider`パラメーターが`null`、現在のカルチャから書式プロバイダーの情報を取得します。  
  
 `arg0`、 `arg1`、および`arg2`書式設定されるオブジェクトを表します。 各書式項目`format`は対応するインデックスを持つオブジェクトの文字列表現に置き換えられます。 書式指定項目が含まれている場合`formatString`、対応する引数を実装して、<xref:System.IFormattable>インターフェイス、引数の`ToString(formatString, provider)`書式設定メソッドを定義します。 それ以外の場合、引数の`ToString()`書式設定メソッドを定義します。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>ブール値の結果を示すためにメソッド`And`整数値で操作します。 各項目が 2 つの方法で書式設定されたために、書式指定文字列に 6 つの書式項目が含まれていますが、メソッドの引数リストに 3 つだけの項目には注意してください。  
  
 [!code-csharp[System.Text.StringBuilder.AppendFormat#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/cs/appendformat3.cs#4)]
 [!code-vb[System.Text.StringBuilder.AppendFormat#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/vb/appendformat3.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> が無効です。  
  
- または - 
書式項目のインデックスが 0 (ゼロ) 未満か、3 以上です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">拡張された文字列の長さが <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式指定</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md">方法 : カスタム数値書式プロバイダーを定義して使用する</related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md">標準の数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">標準 TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">カスタム TimeSpan 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md">列挙型書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="AppendJoin">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendJoin (char separator, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendJoin(char separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendJoin(System.Char,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendJoin (separator As Char, ParamArray values As Object()) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendJoin(char separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="member this.AppendJoin : char * obj[] -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendJoin (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendJoin">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendJoin (char separator, params string[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendJoin(char separator, string[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendJoin(System.Char,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendJoin (separator As Char, ParamArray values As String()) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendJoin(char separator, ... cli::array &lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="member this.AppendJoin : char * string[] -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendJoin (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="values" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendJoin">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendJoin (string separator, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendJoin(string separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendJoin(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendJoin (separator As String, ParamArray values As Object()) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendJoin(System::String ^ separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="member this.AppendJoin : string * obj[] -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendJoin (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendJoin">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendJoin (string separator, params string[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendJoin(string separator, string[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendJoin(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendJoin (separator As String, ParamArray values As String()) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendJoin(System::String ^ separator, ... cli::array &lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="member this.AppendJoin : string * string[] -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendJoin (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="values" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendJoin&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendJoin&lt;T&gt; (char separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendJoin&lt;T&gt;(char separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendJoin(Of T) (separator As Char, values As IEnumerable(Of T)) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Text::StringBuilder ^ AppendJoin(char separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="member this.AppendJoin : char * seq&lt;'T&gt; -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendJoin (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendJoin&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendJoin&lt;T&gt; (string separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendJoin&lt;T&gt;(string separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendJoin(Of T) (separator As String, values As IEnumerable(Of T)) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Text::StringBuilder ^ AppendJoin(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="member this.AppendJoin : string * seq&lt;'T&gt; -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendJoin (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendLine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>既定の行終端記号、または指定した文字列のコピーと既定の行終端記号を、このインスタンスの末尾に追加します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendLine">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendLine" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendLine () As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendLine();" />
      <MemberSignature Language="F#" Value="member this.AppendLine : unit -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定の行終端記号を現在の <see cref="T:System.Text.StringBuilder" /> オブジェクトの末尾に追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の行終端記号はの現在の値、<xref:System.Environment.NewLine%2A?displayProperty=nameWithType>プロパティ。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.AppendLine%2A>メソッド。  
  
 [!code-cpp[stringbuilder.appendline#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendline/CPP/al.cpp#1)]
 [!code-csharp[stringbuilder.appendline#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendline/CS/al.cs#1)]
 [!code-vb[stringbuilder.appendline#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendline/VB/al.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="AppendLine">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendLine (value As String) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ AppendLine(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.AppendLine : string -&gt; System.Text.StringBuilder" Usage="stringBuilder.AppendLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">追加する文字列。</param>
        <summary>指定した文字列のコピーと既定の行終端記号を、現在の <see cref="T:System.Text.StringBuilder" /> オブジェクトの末尾に追加します。</summary>
        <returns>追加操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の行終端記号はの現在の値、<xref:System.Environment.NewLine%2A?displayProperty=nameWithType>プロパティ。  
  
 このインスタンスの容量は、必要に応じて調整されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<see cref="T:System.Text.StringBuilder" />オブジェクトを呼び出すことによって、<see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />長さと容量の両方のコンス トラクター、<see cref="T:System.Text.StringBuilder" />インスタンスは、の値を超えて増加できますその<see cref="P:System.Text.StringBuilder.MaxCapacity" />プロパティ。 特に呼び出しが発生することができます、<see cref="M:System.Text.StringBuilder.Append(System.String)" />と<see cref="System.Text.StringBuilder.AppendFormat(System.String,System.Object)" />小さな文字列を追加する方法。</para>
        </block>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Text.StringBuilder.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Text.StringBuilder.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のインスタンスによって割り当てられたメモリに格納できる最大文字数を取得または設定します。</summary>
        <value>現在のインスタンスによって割り当てられたメモリに格納できる最大文字数。 この値の範囲は <see cref="P:System.Text.StringBuilder.Length" /> ～ <see cref="P:System.Text.StringBuilder.MaxCapacity" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Capacity%2A> 現在のインスタンスの文字列値には影響しません。 <xref:System.Text.StringBuilder.Capacity%2A> ない限り、縮小の下限より小さい<xref:System.Text.StringBuilder.Length%2A>します。  
  
 <xref:System.Text.StringBuilder>動的に必要な場合より多くの領域を割り当てるし、増加<xref:System.Text.StringBuilder.Capacity%2A>それに応じて。 パフォーマンス向上のため、<xref:System.Text.StringBuilder>の場合よりも多くのメモリを割り当てることがあります。 割り当てられたメモリの量は、実装に固有です。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Capacity%2A>プロパティ。  
  
 [!code-cpp[stringbuilder.ensurecapacity#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CPP/cap.cpp#1)]
 [!code-csharp[stringbuilder.ensurecapacity#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CS/cap.cs#1)]
 [!code-vb[stringbuilder.ensurecapacity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.ensurecapacity/VB/cap.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作に指定された値は、このインスタンスの現在の長さより小さい値です。  
  
- または - 
設定操作に指定された値は、最大容量を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Chars">
      <MemberSignature Language="C#" Value="public char this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Chars(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.StringBuilder.Chars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Chars(index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char default[int] { char get(int index); void set(int index, char value); };" />
      <MemberSignature Language="F#" Value="member this.Chars(int) : char with get, set" Usage="System.Text.StringBuilder.Chars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">文字の位置。</param>
        <summary>このインスタンス内の指定した文字位置の文字を取得または設定します。</summary>
        <value>
          <paramref name="index" /> 位置の Unicode 文字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `index`パラメーターは内の文字の位置、<xref:System.Text.StringBuilder>します。 文字列の最初の文字は、インデックス 0 位置にあるがします。 文字列の長さには、それに含まれる文字数です。 最後のアクセス可能な文字を<xref:System.Text.StringBuilder>インスタンス インデックス位置にある<xref:System.Text.StringBuilder.Length%2A>- 1。  
  
 <xref:System.Text.StringBuilder.Chars%2A> 既定のプロパティ、<xref:System.Text.StringBuilder>クラス。 C# では、インデクサーです。 つまり、個々 の文字から取得できること、<xref:System.Text.StringBuilder.Chars%2A>ホワイト スペース、アルファベットの数をカウントするには、次の例で示すようにプロパティおよび区切り文字の文字列。  
  
 [!code-csharp[System.Text.StringBuilder.Chars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.chars/cs/chars1.cs#1)]
 [!code-vb[System.Text.StringBuilder.Chars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.chars/vb/chars1.vb#1)]  

### <a name="performance-and-character-based-indexing"></a>パフォーマンスと文字ベースのインデックス作成

[!INCLUDE[stringbuilder-performance-note](~/includes/stringbuilder-perf-note.md)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">文字の設定において、<paramref name="index" /> がこのインスタンスの境界外です。</exception>
        <exception cref="T:System.IndexOutOfRangeException">文字の取得において、<paramref name="index" /> がこのインスタンスの境界外です。</exception>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; System.Text.StringBuilder" Usage="stringBuilder.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Text.StringBuilder" /> インスタンスからすべての文字を削除します。</summary>
        <returns>
          <see cref="P:System.Text.StringBuilder.Length" /> が 0 (ゼロ) であるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.Clear%2A> 設定に相当する便利なメソッドは、 <xref:System.Text.StringBuilder.Length%2A> 0 (ゼロ) には、現在のインスタンスのプロパティ。  
  
 呼び出す、<xref:System.Text.StringBuilder.Clear%2A>メソッドは、現在のインスタンスを変更しない<xref:System.Text.StringBuilder.Capacity%2A>または<xref:System.Text.StringBuilder.MaxCapacity%2A>プロパティ。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.Text.StringBuilder>オブジェクトを呼び出し、文字列、<xref:System.Text.StringBuilder.Clear%2A>メソッド、新しい文字列を追加します。  
  
 [!code-csharp[System.Text.StringBuilder.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.clear/cs/clear1.cs#1)]
 [!code-vb[System.Text.StringBuilder.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.clear/vb/clear1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int sourceIndex, Span&lt;char&gt; destination, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 sourceIndex, valuetype System.Span`1&lt;char&gt; destination, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Span{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (sourceIndex As Integer, destination As Span(Of Char), count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int sourceIndex, Span&lt;char&gt; destination, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * Span&lt;char&gt; * int -&gt; unit" Usage="stringBuilder.CopyTo (sourceIndex, destination, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceIndex">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int sourceIndex, cli::array &lt;char&gt; ^ destination, int destinationIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * char[] * int * int -&gt; unit" Usage="stringBuilder.CopyTo (sourceIndex, destination, destinationIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.Char[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceIndex">このインスタンスにおける文字のコピーの開始位置。 インデックスの値は、0 から始まります。</param>
        <param name="destination">文字のコピー先となる配列。</param>
        <param name="destinationIndex">
          <c>destination</c> における文字のコピーの開始位置。 インデックスの値は、0 から始まります。</param>
        <param name="count">コピーする文字数。</param>
        <summary>このインスタンスの指定したセグメントにある文字を、目的の <see cref="T:System.Char" /> 配列の指定したセグメントにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.StringBuilder.CopyTo%2A>メソッドの連続するセクションを効率的にコピーする必要があるときに、まれな状況で使用されるものでは、<xref:System.Text.StringBuilder>オブジェクトを配列にします。 配列は、事前に割り当てられる、再利用可能なおよび場合によってグローバルにアクセスでき、固定サイズである必要があります。  
  
 たとえば、アプリケーションが設定でしたを<xref:System.Text.StringBuilder>文字の数が多いオブジェクトを使用して、<xref:System.Text.StringBuilder.CopyTo%2A>の小規模の連続する部分をコピーする方法、<xref:System.Text.StringBuilder>オブジェクトを配列の部分が処理されます。 ときにすべてのデータ、<xref:System.Text.StringBuilder>オブジェクトを処理するのサイズ、<xref:System.Text.StringBuilder>オブジェクトが 0 に設定され、サイクルが繰り返されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.CopyTo%2A>メソッド。  
  
 [!code-cpp[stringbuilder.copyto2#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.copyto2/CPP/ct2.cpp#1)]
 [!code-csharp[stringbuilder.copyto2#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.copyto2/CS/ct2.cs#1)]
 [!code-vb[stringbuilder.copyto2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.copyto2/VB/ct2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destination" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> または <paramref name="count" /> が 0 より小さい値です。  
  
- または - 
 <paramref name="sourceIndex" /> はこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceIndex" /> + <paramref name="count" /> がこのインスタンスの長さを超えています。  
  
- または - 
 <paramref name="destinationIndex" /> + <paramref name="count" /> が <paramref name="destination" /> の長さを超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureCapacity">
      <MemberSignature Language="C#" Value="public int EnsureCapacity (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EnsureCapacity(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureCapacity (capacity As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EnsureCapacity(int capacity);" />
      <MemberSignature Language="F#" Value="member this.EnsureCapacity : int -&gt; int" Usage="stringBuilder.EnsureCapacity capacity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">必要な最小容量。</param>
        <summary>このインスタンスの <see cref="T:System.Text.StringBuilder" /> の容量が、指定した値以上になるようにします。</summary>
        <returns>このインスタンスの新しい容量。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の容量がある場合より小さい`capacity`パラメーターでは、このインスタンスのメモリは以上で保持するために再割り当て`capacity`文字数。 それ以外の場合、メモリは変更されません。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.EnsureCapacity%2A>メソッド。  
  
 [!code-cpp[stringbuilder.ensurecapacity#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CPP/cap.cpp#1)]
 [!code-csharp[stringbuilder.ensurecapacity#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CS/cap.cs#1)]
 [!code-vb[stringbuilder.ensurecapacity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.ensurecapacity/VB/cap.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> が 0 未満です。  
  
- または - 
このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Equals(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (span As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="override this.Equals : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="stringBuilder.Equals span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Text.StringBuilder sb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(class System.Text.StringBuilder sb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (sb As StringBuilder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Text::StringBuilder ^ sb);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Text.StringBuilder -&gt; bool" Usage="stringBuilder.Equals sb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sb" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="sb">対象のインスタンスと比較する対象のオブジェクト、または <see langword="null" />。</param>
        <summary>このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</summary>
        <returns>このインスタンスと <paramref name="sb" /> が同じ文字列、<see cref="P:System.Text.StringBuilder.Capacity" /> 値、および <see cref="P:System.Text.StringBuilder.MaxCapacity" /> 値を保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコードでは、 <xref:System.Text.StringBuilder.Equals%2A> 2 つかどうかを確認する方法を<xref:System.Text.StringBuilder>オブジェクトが等しい。 メソッドは、後にオブジェクトごとに、小さな変更を加えるし、結果がコンソールに表示されます、繰り返し呼び出されます。  
  
 [!code-cpp[stringbuilder.ensurecapacity#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CPP/cap.cpp#1)]
 [!code-csharp[stringbuilder.ensurecapacity#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CS/cap.cs#1)]
 [!code-vb[stringbuilder.ensurecapacity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.ensurecapacity/VB/cap.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたオブジェクトの文字列表記をこのインスタンスの指定された文字位置に挿入します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Boolean) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, bool value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * bool -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>Boolean 値の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Boolean.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 必要に応じて、容量が調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Byte) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, System::Byte value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * byte -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>指定した 8 ビット符号なし整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Byte.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Char) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, char value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * char -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>指定した Unicode 文字の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Char.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。  
  
- または - 
このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, char[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, char[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Char()) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, cli::array &lt;char&gt; ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * char[] -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する文字配列。</param>
        <summary>指定した Unicode 文字の配列の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
 場合`value`は`null`、<xref:System.Text.StringBuilder>は変更されません。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。  
  
- または - 
このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Decimal) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * decimal -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>10 進数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Decimal.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Double) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, double value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * double -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>倍精度浮動小数点数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Short) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, short value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * int16 -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>指定した 16 ビット符号付き整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Int16.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, int value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>指定した 32 ビット符号付き整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Int32.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Long) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, long value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * int64 -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>64 ビット符号付き整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Int64.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Object) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * obj -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入するオブジェクト、または <see langword="null" />。</param>
        <summary>オブジェクトの文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
 場合`value`は`null`、このインスタンスの値は変更されません。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As ReadOnlySpan(Of Char)) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * ReadOnlySpan&lt;char&gt; -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As SByte) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, System::SByte value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * sbyte -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>指定した 8 ビット符号付き整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.SByte.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 必要に応じて、容量が調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.SByte" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Single) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, float value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * single -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>単精度浮動小数点数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As String) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * string -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する文字列。</param>
        <summary>文字列をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既存の文字は新しいテキスト用に確保するためにシフトします。 必要に応じて、容量が調整されます。  
  
 このインスタンスの<xref:System.Text.StringBuilder>場合は変更されません`value`は`null`、または`value`でない`null`が、その長さが 0 です。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 より小さいか、このインスタンスの現在の長さより大きいです。  
  
- または - 
この <see cref="T:System.Text.StringBuilder" /> オブジェクトの現在の長さに <paramref name="value" /> の長さを加算した結果が、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As UShort) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * uint16 -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>16 ビット符号なし整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UInt16.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.UInt16" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As UInteger) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * uint32 -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>32 ビット符号なし整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.UInt32" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As ULong) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * uint64 -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する値。</param>
        <summary>64 ビット符号なし整数の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> 文字列表現を取得するために使用`value`します。 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 未満か、またはこのインスタンスの長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]と以前のバージョンでは、このメソッドの呼び出しがスローされました、<see cref="T:System.ArgumentOutOfRangeException" />挿入する場合<paramref name="value" />オブジェクトの合計の長さを超えることになる<see cref="P:System.Text.StringBuilder.MaxCapacity" />。 以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]がスローされます、<see cref="T:System.OutOfMemoryException" />します。</para>
        </block>
        <altmember cref="T:System.UInt64" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, string value, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, string value, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As String, count As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, System::String ^ value, int count);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * string * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">挿入する文字列。</param>
        <param name="count">
          <c>value</c> を挿入する回数。</param>
        <summary>指定した文字列の 1 つ以上のコピーをこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
 これは、<xref:System.Text.StringBuilder>場合、オブジェクトは変更されません`value`は`null`、`value`ない`null`が、その長さが 0、または`count`は 0 です。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、0 より小さいか、このインスタンスの現在の長さより大きいです。  
  
- または - 
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.OutOfMemoryException">この <see cref="T:System.Text.StringBuilder" /> オブジェクトの現在の長さに <paramref name="value" /> の長さを <paramref name="count" /> 倍した値を加算した結果が、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えています。</exception>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, char[] value, int startIndex, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, char[] value, int32 startIndex, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, value As Char(), startIndex As Integer, charCount As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Insert(int index, cli::array &lt;char&gt; ^ value, int startIndex, int charCount);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * char[] * int * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Insert (index, value, startIndex, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">このインスタンスにおける挿入の開始位置。</param>
        <param name="value">文字配列。</param>
        <param name="startIndex">
          <c>value</c> 内の開始インデックス。</param>
        <param name="charCount">挿入する文字数。</param>
        <summary>Unicode 文字の指定した部分配列の文字列形式をこのインスタンスの指定した文字位置に挿入します。</summary>
        <returns>挿入操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既存の文字は新しいテキスト用に確保するためにシフトします。 このインスタンスの容量は、必要に応じて調整されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Insert%2A>メソッド。  
  
 [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]
 [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]
 [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> が <see langword="null" /> で、<paramref name="startIndex" /> と <paramref name="charCount" /> が 0 ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" />、<paramref name="startIndex" />、または <paramref name="charCount" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> はこのインスタンスの長さを超えています。  
  
- または - 
 <paramref name="startIndex" /> に <paramref name="charCount" /> を加算した値が <paramref name="value" /> 内の位置にありません。  
  
- または - 
このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.StringBuilder.Length" />
      <MemberSignature Language="VB.NET" Value="Public Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Length : int with get, set" Usage="System.Text.StringBuilder.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Text.StringBuilder" /> オブジェクトの長さを取得または設定します。</summary>
        <value>このインスタンスの長さ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 長さ、<xref:System.Text.StringBuilder>オブジェクトの数によって定義されます<xref:System.Char>オブジェクト。  
  
 ように、<xref:System.String.Length%2A?displayProperty=nameWithType>プロパティ、<xref:System.Text.StringBuilder.Length%2A>プロパティは、現在の string オブジェクトの長さを示します。 異なり、<xref:System.String.Length%2A?displayProperty=nameWithType>読み取り専用では、プロパティ、<xref:System.Text.StringBuilder.Length%2A>プロパティに格納されている文字列の長さを変更することができます、<xref:System.Text.StringBuilder>オブジェクト。  
  
 指定された長さが現在の長さでは、現在よりも小さいかどうか<xref:System.Text.StringBuilder>オブジェクトは、指定された長さに切り詰められます。 指定された長さが、現在の文字列値の末尾、現在の長さより大きいかどうか<xref:System.Text.StringBuilder>オブジェクトは、Unicode NULL 文字で埋められます (u+0000) です。  
  
 指定された長さが現在の容量を超える場合<xref:System.Text.StringBuilder.Capacity%2A>されるように指定した長さ以上に増加します。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Length%2A>プロパティ。  
  
 [!code-cpp[stringbuilder.ensurecapacity#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CPP/cap.cpp#1)]
 [!code-csharp[stringbuilder.ensurecapacity#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CS/cap.cs#1)]
 [!code-vb[stringbuilder.ensurecapacity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.ensurecapacity/VB/cap.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作で指定された値は、0 より小さい値か、<see cref="P:System.Text.StringBuilder.MaxCapacity" /> より大きい値になります。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxCapacity">
      <MemberSignature Language="C#" Value="public int MaxCapacity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxCapacity" />
      <MemberSignature Language="DocId" Value="P:System.Text.StringBuilder.MaxCapacity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaxCapacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxCapacity { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxCapacity : int" Usage="System.Text.StringBuilder.MaxCapacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの最大容量を取得します。</summary>
        <value>このインスタンスが保持できる最大文字数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この実装の最大容量は<xref:System.Int32.MaxValue?displayProperty=nameWithType>します。 ただし、この値は実装に固有で、またはそれ以降の実装では異なる可能性があります。 最大容量を明示的に設定することができます、<xref:System.Text.StringBuilder>オブジェクトを呼び出すことによって、<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29>コンス トラクター。  
  
.NET Core と .NET Framework 4.0 および以降のバージョンでインスタンス化するとき、<xref:System.Text.StringBuilder>オブジェクトを呼び出すことによって、<xref:System.Text.StringBuilder.%23ctor(System.Int32,System.Int32)>長さと容量の両方のコンス トラクター、<xref:System.Text.StringBuilder>インスタンスは、の値を超えて増加できますその<xref:System.Text.StringBuilder.MaxCapacity>プロパティ。 特に呼び出しが発生することができます、<xref:System.Text.StringBuilder.Append(System.String)>と<xref:System.Text.StringBuilder.AppendFormat(System.String,System.Object)>小さな文字列を追加する方法。
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Remove (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Remove(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer, length As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Remove(int startIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.Remove : int * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Remove (startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex">To be added.</param>
        <param name="length">削除する文字数。</param>
        <summary>このインスタンスから、指定した範囲の文字を削除します。</summary>
        <returns>削除操作が完了した後のこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のメソッドでは、現在のインスタンスから指定された文字の範囲を削除します。 文字 (`startIndex` + `length`) に移動されます`startIndex`、によって、現在のインスタンスの文字列値が簡略化および`length`します。 現在のインスタンスの容量に影響はありません。  
  
> [!NOTE]
>  <xref:System.Text.StringBuilder.Remove%2A>メソッドは、現在の値を変更します。<xref:System.Text.StringBuilder>をインスタンス化し、そのインスタンスを返します。 これの作成し、新しいを返すは<xref:System.Text.StringBuilder>オブジェクト。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Remove%2A>メソッド。  
  
 [!code-cpp[stringbuilder.remove#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.remove/CPP/remove.cpp#1)]
 [!code-csharp[stringbuilder.remove#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.remove/CS/remove.cs#1)]
 [!code-vb[stringbuilder.remove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.remove/VB/remove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> または <paramref name="length" /> が 0 未満か、<paramref name="startIndex" /> + <paramref name="length" /> がこのインスタンスの長さを超えています。</exception>
        <altmember cref="M:System.Text.StringBuilder.Replace(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスに出現する指定文字または指定文字列をすべて、別に指定した文字または文字列に置換します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Replace (char oldChar, char newChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(char oldChar, char newChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Replace(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldChar As Char, newChar As Char) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Replace(char oldChar, char newChar);" />
      <MemberSignature Language="F#" Value="member this.Replace : char * char -&gt; System.Text.StringBuilder" Usage="stringBuilder.Replace (oldChar, newChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChar" Type="System.Char" />
        <Parameter Name="newChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="oldChar">置換する文字。</param>
        <param name="newChar">
          <c>oldChar</c> を置換する文字。</param>
        <summary>このインスタンスに出現する指定文字をすべて、別に指定した文字に置換します。</summary>
        <returns>
          <paramref name="oldChar" /> が <paramref name="newChar" /> に置換されたこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの出現箇所を識別するために、序数に基づく、大文字小文字の比較を実行`oldChar`で現在のインスタンス。 現在のサイズ<xref:System.Text.StringBuilder>インスタンスには、交換した後は変更されません。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Replace%2A>メソッド。  
  
 [!code-cpp[stringbuilder.replace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.replace/CPP/replace.cpp#1)]
 [!code-csharp[stringbuilder.replace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.replace/CS/replace.cs#1)]
 [!code-vb[stringbuilder.replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.replace/VB/replace.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Replace (string oldValue, string newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(string oldValue, string newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Replace(System::String ^ oldValue, System::String ^ newValue);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string -&gt; System.Text.StringBuilder" Usage="stringBuilder.Replace (oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldValue">置換する文字列。</param>
        <param name="newValue">
          <c>oldValue</c> を置換する文字列、または <see langword="null" />。</param>
        <summary>このインスタンスに出現するすべての指定した文字列を、別の指定した文字列に置換します。</summary>
        <returns>
          <paramref name="oldValue" /> のすべてのインスタンスが <paramref name="newValue" /> に置換されたこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの出現箇所を識別するために、序数に基づく、大文字小文字の比較を実行`oldValue`で現在のインスタンス。 場合`newValue`は`null`または<xref:System.String.Empty?displayProperty=nameWithType>、出現するすべての`oldValue`が削除されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Replace%2A>メソッド。  
  
 [!code-cpp[stringbuilder.replace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.replace/CPP/replace.cpp#1)]
 [!code-csharp[stringbuilder.replace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.replace/CS/replace.cs#1)]
 [!code-vb[stringbuilder.replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.replace/VB/replace.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="oldValue" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="oldValue" /> の長さが 0 です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <altmember cref="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Replace (char oldChar, char newChar, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(char oldChar, char newChar, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldChar As Char, newChar As Char, startIndex As Integer, count As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Replace(char oldChar, char newChar, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.Replace : char * char * int * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Replace (oldChar, newChar, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChar" Type="System.Char" />
        <Parameter Name="newChar" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="oldChar">置換する文字。</param>
        <param name="newChar">
          <c>oldChar</c> を置換する文字。</param>
        <param name="startIndex">このインスタンスにおける部分文字列の開始位置。</param>
        <param name="count">部分文字列の長さ。</param>
        <summary>このインスタンスの部分文字列に出現するすべての指定した文字を、別の指定した文字に置換します。</summary>
        <returns>
          <paramref name="startIndex" /> から <paramref name="startIndex" /> + <paramref name="count" /> -1 までの範囲内で、<paramref name="oldChar" /> が <paramref name="newChar" /> に置換されたこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの出現箇所を識別するために、序数に基づく、大文字小文字の比較を実行`oldChar`で現在のインスタンス。 現在のサイズ<xref:System.Text.StringBuilder>オブジェクトには、交換した後は変更されません。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Replace%2A>メソッド。  
  
 [!code-cpp[stringbuilder.replace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.replace/CPP/replace.cpp#1)]
 [!code-csharp[stringbuilder.replace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.replace/CS/replace.cs#1)]
 [!code-vb[stringbuilder.replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.replace/VB/replace.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> + <paramref name="count" />このインスタンスの値の長さを超えています。  
  
- または - 
 <paramref name="startIndex" /> または <paramref name="count" /> が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Replace (string oldValue, string newValue, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(string oldValue, string newValue, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, startIndex As Integer, count As Integer) As StringBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringBuilder ^ Replace(System::String ^ oldValue, System::String ^ newValue, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * int * int -&gt; System.Text.StringBuilder" Usage="stringBuilder.Replace (oldValue, newValue, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="oldValue">置換する文字列。</param>
        <param name="newValue">
          <c>oldValue</c> を置換する文字列、または <see langword="null" />。</param>
        <param name="startIndex">このインスタンスにおける部分文字列の開始位置。</param>
        <param name="count">部分文字列の長さ。</param>
        <summary>このインスタンスの部分文字列に出現するすべての指定した文字列を、別の指定した文字列に置換します。</summary>
        <returns>
          <paramref name="startIndex" /> から <paramref name="startIndex" /> + <paramref name="count" /> 1 までの範囲内で、<paramref name="oldValue" /> のすべてのインスタンスが <paramref name="newValue" /> に置換されたこのインスタンスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの出現箇所を識別するために、序数に基づく、大文字小文字の比較を実行`oldValue`で指定された部分文字列。 場合`newValue`は`null`または<xref:System.String.Empty?displayProperty=nameWithType>、出現するすべての`oldValue`が削除されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Text.StringBuilder.Replace%2A>メソッド。  
  
 [!code-cpp[stringbuilder.replace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.replace/CPP/replace.cpp#1)]
 [!code-csharp[stringbuilder.replace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.replace/CS/replace.cs#1)]
 [!code-vb[stringbuilder.replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.replace/VB/replace.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="oldValue" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="oldValue" /> の長さが 0 です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> または <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> に<paramref name="count" /> を加算した値はこのインスタンスの範囲外の文字位置を示します。  
  
- または - 
このインスタンスの値を増やすと <see cref="P:System.Text.StringBuilder.MaxCapacity" /> を超えます。</exception>
        <altmember cref="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化情報が設定されるオブジェクト。</param>
        <param name="context">シリアル化データを格納および取得する場所。 将来使用するために予約されています。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.Text.StringBuilder" /> オブジェクトの逆シリアル化に必要なデータを入力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `context`パラメーターは将来使用するために予約されていると、この操作に関与しません。  
  
 詳細については、<xref:System.Runtime.Serialization.SerializationInfo.AddValue%28System.String%2CSystem.Object%2CSystem.Type%29?displayProperty=nameWithType> メソッドを参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Text.StringBuilder" /> の値を <see cref="T:System.String" /> に変換します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="stringBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値を <see cref="T:System.String" /> に変換します。</summary>
        <returns>このインスタンスと同じ値の文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す必要があります、<xref:System.Text.StringBuilder.ToString%2A>に変換するメソッド、<xref:System.Text.StringBuilder>オブジェクトを<xref:System.String>オブジェクトによって表される文字列を渡す前に、<xref:System.Text.StringBuilder>オブジェクトを持つメソッドを<xref:System.String>パラメーターまたはユーザー インターフェイスで表示します。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.StringBuilder.ToString%2A> メソッドを呼び出す方法を示しています。 この例が示されている例の一部、<xref:System.Text.StringBuilder>クラス。  
  
 [!code-cpp[StringBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/StringBuilder/cpp/StringBuilder.cpp#5)]
 [!code-csharp[StringBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/StringBuilder/CS/StringBuilder.cs#5)]
 [!code-vb[StringBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringBuilder/VB/StringBuilder.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (startIndex As Integer, length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(int startIndex, int length);" />
      <MemberSignature Language="F#" Value="override this.ToString : int * int -&gt; string" Usage="stringBuilder.ToString (startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex">このインスタンス内の部分文字列の開始位置。</param>
        <param name="length">部分文字列の長さ。</param>
        <summary>このインスタンスの部分文字列の値を <see cref="T:System.String" /> に変換します。</summary>
        <returns>このインスタンスの指定した部分文字列と同じ値の文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す必要があります、<xref:System.Text.StringBuilder.ToString%2A>に変換するメソッド、<xref:System.Text.StringBuilder>オブジェクトを<xref:System.String>オブジェクトによって表される文字列を渡す前に、<xref:System.Text.StringBuilder>オブジェクトを持つメソッドを<xref:System.String>パラメーターまたはユーザー インターフェイスで表示します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。  
  
- または - 
<paramref name="startIndex" /> と <paramref name="length" /> の合計が、現在のインスタンスの長さより大きくなっています。</exception>
      </Docs>
    </Member>
  </Members>
</Type>