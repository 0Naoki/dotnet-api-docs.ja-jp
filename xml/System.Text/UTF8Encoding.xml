<Type Name="UTF8Encoding" FullName="System.Text.UTF8Encoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c200a67bc75e1bfe3c6bbe71ec68fec34b1455fc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531446" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UTF8Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF8Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF8Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF8Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF8Encoding : System::Text::Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c7772-101">Unicode 文字の UTF-8 エンコードを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c7772-101">Represents a UTF-8 encoding of Unicode characters.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-102">エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="c7772-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="c7772-103">デコードは、エンコードされたバイトのシーケンスを Unicode 文字のセットに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="c7772-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="c7772-104">Utf-8 では、エンコーディングを Unicode では、各コード ポイントを表す 1 ~ 4 バイトのシーケンスとして。</span><span class="sxs-lookup"><span data-stu-id="c7772-104">UTF-8 is a Unicode encoding that represents each code point as a sequence of one to four bytes.</span></span> <span data-ttu-id="c7772-105">Utf-16、utf-32 エンコーディングとは異なり、utf-8 エンコードでは必要ありません「エンディアン」です。エンコード方式は、プロセッサは、ビッグ エンディアンまたはリトル エンディアンかどうかに関係なく同じです。</span><span class="sxs-lookup"><span data-stu-id="c7772-105">Unlike the UTF-16 and UTF-32 encodings, the UTF-8 encoding does not require "endianness"; the encoding scheme is the same regardless of whether the processor is big-endian or little-endian.</span></span> <span data-ttu-id="c7772-106"><xref:System.Text.UTF8Encoding> Windows コード ページ 65001 に対応します。</span><span class="sxs-lookup"><span data-stu-id="c7772-106"><xref:System.Text.UTF8Encoding> corresponds to the Windows code page 65001.</span></span> <span data-ttu-id="c7772-107">詳細については、UTFs とでサポートされているその他のエンコーディングの<xref:System.Text>を参照してください[.NET Framework の文字エンコーディング](~/docs/standard/base-types/character-encoding.md)です。</span><span class="sxs-lookup"><span data-stu-id="c7772-107">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="c7772-108">インスタンス化することができます、<xref:System.Text.UTF8Encoding>するかどうか、バイト順マーク (BOM) を提供して、エラーの検出を有効にするかどうかに応じて、方法の数のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c7772-108">You can instantiate a <xref:System.Text.UTF8Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM) and whether you want to enable error detection.</span></span> <span data-ttu-id="c7772-109">次の表に、コンス トラクターと<xref:System.Text.Encoding>プロパティを返す、<xref:System.Text.UTF8Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c7772-109">The following table lists the constructors and the <xref:System.Text.Encoding> property that return a <xref:System.Text.UTF8Encoding> object.</span></span>  
  
|<span data-ttu-id="c7772-110">メンバー</span><span class="sxs-lookup"><span data-stu-id="c7772-110">Member</span></span>|<span data-ttu-id="c7772-111">BOM</span><span class="sxs-lookup"><span data-stu-id="c7772-111">BOM</span></span>|<span data-ttu-id="c7772-112">エラーの検出</span><span class="sxs-lookup"><span data-stu-id="c7772-112">Error detection</span></span>|  
|------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>|<span data-ttu-id="c7772-113">[はい]</span><span class="sxs-lookup"><span data-stu-id="c7772-113">Yes</span></span>|<span data-ttu-id="c7772-114">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="c7772-114">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="c7772-115">×</span><span class="sxs-lookup"><span data-stu-id="c7772-115">No</span></span>|<span data-ttu-id="c7772-116">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="c7772-116">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="c7772-117">構成可能</span><span class="sxs-lookup"><span data-stu-id="c7772-117">Configurable</span></span>|<span data-ttu-id="c7772-118">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="c7772-118">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="c7772-119">構成可能</span><span class="sxs-lookup"><span data-stu-id="c7772-119">Configurable</span></span>|<span data-ttu-id="c7772-120">構成可能</span><span class="sxs-lookup"><span data-stu-id="c7772-120">Configurable</span></span>|  
  
 <span data-ttu-id="c7772-121"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、<xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドでは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-121">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF8Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="c7772-122">同様に、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、<xref:System.Text.UTF8Encoding.GetChars%2A>と<xref:System.Text.UTF8Encoding.GetString%2A>メソッドでは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-122">Likewise, the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF8Encoding.GetChars%2A> and <xref:System.Text.UTF8Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="c7772-123">エンコーダーまたはデコーダーを使用して、エンコードまたはデコード (100万文字のエンコードされた文字列に 100,000 文字セグメント単位で) などの複数のブロックにわたるデータと状態情報を保存できるため、<xref:System.Text.UTF8Encoding.GetEncoder%2A>と<xref:System.Text.UTF8Encoding.GetDecoder%2A>プロパティ、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="c7772-123">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF8Encoding.GetEncoder%2A> and <xref:System.Text.UTF8Encoding.GetDecoder%2A> properties, respectively.</span></span>  
  
 <span data-ttu-id="c7772-124">必要に応じて、<xref:System.Text.UTF8Encoding>オブジェクトの先頭には、エンコード プロセスによって生成されるバイト ストリームの先頭にバイトの配列をあるバイト順マーク (BOM) を提供します。</span><span class="sxs-lookup"><span data-stu-id="c7772-124">Optionally, the <xref:System.Text.UTF8Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the beginning of the byte stream that results from the encoding process.</span></span> <span data-ttu-id="c7772-125">Utf-8 でエンコードされたバイト ストリームは、バイト順マーク (BOM) で始まりますが、バイト順および変換形式または UTF 決定デコーダーのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="c7772-125">If a UTF-8 encoded byte stream is prefaced with a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="c7772-126">ただし、Unicode 標準では、いずれもないエンコードされたストリームを utf-8 で BOM を推奨することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="c7772-126">Note, however, that the Unicode Standard neither requires nor recommends a BOM in UTF-8 encoded streams.</span></span> <span data-ttu-id="c7772-127">バイト順とバイト順マークの詳細については、Unicode 標準を参照してください、 [Unicode ホームページ](http://go.microsoft.com/fwlink/?LinkId=37123)です。</span><span class="sxs-lookup"><span data-stu-id="c7772-127">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
 <span data-ttu-id="c7772-128">エンコーダーが BOM を提供する構成されている場合は、呼び出すことによって取得できます、<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドです。 それ以外の場合、メソッドが空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="c7772-128">If the encoder is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="c7772-129">なお、場合でも、<xref:System.Text.UTF8Encoding>オブジェクトは、BOM のサポートのために構成されている、適切な; としてエンコードされたバイト ストリームの先頭の BOM を含める必要がありますのエンコード方法、<xref:System.Text.UTF8Encoding>クラスしないで自動的にします。</span><span class="sxs-lookup"><span data-stu-id="c7772-129">Note that, even if a <xref:System.Text.UTF8Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF8Encoding> class do not do this automatically.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7772-130">エラーの検出を有効にして、クラスのインスタンスのセキュリティを強化するを呼び出す必要があります、<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>コンス トラクターとセット、`throwOnInvalidBytes`パラメーターを`true`です。</span><span class="sxs-lookup"><span data-stu-id="c7772-130">To enable error detection and to make the class instance more secure, you should call the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> constructor and set the `throwOnInvalidBytes` parameter to `true`.</span></span> <span data-ttu-id="c7772-131">エラーの検出が有効になっている、無効な文字またはバイトのシーケンスを検出するメソッドがスローされます、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-131">With error detection enabled, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-132">エラーの検出、例外はスローされませんし、無効なシーケンスは、通常は無視されます。</span><span class="sxs-lookup"><span data-stu-id="c7772-132">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7772-133">オブジェクトがシリアル化され、異なる .NET Framework バージョンを使用して逆シリアル化される場合は、utf-8 でエンコードされたオブジェクトの状態は保持されません。</span><span class="sxs-lookup"><span data-stu-id="c7772-133">The state of a UTF-8 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-134">次の例では、 <xref:System.Text.UTF8Encoding> Unicode 文字の文字列をエンコードおよびバイト配列内に格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c7772-134">The following example uses a <xref:System.Text.UTF8Encoding> object to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="c7772-135">Unicode 文字列には、Pi (U +0 03A0) と ASCII 文字の範囲は、シグマ (U +0 03A3)、2 つの文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="c7772-135">The Unicode string includes two characters, Pi (U+03A0) and Sigma (U+03A3), that are outside the ASCII character range.</span></span> <span data-ttu-id="c7772-136">エンコードされたバイト配列を文字列にデコード時に、Pi、シグマの文字がまだ存在します。</span><span class="sxs-lookup"><span data-stu-id="c7772-136">When the encoded byte array is decoded back to a string, the Pi and Sigma characters are still present.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF8Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="c7772-137">次の例は、ファイルにエンコードされたバイトを書き込みます、バイト順マーク (BOM) をバイト ストリームをプレフィックスする点を除いて、前の例として、同じ文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="c7772-137">The following example uses the same string as the previous example, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="c7772-138">これは、後、2 つの異なる方法でファイルを読み取ります: を使用してテキスト ファイルとして、<xref:System.IO.StreamReader>オブジェクトおよびバイナリ ファイルとして。</span><span class="sxs-lookup"><span data-stu-id="c7772-138">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="c7772-139">予想できるように、どちらの場合は、BOM 文字列に含める新しく読み取り。</span><span class="sxs-lookup"><span data-stu-id="c7772-139">As you would expect, in neither case is the BOM included in the newly read string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UTF8Encoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c7772-140">
            <see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-140">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c7772-141">
            <see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-141">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-142">このコンス トラクターでは、Unicode バイト順マークを行いませんを無効なエンコードが検出された場合、例外をスローしないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c7772-142">This constructor creates an instance that does not provide a Unicode byte order mark and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7772-143">セキュリティ上の理由をお勧めを持つコンス トラクターを呼び出すことによって、エラーの検出を有効にすること、`throwOnInvalidBytes`パラメーターその値を設定して`true`です。</span><span class="sxs-lookup"><span data-stu-id="c7772-143">For security reasons, we recommend that you enable error detection by calling a constructor with a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-144">次の例は、新しい作成<xref:System.Text.UTF8Encoding>をインスタンス化し、その名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="c7772-144">The following example creates a new <xref:System.Text.UTF8Encoding> instance and displays its name.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier">
          <span data-ttu-id="c7772-145">
            <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> メソッドが Unicode バイト順マークを返すよう指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-145">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-146">
            <see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-146">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
          <span data-ttu-id="c7772-147">Unicode バイト順マークを付加するかどうかを指定するパラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-147">A parameter specifies whether to provide a Unicode byte order mark.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-148">このコンス トラクターでは、無効なエンコードが検出されたときに例外をスローしないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c7772-148">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7772-149">セキュリティ上の理由を含むコンス トラクターを呼び出すことによってエラー検出を有効にする必要があります、`throwOnInvalidBytes`パラメーターその値を設定して`true`です。</span><span class="sxs-lookup"><span data-stu-id="c7772-149">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
 <span data-ttu-id="c7772-150">`encoderShouldEmitUTF8Identifier`パラメーターの動作を制御する、<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-150">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="c7772-151">場合`true`、utf-8 形式で Unicode バイト順マーク (BOM) を格納するバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="c7772-151">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="c7772-152">場合`false`長さが 0 バイトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="c7772-152">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="c7772-153">ただし、設定`encoderShouldEmitUTF8Identifier`に`true`は行われません、<xref:System.Text.UTF8Encoding.GetBytes%2A>とプレフィックスのバイト配列の先頭の BOM メソッドはこれが発生すると、<xref:System.Text.UTF8Encoding.GetByteCount%2A>をバイト数の BOM でのバイト数を含める方法です。</span><span class="sxs-lookup"><span data-stu-id="c7772-153">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-154">次の例は、新しい作成<xref:System.Text.UTF8Encoding>インスタンスし Unicode バイト オーダー マークのプレフィックスを出力するように指定、<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-154">The following example creates a new <xref:System.Text.UTF8Encoding> instance and specifies that a Unicode byte order mark prefix should be emitted by the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="c7772-155"><xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドは、Unicode バイト順マーク プリフィックスを返します。</span><span class="sxs-lookup"><span data-stu-id="c7772-155">The <xref:System.Text.UTF8Encoding.GetPreamble%2A> method then returns the Unicode byte order mark prefix.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier">
          <span data-ttu-id="c7772-156">
            <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> メソッドが Unicode バイト順マークを返すよう指定する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-156">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method should return a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="throwOnInvalidBytes">
          <span data-ttu-id="c7772-157">無効なエンコードが検出されたときに例外をスローする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-157">
              <see langword="true" /> to throw an exception when an invalid encoding is detected; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-158">
            <see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-158">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
          <span data-ttu-id="c7772-159">パラメーターでは、Unicode バイト順マークを付加するかどうか、および無効なエンコードが検出されたときに例外をスローするかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-159">Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-160">`encoderShouldEmitUTF8Identifier`パラメーターの動作を制御する、<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-160">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="c7772-161">場合`true`、utf-8 形式で Unicode バイト順マーク (BOM) を格納するバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="c7772-161">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="c7772-162">場合`false`長さが 0 バイトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="c7772-162">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="c7772-163">ただし、設定`encoderShouldEmitUTF8Identifier`に`true`は行われません、<xref:System.Text.UTF8Encoding.GetBytes%2A>とプレフィックスのバイト配列の先頭の BOM メソッドはこれが発生すると、<xref:System.Text.UTF8Encoding.GetByteCount%2A>をバイト数の BOM でのバイト数を含める方法です。</span><span class="sxs-lookup"><span data-stu-id="c7772-163">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="c7772-164">場合`throwOnInvalidBytes`は`true`、無効なバイト シーケンスを検出するためのメソッドをスロー、<xref:System.ArgumentException?displayProperty=nameWithType>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-164">If `throwOnInvalidBytes` is `true`, a method that detects an invalid byte sequence throws an <xref:System.ArgumentException?displayProperty=nameWithType> exception.</span></span> <span data-ttu-id="c7772-165">それ以外の場合、メソッドが例外をスローしていないと、無効なシーケンスが無視されます。</span><span class="sxs-lookup"><span data-stu-id="c7772-165">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7772-166">セキュリティ上の理由を含むコンス トラクターを呼び出すことによってエラー検出を有効にする必要があります、`throwOnInvalidBytes`パラメーターとそのパラメーターを設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="c7772-166">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting that parameter to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-167">次の例は、新しい作成<xref:System.Text.UTF8Encoding>ことを指定する、インスタンス、<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドでは、Unicode バイト オーダー マークのプレフィックスが生成されないようにし、無効なエンコードが検出されたときに例外がスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-167">The following example creates a new <xref:System.Text.UTF8Encoding> instance, specifying that the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method should not emit a Unicode byte order mark prefix, and an exception should be thrown when an invalid encoding is detected.</span></span> <span data-ttu-id="c7772-168">このコンス トラクターの動作は、既定値と比較<xref:System.Text.UTF8Encoding.%23ctor>コンス トラクターは、無効なエンコードが検出された場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-168">The behavior of this constructor is compared to the default <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not throw an exception when an invalid encoding is detected.</span></span> <span data-ttu-id="c7772-169">2 つ<xref:System.Text.UTF8Encoding>インスタンスが無効な文字シーケンスである行で 2 つの高サロゲート (U + D801 と U + D802) を格納する文字配列をエンコードです。 上位サロゲートが下位サロゲートで後に常にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-169">The two <xref:System.Text.UTF8Encoding> instances encode a character array that contains two high surrogates (U+D801 and U+D802) in a row, which is an invalid character sequence; a high surrogate should always be followed by a low surrogate.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="c7772-170">現在のインスタンスと比較するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-170">The object to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-171">指定したオブジェクトが、現在の <see cref="T:System.Text.UTF8Encoding" /> オブジェクトと等しいかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-171">Determines whether the specified object is equal to the current <see cref="T:System.Text.UTF8Encoding" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-172">
            <paramref name="value" /> が <see cref="T:System.Text.UTF8Encoding" /> のインスタンスで、現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-172">
              <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF8Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-173">2 つ<xref:System.Text.UTF8Encoding>オブジェクトは、以下の条件がすべて当てはまる場合、等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="c7772-173">Two <xref:System.Text.UTF8Encoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="c7772-174">両方のオブジェクトでは、バイト順序マークを提供するかどうか。</span><span class="sxs-lookup"><span data-stu-id="c7772-174">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="c7772-175">両方のオブジェクトは、同じエンコーダー フォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="c7772-175">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="c7772-176">両方のオブジェクトは、同じデコーダー フォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="c7772-176">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-177">次の例では、<xref:System.Text.UTF8Encoding.Equals%2A>メソッドをテストするかどうか、現在<xref:System.Text.UTF8Encoding>オブジェクトが異なると等しい<xref:System.Text.UTF8Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c7772-177">The following example uses the <xref:System.Text.UTF8Encoding.Equals%2A> method to test whether the current <xref:System.Text.UTF8Encoding> object is equal to a different <xref:System.Text.UTF8Encoding> object.</span></span> <span data-ttu-id="c7772-178">次の 4 つ<xref:System.Text.UTF8Encoding>オブジェクトが作成され、比較し、比較の結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c7772-178">Four <xref:System.Text.UTF8Encoding> objects are created and compared and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CPP/equals-object.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CS/equals-object.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/VB/equals-object.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c7772-179">文字のセットをエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-179">Calculates the number of bytes produced by encoding a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ chars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="c7772-180">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-180">The <see cref="T:System.String" /> containing the set of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-181">指定した <see cref="T:System.String" /> 内の文字をエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-181">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-182">指定した文字をエンコードすることによって生成されるバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-182">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-183">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>呼び出した結果のバイトを格納する、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-183">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="c7772-184">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-184">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="c7772-185"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-185">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-186">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-186">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-187">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-187">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="c7772-188">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="c7772-188">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="c7772-189">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、preamble のバイト数がによって返される値に反映されません、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-189">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-190">次の例では、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>と<xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29>文字列をエンコードするために必要なバイトの最大値と実際の数を計算する方法です。</span><span class="sxs-lookup"><span data-stu-id="c7772-190">The following example calls the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> and <xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="c7772-191">実際のバイト ストリームにバイト オーダー マークの保存に必要なバイト数も表示されます。</span><span class="sxs-lookup"><span data-stu-id="c7772-191">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-192">
            <paramref name="chars" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-192">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-193">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-193">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-194">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-194">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="c7772-195">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-195">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-196">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-196">-and-</span>
          </span>
          <span data-ttu-id="c7772-197">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-197">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="c7772-198">エンコードする最初の文字へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-198">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="c7772-199">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-199">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-200">指定した文字ポインターで始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-200">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-201">指定した文字をエンコードすることによって生成されるバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-201">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-202">必要な厳密な配列のサイズを計算する、<xref:System.Text.UTF8Encoding.GetBytes%2A>結果のバイトを格納するメソッドを呼び出す、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-202">To calculate the exact array size required by the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="c7772-203">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-203">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="c7772-204"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-204">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-205">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-205">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-206">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-206">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="c7772-207">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="c7772-207">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="c7772-208">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、preamble のバイト数がによって返される値に反映されません、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-208">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-209">
            <paramref name="chars" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-209">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-210">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-210">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c7772-211">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-211">-or-</span>
          </span>
          <span data-ttu-id="c7772-212">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-212">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-213">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-213">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="c7772-214">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-214">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-215">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-215">-and-</span>
          </span>
          <span data-ttu-id="c7772-216">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-216">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7772-217">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-217">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7772-218">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-218">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="c7772-219">エンコード対象の文字のセットを格納している文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-219">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="c7772-220">エンコードする最初の文字のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-220">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="c7772-221">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-221">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-222">指定した文字配列から文字のセットをエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-222">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-223">指定した文字をエンコードすることによって生成されるバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-223">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-224">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>の使用を呼び出して結果のバイトを格納する<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-224">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the uses <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="c7772-225">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-225">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="c7772-226"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-226">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-227">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-227">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-228">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-228">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="c7772-229">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="c7772-229">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="c7772-230">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、preamble のバイト数がによって返される値に反映されません、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-230">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-231">次の例は、配列ラテン文字の大文字と小文字および呼び出しは追加、<xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>ラテン文字の小文字の文字をエンコードするために必要なバイト数を調べます。</span><span class="sxs-lookup"><span data-stu-id="c7772-231">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="c7772-232">バイト順マークが追加された場合に必要なバイトの合計数と共に、この情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="c7772-232">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="c7772-233">この番号によって返される値と比較してその、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドで、ラテン文字の小文字の文字をエンコードするために必要なバイトの最大数を示します。</span><span class="sxs-lookup"><span data-stu-id="c7772-233">It compares this number with the value returned by the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-234">
            <paramref name="chars" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-234">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-235">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-235">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c7772-236">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-236">-or-</span>
          </span>
          <span data-ttu-id="c7772-237">
            <paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-237">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="c7772-238">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-238">-or-</span>
          </span>
          <span data-ttu-id="c7772-239">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-239">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-240">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-240">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="c7772-241">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-241">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-242">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-242">-and-</span>
          </span>
          <span data-ttu-id="c7772-243">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> プロパティが <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されている。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-243">The <see cref="P:System.Text.Encoding.EncoderFallback" /> property is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c7772-244">文字のセットをバイト シーケンスにエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-244">Encodes a set of characters into a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="c7772-245">エンコードする最初の文字へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-245">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="c7772-246">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-246">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="c7772-247">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-247">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="c7772-248">書き込む最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-248">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-249">指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-249">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-250">
            <paramref name="bytes" /> によって示される位置に書き込まれる実際のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-250">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-251">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>呼び出した結果のバイトを格納する、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-251">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="c7772-252">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-252">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="c7772-253"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-253">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-254">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-254">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-255">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-255">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="c7772-256">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-256">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="c7772-257">これで大文字と小文字、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合を使用して、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって返される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="c7772-257">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> returned by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="c7772-258">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="c7772-258">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="c7772-259">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、します。</span><span class="sxs-lookup"><span data-stu-id="c7772-259">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="c7772-260"><xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドはエンコードされたバイトのシーケンスの先頭に preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="c7772-260">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-261">
            <paramref name="chars" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-261">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c7772-262">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-262">-or-</span>
          </span>
          <span data-ttu-id="c7772-263">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-263">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-264">
            <paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-264">
              <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-265">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-265">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="c7772-266">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-266">-or-</span>
          </span>
          <span data-ttu-id="c7772-267">
            <paramref name="byteCount" /> が結果のバイト数より少なくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-267">
              <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="c7772-268">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-268">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-269">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-269">-and-</span>
          </span>
          <span data-ttu-id="c7772-270">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-270">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7772-271">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-271">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7772-272">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-272">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="c7772-273">エンコード対象の文字のセットを格納している文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-273">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="c7772-274">エンコードする最初の文字のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-274">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="c7772-275">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-275">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="c7772-276">結果のバイト シーケンスを格納するバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-276">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="c7772-277">結果のバイト シーケンスを書き込む開始位置のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-277">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-278">指定した文字配列に格納されている文字のセットを指定したバイト配列にエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-278">Encodes a set of characters from the specified character array into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-279">
            <paramref name="bytes" /> に書き込まれた実際のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-279">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-280">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>呼び出した結果のバイトを格納する、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-280">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="c7772-281">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-281">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="c7772-282"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-282">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-283">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-283">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-284">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-284">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="c7772-285">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-285">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="c7772-286">これで大文字と小文字、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合を使用して、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="c7772-286">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="c7772-287">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="c7772-287">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="c7772-288">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、します。</span><span class="sxs-lookup"><span data-stu-id="c7772-288">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="c7772-289"><xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドはエンコードされたバイトのシーケンスの先頭に preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="c7772-289">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-290">次の例では、<xref:System.Text.UTF8Encoding.GetBytes%2A>とストアのバイト配列の要素の範囲内でエンコードされたバイトの文字列から文字の範囲をエンコードする方法です。</span><span class="sxs-lookup"><span data-stu-id="c7772-290">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of characters from a string and stores the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-291">
            <paramref name="chars" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-291">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c7772-292">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-292">-or-</span>
          </span>
          <span data-ttu-id="c7772-293">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-293">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-294">
            <paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-294">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c7772-295">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-295">-or-</span>
          </span>
          <span data-ttu-id="c7772-296">
            <paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-296">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="c7772-297">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-297">-or-</span>
          </span>
          <span data-ttu-id="c7772-298">
            <paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-298">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-299">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-299">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="c7772-300">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-300">-or-</span>
          </span>
          <span data-ttu-id="c7772-301">
            <paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-301">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="c7772-302">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-302">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-303">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-303">-and-</span>
          </span>
          <span data-ttu-id="c7772-304">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-304">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="c7772-305">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-305">The <see cref="T:System.String" /> containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="c7772-306">エンコードする最初の文字のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-306">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="c7772-307">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-307">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="c7772-308">結果のバイト シーケンスを格納するバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-308">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="c7772-309">結果のバイト シーケンスを書き込む開始位置のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-309">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-310">指定した <see cref="T:System.String" /> の文字セットを、指定したバイト配列にエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-310">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-311">
            <paramref name="bytes" /> に書き込まれた実際のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-311">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-312">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>呼び出した結果のバイトを格納する、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-312">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="c7772-313">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-313">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="c7772-314"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-314">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-315">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-315">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-316">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-316">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="c7772-317">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-317">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="c7772-318">これで大文字と小文字、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合を使用して、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="c7772-318">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="c7772-319">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="c7772-319">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="c7772-320">バイト ストリームの先頭の preamble を挿入する (など、一連のファイルに書き込まれるバイトの先頭) 開発者の責任は、します。</span><span class="sxs-lookup"><span data-stu-id="c7772-320">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="c7772-321"><xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドはエンコードされたバイトのシーケンスの先頭に preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="c7772-321">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-322">次の例では、 <xref:System.Text.UTF8Encoding.GetBytes%2A> Unicode 文字配列から要素の範囲をエンコードし、バイト配列の要素の範囲内でエンコードされたバイトを格納します。</span><span class="sxs-lookup"><span data-stu-id="c7772-322">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-323">
            <paramref name="s" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-323">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c7772-324">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-324">-or-</span>
          </span>
          <span data-ttu-id="c7772-325">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-325">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-326">
            <paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-326">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c7772-327">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-327">-or-</span>
          </span>
          <span data-ttu-id="c7772-328">
            <paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-328">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="c7772-329">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-329">-or-</span>
          </span>
          <span data-ttu-id="c7772-330">
            <paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-330">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-331">エラーの検出が有効になり、<paramref name="s" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-331">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="c7772-332">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-332">-or-</span>
          </span>
          <span data-ttu-id="c7772-333">
            <paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-333">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="c7772-334">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-334">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-335">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-335">-and-</span>
          </span>
          <span data-ttu-id="c7772-336">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-336">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c7772-337">バイト シーケンスをデコードすることによって生成される文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-337">Calculates the number of characters produced by decoding a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="c7772-338">デコードする最初のバイトへのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-338">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="c7772-339">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-339">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-340">指定したバイト ポインターで始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-340">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-341">指定したバイト シーケンスをデコードすることによって生成される文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-341">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-342">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetChars%2A>結果の文字を格納する呼び出し、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-342">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="c7772-343">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-343">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="c7772-344"><xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-344">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-345">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-345">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-346">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-346">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-347">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-347">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-348">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-348">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c7772-349">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-349">-or-</span>
          </span>
          <span data-ttu-id="c7772-350">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-350">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-351">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-351">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="c7772-352">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-352">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-353">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-353">-and-</span>
          </span>
          <span data-ttu-id="c7772-354">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-354">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7772-355">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-355">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7772-356">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-356">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="c7772-357">デコード対象のバイト シーケンスが格納されたバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-357">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="c7772-358">デコードする最初のバイトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-358">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="c7772-359">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-359">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-360">指定したバイト配列からバイト シーケンスをデコードすることによって生成される文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-360">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-361">指定したバイト シーケンスをデコードすることによって生成される文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-361">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-362">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetChars%2A>結果の文字を格納する呼び出し、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-362">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="c7772-363">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-363">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="c7772-364"><xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-364">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-365">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-365">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-366">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-366">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-367">次の例では、<xref:System.Text.UTF8Encoding.GetCharCount%2A>バイト配列の要素の範囲をデコードして生成される文字数を返すメソッドをします。</span><span class="sxs-lookup"><span data-stu-id="c7772-367">The following example uses the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-368">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-368">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-369">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-369">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c7772-370">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-370">-or-</span>
          </span>
          <span data-ttu-id="c7772-371">
            <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-371">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="c7772-372">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-372">-or-</span>
          </span>
          <span data-ttu-id="c7772-373">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-373">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-374">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-374">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="c7772-375">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-375">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-376">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-376">-and-</span>
          </span>
          <span data-ttu-id="c7772-377">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-377">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c7772-378">バイト シーケンスを文字のセットにデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-378">Decodes a sequence of bytes into a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="c7772-379">デコードする最初のバイトへのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-379">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="c7772-380">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-380">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="c7772-381">結果の文字セットの書き込みを開始する位置へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-381">A pointer to the location at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="c7772-382">書き込む文字の最大数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-382">The maximum number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-383">指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-383">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-384">
            <paramref name="chars" /> によって示される位置に書き込まれる実際の文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-384">The actual number of characters written at the location indicated by <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-385">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetChars%2A>結果の文字を格納する呼び出し、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-385">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="c7772-386">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-386">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="c7772-387"><xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-387">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-388">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-388">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-389">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-389">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="c7772-390">デコードするバイトの範囲には、バイト順マーク (BOM) が含まれています。 バイト配列が BOM で非対応型のメソッドによって返される場合は、文字 U + FFFE はこのメソッドによって返される文字配列に含まれています。</span><span class="sxs-lookup"><span data-stu-id="c7772-390">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="c7772-391">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-391">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="c7772-392">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-392">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="c7772-393">これで大文字と小文字、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合を使用して、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供されるオブジェクト、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="c7772-393">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-394">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-394">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c7772-395">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-395">-or-</span>
          </span>
          <span data-ttu-id="c7772-396">
            <paramref name="chars" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-396">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-397">
            <paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-397">
              <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-398">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-398">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="c7772-399">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-399">-or-</span>
          </span>
          <span data-ttu-id="c7772-400">
            <paramref name="charCount" /> が結果の文字数より少なくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-400">
              <paramref name="charCount" /> is less than the resulting number of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="c7772-401">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-401">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-402">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-402">-and-</span>
          </span>
          <span data-ttu-id="c7772-403">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-403">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c7772-404">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-404">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c7772-405">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-405">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="c7772-406">デコード対象のバイト シーケンスが格納されたバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-406">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="c7772-407">デコードする最初のバイトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-407">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="c7772-408">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-408">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="c7772-409">結果の文字のセットを格納する文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-409">The character array to contain the resulting set of characters.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="c7772-410">結果の文字のセットを書き込む開始位置のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-410">The index at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-411">指定したバイト配列に格納されているバイト シーケンスを指定した文字配列にデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-411">Decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-412">
            <paramref name="chars" /> に書き込まれた実際の文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-412">The actual number of characters written into <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-413">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetChars%2A>結果の文字を格納する呼び出し、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-413">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="c7772-414">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-414">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="c7772-415"><xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-415">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-416">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-416">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-417">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-417">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="c7772-418">デコードするバイトの範囲には、バイト順マーク (BOM) が含まれています。 バイト配列が BOM で非対応型のメソッドによって返される場合は、文字 U + FFFE はこのメソッドによって返される文字配列に含まれています。</span><span class="sxs-lookup"><span data-stu-id="c7772-418">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="c7772-419">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-419">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="c7772-420">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-420">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="c7772-421">これで大文字と小文字、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合を使用して、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="c7772-421">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-422">次の例では、<xref:System.Text.UTF8Encoding.GetChars%2A>バイト配列の要素の範囲をデコードし、結果を文字配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="c7772-422">The following example uses the <xref:System.Text.UTF8Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-423">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-423">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c7772-424">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-424">-or-</span>
          </span>
          <span data-ttu-id="c7772-425">
            <paramref name="chars" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-425">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-426">
            <paramref name="byteIndex" />、<paramref name="byteCount" />、または <paramref name="charIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-426">
              <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c7772-427">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-427">-or-</span>
          </span>
          <span data-ttu-id="c7772-428">
            <paramref name="byteindex" /> および <paramref name="byteCount" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-428">
              <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="c7772-429">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-429">-or-</span>
          </span>
          <span data-ttu-id="c7772-430">
            <paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-430">
              <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-431">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-431">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="c7772-432">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-432">-or-</span>
          </span>
          <span data-ttu-id="c7772-433">
            <paramref name="chars" /> には、<paramref name="charIndex" /> から配列の末尾までに十分なサイズがなく、結果の文字を格納できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-433">
              <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="c7772-434">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-434">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-435">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-435">-and-</span>
          </span>
          <span data-ttu-id="c7772-436">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-436">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c7772-437">UTF-8 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-437">Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-438">UTF-8 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-438">A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-439"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドと同様の方法で、文字のシーケンシャル ブロックにバイトのシーケンシャル ブロックを変換する、<xref:System.Text.UTF8Encoding.GetChars%2A>このクラスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-439">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF8Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="c7772-440">ただし、<xref:System.Text.Decoder>のブロックをまたぐバイト シーケンスを正しくデコードすることができますのでの呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="c7772-440">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="c7772-441"><xref:System.Text.Decoder>もデータ ブロックの末尾にある末尾バイトを保持し、[次へ] のデコード操作で末尾バイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="c7772-441">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="c7772-442">したがって、<xref:System.Text.UTF8Encoding.GetDecoder%2A>と<xref:System.Text.UTF8Encoding.GetEncoder%2A>の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためにネットワーク転送、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="c7772-442">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="c7772-443">エラーの検出が有効なかどうか、つまり、`throwOnInvalidCharacters`にコンス トラクターのパラメーターが設定されている`true`でエラーの検出が有効にも、<xref:System.Text.Decoder>このメソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="c7772-443">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="c7772-444">エラーの検出が有効にし、無効なシーケンスが発生した、デコーダーの状態が定義されていないと、処理が停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-444">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-445">次の例では、 <xref:System.Text.UTF8Encoding.GetDecoder%2A> utf-8 デコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="c7772-445">The following example uses the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method to obtain a UTF-8 decoder.</span></span> <span data-ttu-id="c7772-446">デコーダーでは、文字のシーケンスにバイト シーケンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="c7772-446">The decoder converts a sequence of bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c7772-447">Unicode 文字のシーケンスを UTF-8 でエンコードされたバイト シーケンスに変換するエンコーダーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-447">Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-448">Unicode 文字のシーケンスを UTF-8 でエンコードされたバイト シーケンスに変換する <see cref="T:System.Text.Encoder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-448">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-449"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドと同様のバイト数のシーケンシャル ブロックに文字のシーケンシャル ブロックを変換する、<xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-449">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF8Encoding.GetBytes%2A> method.</span></span> <span data-ttu-id="c7772-450">ただし、<xref:System.Text.Encoder>のブロックをまたぐ文字シーケンスを正しくエンコードすることができますのでの呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="c7772-450">However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="c7772-451"><xref:System.Text.Encoder>末尾が保存されますが、データ ブロックの最後の文字し、末尾の文字を使用して、次のエンコード操作もします。</span><span class="sxs-lookup"><span data-stu-id="c7772-451">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="c7772-452">たとえば、データ ブロックが上位サロゲートで終了し、一致する下位サロゲートが [次へ] のデータ ブロック内にある可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-452">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="c7772-453">したがって、<xref:System.Text.UTF8Encoding.GetDecoder%2A>と<xref:System.Text.UTF8Encoding.GetEncoder%2A>の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためにネットワーク転送、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="c7772-453">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="c7772-454">エラーの検出が有効なかどうか、つまり、`throwOnInvalidCharacters`にコンス トラクターのパラメーターが設定されている`true`でエラーの検出が有効にも、<xref:System.Text.Encoder>このメソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="c7772-454">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method.</span></span> <span data-ttu-id="c7772-455">エラーの検出が有効にし、無効なシーケンスが発生した、エンコーダーの状態が定義されていないと、処理が停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-455">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-456">次の例では、<xref:System.Text.UTF8Encoding.GetEncoder%2A>でエンコードされたバイトのシーケンスを文字のシーケンスを utf-8 に変換するエンコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="c7772-456">The following example uses the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-8 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c7772-457">現在のインスタンスのハッシュ コードを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-457">Returns the hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-458">現在のインスタンスのハッシュ コード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-458">The hash code for the current instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c7772-459">次の例では、<xref:System.Text.UTF8Encoding.GetHashCode%2A>のハッシュ コードを返すメソッドを<xref:System.Text.UTF8Encoding>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="c7772-459">The following example uses the <xref:System.Text.UTF8Encoding.GetHashCode%2A> method to return a hash code for <xref:System.Text.UTF8Encoding> instances.</span></span> <span data-ttu-id="c7772-460">このメソッドによって返されるハッシュ コードを作成するために使用するコンス トラクターに依存することに注意してください、<xref:System.Text.UTF8Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c7772-460">Notice that the hash code returned by this method depends on the constructor used to create the <xref:System.Text.UTF8Encoding> object.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CPP/gethashcode-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CS/gethashcode-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/VB/gethashcode-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">
          <span data-ttu-id="c7772-461">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-461">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-462">指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-462">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-463">指定した文字数をエンコードすることによって生成される最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-463">The maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-464">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>呼び出した結果のバイトを格納する、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-464">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="c7772-465">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-465">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="c7772-466"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-466">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-467"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 現在選択されている最悪のケースを含め、最悪の番号は、<xref:System.Text.EncoderFallback>です。</span><span class="sxs-lookup"><span data-stu-id="c7772-467"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="c7772-468">フォールバックがある可能性がある文字列で、選択されている場合<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>大きな値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="c7772-468">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="c7772-469">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="c7772-469">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="c7772-470">大きな文字列は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでエラーをキャッチするかを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-470">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="c7772-471">使用して、別のアプローチを検討することも<xref:System.Text.UTF8Encoding.GetByteCount%2A>または<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="c7772-471">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c7772-472">たとえば、英語とその他の多くの言語でテキストには、文字を表現する utf-8 バイトを 1 つだけ多くの場合、必要がありますがによって返される数<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>できる可能性がある変換対象の文字列はすべての文字がそれぞれに 4 バイトが必要とすることで構成されることにします。</span><span class="sxs-lookup"><span data-stu-id="c7772-472">For example, text in English and many other languages often needs only one UTF-8 byte to represent a character, but the number returned by <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has to allow for the possibility that the string to be converted will consist entirely of characters that each require four bytes.</span></span>  
  
 <span data-ttu-id="c7772-473"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 関係を持たない<xref:System.Text.UTF8Encoding.GetChars%2A>です。</span><span class="sxs-lookup"><span data-stu-id="c7772-473"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetChars%2A>.</span></span> <span data-ttu-id="c7772-474">使用するような関数が、アプリケーションに必要なかどうかは<xref:System.Text.UTF8Encoding.GetChars%2A>、それを使用する必要があります<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="c7772-474">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetChars%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7772-475">`GetMaxByteCount(N)` 必ずしもと同じ値ではない`N* GetMaxByteCount(1)`です。</span><span class="sxs-lookup"><span data-stu-id="c7772-475">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-476">次の例では、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>最大指定数の文字をエンコードするために必要なバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="c7772-476">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-477">
            <paramref name="charCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-477">
              <paramref name="charCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c7772-478">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-478">-or-</span>
          </span>
          <span data-ttu-id="c7772-479">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-479">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="c7772-480">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-480">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-481">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-481">-and-</span>
          </span>
          <span data-ttu-id="c7772-482">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-482">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">
          <span data-ttu-id="c7772-483">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-483">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-484">指定したバイト数をデコードすることによって生成される最大文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-484">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-485">指定したバイト数をデコードすることによって生成される最大文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-485">The maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-486">必要な厳密な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetChars%2A>呼び出した結果の文字を格納する、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-486">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="c7772-487">最大配列サイズを計算するには、呼び出します、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-487">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="c7772-488"><xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドでは、メモリが少なく、通常が割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドは通常、速く実行します。</span><span class="sxs-lookup"><span data-stu-id="c7772-488">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="c7772-489"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 現在選択されている最悪のケースを含め、最悪の番号は、<xref:System.Text.DecoderFallback>です。</span><span class="sxs-lookup"><span data-stu-id="c7772-489"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="c7772-490">フォールバックがある可能性がある文字列で、選択されている場合<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>大きな値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="c7772-490">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="c7772-491">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="c7772-491">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="c7772-492">大きな文字列は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでエラーをキャッチするかを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-492">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span>  <span data-ttu-id="c7772-493">使用して、別のアプローチを検討することも<xref:System.Text.UTF8Encoding.GetCharCount%2A>または<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="c7772-493">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetCharCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="c7772-494"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 関係を持たない<xref:System.Text.UTF8Encoding.GetBytes%2A>です。</span><span class="sxs-lookup"><span data-stu-id="c7772-494"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="c7772-495">使用するような関数が、アプリケーションに必要なかどうかは<xref:System.Text.UTF8Encoding.GetBytes%2A>、それを使用する必要があります<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>です。</span><span class="sxs-lookup"><span data-stu-id="c7772-495">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7772-496">`GetMaxCharCount(N)` 必ずしもと同じ値ではない`N* GetMaxCharCount(1)`です。</span><span class="sxs-lookup"><span data-stu-id="c7772-496">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-497">次の例では、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>を文字の最大数を返すメソッドが、指定したバイト数をデコードすることによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="c7772-497">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-498">
            <paramref name="byteCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-498">
              <paramref name="byteCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c7772-499">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-499">-or-</span>
          </span>
          <span data-ttu-id="c7772-500">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-500">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="c7772-501">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-501">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-502">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-502">-and-</span>
          </span>
          <span data-ttu-id="c7772-503">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-503">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c7772-504">
            <see cref="T:System.Text.UTF8Encoding" /> エンコード オブジェクトが UTF-8 形式でエンコードされた Unicode バイト順マークを提供するように構成されている場合、そのようなマークが返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-504">Returns a Unicode byte order mark encoded in UTF-8 format, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-505">
            <see cref="T:System.Text.UTF8Encoding" /> エンコード オブジェクトが Unicode バイト順マークを提供するように構成されている場合、そうしたマークが格納されているバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-505">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span>
          </span>
          <span data-ttu-id="c7772-506">それ以外の場合、このメソッドは長さがゼロのバイト配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-506">Otherwise, this method returns a zero-length byte array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-507"><xref:System.Text.UTF8Encoding>オブジェクトの先頭には、エンコード プロセスに起因するバイト シーケンスをバイト配列をあるプリアンブルを提供できます。</span><span class="sxs-lookup"><span data-stu-id="c7772-507">The <xref:System.Text.UTF8Encoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes that result from the encoding process.</span></span> <span data-ttu-id="c7772-508">バイト順マーク (コード ポイント U+FEFF) でエンコードされたバイトのシーケンスの先頭には、バイト順および変換形式または UTF 決定デコーダーことができます。</span><span class="sxs-lookup"><span data-stu-id="c7772-508">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="c7772-509">Unicode バイト順マーク (BOM) が 0xEF としてシリアル化 0xBB 0xBF です。</span><span class="sxs-lookup"><span data-stu-id="c7772-509">The Unicode byte order mark (BOM) is serialized as 0xEF 0xBB 0xBF.</span></span> <span data-ttu-id="c7772-510">ストリームが必要し、utf-8 の BOM の使用をお勧めのどちらも、Unicode 規格にエンコードされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="c7772-510">Note that the Unicode Standard neither requires nor recommends the use of a BOM for UTF-8 encoded streams.</span></span>  
  
 <span data-ttu-id="c7772-511">インスタンス化することができます、<xref:System.Text.UTF8Encoding>オブジェクト<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドは、次の方法で有効な BOM を返します。</span><span class="sxs-lookup"><span data-stu-id="c7772-511">You can instantiate a <xref:System.Text.UTF8Encoding> object whose <xref:System.Text.UTF8Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="c7772-512">取得することによって、<xref:System.Text.UTF8Encoding>によって返されるオブジェクト、<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="c7772-512">By retrieving the <xref:System.Text.UTF8Encoding> object returned by the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="c7772-513">呼び出して、<xref:System.Text.UTF8Encoding>を持つコンス トラクター、`encoderShouldEmitUTF8Identifier`パラメーターとその値に設定を設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="c7772-513">By calling a <xref:System.Text.UTF8Encoding> constructor with a `encoderShouldEmitUTF8Identifier` parameter and setting its value set to `true`.</span></span>  
  
 <span data-ttu-id="c7772-514">他のすべての<xref:System.Text.UTF8Encoding>オブジェクトは、有効な BOM ではなく、空の配列を返すように構成します。</span><span class="sxs-lookup"><span data-stu-id="c7772-514">All other <xref:System.Text.UTF8Encoding> objects are configured to return an empty array rather than a valid BOM.</span></span>  
  
 <span data-ttu-id="c7772-515">BOM がそれ以外の場合、エンコードへの参照が失われているファイルのエンコーディングの特定の id にほぼを指定して、または不適切なタグなしの web などのデータまたはときビジネス保存されたランダム テキスト ファイルがありませんでした国際化に関する注意事項です。</span><span class="sxs-lookup"><span data-stu-id="c7772-515">The BOM provide nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="c7772-516">データが一貫して適切なタグとは、多くの場合、ユーザーの問題を回避できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-516">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="c7772-517">エンコードの種類を提供する標準、BOM は冗長です。</span><span class="sxs-lookup"><span data-stu-id="c7772-517">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="c7772-518">ただし、正しいエンコード ヘッダーを送信するサーバーのヘルプを使用できます。</span><span class="sxs-lookup"><span data-stu-id="c7772-518">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="c7772-519">または、するとして使用できます、フォールバック エンコーディングが失われたそれ以外の場合に備えてです。</span><span class="sxs-lookup"><span data-stu-id="c7772-519">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="c7772-520">BOM を使用するには、いくつか欠点があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-520">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="c7772-521">たとえば、BOM を使用するデータベース フィールドを制限する方法を知ることが難しいがあります。</span><span class="sxs-lookup"><span data-stu-id="c7772-521">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="c7772-522">ファイルの連結問題になる場合も、たとえばなどのファイルをマージするとデータの途中で不要な文字が最終的な形です。</span><span class="sxs-lookup"><span data-stu-id="c7772-522">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="c7772-523">いくつかの欠点を行ってもただし、BOM の使用が強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="c7772-523">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="c7772-524">バイト順とバイト順マークの詳細については、Unicode 標準を参照してください、 [Unicode ホームページ](http://go.microsoft.com/fwlink/?LinkId=37123)です。</span><span class="sxs-lookup"><span data-stu-id="c7772-524">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="c7772-525">ファイルまたはストリームとして保存するときに、エンコード済みバイトが正しくデコードするためには、プリアンブルでエンコードされたバイトのストリームの先頭プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="c7772-525">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="c7772-526">なお、<xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドでエンコードされたバイトのシーケンスに BOM が付加されません以外の場合は、開発者の責任は、適切なバイト ストリームの先頭の BOM を指定します。</span><span class="sxs-lookup"><span data-stu-id="c7772-526">Note that the <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-527">次の例では、 <xref:System.Text.UTF8Encoding.GetPreamble%2A> Unicode のバイトを返すメソッドを utf-8 形式でエンコードされたマークで注文します。</span><span class="sxs-lookup"><span data-stu-id="c7772-527">The following example uses the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to return the Unicode byte order mark encoded in UTF-8 format.</span></span> <span data-ttu-id="c7772-528">注意して、既定のコンス トラクター<xref:System.Text.UTF8Encoding>プリアンブルは提供されません。</span><span class="sxs-lookup"><span data-stu-id="c7772-528">Notice that the default constructor for <xref:System.Text.UTF8Encoding> does not provide a preamble.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="c7772-529">次の例では、2 つをインスタンス化<xref:System.Text.UTF8Encoding>オブジェクトで、パラメーターなしで呼び出すことによって最初<xref:System.Text.UTF8Encoding.%23ctor>コンス トラクターを呼び出すことによって、BOM や、2 つ目を提供しない、<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29>を持つコンス トラクター、`encoderShouldEmitUTF8Identifier`引数に設定`true`.</span><span class="sxs-lookup"><span data-stu-id="c7772-529">The following example instantiates two <xref:System.Text.UTF8Encoding> objects, the first by calling the parameterless <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not provide a BOM, and the second by calling the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29> constructor with its `encoderShouldEmitUTF8Identifier` argument set to `true`.</span></span> <span data-ttu-id="c7772-530">呼び出して、 <xref:System.Text.UTF8Encoding.GetPreamble%2A> UF8 でエンコードされた文字列を書き込む前に、ファイルに BOM を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="c7772-530">It then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UF8-encoded string.</span></span> <span data-ttu-id="c7772-531">コンソール出力の例を示すように、2 番目のエンコーダーからのバイトを保存するファイルは最初より多く 3 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="c7772-531">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/cs/getpreamble1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/vb/getpreamble1.vb#1)]  
  
 <span data-ttu-id="c7772-532">使用して、ファイルを比較することもできます、`fc`するか、コンソール ウィンドウ内のコマンドは 16 進表示モードを含むテキスト エディターでファイルを調査できます。</span><span class="sxs-lookup"><span data-stu-id="c7772-532">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="c7772-533">Utf-8 をサポートするエディターで、ファイルを開くときに、BOM が表示されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="c7772-533">Note that when the file is opened in an editor that supports UTF-8, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="c7772-534">デコード対象のバイト シーケンスが格納されたバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-534">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="c7772-535">デコードする最初のバイトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-535">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="c7772-536">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-536">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c7772-537">バイト配列に格納されているある範囲のバイトを文字列にデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-537">Decodes a range of bytes from a byte array into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c7772-538">指定したバイト シーケンスのデコード結果が格納されている <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-538">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7772-539">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="c7772-539">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="c7772-540">エラーの検出、無効なシーケンスが無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="c7772-540">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="c7772-541">デコードするバイトの範囲には、バイト順マーク (BOM) が含まれています。 バイト配列が BOM で非対応型のメソッドによって返される場合は、文字 U + FFFE はこのメソッドによって返される文字配列に含まれています。</span><span class="sxs-lookup"><span data-stu-id="c7772-541">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="c7772-542">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-542">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="c7772-543">ストリームから読み取られるデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c7772-543">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="c7772-544">これで大文字と小文字、またはデータの量がより小さなブロックに分割する必要があることが非常に大きい場合を使用して、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="c7772-544">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7772-545">次の例では、配列を初期化を呼び出して、<xref:System.Text.UTF8Encoding.GetByteCount%2A>バイト数がエンコードされた文字列とバイト順マーク (BOM) のサイズを追加するために必要なだけを調べます。</span><span class="sxs-lookup"><span data-stu-id="c7772-545">The following example initializes an array by calling the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="c7772-546">この例では、<xref:System.Text.UTF8Encoding.GetPreamble%2A>は BOM を呼び出す前に、配列を格納する方法、<xref:System.Text.UTF8Encoding.GetBytes%2A>配列にエンコードされたバイトを格納するメソッド。</span><span class="sxs-lookup"><span data-stu-id="c7772-546">The example then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="c7772-547">この例では、<xref:System.Text.UTF8Encoding.GetString%2A>文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c7772-547">The example then calls the <xref:System.Text.UTF8Encoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="c7772-548">ここでは、デコードした文字列が異なること、元の文字列から 16 ビットのバイト順マーク U+FFFD で始まっているので注意してください。</span><span class="sxs-lookup"><span data-stu-id="c7772-548">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="c7772-549">つまり、2 つの文字列が、等しくないものとして比較されます、文字列が出力の場合は、BOM が表示されること、置換文字として"?"。</span><span class="sxs-lookup"><span data-stu-id="c7772-549">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="c7772-550">文字列の先頭の BOM を削除するに呼び出せる、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="c7772-550">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c7772-551">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-551">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c7772-552">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-552">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="c7772-553">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-553">-or-</span>
          </span>
          <span data-ttu-id="c7772-554">
            <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-554">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c7772-555">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-555">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="c7772-556">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-556">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="c7772-557">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-557">-and-</span>
          </span>
          <span data-ttu-id="c7772-558">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c7772-558">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>