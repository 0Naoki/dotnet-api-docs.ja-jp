<Type Name="UTF8Encoding" FullName="System.Text.UTF8Encoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b2021c365658f4fc13606536efd544aeca18e189" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51917998" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UTF8Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF8Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF8Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF8Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF8Encoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF8Encoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="16a07-101">Unicode 文字の UTF-8 エンコードを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="16a07-101">Represents a UTF-8 encoding of Unicode characters.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-102">エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="16a07-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="16a07-103">デコードは、Unicode 文字のセットにエンコードされたバイトのシーケンスを変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="16a07-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="16a07-104">Utf-8 では、エンコーディングを Unicode は、1 ~ 4 バイトのシーケンスとして各コード ポイントを表します。</span><span class="sxs-lookup"><span data-stu-id="16a07-104">UTF-8 is a Unicode encoding that represents each code point as a sequence of one to four bytes.</span></span> <span data-ttu-id="16a07-105">Utf-16、utf-32 エンコーディングとは異なり、utf-8 エンコーディングは必要ありません「エンディアン」;エンコード スキームでは、プロセッサは、ビッグ エンディアンまたはリトル エンディアンかどうかに関係なく同じです。</span><span class="sxs-lookup"><span data-stu-id="16a07-105">Unlike the UTF-16 and UTF-32 encodings, the UTF-8 encoding does not require "endianness"; the encoding scheme is the same regardless of whether the processor is big-endian or little-endian.</span></span> <span data-ttu-id="16a07-106"><xref:System.Text.UTF8Encoding> Windows コード ページ 65001 に対応します。</span><span class="sxs-lookup"><span data-stu-id="16a07-106"><xref:System.Text.UTF8Encoding> corresponds to the Windows code page 65001.</span></span> <span data-ttu-id="16a07-107">UTFs とでサポートされているその他のエンコーディングの詳細については<xref:System.Text>を参照してください[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)します。</span><span class="sxs-lookup"><span data-stu-id="16a07-107">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="16a07-108">インスタンス化することができます、<xref:System.Text.UTF8Encoding>するかどうか、バイト順マーク (BOM) を提供して、エラーの検出を有効にするかどうかに応じて、方法数のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="16a07-108">You can instantiate a <xref:System.Text.UTF8Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM) and whether you want to enable error detection.</span></span> <span data-ttu-id="16a07-109">次の表に、コンス トラクターと<xref:System.Text.Encoding>プロパティを返す、<xref:System.Text.UTF8Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="16a07-109">The following table lists the constructors and the <xref:System.Text.Encoding> property that return a <xref:System.Text.UTF8Encoding> object.</span></span>  
  
|<span data-ttu-id="16a07-110">メンバー</span><span class="sxs-lookup"><span data-stu-id="16a07-110">Member</span></span>|<span data-ttu-id="16a07-111">BOM</span><span class="sxs-lookup"><span data-stu-id="16a07-111">BOM</span></span>|<span data-ttu-id="16a07-112">エラーの検出</span><span class="sxs-lookup"><span data-stu-id="16a07-112">Error detection</span></span>|  
|------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>|<span data-ttu-id="16a07-113">[はい]</span><span class="sxs-lookup"><span data-stu-id="16a07-113">Yes</span></span>|<span data-ttu-id="16a07-114">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="16a07-114">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="16a07-115">×</span><span class="sxs-lookup"><span data-stu-id="16a07-115">No</span></span>|<span data-ttu-id="16a07-116">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="16a07-116">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="16a07-117">構成可能</span><span class="sxs-lookup"><span data-stu-id="16a07-117">Configurable</span></span>|<span data-ttu-id="16a07-118">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="16a07-118">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="16a07-119">構成可能</span><span class="sxs-lookup"><span data-stu-id="16a07-119">Configurable</span></span>|<span data-ttu-id="16a07-120">構成可能</span><span class="sxs-lookup"><span data-stu-id="16a07-120">Configurable</span></span>|  
  
 <span data-ttu-id="16a07-121"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドでは、バイト数が、Unicode 文字のセットがエンコードされるかを判断します。 および<xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="16a07-121">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF8Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="16a07-122">同様に、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドでは、文字数が発生するシーケンス (バイト単位) をデコードするかを判断します。 および<xref:System.Text.UTF8Encoding.GetChars%2A>と<xref:System.Text.UTF8Encoding.GetString%2A>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="16a07-122">Likewise, the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF8Encoding.GetChars%2A> and <xref:System.Text.UTF8Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="16a07-123">エンコーダーまたはデコーダーがエンコードまたはデコード (100,000 文字のセグメントにエンコードされている 1,000,000 文字の文字列) などの複数のブロックにわたるデータと状態情報を保存、使用できる、<xref:System.Text.UTF8Encoding.GetEncoder%2A>と<xref:System.Text.UTF8Encoding.GetDecoder%2A>プロパティそれぞれします。</span><span class="sxs-lookup"><span data-stu-id="16a07-123">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF8Encoding.GetEncoder%2A> and <xref:System.Text.UTF8Encoding.GetDecoder%2A> properties, respectively.</span></span>  
  
 <span data-ttu-id="16a07-124">必要に応じて、<xref:System.Text.UTF8Encoding>オブジェクトは、エンコード プロセスによって生成されるバイト ストリームの先頭に付けるバイトの配列、バイト順マーク (BOM) を提供します。</span><span class="sxs-lookup"><span data-stu-id="16a07-124">Optionally, the <xref:System.Text.UTF8Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the beginning of the byte stream that results from the encoding process.</span></span> <span data-ttu-id="16a07-125">Utf-8 でエンコードされたバイト ストリームはバイト オーダー マーク (BOM) で始まりますが、バイト順と変換形式または UTF デコーダーのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="16a07-125">If a UTF-8 encoded byte stream is prefaced with a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="16a07-126">ただし、Unicode 標準では、どちらも、エンコードされたストリームを utf-8 で BOM をお勧めすることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="16a07-126">Note, however, that the Unicode Standard neither requires nor recommends a BOM in UTF-8 encoded streams.</span></span> <span data-ttu-id="16a07-127">バイト オーダーとバイト順マークの詳細については、Unicode 標準を参照してください、 [Unicode ホーム ページ](https://go.microsoft.com/fwlink/?LinkId=37123)します。</span><span class="sxs-lookup"><span data-stu-id="16a07-127">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
 <span data-ttu-id="16a07-128">BOM を提供するエンコーダーを構成する場合は、呼び出すことによって取得できます、<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドです。 それ以外の場合、メソッドが空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="16a07-128">If the encoder is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="16a07-129">なお、場合でも、 <xref:System.Text.UTF8Encoding> BOM のサポートのために、オブジェクトが構成されている、適切な; としてエンコードされたバイト ストリームの先頭の BOM を含める必要がありますのエンコード方法、<xref:System.Text.UTF8Encoding>クラスしないで自動的にします。</span><span class="sxs-lookup"><span data-stu-id="16a07-129">Note that, even if a <xref:System.Text.UTF8Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF8Encoding> class do not do this automatically.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16a07-130">エラーの検出を有効にして、クラスのインスタンスのセキュリティを強化するを呼び出す必要があります、<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>コンス トラクターとセット、`throwOnInvalidBytes`パラメーター`true`します。</span><span class="sxs-lookup"><span data-stu-id="16a07-130">To enable error detection and to make the class instance more secure, you should call the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> constructor and set the `throwOnInvalidBytes` parameter to `true`.</span></span> <span data-ttu-id="16a07-131">エラーの検出が有効になっている、無効な文字またはバイトのシーケンスを検出するメソッドがスローされます、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-131">With error detection enabled, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-132">エラーの検出、例外がスローされないと、無効なシーケンスは、通常は無視されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-132">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16a07-133">オブジェクトはシリアル化され、異なるバージョンの .NET Framework を使用して逆シリアル化する場合は、utf-8 でエンコードされたオブジェクトの状態は保持されません。</span><span class="sxs-lookup"><span data-stu-id="16a07-133">The state of a UTF-8 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-134">次の例では、<xref:System.Text.UTF8Encoding>を Unicode 文字の文字列をエンコードおよびバイト配列内に格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="16a07-134">The following example uses a <xref:System.Text.UTF8Encoding> object to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="16a07-135">Unicode 文字列には、Pi (U + 03A0) とシグマ (U + 03A3)、ASCII 文字の範囲外にある 2 つの文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="16a07-135">The Unicode string includes two characters, Pi (U+03A0) and Sigma (U+03A3), that are outside the ASCII character range.</span></span> <span data-ttu-id="16a07-136">エンコードされたバイト配列は、文字列にデコードすると、Pi とシグマ文字がまだ存在します。</span><span class="sxs-lookup"><span data-stu-id="16a07-136">When the encoded byte array is decoded back to a string, the Pi and Sigma characters are still present.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF8Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="16a07-137">ファイルにエンコードされたバイトを書き込みます、バイト順マーク (BOM) をバイト ストリームをプレフィックスする点を除いて次の例は前の例と同じ文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="16a07-137">The following example uses the same string as the previous example, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="16a07-138">これは、後、2 つの方法でファイルを読み取ります: を使用してテキスト ファイルとして、<xref:System.IO.StreamReader>オブジェクト、およびバイナリ ファイルとして。</span><span class="sxs-lookup"><span data-stu-id="16a07-138">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="16a07-139">期待どおりには、どちらも新しく読み取り文字列には、BOM が含まれています。</span><span class="sxs-lookup"><span data-stu-id="16a07-139">As you would expect, neither newly-read string includes the BOM.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UTF8Encoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md">
      <span data-ttu-id="16a07-140">エンコーディングの理解</span>
      <span class="sxs-lookup">
        <span data-stu-id="16a07-140">Understanding Encodings</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16a07-141">
            <see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-141">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16a07-142">
            <see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-142">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-143">このコンス トラクターは、Unicode バイト順マークを提供しないと無効なエンコーディングが検出されたときに、例外をスローしませんが、インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="16a07-143">This constructor creates an instance that does not provide a Unicode byte order mark and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16a07-144">セキュリティ上の理由をお勧めのコンス トラクターを呼び出すことによって、エラーの検出を有効にすること、`throwOnInvalidBytes`パラメーターとその値に設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="16a07-144">For security reasons, we recommend that you enable error detection by calling a constructor with a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-145">次の例では、作成、新しい<xref:System.Text.UTF8Encoding>インスタンスし、その名前が表示されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-145">The following example creates a new <xref:System.Text.UTF8Encoding> instance and displays its name.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF8Encoding : bool -&gt; System.Text.UTF8Encoding" Usage="new System.Text.UTF8Encoding encoderShouldEmitUTF8Identifier" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier">
          <span data-ttu-id="16a07-146">
            <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> メソッドが Unicode バイト順マークを返すよう指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-146">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-147">
            <see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-147">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
          <span data-ttu-id="16a07-148">Unicode バイト順マークを付加するかどうかを指定するパラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-148">A parameter specifies whether to provide a Unicode byte order mark.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-149">このコンス トラクターは、無効なエンコーディングが検出されたときに例外をスローしないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="16a07-149">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16a07-150">セキュリティ上の理由が含まれるコンス トラクターを呼び出してエラーの検出を有効する必要があります、`throwOnInvalidBytes`パラメーターとその値に設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="16a07-150">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
 <span data-ttu-id="16a07-151">`encoderShouldEmitUTF8Identifier`の操作を制御するパラメーター、<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-151">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="16a07-152">場合`true`、utf-8 形式で Unicode バイト順マーク (BOM) を格納するバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="16a07-152">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="16a07-153">場合`false`長さが 0 バイトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="16a07-153">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="16a07-154">ただし、設定`encoderShouldEmitUTF8Identifier`に`true`は行われません、<xref:System.Text.UTF8Encoding.GetBytes%2A>メソッド、バイト配列の先頭の BOM のプレフィックスを発生しても、<xref:System.Text.UTF8Encoding.GetByteCount%2A>バイト数をバイト数で BOM に含めるメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-154">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-155">次の例では、作成、新しい<xref:System.Text.UTF8Encoding>インスタンスし Unicode バイト順マークのプリフィックスを出力するように指定、<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-155">The following example creates a new <xref:System.Text.UTF8Encoding> instance and specifies that a Unicode byte order mark prefix should be emitted by the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="16a07-156"><xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドは、Unicode バイト順マークのプリフィックスを返します。</span><span class="sxs-lookup"><span data-stu-id="16a07-156">The <xref:System.Text.UTF8Encoding.GetPreamble%2A> method then returns the Unicode byte order mark prefix.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF8Encoding : bool * bool -&gt; System.Text.UTF8Encoding" Usage="new System.Text.UTF8Encoding (encoderShouldEmitUTF8Identifier, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier">
          <span data-ttu-id="16a07-157">
            <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> メソッドが Unicode バイト順マークを返すよう指定する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-157">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method should return a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="throwOnInvalidBytes">
          <span data-ttu-id="16a07-158">無効なエンコードが検出されたときに例外をスローする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-158">
              <see langword="true" /> to throw an exception when an invalid encoding is detected; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-159">
            <see cref="T:System.Text.UTF8Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-159">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span>
          </span>
          <span data-ttu-id="16a07-160">パラメーターでは、Unicode バイト順マークを付加するかどうか、および無効なエンコードが検出されたときに例外をスローするかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-160">Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-161">`encoderShouldEmitUTF8Identifier`の操作を制御するパラメーター、<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-161">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="16a07-162">場合`true`、utf-8 形式で Unicode バイト順マーク (BOM) を格納するバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="16a07-162">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="16a07-163">場合`false`長さが 0 バイトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="16a07-163">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="16a07-164">ただし、設定`encoderShouldEmitUTF8Identifier`に`true`は行われません、<xref:System.Text.UTF8Encoding.GetBytes%2A>メソッド、バイト配列の先頭の BOM のプレフィックスを発生しても、<xref:System.Text.UTF8Encoding.GetByteCount%2A>バイト数をバイト数で BOM に含めるメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-164">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="16a07-165">場合`throwOnInvalidBytes`は`true`、無効なバイト シーケンスを検出するメソッドがスローされます、<xref:System.ArgumentException?displayProperty=nameWithType>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-165">If `throwOnInvalidBytes` is `true`, a method that detects an invalid byte sequence throws an <xref:System.ArgumentException?displayProperty=nameWithType> exception.</span></span> <span data-ttu-id="16a07-166">それ以外の場合、メソッドが例外をスローしないと、無効なシーケンスが無視されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-166">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16a07-167">セキュリティ上の理由が含まれるコンス トラクターを呼び出してエラーの検出を有効する必要があります、`throwOnInvalidBytes`パラメーターとそのパラメーターを設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="16a07-167">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting that parameter to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-168">次の例では、作成、新しい<xref:System.Text.UTF8Encoding>ことを指定する、インスタンス、<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドが Unicode バイト順マーク プリフィックスを生成すべきでないと、無効なエンコーディングが検出された場合に例外がスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-168">The following example creates a new <xref:System.Text.UTF8Encoding> instance, specifying that the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method should not emit a Unicode byte order mark prefix, and an exception should be thrown when an invalid encoding is detected.</span></span> <span data-ttu-id="16a07-169">このコンス トラクターの動作は、既定値と比較<xref:System.Text.UTF8Encoding.%23ctor>コンス トラクターは、無効なエンコーディングが検出されたときに、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-169">The behavior of this constructor is compared to the default <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not throw an exception when an invalid encoding is detected.</span></span> <span data-ttu-id="16a07-170">2 つ<xref:System.Text.UTF8Encoding>インスタンス、無効な文字シーケンスである行で 2 つの高サロゲート (U + D801 および U + D802) を含む文字配列をエンコードする; 上位サロゲートが下位サロゲートで後に常にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-170">The two <xref:System.Text.UTF8Encoding> instances encode a character array that contains two high surrogates (U+D801 and U+D802) in a row, which is an invalid character sequence; a high surrogate should always be followed by a low surrogate.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF8Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="16a07-171">現在のインスタンスと比較するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-171">The object to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-172">指定したオブジェクトが、現在の <see cref="T:System.Text.UTF8Encoding" /> オブジェクトと等しいかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-172">Determines whether the specified object is equal to the current <see cref="T:System.Text.UTF8Encoding" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-173">
            <paramref name="value" /> が <see cref="T:System.Text.UTF8Encoding" /> のインスタンスで、現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-173">
              <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF8Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-174">2 つ<xref:System.Text.UTF8Encoding>オブジェクトは、次の条件がすべて当てはまる場合に等価と見なされます。</span><span class="sxs-lookup"><span data-stu-id="16a07-174">Two <xref:System.Text.UTF8Encoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="16a07-175">両方のオブジェクトがバイト順マークを指定するか、両方はありません。</span><span class="sxs-lookup"><span data-stu-id="16a07-175">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="16a07-176">両方のオブジェクトは、同じエンコーダー フォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="16a07-176">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="16a07-177">両方のオブジェクトは、同じデコーダーのフォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="16a07-177">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-178">次の例では、<xref:System.Text.UTF8Encoding.Equals%2A>メソッドをテストするかどうか、現在<xref:System.Text.UTF8Encoding>オブジェクトが異なると等しい<xref:System.Text.UTF8Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="16a07-178">The following example uses the <xref:System.Text.UTF8Encoding.Equals%2A> method to test whether the current <xref:System.Text.UTF8Encoding> object is equal to a different <xref:System.Text.UTF8Encoding> object.</span></span> <span data-ttu-id="16a07-179">次の 4 つ<xref:System.Text.UTF8Encoding>オブジェクトが作成され、比較し、比較の結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-179">Four <xref:System.Text.UTF8Encoding> objects are created and compared and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CPP/equals-object.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CS/equals-object.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/VB/equals-object.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16a07-180">文字のセットをエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-180">Calculates the number of bytes produced by encoding a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ chars);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF8Encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="16a07-181">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-181">The <see cref="T:System.String" /> containing the set of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-182">指定した <see cref="T:System.String" /> 内の文字をエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-182">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-183">指定した文字をエンコードすることによって生成されるバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-183">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-184">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-184">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="16a07-185">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-185">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="16a07-186"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-186">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-187">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-187">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-188">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-188">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="16a07-189">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="16a07-189">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="16a07-190">バイト ストリームの先頭に、preamble を挿入 (など、一連のファイルに書き込まれるバイトの先頭に)、開発者の責任であり、preamble のバイト数がによって返される値に反映されていない、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-190">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-191">次の例では、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>と<xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29>文字列をエンコードするために必要なバイトの最大値と実際の数を計算するメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-191">The following example calls the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> and <xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="16a07-192">実際のバイト順マークを付けるバイト ストリームを格納するために必要なバイト数も表示されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-192">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-193">
            <paramref name="chars" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-193">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-194">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-194">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-195">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-195">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="16a07-196">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-196">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-197">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-197">-and-</span>
          </span>
          <span data-ttu-id="16a07-198">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-198">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF8Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="16a07-199">エンコードする最初の文字へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-199">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="16a07-200">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-200">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-201">指定した文字ポインターで始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-201">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-202">指定した文字をエンコードすることによって生成されるバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-202">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-203">必要な正確な配列のサイズを計算する、<xref:System.Text.UTF8Encoding.GetBytes%2A>結果のバイトを格納するメソッドを呼び出す、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-203">To calculate the exact array size required by the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="16a07-204">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-204">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="16a07-205"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-205">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-206">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-206">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-207">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-207">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="16a07-208">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="16a07-208">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="16a07-209">バイト ストリームの先頭に、preamble を挿入 (など、一連のファイルに書き込まれるバイトの先頭に)、開発者の責任であり、preamble のバイト数がによって返される値に反映されていない、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-209">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-210">
            <paramref name="chars" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-210">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-211">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-211">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="16a07-212">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-212">-or-</span>
          </span>
          <span data-ttu-id="16a07-213">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-213">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-214">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-214">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="16a07-215">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-215">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-216">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-216">-and-</span>
          </span>
          <span data-ttu-id="16a07-217">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-217">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="16a07-218">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-218">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="16a07-219">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-219">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF8Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="16a07-220">エンコード対象の文字のセットを格納している文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-220">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="16a07-221">エンコードする最初の文字のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-221">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="16a07-222">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-222">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-223">指定した文字配列から文字のセットをエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-223">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-224">指定した文字をエンコードすることによって生成されるバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-224">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-225">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>結果のバイトを格納するには、使用を呼び出す<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-225">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the uses <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="16a07-226">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-226">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="16a07-227"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-227">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-228">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-228">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-229">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-229">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="16a07-230">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="16a07-230">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="16a07-231">バイト ストリームの先頭に、preamble を挿入 (など、一連のファイルに書き込まれるバイトの先頭に)、開発者の責任であり、preamble のバイト数がによって返される値に反映されていない、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-231">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-232">次の例では、配列 Latin の大文字と小文字および呼び出しを設定します、<xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>ラテン文字の小文字の文字をエンコードするために必要なバイト数を判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-232">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="16a07-233">バイト順マークが追加された場合に必要なバイトの合計数と共にこの情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-233">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="16a07-234">この番号によって返される値の比較、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは、ラテン文字の小文字の文字をエンコードするために必要なバイトの最大数を示します。</span><span class="sxs-lookup"><span data-stu-id="16a07-234">It compares this number with the value returned by the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-235">
            <paramref name="chars" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-235">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-236">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-236">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="16a07-237">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-237">-or-</span>
          </span>
          <span data-ttu-id="16a07-238">
            <paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-238">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="16a07-239">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-239">-or-</span>
          </span>
          <span data-ttu-id="16a07-240">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-240">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-241">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-241">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="16a07-242">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-242">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-243">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-243">-and-</span>
          </span>
          <span data-ttu-id="16a07-244">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> プロパティが <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されている。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-244">The <see cref="P:System.Text.Encoding.EncoderFallback" /> property is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16a07-245">文字のセットをバイト シーケンスにエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-245">Encodes a set of characters into a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string -&gt; byte[]" Usage="uTF8Encoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF8Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="16a07-246">エンコードする最初の文字へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-246">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="16a07-247">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-247">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="16a07-248">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-248">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="16a07-249">書き込む最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-249">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-250">指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-250">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-251">
            <paramref name="bytes" /> によって示される位置に書き込まれる実際のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-251">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-252">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-252">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="16a07-253">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-253">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="16a07-254"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-254">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-255">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-255">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-256">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-256">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="16a07-257">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-257">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="16a07-258">この場合、または使用して、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって返される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="16a07-258">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> returned by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="16a07-259">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="16a07-259">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="16a07-260">Preamble をバイト ストリームの先頭に挿入 (など、一連のファイルに書き込まれるバイトの先頭に) 開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="16a07-260">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="16a07-261"><xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドがエンコードされたバイト シーケンスの先頭に、preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="16a07-261">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-262">
            <paramref name="chars" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-262">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16a07-263">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-263">-or-</span>
          </span>
          <span data-ttu-id="16a07-264">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-264">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-265">
            <paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-265">
              <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-266">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-266">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="16a07-267">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-267">-or-</span>
          </span>
          <span data-ttu-id="16a07-268">
            <paramref name="byteCount" /> が結果のバイト数より少なくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-268">
              <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="16a07-269">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-269">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-270">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-270">-and-</span>
          </span>
          <span data-ttu-id="16a07-271">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-271">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="16a07-272">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-272">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="16a07-273">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-273">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF8Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="16a07-274">エンコード対象の文字のセットを格納している文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-274">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="16a07-275">エンコードする最初の文字のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-275">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="16a07-276">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-276">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="16a07-277">結果のバイト シーケンスを格納するバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-277">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="16a07-278">結果のバイト シーケンスを書き込む開始位置のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-278">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-279">指定した文字配列に格納されている文字のセットを指定したバイト配列にエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-279">Encodes a set of characters from the specified character array into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-280">
            <paramref name="bytes" /> に書き込まれた実際のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-280">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-281">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-281">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="16a07-282">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-282">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="16a07-283"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-283">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-284">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-284">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-285">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-285">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="16a07-286">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-286">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="16a07-287">この場合、または使用して、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="16a07-287">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="16a07-288">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="16a07-288">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="16a07-289">Preamble をバイト ストリームの先頭に挿入 (など、一連のファイルに書き込まれるバイトの先頭に) 開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="16a07-289">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="16a07-290"><xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドがエンコードされたバイト シーケンスの先頭に、preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="16a07-290">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-291">次の例では、<xref:System.Text.UTF8Encoding.GetBytes%2A>文字列とバイト配列内の要素の範囲内でエンコードされたバイトのストアからの文字の範囲をエンコードする方法。</span><span class="sxs-lookup"><span data-stu-id="16a07-291">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of characters from a string and stores the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-292">
            <paramref name="chars" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-292">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16a07-293">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-293">-or-</span>
          </span>
          <span data-ttu-id="16a07-294">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-294">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-295">
            <paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-295">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="16a07-296">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-296">-or-</span>
          </span>
          <span data-ttu-id="16a07-297">
            <paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-297">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="16a07-298">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-298">-or-</span>
          </span>
          <span data-ttu-id="16a07-299">
            <paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-299">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-300">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-300">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="16a07-301">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-301">-or-</span>
          </span>
          <span data-ttu-id="16a07-302">
            <paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-302">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="16a07-303">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-303">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-304">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-304">-and-</span>
          </span>
          <span data-ttu-id="16a07-305">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-305">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF8Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="16a07-306">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-306">The <see cref="T:System.String" /> containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="16a07-307">エンコードする最初の文字のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-307">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="16a07-308">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-308">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="16a07-309">結果のバイト シーケンスを格納するバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-309">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="16a07-310">結果のバイト シーケンスを書き込む開始位置のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-310">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-311">指定した <see cref="T:System.String" /> の文字セットを、指定したバイト配列にエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-311">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-312">
            <paramref name="bytes" /> に書き込まれた実際のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-312">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-313">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-313">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="16a07-314">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-314">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="16a07-315"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-315">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-316">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-316">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-317">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-317">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="16a07-318">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-318">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="16a07-319">この場合、または使用して、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="16a07-319">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="16a07-320">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="16a07-320">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="16a07-321">Preamble をバイト ストリームの先頭に挿入 (など、一連のファイルに書き込まれるバイトの先頭に) 開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="16a07-321">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="16a07-322"><xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドがエンコードされたバイト シーケンスの先頭に、preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="16a07-322">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-323">次の例では、<xref:System.Text.UTF8Encoding.GetBytes%2A>範囲の Unicode 文字配列から要素をエンコードおよびバイト配列内の要素の範囲内でエンコードされたバイトを格納するメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-323">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-324">
            <paramref name="s" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-324">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16a07-325">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-325">-or-</span>
          </span>
          <span data-ttu-id="16a07-326">
            <paramref name="bytes" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-326">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-327">
            <paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-327">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="16a07-328">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-328">-or-</span>
          </span>
          <span data-ttu-id="16a07-329">
            <paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-329">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="16a07-330">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-330">-or-</span>
          </span>
          <span data-ttu-id="16a07-331">
            <paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-331">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-332">エラーの検出が有効になり、<paramref name="s" /> に無効な文字のシーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-332">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="16a07-333">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-333">-or-</span>
          </span>
          <span data-ttu-id="16a07-334">
            <paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-334">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="16a07-335">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-335">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-336">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-336">-and-</span>
          </span>
          <span data-ttu-id="16a07-337">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-337">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16a07-338">バイト シーケンスをデコードすることによって生成される文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-338">Calculates the number of characters produced by decoding a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF8Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="16a07-339">デコードする最初のバイトへのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-339">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="16a07-340">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-340">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-341">指定したバイト ポインターで始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-341">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-342">指定したバイト シーケンスをデコードすることによって生成される文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-342">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-343">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetChars%2A>、結果の文字を格納するには、呼び出す、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-343">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="16a07-344">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-344">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="16a07-345"><xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-345">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-346">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-346">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-347">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-347">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-348">
            <paramref name="bytes" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-348">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-349">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-349">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="16a07-350">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-350">-or-</span>
          </span>
          <span data-ttu-id="16a07-351">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-351">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-352">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-352">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="16a07-353">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-353">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-354">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-354">-and-</span>
          </span>
          <span data-ttu-id="16a07-355">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-355">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="16a07-356">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-356">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="16a07-357">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-357">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF8Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="16a07-358">デコード対象のバイト シーケンスが格納されたバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-358">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="16a07-359">デコードする最初のバイトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-359">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="16a07-360">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-360">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-361">指定したバイト配列からバイト シーケンスをデコードすることによって生成される文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-361">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-362">指定したバイト シーケンスをデコードすることによって生成される文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-362">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-363">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetChars%2A>、結果の文字を格納するには、呼び出す、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-363">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="16a07-364">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-364">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="16a07-365"><xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-365">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-366">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-366">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-367">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-367">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-368">次の例では、<xref:System.Text.UTF8Encoding.GetCharCount%2A>バイト配列内の要素の範囲をデコードすることによって生成される文字数を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-368">The following example uses the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-369">
            <paramref name="bytes" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-369">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-370">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-370">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="16a07-371">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-371">-or-</span>
          </span>
          <span data-ttu-id="16a07-372">
            <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-372">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="16a07-373">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-373">-or-</span>
          </span>
          <span data-ttu-id="16a07-374">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-374">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-375">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-375">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="16a07-376">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-376">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-377">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-377">-and-</span>
          </span>
          <span data-ttu-id="16a07-378">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-378">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16a07-379">バイト シーケンスを文字のセットにデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-379">Decodes a sequence of bytes into a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF8Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="16a07-380">デコードする最初のバイトへのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-380">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="16a07-381">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-381">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="16a07-382">結果の文字セットの書き込みを開始する位置へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-382">A pointer to the location at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="16a07-383">書き込む文字の最大数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-383">The maximum number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-384">指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-384">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-385">
            <paramref name="chars" /> によって示される位置に書き込まれる実際の文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-385">The actual number of characters written at the location indicated by <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-386">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetChars%2A>、結果の文字を格納するには、呼び出す、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-386">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="16a07-387">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-387">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="16a07-388"><xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-388">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-389">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-389">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-390">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-390">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="16a07-391">デコードするバイトの範囲にはバイト順マーク (BOM) が含まれていて、バイト配列が BOM 非対応の型のメソッドによって返される、このメソッドによって返される文字配列内で文字 U + FFFE が含まれます。</span><span class="sxs-lookup"><span data-stu-id="16a07-391">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="16a07-392">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-392">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="16a07-393">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-393">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="16a07-394">この場合、または使用して、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>オブジェクトによって提供される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="16a07-394">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-395">
            <paramref name="bytes" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-395">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16a07-396">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-396">-or-</span>
          </span>
          <span data-ttu-id="16a07-397">
            <paramref name="chars" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-397">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-398">
            <paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-398">
              <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-399">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-399">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="16a07-400">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-400">-or-</span>
          </span>
          <span data-ttu-id="16a07-401">
            <paramref name="charCount" /> が結果の文字数より少なくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-401">
              <paramref name="charCount" /> is less than the resulting number of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="16a07-402">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-402">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-403">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-403">-and-</span>
          </span>
          <span data-ttu-id="16a07-404">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-404">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="16a07-405">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-405">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="16a07-406">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-406">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF8Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="16a07-407">デコード対象のバイト シーケンスが格納されたバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-407">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="16a07-408">デコードする最初のバイトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-408">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="16a07-409">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-409">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="16a07-410">結果の文字のセットを格納する文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-410">The character array to contain the resulting set of characters.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="16a07-411">結果の文字のセットを書き込む開始位置のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-411">The index at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-412">指定したバイト配列に格納されているバイト シーケンスを指定した文字配列にデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-412">Decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-413">
            <paramref name="chars" /> に書き込まれた実際の文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-413">The actual number of characters written into <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-414">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetChars%2A>、結果の文字を格納するには、呼び出す、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-414">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="16a07-415">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-415">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="16a07-416"><xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-416">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-417">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-417">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-418">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-418">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="16a07-419">デコードするバイトの範囲にはバイト順マーク (BOM) が含まれていて、バイト配列が BOM 非対応の型のメソッドによって返される、このメソッドによって返される文字配列内で文字 U + FFFE が含まれます。</span><span class="sxs-lookup"><span data-stu-id="16a07-419">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="16a07-420">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-420">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="16a07-421">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-421">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="16a07-422">この場合、または使用して、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="16a07-422">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-423">次の例では、<xref:System.Text.UTF8Encoding.GetChars%2A>メソッドをバイト配列内の要素の範囲をデコードし、結果を文字配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="16a07-423">The following example uses the <xref:System.Text.UTF8Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-424">
            <paramref name="bytes" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-424">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16a07-425">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-425">-or-</span>
          </span>
          <span data-ttu-id="16a07-426">
            <paramref name="chars" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-426">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-427">
            <paramref name="byteIndex" />、<paramref name="byteCount" />、または <paramref name="charIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-427">
              <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="16a07-428">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-428">-or-</span>
          </span>
          <span data-ttu-id="16a07-429">
            <paramref name="byteindex" /> および <paramref name="byteCount" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-429">
              <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="16a07-430">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-430">-or-</span>
          </span>
          <span data-ttu-id="16a07-431">
            <paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-431">
              <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-432">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-432">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="16a07-433">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-433">-or-</span>
          </span>
          <span data-ttu-id="16a07-434">
            <paramref name="chars" /> には、<paramref name="charIndex" /> から配列の末尾までに十分なサイズがなく、結果の文字を格納できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-434">
              <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="16a07-435">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-435">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-436">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-436">-and-</span>
          </span>
          <span data-ttu-id="16a07-437">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-437">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF8Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16a07-438">UTF-8 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-438">Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-439">UTF-8 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-439">A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-440"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドと同様の方法で、文字のシーケンシャル ブロックにバイトのシーケンシャル ブロックを変換する、<xref:System.Text.UTF8Encoding.GetChars%2A>このクラスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-440">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF8Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="16a07-441">ただし、<xref:System.Text.Decoder>のブロックをまたぐバイト シーケンスが正しくデコードするための呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="16a07-441">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="16a07-442"><xref:System.Text.Decoder>もデータ ブロックの末尾にある後続バイトが保持され、[次へ] のデコード操作で末尾のバイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="16a07-442">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="16a07-443">そのため、<xref:System.Text.UTF8Encoding.GetDecoder%2A>と<xref:System.Text.UTF8Encoding.GetEncoder%2A>は完全なデータ ストリームではなくデータのブロックを頻繁にこれらの操作を処理するためにネットワーク転送と、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="16a07-443">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="16a07-444">エラーの検出が有効なかどうか、つまり、`throwOnInvalidCharacters`にコンス トラクターのパラメーターが設定されている`true`でエラーの検出が有効にも、<xref:System.Text.Decoder>このメソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-444">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="16a07-445">エラー検出が有効に無効なシーケンスが発生した場合は、デコーダーの状態が定義されていないと、処理を停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-445">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-446">次の例では、 <xref:System.Text.UTF8Encoding.GetDecoder%2A> utf-8 デコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="16a07-446">The following example uses the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method to obtain a UTF-8 decoder.</span></span> <span data-ttu-id="16a07-447">デコーダーでは、文字のシーケンスにバイト シーケンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="16a07-447">The decoder converts a sequence of bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md">
          <span data-ttu-id="16a07-448">エンコーディングの理解</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-448">Understanding Encodings</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF8Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16a07-449">Unicode 文字のシーケンスを UTF-8 でエンコードされたバイト シーケンスに変換するエンコーダーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-449">Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-450">Unicode 文字のシーケンスを UTF-8 でエンコードされたバイト シーケンスに変換する <see cref="T:System.Text.Encoder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-450">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-451"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドと同様の方法で、バイトのブロックをシーケンシャルに文字のシーケンシャル ブロックを変換する、<xref:System.Text.UTF8Encoding.GetBytes%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-451">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF8Encoding.GetBytes%2A> method.</span></span> <span data-ttu-id="16a07-452">ただし、<xref:System.Text.Encoder>のブロックをまたぐ文字シーケンスを正しくエンコードすることができますので、呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="16a07-452">However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="16a07-453"><xref:System.Text.Encoder>も末尾の保持のデータ ブロックの末尾に文字し、末尾の文字を次のエンコードの操作に使用されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-453">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="16a07-454">たとえば、データ ブロック上位サロゲートで終了し、[次へ] のデータ ブロックに一致する下位サロゲートがあります。</span><span class="sxs-lookup"><span data-stu-id="16a07-454">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="16a07-455">そのため、<xref:System.Text.UTF8Encoding.GetDecoder%2A>と<xref:System.Text.UTF8Encoding.GetEncoder%2A>は完全なデータ ストリームではなくデータのブロックを頻繁にこれらの操作を処理するためにネットワーク転送と、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="16a07-455">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="16a07-456">エラーの検出が有効なかどうか、つまり、`throwOnInvalidCharacters`にコンス トラクターのパラメーターが設定されている`true`でエラーの検出が有効にも、<xref:System.Text.Encoder>このメソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-456">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method.</span></span> <span data-ttu-id="16a07-457">エラー検出が有効に無効なシーケンスが発生した場合は、エンコーダーの状態が定義されていないと、処理を停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-457">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-458">次の例では、<xref:System.Text.UTF8Encoding.GetEncoder%2A>でエンコードされたバイトのシーケンスを文字のシーケンスを utf-8 に変換するエンコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="16a07-458">The following example uses the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-8 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md">
          <span data-ttu-id="16a07-459">エンコーディングの理解</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-459">Understanding Encodings</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF8Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16a07-460">現在のインスタンスのハッシュ コードを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-460">Returns the hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-461">現在のインスタンスのハッシュ コード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-461">The hash code for the current instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="16a07-462">次の例では、<xref:System.Text.UTF8Encoding.GetHashCode%2A>のハッシュ コードを返すメソッドを<xref:System.Text.UTF8Encoding>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="16a07-462">The following example uses the <xref:System.Text.UTF8Encoding.GetHashCode%2A> method to return a hash code for <xref:System.Text.UTF8Encoding> instances.</span></span> <span data-ttu-id="16a07-463">このメソッドによって返されるハッシュ コードが作成するために使用するコンス トラクターに依存している通知、<xref:System.Text.UTF8Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="16a07-463">Notice that the hash code returned by this method depends on the constructor used to create the <xref:System.Text.UTF8Encoding> object.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CPP/gethashcode-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CS/gethashcode-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/VB/gethashcode-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF8Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">
          <span data-ttu-id="16a07-464">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-464">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-465">指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-465">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-466">指定した文字数をエンコードすることによって生成される最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-466">The maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-467">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-467">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="16a07-468">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-468">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="16a07-469"><xref:System.Text.UTF8Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-469">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-470"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 現在選択されているは、最悪のケースを含め、最悪の番号は、<xref:System.Text.EncoderFallback>します。</span><span class="sxs-lookup"><span data-stu-id="16a07-470"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="16a07-471">フォールバックが大きくなる可能性の文字列で選択されている場合<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>大きな値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="16a07-471">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="16a07-472">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="16a07-472">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="16a07-473">大きな文字列の場合は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでのエラーのキャッチを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-473">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="16a07-474">使用して、別のアプローチを検討する可能性がありますも<xref:System.Text.UTF8Encoding.GetByteCount%2A>または<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="16a07-474">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="16a07-475">たとえば、英語とその他の多くの言語でテキストに文字を表現する utf-8 バイトを 1 つだけ多くの場合、必要がありますが、によって返される数<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>変換される文字列はで構成されることの文字だけを各可能性を考慮する必要があります4 バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="16a07-475">For example, text in English and many other languages often needs only one UTF-8 byte to represent a character, but the number returned by <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has to allow for the possibility that the string to be converted will consist entirely of characters that each require four bytes.</span></span>  
  
 <span data-ttu-id="16a07-476"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 関係を持たない<xref:System.Text.UTF8Encoding.GetChars%2A>します。</span><span class="sxs-lookup"><span data-stu-id="16a07-476"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetChars%2A>.</span></span> <span data-ttu-id="16a07-477">アプリケーションで使用するような関数が必要なかどうか<xref:System.Text.UTF8Encoding.GetChars%2A>、どちらを使用する<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="16a07-477">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetChars%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16a07-478">`GetMaxByteCount(N)` 同じ値とは限りません`N* GetMaxByteCount(1)`します。</span><span class="sxs-lookup"><span data-stu-id="16a07-478">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-479">次の例では、<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>指定数の文字をエンコードするために必要なバイトの最大数を返します。</span><span class="sxs-lookup"><span data-stu-id="16a07-479">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-480">
            <paramref name="charCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-480">
              <paramref name="charCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="16a07-481">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-481">-or-</span>
          </span>
          <span data-ttu-id="16a07-482">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-482">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="16a07-483">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-483">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-484">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-484">-and-</span>
          </span>
          <span data-ttu-id="16a07-485">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-485">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF8Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">
          <span data-ttu-id="16a07-486">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-486">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-487">指定したバイト数をデコードすることによって生成される最大文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-487">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-488">指定したバイト数をデコードすることによって生成される最大文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-488">The maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-489">必要な正確な配列のサイズを計算する<xref:System.Text.UTF8Encoding.GetChars%2A>を呼び出し、結果の文字を格納する、<xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-489">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="16a07-490">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-490">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="16a07-491"><xref:System.Text.UTF8Encoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="16a07-491">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="16a07-492"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 現在選択されているは、最悪のケースを含め、最悪の番号は、<xref:System.Text.DecoderFallback>します。</span><span class="sxs-lookup"><span data-stu-id="16a07-492"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="16a07-493">フォールバックが大きくなる可能性の文字列で選択されている場合<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>大きな値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="16a07-493">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="16a07-494">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="16a07-494">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="16a07-495">大きな文字列の場合は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでのエラーのキャッチを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-495">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span>  <span data-ttu-id="16a07-496">使用して、別のアプローチを検討する可能性がありますも<xref:System.Text.UTF8Encoding.GetCharCount%2A>または<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="16a07-496">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetCharCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="16a07-497"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 関係を持たない<xref:System.Text.UTF8Encoding.GetBytes%2A>します。</span><span class="sxs-lookup"><span data-stu-id="16a07-497"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="16a07-498">アプリケーションで使用するような関数が必要なかどうか<xref:System.Text.UTF8Encoding.GetBytes%2A>、どちらを使用する<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="16a07-498">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16a07-499">`GetMaxCharCount(N)` 同じ値とは限りません`N* GetMaxCharCount(1)`します。</span><span class="sxs-lookup"><span data-stu-id="16a07-499">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-500">次の例では、<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>指定したバイト数をデコードすることによって生成される最大文字数を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-500">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-501">
            <paramref name="byteCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-501">
              <paramref name="byteCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="16a07-502">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-502">-or-</span>
          </span>
          <span data-ttu-id="16a07-503">結果のバイト数が、整数として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-503">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="16a07-504">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-504">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-505">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-505">-and-</span>
          </span>
          <span data-ttu-id="16a07-506">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-506">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="uTF8Encoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16a07-507">
            <see cref="T:System.Text.UTF8Encoding" /> エンコード オブジェクトが UTF-8 形式でエンコードされた Unicode バイト順マークを提供するように構成されている場合、そのようなマークが返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-507">Returns a Unicode byte order mark encoded in UTF-8 format, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-508">
            <see cref="T:System.Text.UTF8Encoding" /> エンコード オブジェクトが Unicode バイト順マークを提供するように構成されている場合、そうしたマークが格納されているバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-508">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span>
          </span>
          <span data-ttu-id="16a07-509">それ以外の場合、このメソッドは長さがゼロのバイト配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-509">Otherwise, this method returns a zero-length byte array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-510"><xref:System.Text.UTF8Encoding>オブジェクトが、プリアンブルでは、バイト配列であり、エンコードの処理に起因するバイトのシーケンスに付けることができますを提供します。</span><span class="sxs-lookup"><span data-stu-id="16a07-510">The <xref:System.Text.UTF8Encoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes that result from the encoding process.</span></span> <span data-ttu-id="16a07-511">バイト オーダー マーク (コード ポイント U+FEFF) でエンコードされたバイトのシーケンスを付けるには、バイト順と変換形式、または UTF デコーダーことができます。</span><span class="sxs-lookup"><span data-stu-id="16a07-511">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="16a07-512">Unicode バイト順マーク (BOM) が 0xEF としてシリアル化 0xBB 0xBF します。</span><span class="sxs-lookup"><span data-stu-id="16a07-512">The Unicode byte order mark (BOM) is serialized as 0xEF 0xBB 0xBF.</span></span> <span data-ttu-id="16a07-513">必要があり、utf-8 の BOM の使用をお勧めします。 どちらも、Unicode 規格がストリームにエンコードされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="16a07-513">Note that the Unicode Standard neither requires nor recommends the use of a BOM for UTF-8 encoded streams.</span></span>  
  
 <span data-ttu-id="16a07-514">インスタンス化することができます、<xref:System.Text.UTF8Encoding>オブジェクト<xref:System.Text.UTF8Encoding.GetPreamble%2A>メソッドは、次の方法で有効な BOM を返します。</span><span class="sxs-lookup"><span data-stu-id="16a07-514">You can instantiate a <xref:System.Text.UTF8Encoding> object whose <xref:System.Text.UTF8Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="16a07-515">取得することによって、<xref:System.Text.UTF8Encoding>によって返されるオブジェクト、<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="16a07-515">By retrieving the <xref:System.Text.UTF8Encoding> object returned by the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="16a07-516">呼び出すことによって、<xref:System.Text.UTF8Encoding>を持つコンス トラクター、`encoderShouldEmitUTF8Identifier`パラメーターとその値に設定を設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="16a07-516">By calling a <xref:System.Text.UTF8Encoding> constructor with a `encoderShouldEmitUTF8Identifier` parameter and setting its value set to `true`.</span></span>  
  
 <span data-ttu-id="16a07-517">他のすべての<xref:System.Text.UTF8Encoding>オブジェクトの有効な BOM ではなく、空の配列を返すに構成します。</span><span class="sxs-lookup"><span data-stu-id="16a07-517">All other <xref:System.Text.UTF8Encoding> objects are configured to return an empty array rather than a valid BOM.</span></span>  
  
 <span data-ttu-id="16a07-518">タグ付けされていないか、不適切なタグが付けられた web などデータまたはおランダムなテキスト ファイルがありませんでした国際的な懸念事項、BOM は、それ以外の場合、エンコードへの参照が失われているファイルのエンコーディングの特定の id にほぼを提供します。</span><span class="sxs-lookup"><span data-stu-id="16a07-518">The BOM provide nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="16a07-519">データが一貫して適切なタグとは、多くの場合、ユーザーの問題を回避できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-519">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="16a07-520">エンコードの種類を提供する標準では、BOM は、少し冗長です。</span><span class="sxs-lookup"><span data-stu-id="16a07-520">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="16a07-521">ただし、server を正しくエンコード ヘッダーを送信するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="16a07-521">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="16a07-522">または、そのできますフォールバックとして、エンコードを紛失するそれ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="16a07-522">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="16a07-523">BOM を使用するいくつかのデメリットがあります。</span><span class="sxs-lookup"><span data-stu-id="16a07-523">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="16a07-524">たとえば、BOM を使用するデータベース フィールドを制限する方法を知ることは困難なできます。</span><span class="sxs-lookup"><span data-stu-id="16a07-524">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="16a07-525">ファイルの連結問題になる可能性も、たとえば、ファイルを結合するように、不要な文字データの途中で終了できるようにします。</span><span class="sxs-lookup"><span data-stu-id="16a07-525">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="16a07-526">いくつかの短所にもかかわらずただし、部品表の使用が強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="16a07-526">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="16a07-527">バイト オーダーとバイト順マークの詳細については、Unicode 標準を参照してください、 [Unicode ホーム ページ](https://go.microsoft.com/fwlink/?LinkId=37123)します。</span><span class="sxs-lookup"><span data-stu-id="16a07-527">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="16a07-528">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリームの先頭プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="16a07-528">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="16a07-529">なお、<xref:System.Text.UTF8Encoding.GetBytes%2A>メソッドでエンコードされたバイトのシーケンスに BOM が付加しない; 開発者の責任には、適切なバイト ストリームの先頭の BOM を指定します。</span><span class="sxs-lookup"><span data-stu-id="16a07-529">Note that the <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-530">次の例では、 <xref:System.Text.UTF8Encoding.GetPreamble%2A> utf-8 形式でエンコードされたマークで注文を Unicode のバイトを返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-530">The following example uses the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to return the Unicode byte order mark encoded in UTF-8 format.</span></span> <span data-ttu-id="16a07-531">注意の既定のコンス トラクター <xref:System.Text.UTF8Encoding> preamble を行いません。</span><span class="sxs-lookup"><span data-stu-id="16a07-531">Notice that the default constructor for <xref:System.Text.UTF8Encoding> does not provide a preamble.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="16a07-532">次の例では、2 つのインスタンス化します<xref:System.Text.UTF8Encoding>オブジェクト、最初のパラメーターなしで呼び出すことによって<xref:System.Text.UTF8Encoding.%23ctor>コンス トラクターは、呼び出すことによって、BOM や、2 つ目を提供しない、<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29>コンス トラクターをその`encoderShouldEmitUTF8Identifier`引数に設定`true`.</span><span class="sxs-lookup"><span data-stu-id="16a07-532">The following example instantiates two <xref:System.Text.UTF8Encoding> objects, the first by calling the parameterless <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not provide a BOM, and the second by calling the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29> constructor with its `encoderShouldEmitUTF8Identifier` argument set to `true`.</span></span> <span data-ttu-id="16a07-533">呼び出して、 <xref:System.Text.UTF8Encoding.GetPreamble%2A> UF8 でエンコードされた文字列を書き込む前に、ファイルに BOM を書き込む方法。</span><span class="sxs-lookup"><span data-stu-id="16a07-533">It then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UF8-encoded string.</span></span> <span data-ttu-id="16a07-534">出力例では、元のコンソールに表示されます、2 つ目のエンコーダーからのバイトを保存するファイルが最初よりもより多くの容量を 3 つあります。</span><span class="sxs-lookup"><span data-stu-id="16a07-534">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/cs/getpreamble1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/vb/getpreamble1.vb#1)]  
  
 <span data-ttu-id="16a07-535">使用して、ファイルを比較することもできます、`fc`するか、コンソール ウィンドウでコマンドを含む 16 進表示モードをテキスト エディターでファイルを検査できます。</span><span class="sxs-lookup"><span data-stu-id="16a07-535">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="16a07-536">ファイルが utf-8 をサポートするエディターで開かれるときに、BOM が表示されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="16a07-536">Note that when the file is opened in an editor that supports UTF-8, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF8Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="16a07-537">デコード対象のバイト シーケンスが格納されたバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-537">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="16a07-538">デコードする最初のバイトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-538">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="16a07-539">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-539">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16a07-540">バイト配列に格納されているある範囲のバイトを文字列にデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-540">Decodes a range of bytes from a byte array into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16a07-541">指定したバイト シーケンスのデコード結果が格納されている <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-541">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16a07-542">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="16a07-542">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="16a07-543">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="16a07-543">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="16a07-544">デコードするバイトの範囲にはバイト順マーク (BOM) が含まれていて、バイト配列が BOM 非対応の型のメソッドによって返される、このメソッドによって返される文字配列内で文字 U + FFFE が含まれます。</span><span class="sxs-lookup"><span data-stu-id="16a07-544">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="16a07-545">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-545">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="16a07-546">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="16a07-546">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="16a07-547">この場合、または使用して、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF8Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF8Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="16a07-547">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16a07-548">次の例では、呼び出すことによって、配列を初期化します、<xref:System.Text.UTF8Encoding.GetByteCount%2A>正確にエンコードされた文字列とバイト順マーク (BOM) のサイズを追加し、必要なのバイト数を調べます。</span><span class="sxs-lookup"><span data-stu-id="16a07-548">The following example initializes an array by calling the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="16a07-549">例を呼び出して、<xref:System.Text.UTF8Encoding.GetPreamble%2A>は BOM を呼び出す前に配列を格納する方法、<xref:System.Text.UTF8Encoding.GetBytes%2A>配列にエンコードされたバイトを格納するメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-549">The example then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="16a07-550">例を呼び出して、<xref:System.Text.UTF8Encoding.GetString%2A>文字列をデコードするメソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-550">The example then calls the <xref:System.Text.UTF8Encoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="16a07-551">ここでデコードされた文字列が異なることから元の文字列では、16 ビットのバイト順マーク U+FFFD で始まっているので注意してください。</span><span class="sxs-lookup"><span data-stu-id="16a07-551">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="16a07-552">つまり、2 つの文字列が、等しくないものとして比較されます、文字列が出力の場合、BOM は置換文字として表示されることと"?"。</span><span class="sxs-lookup"><span data-stu-id="16a07-552">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="16a07-553">削除するには、文字列の先頭の BOM を呼び出すことができます、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="16a07-553">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16a07-554">
            <paramref name="bytes" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-554">
              <paramref name="bytes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16a07-555">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-555">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="16a07-556">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-556">-or-</span>
          </span>
          <span data-ttu-id="16a07-557">
            <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-557">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16a07-558">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-558">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="16a07-559">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-559">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="16a07-560">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-560">-and-</span>
          </span>
          <span data-ttu-id="16a07-561">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16a07-561">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>