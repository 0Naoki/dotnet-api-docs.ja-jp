<Type Name="UTF7Encoding" FullName="System.Text.UTF7Encoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d0b556594ed8d0b6c2a2f8346954742cb200783" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52214288" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UTF7Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF7Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF7Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF7Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF7Encoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF7Encoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b7328-101">Unicode 文字の UTF-7 エンコードを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b7328-101">Represents a UTF-7 encoding of Unicode characters.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-102">エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="b7328-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="b7328-103">デコードは、Unicode 文字のセットにエンコードされたバイトのシーケンスを変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="b7328-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="b7328-104">Utf-7 エンコード 7 ビット ASCII 文字のシーケンスとして Unicode 文字を表します。</span><span class="sxs-lookup"><span data-stu-id="b7328-104">The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters.</span></span> <span data-ttu-id="b7328-105">このエンコードは、特定のプロトコルが必要ですが、多くの場合、電子メールまたはニュースグループのプロトコルをサポートします。</span><span class="sxs-lookup"><span data-stu-id="b7328-105">This encoding supports certain protocols for which it is required, most often email or newsgroup protocols.</span></span> <span data-ttu-id="b7328-106">Utf-7 は特に安全性や、堅牢なので、ほとんどの最新のシステムでは、8 ビット エンコーディング utf-8 が優先 utf-7 に通常必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7328-106">Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-107"><xref:System.Text.UTF7Encoding> エラーの検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="b7328-107"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="b7328-108">セキュリティ上の理由から、アプリケーションを使用する必要があります<xref:System.Text.UTF8Encoding>、 <xref:System.Text.UnicodeEncoding>、または<xref:System.Text.UTF32Encoding>し、エラーの検出を有効にします。</span><span class="sxs-lookup"><span data-stu-id="b7328-108">For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 <span data-ttu-id="b7328-109">UTFs とでサポートされているその他のエンコーディングの詳細については<xref:System.Text>を参照してください[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)します。</span><span class="sxs-lookup"><span data-stu-id="b7328-109">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="b7328-110"><xref:System.Text.UTF7Encoding.GetByteCount%2A>メソッドでは、バイト数が、Unicode 文字のセットがエンコードされるかを判断します。 および<xref:System.Text.UTF7Encoding.GetBytes%2A>メソッドは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b7328-110">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="b7328-111">同様に、<xref:System.Text.UTF7Encoding.GetCharCount%2A>メソッドでは、文字数が発生するシーケンス (バイト単位) をデコードするかを判断します。 および<xref:System.Text.UTF7Encoding.GetChars%2A>と<xref:System.Text.UTF7Encoding.GetString%2A>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="b7328-111">Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="b7328-112"><xref:System.Text.UTF7Encoding> Windows コード ページ 65000 に対応します。</span><span class="sxs-lookup"><span data-stu-id="b7328-112"><xref:System.Text.UTF7Encoding> corresponds to the Windows code page 65000.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-113">オブジェクトはシリアル化され、異なるバージョンの .NET Framework を使用して逆シリアル化する場合、utf-7 でエンコードされたオブジェクトの状態は保持されません。</span><span class="sxs-lookup"><span data-stu-id="b7328-113">The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-114">次のコード例は、使用する方法を示します、<xref:System.Text.UTF7Encoding>を Unicode 文字の文字列をエンコードし、バイト配列内に格納します。</span><span class="sxs-lookup"><span data-stu-id="b7328-114">The following code example demonstrates how to use a <xref:System.Text.UTF7Encoding> to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="b7328-115">バイト配列を文字列にデコード時にデータがない失われることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b7328-115">Notice that when the byte array is decoded back to a string, no data is lost.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF7Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/VB/snippet.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md">
      <span data-ttu-id="b7328-116">エンコーディングの理解</span>
      <span class="sxs-lookup">
        <span data-stu-id="b7328-116">Understanding Encodings</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b7328-117">
            <see cref="T:System.Text.UTF7Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-117">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF7Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF7Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7328-118">
            <see cref="T:System.Text.UTF7Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-118">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-119">このコンス トラクターは、省略可能な文字が許可されないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="b7328-119">This constructor creates an instance that does not allow optional characters.</span></span> <span data-ttu-id="b7328-120">呼び出す、<xref:System.Text.UTF7Encoding.%23ctor%2A>コンス トラクターの呼び出しと同じですが、<xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType>を受け取るコンス トラクター、`allowOptionals`パラメーターと指定する`false`パラメーターにします。</span><span class="sxs-lookup"><span data-stu-id="b7328-120">Calling the <xref:System.Text.UTF7Encoding.%23ctor%2A> constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType> constructor that takes an `allowOptionals` parameter and specifying `false` for that parameter.</span></span>  
  
 <span data-ttu-id="b7328-121">インスタンスは、省略可能な文字を許可している場合は、Unicode コード ポイントが変更された 64 文字の代わりに対応する省略可能な文字でエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="b7328-121">If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.</span></span> <span data-ttu-id="b7328-122">省略可能な文字は感嘆符 ("!")、円記号 ("\\")、垂直線 ("&#124;")、二重引用符 (""")、番号記号 (「#」)、ドル記号 (「$」)、パーセント記号 (「%」)、アンパサンド ("&")、アスタリスク ("\*")、セミコロン (「;」)、左山かっこ ("\<")、右山かっこ (">")、左中かっこ ("{")、右中かっこ ("}")、左角かっこ ("[")、右角かっこ ("]")、アット マーク (「=」)、等号 (=) ("@")、アクサン シルコンフレックス ("^")、アンダー スコア (「_」)、およびアクサンアクセント ("'")。</span><span class="sxs-lookup"><span data-stu-id="b7328-122">The optional characters are exclamation point ("!"), backward slash ("\\"), vertical line ("&#124;"), double quote ("""), number sign ("#"), dollar sign ("$"), percent sign ("%"), ampersand ("&"), asterisk ("\*"), semicolon (";"), left angle bracket ("\<"), right angle bracket (">"), left curly bracket ("{"), right curly bracket ("}"), left square bracket ("["), right square bracket ("]"), equal sign ("="), at sign ("@"), circumflex accent ("^"), underscore ("_"), and grave accent ("\`").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-123"><xref:System.Text.UTF7Encoding> エラーの検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="b7328-123"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="b7328-124">使用するセキュリティ上の理由から、アプリケーションの推奨<xref:System.Text.UTF8Encoding>、 <xref:System.Text.UnicodeEncoding>、または<xref:System.Text.UTF32Encoding>し、エラーの検出を有効にします。</span><span class="sxs-lookup"><span data-stu-id="b7328-124">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-125">次のコード例は、新たに作成する方法を示します<xref:System.Text.UTF7Encoding>インスタンスし、エンコーディングの名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="b7328-125">The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF7Encoding (bool allowOptionals);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool allowOptionals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (allowOptionals As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF7Encoding(bool allowOptionals);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF7Encoding : bool -&gt; System.Text.UTF7Encoding" Usage="new System.Text.UTF7Encoding allowOptionals" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="allowOptionals" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowOptionals">
          <span data-ttu-id="b7328-126">省略文字を許可するよう指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-126">
              <see langword="true" /> to specify that optional characters are allowed; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-127">
            <see cref="T:System.Text.UTF7Encoding" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-127">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span>
          </span>
          <span data-ttu-id="b7328-128">パラメーターでは、省略可能な文字を許可するかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-128">A parameter specifies whether to allow optional characters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-129">インスタンスは、省略可能な文字を許可している場合は、Unicode コード ポイントが変更された 64 文字の代わりに対応する省略可能な文字でエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="b7328-129">If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.</span></span> <span data-ttu-id="b7328-130">省略可能な文字は感嘆符 ("!")、円記号 ("\\")、垂直線 ("&#124;")、二重引用符 (""")、番号記号 (「#」)、ドル記号 (「$」)、パーセント記号 (「%」)、アンパサンド ("&")、アスタリスク ("\*")、セミコロン (「;」)、左山かっこ ("\<")、右山かっこ (">")、左中かっこ ("{")、右中かっこ ("}")、左角かっこ ("[")、右角かっこ ("]")、アット マーク (「=」)、等号 (=) ("@")、アクサン シルコンフレックス ("^")、アンダー スコア (「_」)、およびアクサンアクセント ("'")。</span><span class="sxs-lookup"><span data-stu-id="b7328-130">The optional characters are exclamation point ("!"), backward slash ("\\"), vertical line ("&#124;"), double quote ("""), number sign ("#"), dollar sign ("$"), percent sign ("%"), ampersand ("&"), asterisk ("\*"), semicolon (";"), left angle bracket ("\<"), right angle bracket (">"), left curly bracket ("{"), right curly bracket ("}"), left square bracket ("["), right square bracket ("]"), equal sign ("="), at sign ("@"), circumflex accent ("^"), underscore ("_"), and grave accent ("\`").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-131"><xref:System.Text.UTF7Encoding> エラーの検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="b7328-131"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="b7328-132">使用するセキュリティ上の理由から、アプリケーションの推奨<xref:System.Text.UTF8Encoding>、 <xref:System.Text.UnicodeEncoding>、または<xref:System.Text.UTF32Encoding>し、エラーの検出を有効にします。</span><span class="sxs-lookup"><span data-stu-id="b7328-132">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-133">次のコード例は、新たに作成する方法を示します<xref:System.Text.UTF7Encoding>省略可能な文字を許可するインスタンス。</span><span class="sxs-lookup"><span data-stu-id="b7328-133">The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance that allows optional characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF7Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="b7328-134">現在の <see cref="T:System.Text.UTF7Encoding" /> オブジェクトと比較するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-134">An object to compare to the current <see cref="T:System.Text.UTF7Encoding" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-135">指定したオブジェクトが、現在の <see cref="T:System.Text.UTF7Encoding" /> オブジェクトと等しいかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-135">Gets a value indicating whether the specified object is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-136">
            <paramref name="value" /> が <see cref="T:System.Text.UTF7Encoding" /> オブジェクトで、現在の <see cref="T:System.Text.UTF7Encoding" /> オブジェクトに等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-136">
              <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Text.UTF7Encoding" /> object and is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-137">2 つ<xref:System.Text.UTF7Encoding>オブジェクトが等しいのどちらかを許可する場合または省略可能な文字は、許可しない場合は、基になる<xref:System.Text.Encoding.EncoderFallback%2A>と<xref:System.Text.Encoding.DecoderFallback%2A>プロパティが等しい。</span><span class="sxs-lookup"><span data-stu-id="b7328-137">Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:System.Text.UTF7Encoding.#ctor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b7328-138">文字のセットをエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-138">Calculates the number of bytes produced by encoding a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF7Encoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="b7328-139">エンコード対象の文字のセットを格納している <see cref="T:System.String" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-139">The <see cref="T:System.String" /> object containing the set of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-140">指定した <see cref="T:System.String" /> オブジェクト内の文字をエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-140">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-141">指定した文字をエンコードすることによって生成されるバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-141">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-142">計算する正確な配列のサイズを<xref:System.Text.UTF7Encoding.GetBytes%2A>アプリケーションは、結果のバイトを格納する必要があります<xref:System.Text.UTF7Encoding.GetByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-142">To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b7328-143">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-143">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="b7328-144"><xref:System.Text.UTF7Encoding.GetByteCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-144">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-145">次のコード例は、使用する方法を示します、<xref:System.Text.UTF7Encoding.GetByteCount%2A>文字配列をエンコードするために必要なバイト数を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="b7328-145">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-146">
            <paramref name="s" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-146">
              <paramref name="s" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-147">結果のバイト数が、int として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-147">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="b7328-148">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-148">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="b7328-149">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-149">-and-</span>
          </span>
          <span data-ttu-id="b7328-150">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-150">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF7Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="b7328-151">エンコードする最初の文字へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-151">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b7328-152">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-152">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-153">指定した文字ポインターで始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-153">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-154">指定した文字をエンコードすることによって生成されるバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-154">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-155">計算する正確な配列のサイズを<xref:System.Text.UTF7Encoding.GetBytes%2A>アプリケーションは、結果のバイトを格納する必要があります<xref:System.Text.UTF7Encoding.GetByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-155">To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b7328-156">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-156">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="b7328-157"><xref:System.Text.UTF7Encoding.GetByteCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-157">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-158">
            <paramref name="chars" /> が <see langword="null" /> (Visual Basic .NET の場合は <see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-158">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" /> in Visual Basic .NET).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-159">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-159">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="b7328-160">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-160">-or-</span>
          </span>
          <span data-ttu-id="b7328-161">結果のバイト数が、int として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-161">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="b7328-162">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-162">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="b7328-163">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-163">-and-</span>
          </span>
          <span data-ttu-id="b7328-164">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-164">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="b7328-165">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-165">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="b7328-166">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-166">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF7Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="b7328-167">エンコード対象の文字のセットを格納している文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-167">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="b7328-168">エンコードする最初の文字のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-168">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b7328-169">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-169">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-170">指定した文字配列から文字のセットをエンコードすることによって生成されるバイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-170">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-171">指定した文字をエンコードすることによって生成されるバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-171">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-172">必要な正確な配列のサイズを計算する<xref:System.Text.UTF7Encoding.GetBytes%2A>アプリケーションが使用するには、結果のバイトを格納するには、<xref:System.Text.UTF7Encoding.GetByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-172">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b7328-173">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-173">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="b7328-174"><xref:System.Text.UTF7Encoding.GetByteCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-174">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-175">次のコード例は、使用する方法を示します、 <xref:System.Text.UTF7Encoding.GetByteCount%2A> Unicode 文字の配列をエンコードするために必要なバイト数を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="b7328-175">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode an array of Unicode characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-176">
            <paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-176">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-177">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-177">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="b7328-178">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-178">-or-</span>
          </span>
          <span data-ttu-id="b7328-179">
            <paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-179">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="b7328-180">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-180">-or-</span>
          </span>
          <span data-ttu-id="b7328-181">結果のバイト数が、int として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-181">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="b7328-182">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-182">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="b7328-183">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-183">-and-</span>
          </span>
          <span data-ttu-id="b7328-184">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-184">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b7328-185">文字のセットをバイト シーケンスにエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-185">Encodes a set of characters into a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF7Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="b7328-186">エンコードする最初の文字へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-186">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="b7328-187">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-187">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="b7328-188">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-188">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="b7328-189">書き込む最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-189">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-190">指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-190">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-191">
            <paramref name="bytes" /> によって示される位置に書き込まれた実際のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-191">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-192">必要な正確な配列のサイズを計算する<xref:System.Text.UTF7Encoding.GetBytes%2A>アプリケーションが使用するには、結果のバイトを格納するには、<xref:System.Text.UTF7Encoding.GetByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-192">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b7328-193">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-193">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="b7328-194"><xref:System.Text.UTF7Encoding.GetByteCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-194">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b7328-195">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b7328-195">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="b7328-196">ここでは、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションで使用するか、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF7Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF7Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b7328-196">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-197"><xref:System.Text.UTF7Encoding> エラーの検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="b7328-197"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="b7328-198">無効な文字は、変更された 64 文字としてエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="b7328-198">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="b7328-199">使用するセキュリティ上の理由から、アプリケーションの推奨<xref:System.Text.UTF8Encoding>、 <xref:System.Text.UnicodeEncoding>、または<xref:System.Text.UTF32Encoding>し、エラーの検出を有効にします。</span><span class="sxs-lookup"><span data-stu-id="b7328-199">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-200">
            <paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-200">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="b7328-201">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-201">-or-</span>
          </span>
          <span data-ttu-id="b7328-202">
            <paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-202">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-203">
            <paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-203">
              <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b7328-204">
            <paramref name="byteCount" /> が結果のバイト数より少なくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-204">
              <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="b7328-205">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-205">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="b7328-206">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-206">-and-</span>
          </span>
          <span data-ttu-id="b7328-207">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-207">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="b7328-208">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-208">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="b7328-209">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-209">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF7Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="b7328-210">エンコード対象の文字のセットを格納している文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-210">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="b7328-211">エンコードする最初の文字のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-211">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="b7328-212">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-212">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="b7328-213">結果のバイト シーケンスを格納するバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-213">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="b7328-214">結果のバイト シーケンスを書き込む開始位置のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-214">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-215">指定した文字配列に格納されている文字のセットを指定したバイト配列にエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-215">Encodes a set of characters from the specified character array into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-216">
            <paramref name="bytes" /> に書き込まれた実際のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-216">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-217">必要な正確な配列のサイズを計算する<xref:System.Text.UTF7Encoding.GetBytes%2A>アプリケーションが使用するには、結果のバイトを格納するには、<xref:System.Text.UTF7Encoding.GetByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-217">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b7328-218">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-218">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="b7328-219"><xref:System.Text.UTF7Encoding.GetByteCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-219">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b7328-220">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b7328-220">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="b7328-221">ここでは、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションで使用するか、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF7Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF7Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b7328-221">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-222"><xref:System.Text.UTF7Encoding> エラーの検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="b7328-222"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="b7328-223">無効な文字は、変更された 64 文字としてエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="b7328-223">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="b7328-224">使用するセキュリティ上の理由から、アプリケーションの推奨<xref:System.Text.UTF8Encoding>、 <xref:System.Text.UnicodeEncoding>、または<xref:System.Text.UTF32Encoding>し、エラーの検出を有効にします。</span><span class="sxs-lookup"><span data-stu-id="b7328-224">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-225">次のコード例は、使用する方法を示します、<xref:System.Text.UTF7Encoding.GetBytes%2A>から文字の範囲をエンコードする方法、<xref:System.String>し、バイト配列内の要素の範囲内でエンコードされたバイトを格納します。</span><span class="sxs-lookup"><span data-stu-id="b7328-225">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-226">
            <paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-226">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="b7328-227">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-227">-or-</span>
          </span>
          <span data-ttu-id="b7328-228">
            <paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-228">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-229">
            <paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-229">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="b7328-230">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-230">-or-</span>
          </span>
          <span data-ttu-id="b7328-231">
            <paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-231">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="b7328-232">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-232">-or-</span>
          </span>
          <span data-ttu-id="b7328-233">
            <paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-233">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b7328-234">
            <paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-234">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="b7328-235">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-235">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="b7328-236">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-236">-and-</span>
          </span>
          <span data-ttu-id="b7328-237">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-237">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF7Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="b7328-238">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-238">The <see cref="T:System.String" /> containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="b7328-239">エンコードする最初の文字のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-239">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="b7328-240">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-240">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="b7328-241">結果のバイト シーケンスを格納するバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-241">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="b7328-242">結果のバイト シーケンスを書き込む開始位置のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-242">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-243">指定した <see cref="T:System.String" /> の文字セットを、指定したバイト配列にエンコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-243">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-244">
            <paramref name="bytes" /> に書き込まれた実際のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-244">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-245">必要な正確な配列のサイズを計算する<xref:System.Text.UTF7Encoding.GetBytes%2A>アプリケーションが使用するには、結果のバイトを格納するには、<xref:System.Text.UTF7Encoding.GetByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-245">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b7328-246">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-246">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="b7328-247"><xref:System.Text.UTF7Encoding.GetByteCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-247">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b7328-248">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b7328-248">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="b7328-249">ここでは、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションで使用するか、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF7Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF7Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b7328-249">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-250"><xref:System.Text.UTF7Encoding> エラーの検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="b7328-250"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="b7328-251">無効な文字は、変更された 64 文字としてエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="b7328-251">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="b7328-252">使用するセキュリティ上の理由から、アプリケーションの推奨<xref:System.Text.UTF8Encoding>、 <xref:System.Text.UnicodeEncoding>、または<xref:System.Text.UTF32Encoding>し、エラーの検出を有効にします。</span><span class="sxs-lookup"><span data-stu-id="b7328-252">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-253">次のコード例は、使用する方法を示します、<xref:System.Text.UTF7Encoding.GetBytes%2A>する Unicode 文字配列から要素の範囲をエンコードおよびバイト配列内の要素の範囲内でエンコードされたバイトを格納するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b7328-253">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array, and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-254">
            <paramref name="s" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-254">
              <paramref name="s" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="b7328-255">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-255">-or-</span>
          </span>
          <span data-ttu-id="b7328-256">
            <paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-256">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-257">
            <paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-257">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="b7328-258">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-258">-or-</span>
          </span>
          <span data-ttu-id="b7328-259">
            <paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-259">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="b7328-260">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-260">-or-</span>
          </span>
          <span data-ttu-id="b7328-261">
            <paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-261">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b7328-262">
            <paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-262">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="b7328-263">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-263">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="b7328-264">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-264">-and-</span>
          </span>
          <span data-ttu-id="b7328-265">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-265">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b7328-266">バイト シーケンスをデコードすることによって生成される文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-266">Calculates the number of characters produced by decoding a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF7Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="b7328-267">デコードする最初のバイトへのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-267">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b7328-268">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-268">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-269">指定したバイト ポインターで始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-269">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-270">指定したバイト シーケンスをデコードすることによって生成される文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-270">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-271">必要な正確な配列のサイズを計算する<xref:System.Text.UTF7Encoding.GetChars%2A>を結果の文字を保存する<xref:System.Text.UTF7Encoding.GetCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-271">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b7328-272">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-272">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="b7328-273"><xref:System.Text.UTF7Encoding.GetCharCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-273">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-274">
            <paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-274">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-275">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-275">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="b7328-276">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-276">-or-</span>
          </span>
          <span data-ttu-id="b7328-277">結果の文字数が、int として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-277">The resulting number of characters is greater than the maximum number that can be returned as an int.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="b7328-278">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-278">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="b7328-279">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-279">-and-</span>
          </span>
          <span data-ttu-id="b7328-280">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-280">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="b7328-281">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-281">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="b7328-282">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-282">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="Overload:System.Text.UTF7Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF7Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="b7328-283">デコード対象のバイト シーケンスが格納されたバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-283">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="b7328-284">デコードする最初のバイトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-284">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b7328-285">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-285">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-286">指定したバイト配列からバイト シーケンスをデコードすることによって生成される文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-286">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-287">指定したバイト シーケンスをデコードすることによって生成される文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-287">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-288">必要な正確な配列のサイズを計算する<xref:System.Text.UTF7Encoding.GetChars%2A>を結果の文字を保存する<xref:System.Text.UTF7Encoding.GetCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-288">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b7328-289">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-289">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="b7328-290"><xref:System.Text.UTF7Encoding.GetCharCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-290">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-291">次のコード例は、使用する方法を示します、<xref:System.Text.UTF7Encoding.GetCharCount%2A>バイト配列内の要素の範囲をデコードすることによって生成される文字数を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="b7328-291">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-292">
            <paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-292">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-293">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-293">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="b7328-294">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-294">-or-</span>
          </span>
          <span data-ttu-id="b7328-295">
            <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-295">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="b7328-296">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-296">-or-</span>
          </span>
          <span data-ttu-id="b7328-297">結果の文字数が、int として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-297">The resulting number of characters is greater than the maximum number that can be returned as an int.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="b7328-298">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-298">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="b7328-299">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-299">-and-</span>
          </span>
          <span data-ttu-id="b7328-300">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-300">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Text.UTF7Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b7328-301">バイト シーケンスを文字のセットにデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-301">Decodes a sequence of bytes into a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF7Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="b7328-302">デコードする最初のバイトへのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-302">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="b7328-303">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-303">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="b7328-304">結果の文字セットの書き込みを開始する位置へのポインター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-304">A pointer to the location at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="b7328-305">書き込む文字の最大数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-305">The maximum number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-306">指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-306">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-307">
            <paramref name="chars" /> によって示される位置に書き込まれた実際の文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-307">The actual number of characters written at the location indicated by <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-308">必要な正確な配列のサイズを計算する<xref:System.Text.UTF7Encoding.GetChars%2A>を結果の文字を保存する<xref:System.Text.UTF7Encoding.GetCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-308">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b7328-309">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-309">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="b7328-310"><xref:System.Text.UTF7Encoding.GetCharCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-310">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b7328-311">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b7328-311">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="b7328-312">ここでは、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションで使用するか、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF7Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF7Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b7328-312">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-313"><xref:System.Text.UTF7Encoding> エラーの検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="b7328-313"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="b7328-314">無効なバイトが検出されると、<xref:System.Text.UTF7Encoding>一般に、無効なバイトを生成します。</span><span class="sxs-lookup"><span data-stu-id="b7328-314">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="b7328-315">バイトが 16 進数の 0x7F よりも大きい場合は、バイト値が Unicode 文字に 0 拡張で結果が格納されている、`chars`配列、および任意のシフト シーケンスを終了します。</span><span class="sxs-lookup"><span data-stu-id="b7328-315">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="b7328-316">たとえば、エンコードするバイトが 0x81 の 16 進数である場合は、結果として得られる文字は u+0081 します。</span><span class="sxs-lookup"><span data-stu-id="b7328-316">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="b7328-317">使用するセキュリティ上の理由から、アプリケーションの推奨<xref:System.Text.UTF8Encoding>、 <xref:System.Text.UnicodeEncoding>、または<xref:System.Text.UTF32Encoding>し、エラーの検出を有効にします。</span><span class="sxs-lookup"><span data-stu-id="b7328-317">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-318">
            <paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-318">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="b7328-319">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-319">-or-</span>
          </span>
          <span data-ttu-id="b7328-320">
            <paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-320">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-321">
            <paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-321">
              <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b7328-322">
            <paramref name="charCount" /> が結果の文字数より少なくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-322">
              <paramref name="charCount" /> is less than the resulting number of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="b7328-323">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-323">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="b7328-324">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-324">-and-</span>
          </span>
          <span data-ttu-id="b7328-325">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-325">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="b7328-326">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-326">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="b7328-327">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-327">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF7Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="b7328-328">デコード対象のバイト シーケンスが格納されたバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-328">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="b7328-329">デコードする最初のバイトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-329">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="b7328-330">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-330">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="b7328-331">結果の文字のセットを格納する文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-331">The character array to contain the resulting set of characters.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="b7328-332">結果の文字のセットを書き込む開始位置のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-332">The index at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-333">指定したバイト配列に格納されているバイト シーケンスを指定した文字配列にデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-333">Decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-334">
            <paramref name="chars" /> に書き込まれた実際の文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-334">The actual number of characters written into <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-335">必要な正確な配列のサイズを計算する<xref:System.Text.UTF7Encoding.GetChars%2A>を結果の文字を保存する<xref:System.Text.UTF7Encoding.GetCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-335">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b7328-336">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-336">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="b7328-337"><xref:System.Text.UTF7Encoding.GetCharCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-337">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b7328-338">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b7328-338">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="b7328-339">ここでは、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションで使用するか、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF7Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF7Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b7328-339">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-340"><xref:System.Text.UTF7Encoding> エラーの検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="b7328-340"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="b7328-341">無効なバイトが検出されると、<xref:System.Text.UTF7Encoding>一般に、無効なバイトを生成します。</span><span class="sxs-lookup"><span data-stu-id="b7328-341">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="b7328-342">バイトが 16 進数の 0x7F よりも大きい場合は、バイト値が Unicode 文字に 0 拡張で結果が格納されている、`chars`配列、および任意のシフト シーケンスを終了します。</span><span class="sxs-lookup"><span data-stu-id="b7328-342">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="b7328-343">たとえば、エンコードするバイトが 0x81 の 16 進数である場合は、結果として得られる文字は u+0081 します。</span><span class="sxs-lookup"><span data-stu-id="b7328-343">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="b7328-344">使用するセキュリティ上の理由から、アプリケーションの推奨<xref:System.Text.UTF8Encoding>、 <xref:System.Text.UnicodeEncoding>、または<xref:System.Text.UTF32Encoding>し、エラーの検出を有効にします。</span><span class="sxs-lookup"><span data-stu-id="b7328-344">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-345">次のコード例は、使用する方法を示します、<xref:System.Text.UTF7Encoding.GetChars%2A>メソッドをバイト配列内の要素の範囲をデコードし、結果を文字配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="b7328-345">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-346">
            <paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-346">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="b7328-347">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-347">-or-</span>
          </span>
          <span data-ttu-id="b7328-348">
            <paramref name="chars" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-348">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-349">
            <paramref name="byteIndex" />、<paramref name="byteCount" />、または <paramref name="charIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-349">
              <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="b7328-350">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-350">-or-</span>
          </span>
          <span data-ttu-id="b7328-351">
            <paramref name="byteindex" /> および <paramref name="byteCount" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-351">
              <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="b7328-352">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-352">-or-</span>
          </span>
          <span data-ttu-id="b7328-353">
            <paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-353">
              <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b7328-354">
            <paramref name="chars" /> には、<paramref name="charIndex" /> から配列の末尾までに十分なサイズがなく、結果の文字を格納できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-354">
              <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="b7328-355">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-355">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="b7328-356">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-356">-and-</span>
          </span>
          <span data-ttu-id="b7328-357">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-357">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF7Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7328-358">UTF-7 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-358">Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-359">UTF-7 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換する <see cref="T:System.Text.Decoder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-359">A <see cref="T:System.Text.Decoder" /> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-360"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドと同様の方法で、文字のシーケンシャル ブロックにバイトのシーケンシャル ブロックを変換する、<xref:System.Text.UTF7Encoding.GetChars%2A>このクラスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="b7328-360">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="b7328-361">ただし、<xref:System.Text.Decoder>のブロックをまたぐバイト シーケンスが正しくデコードするための呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="b7328-361">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="b7328-362"><xref:System.Text.Decoder>もデータ ブロックの末尾にある後続バイトが保持され、[次へ] のデコード操作で末尾のバイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="b7328-362">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="b7328-363">そのため、<xref:System.Text.UTF7Encoding.GetDecoder%2A>と<xref:System.Text.UTF7Encoding.GetEncoder%2A>は完全なデータ ストリームではなくデータのブロックを頻繁にこれらの操作を処理するためにネットワーク転送と、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="b7328-363">Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-364">次のコード例は、使用する方法を示します、 <xref:System.Text.UTF7Encoding.GetDecoder%2A> utf-7 を変換するデコーダーを取得するメソッドでエンコードされたバイトの文字のシーケンスにします。</span><span class="sxs-lookup"><span data-stu-id="b7328-364">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method to obtain a decoder to convert the UTF-7 encoded bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md">
          <span data-ttu-id="b7328-365">エンコーディングの理解</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-365">Understanding Encodings</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF7Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7328-366">Unicode 文字のシーケンスを UTF-7 でエンコードされたバイト シーケンスに変換するエンコーダーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-366">Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-367">Unicode 文字のシーケンスを UTF-7 でエンコードされたバイト シーケンスに変換する <see cref="T:System.Text.Encoder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-367">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-368"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドと同様の方法で、文字のシーケンシャル ブロックにバイトのシーケンシャル ブロックを変換する、<xref:System.Text.UTF7Encoding.GetChars%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b7328-368">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method.</span></span> <span data-ttu-id="b7328-369">ただし、<xref:System.Text.Decoder>のブロックをまたぐバイト シーケンスが正しくデコードするための呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="b7328-369">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="b7328-370"><xref:System.Text.Decoder>もデータ ブロックの末尾にある後続バイトが保持され、[次へ] のデコード操作で末尾のバイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="b7328-370">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="b7328-371">そのため、<xref:System.Text.UTF7Encoding.GetDecoder%2A>と<xref:System.Text.UTF7Encoding.GetEncoder%2A>は完全なデータ ストリームではなくデータのブロックを頻繁にこれらの操作を処理するためにネットワーク転送と、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="b7328-371">Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-372">次のコード例は、使用する方法を示します、<xref:System.Text.UTF7Encoding.GetEncoder%2A>でエンコードされたバイトのシーケンスを文字のシーケンスを utf-7 に変換するエンコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="b7328-372">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-7 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md">
          <span data-ttu-id="b7328-373">エンコーディングの理解</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-373">Understanding Encodings</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF7Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7328-374">現在の <see cref="T:System.Text.UTF7Encoding" /> オブジェクトのハッシュ コードを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-374">Returns the hash code for the current <see cref="T:System.Text.UTF7Encoding" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-375">32 ビット符号付き整数ハッシュ コード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-375">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-376">によって返される値、<xref:System.Text.UTF7Encoding.GetHashCode%2A>メソッドが 1 つを区別するのに適した<xref:System.Text.UTF7Encoding>から別のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7328-376">The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another.</span></span> <span data-ttu-id="b7328-377">これをオーバーライドする必要があります、アプリケーションでは、一意のハッシュ コードを必要とする場合、<xref:System.Text.UTF7Encoding.GetHashCode%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b7328-377">If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF7Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">
          <span data-ttu-id="b7328-378">エンコードする文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-378">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-379">指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-379">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-380">指定した文字数をエンコードすることによって生成される最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-380">The maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-381">必要な正確な配列のサイズを計算する<xref:System.Text.UTF7Encoding.GetBytes%2A>アプリケーションが使用するには、結果のバイトを格納するには、<xref:System.Text.UTF7Encoding.GetByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-381">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="b7328-382">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-382">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="b7328-383"><xref:System.Text.UTF7Encoding.GetByteCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-383">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b7328-384"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 現在選択されているは、最悪のケースを含め、最悪の番号は、<xref:System.Text.EncoderFallback>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-384"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="b7328-385">フォールバックが大きくなる可能性の文字列で選択されている場合<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>大きな値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="b7328-385">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="b7328-386">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b7328-386">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="b7328-387">大きな文字列の場合は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでのエラーのキャッチを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7328-387">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="b7328-388">使用して、別のアプローチを検討する可能性がありますも<xref:System.Text.UTF7Encoding.GetByteCount%2A>または<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-388">You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b7328-389">Utf-7 は、1 文字あたり 1 バイトの ASCII データのエンコーディングに非常に効率的なその他のデータに対して非常に効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="b7328-389">While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data.</span></span> <span data-ttu-id="b7328-390">上記を認めたと<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>最悪のケースを処理します。</span><span class="sxs-lookup"><span data-stu-id="b7328-390">As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case.</span></span> <span data-ttu-id="b7328-391">エンコードするデータは主に ASCII、utf-7 ははるかに多くの ASCII 文字をまとめてクラスターする場合に、特に場合このメソッドによって返される数よりも効率的ですがお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b7328-391">If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.</span></span>  
  
 <span data-ttu-id="b7328-392"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 関係を持たない<xref:System.Text.UTF7Encoding.GetChars%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-392"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>.</span></span> <span data-ttu-id="b7328-393">アプリケーションで使用するような関数が必要なかどうか<xref:System.Text.UTF7Encoding.GetChars%2A>、どちらを使用する<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-393">If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-394">`GetMaxByteCount(N)` 同じ値とは限りません`N* GetMaxByteCount(1)`します。</span><span class="sxs-lookup"><span data-stu-id="b7328-394">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-395">次のコード例は、使用する方法を示します、<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>指定数の文字をエンコードするために必要なバイトの最大数を返します。</span><span class="sxs-lookup"><span data-stu-id="b7328-395">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-396">
            <paramref name="charCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-396">
              <paramref name="charCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="b7328-397">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-397">-or-</span>
          </span>
          <span data-ttu-id="b7328-398">結果のバイト数が、int として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-398">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="b7328-399">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-399">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="b7328-400">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-400">-and-</span>
          </span>
          <span data-ttu-id="b7328-401">
            <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-401">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF7Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">
          <span data-ttu-id="b7328-402">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-402">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-403">指定したバイト数をデコードすることによって生成される最大文字数を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-403">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-404">指定したバイト数をデコードすることによって生成される最大文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-404">The maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-405">必要な正確な配列のサイズを計算する<xref:System.Text.UTF7Encoding.GetChars%2A>アプリケーションが使用するには、結果の文字を格納するには、<xref:System.Text.UTF7Encoding.GetCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-405">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="b7328-406">配列の最大サイズを計算するアプリケーションを使用する必要があります<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-406">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="b7328-407"><xref:System.Text.UTF7Encoding.GetCharCount%2A>メソッドは、一般に、メモリの割り当てを使用するときに、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="b7328-407">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="b7328-408"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 現在選択されているは、最悪のケースを含め、最悪の番号は、<xref:System.Text.DecoderFallback>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-408"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="b7328-409">フォールバックが大きくなる可能性の文字列で選択されている場合<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>大きな値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="b7328-409">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="b7328-410">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b7328-410">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="b7328-411">大きな文字列の場合は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでのエラーのキャッチを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7328-411">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="b7328-412">使用して、別のアプローチを検討する可能性がありますも<xref:System.Text.UTF7Encoding.GetCharCount%2A>または<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-412">You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7328-413"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 関係を持たない<xref:System.Text.UTF7Encoding.GetBytes%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-413"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="b7328-414">アプリケーションで使用するような関数が必要なかどうか<xref:System.Text.UTF7Encoding.GetBytes%2A>、どちらを使用する<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7328-414">If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-415">`GetMaxCharCount(N)` 同じ値とは限りません`N* GetMaxCharCount(1)`します。</span><span class="sxs-lookup"><span data-stu-id="b7328-415">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-416">次のコード例は、使用する方法を示します、<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>指定したバイト数をデコードすることによって生成される最大文字数を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="b7328-416">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-417">
            <paramref name="byteCount" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-417">
              <paramref name="byteCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="b7328-418">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-418">-or-</span>
          </span>
          <span data-ttu-id="b7328-419">結果の文字数が、int として返すことのできる最大数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-419">The resulting number of characters is greater than the maximum number that can be returned as an int.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="b7328-420">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-420">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span>
          </span>
          <span data-ttu-id="b7328-421">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-421">-and-</span>
          </span>
          <span data-ttu-id="b7328-422">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-422">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF7Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="b7328-423">デコード対象のバイト シーケンスが格納されたバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-423">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="b7328-424">デコードする最初のバイトのインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-424">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b7328-425">デコードするバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-425">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7328-426">バイト配列に格納されているある範囲のバイトを文字列にデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-426">Decodes a range of bytes from a byte array into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7328-427">指定したバイト シーケンスのデコード結果が格納されている <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-427">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7328-428">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b7328-428">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="b7328-429">ここでは、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションで使用するか、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF7Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF7Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b7328-429">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7328-430"><xref:System.Text.UTF7Encoding> エラーの検出は提供されません。</span><span class="sxs-lookup"><span data-stu-id="b7328-430"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="b7328-431">無効なバイトが検出されると、<xref:System.Text.UTF7Encoding>一般に、無効なバイトを生成します。</span><span class="sxs-lookup"><span data-stu-id="b7328-431">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="b7328-432">バイトが 16 進数の 0x7F よりも大きい場合は、バイト値が Unicode 文字に 0 拡張で結果が格納されている、`chars`配列、および任意のシフト シーケンスを終了します。</span><span class="sxs-lookup"><span data-stu-id="b7328-432">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="b7328-433">たとえば、エンコードするバイトが 0x81 の 16 進数である場合は、結果として得られる文字は u+0081 します。</span><span class="sxs-lookup"><span data-stu-id="b7328-433">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="b7328-434">使用するセキュリティ上の理由から、アプリケーションの推奨<xref:System.Text.UTF8Encoding>、 <xref:System.Text.UnicodeEncoding>、または<xref:System.Text.UTF32Encoding>し、エラーの検出を有効にします。</span><span class="sxs-lookup"><span data-stu-id="b7328-434">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7328-435">次のコード例では、(バイト単位) の配列に文字列をエンコードし、文字列、バイトをデコードします。</span><span class="sxs-lookup"><span data-stu-id="b7328-435">The following code example encodes a string into an array of bytes, and then decodes the bytes back into a string.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CPP/getstring.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CS/getstring.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/VB/getstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b7328-436">
            <paramref name="bytes" /> が <see langword="null" /> (<see langword="Nothing" />) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-436">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b7328-437">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-437">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="b7328-438">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-438">-or-</span>
          </span>
          <span data-ttu-id="b7328-439">
            <paramref name="index" /> および <paramref name="count" /> が <paramref name="bytes" /> 内の有効な範囲を示していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-439">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="b7328-440">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-440">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="b7328-441">および</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-441">-and-</span>
          </span>
          <span data-ttu-id="b7328-442">
            <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7328-442">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>