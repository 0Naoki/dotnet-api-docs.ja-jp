<Type Name="UTF32Encoding" FullName="System.Text.UTF32Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4aa3d8e8c1000eea746a1d29bcbf63f70f091d35" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52384719" /></Metadata><TypeSignature Language="C#" Value="public sealed class UTF32Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit UTF32Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF32Encoding" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UTF32Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF32Encoding sealed : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF32Encoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="27e21-101">Unicode 文字の UTF-32 エンコーディングを表します。</span><span class="sxs-lookup"><span data-stu-id="27e21-101">Represents a UTF-32 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-102">エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="27e21-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="27e21-103">デコードは、Unicode 文字のセットにエンコードされたバイトのシーケンスを変換するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="27e21-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="27e21-104">[Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)コード ポイント (数値) をすべてサポートされているスクリプト内の各文字に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="27e21-104">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script.</span></span> <span data-ttu-id="27e21-105">Unicode 変換形式 (UTF) は、そのコード ポイントをエンコードする方法です。</span><span class="sxs-lookup"><span data-stu-id="27e21-105">A Unicode Transformation Format (UTF) is a way to encode that code point.</span></span> <span data-ttu-id="27e21-106">[Unicode 標準](https://go.microsoft.com/fwlink/?linkid=37123)次 UTFs を使用します。</span><span class="sxs-lookup"><span data-stu-id="27e21-106">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:</span></span>  
  
-   <span data-ttu-id="27e21-107">1 ~ 4 バイトのシーケンスとして各コード ポイントを表現する utf-8、します。</span><span class="sxs-lookup"><span data-stu-id="27e21-107">UTF-8, which represents each code point as a sequence of one to four bytes.</span></span>  
  
-   <span data-ttu-id="27e21-108">Utf-16、各コード ポイントを表す 1 ~ 2 の 16 ビット整数のシーケンスとして。</span><span class="sxs-lookup"><span data-stu-id="27e21-108">UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</span></span>  
  
-   <span data-ttu-id="27e21-109">Utf-32、32 ビット整数として各コード ポイントを表します。</span><span class="sxs-lookup"><span data-stu-id="27e21-109">UTF-32, which represents each code point as a 32-bit integer.</span></span>  
  
 <span data-ttu-id="27e21-110">UTFs とでサポートされているその他のエンコーディングの詳細については<xref:System.Text>を参照してください[.NET における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)します。</span><span class="sxs-lookup"><span data-stu-id="27e21-110">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>
  
 <span data-ttu-id="27e21-111"><xref:System.Text.UTF32Encoding>クラスは、utf-32 エンコーディングを表します。</span><span class="sxs-lookup"><span data-stu-id="27e21-111">The <xref:System.Text.UTF32Encoding> class represents a UTF-32 encoding.</span></span> <span data-ttu-id="27e21-112">エンコーダーは、ビッグ エンディアン バイト順を使用できます (最上位バイト最初) またはリトル エンディアン バイト順 (最下位バイト最初)。</span><span class="sxs-lookup"><span data-stu-id="27e21-112">The encoder can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first).</span></span> <span data-ttu-id="27e21-113">たとえば、としてシリアル化されます (コード ポイント u+0041) Latin Capital Letter は (16 進数) で次に示します。</span><span class="sxs-lookup"><span data-stu-id="27e21-113">For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="27e21-114">ビッグ エンディアン バイト順: 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="27e21-114">Big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="27e21-115">リトル エンディアン バイト順: 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="27e21-115">Little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="27e21-116">ネイティブのバイト順を使用して Unicode 文字を格納する方が効率的になります。</span><span class="sxs-lookup"><span data-stu-id="27e21-116">It is generally more efficient to store Unicode characters using the native byte order.</span></span> <span data-ttu-id="27e21-117">たとえば、intel ベースのコンピューターなど、リトル エンディアンのプラットフォームでリトル エンディアン バイト順を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="27e21-117">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span> <span data-ttu-id="27e21-118"><xref:System.Text.UTF32Encoding> Windows コード ページ (リトル エンディアン バイト順) 12000、12001 (ビッグ エンディアン バイト順) に対応します。</span><span class="sxs-lookup"><span data-stu-id="27e21-118"><xref:System.Text.UTF32Encoding> corresponds to the Windows code pages 12000 (little endian byte order) and 12001 (big endian byte order).</span></span> <span data-ttu-id="27e21-119">呼び出すことによって、特定のアーキテクチャの「エンディアン」を指定できます、<xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-119">You can determine the "endianness" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="27e21-120">必要に応じて、<xref:System.Text.UTF32Encoding>オブジェクトがバイト エンコーディング プロセスの結果のシーケンスに先頭バイトの配列、バイト順マーク (BOM) を提供します。</span><span class="sxs-lookup"><span data-stu-id="27e21-120">Optionally, the <xref:System.Text.UTF32Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="27e21-121">Preamble にバイト オーダー マーク (BOM) が含まれている場合は、バイト順と変換形式またはバイト配列の UTF デコーダーが役立ちます。</span><span class="sxs-lookup"><span data-stu-id="27e21-121">If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF of a byte array.</span></span>  
  
 <span data-ttu-id="27e21-122">場合、<xref:System.Text.UTF32Encoding>インスタンスが BOM を提供するよう構成を呼び出すことで取得することができます、<xref:System.Text.UTF32Encoding.GetPreamble%2A>メソッド、メソッドは空の配列を返しますそれ以外の場合、します。</span><span class="sxs-lookup"><span data-stu-id="27e21-122">If the <xref:System.Text.UTF32Encoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="27e21-123">なお、場合でも、 <xref:System.Text.UTF32Encoding> BOM のサポートのために、オブジェクトが構成されている、適切な; としてエンコードされたバイト ストリームの先頭の BOM を含める必要がありますのエンコード方法、<xref:System.Text.UTF32Encoding>クラスしないで自動的にします。</span><span class="sxs-lookup"><span data-stu-id="27e21-123">Note that, even if a <xref:System.Text.UTF32Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF32Encoding> class do not do this automatically.</span></span>  
  
 <span data-ttu-id="27e21-124">エラーの検出を有効にして、クラスのインスタンスのセキュリティを強化するには、インスタンス化、<xref:System.Text.UTF32Encoding>オブジェクトを呼び出すことによって、<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターと設定、`throwOnInvalidBytes`引数`true`。</span><span class="sxs-lookup"><span data-stu-id="27e21-124">To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UTF32Encoding> object by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span> <span data-ttu-id="27e21-125">エラーの検出の無効な文字またはバイトのシーケンスを検出するメソッドがスローされます、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="27e21-125">With error detection, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="27e21-126">エラーの検出、例外がスローされないと、無効なシーケンスは、通常は無視されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-126">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
 <span data-ttu-id="27e21-127">インスタンス化することができます、<xref:System.Text.UTF32Encoding>するかどうか、バイト順マーク (BOM) を提供する、ビッグ エンディアンまたはリトル エンディアン エンコーディングするかどうか、およびエラーの検出を有効にするかどうかに応じて、方法数のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="27e21-127">You can instantiate a <xref:System.Text.UTF32Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</span></span> <span data-ttu-id="27e21-128">次の表、<xref:System.Text.UTF32Encoding>コンス トラクターと<xref:System.Text.Encoding>プロパティを返す、<xref:System.Text.UnicodeEncoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="27e21-128">The following table lists the <xref:System.Text.UTF32Encoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
|<span data-ttu-id="27e21-129">メンバー</span><span class="sxs-lookup"><span data-stu-id="27e21-129">Member</span></span>|<span data-ttu-id="27e21-130">エンディアン</span><span class="sxs-lookup"><span data-stu-id="27e21-130">Endianness</span></span>|<span data-ttu-id="27e21-131">BOM</span><span class="sxs-lookup"><span data-stu-id="27e21-131">BOM</span></span>|<span data-ttu-id="27e21-132">エラーの検出</span><span class="sxs-lookup"><span data-stu-id="27e21-132">Error detection</span></span>|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>|<span data-ttu-id="27e21-133">リトル エンディアン</span><span class="sxs-lookup"><span data-stu-id="27e21-133">Little-endian</span></span>|<span data-ttu-id="27e21-134">[はい]</span><span class="sxs-lookup"><span data-stu-id="27e21-134">Yes</span></span>|<span data-ttu-id="27e21-135">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="27e21-135">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="27e21-136">リトル エンディアン</span><span class="sxs-lookup"><span data-stu-id="27e21-136">Little-endian</span></span>|<span data-ttu-id="27e21-137">[はい]</span><span class="sxs-lookup"><span data-stu-id="27e21-137">Yes</span></span>|<span data-ttu-id="27e21-138">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="27e21-138">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="27e21-139">構成可能</span><span class="sxs-lookup"><span data-stu-id="27e21-139">Configurable</span></span>|<span data-ttu-id="27e21-140">構成可能</span><span class="sxs-lookup"><span data-stu-id="27e21-140">Configurable</span></span>|<span data-ttu-id="27e21-141">なし (置換フォールバック)</span><span class="sxs-lookup"><span data-stu-id="27e21-141">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="27e21-142">構成可能</span><span class="sxs-lookup"><span data-stu-id="27e21-142">Configurable</span></span>|<span data-ttu-id="27e21-143">構成可能</span><span class="sxs-lookup"><span data-stu-id="27e21-143">Configurable</span></span>|<span data-ttu-id="27e21-144">構成可能</span><span class="sxs-lookup"><span data-stu-id="27e21-144">Configurable</span></span>|  
  
 <span data-ttu-id="27e21-145"><xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッドでは、バイト数が、Unicode 文字のセットがエンコードされるかを判断します。 および<xref:System.Text.UTF32Encoding.GetBytes%2A>メソッドは、実際のエンコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="27e21-145">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF32Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="27e21-146">同様に、<xref:System.Text.UTF32Encoding.GetCharCount%2A>メソッドでは、文字数が発生するシーケンス (バイト単位) をデコードするかを判断します。 および<xref:System.Text.UTF32Encoding.GetChars%2A>と<xref:System.Text.UTF32Encoding.GetString%2A>メソッドは、実際のデコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="27e21-146">Likewise, the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF32Encoding.GetChars%2A> and <xref:System.Text.UTF32Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="27e21-147">エンコーダーまたはデコーダーがエンコードまたはデコード (100,000 文字のセグメントにエンコードされている 1,000,000 文字の文字列) などの複数のブロックにわたるデータと状態情報を保存、使用できる、<xref:System.Text.UTF32Encoding.GetEncoder%2A>と<xref:System.Text.UTF32Encoding.GetDecoder%2A>プロパティそれぞれします。</span><span class="sxs-lookup"><span data-stu-id="27e21-147">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF32Encoding.GetEncoder%2A> and <xref:System.Text.UTF32Encoding.GetDecoder%2A> properties, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-148">次の例の動作を示します<xref:System.Text.UTF32Encoding>オブジェクトとエラーの検出を有効にしない場合。</span><span class="sxs-lookup"><span data-stu-id="27e21-148">The following example demonstrates the behavior of <xref:System.Text.UTF32Encoding> objects with and without error detection enabled.</span></span> <span data-ttu-id="27e21-149">最後の 4 つのバイトを含むが、無効なサロゲート ペアを表すバイト配列を作成します上位サロゲート U + D8FF、U + 01FF、低サロゲート (0xDC00 から 0 xdfff 経由) の範囲外であるが続きます。</span><span class="sxs-lookup"><span data-stu-id="27e21-149">It creates a byte array whose last four bytes represent an invalid surrogate pair; the high surrogate U+D8FF is followed by an U+01FF, which is outside the range of low surrogates (0xDC00 through 0xDFFF).</span></span> <span data-ttu-id="27e21-150">エラーの検出、UTF32 デコーダーは、置換フォールバックを使用して、REPLACEMENT CHARACTER (U+FFFD) に無効なサロゲート ペアを置き換えます。</span><span class="sxs-lookup"><span data-stu-id="27e21-150">Without error detection, the UTF32 decoder uses replacement fallback to replace the invalid surrogate pair with REPLACEMENT CHARACTER (U+FFFD).</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  
  
 <span data-ttu-id="27e21-151">次の例では、バイト配列に Unicode 文字の文字列をエンコードを使用して、<xref:System.Text.UTF32Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="27e21-151">The following example encodes a string of Unicode characters into a byte array by using a <xref:System.Text.UTF32Encoding> object.</span></span> <span data-ttu-id="27e21-152">バイト配列は、データの損失がないことを示す文字列にデコードされます。</span><span class="sxs-lookup"><span data-stu-id="27e21-152">The byte array is then decoded into a string to demonstrate that there is no loss of data.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/snippet.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/snippet.vb#1)]  
  
 <span data-ttu-id="27e21-153">ファイルにエンコードされたバイトを書き込みます、バイト順マーク (BOM) をバイト ストリームをプレフィックスする点を除いて次の例は、前と同じ文字列を使用します。</span><span class="sxs-lookup"><span data-stu-id="27e21-153">The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="27e21-154">これは、後、2 つの方法でファイルを読み取ります: を使用してテキスト ファイルとして、<xref:System.IO.StreamReader>オブジェクト、およびバイナリ ファイルとして。</span><span class="sxs-lookup"><span data-stu-id="27e21-154">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="27e21-155">期待どおりには、どちらも新しく読み取り文字列には、BOM が含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-155">As you would expect, neither newly-read string includes the BOM.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/bom1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Text.UnicodeEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="27e21-156">エンコーディングの理解</span><span class="sxs-lookup"><span data-stu-id="27e21-156">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="27e21-157"><see cref="T:System.Text.UTF32Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="27e21-157">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27e21-158"><see cref="T:System.Text.UTF32Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="27e21-158">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-159">このコンス トラクターは、リトル エンディアン バイト順を使用し、Unicode バイト順マークし、無効なエンコーディングが検出されたときに、例外をスローしないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="27e21-159">This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27e21-160">セキュリティ上の理由から、呼び出すことによってエラー検出を有効する必要があります、<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターと設定、`throwOnInvalidCharacters`引数`true`します。</span><span class="sxs-lookup"><span data-stu-id="27e21-160">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-161">次の例を取得し、バイト順のマークを付けるさまざまな表示<xref:System.Text.UTF32Encoding>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="27e21-161">The following example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding(bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF32Encoding : bool * bool -&gt; System.Text.UTF32Encoding" Usage="new System.Text.UTF32Encoding (bigEndian, byteOrderMark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><span data-ttu-id="27e21-162">最上位バイトが先頭に配置されるビッグ エンディアン バイト順を使用する場合は <see langword="true" />。最下位バイトが先頭に配置されるリトル エンディアン バイト順を使用する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="27e21-162"><see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><span data-ttu-id="27e21-163">Unicode バイト順マークを付加するよう指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="27e21-163"><see langword="true" /> to specify that a Unicode byte order mark is provided; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="27e21-164"><see cref="T:System.Text.UTF32Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="27e21-164">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span> <span data-ttu-id="27e21-165">パラメーターでは、ビッグ エンディアン バイト順を使用するかどうか、および <see cref="M:System.Text.UTF32Encoding.GetPreamble" /> メソッドが Unicode の Unicode バイト順マークを返すかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="27e21-165">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UTF32Encoding.GetPreamble" /> method returns a Unicode Unicode byte order mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-166">このコンス トラクターは、無効なエンコーディングが検出されたときに例外をスローしないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="27e21-166">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27e21-167">セキュリティ上の理由から、呼び出すことによってエラー検出を有効する必要があります、<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターと設定、`throwOnInvalidCharacters`引数`true`します。</span><span class="sxs-lookup"><span data-stu-id="27e21-167">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-168">次の例を取得し、バイト順のマークを付けるさまざまな表示<xref:System.Text.UTF32Encoding>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="27e21-168">The following example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidCharacters As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF32Encoding : bool * bool * bool -&gt; System.Text.UTF32Encoding" Usage="new System.Text.UTF32Encoding (bigEndian, byteOrderMark, throwOnInvalidCharacters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidCharacters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><span data-ttu-id="27e21-169">最上位バイトが先頭に配置されるビッグ エンディアン バイト順を使用する場合は <see langword="true" />。最下位バイトが先頭に配置されるリトル エンディアン バイト順を使用する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="27e21-169"><see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><span data-ttu-id="27e21-170">Unicode バイト順マークを付加するよう指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="27e21-170"><see langword="true" /> to specify that a Unicode byte order mark is provided; otherwise, <see langword="false" />.</span></span></param>
        <param name="throwOnInvalidCharacters"><span data-ttu-id="27e21-171">無効なエンコーディングが検出された場合に、例外をスローすることを指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="27e21-171"><see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="27e21-172"><see cref="T:System.Text.UTF32Encoding" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="27e21-172">Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</span></span> <span data-ttu-id="27e21-173">パラメーターでは、ビッグ エンディアン バイト順を使用するかどうか、Unicode バイト順マークを付加するかどうか、および無効なエンコーディングを検出したときに例外をスローするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="27e21-173">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-174">場合`throwOnInvalidCharacters`は`true`、無効なバイト シーケンスを検出するメソッドをスローします<xref:System.ArgumentException?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-174">If `throwOnInvalidCharacters` is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=nameWithType>.</span></span> <span data-ttu-id="27e21-175">それ以外の場合、メソッドが例外をスローしないと、無効なシーケンスが無視されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-175">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27e21-176">セキュリティ上の理由から、呼び出すことによってエラー検出を有効する必要があります、<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>コンス トラクターと設定、`throwOnInvalidCharacters`引数`true`します。</span><span class="sxs-lookup"><span data-stu-id="27e21-176">For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-177">次の例の動作を示します<xref:System.Text.UTF32Encoding>エラーの検出を有効になっているのとなしの両方。</span><span class="sxs-lookup"><span data-stu-id="27e21-177">The following example demonstrates the behavior of <xref:System.Text.UTF32Encoding>, both with error detection enabled and without.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF32Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="27e21-178">比較相手の <see cref="T:System.Object" />。これと現在のオブジェクトを比較することになります。</span><span class="sxs-lookup"><span data-stu-id="27e21-178">The <see cref="T:System.Object" /> to compare with the current object.</span></span></param>
        <summary><span data-ttu-id="27e21-179">指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Text.UTF32Encoding" /> オブジェクトと等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="27e21-179">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UTF32Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="27e21-180"><paramref name="value" /> が <see cref="T:System.Text.UTF32Encoding" /> のインスタンスで、現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="27e21-180"><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF32Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-181">2 つ<xref:System.Text.UTF32Encoding>オブジェクトは、次の条件がすべて当てはまる場合に等価と見なされます。</span><span class="sxs-lookup"><span data-stu-id="27e21-181">Two <xref:System.Text.UTF32Encoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="27e21-182">両方のオブジェクトは、同じバイト順を使用します。</span><span class="sxs-lookup"><span data-stu-id="27e21-182">Both objects use the same byte order.</span></span>  
  
-   <span data-ttu-id="27e21-183">両方のオブジェクトがバイト順マークを指定するか、両方はありません。</span><span class="sxs-lookup"><span data-stu-id="27e21-183">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="27e21-184">両方のオブジェクトは、同じエンコーダー フォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="27e21-184">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="27e21-185">両方のオブジェクトは、同じデコーダーのフォールバックを使用します。</span><span class="sxs-lookup"><span data-stu-id="27e21-185">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-186">次の例では、作成<xref:System.Text.UTF32Encoding>使用するオブジェクトの別のパラメーターの値し、し、それらを等しいかどうかをチェックします。</span><span class="sxs-lookup"><span data-stu-id="27e21-186">The following example creates <xref:System.Text.UTF32Encoding> objects using different parameter values and then checks them for equality.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="27e21-187">文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="27e21-187">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF32Encoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="27e21-188">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="27e21-188">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="27e21-189">指定した <see cref="T:System.String" /> 内の文字をエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="27e21-189">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="27e21-190">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-190">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-191">必要な正確な配列のサイズを計算する<xref:System.Text.UTF32Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-191">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="27e21-192">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-192">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="27e21-193"><xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-193">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-194">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-194">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-195">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-195">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="27e21-196">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="27e21-196">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="27e21-197">バイト ストリームの先頭に、preamble を挿入 (など、一連のファイルに書き込まれるバイトの先頭に)、開発者の責任であり、preamble のバイト数がによって返される値に反映されていない、<xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-197">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-198">次の例では、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>と<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>文字列をエンコードするために必要なバイトの最大値と実際の数を計算するメソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-198">The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="27e21-199">実際のバイト順マークを付けるバイト ストリームを格納するために必要なバイト数も表示されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-199">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.Utf32Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.Utf32Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-200"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-200"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-201">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="27e21-201">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-202">エラーの検出が有効になり、<paramref name="s" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-202">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="27e21-203">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-203">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-204">および</span><span class="sxs-lookup"><span data-stu-id="27e21-204">-and-</span></span> 
 <span data-ttu-id="27e21-205"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-205"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF32Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="27e21-206">エンコードする最初の文字へのポインター。</span><span class="sxs-lookup"><span data-stu-id="27e21-206">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="27e21-207">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-207">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="27e21-208">指定した文字ポインターで始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="27e21-208">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="27e21-209">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-209">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-210">必要な正確な配列のサイズを計算する<xref:System.Text.UTF32Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-210">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="27e21-211">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-211">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="27e21-212"><xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-212">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-213">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-213">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-214">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-214">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="27e21-215">ファイルまたはストリームとして保存される際にエンコードされたバイトが正しくデコードすることを確認するには、プリアンブルでエンコードされたバイトのストリームの先頭を付加することができます。</span><span class="sxs-lookup"><span data-stu-id="27e21-215">To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="27e21-216">バイト ストリームの先頭に、preamble を挿入 (など、一連のファイルに書き込まれるバイトの先頭に)、開発者の責任であり、preamble のバイト数がによって返される値に反映されていない、<xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-216">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-217"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-217"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-218"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-218"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="27e21-219">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-219">-or-</span></span> 
<span data-ttu-id="27e21-220">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="27e21-220">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-221">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-221">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="27e21-222">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-222">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-223">および</span><span class="sxs-lookup"><span data-stu-id="27e21-223">-and-</span></span> 
 <span data-ttu-id="27e21-224"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-224"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="27e21-225">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="27e21-225">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="27e21-226">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="27e21-226">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF32Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="27e21-227">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="27e21-227">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="27e21-228">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="27e21-228">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="27e21-229">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-229">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="27e21-230">指定した文字配列から文字のセットをエンコードすることによって生成されるバイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="27e21-230">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="27e21-231">指定した文字をエンコードすることによって生成されるバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-231">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-232">必要な正確な配列のサイズを計算する<xref:System.Text.UTF32Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-232">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="27e21-233">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-233">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="27e21-234"><xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-234">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-235">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-235">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-236">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-236">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="27e21-237">ファイルまたはストリームとして保存される際にエンコードされたバイトが正しくデコードすることを確認するには、プリアンブルでエンコードされたバイトのストリームの先頭を付加することができます。</span><span class="sxs-lookup"><span data-stu-id="27e21-237">To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="27e21-238">バイト ストリームの先頭に、preamble を挿入 (など、一連のファイルに書き込まれるバイトの先頭に)、開発者の責任であり、preamble のバイト数がによって返される値に反映されていない、<xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-238">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-239">次の例では、配列 Latin の大文字と小文字および呼び出しを設定します、<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>ラテン文字の小文字の文字をエンコードするために必要なバイト数を判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-239">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="27e21-240">バイト順マークが追加された場合に必要なバイトの合計数と共にこの情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-240">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="27e21-241">この番号によって返される値の比較、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは、ラテン文字の小文字の文字をエンコードするために必要なバイトの最大数を示します。</span><span class="sxs-lookup"><span data-stu-id="27e21-241">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="27e21-242">次の例では、ギリシャ語、キリル文字と呼び出しの組み合わせを含む配列を設定します、<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>キリル文字をエンコードするために必要なバイト数を判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-242">The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters.</span></span> <span data-ttu-id="27e21-243">バイト順マークが追加された場合に必要なバイトの合計数と共にこの情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-243">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="27e21-244">この番号によって返される値の比較、<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>メソッドは、キリル文字をエンコードするために必要なバイトの最大数を示します。</span><span class="sxs-lookup"><span data-stu-id="27e21-244">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</span></span>  
  
 [!code-csharp[System.Text.Utf32Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.Utf32Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-245"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-245"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-246"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-246"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="27e21-247">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-247">-or-</span></span> 
 <span data-ttu-id="27e21-248"><paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="27e21-248"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="27e21-249">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-249">-or-</span></span> 
<span data-ttu-id="27e21-250">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="27e21-250">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-251">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-251">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="27e21-252">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-252">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-253">および</span><span class="sxs-lookup"><span data-stu-id="27e21-253">-and-</span></span> 
 <span data-ttu-id="27e21-254"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-254"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="27e21-255">文字のセットをバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-255">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF32Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="27e21-256">エンコードする最初の文字へのポインター。</span><span class="sxs-lookup"><span data-stu-id="27e21-256">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="27e21-257">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-257">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="27e21-258">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</span><span class="sxs-lookup"><span data-stu-id="27e21-258">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="27e21-259">書き込む最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-259">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="27e21-260">指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-260">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="27e21-261"><paramref name="bytes" /> パラメーターによって示される位置に書き込む実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-261">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-262">必要な正確な配列のサイズを計算する<xref:System.Text.UTF32Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-262">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="27e21-263">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-263">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="27e21-264"><xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-264">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-265">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-265">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-266">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-266">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="27e21-267">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-267">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="27e21-268">この場合、またはアプリケーションを使用してデータの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF32Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF32Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="27e21-268">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27e21-269">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="27e21-269">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="27e21-270">バイト ストリームの先頭に、preamble を挿入 (など一連のファイルに書き込まれるバイトの先頭に) 開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="27e21-270">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="27e21-271"><xref:System.Text.UTF32Encoding.GetBytes%2A>メソッドがエンコードされたバイト シーケンスの先頭に、preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="27e21-271">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-272"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-272"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="27e21-273">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-273">-or-</span></span> 
 <span data-ttu-id="27e21-274"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="27e21-274"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-275"><paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-275"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-276">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-276">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="27e21-277">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-277">-or-</span></span> 
 <span data-ttu-id="27e21-278"><paramref name="byteCount" /> が結果のバイト数より少なくなっています。</span><span class="sxs-lookup"><span data-stu-id="27e21-278"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="27e21-279">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-279">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-280">および</span><span class="sxs-lookup"><span data-stu-id="27e21-280">-and-</span></span> 
 <span data-ttu-id="27e21-281"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-281"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="27e21-282">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="27e21-282">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="27e21-283">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="27e21-283">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF32Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="27e21-284">エンコード対象の文字のセットを格納している文字配列。</span><span class="sxs-lookup"><span data-stu-id="27e21-284">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="27e21-285">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="27e21-285">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="27e21-286">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-286">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="27e21-287">結果のバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="27e21-287">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="27e21-288">結果のバイト シーケンスを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="27e21-288">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="27e21-289">指定した文字配列に格納されている文字のセットを指定したバイト配列にエンコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-289">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="27e21-290"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-290">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-291">必要な正確な配列のサイズを計算する<xref:System.Text.UTF32Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-291">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="27e21-292">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-292">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="27e21-293"><xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-293">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-294">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-294">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-295">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-295">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="27e21-296">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-296">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="27e21-297">この場合、またはアプリケーションを使用してデータの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF32Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF32Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="27e21-297">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27e21-298">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="27e21-298">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="27e21-299">バイト ストリームの先頭に、preamble を挿入 (など一連のファイルに書き込まれるバイトの先頭に) 開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="27e21-299">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="27e21-300"><xref:System.Text.UTF32Encoding.GetBytes%2A>メソッドがエンコードされたバイト シーケンスの先頭に、preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="27e21-300">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-301">次の例は、文字配列から次の 3 つの文字をエンコードするために必要なバイト数を決定しの文字をエンコードし、結果のバイトを表示します。</span><span class="sxs-lookup"><span data-stu-id="27e21-301">The following example determines the number of bytes required to encode three characters from a character array, then encodes the characters and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/VB/GetBytes_CharArr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-302"><paramref name="chars" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-302"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="27e21-303">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-303">-or-</span></span> 
 <span data-ttu-id="27e21-304"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="27e21-304"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-305"><paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-305"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="27e21-306">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-306">-or-</span></span> 
 <span data-ttu-id="27e21-307"><paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="27e21-307"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="27e21-308">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-308">-or-</span></span> 
 <span data-ttu-id="27e21-309"><paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="27e21-309"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-310">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-310">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="27e21-311">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-311">-or-</span></span> 
 <span data-ttu-id="27e21-312"><paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span><span class="sxs-lookup"><span data-stu-id="27e21-312"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="27e21-313">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-313">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-314">および</span><span class="sxs-lookup"><span data-stu-id="27e21-314">-and-</span></span> 
 <span data-ttu-id="27e21-315"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-315"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF32Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="27e21-316">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="27e21-316">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="27e21-317">エンコードする最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="27e21-317">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="27e21-318">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-318">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="27e21-319">結果のバイト シーケンスを格納するバイト配列。</span><span class="sxs-lookup"><span data-stu-id="27e21-319">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="27e21-320">結果のバイト シーケンスを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="27e21-320">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="27e21-321">指定した <see cref="T:System.String" /> の文字セットを、指定したバイト配列にエンコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-321">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="27e21-322"><paramref name="bytes" /> に書き込まれた実際のバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-322">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-323">必要な正確な配列のサイズを計算する<xref:System.Text.UTF32Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-323">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="27e21-324">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-324">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="27e21-325"><xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-325">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-326">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-326">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-327">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-327">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="27e21-328">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-328">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="27e21-329">この場合、またはアプリケーションを使用してデータの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF32Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF32Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="27e21-329">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27e21-330">ファイルまたはストリームとして保存されるときに、エンコード済みバイトが正しくデコードするためには、プリアンブルとエンコードされたバイトのストリーム プレフィックスにすることができます。</span><span class="sxs-lookup"><span data-stu-id="27e21-330">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="27e21-331">バイト ストリームの先頭に、preamble を挿入 (など一連のファイルに書き込まれるバイトの先頭に) 開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="27e21-331">Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="27e21-332"><xref:System.Text.UTF32Encoding.GetBytes%2A>メソッドがエンコードされたバイト シーケンスの先頭に、preamble を追加しません。</span><span class="sxs-lookup"><span data-stu-id="27e21-332">The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-333">次の例は、文字列のエンコードに必要なバイト数を決定、文字列をエンコードし、結果のバイトが表示されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-333">The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-334"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-334"><paramref name="s" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="27e21-335">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-335">-or-</span></span> 
 <span data-ttu-id="27e21-336"><paramref name="bytes" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="27e21-336"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-337"><paramref name="charIndex" />、<paramref name="charCount" />、または <paramref name="byteIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-337"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="27e21-338">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-338">-or-</span></span> 
 <span data-ttu-id="27e21-339"><paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="27e21-339"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="27e21-340">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-340">-or-</span></span> 
 <span data-ttu-id="27e21-341"><paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="27e21-341"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-342">エラーの検出が有効になり、<paramref name="s" /> に無効な文字のシーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-342">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="27e21-343">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-343">-or-</span></span> 
 <span data-ttu-id="27e21-344"><paramref name="bytes" /> には、<paramref name="byteIndex" /> から配列の末尾までに十分なサイズがなく、結果のバイトを格納できません。</span><span class="sxs-lookup"><span data-stu-id="27e21-344"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="27e21-345">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-345">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-346">および</span><span class="sxs-lookup"><span data-stu-id="27e21-346">-and-</span></span> 
 <span data-ttu-id="27e21-347"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-347"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="27e21-348">バイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="27e21-348">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF32Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="27e21-349">デコードする最初のバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="27e21-349">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="27e21-350">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-350">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="27e21-351">指定したバイト ポインターで始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="27e21-351">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="27e21-352">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-352">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-353"><xref:System.Text.UTF32Encoding.GetCharCount%2A> 必要な正確な配列のサイズを計算、<xref:System.Text.UTF32Encoding.GetChars%2A>結果の文字を格納する方法。</span><span class="sxs-lookup"><span data-stu-id="27e21-353"><xref:System.Text.UTF32Encoding.GetCharCount%2A> calculates the exact array size required by the <xref:System.Text.UTF32Encoding.GetChars%2A> method to store the resulting characters.</span></span> <span data-ttu-id="27e21-354">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-354">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="27e21-355"><xref:System.Text.UTF32Encoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-355">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-356">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-356">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-357">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-357">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-358"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-358"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-359"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-359"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="27e21-360">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-360">-or-</span></span> 
<span data-ttu-id="27e21-361">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="27e21-361">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-362">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-362">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="27e21-363">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-363">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-364">および</span><span class="sxs-lookup"><span data-stu-id="27e21-364">-and-</span></span> 
 <span data-ttu-id="27e21-365"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-365"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="27e21-366">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="27e21-366">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="27e21-367">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="27e21-367">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.UTF32Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF32Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="27e21-368">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="27e21-368">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="27e21-369">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="27e21-369">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="27e21-370">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-370">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="27e21-371">指定したバイト配列からバイト シーケンスをデコードすることによって生成される文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="27e21-371">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="27e21-372">指定したバイト シーケンスをデコードすることによって生成される文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-372">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-373"><xref:System.Text.UTF32Encoding.GetCharCount%2A>メソッドで必要な正確な配列のサイズを計算、<xref:System.Text.UTF32Encoding.GetChars%2A>結果の文字を格納する方法。</span><span class="sxs-lookup"><span data-stu-id="27e21-373">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.UTF32Encoding.GetChars%2A> method to store the resulting characters.</span></span> <span data-ttu-id="27e21-374">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-374">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="27e21-375"><xref:System.Text.UTF32Encoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-375">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-376">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-376">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-377">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-377">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-378">次の例では、(バイト単位) の配列に文字列をエンコードし、文字の配列にバイトをデコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-378">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-379"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-379"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-380"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-380"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="27e21-381">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-381">-or-</span></span> 
 <span data-ttu-id="27e21-382"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="27e21-382"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="27e21-383">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-383">-or-</span></span> 
<span data-ttu-id="27e21-384">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="27e21-384">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-385">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-385">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="27e21-386">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-386">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-387">および</span><span class="sxs-lookup"><span data-stu-id="27e21-387">-and-</span></span> 
 <span data-ttu-id="27e21-388"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-388"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF32Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="27e21-389">バイト シーケンスを文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-389">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF32Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="27e21-390">デコードする最初のバイトへのポインター。</span><span class="sxs-lookup"><span data-stu-id="27e21-390">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="27e21-391">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-391">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="27e21-392">結果の文字セットの書き込みを開始する位置へのポインター。</span><span class="sxs-lookup"><span data-stu-id="27e21-392">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="27e21-393">書き込む文字の最大数。</span><span class="sxs-lookup"><span data-stu-id="27e21-393">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="27e21-394">指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-394">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="27e21-395"><paramref name="chars" /> によって示される位置に書き込まれる実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-395">The actual number of characters written at the location indicated by <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-396">必要な正確な配列のサイズを計算する<xref:System.Text.UTF32Encoding.GetChars%2A>、結果の文字を格納するには、呼び出す、<xref:System.Text.UTF32Encoding.GetCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-396">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="27e21-397">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-397">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="27e21-398"><xref:System.Text.UTF32Encoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-398">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-399">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-399">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-400">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-400">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="27e21-401">デコードするバイトの範囲にはバイト順マーク (BOM) が含まれていて、バイト配列が BOM 非対応の型のメソッドによって返される、このメソッドによって返される文字配列内で文字 U + FFFE が含まれます。</span><span class="sxs-lookup"><span data-stu-id="27e21-401">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="27e21-402">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-402">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="27e21-403">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-403">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="27e21-404">この場合、またはアプリケーションを使用してデータの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF32Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF32Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="27e21-404">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-405"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-405"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="27e21-406">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-406">-or-</span></span> 
 <span data-ttu-id="27e21-407"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="27e21-407"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-408"><paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-408"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-409">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-409">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="27e21-410">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-410">-or-</span></span> 
 <span data-ttu-id="27e21-411"><paramref name="charCount" /> が結果の文字数より少なくなっています。</span><span class="sxs-lookup"><span data-stu-id="27e21-411"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="27e21-412">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-412">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-413">および</span><span class="sxs-lookup"><span data-stu-id="27e21-413">-and-</span></span> 
 <span data-ttu-id="27e21-414"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-414"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="27e21-415">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="27e21-415">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="27e21-416">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="27e21-416">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF32Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="27e21-417">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="27e21-417">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="27e21-418">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="27e21-418">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="27e21-419">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-419">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="27e21-420">結果の文字のセットを格納する文字配列。</span><span class="sxs-lookup"><span data-stu-id="27e21-420">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="27e21-421">結果の文字のセットを書き込む開始位置のインデックス。</span><span class="sxs-lookup"><span data-stu-id="27e21-421">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="27e21-422">指定したバイト配列に格納されているバイト シーケンスを指定した文字配列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-422">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="27e21-423"><paramref name="chars" /> に書き込まれた実際の文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-423">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-424">必要な正確な配列のサイズを計算する<xref:System.Text.UTF32Encoding.GetChars%2A>、結果の文字を格納するには、呼び出す、<xref:System.Text.UTF32Encoding.GetCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-424">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="27e21-425">配列の最大サイズを計算するには、呼び出し、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-425">To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="27e21-426"><xref:System.Text.UTF32Encoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-426">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-427">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-427">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-428">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-428">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="27e21-429">デコードするバイトの範囲にはバイト順マーク (BOM) が含まれていて、バイト配列が BOM 非対応の型のメソッドによって返される、このメソッドによって返される文字配列内で文字 U + FFFE が含まれます。</span><span class="sxs-lookup"><span data-stu-id="27e21-429">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="27e21-430">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-430">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="27e21-431">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-431">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="27e21-432">この場合、またはアプリケーションを使用してデータの量が非常に大きいため、小さなブロックに分割する必要がある場合、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF32Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF32Encoding.GetEncoder%2A>メソッドでは、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="27e21-432">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-433">次の例では、(バイト単位) の配列に文字列をエンコードし、文字の配列にバイトをデコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-433">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-434"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-434"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="27e21-435">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-435">-or-</span></span> 
 <span data-ttu-id="27e21-436"><paramref name="chars" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="27e21-436"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-437"><paramref name="byteIndex" />、<paramref name="byteCount" />、または <paramref name="charIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-437"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="27e21-438">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-438">-or-</span></span> 
 <span data-ttu-id="27e21-439"><paramref name="byteindex" /> および <paramref name="byteCount" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="27e21-439"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="27e21-440">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-440">-or-</span></span> 
 <span data-ttu-id="27e21-441"><paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="27e21-441"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-442">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-442">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="27e21-443">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-443">-or-</span></span> 
 <span data-ttu-id="27e21-444"><paramref name="chars" /> には、<paramref name="charIndex" /> から配列の末尾までに十分なサイズがなく、結果の文字を格納できません。</span><span class="sxs-lookup"><span data-stu-id="27e21-444"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="27e21-445">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-445">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-446">および</span><span class="sxs-lookup"><span data-stu-id="27e21-446">-and-</span></span> 
 <span data-ttu-id="27e21-447"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-447"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF32Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27e21-448">UTF-32 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="27e21-448">Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="27e21-449">UTF-32 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換する <see cref="T:System.Text.Decoder" />。</span><span class="sxs-lookup"><span data-stu-id="27e21-449">A <see cref="T:System.Text.Decoder" /> that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-450"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>メソッドと同様の方法で、文字のシーケンシャル ブロックにバイトのシーケンシャル ブロックを変換する、<xref:System.Text.UTF32Encoding.GetChars%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-450">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF32Encoding.GetChars%2A> method.</span></span> <span data-ttu-id="27e21-451">ただし、<xref:System.Text.Decoder>のブロックをまたぐバイト シーケンスが正しくデコードするための呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="27e21-451">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="27e21-452"><xref:System.Text.Decoder>もデータ ブロックの末尾にある後続バイトが保持され、[次へ] のデコード操作で末尾のバイトを使用します。</span><span class="sxs-lookup"><span data-stu-id="27e21-452">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="27e21-453">そのため、<xref:System.Text.UTF32Encoding.GetDecoder%2A>と<xref:System.Text.UTF32Encoding.GetEncoder%2A>は完全なデータ ストリームではなくデータのブロックを頻繁にこれらの操作を処理するためにネットワーク転送と、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="27e21-453">Therefore, <xref:System.Text.UTF32Encoding.GetDecoder%2A> and <xref:System.Text.UTF32Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="27e21-454">エラーの検出が有効なかどうか、つまり、`throwOnInvalidCharacters`コンス トラクターのパラメーターに設定された`true`でエラーの検出が有効にも、<xref:System.Text.Decoder>このメソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-454">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor was set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="27e21-455">エラー検出が有効に無効なシーケンスが発生した場合は、デコーダーの状態が定義されていないと、処理を停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-455">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-456">次の例では、(バイト単位) の配列を文字列にエンコードし、文字の配列にバイトをデコードするエンコーダーとデコーダーを使用します。</span><span class="sxs-lookup"><span data-stu-id="27e21-456">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="27e21-457">エンコーディングの理解</span><span class="sxs-lookup"><span data-stu-id="27e21-457">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF32Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27e21-458">Unicode 文字のシーケンスを UTF-32 でエンコードされたバイト シーケンスに変換するエンコーダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="27e21-458">Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="27e21-459">Unicode 文字のシーケンスを UTF-32 でエンコードされたバイト シーケンスに変換する <see cref="T:System.Text.Encoder" />。</span><span class="sxs-lookup"><span data-stu-id="27e21-459">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-460"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>メソッドと同様の方法で、バイトのブロックをシーケンシャルに文字のシーケンシャル ブロックを変換する、<xref:System.Text.UTF32Encoding.GetBytes%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-460">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF32Encoding.GetBytes%2A> method.</span></span> <span data-ttu-id="27e21-461">ただし、<xref:System.Text.Encoder>のブロックをまたぐ文字シーケンスを正しくエンコードすることができますので、呼び出しの間の状態情報を保持します。</span><span class="sxs-lookup"><span data-stu-id="27e21-461">However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="27e21-462"><xref:System.Text.Encoder>も末尾の保持のデータ ブロックの末尾に文字し、末尾の文字を次のエンコードの操作に使用されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-462">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="27e21-463">たとえば、データ ブロック比類のない上位サロゲートで終了し、次のデータ ブロックで下位サロゲートが一致する場合があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-463">For example, a data block might end with an unmatched high-surrogate, and the matching low-surrogate might be in the next data block.</span></span> <span data-ttu-id="27e21-464">そのため、<xref:System.Text.UTF32Encoding.GetDecoder%2A>と<xref:System.Text.UTF32Encoding.GetEncoder%2A>は完全なデータ ストリームではなくデータのブロックを頻繁にこれらの操作を処理するためにネットワーク転送と、ファイル操作に便利です。</span><span class="sxs-lookup"><span data-stu-id="27e21-464">Therefore, <xref:System.Text.UTF32Encoding.GetDecoder%2A> and <xref:System.Text.UTF32Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="27e21-465">エラーの検出が有効なかどうか、つまり、`throwOnInvalidCharacters`コンス トラクターのパラメーターに設定された`true`でエラーの検出が有効にも、<xref:System.Text.Encoder>このメソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-465">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor was set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method.</span></span> <span data-ttu-id="27e21-466">エラー検出が有効に無効なシーケンスが発生した場合は、エンコーダーの状態が定義されていないと、処理を停止する必要があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-466">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-467">次の例では、(バイト単位) の配列を文字列にエンコードし、文字の配列にバイトをデコードするエンコーダーとデコーダーを使用します。</span><span class="sxs-lookup"><span data-stu-id="27e21-467">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="27e21-468">エンコーディングの理解</span><span class="sxs-lookup"><span data-stu-id="27e21-468">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF32Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27e21-469">現在のインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="27e21-469">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="27e21-470">現在の <see cref="T:System.Text.UTF32Encoding" /> オブジェクトのハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="27e21-470">The hash code for the current <see cref="T:System.Text.UTF32Encoding" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF32Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="27e21-471">エンコードする文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-471">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="27e21-472">指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</span><span class="sxs-lookup"><span data-stu-id="27e21-472">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="27e21-473">指定した文字数をエンコードすることによって生成される最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-473">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-474">必要な正確な配列のサイズを計算する<xref:System.Text.UTF32Encoding.GetBytes%2A>呼び出す結果のバイトを格納する、<xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-474">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="27e21-475">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-475">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="27e21-476"><xref:System.Text.UTF32Encoding.GetByteCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-476">The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-477"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 現在選択されているは、最悪のケースを含め、最悪の番号は、<xref:System.Text.EncoderFallback>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-477"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="27e21-478">フォールバックが大きくなる可能性の文字列で選択されている場合<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>大きな値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="27e21-478">If a fallback is chosen with a potentially large string,  <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="27e21-479">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="27e21-479">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="27e21-480">大きな文字列の場合は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでのエラーのキャッチを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-480">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="27e21-481">別のアプローチを検討してください。 を使用したい場合がありますも<xref:System.Text.UTF32Encoding.GetByteCount%2A>または<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-481">You might also want to consider a different approach and use <xref:System.Text.UTF32Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="27e21-482"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> リレーションシップを持たない<xref:System.Text.UTF32Encoding.GetChars%2A>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-482"><xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> has no relationship to <xref:System.Text.UTF32Encoding.GetChars%2A>.</span></span> <span data-ttu-id="27e21-483">同様の機能を使用する必要がある場合<xref:System.Text.UTF32Encoding.GetChars%2A>を使用して、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-483">If you need a similar function to use with <xref:System.Text.UTF32Encoding.GetChars%2A>, use <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27e21-484">`GetMaxByteCount(N)` 同じ値とは限りません`N* GetMaxByteCount(1)`します。</span><span class="sxs-lookup"><span data-stu-id="27e21-484">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-485">次の例は、文字列のエンコードに必要なバイト数を決定、文字列をエンコードし、結果のバイトが表示されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-485">The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-486"><paramref name="charCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-486"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="27e21-487">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-487">-or-</span></span> 
<span data-ttu-id="27e21-488">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="27e21-488">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="27e21-489">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-489">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-490">および</span><span class="sxs-lookup"><span data-stu-id="27e21-490">-and-</span></span> 
 <span data-ttu-id="27e21-491"><see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-491"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF32Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="27e21-492">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-492">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="27e21-493">指定したバイト数をデコードすることによって生成される最大文字数を計算します。</span><span class="sxs-lookup"><span data-stu-id="27e21-493">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="27e21-494">指定したバイト数をデコードすることによって生成される最大文字数。</span><span class="sxs-lookup"><span data-stu-id="27e21-494">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-495">必要な正確な配列のサイズを計算する<xref:System.Text.UTF32Encoding.GetChars%2A>を呼び出し、結果の文字を格納する、<xref:System.Text.UTF32Encoding.GetCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-495">To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="27e21-496">配列の最大サイズを計算するを呼び出す、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-496">To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="27e21-497"><xref:System.Text.UTF32Encoding.GetCharCount%2A>メソッドが一般に、メモリが少ないを割り当てるときに、<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>メソッドは通常、高速に実行されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-497">The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="27e21-498"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 現在選択されているは、最悪のケースを含め、最悪の番号は、<xref:System.Text.DecoderFallback>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-498"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="27e21-499">フォールバックが大きくなる可能性の文字列で選択されている場合<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>大きな値を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="27e21-499">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="27e21-500">ほとんどの場合は、このメソッドは、短い文字列では適切な数値を返します。</span><span class="sxs-lookup"><span data-stu-id="27e21-500">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="27e21-501">大きな文字列の場合は、非常に大きなバッファーを使用してより適切なバッファーを超えているまれなケースでのエラーのキャッチを選択する必要があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-501">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="27e21-502">別のアプローチを検討してください。 を使用したい場合がありますも<xref:System.Text.UTF32Encoding.GetCharCount%2A>または<xref:System.Text.Decoder.Convert%2A>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-502">You might also want to consider a different approach and use <xref:System.Text.UTF32Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.</span></span>  
  
 <span data-ttu-id="27e21-503"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> リレーションシップを持たない<xref:System.Text.UTF32Encoding.GetBytes%2A>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-503"><xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> has no relationship to <xref:System.Text.UTF32Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="27e21-504">同様の機能を使用する必要がある場合<xref:System.Text.UTF32Encoding.GetBytes%2A>を使用して、<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-504">If you need a similar function to use with <xref:System.Text.UTF32Encoding.GetBytes%2A>, use <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27e21-505">`GetMaxCharCount(N)` 同じ値とは限りません`N* GetMaxCharCount(1)`します。</span><span class="sxs-lookup"><span data-stu-id="27e21-505">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-506">次の例では、(バイト単位) の配列に文字列をエンコードし、文字の配列にバイトをデコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-506">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-507"><paramref name="byteCount" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-507"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="27e21-508">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-508">-or-</span></span> 
<span data-ttu-id="27e21-509">結果のバイト数が、整数として返すことのできる最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="27e21-509">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="27e21-510">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-510">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="27e21-511">および</span><span class="sxs-lookup"><span data-stu-id="27e21-511">-and-</span></span> 
 <span data-ttu-id="27e21-512"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-512"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="uTF32Encoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27e21-513"><see cref="T:System.Text.UTF32Encoding" /> オブジェクトが UTF-32 形式でエンコードされた Unicode バイト順マークを提供するように構成されている場合、そのようなマークが返されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-513">Returns a Unicode byte order mark encoded in UTF-32 format, if the <see cref="T:System.Text.UTF32Encoding" /> object is configured to supply one.</span></span></summary>
        <returns><span data-ttu-id="27e21-514">Unicode のバイト順マークが格納されたバイト配列を提供するように <see cref="T:System.Text.UTF32Encoding" /> オブジェクトが構成されている場合には、そうしたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="27e21-514">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF32Encoding" /> object is configured to supply one.</span></span> <span data-ttu-id="27e21-515">それ以外の場合、このメソッドは長さがゼロのバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="27e21-515">Otherwise, this method returns a zero-length byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-516"><xref:System.Text.UTF32Encoding>オブジェクトが、プリアンブルは、エンコードの処理に起因するバイトのシーケンスを先頭バイトの配列を提供できます。</span><span class="sxs-lookup"><span data-stu-id="27e21-516">The <xref:System.Text.UTF32Encoding> object can provide a preamble, which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="27e21-517">バイト オーダー マーク (コード ポイント U + 0000 U+FEFF) でエンコードされたバイトのシーケンスを付けるには、バイト順と変換形式、または UTF デコーダーことができます。</span><span class="sxs-lookup"><span data-stu-id="27e21-517">Prefacing a sequence of encoded bytes with a byte order mark (code points U+0000 U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="27e21-518">Unicode バイト順マーク (BOM) が (16 進数) で、次のようにシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-518">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="27e21-519">ビッグ エンディアン バイト順: 00 00 FE FF</span><span class="sxs-lookup"><span data-stu-id="27e21-519">Big endian byte order: 00 00 FE FF</span></span>  
  
-   <span data-ttu-id="27e21-520">リトル エンディアン バイト順: FF FE 00 00</span><span class="sxs-lookup"><span data-stu-id="27e21-520">Little endian byte order: FF FE 00 00</span></span>  
  
 <span data-ttu-id="27e21-521">インスタンス化することができます、<xref:System.Text.UTF32Encoding>オブジェクト<xref:System.Text.UTF32Encoding.GetPreamble%2A>メソッドは、次の方法で有効な BOM を返します。</span><span class="sxs-lookup"><span data-stu-id="27e21-521">You can instantiate a <xref:System.Text.UTF32Encoding> object whose <xref:System.Text.UTF32Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="27e21-522">取得することによって、<xref:System.Text.UTF32Encoding>によって返されるオブジェクト、<xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="27e21-522">By retrieving the <xref:System.Text.UTF32Encoding> object returned by the <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="27e21-523">パラメーターなしで呼び出すことによって<xref:System.Text.UTF32Encoding.%23ctor>インスタンスを作成するコンス トラクター、<xref:System.Text.UTF32Encoding>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="27e21-523">By calling the parameterless <xref:System.Text.UTF32Encoding.%23ctor> constructor to instantiate a <xref:System.Text.UTF32Encoding> object.</span></span>  
  
-   <span data-ttu-id="27e21-524">指定することによって`true`の値として、`byteOrderMark`への引数、<xref:System.Text.UTF32Encoding.%23ctor%2A>と<xref:System.Text.UTF32Encoding.%23ctor%2A>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="27e21-524">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UTF32Encoding.%23ctor%2A> and <xref:System.Text.UTF32Encoding.%23ctor%2A> constructors.</span></span>  
  
 <span data-ttu-id="27e21-525">特定の id への参照が失われている場合はそのファイルのエンコーディングのほとんどを提供するために、BOM を使用することをお勧め、<xref:System.Text.UTF32Encoding>オブジェクト、たとえば、タグなしまたは web のデータを不適切なタグまたはランダムなテキスト ファイルに格納されたときに、ビジネスは、国際的な懸案事項やその他のデータがありませんでした。</span><span class="sxs-lookup"><span data-stu-id="27e21-525">We recommend that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <xref:System.Text.UTF32Encoding> object, for example, untagged or improperly tagged web data, or random text files stored when a business did not have international concerns or other data.</span></span> <span data-ttu-id="27e21-526">多くの場合、データが一貫して適切なタグとは、ユーザーの問題を回避できる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-526">Often, user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="27e21-527">エンコードの種類を提供する標準では、BOM は、少し冗長です。</span><span class="sxs-lookup"><span data-stu-id="27e21-527">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="27e21-528">ただし、server を正しくエンコード ヘッダーを送信するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="27e21-528">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="27e21-529">または、そのできますフォールバックとして、エンコードを紛失するそれ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="27e21-529">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="27e21-530">BOM を使用するいくつかのデメリットがあります。</span><span class="sxs-lookup"><span data-stu-id="27e21-530">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="27e21-531">たとえば、BOM を使用するデータベース フィールドを制限する方法を知ることは困難なできます。</span><span class="sxs-lookup"><span data-stu-id="27e21-531">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="27e21-532">ファイルの連結問題になる可能性も、たとえば、ファイルを結合するように、不要な文字データの途中で終了できるようにします。</span><span class="sxs-lookup"><span data-stu-id="27e21-532">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="27e21-533">いくつかの短所にもかかわらずただし、部品表の使用が強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="27e21-533">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="27e21-534">バイト オーダーとバイト順マークの詳細については、Unicode 標準を参照してください、 [Unicode ホーム ページ](https://go.microsoft.com/fwlink/?LinkId=37123)します。</span><span class="sxs-lookup"><span data-stu-id="27e21-534">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="27e21-535">エンコードされたバイトが正しくデコードするためには、エンコード済みバイトのプリアンブルとプレフィックスにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-535">To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble.</span></span> <span data-ttu-id="27e21-536">なお、<xref:System.Text.UTF32Encoding.GetBytes%2A>メソッドでエンコードされたバイトのシーケンスに BOM が付加しない; 開発者の責任には、適切なバイト ストリームの先頭の BOM を指定します。</span><span class="sxs-lookup"><span data-stu-id="27e21-536">Note that the <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-537">次のコード例を取得し、バイト順のマークを付けるさまざまな表示<xref:System.Text.UTF32Encoding>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="27e21-537">The following code example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.</span></span>  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 <span data-ttu-id="27e21-538">次の例では、2 つのインスタンス化します<xref:System.Text.UTF32Encoding>オブジェクト、最初は、BOM との行われますが、2 つ目は提供しません。</span><span class="sxs-lookup"><span data-stu-id="27e21-538">The following example instantiates two <xref:System.Text.UTF32Encoding> objects, the first of which does not provide a BOM and the second of which does.</span></span> <span data-ttu-id="27e21-539">呼び出して、 <xref:System.Text.UTF32Encoding.GetPreamble%2A> UTF 32 エンコードされた文字列を書き込む前に、ファイルに BOM を書き込む方法。</span><span class="sxs-lookup"><span data-stu-id="27e21-539">It then calls the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UTF-32-encoded string.</span></span> <span data-ttu-id="27e21-540">2 つ目のエンコーダーからのバイトを保存するファイルが 4 バイトで、出力の例に示すようを 1 つ目です。</span><span class="sxs-lookup"><span data-stu-id="27e21-540">As the output from the example shows, the file that saves the bytes from the second encoder has four more bytes that the first.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/getpreamble1.vb#2)]  
  
 <span data-ttu-id="27e21-541">使用して、ファイルを比較することもできます、`fc`するか、コンソール ウィンドウでコマンドを含む 16 進表示モードをテキスト エディターでファイルを検査できます。</span><span class="sxs-lookup"><span data-stu-id="27e21-541">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="27e21-542">Utf-32 をサポートするエディターでファイルが開かれるときに、BOM が表示されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="27e21-542">Note that when the file is opened in an editor that supports UTF-32, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF32Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="27e21-543">デコード対象のバイト シーケンスが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="27e21-543">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="27e21-544">デコードする最初のバイトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="27e21-544">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="27e21-545">デコードするバイト数。</span><span class="sxs-lookup"><span data-stu-id="27e21-545">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="27e21-546">バイト配列に格納されているある範囲のバイトを文字列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-546">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="27e21-547">指定したバイト シーケンスのデコード結果が格納されている文字列。</span><span class="sxs-lookup"><span data-stu-id="27e21-547">A string that contains the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27e21-548">無効なシーケンス エラーの検出でこのメソッドをスローすると、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="27e21-548">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="27e21-549">エラーの検出、無効なシーケンスは無視され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="27e21-549">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="27e21-550">デコードするバイトの範囲には、バイト順マーク (BOM) が含まれています。 バイト配列が BOM 非対応の型のメソッドによって返される、このメソッドによって返される文字配列内で文字 U + FFFE が含まれます。</span><span class="sxs-lookup"><span data-stu-id="27e21-550">If the range of bytes to be decoded includes the byte order mark (BOM), and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="27e21-551">これを削除するには呼び出すことによって、<xref:System.String.TrimStart%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-551">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="27e21-552">など、ストリームから読み取られるデータを変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。</span><span class="sxs-lookup"><span data-stu-id="27e21-552">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="27e21-553">ここでは、データの量が非常に大きいため、小さなブロックに分割する必要がある場合、アプリケーションで使用するか、<xref:System.Text.Decoder>または<xref:System.Text.Encoder>によって提供される、<xref:System.Text.UTF32Encoding.GetDecoder%2A>メソッドまたは<xref:System.Text.UTF32Encoding.GetEncoder%2A>メソッド、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="27e21-553">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27e21-554">次の例では、バイト、リトル エンディアン順でおよびその他のビッグ エンディアン順での 2 つの配列の配列に文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-554">The following example encodes a string into two arrays arrays of bytes, one in little-endian order and the other in big-endian order.</span></span> <span data-ttu-id="27e21-555">文字列、バイトをデコードします。</span><span class="sxs-lookup"><span data-stu-id="27e21-555">It then decodes the bytes back into a string.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/getstring.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString.vb#1)]  
  
 <span data-ttu-id="27e21-556">次の例では、呼び出すことによって、配列を初期化します、<xref:System.Text.UTF32Encoding.GetByteCount%2A>正確にエンコードされた文字列とバイト順マーク (BOM) のサイズを追加し、必要なのバイト数を調べます。</span><span class="sxs-lookup"><span data-stu-id="27e21-556">The following example initializes an array by calling the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="27e21-557">例を呼び出して、<xref:System.Text.UTF32Encoding.GetPreamble%2A>は BOM を呼び出す前に配列を格納する方法、<xref:System.Text.UTF32Encoding.GetBytes%2A>配列にエンコードされたバイトを格納するメソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-557">The example then calls the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF32Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="27e21-558">例を呼び出して、<xref:System.Text.UTF32Encoding.GetString%2A>文字列をデコードするメソッド。</span><span class="sxs-lookup"><span data-stu-id="27e21-558">The example then calls the <xref:System.Text.UTF32Encoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF32Encoding.GetString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/GetString1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.GetString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString1.vb#2)]  
  
 <span data-ttu-id="27e21-559">ここでデコードされた文字列が異なることから元の文字列では、32 ビットのバイト順マーク U + FFFE u+0000 で始まっているので注意してください。</span><span class="sxs-lookup"><span data-stu-id="27e21-559">Note that in this case the decoded string differs from the original string, since it begins with a 32-bit byte order mark U+FFFE U+0000.</span></span> <span data-ttu-id="27e21-560">つまり、2 つの文字列が、等しくないものとして比較されます、文字列が出力の場合、BOM は置換文字として表示されることと"?"。</span><span class="sxs-lookup"><span data-stu-id="27e21-560">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="27e21-561"><paramref name="bytes" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="27e21-561"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27e21-562"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="27e21-562"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="27e21-563">- または -</span><span class="sxs-lookup"><span data-stu-id="27e21-563">-or-</span></span> 
 <span data-ttu-id="27e21-564"><paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="27e21-564"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="27e21-565">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="27e21-565">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="27e21-566">フォールバックが発生しました (詳細な説明は、「[.NET Framework における文字エンコーディング](~/docs/standard/base-types/character-encoding.md)」をご覧ください)</span><span class="sxs-lookup"><span data-stu-id="27e21-566">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)</span></span> 
<span data-ttu-id="27e21-567">および</span><span class="sxs-lookup"><span data-stu-id="27e21-567">-and-</span></span> 
 <span data-ttu-id="27e21-568"><see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</span><span class="sxs-lookup"><span data-stu-id="27e21-568"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>