<Type Name="Cer" FullName="System.Runtime.ConstrainedExecution.Cer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="23cdbbda92dc12a56457f1d88e9fa3cae6c7ff8a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58725614" /></Metadata><TypeSignature Language="C#" Value="public enum Cer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Cer extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ConstrainedExecution.Cer" />
  <TypeSignature Language="VB.NET" Value="Public Enum Cer" />
  <TypeSignature Language="C++ CLI" Value="public enum class Cer" />
  <TypeSignature Language="F#" Value="type Cer = " />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4e7d2-101">制約された実行領域内で呼び出されたときのメソッドの動作を指定します。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-101">Specifies a method's behavior when called within a constrained execution region.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e7d2-102"><xref:System.Runtime.ConstrainedExecution.Cer>列挙体は、メソッド、型、または制約された実行領 (域 CER) 内のアセンブリの動作を指定します。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-102">The <xref:System.Runtime.ConstrainedExecution.Cer> enumeration specifies the behavior of a method, type, or assembly within a constrained execution region (CER).</span></span> <span data-ttu-id="4e7d2-103">エンティティが成功するかを示す 3 つの使用可能な値のいずれかの使用は、CER の知識がないか、成功または失敗をレポートできなくなる可能性があります (確定的に)。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-103">Use one of the three available values to indicate that the entity will succeed, has no knowledge of a CER, or might (deterministically) be able to report success or failure.</span></span>  
  
 <span data-ttu-id="4e7d2-104">CER は、コードの領域を実行するための保証を提供します。 中断のない場合でも、中止されたスレッドのメモリ不足の例外、またはスタック オーバーフローなどの非同期の例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-104">A CER provides guarantees that the region of code will execute uninterrupted even if an asynchronous exception such as an aborted thread out-of-memory exception, or stack overflow is raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e7d2-105">次のコード例は、の使用を示します、<xref:System.Runtime.ConstrainedExecution.Cer>列挙メソッドの制約された実行領域を指定する場合。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-105">The following code example demonstrates the use of the <xref:System.Runtime.ConstrainedExecution.Cer> enumeration when specifying a constrained execution region for a method.</span></span> <span data-ttu-id="4e7d2-106">このコード例が示されている例の一部、<xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-106">This code example is part of a larger example provided for the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> constructor.</span></span>  
  
 [!code-csharp[System.Runtime.ConstrainedExecution#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution/cs/program.cs#3)]
 [!code-vb[System.Runtime.ConstrainedExecution#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions" />
    <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle)" />
    <related type="Article" href="https://msdn.microsoft.com/library/99354547-39c1-4b0b-8553-938e8f8d1808"><span data-ttu-id="4e7d2-107">制約された実行領域</span><span class="sxs-lookup"><span data-stu-id="4e7d2-107">Constrained Execution Regions</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/cf624c1f-c160-46a1-bb2b-213587688da7"><span data-ttu-id="4e7d2-108">信頼性に関するベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="4e7d2-108">Reliability Best Practices</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="MayFail">
      <MemberSignature Language="C#" Value="MayFail" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer MayFail = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.MayFail" />
      <MemberSignature Language="VB.NET" Value="MayFail" />
      <MemberSignature Language="C++ CLI" Value="MayFail" />
      <MemberSignature Language="F#" Value="MayFail = 1" Usage="System.Runtime.ConstrainedExecution.Cer.MayFail" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="4e7d2-109">例外条件が発生した場合、メソッドが失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-109">In the face of exceptional conditions, the method might fail.</span></span> <span data-ttu-id="4e7d2-110">この場合、メソッドは、成功したか失敗したかの報告を呼び出し元のメソッドに戻します。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-110">In this case, the method will report back to the calling method whether it succeeded or failed.</span></span> <span data-ttu-id="4e7d2-111">このメソッドで確実に戻り値を報告できるようにするためには、メソッド本体を CER 内に含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-111">The method must have a CER around the method body to ensure that it can report the return value.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Runtime.ConstrainedExecution.Cer.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="4e7d2-112">メソッド、型、またはアセンブリには、CER の概念はありません。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-112">The method, type, or assembly has no concept of a CER.</span></span> <span data-ttu-id="4e7d2-113">この値では、CER の保証を利用しません。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-113">It does not take advantage of CER guarantees.</span></span> <span data-ttu-id="4e7d2-114">これは以下を意味します。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-114">This implies the following:</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="4e7d2-115">例外的な状況が発生した場合、メソッドが失敗します。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-115">In the face of exceptional conditions the method might fail.</span></span>  
  
-   <span data-ttu-id="4e7d2-116">メソッドがありますまたは失敗したレポートではなくの可能性があります (非決定的です)。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-116">The method might or might not report that it failed (it is non-deterministic).</span></span>  
  
-   <span data-ttu-id="4e7d2-117">(これは最も可能性の高いシナリオです) に注意してください、メソッドが Cer を使用して書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-117">The method is not written with CERs in mind (which is the most likely scenario).</span></span>  
  
 <span data-ttu-id="4e7d2-118">として暗黙的にマークされたメソッド、型、またはアセンブリが明示的にマークされていない場合は成功、`Cer.None`します。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-118">If a method, type, or assembly is not explicitly marked to succeed, it is implicitly marked as `Cer.None`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Success">
      <MemberSignature Language="C#" Value="Success" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer Success = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.Success" />
      <MemberSignature Language="VB.NET" Value="Success" />
      <MemberSignature Language="C++ CLI" Value="Success" />
      <MemberSignature Language="F#" Value="Success = 2" Usage="System.Runtime.ConstrainedExecution.Cer.Success" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="4e7d2-119">例外条件が発生しても、メソッドは必ず成功します。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-119">In the face of exceptional conditions, the method is guaranteed to succeed.</span></span> <span data-ttu-id="4e7d2-120">非 CER 領域内から呼び出された場合でも、呼び出されるメソッドの周囲には常に CER を構築する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-120">You should always construct a CER around the method that is called, even when it is called from within a non-CER region.</span></span> <span data-ttu-id="4e7d2-121">期待どおりに実行された場合、メソッドは成功です。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-121">A method is successful if it accomplishes what is intended.</span></span> <span data-ttu-id="4e7d2-122">たとえば、<see cref="P:System.Collections.ArrayList.Count" /> を <c>ReliabilityContractAttribute(Cer.Success)</c> とマークすると、CER で実行された場合に常に <see cref="T:System.Collections.ArrayList" /> の要素数を返し、内部フィールドを未確定の状態にしておけないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="4e7d2-122">For example, marking <see cref="P:System.Collections.ArrayList.Count" /> with <c>ReliabilityContractAttribute(Cer.Success)</c> implies that when it is run under a CER, it always returns a count of the number of elements in the <see cref="T:System.Collections.ArrayList" /> and it can never leave the internal fields in an undetermined state.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>