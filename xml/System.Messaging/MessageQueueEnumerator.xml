<Type Name="MessageQueueEnumerator" FullName="System.Messaging.MessageQueueEnumerator">
  <TypeSignature Language="C#" Value="public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="a54e0-101">メッセージ キュー内のメッセージを列挙するための順方向専用カーソルを提供します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a54e0-102">使用して<xref:System.Messaging.MessageQueueEnumerator>動的とのやり取り、ネットワーク上のキューです。</span><span class="sxs-lookup"><span data-stu-id="a54e0-102">Use <xref:System.Messaging.MessageQueueEnumerator> for dynamic interaction with queues on the network.</span></span> <span data-ttu-id="a54e0-103">メソッドを介して使用できる、<xref:System.Messaging.MessageQueue>クラスは、いずれかを返すことができます、<xref:System.Messaging.MessageQueueEnumerator>キュー、または、時にキュー コレクションのスナップショットを格納する配列の動的な一覧を含む、指定されたメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="a54e0-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageQueueEnumerator> containing a dynamic list of queues, or an array that contains a snapshot of the queue collection at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="a54e0-104">ネットワークでのキューの定義済みの順序はありません。</span><span class="sxs-lookup"><span data-stu-id="a54e0-104">There is no defined ordering of queues in a network.</span></span> <span data-ttu-id="a54e0-105">たとえば、コンピューター、ラベル、public または private の状態を順序付けられた、またはその他のユーザーがアクセスできる条件はありません。</span><span class="sxs-lookup"><span data-stu-id="a54e0-105">They are not ordered, for example, by computer, label, public or private status, or other user-accessible criteria.</span></span> <span data-ttu-id="a54e0-106">A<xref:System.Messaging.MessageQueueEnumerator>カーソル、動的なリストの先頭に初期化します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-106">A <xref:System.Messaging.MessageQueueEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="a54e0-107">列挙体の最初のキューにカーソルを移動するには呼び出すことによって<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a54e0-107">You can move the cursor to the first queue of the enumeration by calling <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="a54e0-108">列挙子が初期化された後に行うこともできます<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>残りのキューにします。</span><span class="sxs-lookup"><span data-stu-id="a54e0-108">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to step forward through the remaining queues.</span></span>  
  
 <span data-ttu-id="a54e0-109">ステップ後退することはできません、<xref:System.Messaging.MessageQueueEnumerator>です。</span><span class="sxs-lookup"><span data-stu-id="a54e0-109">It is not possible to step backward with a <xref:System.Messaging.MessageQueueEnumerator>.</span></span> <span data-ttu-id="a54e0-110">カーソルは、キューの列挙を前方移動を許可するだけです。</span><span class="sxs-lookup"><span data-stu-id="a54e0-110">A cursor only allows forward movement through the queue enumeration.</span></span> <span data-ttu-id="a54e0-111">ただし、呼び出す<xref:System.Messaging.MessageQueueEnumerator.Reset%2A>列挙体をリセットし、リストの先頭にカーソルを置きます。</span><span class="sxs-lookup"><span data-stu-id="a54e0-111">However, you can call <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to reset the enumeration and put the cursor at the beginning of the list again.</span></span> <span data-ttu-id="a54e0-112">列挙子は動的であるために、カーソルの現在位置より後に追加するキューは、列挙子によってアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="a54e0-112">Because the enumerator is dynamic, a queue that is appended beyond the cursor's current position can be accessed by the enumerator.</span></span> <span data-ttu-id="a54e0-113">カーソルの現在位置の前に挿入されているキューは、最初の reset を呼び出すアクセスできません。</span><span class="sxs-lookup"><span data-stu-id="a54e0-113">A queue that is inserted before the cursor's current position cannot be accessed without first calling Reset.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a54e0-114">次のコード例は、ネットワーク内のすべてのメッセージ キューを反復処理し、各キューのパスを調査します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-114">The following code example iterates through all the message queues in the network, and examines the path for each queue.</span></span> <span data-ttu-id="a54e0-115">最後に、ネットワーク上のパブリック キューの数を表示します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-115">Finally, it displays the number of public queues on the network.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CPP/mqgetmessagequeueenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CS/mqgetmessagequeueenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/VB/mqgetmessagequeueenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a54e0-116">列挙子と関連付けられたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-116">Frees the resources associated with the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a54e0-117">オペレーティング システムは、開いているハンドルが保持されます<xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>カーソルの有効期間中に、キューの列挙子にします。</span><span class="sxs-lookup"><span data-stu-id="a54e0-117">The operating system retains an open handle, <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, to the queue enumerator during the lifetime of the cursor.</span></span> <span data-ttu-id="a54e0-118">列挙子の操作が完了したら、呼び出す<xref:System.Messaging.MessageQueueEnumerator.Close%2A>ハンドルに関連付けられているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-118">When you finish working with the enumerator, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ Current { System::Messaging::MessageQueue ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a54e0-119">列挙体の現在の <see cref="T:System.Messaging.MessageQueue" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-119">Gets the current <see cref="T:System.Messaging.MessageQueue" /> of the enumeration.</span></span></summary>
        <value><span data-ttu-id="a54e0-120">カーソルが現在位置しているキュー。</span><span class="sxs-lookup"><span data-stu-id="a54e0-120">The queue at which the cursor is currently positioned.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a54e0-121">列挙子の作成時に指定していない、何もするので<xref:System.Messaging.MessageQueueEnumerator.Current%2A>が無効である場合は、アクセス例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="a54e0-121">When the enumerator is created, it does not point to anything, so <xref:System.Messaging.MessageQueueEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="a54e0-122">呼び出す必要があります<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>に列挙体の最初のキューにカーソルを移動します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-122">You must call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to position the cursor at the first queue in the enumeration.</span></span>  
  
 <span data-ttu-id="a54e0-123">複数回呼び出す<xref:System.Messaging.MessageQueueEnumerator.Current%2A>なしの介在する呼び出しを<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>は同じを返します<xref:System.Messaging.MessageQueue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a54e0-123">Multiple calls to <xref:System.Messaging.MessageQueueEnumerator.Current%2A> with no intervening calls to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return the same <xref:System.Messaging.MessageQueue> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a54e0-124">最初に <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> を呼び出す前に <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> を呼び出しました。</span><span class="sxs-lookup"><span data-stu-id="a54e0-124">You called <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />.</span></span> <span data-ttu-id="a54e0-125">カーソルは、列挙体の中の最初のキューより前に位置しています。</span><span class="sxs-lookup"><span data-stu-id="a54e0-125">The cursor is located before the first queue in the enumeration.</span></span>  
  
 <span data-ttu-id="a54e0-126">- または -</span><span class="sxs-lookup"><span data-stu-id="a54e0-126">-or-</span></span>  
  
 <span data-ttu-id="a54e0-127"><see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> の呼び出しにより false (列挙体の中の最後のキューよりも後にカーソルが位置していることを示す) が返された後に <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> を呼び出しました。</span><span class="sxs-lookup"><span data-stu-id="a54e0-127">You called <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> had returned false (indicating the cursor is located after the last queue in the enumeration).</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.Reset" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a54e0-128">
          <see cref="T:System.Messaging.MessageQueueEnumerator" /> で使用したリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-128">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a54e0-129">
          <see cref="T:System.Messaging.MessageQueueEnumerator" /> によって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-129">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a54e0-130">呼び出す<xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>によりによって使用されるリソース、<xref:System.Messaging.MessageQueueEnumerator>を他の目的に再割り当てされます。</span><span class="sxs-lookup"><span data-stu-id="a54e0-130">Calling <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="a54e0-131">詳細については<xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)です。</span><span class="sxs-lookup"><span data-stu-id="a54e0-131">For more information about <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="a54e0-132">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a54e0-132"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="a54e0-133"><see cref="T:System.Messaging.MessageQueueEnumerator" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-133">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a54e0-134">このメソッドは、パブリック<xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>メソッドおよび<xref:System.Object.Finalize%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a54e0-134">This method is called by the public <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="a54e0-135">`Dispose` プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="a54e0-135">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="a54e0-136"><xref:System.Object.Finalize%2A> 呼び出す`Dispose`で`disposing`'éý'`false`です。</span><span class="sxs-lookup"><span data-stu-id="a54e0-136"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="a54e0-137">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Messaging.MessageQueueEnumerator> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-137">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueEnumerator> references.</span></span> <span data-ttu-id="a54e0-138">このメソッドは、参照される各オブジェクトの `Dispose` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-138">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="a54e0-139"><see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="a54e0-139"><see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="a54e0-140"><see langword="Dispose(Boolean)" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a54e0-140">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="a54e0-141">実装する方法の詳細についての<see langword="Dispose" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。</span><span class="sxs-lookup"><span data-stu-id="a54e0-141">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="a54e0-142">詳細については<see langword="Dispose" />と<see langword="Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。</span><span class="sxs-lookup"><span data-stu-id="a54e0-142">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueEnumerator ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocatorHandle">
      <MemberSignature Language="C#" Value="public IntPtr LocatorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int LocatorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.LocatorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocatorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr LocatorHandle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a54e0-143">ネットワークでキューの位置を特定するのに使われるネイティブなメッセージ キュー ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-143">Gets the native Message Queuing handle used to locate queues in a network.</span></span></summary>
        <value><span data-ttu-id="a54e0-144">現在のキューへのネイティブ ハンドル。</span><span class="sxs-lookup"><span data-stu-id="a54e0-144">The native handle to the current queue.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a54e0-145">ときに不要になったこの<xref:System.Messaging.MessageQueueEnumerator>インスタンス、呼び出す<xref:System.Messaging.MessageQueueEnumerator.Close%2A>リソースには、このハンドルを解放します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-145">When you no longer need this <xref:System.Messaging.MessageQueueEnumerator> instance, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to free this handle to the resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="a54e0-146">ハンドルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="a54e0-146">The handle does not exist.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="a54e0-147">呼び出しコードに参照のアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="a54e0-147">The calling code does not have browse permissions.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a54e0-148">列挙体の次のキューに列挙子を進めます (そのキューが現在使用できる場合)。</span><span class="sxs-lookup"><span data-stu-id="a54e0-148">Advances the enumerator to the next queue of the enumeration, if one is currently available.</span></span></summary>
        <returns>
          <span data-ttu-id="a54e0-149">列挙子が次のキューに正常に進んだ場合は <see langword="true" />。列挙子が列挙体の最後に到達した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a54e0-149"><see langword="true" /> if the enumerator was successfully advanced to the next queue; <see langword="false" /> if the enumerator has reached the end of the enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a54e0-150"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 返します`false`列挙体に関連付けられたキューが存在しない場合にすぐにします。</span><span class="sxs-lookup"><span data-stu-id="a54e0-150"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> returns `false` immediately if there are no queues associated with the enumeration.</span></span>  
  
 <span data-ttu-id="a54e0-151"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 返されます`true`コレクションの末尾に達するまでします。</span><span class="sxs-lookup"><span data-stu-id="a54e0-151"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return `true` until it has reached the end of the collection.</span></span> <span data-ttu-id="a54e0-152">その`false`連続する呼び出しごとにします。</span><span class="sxs-lookup"><span data-stu-id="a54e0-152">It will then return `false` for each successive call.</span></span> <span data-ttu-id="a54e0-153">ただし 1 回<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>が返されました`false`へのアクセス、<xref:System.Messaging.MessageQueueEnumerator.Current%2A>プロパティは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="a54e0-153">However once <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> has returned `false`, accessing the <xref:System.Messaging.MessageQueueEnumerator.Current%2A> property will throw an exception.</span></span>  
  
 <span data-ttu-id="a54e0-154">作成した場合、列挙子は、概念的には前に位置付けられます最初<xref:System.Messaging.MessageQueue>列挙体、および最初の呼び出しの<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>ビューには、列挙体の最初のキューを表示します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-154">Upon creation, an enumerator is conceptually positioned before the first <xref:System.Messaging.MessageQueue> of the enumeration, and the first call to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> brings the first queue of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="a54e0-155">呼び出しコードに参照のアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="a54e0-155">The calling code does not have browse permissions.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.Reset" />
        <altmember cref="T:System.Messaging.MessageQueue" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a54e0-156">列挙体の先頭を指すようにカーソルをリセットします。</span><span class="sxs-lookup"><span data-stu-id="a54e0-156">Resets the cursor, so it points to the beginning of the enumeration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a54e0-157">列挙子は、順方向専用の方向に移動します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-157">An enumerator moves in a forward-only direction.</span></span> <span data-ttu-id="a54e0-158">キューの列挙体の先頭に戻るには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-158">Use this method to return to the beginning of the enumeration of queues.</span></span>  
  
 <span data-ttu-id="a54e0-159"><xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 最初のキュー、リスト内にカーソルを位置付けます。</span><span class="sxs-lookup"><span data-stu-id="a54e0-159"><xref:System.Messaging.MessageQueueEnumerator.Reset%2A> positions the cursor at the first queue in the list.</span></span> <span data-ttu-id="a54e0-160">呼び出す必要はありません<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>呼び出した後<xref:System.Messaging.MessageQueueEnumerator.Reset%2A>列挙体の最初のキューにカーソルを移動します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-160">You do not need to call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to move the cursor forward to the first queue in the enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a54e0-161">列挙体の現在の <see cref="T:System.Messaging.MessageQueue" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="a54e0-161">Gets the current <see cref="T:System.Messaging.MessageQueue" /> of the enumeration.</span></span></summary>
        <value><span data-ttu-id="a54e0-162">カーソルが現在位置しているキュー。</span><span class="sxs-lookup"><span data-stu-id="a54e0-162">The queue at which the cursor is currently positioned.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>