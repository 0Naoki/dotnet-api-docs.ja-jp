<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlMessageFormatter.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5563e678b40760a20036da2630095cb8b05f461de.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">563e678b40760a20036da2630095cb8b05f461de</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema definition.</source>
          <target state="translated">XSD スキーマ定義の XML 書式を使用して、メッセージ本文との間でオブジェクトをシリアル化および逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> is the default formatter that an instance of <ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph> uses to serialize messages written to the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>は、既定のフォーマッタのインスタンス<ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph>キューに書き込まれたメッセージのシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>When you create an instance of <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>, an instance of <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> is created for you and associated with the <ph id="ph3">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.</source>
          <target state="translated">インスタンスを作成するときに<ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>のインスタンス<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>は自動的に作成され、関連付け、<ph id="ph3">&lt;xref:System.Messaging.MessageQueue&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>You can specify a different formatter by creating it in your code and assigning it to the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph> property of your <ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.</source>
          <target state="translated">コードで作成およびに割り当てることによって、別のフォーマッタを指定できます、<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>A queue's default <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> instance can be used to write to the queue, but it cannot be used to read from the queue until you set either the <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> property on the formatter.</source>
          <target state="translated">キューの既定<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>インスタンスは、キューへの書き込みに使用できますが、いずれかに設定するまで、キューから読み取るには使用できません、<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>フォーマッタのプロパティです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>You can either set one or both of these values on the default formatter instance, or you can create a new instance of the formatter and set the values automatically by passing them as arguments into the appropriate <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">既定のフォーマッタ インスタンスに、これらの値の一方または両方を設定することができますか、または、フォーマッタの新しいインスタンスを作成し、適切なに引数として渡すことによって自動的に値を設定できます<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>When specifying <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>, type existence is checked at compile time rather than read time, reducing possibility for error.</source>
          <target state="translated">指定するときに<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>なく<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時に種類の存在をチェックします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> requires every entry to be fully qualified, specifying its assembly name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> すべてのエントリの完全修飾アセンブリ名を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</source>
          <target state="translated">さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">これにより、フォーマッタがメッセージ本文を解釈できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用してメッセージを読み込んだとき、<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">2 つのプロパティの 1 つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型のセットは、結合されたセット 2 つのプロパティからです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The decision of which property to use is specific to your application.</source>
          <target state="translated">使用するプロパティの意思決定は、アプリケーションに固有です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</source>
          <target state="translated">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> is a crucial component of loosely coupled XML-based messaging.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>疎結合された XML ベースのメッセージングの非常に重要なコンポーネントです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The XSD.exe utility uses the XML format is used to generate XML schema, such as when you use the utility to serialize a class used by your application.</source>
          <target state="translated">XSD.exe ユーティリティを使用して、アプリケーションによって使用されるクラスをシリアル化する、ユーティリティを使用する場合など、XML スキーマを生成する XML 形式を使用します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The class must have a default constructor.</source>
          <target state="translated">このクラスには既定のコンストラクターが必要です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The format is used again in the reverse process when the utility generates a class based on the schema you distribute to describe your class data.</source>
          <target state="translated">形式が使用されるもう一度逆のプロセスで、ユーティリティは、スキーマに基づくクラスを生成するときに配布する、クラスのデータを記述します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The use of the utility and the XML schema it generates enables you to avoid redistributing.dll files every time you recompile a class after the implementation of your class has changed.</source>
          <target state="translated">このユーティリティを生成する XML スキーマの使用では、クラスの実装が変更された後、クラスを再コンパイルするたびに、.dll ファイルを回避することができます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>As long as the schema does not change on the client or the server, other changes on either side do not affect the other.</source>
          <target state="translated">クライアントまたはサーバーで、スキーマが変更されない限り、いずれかの側には、その他の変更は影響しません、他の。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The following code example includes three pieces of code: a server component, an order class, and client code.</source>
          <target state="translated">次のコード例には、3 つコードにはが含まれています。 サーバー コンポーネント、order クラス、およびクライアント コード。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages.</source>
          <target state="translated">Order クラスは、サーバーが受信メッセージ内で認識されるスキーマを生成する XSD.exe ユーティリティで使用できます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The schema is an XML formatted file that describes the "shape" of the class.</source>
          <target state="translated">スキーマは、クラスの"shape"を記述する XML 書式設定されたファイルです。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.</source>
          <target state="translated">このスキーマは、サーバー クラスと同じスキーマを共有するクライアント固有の order クラスを生成するクライアント側で使用できます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The following code example represents a server component that receives orders through a message queue.</source>
          <target state="translated">次のコード例では、メッセージ キューからの注文を受信するサーバー コンポーネントを表します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The body of the message should be an order object whose schema matches the Order.cs class below.</source>
          <target state="translated">メッセージの本文は、スキーマを持つが下の Order.cs クラスと一致する順序オブジェクトである必要があります。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The server process or application deserializes the order.</source>
          <target state="translated">サーバー プロセスまたはアプリケーションは、順序を逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.</source>
          <target state="translated">次のコード例では、サーバー上のアプリケーションを受信し、逆シリアル化を order オブジェクトのスキーマを提供する order クラスを表します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body.</source>
          <target state="translated">サーバー上のアプリケーションとやり取りするクライアント アプリケーションは、メッセージ本文にローカルに定義された順序クラスのシリアル化する情報によって、サーバーにメッセージを送信する必要があります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body.</source>
          <target state="translated">ローカルに定義された順序クラス、クラスと同じスキーマ、サーバーが定義した順序をサーバーでアプリケーションは、メッセージ本文を逆シリアル化を試みますが必要です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.</source>
          <target state="translated">XSD.exe ユーティリティでは、サーバー上のアプリケーションのマネージャーを作成して、クライアントがサーバーに送信するメッセージをシリアル化に使用する必要があります、スキーマを配布することができます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema.</source>
          <target state="translated">クライアント アプリケーションの管理者は、order クラスのスキーマを受信すると、スキーマから、クライアント固有の order クラスを生成する、XSD.exe ユーティリティをもう一度使用します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class).</source>
          <target state="translated">次に、サーバーの順序クラスではなく、クライアントのコード例で使用されているこのクラスである (XSD.exe ユーティリティは、元のクラスと同じ名前を付けるスキーマから生成されるクラスを発生)。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>This new order class is used to serialize the order into the message body.</source>
          <target state="translated">この新しい order クラスは、順序をメッセージ本文にシリアル化に使用されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue.</source>
          <target state="translated">次のコード例は、クライアント側の処理、注文をシリアル化し、キューに注文に関連付けられている情報を送信するために使用します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility.</source>
          <target state="translated">コードは、項目、数量、およびアドレス情報を XSD.exe ユーティリティによって Order.cs クラスに対して生成されたスキーマの要素に関連付けます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>An order is sent to the Orders queue on the local computer.</source>
          <target state="translated">注文は、ローカル コンピューター上の順序キューに送信されます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>After the schema is generated from the order class on the server, you can modify the class.</source>
          <target state="translated">サーバーで order クラスから、スキーマを生成すると後、は、クラスを変更できます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Unless the schema changes, you do not need to redistribute the schema.</source>
          <target state="translated">スキーマが変更されない限り、スキーマを再配布する必要はありません。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified.</source>
          <target state="translated">スキーマを配布して、生成されたクライアント側の order クラスと、そのクライアント クラス変更することも、サーバーの順序のクラスとは無関係にスキーマ自体が変更されない限り、します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The two classes have become loosely coupled.</source>
          <target state="translated">2 つのクラスは疎結合になります。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> class, without target types set.</source>
          <target state="translated">対象の型を設定せずに、<ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor">
          <source>This overload of the constructor is used most frequently when writing to the queue, as target types are not required when writing.</source>
          <target state="translated">このコンス トラクターのオーバー ロードが最もよく使用、キューに書き込む際にように対象の種類の書き込み時に必要ありません。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor">
          <source>To read a message from a queue using an instance of <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> created using this constructor, you must set the <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties so the formatter knows what types to attempt to deserialize.</source>
          <target state="translated">インスタンスを使用してキューからメッセージを読み取るため<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>をこのコンス トラクターを使用して作成する必要があります設定、<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティを逆シリアル化しようとするどのような種類のフォーマッタにわかるようにします。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor">
          <source>When you create a new <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>, a default <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> instance is created, without the target types set.</source>
          <target state="translated">新規に作成するときに<ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>、既定の<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>ターゲットの種類が設定されていないインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor">
          <source>As with a formatter created using this constructor, you must set target types for that formatter instance if you want to read from the queue.</source>
          <target state="translated">同様に、フォーマッタをこのコンス トラクターを使用して作成すると、キューから読みたい場合は、フォーマッタ インスタンスのターゲット型を設定する必要があります。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated">フォーマッタでメッセージから逆シリアル化できる型のセットを指定する <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 型の配列。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>These values must be fully qualified, for example, "MyNamespace.MyOrders, MyOrdersAssemblyName".</source>
          <target state="translated">これらの値は、たとえば "MyNamespace.MyOrders, MyOrdersAssemblyName" のように完全に限定されている必要があります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> class, setting target types passed in as an array of (fully qualified) string values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> クラスの新しいインスタンスを初期化し、完全限定型の文字列値の配列として渡された対象の型を設定します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>The constructors with target type parameters are most frequently used when reading from the queue.</source>
          <target state="translated">対象の型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>When writing, it is not necessary to specify target types.</source>
          <target state="translated">作成する場合、対象の種類を指定する必要はありません。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph> constructor sets the <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> property to the array values passed in through the <ph id="ph3">`targetTypeNames`</ph> parameter.</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph>コンス トラクターのセット、<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>プロパティによって渡された配列の値を<ph id="ph3">`targetTypeNames`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>Setting this property enables a <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> using this <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> instance to read messages containing objects of given types.</source>
          <target state="translated">により、このプロパティの設定、<ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>これを使用して<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>のオブジェクトを含むメッセージを読み取るインスタンスの種類を指定します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>Both the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">両方の<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">これにより、フォーマッタがメッセージ本文を解釈できます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用してメッセージを読み込んだとき、<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">2 つのプロパティの 1 つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型のセットは、結合されたセット 2 つのプロパティからです。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>The decision of which one to use is specific to your application.</source>
          <target state="translated">どちらかを使用する 1 つは、アプリケーションに固有です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</source>
          <target state="translated">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合は読み取り時に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>The <ph id="ph1">&lt;paramref name="targetTypeNames" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="targetTypeNames" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated">フォーマッタでメッセージから逆シリアル化できる型のセットを指定する <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 型の配列。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> class, setting target types passed in as an array of object types.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> クラスの新しいインスタンスを初期化し、オブジェクト型の配列として渡された対象の型を設定します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>The constructors with target type parameters are most frequently used when reading from the queue.</source>
          <target state="translated">対象の型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>When writing, it is not necessary to specify target types.</source>
          <target state="translated">作成する場合、対象の種類を指定する必要はありません。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph> constructor sets the <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> property to the array values passed in through the <ph id="ph3">`targetTypes`</ph> parameter.</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph>コンス トラクターのセット、<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティによって渡された配列の値を<ph id="ph3">`targetTypes`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>Setting this property enables a <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> using this <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> instance to read messages containing objects of the given types.</source>
          <target state="translated">このプロパティを使用して設定、<ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>これを使用して<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>インスタンスを指定した型のオブジェクトを含むメッセージを読み取る。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>Both the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">両方の<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">これにより、フォーマッタがメッセージ本文を解釈できます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用してメッセージを読み込んだとき、<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">2 つのプロパティの 1 つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型のセットは、結合されたセット 2 つのプロパティからです。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>The decision of which one to use is specific to your application.</source>
          <target state="translated">どちらかを使用する 1 つは、アプリケーションに固有です。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</source>
          <target state="translated">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合は読み取り時に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>When specifying <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>, type existence is checked at compile time rather than read time, reducing possibility for error.</source>
          <target state="translated">指定するときに<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>なく<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時に種類の存在をチェックします。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> requires every entry to be fully qualified, specifying its assembly name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> すべてのエントリの完全修飾アセンブリ名を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</source>
          <target state="translated">さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>When using <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>, you can add each object (for example, <ph id="ph2">`MyClass`</ph>) to the list in a way demonstrated by the following C# code.</source>
          <target state="translated">使用する場合<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>、各オブジェクトを追加することができます (たとえば、 <ph id="ph2">`MyClass`</ph>) を次の c# コードに示す方法の一覧にします。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>The <ph id="ph1">&lt;paramref name="targetTypes" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="targetTypes" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> to inspect.</source>
          <target state="translated">検査対象の <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>Determines whether the formatter can deserialize the message.</source>
          <target state="translated">フォーマッタがメッセージを逆シリアル化できるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the XML formatter can deserialize the message; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">XML フォーマッタがメッセージを逆シリアル化できる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>When <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph> is called, the formatter attempts to determine if the contents of the message are something it can deserialize.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph>が呼び出されると、メッセージの内容が何かが逆シリアル化を試行するフォーマッタ。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The formatter can only deserialize the message if the type in the message body has the same schema as one of the types in the array represented by the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties.</source>
          <target state="translated">フォーマッタのみ逆シリアル化できる、メッセージ、メッセージ本文内の型によって表される配列内の種類のいずれかと同じスキーマがある場合、<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph> returns <ph id="ph2">`false`</ph> under the following two circumstances:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph> 返します<ph id="ph2">`false`</ph>次の 2 つの状況で。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The message was not formatted using the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>.</source>
          <target state="translated">メッセージの形式を使用していない、<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The schema of the message body is not among those listed in either the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> property.</source>
          <target state="translated">メッセージ本文のスキーマがいずれかに示されている間、<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what types of objects it must be able to deserialize.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティはどのような種類のオブジェクトができる必要がありますを逆シリアル化フォーマッタを指定します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>If any type is missing from the list, yet is found within the message, <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">任意の型が、一覧にありませんが、メッセージ内で見つかった場合<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph>返します<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>Neither the <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> nor <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> property has been set.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> プロパティも <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> プロパティも設定されていません。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The <ph id="ph1">&lt;paramref name="message" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="message" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Clone">
          <source>Creates an instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> class whose read/write properties (the sets of target types) are the same as the current <ph id="ph2">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> instance.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> インスタンスと同じ読み取り/書き込みプロパティ (対象の型のセット) の <ph id="ph2">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> クラスのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Clone">
          <source>An object whose properties are identical to those of this <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> instance, but whose metadata does not specify it to be a formatter class instance.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> インスタンスのプロパティと同一のプロパティだが、メタデータでフォーマッタ クラス インスタンスであることが指定されていないオブジェクト。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Clone">
          <source>This method creates a copy of the formatter and initializes all its properties to the values of this <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> object.</source>
          <target state="translated">このメソッドはフォーマッタのコピーを作成し、この値に、すべてのプロパティを初期化<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>, in XML format, to deserialize.</source>
          <target state="translated">逆シリアル化する XML 形式の <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>Reads the contents from the given message and creates an object that contains the deserialized message.</source>
          <target state="translated">指定されたメッセージからコンテンツを読み取り、逆シリアル化されたメッセージを含むオブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The deserialized message.</source>
          <target state="translated">逆シリアル化されたメッセージ。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>Both the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">両方の<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>One of these properties must be set before the message can be deserialized.</source>
          <target state="translated">メッセージを逆シリアル化前に、これらのプロパティのいずれかを設定する必要があります。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用してメッセージを読み込んだとき、<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The target types do not have to be specified in order to write to the queue.</source>
          <target state="translated">対象の種類をキューに書き込むために指定する必要はありません。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>Neither the <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> nor <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> property has been set.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> プロパティも <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> プロパティも設定されていません。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The instance serialized in the message body does not comply with any of the schemas represented by the types in the <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> properties.</source>
          <target state="translated">メッセージ本文でシリアル化されるインスタンスが、<ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> プロパティおよび <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> プロパティの型で表されたスキーマに従っていません。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The <ph id="ph1">&lt;paramref name="message" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="message" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>Specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated">提供されたメッセージからフォーマッタで逆シリアル化できる型のセットを指定します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that specifies the types of objects to deserialize from the message body when reading the message.</source>
          <target state="translated">メッセージの読み取り時に、メッセージ本文から逆シリアル化されるオブジェクトの型を指定する <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 型の配列。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>Both the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">両方の<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">これにより、フォーマッタがメッセージ本文を解釈できます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用してメッセージを読み込んだとき、<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">2 つのプロパティの 1 つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型のセットは、結合されたセット 2 つのプロパティからです。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The decision of which property to use is specific to your application.</source>
          <target state="translated">使用するプロパティの意思決定は、アプリケーションに固有です。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</source>
          <target state="translated">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> requires every entry to be fully qualified, specifying its assembly name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> すべてのエントリの完全修飾アセンブリ名を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</source>
          <target state="translated">さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The target types are only required when reading from the queue.</source>
          <target state="translated">対象の種類は、キューから読み取るときに必要なです。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties do not need to be set to write to the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティはキューへの書き込みに設定する必要はありません。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>Specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated">提供されたメッセージからフォーマッタで逆シリアル化できる型のセットを指定します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that specifies the types of objects to deserialize from the message body when reading the message.</source>
          <target state="translated">メッセージの読み取り時に、メッセージ本文から逆シリアル化されるオブジェクトの型を指定する <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 型の配列。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>Both the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">両方の<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">これにより、フォーマッタがメッセージ本文を解釈できます。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用してメッセージを読み込んだとき、<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">2 つのプロパティの 1 つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型のセットは、結合されたセット 2 つのプロパティからです。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The decision of which property to use is specific to your application.</source>
          <target state="translated">使用するプロパティの意思決定は、アプリケーションに固有です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</source>
          <target state="translated">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The target types are only required when reading from the queue.</source>
          <target state="translated">対象の種類は、キューから読み取るときに必要なです。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties do not need to be set to write to the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティはキューへの書き込みに設定する必要はありません。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>When specifying <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>, type existence is checked at compile time rather than read time, reducing possibility for error.</source>
          <target state="translated">指定するときに<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>なく<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時に種類の存在をチェックします。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>When using <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>, you can add each object (for example, <ph id="ph2">`MyClass`</ph>) to the list in a way demonstrated by the C# code <ph id="ph3">`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`</ph>.</source>
          <target state="translated">使用する場合<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>、各オブジェクトを追加することができます (たとえば、 <ph id="ph2">`MyClass`</ph>) c# コードに示す方法の一覧に<ph id="ph3">`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`</ph>です。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The following code example sends and receives a message that contains an order to and from a queue.</source>
          <target state="translated">次のコード例は、キューから注文を含むメッセージを送受信します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> whose <ph id="ph2">&lt;see cref="P:System.Messaging.Message.Body" /&gt;</ph> property will contain the serialized object.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Messaging.Message.Body" /&gt;</ph> プロパティにシリアル化されたオブジェクトが含まれる <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to be serialized into the message body.</source>
          <target state="translated">メッセージの本文にシリアル化される <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>Serializes an object into the body of the message.</source>
          <target state="translated">メッセージ本文にオブジェクトをシリアル化します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The target types need not be specified to write to the queue as they must be when reading.</source>
          <target state="translated">対象の種類を指定して、キューへの書き込みを読み取るときにあることが必要とする必要はありません。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> property is used by the formatter only when deserializing a message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>プロパティはメッセージを逆シリアル化時にのみ、フォーマッタで使用します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> makes use of the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class, which defines what can be serialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>では、使用、<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>クラスは、シリアル化可能なを定義します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>Only public fields and public properties can be serialized.</source>
          <target state="translated">のみのパブリック フィールドおよびパブリック プロパティをシリアル化できます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>Structures, structures with arrays, and arrays of structures are all serializable, as long as they do not use the encoded style with the SOAP protocol.</source>
          <target state="translated">構造体、配列、および構造体の配列を含む構造体は、SOAP プロトコルでエンコードされたスタイルを使用しない限り、すべてシリアル化可能なされます。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="message" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="message" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>