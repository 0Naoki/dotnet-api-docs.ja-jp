<Type Name="XmlMessageFormatter" FullName="System.Messaging.XmlMessageFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ee5a5741956a72eeb2506ea2845bf9ab2f1f66a0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36553202" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.XmlMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type XmlMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="cd1ab-101">Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema definition.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd1ab-101">Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema definition.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd1ab-102"><xref:System.Messaging.XmlMessageFormatter>は、既定のフォーマッタのインスタンス<xref:System.Messaging.MessageQueue>キューに書き込まれたメッセージのシリアル化に使用します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-102">The <xref:System.Messaging.XmlMessageFormatter> is the default formatter that an instance of <xref:System.Messaging.MessageQueue> uses to serialize messages written to the queue.</span></span> <span data-ttu-id="cd1ab-103">インスタンスを作成するときに<xref:System.Messaging.MessageQueue>のインスタンス<xref:System.Messaging.XmlMessageFormatter>は自動的に作成され、関連付け、<xref:System.Messaging.MessageQueue>です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-103">When you create an instance of <xref:System.Messaging.MessageQueue>, an instance of <xref:System.Messaging.XmlMessageFormatter> is created for you and associated with the <xref:System.Messaging.MessageQueue>.</span></span> <span data-ttu-id="cd1ab-104">コードで作成およびに割り当てることによって、別のフォーマッタを指定できます、<xref:System.Messaging.MessageQueue.Formatter%2A>のプロパティ、<xref:System.Messaging.MessageQueue>です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-104">You can specify a different formatter by creating it in your code and assigning it to the <xref:System.Messaging.MessageQueue.Formatter%2A> property of your <xref:System.Messaging.MessageQueue>.</span></span>  
  
 <span data-ttu-id="cd1ab-105">キューの既定<xref:System.Messaging.XmlMessageFormatter>インスタンスは、キューへの書き込みに使用できますが、いずれかに設定するまで、キューから読み取るには使用できません、<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>フォーマッタのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-105">A queue's default <xref:System.Messaging.XmlMessageFormatter> instance can be used to write to the queue, but it cannot be used to read from the queue until you set either the <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> property on the formatter.</span></span> <span data-ttu-id="cd1ab-106">既定のフォーマッタ インスタンスに、これらの値の一方または両方を設定することができますか、または、フォーマッタの新しいインスタンスを作成し、適切なに引数として渡すことによって自動的に値を設定できます<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-106">You can either set one or both of these values on the default formatter instance, or you can create a new instance of the formatter and set the values automatically by passing them as arguments into the appropriate <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="cd1ab-107">指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時に種類の存在をチェックします。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-107">When specifying <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> rather than <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, type existence is checked at compile time rather than read time, reducing possibility for error.</span></span> <span data-ttu-id="cd1ab-108"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> すべてのエントリの完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-108"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> requires every entry to be fully qualified, specifying its assembly name.</span></span> <span data-ttu-id="cd1ab-109">さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-109">Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</span></span>  
  
 <span data-ttu-id="cd1ab-110"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-110">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="cd1ab-111">これにより、フォーマッタがメッセージ本文を解釈できます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-111">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="cd1ab-112">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-112">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="cd1ab-113">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-113">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="cd1ab-114">2 つのプロパティの 1 つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-114">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="cd1ab-115">型のセットは、結合されたセット 2 つのプロパティからです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-115">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="cd1ab-116">使用するプロパティの意思決定は、アプリケーションに固有です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-116">The decision of which property to use is specific to your application.</span></span> <span data-ttu-id="cd1ab-117">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-117">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</span></span>  
  
 <span data-ttu-id="cd1ab-118"><xref:System.Messaging.XmlMessageFormatter>疎結合された XML ベースのメッセージングの非常に重要なコンポーネントです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-118">The <xref:System.Messaging.XmlMessageFormatter> is a crucial component of loosely coupled XML-based messaging.</span></span> <span data-ttu-id="cd1ab-119">XSD.exe ユーティリティを使用して、アプリケーションによって使用されるクラスをシリアル化する、ユーティリティを使用する場合など、XML スキーマを生成する XML 形式を使用します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-119">The XSD.exe utility uses the XML format is used to generate XML schema, such as when you use the utility to serialize a class used by your application.</span></span> <span data-ttu-id="cd1ab-120">このクラスには既定のコンストラクターが必要です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-120">The class must have a default constructor.</span></span>  
  
 <span data-ttu-id="cd1ab-121">形式が使用されるもう一度逆のプロセスで、ユーティリティは、スキーマに基づくクラスを生成するときに配布する、クラスのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-121">The format is used again in the reverse process when the utility generates a class based on the schema you distribute to describe your class data.</span></span> <span data-ttu-id="cd1ab-122">このユーティリティを生成する XML スキーマの使用では、クラスの実装が変更された後、クラスを再コンパイルするたびに、.dll ファイルを回避することができます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-122">The use of the utility and the XML schema it generates enables you to avoid redistributing.dll files every time you recompile a class after the implementation of your class has changed.</span></span> <span data-ttu-id="cd1ab-123">クライアントまたはサーバーで、スキーマが変更されない限り、いずれかの側には、その他の変更は影響しません、他の。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-123">As long as the schema does not change on the client or the server, other changes on either side do not affect the other.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd1ab-124">次のコード例には、3 つコードにはが含まれています。 サーバー コンポーネント、order クラス、およびクライアント コード。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-124">The following code example includes three pieces of code: a server component, an order class, and client code.</span></span> <span data-ttu-id="cd1ab-125">Order クラスは、サーバーが受信メッセージ内で認識されるスキーマを生成する XSD.exe ユーティリティで使用できます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-125">The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages.</span></span> <span data-ttu-id="cd1ab-126">スキーマは、クラスの"shape"を記述する XML 書式設定されたファイルです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-126">The schema is an XML formatted file that describes the "shape" of the class.</span></span> <span data-ttu-id="cd1ab-127">このスキーマは、サーバー クラスと同じスキーマを共有するクライアント固有の order クラスを生成するクライアント側で使用できます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-127">This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.</span></span>  
  
 <span data-ttu-id="cd1ab-128">次のコード例では、メッセージ キューからの注文を受信するサーバー コンポーネントを表します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-128">The following code example represents a server component that receives orders through a message queue.</span></span> <span data-ttu-id="cd1ab-129">メッセージの本文は、スキーマを持つが下の Order.cs クラスと一致する順序オブジェクトである必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-129">The body of the message should be an order object whose schema matches the Order.cs class below.</span></span> <span data-ttu-id="cd1ab-130">サーバー プロセスまたはアプリケーションは、順序を逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-130">The server process or application deserializes the order.</span></span>  
  
 [!code-cpp[Classic XmlMessageFormatter Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlMessageFormatter Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source.cs#1)]
 [!code-vb[Classic XmlMessageFormatter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source.vb#1)]  
  
 <span data-ttu-id="cd1ab-131">次のコード例では、サーバー上のアプリケーションを受信し、逆シリアル化を order オブジェクトのスキーマを提供する order クラスを表します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-131">The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.</span></span>  
  
 [!code-cpp[Classic XmlMessageFormatter Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic XmlMessageFormatter Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source2.cs#2)]
 [!code-vb[Classic XmlMessageFormatter Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="cd1ab-132">サーバー上のアプリケーションとやり取りするクライアント アプリケーションは、メッセージ本文にローカルに定義された順序クラスのシリアル化する情報によって、サーバーにメッセージを送信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-132">Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body.</span></span> <span data-ttu-id="cd1ab-133">ローカルに定義された順序クラス、クラスと同じスキーマ、サーバーが定義した順序をサーバーでアプリケーションは、メッセージ本文を逆シリアル化を試みますが必要です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-133">The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body.</span></span> <span data-ttu-id="cd1ab-134">XSD.exe ユーティリティでは、サーバー上のアプリケーションのマネージャーを作成して、クライアントがサーバーに送信するメッセージをシリアル化に使用する必要があります、スキーマを配布することができます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-134">The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.</span></span>  
  
 <span data-ttu-id="cd1ab-135">クライアント アプリケーションの管理者は、order クラスのスキーマを受信すると、スキーマから、クライアント固有の order クラスを生成する、XSD.exe ユーティリティをもう一度使用します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-135">When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema.</span></span> <span data-ttu-id="cd1ab-136">次に、サーバーの順序クラスではなく、クライアントのコード例で使用されているこのクラスである (XSD.exe ユーティリティは、元のクラスと同じ名前を付けるスキーマから生成されるクラスを発生)。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-136">It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class).</span></span> <span data-ttu-id="cd1ab-137">この新しい order クラスは、順序をメッセージ本文にシリアル化に使用されます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-137">This new order class is used to serialize the order into the message body.</span></span>  
  
 <span data-ttu-id="cd1ab-138">次のコード例は、クライアント側の処理、注文をシリアル化し、キューに注文に関連付けられている情報を送信するために使用します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-138">The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue.</span></span> <span data-ttu-id="cd1ab-139">コードは、項目、数量、およびアドレス情報を XSD.exe ユーティリティによって Order.cs クラスに対して生成されたスキーマの要素に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-139">The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility.</span></span> <span data-ttu-id="cd1ab-140">注文は、ローカル コンピューター上の順序キューに送信されます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-140">An order is sent to the Orders queue on the local computer.</span></span>  
  
 [!code-cpp[Classic XmlMessageFormatter Example#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source3.cpp#3)]
 [!code-csharp[Classic XmlMessageFormatter Example#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source3.cs#3)]
 [!code-vb[Classic XmlMessageFormatter Example#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source3.vb#3)]  
  
 <span data-ttu-id="cd1ab-141">サーバーで order クラスから、スキーマを生成すると後、は、クラスを変更できます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-141">After the schema is generated from the order class on the server, you can modify the class.</span></span> <span data-ttu-id="cd1ab-142">スキーマが変更されない限り、スキーマを再配布する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-142">Unless the schema changes, you do not need to redistribute the schema.</span></span> <span data-ttu-id="cd1ab-143">スキーマを配布して、生成されたクライアント側の order クラスと、そのクライアント クラス変更することも、サーバーの順序のクラスとは無関係にスキーマ自体が変更されない限り、します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-143">After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified.</span></span> <span data-ttu-id="cd1ab-144">2 つのクラスは疎結合になります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-144">The two classes have become loosely coupled.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.IMessageFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd1ab-145">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-145">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd1ab-146">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, without target types set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-146">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, without target types set.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd1ab-147">このコンス トラクターのオーバー ロードが最もよく使用、キューに書き込む際にように対象の種類の書き込み時に必要ありません。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-147">This overload of the constructor is used most frequently when writing to the queue, as target types are not required when writing.</span></span>  
  
 <span data-ttu-id="cd1ab-148">インスタンスを使用してキューからメッセージを読み取るため<xref:System.Messaging.XmlMessageFormatter>をこのコンス トラクターを使用して作成する必要があります設定、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティを逆シリアル化しようとするどのような種類のフォーマッタにわかるようにします。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-148">To read a message from a queue using an instance of <xref:System.Messaging.XmlMessageFormatter> created using this constructor, you must set the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties so the formatter knows what types to attempt to deserialize.</span></span>  
  
 <span data-ttu-id="cd1ab-149">新規に作成するときに<xref:System.Messaging.MessageQueue>、既定の<xref:System.Messaging.XmlMessageFormatter>ターゲットの種類が設定されていないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-149">When you create a new <xref:System.Messaging.MessageQueue>, a default <xref:System.Messaging.XmlMessageFormatter> instance is created, without the target types set.</span></span> <span data-ttu-id="cd1ab-150">同様に、フォーマッタをこのコンス トラクターを使用して作成すると、キューから読みたい場合は、フォーマッタ インスタンスのターゲット型を設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-150">As with a formatter created using this constructor, you must set target types for that formatter instance if you want to read from the queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (string[] targetTypeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] targetTypeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypeNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;System::String ^&gt; ^ targetTypeNames);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : string[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypeNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypeNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="targetTypeNames">
          <span data-ttu-id="cd1ab-151">An array of type <see cref="T:System.String" /> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-151">An array of type <see cref="T:System.String" /> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
          <span data-ttu-id="cd1ab-152">These values must be fully qualified, for example, "MyNamespace.MyOrders, MyOrdersAssemblyName".</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-152">These values must be fully qualified, for example, "MyNamespace.MyOrders, MyOrdersAssemblyName".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd1ab-153">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, setting target types passed in as an array of (fully qualified) string values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-153">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, setting target types passed in as an array of (fully qualified) string values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd1ab-154">対象の型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-154">The constructors with target type parameters are most frequently used when reading from the queue.</span></span> <span data-ttu-id="cd1ab-155">作成する場合、対象の種類を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-155">When writing, it is not necessary to specify target types.</span></span>  
  
 <span data-ttu-id="cd1ab-156">このオーバー ロード、<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクターのセット、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>プロパティによって渡された配列の値を`targetTypeNames`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-156">This overload of the <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> constructor sets the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> property to the array values passed in through the `targetTypeNames` parameter.</span></span> <span data-ttu-id="cd1ab-157">により、このプロパティの設定、<xref:System.Messaging.MessageQueue>これを使用して<xref:System.Messaging.XmlMessageFormatter>のオブジェクトを含むメッセージを読み取るインスタンスの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-157">Setting this property enables a <xref:System.Messaging.MessageQueue> using this <xref:System.Messaging.XmlMessageFormatter> instance to read messages containing objects of given types.</span></span>  
  
 <span data-ttu-id="cd1ab-158">両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-158">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="cd1ab-159">これにより、フォーマッタがメッセージ本文を解釈できます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-159">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="cd1ab-160">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-160">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="cd1ab-161">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-161">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="cd1ab-162">2 つのプロパティの 1 つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-162">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="cd1ab-163">型のセットは、結合されたセット 2 つのプロパティからです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-163">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="cd1ab-164">どちらかを使用する 1 つは、アプリケーションに固有です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-164">The decision of which one to use is specific to your application.</span></span> <span data-ttu-id="cd1ab-165">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合は読み取り時に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-165">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</span></span>  
  
   
  
## Examples  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd1ab-166">The <paramref name="targetTypeNames" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-166">The <paramref name="targetTypeNames" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (Type[] targetTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type[] targetTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;Type ^&gt; ^ targetTypes);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : Type[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="targetTypes">
          <span data-ttu-id="cd1ab-167">An array of type <see cref="T:System.Type" /> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-167">An array of type <see cref="T:System.Type" /> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd1ab-168">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, setting target types passed in as an array of object types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-168">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, setting target types passed in as an array of object types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd1ab-169">対象の型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-169">The constructors with target type parameters are most frequently used when reading from the queue.</span></span> <span data-ttu-id="cd1ab-170">作成する場合、対象の種類を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-170">When writing, it is not necessary to specify target types.</span></span>  
  
 <span data-ttu-id="cd1ab-171">このオーバー ロード、<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクターのセット、<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティによって渡された配列の値を`targetTypes`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-171">This overload of the <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> constructor sets the <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> property to the array values passed in through the `targetTypes` parameter.</span></span> <span data-ttu-id="cd1ab-172">このプロパティを使用して設定、<xref:System.Messaging.MessageQueue>これを使用して<xref:System.Messaging.XmlMessageFormatter>インスタンスを指定した型のオブジェクトを含むメッセージを読み取る。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-172">Setting this property enables a <xref:System.Messaging.MessageQueue> using this <xref:System.Messaging.XmlMessageFormatter> instance to read messages containing objects of the given types.</span></span>  
  
 <span data-ttu-id="cd1ab-173">両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-173">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="cd1ab-174">これにより、フォーマッタがメッセージ本文を解釈できます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-174">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="cd1ab-175">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-175">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="cd1ab-176">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-176">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="cd1ab-177">2 つのプロパティの 1 つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-177">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="cd1ab-178">型のセットは、結合されたセット 2 つのプロパティからです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-178">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="cd1ab-179">どちらかを使用する 1 つは、アプリケーションに固有です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-179">The decision of which one to use is specific to your application.</span></span> <span data-ttu-id="cd1ab-180">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合は読み取り時に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-180">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</span></span>  
  
 <span data-ttu-id="cd1ab-181">指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時に種類の存在をチェックします。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-181">When specifying <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> rather than <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, type existence is checked at compile time rather than read time, reducing possibility for error.</span></span> <span data-ttu-id="cd1ab-182"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> すべてのエントリの完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-182"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> requires every entry to be fully qualified, specifying its assembly name.</span></span> <span data-ttu-id="cd1ab-183">さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-183">Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</span></span>  
  
 <span data-ttu-id="cd1ab-184">使用する場合<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>、各オブジェクトを追加することができます (たとえば、 `MyClass`) を次の c# コードに示す方法の一覧にします。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-184">When using <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, you can add each object (for example, `MyClass`) to the list in a way demonstrated by the following C# code.</span></span>  
  
```  
TargetTypes = new Type[]{typeof(MyClass)}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd1ab-185">The <paramref name="targetTypes" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-185">The <paramref name="targetTypes" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="xmlMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="cd1ab-186">The <see cref="T:System.Messaging.Message" /> to inspect.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-186">The <see cref="T:System.Messaging.Message" /> to inspect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd1ab-187">Determines whether the formatter can deserialize the message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-187">Determines whether the formatter can deserialize the message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd1ab-188">
            <see langword="true" /> if the XML formatter can deserialize the message; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-188">
              <see langword="true" /> if the XML formatter can deserialize the message; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd1ab-189">ときに<xref:System.Messaging.XmlMessageFormatter.CanRead%2A>が呼び出されると、メッセージの内容が何かが逆シリアル化を試行するフォーマッタ。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-189">When <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> is called, the formatter attempts to determine if the contents of the message are something it can deserialize.</span></span> <span data-ttu-id="cd1ab-190">フォーマッタのみ逆シリアル化できる、メッセージ、メッセージ本文内の型によって表される配列内の種類のいずれかと同じスキーマがある場合、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-190">The formatter can only deserialize the message if the type in the message body has the same schema as one of the types in the array represented by the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties.</span></span> <span data-ttu-id="cd1ab-191"><xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 返します`false`次の 2 つの状況で。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-191"><xref:System.Messaging.XmlMessageFormatter.CanRead%2A> returns `false` under the following two circumstances:</span></span>  
  
-   <span data-ttu-id="cd1ab-192">メッセージの形式を使用していない、<xref:System.Messaging.XmlMessageFormatter>です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-192">The message was not formatted using the <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
-   <span data-ttu-id="cd1ab-193">メッセージ本文のスキーマがいずれかに示されている間、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-193">The schema of the message body is not among those listed in either the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> property.</span></span>  
  
 <span data-ttu-id="cd1ab-194"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティはどのような種類のオブジェクトができる必要がありますを逆シリアル化フォーマッタを指定します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-194">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what types of objects it must be able to deserialize.</span></span> <span data-ttu-id="cd1ab-195">任意の型が、一覧にありませんが、メッセージ内で見つかった場合<xref:System.Messaging.XmlMessageFormatter.CanRead%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-195">If any type is missing from the list, yet is found within the message, <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd1ab-196">Neither the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> nor <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property has been set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-196">Neither the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> nor <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property has been set.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd1ab-197">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-197">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="xmlMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd1ab-198">Creates an instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class whose read/write properties (the sets of target types) are the same as the current <see cref="T:System.Messaging.XmlMessageFormatter" /> instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-198">Creates an instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class whose read/write properties (the sets of target types) are the same as the current <see cref="T:System.Messaging.XmlMessageFormatter" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd1ab-199">An object whose properties are identical to those of this <see cref="T:System.Messaging.XmlMessageFormatter" /> instance, but whose metadata does not specify it to be a formatter class instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-199">An object whose properties are identical to those of this <see cref="T:System.Messaging.XmlMessageFormatter" /> instance, but whose metadata does not specify it to be a formatter class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd1ab-200">このメソッドはフォーマッタのコピーを作成し、この値に、すべてのプロパティを初期化<xref:System.Messaging.XmlMessageFormatter>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-200">This method creates a copy of the formatter and initializes all its properties to the values of this <xref:System.Messaging.XmlMessageFormatter> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="xmlMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="cd1ab-201">The <see cref="T:System.Messaging.Message" />, in XML format, to deserialize.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-201">The <see cref="T:System.Messaging.Message" />, in XML format, to deserialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd1ab-202">Reads the contents from the given message and creates an object that contains the deserialized message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-202">Reads the contents from the given message and creates an object that contains the deserialized message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd1ab-203">The deserialized message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-203">The deserialized message.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd1ab-204">両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-204">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="cd1ab-205">メッセージを逆シリアル化前に、これらのプロパティのいずれかを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-205">One of these properties must be set before the message can be deserialized.</span></span>  
  
 <span data-ttu-id="cd1ab-206">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-206">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="cd1ab-207">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-207">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="cd1ab-208">対象の種類をキューに書き込むために指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-208">The target types do not have to be specified in order to write to the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd1ab-209">Neither the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> nor <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property has been set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-209">Neither the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> nor <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property has been set.</span>
          </span>
          <span data-ttu-id="cd1ab-210">-or-  The instance serialized in the message body does not comply with any of the schemas represented by the types in the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> and <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-210">-or-  The instance serialized in the message body does not comply with any of the schemas represented by the types in the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> and <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> properties.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd1ab-211">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-211">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypeNames">
      <MemberSignature Language="C#" Value="public string[] TargetTypeNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetTypeNames" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypeNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ TargetTypeNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypeNames : string[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypeNames")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd1ab-212">Specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-212">Specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd1ab-213">型の配列<see cref="T:System.String" />メッセージを読み取るときに、メッセージ本文から逆シリアル化するオブジェクトの種類を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-213">An array of type <see cref="T:System.String" /> that specifies the types of objects to deserialize from the message body when reading the message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd1ab-214">両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-214">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="cd1ab-215">これにより、フォーマッタがメッセージ本文を解釈できます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-215">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="cd1ab-216">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-216">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="cd1ab-217">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-217">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="cd1ab-218">2 つのプロパティの 1 つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-218">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="cd1ab-219">型のセットは、結合されたセット 2 つのプロパティからです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-219">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="cd1ab-220">使用するプロパティの意思決定は、アプリケーションに固有です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-220">The decision of which property to use is specific to your application.</span></span> <span data-ttu-id="cd1ab-221">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-221">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</span></span>  
  
 <span data-ttu-id="cd1ab-222"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> すべてのエントリの完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-222"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> requires every entry to be fully qualified, specifying its assembly name.</span></span> <span data-ttu-id="cd1ab-223">さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-223">Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</span></span>  
  
 <span data-ttu-id="cd1ab-224">対象の種類は、キューから読み取るときに必要なです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-224">The target types are only required when reading from the queue.</span></span> <span data-ttu-id="cd1ab-225"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティはキューへの書き込みに設定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-225">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties do not need to be set to write to the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd1ab-226">The <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> property is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-226">The <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> property is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypes">
      <MemberSignature Language="C#" Value="public Type[] TargetTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] TargetTypes" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypes As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Type ^&gt; ^ TargetTypes { cli::array &lt;Type ^&gt; ^ get(); void set(cli::array &lt;Type ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypes : Type[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd1ab-227">Specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-227">Specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd1ab-228">型の配列<see cref="T:System.Type" />メッセージを読み取るときに、メッセージ本文から逆シリアル化するオブジェクトの種類を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-228">An array of type <see cref="T:System.Type" /> that specifies the types of objects to deserialize from the message body when reading the message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd1ab-229">両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに指示します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-229">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="cd1ab-230">これにより、フォーマッタがメッセージ本文を解釈できます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-230">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="cd1ab-231">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-231">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="cd1ab-232">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッドは、メソッドが、識別されたスキーマに対応して、メッセージ本文を読み込みますの種類のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-232">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="cd1ab-233">2 つのプロパティの 1 つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-233">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="cd1ab-234">型のセットは、結合されたセット 2 つのプロパティからです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-234">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="cd1ab-235">使用するプロパティの意思決定は、アプリケーションに固有です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-235">The decision of which property to use is specific to your application.</span></span> <span data-ttu-id="cd1ab-236">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-236">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</span></span>  
  
 <span data-ttu-id="cd1ab-237">対象の種類は、キューから読み取るときに必要なです。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-237">The target types are only required when reading from the queue.</span></span> <span data-ttu-id="cd1ab-238"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティはキューへの書き込みに設定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-238">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties do not need to be set to write to the queue.</span></span>  
  
 <span data-ttu-id="cd1ab-239">指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時に種類の存在をチェックします。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-239">When specifying <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> rather than <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, type existence is checked at compile time rather than read time, reducing possibility for error.</span></span>  
  
 <span data-ttu-id="cd1ab-240">使用する場合<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>、各オブジェクトを追加することができます (たとえば、 `MyClass`) c# コードに示す方法の一覧に`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`です。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-240">When using <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, you can add each object (for example, `MyClass`) to the list in a way demonstrated by the C# code `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd1ab-241">次のコード例は、キューから注文を含むメッセージを送受信します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-241">The following code example sends and receives a message that contains an order to and from a queue.</span></span>  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd1ab-242">The <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-242">The <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="xmlMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="cd1ab-243">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-243">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</span>
          </span>
        </param>
        <param name="obj">
          <span data-ttu-id="cd1ab-244">The <see cref="T:System.Object" /> to be serialized into the message body.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-244">The <see cref="T:System.Object" /> to be serialized into the message body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd1ab-245">Serializes an object into the body of the message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-245">Serializes an object into the body of the message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd1ab-246">対象の種類を指定して、キューへの書き込みを読み取るときにあることが必要とする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-246">The target types need not be specified to write to the queue as they must be when reading.</span></span> <span data-ttu-id="cd1ab-247"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティはメッセージを逆シリアル化時にのみ、フォーマッタで使用します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-247">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> property is used by the formatter only when deserializing a message.</span></span>  
  
 <span data-ttu-id="cd1ab-248"><xref:System.Messaging.XmlMessageFormatter>では、使用、<xref:System.Xml.Serialization.XmlSerializer>クラスは、シリアル化可能なを定義します。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-248">The <xref:System.Messaging.XmlMessageFormatter> makes use of the <xref:System.Xml.Serialization.XmlSerializer> class, which defines what can be serialized.</span></span> <span data-ttu-id="cd1ab-249">のみのパブリック フィールドおよびパブリック プロパティをシリアル化できます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-249">Only public fields and public properties can be serialized.</span></span> <span data-ttu-id="cd1ab-250">構造体、配列、および構造体の配列を含む構造体は、SOAP プロトコルでエンコードされたスタイルを使用しない限り、すべてシリアル化可能なされます。</span><span class="sxs-lookup"><span data-stu-id="cd1ab-250">Structures, structures with arrays, and arrays of structures are all serializable, as long as they do not use the encoded style with the SOAP protocol.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd1ab-251">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-251">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="cd1ab-252">-or-  The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd1ab-252">-or-  The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>