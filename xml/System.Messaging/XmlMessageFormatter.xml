<Type Name="XmlMessageFormatter" FullName="System.Messaging.XmlMessageFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a9a1931c75db76f56c20e9b7b0a8567e6d17609" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48590753" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.XmlMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type XmlMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="63257-101">XSD スキーマ定義の XML 書式を使用して、メッセージ本文との間でオブジェクトをシリアル化および逆シリアル化します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="63257-101">Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema definition.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63257-102"><xref:System.Messaging.XmlMessageFormatter>は既定のフォーマッタのインスタンス<xref:System.Messaging.MessageQueue>をキューに書き込まれたメッセージをシリアル化を使用します。</span><span class="sxs-lookup"><span data-stu-id="63257-102">The <xref:System.Messaging.XmlMessageFormatter> is the default formatter that an instance of <xref:System.Messaging.MessageQueue> uses to serialize messages written to the queue.</span></span> <span data-ttu-id="63257-103">インスタンスを作成するときに<xref:System.Messaging.MessageQueue>のインスタンス<xref:System.Messaging.XmlMessageFormatter>が作成され、関連付けられている、<xref:System.Messaging.MessageQueue>します。</span><span class="sxs-lookup"><span data-stu-id="63257-103">When you create an instance of <xref:System.Messaging.MessageQueue>, an instance of <xref:System.Messaging.XmlMessageFormatter> is created for you and associated with the <xref:System.Messaging.MessageQueue>.</span></span> <span data-ttu-id="63257-104">さまざまなフォーマッタを指定するには、コードで作成してに割り当てることによって、<xref:System.Messaging.MessageQueue.Formatter%2A>のプロパティ、<xref:System.Messaging.MessageQueue>します。</span><span class="sxs-lookup"><span data-stu-id="63257-104">You can specify a different formatter by creating it in your code and assigning it to the <xref:System.Messaging.MessageQueue.Formatter%2A> property of your <xref:System.Messaging.MessageQueue>.</span></span>  
  
 <span data-ttu-id="63257-105">キューの既定<xref:System.Messaging.XmlMessageFormatter>インスタンスは、キューへの書き込みに使用できますが、いずれかを設定するまでに、キューから読み取るには使用できません、<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>フォーマッタのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="63257-105">A queue's default <xref:System.Messaging.XmlMessageFormatter> instance can be used to write to the queue, but it cannot be used to read from the queue until you set either the <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> property on the formatter.</span></span> <span data-ttu-id="63257-106">既定のフォーマッタ インスタンスに、これらの値の一方または両方を設定することができますか、または、フォーマッタの新しいインスタンスを作成し、適切なに引数として渡すことによって、値が自動的に設定<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="63257-106">You can either set one or both of these values on the default formatter instance, or you can create a new instance of the formatter and set the values automatically by passing them as arguments into the appropriate <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="63257-107">指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時、エラー発生の可能性を減らすことではなく、コンパイル時に型が存在することがチェックされます。</span><span class="sxs-lookup"><span data-stu-id="63257-107">When specifying <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> rather than <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, type existence is checked at compile time rather than read time, reducing possibility for error.</span></span> <span data-ttu-id="63257-108"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> すべてのエントリは完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-108"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> requires every entry to be fully qualified, specifying its assembly name.</span></span> <span data-ttu-id="63257-109">さらに、複数の同時実行バージョンを使用する場合、バージョン番号する必要がありますも追加されますを対象の型名。</span><span class="sxs-lookup"><span data-stu-id="63257-109">Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</span></span>  
  
 <span data-ttu-id="63257-110"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。</span><span class="sxs-lookup"><span data-stu-id="63257-110">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="63257-111">これにより、メッセージ本文を解釈するフォーマッタ。</span><span class="sxs-lookup"><span data-stu-id="63257-111">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="63257-112">メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-112">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="63257-113">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="63257-113">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="63257-114">2 つのプロパティの 1 つだけが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="63257-114">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="63257-115">型のセットは、2 つのプロパティから結合されたセットです。</span><span class="sxs-lookup"><span data-stu-id="63257-115">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="63257-116">使用するプロパティの決定は、アプリケーションに固有です。</span><span class="sxs-lookup"><span data-stu-id="63257-116">The decision of which property to use is specific to your application.</span></span> <span data-ttu-id="63257-117">メッセージの本文にスキーマが一致しない配列内のいずれかのプロパティの型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="63257-117">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</span></span>  
  
 <span data-ttu-id="63257-118"><xref:System.Messaging.XmlMessageFormatter>は疎結合された XML ベースのメッセージングの重要なコンポーネントです。</span><span class="sxs-lookup"><span data-stu-id="63257-118">The <xref:System.Messaging.XmlMessageFormatter> is a crucial component of loosely coupled XML-based messaging.</span></span> <span data-ttu-id="63257-119">XSD.exe ユーティリティは、XML 形式は、アプリケーションによって使用されるクラスをシリアル化するユーティリティを使用する場合など、XML スキーマを生成するために使用を使用します。</span><span class="sxs-lookup"><span data-stu-id="63257-119">The XSD.exe utility uses the XML format is used to generate XML schema, such as when you use the utility to serialize a class used by your application.</span></span> <span data-ttu-id="63257-120">このクラスには既定のコンストラクターが必要です。</span><span class="sxs-lookup"><span data-stu-id="63257-120">The class must have a default constructor.</span></span>  
  
 <span data-ttu-id="63257-121">形式が使用されるもう一度逆のプロセスで、ユーティリティは、スキーマに基づくクラスを生成するときに配布する、クラスのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="63257-121">The format is used again in the reverse process when the utility generates a class based on the schema you distribute to describe your class data.</span></span> <span data-ttu-id="63257-122">ユーティリティおよび生成する XML スキーマの使用には、クラスの実装が変更された後、クラスを再コンパイルするたびに、.dll ファイルを回避することができます。</span><span class="sxs-lookup"><span data-stu-id="63257-122">The use of the utility and the XML schema it generates enables you to avoid redistributing.dll files every time you recompile a class after the implementation of your class has changed.</span></span> <span data-ttu-id="63257-123">クライアントまたはサーバーで、スキーマが変更されない限り、いずれかの側には、その他の変更は影響しません、その他。</span><span class="sxs-lookup"><span data-stu-id="63257-123">As long as the schema does not change on the client or the server, other changes on either side do not affect the other.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63257-124">次のコード例には、3 つコードにはが含まれています。 サーバー コンポーネント、order クラス、およびクライアントのコード。</span><span class="sxs-lookup"><span data-stu-id="63257-124">The following code example includes three pieces of code: a server component, an order class, and client code.</span></span> <span data-ttu-id="63257-125">Order クラスは、受信メッセージ内で、サーバーが認識されるスキーマを生成する XSD.exe ユーティリティで使用できます。</span><span class="sxs-lookup"><span data-stu-id="63257-125">The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages.</span></span> <span data-ttu-id="63257-126">スキーマは、クラスの「形状」を記述する XML 形式のファイルです。</span><span class="sxs-lookup"><span data-stu-id="63257-126">The schema is an XML formatted file that describes the "shape" of the class.</span></span> <span data-ttu-id="63257-127">このスキーマは、サーバー クラスと同じスキーマを共有するクライアント固有の order クラスを生成するクライアント側で使用できます。</span><span class="sxs-lookup"><span data-stu-id="63257-127">This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.</span></span>  
  
 <span data-ttu-id="63257-128">次のコード例では、メッセージ キューからの注文を受信するサーバー コンポーネントを表します。</span><span class="sxs-lookup"><span data-stu-id="63257-128">The following code example represents a server component that receives orders through a message queue.</span></span> <span data-ttu-id="63257-129">メッセージの本文に order オブジェクトのスキーマが次に示す Order.cs クラスと一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-129">The body of the message should be an order object whose schema matches the Order.cs class below.</span></span> <span data-ttu-id="63257-130">サーバー プロセスまたはアプリケーションには、順序が逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="63257-130">The server process or application deserializes the order.</span></span>  
  
 [!code-cpp[Classic XmlMessageFormatter Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlMessageFormatter Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source.cs#1)]
 [!code-vb[Classic XmlMessageFormatter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source.vb#1)]  
  
 <span data-ttu-id="63257-131">次のコード例では、サーバー上のアプリケーションを受信し、逆シリアル化順序オブジェクトのスキーマを提供する順序クラスを表します。</span><span class="sxs-lookup"><span data-stu-id="63257-131">The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.</span></span>  
  
 [!code-cpp[Classic XmlMessageFormatter Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic XmlMessageFormatter Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source2.cs#2)]
 [!code-vb[Classic XmlMessageFormatter Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="63257-132">サーバー上のアプリケーションとやり取りするクライアント アプリケーションは、メッセージ本文にローカルに定義された順序クラスでシリアル化する情報によって、サーバーにメッセージを送信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-132">Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body.</span></span> <span data-ttu-id="63257-133">ローカルで定義された順序クラスをメッセージ本文を逆シリアル化しようとは、サーバー上のアプリケーションをサーバーが定義した順序クラスと同じスキーマが必要です。</span><span class="sxs-lookup"><span data-stu-id="63257-133">The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body.</span></span> <span data-ttu-id="63257-134">XSD.exe ユーティリティでは、サーバー上のアプリケーションのマネージャーを作成して、クライアントがサーバーに送信するメッセージをシリアル化に使用する必要があります、スキーマを配布することができます。</span><span class="sxs-lookup"><span data-stu-id="63257-134">The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.</span></span>  
  
 <span data-ttu-id="63257-135">クライアント アプリケーションのマネージャー受け取ると、order クラスのスキーマ、XSD.exe ユーティリティは、スキーマからクライアント固有の order クラスを生成するもう一度使用します。</span><span class="sxs-lookup"><span data-stu-id="63257-135">When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema.</span></span> <span data-ttu-id="63257-136">次に、サーバーの順序クラスではなく、クライアントのコード例で使用されているこのクラスが (XSD.exe ユーティリティは、元のクラスと同じ名前を指定するスキーマから生成されるクラスを発生)。</span><span class="sxs-lookup"><span data-stu-id="63257-136">It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class).</span></span> <span data-ttu-id="63257-137">この新しい order クラスは、順序をメッセージ本文にシリアル化に使用されます。</span><span class="sxs-lookup"><span data-stu-id="63257-137">This new order class is used to serialize the order into the message body.</span></span>  
  
 <span data-ttu-id="63257-138">次のコード例は、クライアント側の処理で注文をシリアル化し、キューに注文に関連付けられている情報を送信するために使用します。</span><span class="sxs-lookup"><span data-stu-id="63257-138">The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue.</span></span> <span data-ttu-id="63257-139">コードは、項目、数量、およびアドレスの情報を XSD.exe ユーティリティで Order.cs クラスに対して生成されたスキーマの要素に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="63257-139">The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility.</span></span> <span data-ttu-id="63257-140">注文は、ローカル コンピューターの注文のキューに送信されます。</span><span class="sxs-lookup"><span data-stu-id="63257-140">An order is sent to the Orders queue on the local computer.</span></span>  
  
 [!code-cpp[Classic XmlMessageFormatter Example#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source3.cpp#3)]
 [!code-csharp[Classic XmlMessageFormatter Example#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source3.cs#3)]
 [!code-vb[Classic XmlMessageFormatter Example#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source3.vb#3)]  
  
 <span data-ttu-id="63257-141">スキーマがサーバーで、order クラスから生成されると、クラスを変更できます。</span><span class="sxs-lookup"><span data-stu-id="63257-141">After the schema is generated from the order class on the server, you can modify the class.</span></span> <span data-ttu-id="63257-142">スキーマが変更しない限り、スキーマを再配布する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="63257-142">Unless the schema changes, you do not need to redistribute the schema.</span></span> <span data-ttu-id="63257-143">スキーマを配布して、生成されたクライアント側の order クラスと、そのクライアント クラスも変更できます、サーバーの順序のクラスとは無関係にスキーマ自体が変更されない限り。</span><span class="sxs-lookup"><span data-stu-id="63257-143">After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified.</span></span> <span data-ttu-id="63257-144">2 つのクラスは疎結合になります。</span><span class="sxs-lookup"><span data-stu-id="63257-144">The two classes have become loosely coupled.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.IMessageFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="63257-145">
            <see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-145">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="63257-146">対象の型を設定せずに、<see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-146">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, without target types set.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63257-147">このオーバー ロード コンス トラクターの最もよく使用されます、キューに書き込むときに、ターゲットの種類の書き込み時に必要ありません。</span><span class="sxs-lookup"><span data-stu-id="63257-147">This overload of the constructor is used most frequently when writing to the queue, as target types are not required when writing.</span></span>  
  
 <span data-ttu-id="63257-148">インスタンスを使用してキューからメッセージの読み取りに<xref:System.Messaging.XmlMessageFormatter>設定する必要がありますをこのコンス トラクターを使用して作成、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティ、フォーマッタは、逆シリアル化しようとする型を認識できるようにします。</span><span class="sxs-lookup"><span data-stu-id="63257-148">To read a message from a queue using an instance of <xref:System.Messaging.XmlMessageFormatter> created using this constructor, you must set the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties so the formatter knows what types to attempt to deserialize.</span></span>  
  
 <span data-ttu-id="63257-149">新規に作成するときに<xref:System.Messaging.MessageQueue>、既定の<xref:System.Messaging.XmlMessageFormatter>ターゲット型が設定されていないインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="63257-149">When you create a new <xref:System.Messaging.MessageQueue>, a default <xref:System.Messaging.XmlMessageFormatter> instance is created, without the target types set.</span></span> <span data-ttu-id="63257-150">フォーマッタはこのコンス トラクターを使用して作成、キューから読み取りをする場合、対象の型は、フォーマッタ インスタンスを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-150">As with a formatter created using this constructor, you must set target types for that formatter instance if you want to read from the queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (string[] targetTypeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] targetTypeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypeNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;System::String ^&gt; ^ targetTypeNames);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : string[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypeNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypeNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="targetTypeNames">
          <span data-ttu-id="63257-151">フォーマッタでメッセージから逆シリアル化できる型のセットを指定する <see cref="T:System.String" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-151">An array of type <see cref="T:System.String" /> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
          <span data-ttu-id="63257-152">これらの値は、たとえば "MyNamespace.MyOrders, MyOrdersAssemblyName" のように完全に限定されている必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-152">These values must be fully qualified, for example, "MyNamespace.MyOrders, MyOrdersAssemblyName".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63257-153">
            <see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化し、完全限定型の文字列値の配列として渡された対象の型を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-153">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, setting target types passed in as an array of (fully qualified) string values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63257-154">ターゲットの型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。</span><span class="sxs-lookup"><span data-stu-id="63257-154">The constructors with target type parameters are most frequently used when reading from the queue.</span></span> <span data-ttu-id="63257-155">作成する場合、ターゲットの種類を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="63257-155">When writing, it is not necessary to specify target types.</span></span>  
  
 <span data-ttu-id="63257-156">このオーバー ロード、<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクターのセット、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>プロパティ経由で渡された配列の値を`targetTypeNames`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="63257-156">This overload of the <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> constructor sets the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> property to the array values passed in through the `targetTypeNames` parameter.</span></span> <span data-ttu-id="63257-157">により、このプロパティの設定、<xref:System.Messaging.MessageQueue>これを使用して<xref:System.Messaging.XmlMessageFormatter>インスタンスのオブジェクトを含むメッセージを読み取る型を指定します。</span><span class="sxs-lookup"><span data-stu-id="63257-157">Setting this property enables a <xref:System.Messaging.MessageQueue> using this <xref:System.Messaging.XmlMessageFormatter> instance to read messages containing objects of given types.</span></span>  
  
 <span data-ttu-id="63257-158">両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。</span><span class="sxs-lookup"><span data-stu-id="63257-158">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="63257-159">これにより、メッセージ本文を解釈するフォーマッタ。</span><span class="sxs-lookup"><span data-stu-id="63257-159">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="63257-160">メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-160">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="63257-161">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="63257-161">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="63257-162">2 つのプロパティの 1 つだけが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="63257-162">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="63257-163">型のセットは、2 つのプロパティから結合されたセットです。</span><span class="sxs-lookup"><span data-stu-id="63257-163">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="63257-164">どちらを使用する 1 つは、アプリケーションに固有です。</span><span class="sxs-lookup"><span data-stu-id="63257-164">The decision of which one to use is specific to your application.</span></span> <span data-ttu-id="63257-165">メッセージの本文にスキーマが一致しない配列内のいずれかのプロパティの型のいずれかの型が含まれている場合は読み取り時に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="63257-165">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</span></span>  
  
   
  
## Examples  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63257-166">
            <paramref name="targetTypeNames" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-166">The <paramref name="targetTypeNames" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (Type[] targetTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type[] targetTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;Type ^&gt; ^ targetTypes);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : Type[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="targetTypes">
          <span data-ttu-id="63257-167">フォーマッタでメッセージから逆シリアル化できる型のセットを指定する <see cref="T:System.Type" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-167">An array of type <see cref="T:System.Type" /> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63257-168">
            <see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化し、オブジェクト型の配列として渡された対象の型を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-168">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, setting target types passed in as an array of object types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63257-169">ターゲットの型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。</span><span class="sxs-lookup"><span data-stu-id="63257-169">The constructors with target type parameters are most frequently used when reading from the queue.</span></span> <span data-ttu-id="63257-170">作成する場合、ターゲットの種類を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="63257-170">When writing, it is not necessary to specify target types.</span></span>  
  
 <span data-ttu-id="63257-171">このオーバー ロード、<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクターのセット、<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティ経由で渡された配列の値を`targetTypes`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="63257-171">This overload of the <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> constructor sets the <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> property to the array values passed in through the `targetTypes` parameter.</span></span> <span data-ttu-id="63257-172">このプロパティにより、設定、<xref:System.Messaging.MessageQueue>これを使用して<xref:System.Messaging.XmlMessageFormatter>インスタンスを指定した型のオブジェクトを含むメッセージを読み取る。</span><span class="sxs-lookup"><span data-stu-id="63257-172">Setting this property enables a <xref:System.Messaging.MessageQueue> using this <xref:System.Messaging.XmlMessageFormatter> instance to read messages containing objects of the given types.</span></span>  
  
 <span data-ttu-id="63257-173">両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。</span><span class="sxs-lookup"><span data-stu-id="63257-173">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="63257-174">これにより、メッセージ本文を解釈するフォーマッタ。</span><span class="sxs-lookup"><span data-stu-id="63257-174">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="63257-175">メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-175">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="63257-176">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="63257-176">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="63257-177">2 つのプロパティの 1 つだけが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="63257-177">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="63257-178">型のセットは、2 つのプロパティから結合されたセットです。</span><span class="sxs-lookup"><span data-stu-id="63257-178">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="63257-179">どちらを使用する 1 つは、アプリケーションに固有です。</span><span class="sxs-lookup"><span data-stu-id="63257-179">The decision of which one to use is specific to your application.</span></span> <span data-ttu-id="63257-180">メッセージの本文にスキーマが一致しない配列内のいずれかのプロパティの型のいずれかの型が含まれている場合は読み取り時に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="63257-180">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</span></span>  
  
 <span data-ttu-id="63257-181">指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時、エラー発生の可能性を減らすことではなく、コンパイル時に型が存在することがチェックされます。</span><span class="sxs-lookup"><span data-stu-id="63257-181">When specifying <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> rather than <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, type existence is checked at compile time rather than read time, reducing possibility for error.</span></span> <span data-ttu-id="63257-182"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> すべてのエントリは完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-182"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> requires every entry to be fully qualified, specifying its assembly name.</span></span> <span data-ttu-id="63257-183">さらに、複数の同時実行バージョンを使用する場合、バージョン番号する必要がありますも追加されますを対象の型名。</span><span class="sxs-lookup"><span data-stu-id="63257-183">Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</span></span>  
  
 <span data-ttu-id="63257-184">使用する場合<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>、各オブジェクトを追加することができます (たとえば、 `MyClass`) 次の c# コードに示す方法で一覧にします。</span><span class="sxs-lookup"><span data-stu-id="63257-184">When using <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, you can add each object (for example, `MyClass`) to the list in a way demonstrated by the following C# code.</span></span>  
  
```  
TargetTypes = new Type[]{typeof(MyClass)}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63257-185">
            <paramref name="targetTypes" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-185">The <paramref name="targetTypes" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="xmlMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="63257-186">検査対象の <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-186">The <see cref="T:System.Messaging.Message" /> to inspect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63257-187">フォーマッタがメッセージを逆シリアル化できるかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-187">Determines whether the formatter can deserialize the message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63257-188">XML フォーマッタがメッセージを逆シリアル化できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-188">
              <see langword="true" /> if the XML formatter can deserialize the message; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63257-189">ときに<xref:System.Messaging.XmlMessageFormatter.CanRead%2A>が呼び出され、フォーマッタかどうか、メッセージの内容は、逆シリアル化できる何かを決定しよう。</span><span class="sxs-lookup"><span data-stu-id="63257-189">When <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> is called, the formatter attempts to determine if the contents of the message are something it can deserialize.</span></span> <span data-ttu-id="63257-190">フォーマッタのみ逆シリアル化できる、メッセージ、メッセージ本文内の型に、型のいずれかと同じスキーマがある場合は、によって表される配列で、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="63257-190">The formatter can only deserialize the message if the type in the message body has the same schema as one of the types in the array represented by the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties.</span></span> <span data-ttu-id="63257-191"><xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 返します`false`次の 2 つの状況で。</span><span class="sxs-lookup"><span data-stu-id="63257-191"><xref:System.Messaging.XmlMessageFormatter.CanRead%2A> returns `false` under the following two circumstances:</span></span>  
  
-   <span data-ttu-id="63257-192">メッセージの形式を使用していない、<xref:System.Messaging.XmlMessageFormatter>します。</span><span class="sxs-lookup"><span data-stu-id="63257-192">The message was not formatted using the <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
-   <span data-ttu-id="63257-193">メッセージ本文のスキーマがいずれかに示されている間、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="63257-193">The schema of the message body is not among those listed in either the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> property.</span></span>  
  
 <span data-ttu-id="63257-194"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティはどのような種類のオブジェクトができる必要がありますを逆シリアル化フォーマッタを指示します。</span><span class="sxs-lookup"><span data-stu-id="63257-194">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what types of objects it must be able to deserialize.</span></span> <span data-ttu-id="63257-195">任意の型が、一覧にありませんが、メッセージ内で見つかった場合<xref:System.Messaging.XmlMessageFormatter.CanRead%2A>返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="63257-195">If any type is missing from the list, yet is found within the message, <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="63257-196">
            <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティも <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティも設定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-196">Neither the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> nor <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property has been set.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63257-197">
            <paramref name="message" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-197">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="xmlMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="63257-198">現在の <see cref="T:System.Messaging.XmlMessageFormatter" /> インスタンスと同じ読み取り/書き込みプロパティ (対象の型のセット) の <see cref="T:System.Messaging.XmlMessageFormatter" /> クラスのインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-198">Creates an instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class whose read/write properties (the sets of target types) are the same as the current <see cref="T:System.Messaging.XmlMessageFormatter" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63257-199">この <see cref="T:System.Messaging.XmlMessageFormatter" /> インスタンスのプロパティと同一のプロパティだが、メタデータでフォーマッタ クラス インスタンスであることが指定されていないオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-199">An object whose properties are identical to those of this <see cref="T:System.Messaging.XmlMessageFormatter" /> instance, but whose metadata does not specify it to be a formatter class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63257-200">このメソッドはフォーマッタのコピーを作成し、この値をそのすべてのプロパティを初期化します<xref:System.Messaging.XmlMessageFormatter>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="63257-200">This method creates a copy of the formatter and initializes all its properties to the values of this <xref:System.Messaging.XmlMessageFormatter> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="xmlMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="63257-201">逆シリアル化する XML 形式の <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-201">The <see cref="T:System.Messaging.Message" />, in XML format, to deserialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63257-202">指定されたメッセージからコンテンツを読み取り、逆シリアル化されたメッセージを含むオブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-202">Reads the contents from the given message and creates an object that contains the deserialized message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="63257-203">逆シリアル化されたメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-203">The deserialized message.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63257-204">両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。</span><span class="sxs-lookup"><span data-stu-id="63257-204">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="63257-205">メッセージを逆シリアル化する前に、これらのプロパティのいずれかを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-205">One of these properties must be set before the message can be deserialized.</span></span>  
  
 <span data-ttu-id="63257-206">メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-206">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="63257-207">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="63257-207">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="63257-208">対象の種類をキューに書き込むために指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="63257-208">The target types do not have to be specified in order to write to the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="63257-209">
            <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティも <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティも設定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-209">Neither the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> nor <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property has been set.</span>
          </span>
          <span data-ttu-id="63257-210">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-210">-or-</span>
          </span>
          <span data-ttu-id="63257-211">メッセージ本文でシリアル化されるインスタンスが、<see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティおよび <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティの型で表されたスキーマに従っていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-211">The instance serialized in the message body does not comply with any of the schemas represented by the types in the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> and <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> properties.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63257-212">
            <paramref name="message" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-212">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypeNames">
      <MemberSignature Language="C#" Value="public string[] TargetTypeNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetTypeNames" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypeNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ TargetTypeNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypeNames : string[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypeNames")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="63257-213">提供されたメッセージからフォーマッタで逆シリアル化できる型のセットを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-213">Specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="63257-214">メッセージの読み取り時に、メッセージ本文から逆シリアル化されるオブジェクトの型を指定する <see cref="T:System.String" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-214">An array of type <see cref="T:System.String" /> that specifies the types of objects to deserialize from the message body when reading the message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63257-215">両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。</span><span class="sxs-lookup"><span data-stu-id="63257-215">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="63257-216">これにより、メッセージ本文を解釈するフォーマッタ。</span><span class="sxs-lookup"><span data-stu-id="63257-216">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="63257-217">メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-217">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="63257-218">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="63257-218">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="63257-219">2 つのプロパティの 1 つだけが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="63257-219">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="63257-220">型のセットは、2 つのプロパティから結合されたセットです。</span><span class="sxs-lookup"><span data-stu-id="63257-220">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="63257-221">使用するプロパティの決定は、アプリケーションに固有です。</span><span class="sxs-lookup"><span data-stu-id="63257-221">The decision of which property to use is specific to your application.</span></span> <span data-ttu-id="63257-222">メッセージの本文にスキーマが一致しない配列内のいずれかのプロパティの型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="63257-222">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</span></span>  
  
 <span data-ttu-id="63257-223"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> すべてのエントリは完全修飾アセンブリ名を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-223"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> requires every entry to be fully qualified, specifying its assembly name.</span></span> <span data-ttu-id="63257-224">さらに、複数の同時実行バージョンを使用する場合、バージョン番号する必要がありますも追加されますを対象の型名。</span><span class="sxs-lookup"><span data-stu-id="63257-224">Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</span></span>  
  
 <span data-ttu-id="63257-225">対象の種類は、キューから読み取るときに必要です。</span><span class="sxs-lookup"><span data-stu-id="63257-225">The target types are only required when reading from the queue.</span></span> <span data-ttu-id="63257-226"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティは、キューへの書き込みに設定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="63257-226">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties do not need to be set to write to the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63257-227">
            <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-227">The <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> property is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypes">
      <MemberSignature Language="C#" Value="public Type[] TargetTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] TargetTypes" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypes As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Type ^&gt; ^ TargetTypes { cli::array &lt;Type ^&gt; ^ get(); void set(cli::array &lt;Type ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypes : Type[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="63257-228">提供されたメッセージからフォーマッタで逆シリアル化できる型のセットを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-228">Specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="63257-229">メッセージの読み取り時に、メッセージ本文から逆シリアル化されるオブジェクトの型を指定する <see cref="T:System.Type" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-229">An array of type <see cref="T:System.Type" /> that specifies the types of objects to deserialize from the message body when reading the message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63257-230">両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。</span><span class="sxs-lookup"><span data-stu-id="63257-230">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="63257-231">これにより、メッセージ本文を解釈するフォーマッタ。</span><span class="sxs-lookup"><span data-stu-id="63257-231">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="63257-232">メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。</span><span class="sxs-lookup"><span data-stu-id="63257-232">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="63257-233">使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="63257-233">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="63257-234">2 つのプロパティの 1 つだけが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="63257-234">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="63257-235">型のセットは、2 つのプロパティから結合されたセットです。</span><span class="sxs-lookup"><span data-stu-id="63257-235">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="63257-236">使用するプロパティの決定は、アプリケーションに固有です。</span><span class="sxs-lookup"><span data-stu-id="63257-236">The decision of which property to use is specific to your application.</span></span> <span data-ttu-id="63257-237">メッセージの本文にスキーマが一致しない配列内のいずれかのプロパティの型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="63257-237">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</span></span>  
  
 <span data-ttu-id="63257-238">対象の種類は、キューから読み取るときに必要です。</span><span class="sxs-lookup"><span data-stu-id="63257-238">The target types are only required when reading from the queue.</span></span> <span data-ttu-id="63257-239"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティは、キューへの書き込みに設定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="63257-239">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties do not need to be set to write to the queue.</span></span>  
  
 <span data-ttu-id="63257-240">指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時、エラー発生の可能性を減らすことではなく、コンパイル時に型が存在することがチェックされます。</span><span class="sxs-lookup"><span data-stu-id="63257-240">When specifying <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> rather than <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, type existence is checked at compile time rather than read time, reducing possibility for error.</span></span>  
  
 <span data-ttu-id="63257-241">使用する場合<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>、各オブジェクトを追加することができます (たとえば、 `MyClass`) を c# コードに示す方法で一覧に`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`します。</span><span class="sxs-lookup"><span data-stu-id="63257-241">When using <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, you can add each object (for example, `MyClass`) to the list in a way demonstrated by the C# code `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63257-242">次のコード例は、して、キューから注文を含むメッセージを送受信します。</span><span class="sxs-lookup"><span data-stu-id="63257-242">The following code example sends and receives a message that contains an order to and from a queue.</span></span>  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63257-243">
            <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-243">The <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="xmlMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="63257-244">
            <see cref="P:System.Messaging.Message.Body" /> プロパティにシリアル化されたオブジェクトが含まれる <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-244">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</span>
          </span>
        </param>
        <param name="obj">
          <span data-ttu-id="63257-245">メッセージの本文にシリアル化される <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-245">The <see cref="T:System.Object" /> to be serialized into the message body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="63257-246">メッセージ本文にオブジェクトをシリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-246">Serializes an object into the body of the message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63257-247">対象の種類を指定して、キューへの書き込みの読み取り時にあることが必要とする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="63257-247">The target types need not be specified to write to the queue as they must be when reading.</span></span> <span data-ttu-id="63257-248"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティは、メッセージを逆シリアル化時にのみ、フォーマッタによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="63257-248">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> property is used by the formatter only when deserializing a message.</span></span>  
  
 <span data-ttu-id="63257-249"><xref:System.Messaging.XmlMessageFormatter>の利用、<xref:System.Xml.Serialization.XmlSerializer>クラスは、シリアル化できる内容を定義します。</span><span class="sxs-lookup"><span data-stu-id="63257-249">The <xref:System.Messaging.XmlMessageFormatter> makes use of the <xref:System.Xml.Serialization.XmlSerializer> class, which defines what can be serialized.</span></span> <span data-ttu-id="63257-250">のみのパブリック フィールドとパブリック プロパティがシリアル化できるします。</span><span class="sxs-lookup"><span data-stu-id="63257-250">Only public fields and public properties can be serialized.</span></span> <span data-ttu-id="63257-251">構造体、配列、および構造体の配列を含む構造体は、SOAP プロトコルを使用したエンコード済みスタイルを使用しない限り、すべてシリアル化可能です。</span><span class="sxs-lookup"><span data-stu-id="63257-251">Structures, structures with arrays, and arrays of structures are all serializable, as long as they do not use the encoded style with the SOAP protocol.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="63257-252">
            <paramref name="message" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-252">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="63257-253">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-253">-or-</span>
          </span>
          <span data-ttu-id="63257-254">
            <paramref name="obj" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="63257-254">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>