<Type Name="XmlMessageFormatter" FullName="System.Messaging.XmlMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6a9a1931c75db76f56c20e9b7b0a8567e6d17609" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48590753" /></Metadata><TypeSignature Language="C#" Value="public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.XmlMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type XmlMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>XSD スキーマ定義の XML 書式を使用して、メッセージ本文との間でオブジェクトをシリアル化および逆シリアル化します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter>は既定のフォーマッタのインスタンス<xref:System.Messaging.MessageQueue>をキューに書き込まれたメッセージをシリアル化を使用します。 インスタンスを作成するときに<xref:System.Messaging.MessageQueue>のインスタンス<xref:System.Messaging.XmlMessageFormatter>が作成され、関連付けられている、<xref:System.Messaging.MessageQueue>します。 さまざまなフォーマッタを指定するには、コードで作成してに割り当てることによって、<xref:System.Messaging.MessageQueue.Formatter%2A>のプロパティ、<xref:System.Messaging.MessageQueue>します。  
  
 キューの既定<xref:System.Messaging.XmlMessageFormatter>インスタンスは、キューへの書き込みに使用できますが、いずれかを設定するまでに、キューから読み取るには使用できません、<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>フォーマッタのプロパティ。 既定のフォーマッタ インスタンスに、これらの値の一方または両方を設定することができますか、または、フォーマッタの新しいインスタンスを作成し、適切なに引数として渡すことによって、値が自動的に設定<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクター。  
  
 指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時、エラー発生の可能性を減らすことではなく、コンパイル時に型が存在することがチェックされます。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> すべてのエントリは完全修飾アセンブリ名を指定する必要があります。 さらに、複数の同時実行バージョンを使用する場合、バージョン番号する必要がありますも追加されますを対象の型名。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。 これにより、メッセージ本文を解釈するフォーマッタ。  
  
 メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。 使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。  
  
 2 つのプロパティの 1 つだけが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。 型のセットは、2 つのプロパティから結合されたセットです。 使用するプロパティの決定は、アプリケーションに固有です。 メッセージの本文にスキーマが一致しない配列内のいずれかのプロパティの型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。  
  
 <xref:System.Messaging.XmlMessageFormatter>は疎結合された XML ベースのメッセージングの重要なコンポーネントです。 XSD.exe ユーティリティは、XML 形式は、アプリケーションによって使用されるクラスをシリアル化するユーティリティを使用する場合など、XML スキーマを生成するために使用を使用します。 このクラスには既定のコンストラクターが必要です。  
  
 形式が使用されるもう一度逆のプロセスで、ユーティリティは、スキーマに基づくクラスを生成するときに配布する、クラスのデータを記述します。 ユーティリティおよび生成する XML スキーマの使用には、クラスの実装が変更された後、クラスを再コンパイルするたびに、.dll ファイルを回避することができます。 クライアントまたはサーバーで、スキーマが変更されない限り、いずれかの側には、その他の変更は影響しません、その他。  
  
   
  
## Examples  
 次のコード例には、3 つコードにはが含まれています。 サーバー コンポーネント、order クラス、およびクライアントのコード。 Order クラスは、受信メッセージ内で、サーバーが認識されるスキーマを生成する XSD.exe ユーティリティで使用できます。 スキーマは、クラスの「形状」を記述する XML 形式のファイルです。 このスキーマは、サーバー クラスと同じスキーマを共有するクライアント固有の order クラスを生成するクライアント側で使用できます。  
  
 次のコード例では、メッセージ キューからの注文を受信するサーバー コンポーネントを表します。 メッセージの本文に order オブジェクトのスキーマが次に示す Order.cs クラスと一致する必要があります。 サーバー プロセスまたはアプリケーションには、順序が逆シリアル化します。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlMessageFormatter Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source.cs#1)]
 [!code-vb[Classic XmlMessageFormatter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source.vb#1)]  
  
 次のコード例では、サーバー上のアプリケーションを受信し、逆シリアル化順序オブジェクトのスキーマを提供する順序クラスを表します。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic XmlMessageFormatter Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source2.cs#2)]
 [!code-vb[Classic XmlMessageFormatter Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source2.vb#2)]  
  
 サーバー上のアプリケーションとやり取りするクライアント アプリケーションは、メッセージ本文にローカルに定義された順序クラスでシリアル化する情報によって、サーバーにメッセージを送信する必要があります。 ローカルで定義された順序クラスをメッセージ本文を逆シリアル化しようとは、サーバー上のアプリケーションをサーバーが定義した順序クラスと同じスキーマが必要です。 XSD.exe ユーティリティでは、サーバー上のアプリケーションのマネージャーを作成して、クライアントがサーバーに送信するメッセージをシリアル化に使用する必要があります、スキーマを配布することができます。  
  
 クライアント アプリケーションのマネージャー受け取ると、order クラスのスキーマ、XSD.exe ユーティリティは、スキーマからクライアント固有の order クラスを生成するもう一度使用します。 次に、サーバーの順序クラスではなく、クライアントのコード例で使用されているこのクラスが (XSD.exe ユーティリティは、元のクラスと同じ名前を指定するスキーマから生成されるクラスを発生)。 この新しい order クラスは、順序をメッセージ本文にシリアル化に使用されます。  
  
 次のコード例は、クライアント側の処理で注文をシリアル化し、キューに注文に関連付けられている情報を送信するために使用します。 コードは、項目、数量、およびアドレスの情報を XSD.exe ユーティリティで Order.cs クラスに対して生成されたスキーマの要素に関連付けます。 注文は、ローカル コンピューターの注文のキューに送信されます。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source3.cpp#3)]
 [!code-csharp[Classic XmlMessageFormatter Example#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source3.cs#3)]
 [!code-vb[Classic XmlMessageFormatter Example#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source3.vb#3)]  
  
 スキーマがサーバーで、order クラスから生成されると、クラスを変更できます。 スキーマが変更しない限り、スキーマを再配布する必要はありません。 スキーマを配布して、生成されたクライアント側の order クラスと、そのクライアント クラスも変更できます、サーバーの順序のクラスとは無関係にスキーマ自体が変更されない限り。 2 つのクラスは疎結合になります。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.IMessageFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>対象の型を設定せずに、<see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード コンス トラクターの最もよく使用されます、キューに書き込むときに、ターゲットの種類の書き込み時に必要ありません。  
  
 インスタンスを使用してキューからメッセージの読み取りに<xref:System.Messaging.XmlMessageFormatter>設定する必要がありますをこのコンス トラクターを使用して作成、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティ、フォーマッタは、逆シリアル化しようとする型を認識できるようにします。  
  
 新規に作成するときに<xref:System.Messaging.MessageQueue>、既定の<xref:System.Messaging.XmlMessageFormatter>ターゲット型が設定されていないインスタンスを作成します。 フォーマッタはこのコンス トラクターを使用して作成、キューから読み取りをする場合、対象の型は、フォーマッタ インスタンスを設定する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (string[] targetTypeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] targetTypeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypeNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;System::String ^&gt; ^ targetTypeNames);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : string[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypeNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypeNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="targetTypeNames">フォーマッタでメッセージから逆シリアル化できる型のセットを指定する <see cref="T:System.String" /> 型の配列。 これらの値は、たとえば "MyNamespace.MyOrders, MyOrdersAssemblyName" のように完全に限定されている必要があります。</param>
        <summary><see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化し、完全限定型の文字列値の配列として渡された対象の型を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲットの型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。 作成する場合、ターゲットの種類を指定する必要はありません。  
  
 このオーバー ロード、<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクターのセット、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>プロパティ経由で渡された配列の値を`targetTypeNames`パラメーター。 により、このプロパティの設定、<xref:System.Messaging.MessageQueue>これを使用して<xref:System.Messaging.XmlMessageFormatter>インスタンスのオブジェクトを含むメッセージを読み取る型を指定します。  
  
 両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。 これにより、メッセージ本文を解釈するフォーマッタ。  
  
 メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。 使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。  
  
 2 つのプロパティの 1 つだけが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。 型のセットは、2 つのプロパティから結合されたセットです。 どちらを使用する 1 つは、アプリケーションに固有です。 メッセージの本文にスキーマが一致しない配列内のいずれかのプロパティの型のいずれかの型が含まれている場合は読み取り時に例外がスローされます。  
  
   
  
## Examples  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetTypeNames" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (Type[] targetTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type[] targetTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;Type ^&gt; ^ targetTypes);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : Type[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="targetTypes">フォーマッタでメッセージから逆シリアル化できる型のセットを指定する <see cref="T:System.Type" /> 型の配列。</param>
        <summary><see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化し、オブジェクト型の配列として渡された対象の型を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲットの型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。 作成する場合、ターゲットの種類を指定する必要はありません。  
  
 このオーバー ロード、<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクターのセット、<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティ経由で渡された配列の値を`targetTypes`パラメーター。 このプロパティにより、設定、<xref:System.Messaging.MessageQueue>これを使用して<xref:System.Messaging.XmlMessageFormatter>インスタンスを指定した型のオブジェクトを含むメッセージを読み取る。  
  
 両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。 これにより、メッセージ本文を解釈するフォーマッタ。  
  
 メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。 使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。  
  
 2 つのプロパティの 1 つだけが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。 型のセットは、2 つのプロパティから結合されたセットです。 どちらを使用する 1 つは、アプリケーションに固有です。 メッセージの本文にスキーマが一致しない配列内のいずれかのプロパティの型のいずれかの型が含まれている場合は読み取り時に例外がスローされます。  
  
 指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時、エラー発生の可能性を減らすことではなく、コンパイル時に型が存在することがチェックされます。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> すべてのエントリは完全修飾アセンブリ名を指定する必要があります。 さらに、複数の同時実行バージョンを使用する場合、バージョン番号する必要がありますも追加されますを対象の型名。  
  
 使用する場合<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>、各オブジェクトを追加することができます (たとえば、 `MyClass`) 次の c# コードに示す方法で一覧にします。  
  
```  
TargetTypes = new Type[]{typeof(MyClass)}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetTypes" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="xmlMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">検査対象の <see cref="T:System.Messaging.Message" />。</param>
        <summary>フォーマッタがメッセージを逆シリアル化できるかどうかを判断します。</summary>
        <returns>XML フォーマッタがメッセージを逆シリアル化できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに<xref:System.Messaging.XmlMessageFormatter.CanRead%2A>が呼び出され、フォーマッタかどうか、メッセージの内容は、逆シリアル化できる何かを決定しよう。 フォーマッタのみ逆シリアル化できる、メッセージ、メッセージ本文内の型に、型のいずれかと同じスキーマがある場合は、によって表される配列で、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティ。 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 返します`false`次の 2 つの状況で。  
  
-   メッセージの形式を使用していない、<xref:System.Messaging.XmlMessageFormatter>します。  
  
-   メッセージ本文のスキーマがいずれかに示されている間、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティ。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティはどのような種類のオブジェクトができる必要がありますを逆シリアル化フォーマッタを指示します。 任意の型が、一覧にありませんが、メッセージ内で見つかった場合<xref:System.Messaging.XmlMessageFormatter.CanRead%2A>返します`false`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティも <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティも設定されていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="xmlMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Messaging.XmlMessageFormatter" /> インスタンスと同じ読み取り/書き込みプロパティ (対象の型のセット) の <see cref="T:System.Messaging.XmlMessageFormatter" /> クラスのインスタンスを作成します。</summary>
        <returns>この <see cref="T:System.Messaging.XmlMessageFormatter" /> インスタンスのプロパティと同一のプロパティだが、メタデータでフォーマッタ クラス インスタンスであることが指定されていないオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはフォーマッタのコピーを作成し、この値をそのすべてのプロパティを初期化します<xref:System.Messaging.XmlMessageFormatter>オブジェクト。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="xmlMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">逆シリアル化する XML 形式の <see cref="T:System.Messaging.Message" />。</param>
        <summary>指定されたメッセージからコンテンツを読み取り、逆シリアル化されたメッセージを含むオブジェクトを作成します。</summary>
        <returns>逆シリアル化されたメッセージ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。 メッセージを逆シリアル化する前に、これらのプロパティのいずれかを設定する必要があります。  
  
 メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。 使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。  
  
 対象の種類をキューに書き込むために指定する必要はありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティも <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティも設定されていません。  
  
- または - 
メッセージ本文でシリアル化されるインスタンスが、<see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティおよび <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティの型で表されたスキーマに従っていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypeNames">
      <MemberSignature Language="C#" Value="public string[] TargetTypeNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetTypeNames" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypeNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ TargetTypeNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypeNames : string[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypeNames")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供されたメッセージからフォーマッタで逆シリアル化できる型のセットを指定します。</summary>
        <value>メッセージの読み取り時に、メッセージ本文から逆シリアル化されるオブジェクトの型を指定する <see cref="T:System.String" /> 型の配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。 これにより、メッセージ本文を解釈するフォーマッタ。  
  
 メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。 使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。  
  
 2 つのプロパティの 1 つだけが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。 型のセットは、2 つのプロパティから結合されたセットです。 使用するプロパティの決定は、アプリケーションに固有です。 メッセージの本文にスキーマが一致しない配列内のいずれかのプロパティの型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> すべてのエントリは完全修飾アセンブリ名を指定する必要があります。 さらに、複数の同時実行バージョンを使用する場合、バージョン番号する必要がありますも追加されますを対象の型名。  
  
 対象の種類は、キューから読み取るときに必要です。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティは、キューへの書き込みに設定する必要はありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティが <see langword="null" /> です。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypes">
      <MemberSignature Language="C#" Value="public Type[] TargetTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] TargetTypes" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypes As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Type ^&gt; ^ TargetTypes { cli::array &lt;Type ^&gt; ^ get(); void set(cli::array &lt;Type ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypes : Type[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供されたメッセージからフォーマッタで逆シリアル化できる型のセットを指定します。</summary>
        <value>メッセージの読み取り時に、メッセージ本文から逆シリアル化されるオブジェクトの型を指定する <see cref="T:System.Type" /> 型の配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化時に一致するように試行するには、どのようなスキーマをフォーマッタに伝えます。 これにより、メッセージ本文を解釈するフォーマッタ。  
  
 メッセージの本文にシリアル化されたインスタンスは、型の配列で表されたスキーマのいずれかに準拠する必要があります。 使用してメッセージを読み込んだとき、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドはメッセージ本文を読み込みます識別されるスキーマに対応する型のオブジェクトを作成します。  
  
 2 つのプロパティの 1 つだけが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。 型のセットは、2 つのプロパティから結合されたセットです。 使用するプロパティの決定は、アプリケーションに固有です。 メッセージの本文にスキーマが一致しない配列内のいずれかのプロパティの型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。  
  
 対象の種類は、キューから読み取るときに必要です。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティは、キューへの書き込みに設定する必要はありません。  
  
 指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時、エラー発生の可能性を減らすことではなく、コンパイル時に型が存在することがチェックされます。  
  
 使用する場合<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>、各オブジェクトを追加することができます (たとえば、 `MyClass`) を c# コードに示す方法で一覧に`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`します。  
  
   
  
## Examples  
 次のコード例は、して、キューから注文を含むメッセージを送受信します。  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティが <see langword="null" /> です。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="xmlMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="P:System.Messaging.Message.Body" /> プロパティにシリアル化されたオブジェクトが含まれる <see cref="T:System.Messaging.Message" />。</param>
        <param name="obj">メッセージの本文にシリアル化される <see cref="T:System.Object" />。</param>
        <summary>メッセージ本文にオブジェクトをシリアル化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 対象の種類を指定して、キューへの書き込みの読み取り時にあることが必要とする必要はありません。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティは、メッセージを逆シリアル化時にのみ、フォーマッタによって使用されます。  
  
 <xref:System.Messaging.XmlMessageFormatter>の利用、<xref:System.Xml.Serialization.XmlSerializer>クラスは、シリアル化できる内容を定義します。 のみのパブリック フィールドとパブリック プロパティがシリアル化できるします。 構造体、配列、および構造体の配列を含む構造体は、SOAP プロトコルを使用したエンコード済みスタイルを使用しない限り、すべてシリアル化可能です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> パラメーターが <see langword="null" /> です。  
  
- または - 
<paramref name="obj" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>