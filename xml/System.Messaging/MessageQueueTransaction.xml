<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2437017ed9b6b1b0bf366b5d4b834fcb0bdf84bd" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70568393" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageQueueTransaction = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="5f977-101">メッセージ キューの内部トランザクションを提供します。</span><span class="sxs-lookup"><span data-stu-id="5f977-101">Provides a Message Queuing internal transaction.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f977-102">トランザクションの一部としてメッセージを送受信するには<xref:System.Messaging.MessageQueueTransaction> 、クラスを使用してトランザクションを作成し、 <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType>メソッドまたは<xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType>パラメーターを`transaction`受け取るメソッドのオーバーロードに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="5f977-102">To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> method that takes a `transaction` parameter.</span></span> <span data-ttu-id="5f977-103">トランザクションの一部として送信されたメッセージは、トランザクションキューに送信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f977-103">Messages sent as part of a transaction must be sent to transactional queues.</span></span> <span data-ttu-id="5f977-104">トランザクションキューから受信したメッセージは、指定されたトランザクションを使用して受信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f977-104">Messages received from transactional queues must be received using a specified transaction.</span></span>  
  
 <span data-ttu-id="5f977-105"><xref:System.Messaging.MessageQueue.Receive%2A>メソッドに加えて、指定された id または指定された相関 id を持つメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="5f977-105">In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier.</span></span> <span data-ttu-id="5f977-106">トランザクションキュー <xref:System.Messaging.MessageQueue.ReceiveById%2A>から<xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>メッセージを選択的に受信する方法の詳細については、メソッドとメソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f977-106">See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.</span></span>  
  
 <span data-ttu-id="5f977-107">トランザクションキューに送信されたメッセージは、トランザクションがコミットされると削除されます。</span><span class="sxs-lookup"><span data-stu-id="5f977-107">Messages sent to transactional queues are removed if the transaction is committed.</span></span> <span data-ttu-id="5f977-108">同様に、トランザクションがロールバックされると、トランザクションキューから受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="5f977-108">Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</span></span>  
  
 <span data-ttu-id="5f977-109">を<xref:System.Messaging.MessageQueueTransaction>インスタンス化し、 <xref:System.Messaging.MessageQueue.Send%2A>メソッドまたは<xref:System.Messaging.MessageQueue.Receive%2A>メソッドの適用可能なオーバーロードに渡して、非トランザクションキューにメッセージを送信したり、非トランザクションキューからメッセージを受信したりすると、メソッドは例外をスローします。"トランザクションの使用方法が間違っている" ことを示します。</span><span class="sxs-lookup"><span data-stu-id="5f977-109">If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</span></span>  
  
 <span data-ttu-id="5f977-110"><xref:System.Messaging.MessageQueueTransaction>はスレッドアパートメントに対応しているため、アパートメント`STA`状態がの場合、複数のスレッドでトランザクションを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="5f977-110"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="5f977-111">Visual Basic はメインスレッドの状態をに`STA`設定します。したがって、 <xref:System.MTAThreadAttribute>を`Main`サブルーチンに適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f977-111">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="5f977-112">適用しない場合、別のスレッドを使用してトランザクション メッセージを送信すると、<xref:System.Messaging.MessageQueueException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5f977-112">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="5f977-113">を適用する<xref:System.MTAThreadAttribute>には、次のフラグメントを使用します。</span><span class="sxs-lookup"><span data-stu-id="5f977-113">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="5f977-114">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="5f977-114">This type is thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f977-115"><see cref="T:System.Messaging.MessageQueueTransaction" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5f977-115">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueTransaction" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f977-116">このコンストラクターは、 <xref:System.Messaging.MessageQueueTransaction.Status%2A>プロパティを`Initialized`に設定します。</span><span class="sxs-lookup"><span data-stu-id="5f977-116">This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="messageQueueTransaction.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f977-117">保留中の内部トランザクションをロールバックします。</span><span class="sxs-lookup"><span data-stu-id="5f977-117">Rolls back the pending internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f977-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A>の呼び出し<xref:System.Messaging.MessageQueueTransaction.Begin%2A>で開始されたプロセスの完了に失敗したことをマークします。</span><span class="sxs-lookup"><span data-stu-id="5f977-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="5f977-119">通常、1 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>つは`Try...Catch`例外処理ブロック内でを呼び出し、 `Try`句<xref:System.Messaging.MessageQueueTransaction.Abort%2A>にを<xref:System.Messaging.MessageQueueTransaction.Commit%2A>呼び出し、 `Catch`句内でを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5f977-119">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 <span data-ttu-id="5f977-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A>トランザクション全体をロールバックします。</span><span class="sxs-lookup"><span data-stu-id="5f977-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction.</span></span> <span data-ttu-id="5f977-121">これには、の呼び出しの後に<xref:System.Messaging.MessageQueueTransaction.Begin%2A>送受信されたすべてのメッセージが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5f977-121">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f977-122">ロールバックしようとしている内部トランザクションがまだ開始していません。</span><span class="sxs-lookup"><span data-stu-id="5f977-122">The internal transaction you are attempting to roll back has not started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="5f977-123">内部メッセージ キュー エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5f977-123">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="messageQueueTransaction.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f977-124">新しいメッセージ キューの内部トランザクションを開始します。</span><span class="sxs-lookup"><span data-stu-id="5f977-124">Begins a new Message Queuing internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f977-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A>トランザクションの成功に応じて、コミットまたはロールバックされる処理の開始をマークします。</span><span class="sxs-lookup"><span data-stu-id="5f977-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</span></span> <span data-ttu-id="5f977-126">処理中に例外が発生した場合、トランザクション全体がロールバックされます。</span><span class="sxs-lookup"><span data-stu-id="5f977-126">If an exception occurs during processing, the entire transaction is rolled back.</span></span> <span data-ttu-id="5f977-127">これには、の呼び出しの後に<xref:System.Messaging.MessageQueueTransaction.Begin%2A>送受信されたすべてのメッセージが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5f977-127">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="5f977-128">通常、1 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>つは`Try...Catch`例外処理ブロック内でを呼び出し、 `Try`句<xref:System.Messaging.MessageQueueTransaction.Abort%2A>にを<xref:System.Messaging.MessageQueueTransaction.Commit%2A>呼び出し、 `Catch`句内でを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5f977-128">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f977-129">トランザクションが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="5f977-129">The transaction has already been started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="5f977-130">内部メッセージ キュー エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5f977-130">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="messageQueueTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f977-131">保留中の内部トランザクションをコミットします。</span><span class="sxs-lookup"><span data-stu-id="5f977-131">Commits a pending internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f977-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A>の呼び出し<xref:System.Messaging.MessageQueueTransaction.Begin%2A>で開始された処理が正常に完了したことを示します。</span><span class="sxs-lookup"><span data-stu-id="5f977-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span> <span data-ttu-id="5f977-133">の呼び出し<xref:System.Messaging.MessageQueueTransaction.Begin%2A>と<xref:System.Messaging.MessageQueueTransaction.Commit%2A>の呼び出しの間で例外が発生した場合、トランザクション全体がロールバックされます。</span><span class="sxs-lookup"><span data-stu-id="5f977-133">If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back.</span></span> <span data-ttu-id="5f977-134">これには、の呼び出しの後に<xref:System.Messaging.MessageQueueTransaction.Begin%2A>送受信されたすべてのメッセージが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5f977-134">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="5f977-135">通常、1 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>つは`Try...Catch`例外処理ブロック内でを呼び出し、 `Try`句<xref:System.Messaging.MessageQueueTransaction.Abort%2A>にを<xref:System.Messaging.MessageQueueTransaction.Commit%2A>呼び出し、 `Catch`句内でを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5f977-135">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f977-136">コミットしようとしているトランザクションがまだ開始されていません。</span><span class="sxs-lookup"><span data-stu-id="5f977-136">The transaction you are trying to commit has not started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="5f977-137">内部メッセージ キュー エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5f977-137">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f977-138"><see cref="T:System.Messaging.MessageQueueTransaction" /> で使用したリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="5f977-138">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueTransaction.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f977-139"><see cref="T:System.Messaging.MessageQueueTransaction" /> によって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="5f977-139">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f977-140">を<xref:System.Messaging.MessageQueueTransaction.Dispose%2A>呼び出すと、 <xref:System.Messaging.MessageQueueTransaction>によって使用されるリソースを他の目的で再割り当てできます。</span><span class="sxs-lookup"><span data-stu-id="5f977-140">Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes.</span></span> <span data-ttu-id="5f977-141">の詳細`Dispose`については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f977-141">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="5f977-142">保留中の内部トランザクションは、に<xref:System.Messaging.MessageQueueTransaction.Dispose%2A>よってロールバックされます。</span><span class="sxs-lookup"><span data-stu-id="5f977-142">Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueTransaction.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="5f977-143">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5f977-143"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="5f977-144"><see cref="T:System.Messaging.MessageQueueTransaction" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="5f977-144">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f977-145">このメソッドは、パブリック<xref:System.Messaging.MessageQueueTransaction.Dispose%2A>メソッド<xref:System.Object.Finalize%2A>とメソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5f977-145">This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="5f977-146">`Dispose``disposing`パラメーターをに`Dispose(Boolean)` 設定して、保護されたメソッド `true` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5f977-146">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="5f977-147"><xref:System.Object.Finalize%2A>をに`disposing` `Dispose` 設定してを呼び出します `false` 。</span><span class="sxs-lookup"><span data-stu-id="5f977-147"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="5f977-148">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Messaging.MessageQueueTransaction> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="5f977-148">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references.</span></span> <span data-ttu-id="5f977-149">このメソッドは、参照される各オブジェクトの `Dispose` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5f977-149">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5f977-150">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="5f977-150">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="5f977-151"><see langword="Dispose(Boolean)" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5f977-151">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="5f977-152">を実装<see langword="Dispose" />する方法の詳細については、「 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f977-152">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="5f977-153"><see langword="Dispose" /> および <see langword="Finalize" /> の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」と「 [Finalize メソッドのオーバーライド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f977-153">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueTransaction.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f977-154">現在のインスタンスに保持されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="5f977-154">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f977-155">このメソッドは、<xref:System.Object.Finalize%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="5f977-155">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5f977-156">アプリケーションコードはこのメソッドを呼び出すことはできません。オブジェクトの<xref:System.Messaging.MessageQueueTransaction.Finalize%2A>メソッドは、ガベージコレクションの実行中に、メソッドの<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>呼び出しによってガベージコレクターによる終了処理が無効にされていない限り、自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5f977-156">Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="5f977-157">詳細については、「 [Finalize メソッドとデストラクター](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100))」、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」、および「 [finalize メソッドのオーバーライド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5f977-157">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Messaging.MessageQueueTransactionStatus" Usage="System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f977-158">トランザクションのステータスを取得します。</span><span class="sxs-lookup"><span data-stu-id="5f977-158">Gets the status of the transaction.</span></span></summary>
        <value><span data-ttu-id="5f977-159">トランザクションがコミットされた、中止された、初期化された、保留中のいずれかであることを示す <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="5f977-159">One of the <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f977-160"><xref:System.Messaging.MessageQueueTransaction>クラスのインスタンスが作成<xref:System.Messaging.MessageQueueTransaction.Status%2A>されると、コンストラクターによってがに`Initialized`設定されます。</span><span class="sxs-lookup"><span data-stu-id="5f977-160">When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`.</span></span> <span data-ttu-id="5f977-161">の<xref:System.Messaging.MessageQueueTransaction.Begin%2A> <xref:System.Messaging.MessageQueueTransaction.Commit%2A> <xref:System.Messaging.MessageQueueTransaction.Abort%2A>呼び出しの後、またはの呼び出しの前に、 `Pending`がです。 <xref:System.Messaging.MessageQueueTransaction.Status%2A></span><span class="sxs-lookup"><span data-stu-id="5f977-161">After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>
