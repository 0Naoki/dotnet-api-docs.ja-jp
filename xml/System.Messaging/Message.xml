<Type Name="Message" FullName="System.Messaging.Message">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="452b72d229254f13a5d2827bfeca0ec97c6f6675" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Message : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Message extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.Message" />
  <TypeSignature Language="VB.NET" Value="Public Class Message&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Message : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b53e0-101">メッセージ キューのメッセージを定義するのに必要なプロパティへのアクセスを実現します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b53e0-101">Provides access to the properties needed to define a Message Queuing message.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-102">使用して、<xref:System.Messaging.Message>クラス、キューからメッセージをピークまたはまたはキューにメッセージを送信するときにメッセージのプロパティを細かく制御します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-102">Use the <xref:System.Messaging.Message> class to peek or receive messages from a queue, or to have fine control over message properties when sending a message to a queue.</span></span>  
  
 <span data-ttu-id="b53e0-103"><xref:System.Messaging.MessageQueue> 使用して、<xref:System.Messaging.Message>クラスをピークします。 または、キューからメッセージを受信ため両方、<xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=nameWithType>と<xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType>メソッドの新しいインスタンスを作成する、<xref:System.Messaging.Message>クラスおよびインスタンスのプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-103"><xref:System.Messaging.MessageQueue> uses the <xref:System.Messaging.Message> class when it peeks or receives messages from queues, because both the <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=nameWithType> and <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> methods create a new instance of the <xref:System.Messaging.Message> class and set the instance's properties.</span></span> <span data-ttu-id="b53e0-104"><xref:System.Messaging.Message>クラスの読み取り専用プロパティを送信し、メッセージを取得する読み取り/書き込みプロパティを適用中に、キューからメッセージを取得するのには適用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-104">The <xref:System.Messaging.Message> class's read-only properties apply to retrieving messages from a queue, while the read/write properties apply to sending and retrieving messages.</span></span> <span data-ttu-id="b53e0-105">ときに<xref:System.Messaging.MessageQueue>をピークします。 または、キューからメッセージを受信、<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>プロパティを取得するメッセージのプロパティを決定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-105">When <xref:System.Messaging.MessageQueue> peeks or receives a message from a queue, its <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property determines which of the message's properties are retrieved.</span></span>  
  
 <span data-ttu-id="b53e0-106"><xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Send%2A>メソッドでは、そのキューに送信されるメッセージの任意のオブジェクト型を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-106">The <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> method allows you to specify any object type for a message being sent to that queue.</span></span> <span data-ttu-id="b53e0-107">使用することができます、<xref:System.Messaging.MessageQueue>インスタンスの<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>プロパティはキューに送信される一般的なメッセージの設定を指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-107">You can use the <xref:System.Messaging.MessageQueue> instance's <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property to specify settings for generic messages sent to the queue.</span></span> <span data-ttu-id="b53e0-108">設定の種類には、フォーマッタ、ラベル、暗号化、および認証が含まれます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-108">The types of settings include formatter, label, encryption, and authentication.</span></span> <span data-ttu-id="b53e0-109">適切な値を指定することも<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>メンバーを確認してレポートのメッセージに応答するメッセージング アプリケーションを調整するときにします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-109">You can also specify values for the appropriate <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> members when you coordinate your messaging application to respond to acknowledgment and report messages.</span></span> <span data-ttu-id="b53e0-110">使用して、<xref:System.Messaging.Message>のインスタンスをキューにメッセージを送信する柔軟性にアクセスして、これらのプロパティの多くを変更する — 1 つのメッセージまたはメッセージのメッセージによってごとにします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-110">Using a <xref:System.Messaging.Message> instance to send a message to the queue gives you the flexibility to access and modify many of these properties—either for a single message or on a message-by-message basis.</span></span> <span data-ttu-id="b53e0-111"><xref:System.Messaging.Message> プロパティよりも優先<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-111"><xref:System.Messaging.Message> properties take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.</span></span>  
  
 <span data-ttu-id="b53e0-112">メッセージ データが格納されている、<xref:System.Messaging.Message.Body%2A>プロパティと、いずれか小さいほうの範囲、<xref:System.Messaging.Message.AppSpecific%2A>と<xref:System.Messaging.Message.Extension%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-112">Message data is stored in the <xref:System.Messaging.Message.Body%2A> property and to a lesser extent, the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties.</span></span> <span data-ttu-id="b53e0-113">ときにメッセージ データが暗号化、シリアル化、または逆シリアル化の内容のみ、<xref:System.Messaging.Message.Body%2A>プロパティ影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-113">When message data is encrypted, serialized, or deserialized, only the contents of the <xref:System.Messaging.Message.Body%2A> property are affected.</span></span>  
  
 <span data-ttu-id="b53e0-114">内容、<xref:System.Messaging.Message.Body%2A>を使用して、メッセージを送信するときに、プロパティはシリアル化、<xref:System.Messaging.Message.Formatter%2A>プロパティを指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-114">The contents of the <xref:System.Messaging.Message.Body%2A> property are serialized when the message is sent, using the <xref:System.Messaging.Message.Formatter%2A> property you specify.</span></span> <span data-ttu-id="b53e0-115">シリアル化された内容は、<xref:System.Messaging.Message.BodyStream%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-115">The serialized contents are found in the <xref:System.Messaging.Message.BodyStream%2A> property.</span></span> <span data-ttu-id="b53e0-116">設定することも、<xref:System.Messaging.Message.BodyStream%2A>プロパティを直接例については、メッセージの内容がデータ ファイルを送信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-116">You can also set the <xref:System.Messaging.Message.BodyStream%2A> property directly, for example, to send a file as the data content of a message.</span></span> <span data-ttu-id="b53e0-117">変更することができます、<xref:System.Messaging.Message.Body%2A>または<xref:System.Messaging.Message.Formatter%2A>を呼び出すときに、メッセージ、およびデータを送信する前にいつでもプロパティを適切にシリアル化される<xref:System.Messaging.MessageQueue.Send%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-117">You can change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> properties at any time before sending the message, and the data will be serialized appropriately when you call <xref:System.Messaging.MessageQueue.Send%2A>.</span></span>  
  
 <span data-ttu-id="b53e0-118">によって定義されたプロパティ、<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType>プロパティはない型のメッセージにのみ適用<xref:System.Messaging.Message>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-118">The properties defined by the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType> property apply only to messages that are not of type <xref:System.Messaging.Message>.</span></span> <span data-ttu-id="b53e0-119">指定した場合、<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>プロパティを<xref:System.Messaging.MessageQueue>では、同じ名前のプロパティで、<xref:System.Messaging.Message>インスタンスがそのキューの原因を無視するようにこれらの既定プロパティを送信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-119">If you specify the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property for a <xref:System.Messaging.MessageQueue>, the identically named properties in a <xref:System.Messaging.Message> instance sent to that queue cause these default properties to be ignored.</span></span>  
  
 <span data-ttu-id="b53e0-120">インスタンスの初期プロパティ値の一覧については<xref:System.Messaging.Message>を参照してください、<xref:System.Messaging.Message.%23ctor%2A>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-120">For a list of initial property values for an instance of <xref:System.Messaging.Message>, see the <xref:System.Messaging.Message.%23ctor%2A> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-121">次のコード例では、メッセージ本文を使用して、書式設定を示しています<xref:System.Messaging.BinaryMessageFormatter>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-121">The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.</span></span>  
  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 <span data-ttu-id="b53e0-122">次のコード例では、メッセージ本文を使用して、書式設定を示しています<xref:System.Messaging.XmlMessageFormatter>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-122">The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
    <altmember cref="M:System.Messaging.MessageQueue.Receive" />
    <altmember cref="M:System.Messaging.MessageQueue.Peek" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-123">
            <see cref="T:System.Messaging.Message" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-123">Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-124">
            <see cref="T:System.Messaging.Message" /> クラスの新しいインスタンスを空の本文で初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-124">Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class with an empty body.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-125">このオーバー ロードを使用して、新しいインスタンスを作成する、<xref:System.Messaging.Message>空の本文を持つクラスであります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-125">Use this overload to create a new instance of the <xref:System.Messaging.Message> class that has an empty body.</span></span>  
  
 <span data-ttu-id="b53e0-126">いずれかを指定、<xref:System.Messaging.Message.Body%2A>プロパティまたは<xref:System.Messaging.Message.BodyStream%2A>を送信する前に、プロパティ、<xref:System.Messaging.Message>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b53e0-126">Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object.</span></span> <span data-ttu-id="b53e0-127"><xref:System.Messaging.Message.Body%2A>プロパティをテキスト文字列、構造体オブジェクト、クラスのインスタンスまたは埋め込みオブジェクトなど、シリアル化可能な任意のオブジェクトにすることができます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-127">The <xref:System.Messaging.Message.Body%2A> property can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.</span></span>  
  
 <span data-ttu-id="b53e0-128">直接メッセージの内容を記述しない限り、<xref:System.Messaging.Message.BodyStream%2A>プロパティ、設定、<xref:System.Messaging.Message.Formatter%2A>プロパティ、メッセージを送信する前にします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-128">Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message.</span></span> <span data-ttu-id="b53e0-129">使用して、本文がシリアル化、<xref:System.Messaging.Message.Formatter%2A>時のプロパティの値、<xref:System.Messaging.MessageQueue.Send%2A>メソッドが、<xref:System.Messaging.MessageQueue>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="b53e0-129">The body is serialized using the <xref:System.Messaging.Message.Formatter%2A> property's value at the time the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance.</span></span>  
  
 <span data-ttu-id="b53e0-130"><xref:System.Messaging.XmlMessageFormatter> 、疎結合できるので、同じオブジェクトをこの形式を使用する場合、送信者と受信者を入力する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-130">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.</span></span> <span data-ttu-id="b53e0-131"><xref:System.Messaging.ActiveXMessageFormatter>と<xref:System.Messaging.BinaryMessageFormatter>のバイナリ表現にデータをシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-131">The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation.</span></span> <span data-ttu-id="b53e0-132"><xref:System.Messaging.ActiveXMessageFormatter> COM コンポーネントを送受信する際に使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-132">The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.</span></span>  
  
 <span data-ttu-id="b53e0-133">次の表は、のインスタンスの初期プロパティ値を示しています。<xref:System.Messaging.Message>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-133">The following table shows initial property values for an instance of <xref:System.Messaging.Message>.</span></span>  
  
|<span data-ttu-id="b53e0-134">プロパティ</span><span class="sxs-lookup"><span data-stu-id="b53e0-134">Property</span></span>|<span data-ttu-id="b53e0-135">初期値</span><span class="sxs-lookup"><span data-stu-id="b53e0-135">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|<span data-ttu-id="b53e0-136">0</span><span class="sxs-lookup"><span data-stu-id="b53e0-136">0</span></span>|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|<span data-ttu-id="b53e0-137">Microsoft ベース暗号化プロバイダーのバージョン 1.0</span><span class="sxs-lookup"><span data-stu-id="b53e0-137">Microsoft Base Cryptographic Provider version 1.0</span></span>|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|`null`|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|<span data-ttu-id="b53e0-138">0</span><span class="sxs-lookup"><span data-stu-id="b53e0-138">0</span></span>|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|<span data-ttu-id="b53e0-139">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="b53e0-139">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|<span data-ttu-id="b53e0-140">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-140">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|<span data-ttu-id="b53e0-141">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-141">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|<span data-ttu-id="b53e0-142">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-142">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|<span data-ttu-id="b53e0-143">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="b53e0-143">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|<span data-ttu-id="b53e0-144">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-144">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-145">次のコード例では、キューに優先度が異なる 2 つのメッセージを送信し、順番に取得します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-145">The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.</span></span>  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message (object body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (body As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message(System::Object ^ body);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="body" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="b53e0-146">メッセージの本文にシリアル化されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-146">The object to be serialized into the body of the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b53e0-147">指定したオブジェクトをメッセージの本文にシリアル化するために <see cref="T:System.Messaging.XmlMessageFormatter" /> を使用して、<see cref="T:System.Messaging.Message" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-147">Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class, using the <see cref="T:System.Messaging.XmlMessageFormatter" /> to serialize the specified object into the body of the message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-148">このオーバー ロードを使用して、新しいインスタンスを作成する、<xref:System.Messaging.Message>クラスを含む、<xref:System.Messaging.Message.Body%2A>によって指定された、`body`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b53e0-148">Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter.</span></span> <span data-ttu-id="b53e0-149">`body`パラメーターは、文字列、構造体オブジェクト、クラスのインスタンスまたは埋め込みオブジェクトなど、シリアル化可能な任意のオブジェクトを指定できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-149">The `body` parameter can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.</span></span> <span data-ttu-id="b53e0-150">使用して、本文がシリアル化、<xref:System.Messaging.XmlMessageFormatter>を変更しない限り、<xref:System.Messaging.Message.Formatter%2A>前に、プロパティ、<xref:System.Messaging.Message>送信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-150">The body is serialized using the <xref:System.Messaging.XmlMessageFormatter> unless you change the <xref:System.Messaging.Message.Formatter%2A> property before the <xref:System.Messaging.Message> is sent.</span></span> <span data-ttu-id="b53e0-151">変更した場合、<xref:System.Messaging.Message.Body%2A>または<xref:System.Messaging.Message.Formatter%2A>プロパティを呼び出す前にいつでも<xref:System.Messaging.MessageQueue.Send%2A>、新しいプロパティ値に従ってメッセージをシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-151">If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value.</span></span>  
  
 <span data-ttu-id="b53e0-152"><xref:System.Messaging.XmlMessageFormatter> 、疎結合できるので、同じオブジェクトをこの形式を使用する場合、送信者と受信者を入力する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-152">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.</span></span> <span data-ttu-id="b53e0-153"><xref:System.Messaging.ActiveXMessageFormatter>と<xref:System.Messaging.BinaryMessageFormatter>のバイナリ表現にデータをシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-153">The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation.</span></span> <span data-ttu-id="b53e0-154"><xref:System.Messaging.ActiveXMessageFormatter> COM コンポーネントを送受信する際に使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-154">The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.</span></span>  
  
 <span data-ttu-id="b53e0-155">次の表は、のインスタンスの初期プロパティ値を示しています。<xref:System.Messaging.Message>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-155">The following table shows initial property values for an instance of <xref:System.Messaging.Message>.</span></span>  
  
|<span data-ttu-id="b53e0-156">プロパティ</span><span class="sxs-lookup"><span data-stu-id="b53e0-156">Property</span></span>|<span data-ttu-id="b53e0-157">初期値</span><span class="sxs-lookup"><span data-stu-id="b53e0-157">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|<span data-ttu-id="b53e0-158">0</span><span class="sxs-lookup"><span data-stu-id="b53e0-158">0</span></span>|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|<span data-ttu-id="b53e0-159">Microsoft ベース暗号化プロバイダーのバージョン 1.0</span><span class="sxs-lookup"><span data-stu-id="b53e0-159">Microsoft Base Cryptographic Provider version 1.0</span></span>|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|<span data-ttu-id="b53e0-160">`body` パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b53e0-160">The `body` parameter.</span></span>|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|<span data-ttu-id="b53e0-161">0</span><span class="sxs-lookup"><span data-stu-id="b53e0-161">0</span></span>|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|<span data-ttu-id="b53e0-162">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="b53e0-162">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|<span data-ttu-id="b53e0-163">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-163">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|<span data-ttu-id="b53e0-164">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-164">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|<span data-ttu-id="b53e0-165">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-165">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|<span data-ttu-id="b53e0-166">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="b53e0-166">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|<span data-ttu-id="b53e0-167">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-167">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-168">次のコード例を使用する、新しいキューを作成、注文が含まれており、それを取得するメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-168">The following code example creates a new queue, sends a message that contains an order to it, and then retrieves it.</span></span>  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message (object body, System.Messaging.IMessageFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object body, class System.Messaging.IMessageFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (body As Object, formatter As IMessageFormatter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message(System::Object ^ body, System::Messaging::IMessageFormatter ^ formatter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="body" Type="System.Object" />
        <Parameter Name="formatter" Type="System.Messaging.IMessageFormatter" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="b53e0-169">メッセージの本文にシリアル化されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-169">The object to be serialized into the body of the message.</span>
          </span>
        </param>
        <param name="formatter">
          <span data-ttu-id="b53e0-170">メッセージ本文をシリアル化するときに使うフォーマッタを指定する <see cref="T:System.Messaging.IMessageFormatter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-170">A <see cref="T:System.Messaging.IMessageFormatter" /> that specifies the formatter with which to serialize the message body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b53e0-171">指定したオブジェクトをメッセージの本文にシリアル化するために指定したフォーマッタを使用して、<see cref="T:System.Messaging.Message" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-171">Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class using the specified formatter to serialize the specified object into the body of the message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-172">このオーバー ロードを使用して、新しいインスタンスを作成する、<xref:System.Messaging.Message>クラスを含む、<xref:System.Messaging.Message.Body%2A>によって指定された、`body`パラメーターを任意の有効なフォーマッタを使用して、本文をシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-172">Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter and that uses any valid formatter to serialize the body.</span></span> <span data-ttu-id="b53e0-173">`body`パラメーターは文字列、構造体オブジェクト、クラスのインスタンスまたは埋め込みオブジェクトなど、シリアル化可能な任意のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b53e0-173">The `body` parameter is any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.</span></span> <span data-ttu-id="b53e0-174">変更した場合、<xref:System.Messaging.Message.Body%2A>または<xref:System.Messaging.Message.Formatter%2A>プロパティを呼び出す前にいつでも<xref:System.Messaging.MessageQueue.Send%2A>、新しいプロパティ値に従ってメッセージをシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-174">If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value.</span></span>  
  
 <span data-ttu-id="b53e0-175"><xref:System.Messaging.XmlMessageFormatter> 、疎結合できるので、同じオブジェクトをこの形式を使用する場合、送信者と受信者を入力する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-175">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.</span></span> <span data-ttu-id="b53e0-176"><xref:System.Messaging.ActiveXMessageFormatter>と<xref:System.Messaging.BinaryMessageFormatter>のバイナリ表現にデータをシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-176">The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation.</span></span> <span data-ttu-id="b53e0-177"><xref:System.Messaging.ActiveXMessageFormatter> COM コンポーネントを送受信する際に使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-177">The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.</span></span>  
  
 <span data-ttu-id="b53e0-178">次の表は、のインスタンスの初期プロパティ値を示しています。<xref:System.Messaging.Message>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-178">The following table shows initial property values for an instance of <xref:System.Messaging.Message>.</span></span>  
  
|<span data-ttu-id="b53e0-179">プロパティ</span><span class="sxs-lookup"><span data-stu-id="b53e0-179">Property</span></span>|<span data-ttu-id="b53e0-180">初期値</span><span class="sxs-lookup"><span data-stu-id="b53e0-180">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|<span data-ttu-id="b53e0-181">0</span><span class="sxs-lookup"><span data-stu-id="b53e0-181">0</span></span>|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|<span data-ttu-id="b53e0-182">Microsoft ベース暗号化プロバイダーのバージョン 1.0</span><span class="sxs-lookup"><span data-stu-id="b53e0-182">Microsoft Base Cryptographic Provider version 1.0</span></span>|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|<span data-ttu-id="b53e0-183">`body` パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b53e0-183">The `body` parameter.</span></span>|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|<span data-ttu-id="b53e0-184">0</span><span class="sxs-lookup"><span data-stu-id="b53e0-184">0</span></span>|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|<span data-ttu-id="b53e0-185">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="b53e0-185">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|<span data-ttu-id="b53e0-186">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-186">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|<span data-ttu-id="b53e0-187">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-187">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|<span data-ttu-id="b53e0-188">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-188">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.Formatter%2A>|<span data-ttu-id="b53e0-189">`formatter` パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b53e0-189">The `formatter` parameter.</span></span>|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|<span data-ttu-id="b53e0-190">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="b53e0-190">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|<span data-ttu-id="b53e0-191">バイトの長さ 0 の配列</span><span class="sxs-lookup"><span data-stu-id="b53e0-191">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeType">
      <MemberSignature Language="C#" Value="public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.AcknowledgeTypes AcknowledgeType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AcknowledgeType" />
      <MemberSignature Language="VB.NET" Value="Public Property AcknowledgeType As AcknowledgeTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AcknowledgeTypes AcknowledgeType { System::Messaging::AcknowledgeTypes get(); void set(System::Messaging::AcknowledgeTypes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAcknowledgeType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AcknowledgeTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-192">送信元アプリケーションに返す受信確認メッセージのタイプを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-192">Gets or sets the type of acknowledgment message to be returned to the sending application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-193">
            <see cref="T:System.Messaging.AcknowledgeTypes" /> 値の 1 つ。この値は、システムによって管理キューにポストされる受信確認メッセージのタイプと、送信元のアプリケーションに受信確認メッセージを返すときの条件を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-193">One of the <see cref="T:System.Messaging.AcknowledgeTypes" /> values, which represent both the types of acknowledgment messages the system posts in the administration queue and the conditions under which acknowledgments are returned to the sending application.</span>
          </span>
          <span data-ttu-id="b53e0-194">既定値は、<see langword="None" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-194">The default is <see langword="None" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-195"><xref:System.Messaging.Message.AcknowledgeType%2A>プロパティは、送信元アプリケーションによって要求された受信確認メッセージの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-195">The <xref:System.Messaging.Message.AcknowledgeType%2A> property specifies the type of acknowledgment messages requested by the sending application.</span></span> <span data-ttu-id="b53e0-196">設定、<xref:System.Messaging.Message.AcknowledgeType%2A>特定の状況の通知を要求するメッセージを送信する前にプロパティ — など、メッセージ送信先キューに到達、取得されるメッセージまたはによりメッセージに到達するか、送信先キューから取得されているタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-196">Set the <xref:System.Messaging.Message.AcknowledgeType%2A> property before sending the message to request notification of certain occurrences—for example, a message reaching its destination queue, a message being retrieved, or a time-out preventing a message from reaching or being retrieved from the destination queue.</span></span>  
  
 <span data-ttu-id="b53e0-197">メッセージ キューは受信確認メッセージを送信することで通知を返します、<xref:System.Messaging.Message.AdministrationQueue%2A>元のメッセージで指定されたプロパティ。</span><span class="sxs-lookup"><span data-stu-id="b53e0-197">Message Queuing returns notification by sending acknowledgment messages to the <xref:System.Messaging.Message.AdministrationQueue%2A> property specified by the original message.</span></span> <span data-ttu-id="b53e0-198">受信確認メッセージの<xref:System.Messaging.Message.Acknowledgment%2A>プロパティが表す受信確認の種類を示します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-198">An acknowledgment message's <xref:System.Messaging.Message.Acknowledgment%2A> property indicates the type of acknowledgment that it represents.</span></span> <span data-ttu-id="b53e0-199">たとえば、メッセージにする前に、変換先に到達しないため、受信確認メッセージが送信された場合、<xref:System.Messaging.Message.TimeToReachQueue%2A>間隔が経過した、<xref:System.Messaging.Message.Acknowledgment%2A>受信確認メッセージのプロパティの値が格納`ReachQueueTimeout`です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-199">For example, if an acknowledgment message was sent because a message did not reach the destination before the <xref:System.Messaging.Message.TimeToReachQueue%2A> interval expired, the <xref:System.Messaging.Message.Acknowledgment%2A> property of the acknowledgment message would contain the value `ReachQueueTimeout`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-200">次のコード例は、キューから注文を含むメッセージを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-200">The following code example sends and receives a message containing an order to and from a queue.</span></span> <span data-ttu-id="b53e0-201">元のメッセージが達した場合または具体的には、肯定受信確認の要求がキューから取得します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-201">It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.</span></span>  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-202">メッセージがフィルター処理され、<see cref="P:System.Messaging.Message.AcknowledgeType" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-202">The message is filtered to ignore the <see cref="P:System.Messaging.Message.AcknowledgeType" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.Acknowledgment" />
      </Docs>
    </Member>
    <Member MemberName="Acknowledgment">
      <MemberSignature Language="C#" Value="public System.Messaging.Acknowledgment Acknowledgment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.Acknowledgment Acknowledgment" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Acknowledgment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Acknowledgment As Acknowledgment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Acknowledgment Acknowledgment { System::Messaging::Acknowledgment get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAcknowledgement")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.Acknowledgment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-203">このメッセージが表す受信確認の分類を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-203">Gets the classification of acknowledgment that this message represents.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-204">
            <see cref="T:System.Messaging.Acknowledgment" /> 列挙値のいずれか。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-204">One of the <see cref="T:System.Messaging.Acknowledgment" /> enumeration values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-205">管理キューからメッセージを受信するときに読み取り、<xref:System.Messaging.Message.Acknowledgment%2A>プロパティを元のメッセージの状態を確認します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-205">When you receive a message from an administration queue, read the <xref:System.Messaging.Message.Acknowledgment%2A> property to verify the status of the original message.</span></span>  
  
 <span data-ttu-id="b53e0-206">メッセージが送信先キューに送信されると、受信確認メッセージを投稿するメッセージ キューを要求できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-206">When a message is sent to its destination queue, Message Queuing can be requested to post an acknowledgment message.</span></span> <span data-ttu-id="b53e0-207">このようなメッセージかなど、かどうか、指定されたタイムアウトは、内に取得されたメッセージに到着したどの配信に失敗した場合に発生したことを示していることができます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-207">Such a message can indicate, for example, whether the message arrived and was retrieved within specified time-outs, or it can indicate what went wrong in the case of delivery failure.</span></span> <span data-ttu-id="b53e0-208">送信先キューがメッセージを確認して、元のメッセージで指定される管理キューに送信を返します<xref:System.Messaging.Message.AdministrationQueue%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-208">The destination queue returns acknowledgment messages and posts them to the administration queue specified in the original message's <xref:System.Messaging.Message.AdministrationQueue%2A> property.</span></span> <span data-ttu-id="b53e0-209"><xref:System.Messaging.Message.Id%2A>受信確認メッセージのプロパティは、元のメッセージではなく、受信確認メッセージを識別します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-209">The <xref:System.Messaging.Message.Id%2A> property of an acknowledgment message identifies the acknowledgment message, not the original message.</span></span> <span data-ttu-id="b53e0-210">受信確認で元のメッセージの id を見つけることができます<xref:System.Messaging.Message>インスタンスの<xref:System.Messaging.Message.CorrelationId%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-210">You can find the identifier of the original message in the acknowledgment <xref:System.Messaging.Message> instance's <xref:System.Messaging.Message.CorrelationId%2A> property.</span></span>  
  
 <span data-ttu-id="b53e0-211">この場合<xref:System.Messaging.Message>インスタンスが、受信確認メッセージを表す、<xref:System.Messaging.Message.Acknowledgment%2A>プロパティが受信確認の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-211">If this <xref:System.Messaging.Message> instance represents an acknowledgment message, the <xref:System.Messaging.Message.Acknowledgment%2A> property specifies the type of acknowledgment.</span></span> <span data-ttu-id="b53e0-212">それ以外の場合、<xref:System.Messaging.Message.Acknowledgment%2A>プロパティ値を格納`Normal`です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-212">Otherwise, the <xref:System.Messaging.Message.Acknowledgment%2A> property contains the value `Normal`.</span></span>  
  
 <span data-ttu-id="b53e0-213">使用して、<xref:System.Messaging.Message.AcknowledgeType%2A>プロパティは、元のメッセージの受信確認が返されます状況を指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-213">Use the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the original message to specify the circumstances under which acknowledgments will be returned.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-214">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-214">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-215">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-215">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-216">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-216">-or-</span>
          </span>
          <span data-ttu-id="b53e0-217">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-217">The message queue is filtered to ignore the <see cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.CorrelationId" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekById(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveById(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="AdministrationQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue AdministrationQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue AdministrationQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AdministrationQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property AdministrationQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ AdministrationQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAdministrationQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-218">メッセージ キューによって生成される受信確認メッセージを受け取るキューを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-218">Gets or sets the queue that receives the acknowledgement messages that Message Queuing generates.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-219">システムによって生成される受信確認メッセージ用の管理キューを指定する <see cref="T:System.Messaging.MessageQueue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-219">The <see cref="T:System.Messaging.MessageQueue" /> that specifies the administration queue used for system-generated acknowledgment messages.</span>
          </span>
          <span data-ttu-id="b53e0-220">既定値は、<see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-220">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-221">指定されたキュー、<xref:System.Messaging.Message.AdministrationQueue%2A>プロパティは、任意の非トランザクション キューを使用できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-221">The queue specified in the <xref:System.Messaging.Message.AdministrationQueue%2A> property can be any non-transactional queue.</span></span> <span data-ttu-id="b53e0-222">管理キューに送信される受信確認メッセージは、元のメッセージが送信先キューに到達したかどうか、メッセージがキューから削除されたかどうかを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-222">The acknowledgment messages sent to the administration queue can indicate whether the original message reached its destination queue and whether it was removed from the queue.</span></span>  
  
 <span data-ttu-id="b53e0-223">ときに、<xref:System.Messaging.Message.AcknowledgeType%2A>プロパティ以外の任意の値を持つ`None`、送信元アプリケーションは、管理キューとして使用するキューを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-223">When the <xref:System.Messaging.Message.AcknowledgeType%2A> property has any value other than `None`, the sending application must specify the queue to use as the administration queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-224">次のコード例は、キューから注文を含むメッセージを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-224">The following code example sends and receives a message containing an order to and from a queue.</span></span> <span data-ttu-id="b53e0-225">元のメッセージが達した場合または具体的には、肯定受信確認の要求がキューから取得します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-225">It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.</span></span>  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-226">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.AdministrationQueue" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-226">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.AdministrationQueue" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.Acknowledgment" />
      </Docs>
    </Member>
    <Member MemberName="AppSpecific">
      <MemberSignature Language="C#" Value="public int AppSpecific { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AppSpecific" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AppSpecific" />
      <MemberSignature Language="VB.NET" Value="Public Property AppSpecific As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AppSpecific { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAppSpecific")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-227">アプリケーション固有の追加情報を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-227">Gets or sets additional, application-specific information.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-228">アプリケーションに固有の情報。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-228">Information that is specific to the application.</span>
          </span>
          <span data-ttu-id="b53e0-229">既定値は 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-229">The default is zero.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-230"><xref:System.Messaging.Message.AppSpecific%2A>プロパティには、メッセージのさまざまな種類の編成に使用できるアプリケーション固有の情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b53e0-230">The <xref:System.Messaging.Message.AppSpecific%2A> property contains application-specific information that you can use to organize different types of messages.</span></span> <span data-ttu-id="b53e0-231">たとえば、アプリケーション固有のインデックスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-231">For example, you can use application-specific indexes.</span></span> <span data-ttu-id="b53e0-232">解釈は、アプリケーションの責任である<xref:System.Messaging.Message.AppSpecific%2A>プロパティ情報です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-232">It is the responsibility of the application to interpret <xref:System.Messaging.Message.AppSpecific%2A> property information.</span></span>  
  
 <span data-ttu-id="b53e0-233">メッセージの本文でメッセージ データを含める必要があります、可能な限りではなく、<xref:System.Messaging.Message.AppSpecific%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-233">Whenever possible, you should include message data in the body of the message rather than the <xref:System.Messaging.Message.AppSpecific%2A> property.</span></span>  
  
 <span data-ttu-id="b53e0-234">外部のキューを使用するときに使用して、<xref:System.Messaging.Message.Extension%2A>メッセージ キューの存在しないメッセージのプロパティを指定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-234">When working with foreign queues, use the <xref:System.Messaging.Message.Extension%2A> property to specify message properties that do not exist in Message Queuing.</span></span> <span data-ttu-id="b53e0-235">同様、<xref:System.Messaging.Message.AppSpecific%2A>のコンテンツを理解してアプリケーションの役割は、プロパティ、<xref:System.Messaging.Message.Extension%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-235">As with the <xref:System.Messaging.Message.AppSpecific%2A> property, it is the responsibility of the application to understand the content of the <xref:System.Messaging.Message.Extension%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-236">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.AppSpecific" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-236">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.AppSpecific" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.Body" />
      </Docs>
    </Member>
    <Member MemberName="ArrivedTime">
      <MemberSignature Language="C#" Value="public DateTime ArrivedTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ArrivedTime" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ArrivedTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArrivedTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime ArrivedTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgArrivedTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-237">メッセージが送信先キューに到達した時刻を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-237">Gets the time that the message arrived in the destination queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-238">メッセージが送信先キューに到達した時刻を表す <see cref="T:System.DateTime" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-238">A <see cref="T:System.DateTime" /> that represents the message's arrival time in the destination queue.</span>
          </span>
          <span data-ttu-id="b53e0-239">この時刻は、グリニッジ平均時から、送信先キューが存在するコンピューターのローカル時間に調整されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-239">The time is adjusted from GMT to the local time of the computer on which the destination queue resides.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-240">メッセージの<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティは、送信先キューからメッセージを受け取る必要がどの程度の速度を示します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-240">The message's <xref:System.Messaging.Message.TimeToBeReceived%2A> property indicates how quickly the message must be received from the destination queue.</span></span> <span data-ttu-id="b53e0-241"><xref:System.Messaging.Message.TimeToBeReceived%2A>メッセージがキューに到着したときではなく、メッセージが送信されるときに、プロパティのタイマーが開始します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-241">The <xref:System.Messaging.Message.TimeToBeReceived%2A> property timer starts when the message is sent, not when the message arrives in the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-242">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.ArrivedTime%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-242">The following code example displays the value of a message's <xref:System.Messaging.Message.ArrivedTime%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-243">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-243">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-244">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-244">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-245">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-245">-or-</span>
          </span>
          <span data-ttu-id="b53e0-246">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.ArrivedTime" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-246">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.ArrivedTime" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
      </Docs>
    </Member>
    <Member MemberName="AttachSenderId">
      <MemberSignature Language="C#" Value="public bool AttachSenderId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AttachSenderId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AttachSenderId" />
      <MemberSignature Language="VB.NET" Value="Public Property AttachSenderId As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AttachSenderId { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAttachSenderId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-247">メッセージに送信者 ID を結び付ける必要があるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-247">Gets or sets a value that indicates whether the sender ID should be attached to the message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-248">
            <see cref="P:System.Messaging.Message.SenderId" /> をメッセージに結び付ける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-248">
              <see langword="true" /> if the <see cref="P:System.Messaging.Message.SenderId" /> should be attached to the message; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b53e0-249">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-249">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-250"><xref:System.Messaging.Message.SenderId%2A>プロパティを送信しているユーザーの識別子を表すバイトの配列です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-250">The <xref:System.Messaging.Message.SenderId%2A> property is an array of bytes that represents the identifier of the sending user.</span></span> <span data-ttu-id="b53e0-251">送信者 ID はメッセージ キューによって設定されているし、は、受信側キュー マネージャーによって使用送信者が、キューへのアクセス権を持つかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-251">The sender ID is set by Message Queuing and is used by the receiving Queue Manager to verify whether the sender has access rights to a queue.</span></span>  
  
 <span data-ttu-id="b53e0-252">ID が示しているメッセージ キュー メッセージの送信者を検証やは避けてください送信者のアクセスの確認の送信元アプリケーションによって、送信者がない場合は、受信側のキューに権限です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-252">The absence of the sender ID is an indication by the sending application that Message Queuing should not validate the message's sender nor verify the sender's access rights to the receiving queue.</span></span> <span data-ttu-id="b53e0-253"><xref:System.Messaging.Message.SenderId%2A>が信頼できるは、メッセージが送信先キューに達したときに認証された場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-253">The <xref:System.Messaging.Message.SenderId%2A> is trustworthy only if the message was authenticated when it reached the destination queue.</span></span> <span data-ttu-id="b53e0-254">キューが認証されたメッセージのみとするかを受け入れる場合、送信先キューに達すると、メッセージが拒否された、<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>または<xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>プロパティは`false`します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-254">The message is rejected when it reaches the destination queue if the queue accepts only authenticated messages and either the <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A> or the <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> property is `false`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b53e0-255">配信不能キューに送信するか、メッセージが拒否された場合は (場合<xref:System.Messaging.Message.UseDeadLetterQueue%2A>は`true`)、または無視されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-255">If a message is rejected, it is either sent to the dead-letter queue (if <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `true`), or it is ignored.</span></span> <span data-ttu-id="b53e0-256">メッセージがキューに到達できないときに、受信確認を要求できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-256">You can request acknowledgments when a message fails to reach a queue.</span></span> <span data-ttu-id="b53e0-257">それ以外の場合、when<xref:System.Messaging.Message.UseDeadLetterQueue%2A>は`false`メッセージは警告なし失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-257">Otherwise, when <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false` the message might be lost without warning.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-258">次のコード例を取得し、メッセージの値を設定<xref:System.Messaging.Message.AttachSenderId%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-258">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.AttachSenderId%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-259">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.AttachSenderId" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-259">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.AttachSenderId" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.SenderId" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.HashAlgorithm" />
        <altmember cref="P:System.Messaging.Message.SenderCertificate" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
      </Docs>
    </Member>
    <Member MemberName="Authenticated">
      <MemberSignature Language="C#" Value="public bool Authenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticated" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Authenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Authenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAuthenticated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-260">メッセージが認証されたかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-260">Gets a value that indicates whether the message was authenticated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-261">メッセージがキューに格納されたときにメッセージの認証が要求された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-261">
              <see langword="true" /> if authentication was requested for the message when it entered the queue; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-262"><xref:System.Messaging.Message.Authenticated%2A>メッセージと対話し、認証が要求されたかどうかの判断を行うには、中には、プロパティをアプリケーションでのみ使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-262">The <xref:System.Messaging.Message.Authenticated%2A> property is used only by the application while it is interacting with the message and trying to determine if authentication was requested.</span></span> <span data-ttu-id="b53e0-263">メッセージがキュー内にある場合は、メッセージが認証されました。</span><span class="sxs-lookup"><span data-stu-id="b53e0-263">If the message is in the queue, the message was authenticated.</span></span> <span data-ttu-id="b53e0-264">逆に場合、<xref:System.Messaging.Message.Authenticated%2A>プロパティは`true`、そのメッセージを受信すると、受信側キュー マネージャーがメッセージを認証します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-264">Conversely, if the <xref:System.Messaging.Message.Authenticated%2A> property is `true`, the receiving Queue Manager authenticated the message when it received that message.</span></span>  
  
 <span data-ttu-id="b53e0-265">メッセージのプロパティを調べることで認証に失敗したかどうかを判断できません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-265">You cannot determine if a message failed authentication by looking at its properties.</span></span> <span data-ttu-id="b53e0-266">メッセージ キューは、キューに配信される前に認証に失敗したメッセージを破棄します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-266">Message Queuing discards messages that fail authentication before they are delivered to the queue.</span></span> <span data-ttu-id="b53e0-267">ただし、配信の失敗が原因で、メッセージがキューに到着した場合に、受信確認メッセージを送信することを要求することができます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-267">However, you can request that an acknowledgment message be sent if a delivery failure prevents the message from arriving in the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-268">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.Authenticated%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-268">The following code example displays the value of a message's <xref:System.Messaging.Message.Authenticated%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-269">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-269">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-270">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-270">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-271">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-271">-or-</span>
          </span>
          <span data-ttu-id="b53e0-272">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Authenticated" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-272">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Authenticated" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationProviderName">
      <MemberSignature Language="C#" Value="public string AuthenticationProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AuthenticationProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AuthenticationProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AuthenticationProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAuthenticationProviderName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-273">メッセージのデジタル署名を生成するのに使われる暗号化プロバイダーの名前を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-273">Gets or sets the name of the cryptographic provider used to generate the digital signature of the message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-274">メッセージのデジタル署名を生成するのに使われる暗号化プロバイダーの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-274">The name of the cryptographic provider used to generate the digital signature of the message.</span>
          </span>
          <span data-ttu-id="b53e0-275">既定値は Microsoft ベース暗号化プロバイダー Version 1.0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-275">The default is Microsoft Base Cryptographic Provider version 1.0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-276">通常使用する、<xref:System.Messaging.Message.AuthenticationProviderName%2A>外部キューを使用する場合。</span><span class="sxs-lookup"><span data-stu-id="b53e0-276">You typically use the <xref:System.Messaging.Message.AuthenticationProviderName%2A> when working with foreign queues.</span></span> <span data-ttu-id="b53e0-277">メッセージ キューは、暗号化サービス プロバイダーを外部のキューに送信されたメッセージと外部のキューからメッセージ キューに渡されるメッセージの両方のデジタル署名を検証する (認証プロバイダー) の認証プロバイダーの種類と認証プロバイダーの名前が必要です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-277">Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.</span></span>  
  
 <span data-ttu-id="b53e0-278">メッセージを送信するときは常に設定、<xref:System.Messaging.Message.AuthenticationProviderName%2A>と<xref:System.Messaging.Message.ConnectorType%2A>プロパティを同時にします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-278">When sending a message, always set the <xref:System.Messaging.Message.AuthenticationProviderName%2A> and <xref:System.Messaging.Message.ConnectorType%2A> properties together.</span></span> <span data-ttu-id="b53e0-279">コネクタの種類にも設定されていない場合、メッセージ キュー メッセージを送信するときに認証のプロバイダー名を無視します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-279">When the message is sent, Message Queuing ignores the authentication provider name if the connector type is not also set.</span></span>  
  
 <span data-ttu-id="b53e0-280"><xref:System.Messaging.Message.AuthenticationProviderName%2A>プロパティは、`null`が空の文字列を指定できます ("") です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-280">The <xref:System.Messaging.Message.AuthenticationProviderName%2A> property cannot be `null`, but it can be an empty string ("").</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-281">
            <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> プロパティを設定できませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-281">The <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> property could not be set.</span>
          </span>
          <span data-ttu-id="b53e0-282">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-282">-or-</span>
          </span>
          <span data-ttu-id="b53e0-283">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.AuthenticationProviderName" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-283">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b53e0-284">
            <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> が <see langword="null" /> に設定されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-284">The <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> was set to <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationProviderType">
      <MemberSignature Language="C#" Value="public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.CryptographicProviderType AuthenticationProviderType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AuthenticationProviderType" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationProviderType As CryptographicProviderType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::CryptographicProviderType AuthenticationProviderType { System::Messaging::CryptographicProviderType get(); void set(System::Messaging::CryptographicProviderType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAuthenticationProviderType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.CryptographicProviderType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-285">メッセージのデジタル署名を生成するのに使われる暗号化プロバイダーの種類を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-285">Gets or sets the type of cryptographic provider used to generate the digital signature of the message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-286">
            <see cref="T:System.Messaging.CryptographicProviderType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-286">One of the <see cref="T:System.Messaging.CryptographicProviderType" /> values.</span>
          </span>
          <span data-ttu-id="b53e0-287">既定値は、<see langword="RSA_FULL" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-287">The default is <see langword="RSA_FULL" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-288">通常使用する、<xref:System.Messaging.Message.AuthenticationProviderType%2A>プロパティを指定する暗号化サービス プロバイダーは、メッセージに関連付けられた外部のキューを使用する場合。</span><span class="sxs-lookup"><span data-stu-id="b53e0-288">You typically use the <xref:System.Messaging.Message.AuthenticationProviderType%2A> property when working with foreign queues to specify which cryptographic service provider is associated with a message.</span></span> <span data-ttu-id="b53e0-289">メッセージ キューは、暗号化サービス プロバイダーを外部のキューに送信されたメッセージと外部のキューからメッセージ キューに渡されるメッセージの両方のデジタル署名を検証する (認証プロバイダー) の認証プロバイダーの種類と認証プロバイダーの名前が必要です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-289">Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.</span></span>  
  
 <span data-ttu-id="b53e0-290">のみ`RsaFull`メッセージングで使用するためのものでは、します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-290">Only `RsaFull` is intended to be used with messaging.</span></span>  
  
 <span data-ttu-id="b53e0-291">メッセージを送信するときは常に設定、<xref:System.Messaging.Message.AuthenticationProviderType%2A>と<xref:System.Messaging.Message.ConnectorType%2A>プロパティを同時にします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-291">When sending a message, always set the <xref:System.Messaging.Message.AuthenticationProviderType%2A> and <xref:System.Messaging.Message.ConnectorType%2A> properties together.</span></span> <span data-ttu-id="b53e0-292">コネクタの種類にも設定されていない場合、メッセージ キュー メッセージを送信するときに認証プロバイダーの種類を無視します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-292">When the message is sent, Message Queuing ignores the authentication provider type if the connector type is not also set.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-293">
            <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> プロパティを設定できませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-293">The <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> property could not be set.</span>
          </span>
          <span data-ttu-id="b53e0-294">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-294">-or-</span>
          </span>
          <span data-ttu-id="b53e0-295">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.AuthenticationProviderType" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-295">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="T:System.Messaging.CryptographicProviderType" />
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public object Body { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Body" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Body" />
      <MemberSignature Language="VB.NET" Value="Public Property Body As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Body { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-296">メッセージの内容を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-296">Gets or sets the content of the message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-297">メッセージの内容を指定するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-297">An object that specifies the message contents.</span>
          </span>
          <span data-ttu-id="b53e0-298">オブジェクトとして使用できるのは、文字列、日付、通貨、数値、バイト配列、または任意のマネージ オブジェクトです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-298">The object can be a string, a date, a currency, a number, an array of bytes, or any managed object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-299">メッセージの<xref:System.Messaging.Message.Body%2A>プロパティには、通常、メッセージに関連付けられているデータが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-299">The message's <xref:System.Messaging.Message.Body%2A> property usually contains the data associated with the message.</span></span> <span data-ttu-id="b53e0-300">アプリケーション固有のデータを送信することもできますが、<xref:System.Messaging.Message.AppSpecific%2A>と<xref:System.Messaging.Message.Extension%2A>プロパティ内のメッセージ データを含める必要があります、<xref:System.Messaging.Message.Body%2A>可能な限り、メッセージのです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-300">Although you can also send application-specific data in the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties, you should include message data in the <xref:System.Messaging.Message.Body%2A> of the message whenever possible.</span></span> <span data-ttu-id="b53e0-301">のみ、<xref:System.Messaging.Message.Body%2A>プロパティの内容がシリアル化または暗号化します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-301">Only the <xref:System.Messaging.Message.Body%2A> property contents are serialized or encrypted.</span></span>  
  
 <span data-ttu-id="b53e0-302"><xref:System.Messaging.Message.Body%2A>プロパティは、そのサイズが 4 MB を超えない任意のオブジェクトを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-302">The <xref:System.Messaging.Message.Body%2A> property can contain any object whose size does not exceed 4 MB.</span></span> <span data-ttu-id="b53e0-303">使用する場合<xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType>れていない型の任意のオブジェクトを送信する<xref:System.Messaging.Message>を<xref:System.Messaging.MessageQueue>、そのオブジェクトに配置されます、<xref:System.Messaging.Message.Body%2A>のプロパティ、<xref:System.Messaging.Message>によって返されるインスタンス<xref:System.Messaging.MessageQueue.Peek%2A>または<xref:System.Messaging.MessageQueue.Receive%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-303">If you use <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> to send any object that is not of type <xref:System.Messaging.Message> to the <xref:System.Messaging.MessageQueue>, that object will be located in the <xref:System.Messaging.Message.Body%2A> property of the <xref:System.Messaging.Message> instance returned by <xref:System.Messaging.MessageQueue.Peek%2A> or <xref:System.Messaging.MessageQueue.Receive%2A>.</span></span>  
  
 <span data-ttu-id="b53e0-304">文字列の引数`MessageQueue.Send("hello.")`このような汎用オブジェクトの例に示します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-304">The string argument in `MessageQueue.Send("hello.")` is an example of such a generic object.</span></span>  
  
 <span data-ttu-id="b53e0-305"><xref:System.Messaging.Message.BodyType%2A>プロパティは、メッセージ本文に格納されている情報の種類を示します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-305">The <xref:System.Messaging.Message.BodyType%2A> property indicates the type of information that is stored in the message body.</span></span> <span data-ttu-id="b53e0-306">メッセージ キューでは、この情報を使用して、特定の種類、<xref:System.Messaging.Message.Body%2A>プロパティの内容。</span><span class="sxs-lookup"><span data-stu-id="b53e0-306">Message Queuing uses this information to identify the type of the <xref:System.Messaging.Message.Body%2A> property contents.</span></span>  
  
 <span data-ttu-id="b53e0-307">いずれかを指定、<xref:System.Messaging.Message.Body%2A>プロパティまたは<xref:System.Messaging.Message.BodyStream%2A>を送信する前に、プロパティ、<xref:System.Messaging.Message>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b53e0-307">Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object.</span></span> <span data-ttu-id="b53e0-308"><xref:System.Messaging.Message.Body%2A>プロパティは、任意のテキスト文字列などのシリアル化可能なオブジェクト、構造体オブジェクト、クラスのインスタンスまたは埋め込みオブジェクトを指定できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-308">The <xref:System.Messaging.Message.Body%2A> property can be any serializable object, such as a text string, structure object, class instance, or embedded object.</span></span>  
  
 <span data-ttu-id="b53e0-309">直接メッセージの内容を記述しない限り、<xref:System.Messaging.Message.BodyStream%2A>プロパティ、設定、<xref:System.Messaging.Message.Formatter%2A>プロパティ、メッセージを送信する前にします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-309">Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message.</span></span> <span data-ttu-id="b53e0-310">ときに、<xref:System.Messaging.MessageQueue.Send%2A>メソッドが、<xref:System.Messaging.MessageQueue>に含まれているフォーマッタを使用して、インスタンス、本文がシリアル化、<xref:System.Messaging.Message.Formatter%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-310">When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property.</span></span> <span data-ttu-id="b53e0-311">値を指定せず、メッセージを送信するかどうか、<xref:System.Messaging.Message.Formatter%2A>プロパティ、フォーマッタの既定値<xref:System.Messaging.XmlMessageFormatter>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-311">If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b53e0-312">メッセージの本文を設定しようとしています。<xref:System.Decimal.MaxValue>により、<xref:System.OverflowException>ときに、`Send`のメソッド、<xref:System.Messaging.MessageQueue>クラスが呼び出されますと<xref:System.Messaging.ActiveXMessageFormatter>を使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-312">Attempting to set the body of a message to <xref:System.Decimal.MaxValue> will cause a <xref:System.OverflowException> when the `Send` method of the <xref:System.Messaging.MessageQueue> class is called and the <xref:System.Messaging.ActiveXMessageFormatter> is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-313">次のコード例では、キューに優先度が異なる 2 つのメッセージを送信し、順番に取得します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-313">The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.</span></span>  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-314">
            <see cref="P:System.Messaging.Message.Formatter" /> プロパティが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-314">The <see cref="P:System.Messaging.Message.Formatter" /> property is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b53e0-315">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-315">-or-</span>
          </span>
          <span data-ttu-id="b53e0-316">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Body" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-316">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Body" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.BodyStream" />
        <altmember cref="P:System.Messaging.Message.BodyType" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BodyStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BodyStream { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BodyStream" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.BodyStream" />
      <MemberSignature Language="VB.NET" Value="Public Property BodyStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ BodyStream { System::IO::Stream ^ get(); void set(System::IO::Stream ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgBodyStream")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-317">メッセージの本文の情報を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-317">Gets or sets the information in the body of the message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-318">メッセージの <see cref="T:System.IO.Stream" /> に含まれるシリアル化された情報を格納する <see cref="P:System.Messaging.Message.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-318">A <see cref="T:System.IO.Stream" /> that contains the serialized information included in the <see cref="P:System.Messaging.Message.Body" /> of the message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-319">メッセージの本文がどの型の情報で構成できます: 文字列、日付、通貨、数値、(バイト単位) の配列または任意のマネージ オブジェクトなどです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-319">The body of a message can consist of any type of information—for example, a string, a date, a currency, a number, an array of bytes, or any managed object.</span></span> <span data-ttu-id="b53e0-320">この情報がシリアル化、<xref:System.IO.Stream>キューに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-320">This information is serialized into a <xref:System.IO.Stream> to be passed to the queue.</span></span>  
  
 <span data-ttu-id="b53e0-321">いずれかを指定、<xref:System.Messaging.Message.Body%2A>プロパティまたは<xref:System.Messaging.Message.BodyStream%2A>を送信する前に、プロパティ、<xref:System.Messaging.Message>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b53e0-321">Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object.</span></span> <span data-ttu-id="b53e0-322">設定した場合、<xref:System.Messaging.Message.Body%2A>プロパティ、内容がシリアル化するのには<xref:System.Messaging.Message.BodyStream%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-322">If you set the <xref:System.Messaging.Message.Body%2A> property, the contents are serialized into the <xref:System.Messaging.Message.BodyStream%2A> property.</span></span> <span data-ttu-id="b53e0-323">ただし、書き込みを選択できます、<xref:System.Messaging.Message.BodyStream%2A>プロパティを直接です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-323">However, you can choose to write the <xref:System.Messaging.Message.BodyStream%2A> property directly.</span></span> <span data-ttu-id="b53e0-324">これはファイルへの接続を開くし、メッセージの本文としてその内容をストリーム配信するときに便利です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-324">This is useful, for example, when you want to open a connection to a file and stream its contents as the body of your message.</span></span>  
  
 <span data-ttu-id="b53e0-325">直接メッセージの内容を記述しない限り、<xref:System.Messaging.Message.BodyStream%2A>プロパティ、設定、<xref:System.Messaging.Message.Formatter%2A>プロパティ、メッセージを送信する前にします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-325">Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message.</span></span> <span data-ttu-id="b53e0-326">ときに、<xref:System.Messaging.MessageQueue.Send%2A>メソッドが、<xref:System.Messaging.MessageQueue>に含まれているフォーマッタを使用して、インスタンス、本文がシリアル化、<xref:System.Messaging.Message.Formatter%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-326">When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property.</span></span> <span data-ttu-id="b53e0-327">値を指定せず、メッセージを送信するかどうか、<xref:System.Messaging.Message.Formatter%2A>プロパティ、フォーマッタの既定値<xref:System.Messaging.XmlMessageFormatter>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-327">If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 <span data-ttu-id="b53e0-328">設定した場合、<xref:System.Messaging.Message.UseEncryption%2A>プロパティを`true`送信されるとき、設定するときではなく、このメッセージの本文のメッセージが暗号化する、<xref:System.Messaging.Message.Body%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-328">If you set the <xref:System.Messaging.Message.UseEncryption%2A> property to `true` for the body of this message, the message will be encrypted when it is sent, not when you set the <xref:System.Messaging.Message.Body%2A> property.</span></span> <span data-ttu-id="b53e0-329">したがって、<xref:System.Messaging.Message.BodyStream%2A>プロパティは暗号化されません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-329">Therefore, the <xref:System.Messaging.Message.BodyStream%2A> property is never encrypted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-330">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Body" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-330">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Body" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="P:System.Messaging.Message.BodyType" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BodyType">
      <MemberSignature Language="C#" Value="public int BodyType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BodyType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.BodyType" />
      <MemberSignature Language="VB.NET" Value="Public Property BodyType As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BodyType { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgBodyType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-331">メッセージ本文に含まれるデータ型を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-331">Gets or sets the type of data that the message body contains.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-332">文字列、日付、通貨、数値など、メッセージ本文の実際の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-332">The message body's true type, such as a string, a date, a currency, or a number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-333">メッセージ キューはオブジェクトまたはシリアル化されたストリームとして、本文の内容を認識します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-333">Message Queuing recognizes the body contents as an object or as a serialized stream.</span></span> <span data-ttu-id="b53e0-334"><xref:System.Messaging.Message.BodyType%2A>プロパティ内のオブジェクトの種類を示します、<xref:System.Messaging.Message.Body%2A>メッセージのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-334">The <xref:System.Messaging.Message.BodyType%2A> property indicates the type of the object within the <xref:System.Messaging.Message.Body%2A> property of the message.</span></span>  
  
 <span data-ttu-id="b53e0-335"><xref:System.Messaging.XmlMessageFormatter>メッセージ本文内でネイティブ型とオブジェクトの間のバインドを実行します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-335">The <xref:System.Messaging.XmlMessageFormatter> performs binding between native types and the object in a message body.</span></span> <span data-ttu-id="b53e0-336">使用する場合、 <xref:System.Messaging.XmlMessageFormatter>、フォーマッタのセット、<xref:System.Messaging.Message.BodyType%2A>するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-336">If you use the <xref:System.Messaging.XmlMessageFormatter>, the formatter sets the <xref:System.Messaging.Message.BodyType%2A> property for you.</span></span>  
  
 <span data-ttu-id="b53e0-337">その他のフォーマッタは、バインディング機能をさらに、次の c# コードに示すように提供できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-337">Other formatters can provide binding functionality also, as shown in the following C# code.</span></span>  
  
```  
message.Formatter = new ActiveXMessageFormatter();  
object myObject message.Body;  
if (myObject is string) {  
}  
if (myObject is int) {  
}  
if (myObject is float) {  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-338">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.BodyType%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-338">The following code example displays the value of a message's <xref:System.Messaging.Message.BodyType%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-339">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Body" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-339">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Body" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="P:System.Messaging.Message.BodyStream" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConnectorType">
      <MemberSignature Language="C#" Value="public Guid ConnectorType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ConnectorType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ConnectorType" />
      <MemberSignature Language="VB.NET" Value="Public Property ConnectorType As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid ConnectorType { Guid get(); void set(Guid value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgConnectorType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-340">通常ではメッセージ キューによって設定されるメッセージ プロパティが、実際には送信元アプリケーションによって設定されたことを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-340">Gets or sets a value that indicates that some message properties typically set by Message Queuing were set by the sending application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-341">アプリケーションによって定義され、コネクタ アプリケーションまたはメッセージ暗号方式と共に使われる <see cref="T:System.Guid" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-341">A <see cref="T:System.Guid" /> defined by the application and used in conjunction with connector applications or message encryption.</span>
          </span>
          <span data-ttu-id="b53e0-342">この <see cref="T:System.Guid" /> を使うと、受信側アプリケーションは、通常はメッセージ キューによって設定されますが、実際には送信元アプリケーションによって設定されたメッセージ プロパティを解釈できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-342">This <see cref="T:System.Guid" /> allows a receiving application to interpret message properties that were set by the sending application but that are usually set by Message Queuing.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-343">メッセージ キューが必要です、<xref:System.Messaging.Message.ConnectorType%2A>プロパティは、アプリケーションは通常、メッセージ キューによって設定されるメッセージ プロパティを設定するときに設定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-343">Message Queuing requires the <xref:System.Messaging.Message.ConnectorType%2A> property be set whenever an application sets a message property that is usually set by Message Queuing.</span></span> <span data-ttu-id="b53e0-344">アプリケーションは、<xref:System.Messaging.Message.ConnectorType%2A>次の 2 つの場合。</span><span class="sxs-lookup"><span data-stu-id="b53e0-344">An application typically uses a <xref:System.Messaging.Message.ConnectorType%2A> in the following two cases:</span></span>  
  
-   <span data-ttu-id="b53e0-345">ときに、コネクタ アプリケーションは、メッセージを渡します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-345">Whenever a connector application passes a message.</span></span> <span data-ttu-id="b53e0-346"><xref:System.Messaging.Message.ConnectorType%2A>送信側と受信側のアプリケーション メッセージのセキュリティおよび受信確認プロパティを解釈する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-346">The <xref:System.Messaging.Message.ConnectorType%2A> tells the sending and receiving applications how to interpret the security and acknowledgment properties of the message.</span></span>  
  
-   <span data-ttu-id="b53e0-347">ときに、送信元アプリケーションではなく、メッセージ キューがメッセージを暗号化します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-347">Whenever the sending application, rather than Message Queuing, encrypts a message.</span></span> <span data-ttu-id="b53e0-348"><xref:System.Messaging.Message.ConnectorType%2A>メッセージがキューを使用するように指示、<xref:System.Messaging.Message.DestinationSymmetricKey%2A>プロパティの値をメッセージの暗号化を解除します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-348">The <xref:System.Messaging.Message.ConnectorType%2A> tells Message Queuing to use the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property value to decrypt the message.</span></span>  
  
 <span data-ttu-id="b53e0-349">設定する必要があります、<xref:System.Messaging.Message.ConnectorType%2A>プロパティ、次のプロパティを設定した場合 (それ以外の場合、キューを無視するこれらのプロパティ、メッセージの送信時)。</span><span class="sxs-lookup"><span data-stu-id="b53e0-349">You must set the <xref:System.Messaging.Message.ConnectorType%2A> property if you set any of the following properties (otherwise, the queue ignores these properties when the message is sent):</span></span>  
  
-   <xref:System.Messaging.Message.AuthenticationProviderName%2A>  
  
-   <xref:System.Messaging.Message.AuthenticationProviderType%2A>  
  
-   <xref:System.Messaging.Message.DestinationSymmetricKey%2A>  
  
-   <xref:System.Messaging.Message.DigitalSignature%2A>  
  
-   <xref:System.Messaging.Message.MessageType%2A>  
  
-   <xref:System.Messaging.Message.SenderId%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-350">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.ConnectorType" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-350">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.ConnectorType" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.DestinationSymmetricKey" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.Message.MessageType" />
        <altmember cref="P:System.Messaging.Message.SenderId" />
      </Docs>
    </Member>
    <Member MemberName="CorrelationId">
      <MemberSignature Language="C#" Value="public string CorrelationId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CorrelationId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.CorrelationId" />
      <MemberSignature Language="VB.NET" Value="Public Property CorrelationId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CorrelationId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgCorrelationId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-351">元のメッセージを参照するために、受信確認メッセージ、レポート メッセージ、応答メッセージによって使われるメッセージ ID を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-351">Gets or sets the message identifier used by acknowledgment, report, and response messages to reference the original message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-352">元のメッセージの <see cref="P:System.Messaging.Message.Id" /> プロパティによって指定されるメッセージ ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-352">The message identifier specified by the <see cref="P:System.Messaging.Message.Id" /> property of the original message.</span>
          </span>
          <span data-ttu-id="b53e0-353">相関関係 ID は、メッセージ キューが受信確認メッセージまたはレポート メッセージを生成するときにメッセージ キューによって、またアプリケーションが応答メッセージを生成するときにアプリケーションによってそれぞれ使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-353">The correlation identifier is used by Message Queuing when it generates an acknowledgment or report message, and by an application when it generates a response message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-354">メッセージ キュー、受信確認メッセージまたはレポート メッセージを生成するときの相関関係の識別子プロパティを使用して、元のメッセージのメッセージ識別子を指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-354">When Message Queuing generates an acknowledgment or report message, it uses the correlation identifier property to specify the message identifier of the original message.</span></span> <span data-ttu-id="b53e0-355">その結果、相関 ID によってレポート メッセージまたは受信確認メッセージが、元のメッセージに結び付けられます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-355">In this manner, the correlation identifier ties the report or acknowledgment message to the original message.</span></span>  
  
 <span data-ttu-id="b53e0-356">送信元アプリケーションと照合受信確認メッセージまたは元のメッセージを含むレポートを使用して、 <xref:System.Messaging.Message.CorrelationId%2A> 、元のメッセージを識別するプロパティ<xref:System.Messaging.Message.Id%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-356">The sending application can then match the acknowledgment or report with the original message by using the <xref:System.Messaging.Message.CorrelationId%2A> property to identify the original message's <xref:System.Messaging.Message.Id%2A> property.</span></span>  
  
 <span data-ttu-id="b53e0-357">またコネクタ アプリケーションを設定する必要があります、<xref:System.Messaging.Message.CorrelationId%2A>元のメッセージのメッセージ id を確認し、レポート メッセージのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-357">Connector applications also must set the <xref:System.Messaging.Message.CorrelationId%2A> property of the acknowledgment and report messages to the message identifier of the original message.</span></span>  
  
 <span data-ttu-id="b53e0-358">アプリケーションは、送信元アプリケーションに応答メッセージを送信する場合は、設定、<xref:System.Messaging.Message.CorrelationId%2A>元のメッセージのメッセージ id への応答メッセージのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-358">When your application sends a response message to the sending application, you can set the <xref:System.Messaging.Message.CorrelationId%2A> property of the response message to the message identifier of the original message.</span></span> <span data-ttu-id="b53e0-359">送信元アプリケーションは、送信されたメッセージに応答メッセージを適合できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-359">The sending application can then match your response message to the message that was sent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-360">次のコード例は、キューから注文を含むメッセージを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-360">The following code example sends and receives a message that contains an order to and from a queue.</span></span> <span data-ttu-id="b53e0-361">元のメッセージが達した場合または具体的には、肯定受信確認の要求がキューから取得します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-361">It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.</span></span>  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-362">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.CorrelationId" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-362">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.CorrelationId" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b53e0-363">
            <see cref="P:System.Messaging.Message.CorrelationId" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-363">The <see cref="P:System.Messaging.Message.CorrelationId" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.Id" />
        <altmember cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DestinationQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue DestinationQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue DestinationQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DestinationQueue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DestinationQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ DestinationQueue { System::Messaging::MessageQueue ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgDestinationQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-364">メッセージの目的の送信先キューを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-364">Gets the intended destination queue for a message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-365">メッセージの送信先キューを指定する <see cref="T:System.Messaging.MessageQueue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-365">A <see cref="T:System.Messaging.MessageQueue" /> that specifies the intended destination queue for the message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-366"><xref:System.Messaging.Message.DestinationQueue%2A>プロパティは、ジャーナルや配信不能キューに到達したメッセージの元の送信先を判断する最もよく使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-366">The <xref:System.Messaging.Message.DestinationQueue%2A> property is most commonly used to determine the original destination of a message that arrived in a journal or dead-letter queue.</span></span> <span data-ttu-id="b53e0-367">通常、する必要はありません、このプロパティを確認するメッセージが送信先キューから取得するため。</span><span class="sxs-lookup"><span data-stu-id="b53e0-367">Usually, you do not need to examine this property, because you typically retrieve the message from its destination queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-368">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.DestinationQueue%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-368">The following code example displays the value of a message's <xref:System.Messaging.Message.DestinationQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-369">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-369">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-370">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-370">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-371">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-371">-or-</span>
          </span>
          <span data-ttu-id="b53e0-372">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.DestinationQueue" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-372">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.DestinationQueue" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
      </Docs>
    </Member>
    <Member MemberName="DestinationSymmetricKey">
      <MemberSignature Language="C#" Value="public byte[] DestinationSymmetricKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] DestinationSymmetricKey" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DestinationSymmetricKey" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationSymmetricKey As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ DestinationSymmetricKey { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgDestinationSymmetricKey")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-373">アプリケーションによって暗号化されるメッセージ、または外部キューに送信されるメッセージを暗号化するために使用する対称キーを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-373">Gets or sets the symmetric key used to encrypt application-encrypted messages or messages sent to foreign queues.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-374">メッセージを暗号化するために使用される送信先対称キーを指定するバイト値配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-374">An array of byte values that specifies the destination symmetric key used to encrypt the message.</span>
          </span>
          <span data-ttu-id="b53e0-375">既定値は長さ 0 の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-375">The default is a zero-length array.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-376">2 つのシナリオでは、使用する必要があります、<xref:System.Messaging.Message.DestinationSymmetricKey%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-376">Two scenarios require you to use the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property.</span></span> <span data-ttu-id="b53e0-377">最初は、アプリケーションではなく、メッセージ キュー、メッセージを暗号化するときです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-377">The first is when your application, rather than Message Queuing, encrypts a message.</span></span> <span data-ttu-id="b53e0-378">2 つ目は、メッセージ キュー以外のキュー システムに暗号化されたメッセージを送信する場合です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-378">The second is when you send an encrypted message to a queuing system other than Message Queuing.</span></span>  
  
 <span data-ttu-id="b53e0-379">このプロパティを設定する前に、受信側キュー マネージャーの公開キーで対称キーを暗号化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-379">Before you set this property, you must encrypt the symmetric key with the public key of the receiving queue manager.</span></span> <span data-ttu-id="b53e0-380">アプリケーションで暗号化されたメッセージを送信するときに、受信側キュー マネージャーは、送信先キューに送信する前に、メッセージの暗号化を解除するのに対称キーを使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-380">When you send an application-encrypted message, the receiving queue manager uses the symmetric key to decrypt the message before sending it to its destination queue.</span></span>  
  
 <span data-ttu-id="b53e0-381">外部のキューにメッセージを送信する場合、メッセージはまず、受信側アプリケーションに接続されている対称キーで暗号化されたメッセージを転送する適切なコネクタ アプリケーションによって受信されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-381">If you send a message to a foreign queue, the message is first received by the appropriate connector application, which forwards the encrypted message with the attached symmetric key to the receiving application.</span></span> <span data-ttu-id="b53e0-382">対称キーを使用して、メッセージの暗号化を解除する受信側のアプリケーションの役割です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-382">It is then the responsibility of the receiving application to decrypt the message using the symmetric key.</span></span>  
  
 <span data-ttu-id="b53e0-383">設定すると、<xref:System.Messaging.Message.DestinationSymmetricKey%2A>プロパティを設定する必要も、<xref:System.Messaging.Message.ConnectorType%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-383">When you set the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property.</span></span> <span data-ttu-id="b53e0-384">メッセージが送信されると、メッセージ キューは無視、<xref:System.Messaging.Message.DestinationSymmetricKey%2A>プロパティ場合、<xref:System.Messaging.Message.ConnectorType%2A>プロパティも設定されていません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-384">When the message is sent, Message Queuing ignores the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.</span></span>  
  
 <span data-ttu-id="b53e0-385"><xref:System.Messaging.Message.DestinationSymmetricKey%2A>プロパティが 256 の配列の最大サイズ。</span><span class="sxs-lookup"><span data-stu-id="b53e0-385">The <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property has a maximum array size of 256.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-386">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-386">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b53e0-387">
            <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-387">The <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
      </Docs>
    </Member>
    <Member MemberName="DigitalSignature">
      <MemberSignature Language="C#" Value="public byte[] DigitalSignature { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] DigitalSignature" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DigitalSignature" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitalSignature As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ DigitalSignature { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgDigitalSignature")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-388">メッセージ キューがメッセージの認証に使用するデジタル署名を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-388">Gets or sets the digital signature that Message Queuing uses to authenticate the message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-389">メッセージを認証するのに使われるメッセージ キュー 1.0 デジタル署名を指定するバイト値配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-389">An array of byte values that specifies the Message Queuing 1.0 digital signature used to authenticate the message.</span>
          </span>
          <span data-ttu-id="b53e0-390">既定値は長さ 0 の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-390">The default is a zero-length array.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-391">メッセージ キューは、メッセージは、バージョン 1.0 をキューから送信されたメッセージを認証するときにデジタル署名を使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-391">Message Queuing uses the digital signature when authenticating messages that were sent by Message Queuing version 1.0.</span></span> <span data-ttu-id="b53e0-392">ほとんどの場合、メッセージ キューを生成し、設定、<xref:System.Messaging.Message.DigitalSignature%2A>プロパティ、送信元アプリケーションは認証を要求したときにします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-392">In most cases, Message Queuing generates and sets the <xref:System.Messaging.Message.DigitalSignature%2A> property when the sending application requests authentication.</span></span> <span data-ttu-id="b53e0-393">受信側のアプリケーションでは、このプロパティを使用して、メッセージに添付したデジタル署名を取得します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-393">The receiving application uses this property to retrieve the digital signature attached to the message.</span></span>  
  
 <span data-ttu-id="b53e0-394">のみ使用できます、<xref:System.Messaging.Message.DigitalSignature%2A>プロパティ メッセージ キュー 2.0 を実行するときにします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-394">You can only use the <xref:System.Messaging.Message.DigitalSignature%2A> property when running Message Queuing version 2.0.</span></span> <span data-ttu-id="b53e0-395">送信アプリケーションは、認証を要求するときに、バージョン 1.0 の署名をメッセージ キューを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-395">The sending application must specify Message Queuing version 1.0 signatures when requesting authentication.</span></span> <span data-ttu-id="b53e0-396">送信側のアプリケーションでは、メッセージ キュー 2.0 署名を送信する場合、このプロパティは、次の 4 つ (バイト単位) を含む各 0 のバッファーを表します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-396">If the sending application sends a Message Queuing version 2.0 signature, this property contains a buffer of four bytes, each containing zero.</span></span>  
  
 <span data-ttu-id="b53e0-397"><xref:System.Messaging.Message.DigitalSignature%2A>と連携して、プロパティ、<xref:System.Messaging.Message.SenderCertificate%2A>プロパティは、メッセージが送信されるときもコネクタ アプリケーションによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-397">The <xref:System.Messaging.Message.DigitalSignature%2A> property, together with the <xref:System.Messaging.Message.SenderCertificate%2A> property, is also used by connector applications when a message is sent.</span></span> <span data-ttu-id="b53e0-398">このシナリオでは、コネクタ アプリケーションで、メッセージ キューではなく — に基づいてメッセージを送信したユーザーの証明書をデジタル署名を生成します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-398">In this scenario, the connector application—rather than Message Queuing—generates the digital signature, which it bases on the certificate of the user sending the message.</span></span>  
  
 <span data-ttu-id="b53e0-399"><xref:System.Messaging.Message.DigitalSignature%2A>プロパティが 256 の配列の最大サイズ。</span><span class="sxs-lookup"><span data-stu-id="b53e0-399">The <xref:System.Messaging.Message.DigitalSignature%2A> property has a maximum array size of 256.</span></span>  
  
 <span data-ttu-id="b53e0-400">設定すると、<xref:System.Messaging.Message.DigitalSignature%2A>プロパティを設定する必要も、<xref:System.Messaging.Message.ConnectorType%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-400">When you set the <xref:System.Messaging.Message.DigitalSignature%2A> property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property.</span></span> <span data-ttu-id="b53e0-401">メッセージが送信されると、メッセージ キューは無視、<xref:System.Messaging.Message.DigitalSignature%2A>プロパティ場合、<xref:System.Messaging.Message.ConnectorType%2A>プロパティも設定されていません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-401">When a message is sent, Message Queuing ignores the <xref:System.Messaging.Message.DigitalSignature%2A> property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-402">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.DigitalSignature" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-402">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.DigitalSignature" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b53e0-403">
            <see cref="P:System.Messaging.Message.DigitalSignature" /> プロパティが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-403">The <see cref="P:System.Messaging.Message.DigitalSignature" /> property is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.SenderCertificate" />
        <altmember cref="P:System.Messaging.Message.HashAlgorithm" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
      </Docs>
    </Member>
    <Member MemberName="EncryptionAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionAlgorithm EncryptionAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.EncryptionAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionAlgorithm As EncryptionAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionAlgorithm EncryptionAlgorithm { System::Messaging::EncryptionAlgorithm get(); void set(System::Messaging::EncryptionAlgorithm value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgEncryptionAlgorithm")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-404">プライベート メッセージの本文を暗号化するのに使われる暗号化アルゴリズムを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-404">Gets or sets the encryption algorithm used to encrypt the body of a private message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-405">
            <see cref="T:System.Messaging.EncryptionAlgorithm" /> 列挙値のいずれか。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-405">One of the <see cref="T:System.Messaging.EncryptionAlgorithm" /> enumeration values.</span>
          </span>
          <span data-ttu-id="b53e0-406">既定値は、<see langword="RC2" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-406">The default is <see langword="RC2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-407">プライベートの場合、メッセージ (暗号化)、送信および受信時に暗号化を解除する前に暗号化されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-407">If a message is private (encrypted), it is encrypted before it is sent and decrypted upon receipt.</span></span> <span data-ttu-id="b53e0-408"><xref:System.Messaging.Message.EncryptionAlgorithm%2A>プロパティは、プライベート メッセージのメッセージ本文を暗号化するためのアルゴリズムを指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-408">The <xref:System.Messaging.Message.EncryptionAlgorithm%2A> property specifies the algorithm used to encrypt the message body of a private message.</span></span>  
  
 <span data-ttu-id="b53e0-409">キューは、その受信を要求できますメッセージを暗号化します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-409">A queue can require that incoming messages be encrypted.</span></span> <span data-ttu-id="b53e0-410">アプリケーションでは、プライベート メッセージだけを受け取るキューに暗号化されていない (非プライベート) メッセージを送信、または非プライベート メッセージのみを受け入れるキューにプライベート メッセージを送信する場合、キューはメッセージを拒否します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-410">If an application sends a non-encrypted (non-private) message to a queue that accepts only private messages, or if it sends a private message to a queue that accepts only non-private messages, the queue rejects the message.</span></span> <span data-ttu-id="b53e0-411">送信元アプリケーションは、否定受信確認メッセージがこのようなケースで返されることを要求できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-411">The sending application can request that a negative acknowledgment message be returned in such a case.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-412">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.EncryptionAlgorithm" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-412">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.EncryptionAlgorithm" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="T:System.Messaging.EncryptionRequired" />
      </Docs>
    </Member>
    <Member MemberName="Extension">
      <MemberSignature Language="C#" Value="public byte[] Extension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Extension" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Extension" />
      <MemberSignature Language="VB.NET" Value="Public Property Extension As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Extension { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgExtension")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-413">メッセージに関連付けられているアプリケーション定義の追加情報を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-413">Gets or sets additional, application-defined information associated with the message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-414">メッセージに関連付けられているアプリケーション定義の情報を提供するバイト値配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-414">An array of byte values that provides application-defined information associated with the message.</span>
          </span>
          <span data-ttu-id="b53e0-415">既定値は長さ 0 の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-415">The default is a zero-length array.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-416"><xref:System.Messaging.Message.Extension%2A>プロパティをメッセージに関連付けられているラージ バイナリ オブジェクトと同様に、アプリケーション定義の情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-416">The <xref:System.Messaging.Message.Extension%2A> property provides for application-defined information, like a large binary object, that is associated with the message.</span></span> <span data-ttu-id="b53e0-417">受信側アプリケーションの内容を解釈するの機能により、<xref:System.Messaging.Message.Extension%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-417">It is the responsibility of the receiving application to interpret the contents of the <xref:System.Messaging.Message.Extension%2A> property.</span></span>  
  
 <span data-ttu-id="b53e0-418">内のメッセージ データを含める必要があります、可能な限り、 <xref:System.Messaging.Message.Body%2A> 、メッセージのプロパティではなく、<xref:System.Messaging.Message.Extension%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-418">Where possible, you should include message data in the <xref:System.Messaging.Message.Body%2A> property of the message rather than the <xref:System.Messaging.Message.Extension%2A> property.</span></span>  
  
 <span data-ttu-id="b53e0-419">外部のキューを使用するときに使用して、<xref:System.Messaging.Message.Extension%2A>メッセージ キューの存在しないメッセージのプロパティを指定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-419">When working with foreign queues, use the <xref:System.Messaging.Message.Extension%2A> property to specify message properties that do not exist in Message Queuing.</span></span>  
  
 <span data-ttu-id="b53e0-420">外部のキューは、Microsoft メッセージ キュー以外のキュー システムに存在します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-420">A foreign queue exists in a queuing system other than Microsoft Message Queuing.</span></span> <span data-ttu-id="b53e0-421">メッセージ キューは、コネクタ アプリケーションを使用してこのようなキューと通信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-421">Message Queuing communicates with such queues through a connector application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-422">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Extension" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-422">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Extension" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b53e0-423">
            <see cref="P:System.Messaging.Message.Extension" /> プロパティが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-423">The <see cref="P:System.Messaging.Message.Extension" /> property is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Body" />
      </Docs>
    </Member>
    <Member MemberName="Formatter">
      <MemberSignature Language="C#" Value="public System.Messaging.IMessageFormatter Formatter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.IMessageFormatter Formatter" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Formatter" />
      <MemberSignature Language="VB.NET" Value="Public Property Formatter As IMessageFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::IMessageFormatter ^ Formatter { System::Messaging::IMessageFormatter ^ get(); void set(System::Messaging::IMessageFormatter ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.IMessageFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-424">オブジェクトをメッセージ本文にシリアル化する、またはメッセージ本文からオブジェクトを逆シリアル化するのに使用する書式指定子を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-424">Gets or sets the formatter used to serialize an object into or deserialize an object from the message body.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-425">メッセージ本文に書き込むストリーム、またはメッセージ本文から読み取るストリームを生成する <see cref="T:System.Messaging.IMessageFormatter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-425">The <see cref="T:System.Messaging.IMessageFormatter" /> that produces a stream to be written to or read from the message body.</span>
          </span>
          <span data-ttu-id="b53e0-426">既定値は、<see cref="T:System.Messaging.XmlMessageFormatter" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-426">The default is <see cref="T:System.Messaging.XmlMessageFormatter" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-427">使用して、<xref:System.Messaging.Message.Formatter%2A>プロパティ、メッセージを読み書きするときにします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-427">Use the <xref:System.Messaging.Message.Formatter%2A> property when reading and writing a message.</span></span> <span data-ttu-id="b53e0-428">メッセージがキューに送信されると、フォーマッタがシリアル化、<xref:System.Messaging.Message.Body%2A>プロパティをメッセージ キューに送信可能なストリームにします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-428">When a message is sent to the queue, the formatter serializes the <xref:System.Messaging.Message.Body%2A> property into a stream that can be sent to the message queue.</span></span> <span data-ttu-id="b53e0-429">キューから読み取る場合、フォーマッタのメッセージ データを<xref:System.Messaging.Message.Body%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-429">When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property.</span></span>  
  
 <span data-ttu-id="b53e0-430">直接メッセージの内容を記述しない限り、<xref:System.Messaging.Message.BodyStream%2A>プロパティ、設定、<xref:System.Messaging.Message.Formatter%2A>プロパティ、メッセージを送信する前にします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-430">Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message.</span></span> <span data-ttu-id="b53e0-431">ときに、<xref:System.Messaging.MessageQueue.Send%2A>メソッドが、<xref:System.Messaging.MessageQueue>に含まれているフォーマッタを使用して、インスタンス、本文がシリアル化、<xref:System.Messaging.Message.Formatter%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-431">When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property.</span></span> <span data-ttu-id="b53e0-432">値を指定せず、メッセージを送信するかどうか、<xref:System.Messaging.Message.Formatter%2A>プロパティ、フォーマッタの既定値<xref:System.Messaging.XmlMessageFormatter>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-432">If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 <span data-ttu-id="b53e0-433"><xref:System.Messaging.XmlMessageFormatter> 、疎結合できるので、同じオブジェクトをこの形式を使用する場合、送信者と受信者を入力する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-433">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.</span></span> <span data-ttu-id="b53e0-434"><xref:System.Messaging.ActiveXMessageFormatter>と<xref:System.Messaging.BinaryMessageFormatter>のバイナリ表現にデータをシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-434">The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation.</span></span> <span data-ttu-id="b53e0-435"><xref:System.Messaging.ActiveXMessageFormatter> COM コンポーネントを送受信する際に使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-435">The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-436">次のコード例では、メッセージ本文を使用して、書式設定を示しています<xref:System.Messaging.BinaryMessageFormatter>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-436">The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.</span></span>  
  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 <span data-ttu-id="b53e0-437">次のコード例では、メッセージ本文を使用して、書式設定を示しています<xref:System.Messaging.XmlMessageFormatter>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-437">The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b53e0-438">
            <see cref="P:System.Messaging.Message.Formatter" /> プロパティが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-438">The <see cref="P:System.Messaging.Message.Formatter" /> property is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="P:System.Messaging.MessageQueue.Formatter" />
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.HashAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As HashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::HashAlgorithm HashAlgorithm { System::Messaging::HashAlgorithm get(); void set(System::Messaging::HashAlgorithm value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgHashAlgorithm")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-439">ハッシュ アルゴリズムを取得または設定します。メッセージ キューは、メッセージを認証するとき、またはメッセージのデジタル署名を作成するときに、ハッシュ アルゴリズムを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-439">Gets or sets the hashing algorithm that Message Queuing uses when authenticating a message or creating a digital signature for a message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-440">
            <see cref="T:System.Messaging.HashAlgorithm" /> 列挙値のいずれか。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-440">One of the <see cref="T:System.Messaging.HashAlgorithm" /> enumeration values.</span>
          </span>
          <span data-ttu-id="b53e0-441">Windows XP の場合、既定値は <see langword="SHA" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-441">For Windows XP, the default is <see langword="SHA" />.</span>
          </span>
          <span data-ttu-id="b53e0-442">それ以外の場合、既定値は <see langword="MD5" /> になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-442">Otherwise, the default is <see langword="MD5" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-443">メッセージのデジタル署名を作成するときに、ソース コンピューターでは、ハッシュ アルゴリズムを使用メッセージ キューします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-443">On the source computer, Message Queuing uses the hashing algorithm when creating a digital signature for a message.</span></span> <span data-ttu-id="b53e0-444">ターゲット キュー マネージャーは、同じハッシュ アルゴリズムを使用して、受信されるときにメッセージを認証します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-444">The target Queue Manager then uses the same hashing algorithm to authenticate the message when it is received.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-445">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.HashAlgorithm" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-445">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.HashAlgorithm" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="T:System.Messaging.HashAlgorithm" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-446">メッセージの ID を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-446">Gets the message's identifier.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-447">メッセージの一意識別子。メッセージ キューによって生成されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-447">The message's unique identifier, which is generated by Message Queuing.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-448">メッセージ キューは、メッセージが送信されるときに、メッセージ id を生成します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-448">Message Queuing generates a message identifier when the message is sent.</span></span> <span data-ttu-id="b53e0-449">識別子は 20 バイトで構成され、2 つの項目が含まれています: マシン<xref:System.Guid>送信元コンピューターと、コンピューター上のメッセージの一意の識別子。</span><span class="sxs-lookup"><span data-stu-id="b53e0-449">The identifier is composed of 20 bytes and includes two items: the machine <xref:System.Guid> of the sending computer and a unique identifier for the message on the computer.</span></span> <span data-ttu-id="b53e0-450">この 2 つの項目の組み合わせにより、ネットワーク上で一意のメッセージ ID が生成されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-450">The combination of the two items produces a message identifier that is unique on the network.</span></span>  
  
 <span data-ttu-id="b53e0-451">メッセージ キューはすべてのメッセージについてメッセージ id を生成-メッセージ受信確認やレポート メッセージなどです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-451">Message Queuing generates message identifiers for all messages—including acknowledgment and report messages.</span></span> <span data-ttu-id="b53e0-452">受信確認メッセージは通常、メッセージ キューが到着時または失敗したか、送信元のメッセージに反応に送信しました。</span><span class="sxs-lookup"><span data-stu-id="b53e0-452">An acknowledgment message is generally sent by Message Queuing in reaction to the arrival or failure of an original, sent message.</span></span> <span data-ttu-id="b53e0-453">検索することができます、<xref:System.Messaging.Message.Id%2A>の元のメッセージのプロパティの値、<xref:System.Messaging.Message.CorrelationId%2A>受信確認メッセージのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-453">You can find the <xref:System.Messaging.Message.Id%2A> property value of the original message in the <xref:System.Messaging.Message.CorrelationId%2A> property of an acknowledgment message.</span></span>  
  
 <span data-ttu-id="b53e0-454">使用することも、<xref:System.Messaging.Message.Id%2A>プロパティ応答キューを応答メッセージを送信するときにします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-454">You can also use the <xref:System.Messaging.Message.Id%2A> property when sending a response message to a response queue.</span></span> <span data-ttu-id="b53e0-455">応答メッセージに、元のメッセージの識別子を含める、設定、<xref:System.Messaging.Message.CorrelationId%2A>への応答メッセージのプロパティ、<xref:System.Messaging.Message.Id%2A>元のメッセージのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-455">To include the identifier of the original message in a response message, set the <xref:System.Messaging.Message.CorrelationId%2A> property of the response message to the <xref:System.Messaging.Message.Id%2A> property of the original message.</span></span> <span data-ttu-id="b53e0-456">応答メッセージを読み取って、アプリケーションは、元のメッセージを識別するのに応答メッセージの相関 id を使用できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-456">The application reading the response message can then use the correlation identifier of the response message to identify the original message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-457">次のコード例は、キューから注文を含むメッセージを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-457">The following code example sends and receives a message containing an order to and from a queue.</span></span> <span data-ttu-id="b53e0-458">元のメッセージが達した場合または具体的には、肯定受信確認の要求がキューから取得します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-458">It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.</span></span>  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-459">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-459">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-460">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-460">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-461">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-461">-or-</span>
          </span>
          <span data-ttu-id="b53e0-462">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Id" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-462">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Id" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.CorrelationId" />
      </Docs>
    </Member>
    <Member MemberName="InfiniteTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Messaging.Message.InfiniteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteTimeout;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-463">タイムアウトが存在しないことを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-463">Specifies that no time-out exists.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-464"><xref:System.Messaging.Message.TimeToBeReceived%2A> および<xref:System.Messaging.Message.TimeToReachQueue%2A>タイムアウトを指定する値を必要とします。以前のタイムアウトは、キューから受信するメッセージの許容最大時間。</span><span class="sxs-lookup"><span data-stu-id="b53e0-464"><xref:System.Messaging.Message.TimeToBeReceived%2A> and <xref:System.Messaging.Message.TimeToReachQueue%2A> require a value that specifies a time-out. For the former, the time-out is the maximum time allowed for a message to be received from the queue.</span></span> <span data-ttu-id="b53e0-465">後者のタイムアウトは、キューに到達するメッセージの許容時間です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-465">For the latter, the time-out is the time allowed for a message to reach the queue.</span></span> <span data-ttu-id="b53e0-466">どちらの場合、タイムアウトを秒数として指定したり、使用<xref:System.Messaging.Message.InfiniteTimeout>タイムアウトが存在しないことを示すためにします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-466">In both cases, you can specify the time-out as a number of seconds or use <xref:System.Messaging.Message.InfiniteTimeout> to indicate that no time-out exists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-467">使用を次のコード例に示します、<xref:System.Messaging.Message.InfiniteTimeout>フィールドです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-467">The following code example demonstrates the use of the <xref:System.Messaging.Message.InfiniteTimeout> field.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
        <altmember cref="P:System.Messaging.Message.TimeToReachQueue" />
      </Docs>
    </Member>
    <Member MemberName="IsFirstInTransaction">
      <MemberSignature Language="C#" Value="public bool IsFirstInTransaction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFirstInTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.IsFirstInTransaction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFirstInTransaction As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFirstInTransaction { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgIsFirstInTransaction")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-468">そのメッセージがトランザクションで送信された最初のメッセージかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-468">Gets a value that indicates whether the message was the first message sent in a transaction.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-469">そのメッセージがトランザクションで送信された最初のメッセージである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-469">
              <see langword="true" /> if the message was the first message sent in a transaction; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-470">アプリケーション使用の受信、<xref:System.Messaging.Message.IsFirstInTransaction%2A>プロパティをそのメッセージが 1 つのキューに 1 つのトランザクションで送信される最初のメッセージを確認してください。</span><span class="sxs-lookup"><span data-stu-id="b53e0-470">Receiving applications use the <xref:System.Messaging.Message.IsFirstInTransaction%2A> property to verify that a message was the first message sent in a single transaction to a single queue.</span></span>  
  
 <span data-ttu-id="b53e0-471">このプロパティは、メッセージ キューのバージョン 2.0 でのみ使用可能およびそれ以降です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-471">This property is available only with Message Queuing version 2.0 and later.</span></span>  
  
 <span data-ttu-id="b53e0-472">トランザクションの境界を確認するに使用することができます、<xref:System.Messaging.Message.IsFirstInTransaction%2A>プロパティとその他の 2 つのプロパティ:<xref:System.Messaging.Message.IsLastInTransaction%2A>と<xref:System.Messaging.Message.TransactionId%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-472">To verify transaction boundaries, you can use the <xref:System.Messaging.Message.IsFirstInTransaction%2A> property along with two other properties: <xref:System.Messaging.Message.IsLastInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>.</span></span> <span data-ttu-id="b53e0-473">前者は、メッセージがトランザクション内で送信された最後のメッセージかどうかを確認し、後者を使用して、トランザクションの識別子を取得する場合に使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-473">Use the former to check whether a message was the last message sent in the transaction, and use the latter to retrieve the identifier of the transaction.</span></span>  
  
 <span data-ttu-id="b53e0-474">トランザクションでは、1 つのメッセージが送信されるだけの場合、<xref:System.Messaging.Message.IsFirstInTransaction%2A>と<xref:System.Messaging.Message.IsLastInTransaction%2A>プロパティに設定されて`true`です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-474">If only one message is sent in a transaction, the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties are both set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-475">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.IsFirstInTransaction%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-475">The following code example displays the value of a message's <xref:System.Messaging.Message.IsFirstInTransaction%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-476">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-476">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-477">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-477">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-478">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-478">-or-</span>
          </span>
          <span data-ttu-id="b53e0-479">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.IsFirstInTransaction" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-479">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.IsFirstInTransaction" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="IsLastInTransaction">
      <MemberSignature Language="C#" Value="public bool IsLastInTransaction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLastInTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.IsLastInTransaction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLastInTransaction As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLastInTransaction { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgIsLastInTransaction")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-480">メッセージがトランザクションで送信された最後のメッセージかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-480">Gets a value that indicates whether the message was the last message sent in a transaction.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-481">そのメッセージがトランザクションで送信された最後のメッセージである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-481">
              <see langword="true" /> if the message was the last message sent in a single transaction; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-482">アプリケーション使用の受信、<xref:System.Messaging.Message.IsLastInTransaction%2A>プロパティをそのメッセージが 1 つのキューに 1 つのトランザクションで送信された最後のメッセージを確認してください。</span><span class="sxs-lookup"><span data-stu-id="b53e0-482">Receiving applications use the <xref:System.Messaging.Message.IsLastInTransaction%2A> property to verify that a message was the last message sent in a single transaction to a single queue.</span></span>  
  
 <span data-ttu-id="b53e0-483">このプロパティは、メッセージ キューのバージョン 2.0 でのみ使用可能およびそれ以降です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-483">This property is available only with Message Queuing version 2.0 and later.</span></span>  
  
 <span data-ttu-id="b53e0-484">トランザクションの境界を確認するに使用することができます、<xref:System.Messaging.Message.IsLastInTransaction%2A>プロパティとその他の 2 つのプロパティ:<xref:System.Messaging.Message.IsFirstInTransaction%2A>と<xref:System.Messaging.Message.TransactionId%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-484">To verify transaction boundaries, you can use the <xref:System.Messaging.Message.IsLastInTransaction%2A> property along with two other properties: <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>.</span></span> <span data-ttu-id="b53e0-485">前者は、メッセージがトランザクション内で送信された最初のメッセージかどうかを確認し、後者を使用して、トランザクションの識別子を取得する場合に使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-485">Use the former to check whether a message was the first message sent in the transaction, and use the latter to retrieve the identifier of the transaction.</span></span>  
  
 <span data-ttu-id="b53e0-486">トランザクションでは、1 つのメッセージが送信されるだけの場合、<xref:System.Messaging.Message.IsFirstInTransaction%2A>と<xref:System.Messaging.Message.IsLastInTransaction%2A>プロパティに設定されて`true`です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-486">If only one message is sent in a transaction, the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties are both set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-487">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.IsLastInTransaction%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-487">The following code example displays the value of a message's <xref:System.Messaging.Message.IsLastInTransaction%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-488">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-488">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-489">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-489">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-490">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-490">-or-</span>
          </span>
          <span data-ttu-id="b53e0-491">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.IsLastInTransaction" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-491">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.IsLastInTransaction" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgLabel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-492">メッセージを記述するアプリケーション定義の Unicode 文字列を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-492">Gets or sets an application-defined Unicode string that describes the message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-493">メッセージのラベル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-493">The label of the message.</span>
          </span>
          <span data-ttu-id="b53e0-494">既定値は、空の文字列 ("") です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-494">The default is an empty string ("").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-495">メッセージ ラベルを使用する目的はいくつか考えられます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-495">You can use a message label for several purposes.</span></span> <span data-ttu-id="b53e0-496">メッセージ ラベルは、表示目的で使用できます。たとえば、ラベルの値に基づいてメッセージを選択的に処理するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-496">For example, you can use it for display purposes or to selectively process messages based on the label value.</span></span> <span data-ttu-id="b53e0-497">ラベルは、メッセージで一意である必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-497">The label does not need to be unique across messages.</span></span>  
  
 <span data-ttu-id="b53e0-498">メッセージ キュー ラベルとメッセージ ラベルは、アプリケーション定義の値を表します。これらのラベルは、ユーザーの判読できる単語などを使用して、キューやメッセージを識別するのに便利です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-498">Message queue and message labels represent an application-defined value that can help identify the queue or message in human-readable terms.</span></span> <span data-ttu-id="b53e0-499">メッセージ キュー アプリケーションに特別な意味がないラベルの内容を解釈するアプリケーションの役割です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-499">It is the responsibility of the application to interpret the label contents, which have no intrinsic meaning to the Message Queuing application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-500">次のコード例を取得し、メッセージの値を設定<xref:System.Messaging.Message.Label%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-500">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.Label%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-501">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Label" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-501">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Label" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
      </Docs>
    </Member>
    <Member MemberName="LookupId">
      <MemberSignature Language="C#" Value="public long LookupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LookupId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.LookupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LookupId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LookupId { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-502">MSMQ 3.0 で導入されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-502">Introduced in MSMQ 3.0.</span>
          </span>
          <span data-ttu-id="b53e0-503">メッセージの参照識別子を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-503">Gets the message's lookup identifier.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-504">メッセージ キューによって生成され、そのメッセージが存在するキューに対して一意であるメッセージの参照識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-504">The message's lookup identifier, which is generated by Message Queuing and is unique to the queue where the message resides.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-505"><xref:System.Messaging.Message.LookupId%2A>プロパティは、メッセージの参照識別子に読み取り専用のアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-505">The <xref:System.Messaging.Message.LookupId%2A> property provides read-only access to a message's lookup identifier.</span></span> <span data-ttu-id="b53e0-506">MSMQ 3.0 で導入された、参照 id は、メッセージ キューによって生成され、メッセージがキューに配置されると、各メッセージに割り当てられているされる 64 ビット識別子です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-506">The lookup identifier, introduced in MSMQ 3.0, is a 64-bit identifier that is generated by Message Queuing and assigned to each message when the message is placed in the queue.</span></span> <span data-ttu-id="b53e0-507">参照識別子は、メッセージが送信されたときに生成されるメッセージ識別子と同じではありません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-507">The lookup identifier is not the same as the message identifier that is generated when the message is sent.</span></span>  
  
 <span data-ttu-id="b53e0-508">メッセージ キューは、コネクタ、および発信キューは、システムによって生成されたジャーナル、配信不能に加え、移行先のアプリケーションによって生成された、管理、およびレポート キューを含む、すべてのキューに配置されているすべてのメッセージの参照 id を生成します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-508">Message Queuing generates a lookup identifier for all messages that are placed in any queue, including application-generated destination, administration, and report queues, as well as system-generated journal, dead-letter, connector, and outgoing queues.</span></span> <span data-ttu-id="b53e0-509">つまり、メッセージ キューと送信元アプリケーションによって送信の両方のメッセージが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-509">In other words, this includes both messages sent by sending applications and by Message Queuing.</span></span> <span data-ttu-id="b53e0-510">参照識別子は、キューに対して一意キュー以外の意味を持ちません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-510">The lookup identifier is unique to the queue and has no meaning outside the queue.</span></span>  
  
 <span data-ttu-id="b53e0-511">複数の送信先キューにメッセージが送信された場合、またはコンピューター ジャーナル キューのジャーナルにメッセージのコピーが格納されている場合は、メッセージの各コピーは、それぞれのキューに置かれている場合、独自の参照 id があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-511">If a message is sent to several destination queues, or if a copy of a message is stored in a computer journal or queue journal, each copy of the message will have its own lookup identifier when it is placed in its respective queue.</span></span>  
  
 <span data-ttu-id="b53e0-512"><xref:System.Messaging.Message.LookupId%2A>プロパティはキューから取得したメッセージでのみ読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-512">The <xref:System.Messaging.Message.LookupId%2A> property can only be read on messages retrieved from a queue.</span></span>  
  
 <span data-ttu-id="b53e0-513">参照識別子は、キュー内の特定のメッセージの読み取りに使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-513">A lookup identifier is used to read a specific message in the queue.</span></span> <span data-ttu-id="b53e0-514">受信側のアプリケーションが呼び出すことができます、メッセージの参照識別子が認識されたら、<xref:System.Messaging.MessageQueue.PeekByLookupId%2A>または<xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A>そのメッセージに直接アクセスし、ピークまたはキューの先頭から開始し、キューの末尾に移動する必要があるカーソルとは異なり、キューから取得する関数</span><span class="sxs-lookup"><span data-stu-id="b53e0-514">Once the lookup identifier of a message is known, the receiving application can call the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> or <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> function to go directly to that message and peek at or retrieve it from the queue, unlike cursors that must start at the front of the queue and navigate towards the end of the queue,</span></span>  
  
 <span data-ttu-id="b53e0-515">アプリケーションの役割は、キュー内のメッセージの参照識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-515">Obtaining the lookup identifiers of the messages in the queue is the responsibility of the application.</span></span> <span data-ttu-id="b53e0-516">参照識別子を取得する方法の 1 つでは、送信先のキューをキューに配置されるように、各メッセージの識別子をキャッシュするコンポーネントを呼び出すためのトリガーを作成します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-516">One possible way to obtain the lookup identifiers is to create a trigger for the destination queue that invokes a component that caches the identifiers of each message as they are placed in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="b53e0-517">MSMQ 3.0 がインストールされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-517">MSMQ 3.0 is not installed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-518">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-518">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-519">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-519">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-520">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-520">-or-</span>
          </span>
          <span data-ttu-id="b53e0-521">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.LookupId" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-521">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.LookupId" /> property.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueue.PeekByLookupId" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveByLookupId" />
      </Docs>
    </Member>
    <Member MemberName="MessageType">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageType MessageType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageType MessageType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.MessageType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MessageType As MessageType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageType MessageType { System::Messaging::MessageType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgMessageType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-522">メッセージの種類 (<see langword="Normal" />、<see langword="Acknowledgment" />、または <see langword="Report" /> のいずれか) を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-522">Gets the message type: <see langword="Normal" />, <see langword="Acknowledgment" />, or <see langword="Report" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-523">
            <see cref="P:System.Messaging.Message.MessageType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-523">One of the <see cref="P:System.Messaging.Message.MessageType" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-524">メッセージ キューは、メッセージを送信するときに通常このプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-524">Message Queuing typically sets this property when it sends the message.</span></span> <span data-ttu-id="b53e0-525">メッセージ キューのメッセージには、次のタイプがあります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-525">A Message Queuing message can be one of the following types:</span></span>  
  
-   <span data-ttu-id="b53e0-526">`Normal`、は、いずれかの一般的なメッセージの送信がアプリケーションからキューにまたは送信アプリケーションに応答メッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-526">`Normal`, which is either a typical message sent from an application to a queue, or a response message returned to the sending application.</span></span>  
  
-   <span data-ttu-id="b53e0-527">`Acknowledgement`、、送信元アプリケーションによって要求されるたびにメッセージ キューが生成します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-527">`Acknowledgement`, which Message Queuing generates whenever the sending application requests one.</span></span> <span data-ttu-id="b53e0-528">たとえば、メッセージ キューは、元のメッセージが到達したかまたは読み取られたことを示すために肯定受信確認メッセージまたは否定受信確認メッセージを生成できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-528">For example, Message Queuing can generate positive or negative messages to indicate that the original message arrived or was read.</span></span> <span data-ttu-id="b53e0-529">メッセージ キューは、送信元アプリケーションによって指定される管理キューに適切な受信確認メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-529">Message Queuing returns the appropriate acknowledgment message to the administration queue specified by the sending application.</span></span>  
  
-   <span data-ttu-id="b53e0-530">`Report`、レポート キューは送信元キュー マネージャーで定義されるたびにメッセージ キューが生成します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-530">`Report`, which Message Queuing generates whenever a report queue is defined at the source Queue Manager.</span></span> <span data-ttu-id="b53e0-531">トレースが有効である場合、メッセージ キューは、メッセージ キュー サーバーで元のメッセージの入出力が発生するたびに、レポート メッセージをメッセージ キュー レポート キューに送信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-531">When tracing is enabled, Message Queuing sends a report message to the Message Queuing report queue each time the original message enters or leaves a Message Queuing server.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-532">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.MessageType%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-532">The following code example displays the value of a message's <xref:System.Messaging.Message.MessageType%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-533">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-533">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-534">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-534">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-535">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-535">-or-</span>
          </span>
          <span data-ttu-id="b53e0-536">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.MessageType" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-536">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.MessageType" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Messaging.MessageType" />
        <altmember cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Messaging.MessagePriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessagePriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As MessagePriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessagePriority Priority { System::Messaging::MessagePriority get(); void set(System::Messaging::MessagePriority value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgPriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessagePriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-537">キュー内でのメッセージの格納場所を決定するのに使われる、メッセージの優先順位を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-537">Gets or sets the message priority, which determines where in the queue the message is placed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-538">非トランザクション メッセージの優先順位を表す <see cref="T:System.Messaging.MessagePriority" /> 値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-538">One of the <see cref="T:System.Messaging.MessagePriority" /> values, which represent the priority levels of non-transactional messages.</span>
          </span>
          <span data-ttu-id="b53e0-539">既定値は、<see langword="Normal" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-539">The default is <see langword="Normal" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-540"><xref:System.Messaging.Message.Priority%2A>プロパティは、メッセージ キュー メッセージの処理方法両方途中になっていると、その送信先に到達した後に影響します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-540">The <xref:System.Messaging.Message.Priority%2A> property affects how Message Queuing handles the message both while it is en route and once it reaches its destination.</span></span> <span data-ttu-id="b53e0-541">優先順位の高いメッセージほど、送信中に優先権が与えられ、送信先キューの中の先頭近くに挿入されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-541">Higher-priority messages are given preference during routing and inserted toward the front of the destination queue.</span></span> <span data-ttu-id="b53e0-542">優先順位の同じメッセージは、到達時刻に応じてキュー内に配置されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-542">Messages with the same priority are placed in the queue according to their arrival time.</span></span>  
  
 <span data-ttu-id="b53e0-543">非トランザクション メッセージに対してのみ意味のある優先順位を設定することができます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-543">You can set a meaningful priority only for non-transactional messages.</span></span> <span data-ttu-id="b53e0-544">メッセージ キューへトランザクション メッセージの優先度を自動的に設定する`Lowest`、それが原因でトランザクション メッセージの優先度が無視されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-544">Message Queuing automatically sets the priority for transactional messages to `Lowest`, which causes transactional message priority to be ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-545">次のコード例では、キューに優先度が異なる 2 つのメッセージを送信し、順番に取得します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-545">The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.</span></span>  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-546">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Priority" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-546">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Priority" /> property.</span>
          </span>
        </exception>
        <altmember cref="T:System.Messaging.MessagePriority" />
        <altmember cref="P:System.Messaging.Message.MessageType" />
        <altmember cref="P:System.Messaging.MessageQueue.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="Recoverable">
      <MemberSignature Language="C#" Value="public bool Recoverable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Recoverable" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Recoverable" />
      <MemberSignature Language="VB.NET" Value="Public Property Recoverable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Recoverable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgRecoverable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-547">コンピューターの障害やネットワークの問題が発生したときにメッセージの配信が保証されるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-547">Gets or sets a value that indicates whether the message is guaranteed to be delivered in the event of a computer failure or network problem.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-548">送信中にメッセージをディスクに保存することによって配信が保証される場合は <see langword="true" />、配信が保証されない場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-548">
              <see langword="true" /> if delivery of the message is guaranteed (through saving the message to disk while en route); <see langword="false" /> if delivery is not assured.</span>
          </span>
          <span data-ttu-id="b53e0-549">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-549">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-550"><xref:System.Messaging.Message.Recoverable%2A>プロパティは、メッセージの配信が保証されるかどうかを示します: メッセージが送信先キューに向かって中に、コンピューターがクラッシュした場合でもです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-550">The <xref:System.Messaging.Message.Recoverable%2A> property indicates whether the delivery of a message is guaranteed—even if a computer crashes while the message is en route to the destination queue.</span></span>  
  
 <span data-ttu-id="b53e0-551">メッセージの配信が保証される場合メッセージは格納ローカル ルート、上のすべてのステップで、メッセージは次のコンピューターに正常に転送されるまでです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-551">If delivery of a message is guaranteed, the message is stored locally at every step along the route, until the message is successfully forwarded to the next computer.</span></span> <span data-ttu-id="b53e0-552">設定、<xref:System.Messaging.Message.Recoverable%2A>プロパティを`true`スループットに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-552">Setting the <xref:System.Messaging.Message.Recoverable%2A> property to `true` could affect throughput.</span></span>  
  
 <span data-ttu-id="b53e0-553">メッセージがトランザクションの場合は、メッセージ キューとして自動的に処理、メッセージの値に関係なく、回復可能な<xref:System.Messaging.Message.Recoverable%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-553">If the message is transactional, Message Queuing automatically treats the message as recoverable, regardless of the value of the <xref:System.Messaging.Message.Recoverable%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-554">次のコード例を取得し、メッセージの値を設定<xref:System.Messaging.Message.Recoverable%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-554">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.Recoverable%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-555">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Recoverable" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-555">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Recoverable" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.UseTracing" />
      </Docs>
    </Member>
    <Member MemberName="ResponseQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue ResponseQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue ResponseQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ResponseQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ ResponseQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgResponseQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-556">アプリケーションによって生成される応答メッセージを受け取るキューを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-556">Gets or sets the queue that receives application-generated response messages.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-557">アプリケーションによって生成される応答メッセージが返される <see cref="T:System.Messaging.MessageQueue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-557">The <see cref="T:System.Messaging.MessageQueue" /> to which application-generated response messages are returned.</span>
          </span>
          <span data-ttu-id="b53e0-558">既定値は、<see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-558">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-559"><xref:System.Messaging.Message.ResponseQueue%2A>プロパティは、受信側アプリケーションが、送信元アプリケーションに戻るアプリケーションによって生成される応答メッセージを受信するキューを識別します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-559">The <xref:System.Messaging.Message.ResponseQueue%2A> property identifies the queue that receives application-generated response messages, which the receiving application returns to the sending application.</span></span> <span data-ttu-id="b53e0-560">送信元アプリケーションは、メッセージを送信するときに応答キューを指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-560">The sending application specifies response queues when the application sends its messages.</span></span> <span data-ttu-id="b53e0-561">使用できる任意のキューを応答キューとして指定できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-561">Any available queue can be specified as a response queue.</span></span>  
  
 <span data-ttu-id="b53e0-562">応答キューに対して返されるメッセージは、アプリケーション固有です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-562">Messages returned to the response queue are application-specific.</span></span> <span data-ttu-id="b53e0-563">アプリケーションは、メッセージの内容と、メッセージの受信時に実行するアクションを定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-563">The application must define the contents of the messages as well as the action to take upon receipt of a message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-564">次のコード例を取得し、メッセージの値を設定<xref:System.Messaging.Message.ResponseQueue%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-564">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.ResponseQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-565">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.ResponseQueue" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-565">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.ResponseQueue" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.DestinationQueue" />
        <altmember cref="P:System.Messaging.Message.TransactionStatusQueue" />
      </Docs>
    </Member>
    <Member MemberName="SecurityContext">
      <MemberSignature Language="C#" Value="public System.Messaging.SecurityContext SecurityContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.SecurityContext SecurityContext" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SecurityContext" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityContext As SecurityContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::SecurityContext ^ SecurityContext { System::Messaging::SecurityContext ^ get(); void set(System::Messaging::SecurityContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.SecurityContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-566">メッセージのセキュリティ コンテキストを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-566">Gets or sets the security context for a message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-567">このプロパティが設定済みの場合、<see cref="T:System.Messaging.SecurityContext" /> オブジェクトにはメッセージのセキュリティ コンテキストが含まれます。それ以外の場合は NULL になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-567">A <see cref="T:System.Messaging.SecurityContext" /> object that contains the security context for a message, if the property has previously been set; otherwise NULL.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SenderCertificate">
      <MemberSignature Language="C#" Value="public byte[] SenderCertificate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SenderCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderCertificate" />
      <MemberSignature Language="VB.NET" Value="Public Property SenderCertificate As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SenderCertificate { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgSenderCertificate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-568">メッセージを認証するのに使うセキュリティ証明書を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-568">Gets or sets the security certificate used to authenticate messages.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-569">メッセージの差出人を確認するのにメッセージ キューが使うセキュリティ証明書を表すバイト値配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-569">An array of byte values that represents a security certificate, which Message Queuing uses to verify the sender of the message.</span>
          </span>
          <span data-ttu-id="b53e0-570">既定値は長さ 0 の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-570">The default is a zero-length array.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-571">受信側のアプリケーションを使用して、<xref:System.Messaging.Message.SenderCertificate%2A>プロパティ、メッセージには、外部のセキュリティ証明書が含まれている場合。</span><span class="sxs-lookup"><span data-stu-id="b53e0-571">The receiving application uses the <xref:System.Messaging.Message.SenderCertificate%2A> property when the message includes an external security certificate.</span></span>  
  
 <span data-ttu-id="b53e0-572">メッセージ キューは、いずれかを使用してメッセージを内部または外部のセキュリティ証明書を認証できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-572">Message Queuing can authenticate a message using either an internal or external security certificate.</span></span> <span data-ttu-id="b53e0-573">メッセージ キューは、メッセージの整合性の確認に使用される内部の証明書を提供します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-573">Message Queuing provides internal certificates, which are used to verify message integrity.</span></span> <span data-ttu-id="b53e0-574">証明機関は、外部証明書を使用してアクセスできる<xref:System.Messaging.Message.SenderCertificate%2A>メッセージのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-574">A certification authority provides an external certificate, which you can access through the <xref:System.Messaging.Message.SenderCertificate%2A> property of the message.</span></span> <span data-ttu-id="b53e0-575">メッセージ キュー メッセージの認証を許可すると、に加えては、外部の証明書は、さらに、送信者を検証する受信側のアプリケーションをできます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-575">In addition to allowing Message Queuing to authenticate the message, an external certificate allows the receiving application to further verify the sender.</span></span> <span data-ttu-id="b53e0-576">内部の証明書には、受信アプリケーションに使用可能な値がありません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-576">An internal certificate has no usable value to a receiving application.</span></span>  
  
 <span data-ttu-id="b53e0-577">外部の証明書は、メッセージ キュー システムのディレクトリ サービスに登録する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-577">An external certificate must be registered with the directory service of the Message Queuing system.</span></span> <span data-ttu-id="b53e0-578">外部の証明書には、証明機関、証明書ユーザー、証明書の有効期間が、証明書ユーザー、および証明機関の署名の公開キーに関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b53e0-578">An external certificate contains information about the certification authority, the certificate user, the validity period of the certificate, the public key of the certificate user, and the certification authority's signature.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-579">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.SenderCertificate" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-579">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.SenderCertificate" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.Message.Authenticated" />
      </Docs>
    </Member>
    <Member MemberName="SenderId">
      <MemberSignature Language="C#" Value="public byte[] SenderId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SenderId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SenderId As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SenderId { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgSenderId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-580">送信元ユーザーの ID を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-580">Gets the identifier of the sending user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-581">差出人を識別するバイト値配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-581">An array of byte values that identifies the sender.</span>
          </span>
          <span data-ttu-id="b53e0-582">受信側キュー マネージャーは、メッセージを認証するときにこの ID を使って、メッセージの差出人と差出人のキューへのアクセス権とを確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-582">The receiving Queue Manager uses the identifier when it authenticates the message to verify the sender of the message and the sender's access rights to the queue.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-583">場合、<xref:System.Messaging.Message.AttachSenderId%2A>プロパティは`false`で指定した送信者の識別子、<xref:System.Messaging.Message.SenderId%2A>プロパティにアタッチされていないメッセージが送信されるとします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-583">If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `false`, the sender identifier specified in the <xref:System.Messaging.Message.SenderId%2A> property is not attached to the message when it is sent.</span></span> <span data-ttu-id="b53e0-584">これを示しますにキューにメッセージが送信先キューにメッセージを送信するときは、送信者を検証できません必要があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-584">This indicates to Message Queuing that the sender should not be validated when it sends the message to the destination queue.</span></span> <span data-ttu-id="b53e0-585">場合、<xref:System.Messaging.Message.AttachSenderId%2A>プロパティは`true`、<xref:System.Messaging.Message.SenderId%2A>プロパティの値が信頼できるは、メッセージが認証された場合にのみです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-585">If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `true`, the <xref:System.Messaging.Message.SenderId%2A> property value is trustworthy only if the message was authenticated.</span></span> <span data-ttu-id="b53e0-586">使用して、<xref:System.Messaging.Message.Authenticated%2A>プロパティと組み合わせて、<xref:System.Messaging.Message.SenderId%2A>プロパティを送信者のアクセス権を確認します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-586">Use the <xref:System.Messaging.Message.Authenticated%2A> property in conjunction with the <xref:System.Messaging.Message.SenderId%2A> property to verify the sender's access rights.</span></span>  
  
 <span data-ttu-id="b53e0-587">コネクタ アプリケーションは、コネクタ サーバーを使用して、メッセージ キューとその他のキュー システム間の通信を提供するアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-587">A connector application is an application that uses a connector server to provide communication between Message Queuing and other queuing systems.</span></span> <span data-ttu-id="b53e0-588">メッセージ キューでは、コネクタ アプリケーション送信者 id を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-588">Message Queuing requires connector applications to provide sender identification.</span></span> <span data-ttu-id="b53e0-589">設定する必要があります、<xref:System.Messaging.Message.ConnectorType%2A>プロパティ、コネクタ アプリケーションを介してメッセージを送信するときにします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-589">You must set the <xref:System.Messaging.Message.ConnectorType%2A> property when sending a message through a connector application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-590">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-590">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-591">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-591">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-592">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-592">-or-</span>
          </span>
          <span data-ttu-id="b53e0-593">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.SenderId" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-593">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.SenderId" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
      </Docs>
    </Member>
    <Member MemberName="SenderVersion">
      <MemberSignature Language="C#" Value="public long SenderVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 SenderVersion" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SenderVersion As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long SenderVersion { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgSenderVersion")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-594">メッセージを送信するのに使われるメッセージ キューのバージョンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-594">Gets the version of Message Queuing used to send the message.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-595">メッセージを送信するのに使われるメッセージ キューのバージョン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-595">The version of Message Queuing used to send the message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-596"><xref:System.Messaging.Message.SenderVersion%2A>プロパティは、特定の機能にとって重要です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-596">The <xref:System.Messaging.Message.SenderVersion%2A> property is important for certain features.</span></span> <span data-ttu-id="b53e0-597">たとえば、のみがメッセージ キュー 2.0 以降では、トランザクション処理がサポートされてし、デジタル署名が MSMQ 1.0 によって送信されるメッセージの認証に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-597">For example, transaction processing is supported only by Message Queuing 2.0 and later, and digital signatures are used to authenticate messages sent by MSMQ 1.0.</span></span>  
  
 <span data-ttu-id="b53e0-598">送信側キュー マネージャーを設定、<xref:System.Messaging.Message.SenderVersion%2A>プロパティ、メッセージが送信されるとします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-598">The sending Queue Manager sets the <xref:System.Messaging.Message.SenderVersion%2A> property when the message is sent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-599">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.SenderVersion%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-599">The following code example displays the value of a message's <xref:System.Messaging.Message.SenderVersion%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-600">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-600">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-601">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-601">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-602">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-602">-or-</span>
          </span>
          <span data-ttu-id="b53e0-603">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.SenderVersion" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-603">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.SenderVersion" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionStatusQueue" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
      </Docs>
    </Member>
    <Member MemberName="SentTime">
      <MemberSignature Language="C#" Value="public DateTime SentTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime SentTime" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SentTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SentTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime SentTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgSentTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-604">メッセージが送信元キュー マネージャーによって送信されたときの、送信元コンピューター上の日付と時刻を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-604">Gets the date and time on the sending computer that the message was sent by the source queue manager.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-605">メッセージが送信された日時を表す <see cref="T:System.DateTime" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-605">A <see cref="T:System.DateTime" /> that represents the time the message was sent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-606"><xref:System.Messaging.Message.SentTime%2A>プロパティはこのコンピューターのローカル時刻に調整のインスタンス、<xref:System.Messaging.Message>クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-606">The <xref:System.Messaging.Message.SentTime%2A> property is adjusted to the local time of the computer on which this instance of the <xref:System.Messaging.Message> class was created.</span></span> <span data-ttu-id="b53e0-607">このタイム ゾーンは、送信元と送信先のキューのものと異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-607">This time zone could be different from those of the source and destination queues.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-608">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.SentTime%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-608">The following code example displays the value of a message's <xref:System.Messaging.Message.SentTime%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-609">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-609">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-610">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-610">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-611">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-611">-or-</span>
          </span>
          <span data-ttu-id="b53e0-612">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.SentTime" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-612">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.SentTime" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SourceMachine">
      <MemberSignature Language="C#" Value="public string SourceMachine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceMachine" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SourceMachine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceMachine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceMachine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgSourceMachine")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-613">メッセージの送信元のコンピューターを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-613">Gets the computer from which the message originated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-614">メッセージの送信元のコンピューターの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-614">The name of the computer from which the message was sent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-615">形式、<xref:System.Messaging.Message.SourceMachine%2A>プロパティでは、2 つのスラッシュの前は含まれません (\\\\)。</span><span class="sxs-lookup"><span data-stu-id="b53e0-615">The format of the <xref:System.Messaging.Message.SourceMachine%2A> property does not include preceding two forward slashes (\\\\).</span></span> <span data-ttu-id="b53e0-616">たとえば、`myServer`は有効な<xref:System.Messaging.Message.SourceMachine%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-616">For example, `myServer` is a valid <xref:System.Messaging.Message.SourceMachine%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-617">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.SourceMachine%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-617">The following code example displays the value of a message's <xref:System.Messaging.Message.SourceMachine%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-618">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-618">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-619">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-619">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-620">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-620">-or-</span>
          </span>
          <span data-ttu-id="b53e0-621">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.SourceMachine" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-621">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.SourceMachine" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="b53e0-622">コンピューターの情報またはディレクトリ サービスにアクセスできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-622">The computer information or directory service could not be accessed.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageQueue.MachineName" />
      </Docs>
    </Member>
    <Member MemberName="TimeToBeReceived">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToBeReceived { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToBeReceived" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TimeToBeReceived" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToBeReceived As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToBeReceived { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTimeToBeReceived")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-623">メッセージが送信先キューから受信されるまでの最大時間を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-623">Gets or sets the maximum amount of time for the message to be received from the destination queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-624">送信されたメッセージが送信先キューから受信されるまでの合計時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-624">The total time for a sent message to be received from the destination queue.</span>
          </span>
          <span data-ttu-id="b53e0-625">既定値は、<see cref="F:System.Messaging.Message.InfiniteTimeout" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-625">The default is <see cref="F:System.Messaging.Message.InfiniteTimeout" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-626"><xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティが送信されたメッセージが送信先キューから受信されるまでの時間の合計を指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-626">The <xref:System.Messaging.Message.TimeToBeReceived%2A> property specifies the total time for a sent message to be received from the destination queue.</span></span> <span data-ttu-id="b53e0-627">制限時間には、送信先キューおよびメッセージを受信する前に、キューで待機する時間に費やされた時間が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b53e0-627">The time limit includes the time spent getting to the destination queue and the time spent waiting in the queue before the message is received.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b53e0-628">依存型クライアント コンピューターを使用する場合は、クライアント コンピューターのクロックがメッセージ キューを実行しているサーバー上のクロックと同期されていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-628">When using dependent client computers, be sure the clock on the client computer is synchronized with the clock on the server that is running Message Queuing.</span></span> <span data-ttu-id="b53e0-629">メッセージを送信するときに予期しない動作をそれ以外の場合、発生する可能性がありますが<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティは使用されません<xref:System.Messaging.Message.InfiniteTimeout>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-629">Otherwise, unpredictable behavior might result when sending a message whose <xref:System.Messaging.Message.TimeToBeReceived%2A> property is not <xref:System.Messaging.Message.InfiniteTimeout>.</span></span>  
  
 <span data-ttu-id="b53e0-630">間隔が指定されている場合、<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティでは、キューからメッセージを削除する前に有効期限が切れる、メッセージ キューは 2 つの方法のいずれかでメッセージを破棄します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-630">If the interval specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property expires before the message is removed from the queue, Message Queuing discards the message in one of two ways.</span></span> <span data-ttu-id="b53e0-631">メッセージの <xref:System.Messaging.Message.UseDeadLetterQueue%2A> プロパティが `true` の場合、メッセージは配信不能キューに送信されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-631">If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue.</span></span> <span data-ttu-id="b53e0-632">場合<xref:System.Messaging.Message.UseDeadLetterQueue%2A>は`false`メッセージは無視されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-632">If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored.</span></span>  
  
 <span data-ttu-id="b53e0-633">メッセージを設定することができます<xref:System.Messaging.Message.AcknowledgeType%2A>タイマーの有効期限が切れる前に、メッセージが取得されない場合に、メッセージ キュー、否定受信確認メッセージを送信を要求するプロパティが送信アプリケーションにバックアップします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-633">You can set the message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message is not retrieved before the timer expires.</span></span>  
  
 <span data-ttu-id="b53e0-634">値が指定されている場合、<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティがで指定された値より小さい、<xref:System.Messaging.Message.TimeToReachQueue%2A>プロパティ、<xref:System.Messaging.Message.TimeToBeReceived%2A>が優先されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-634">If the value specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property is less than the value specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property, <xref:System.Messaging.Message.TimeToBeReceived%2A> takes precedence.</span></span>  
  
 <span data-ttu-id="b53e0-635">単一のトランザクションで複数のメッセージが送信されると、メッセージ キューは、<xref:System.Messaging.Message.TimeToBeReceived%2A>最初のメッセージのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-635">When several messages are sent in a single transaction, Message Queuing uses the <xref:System.Messaging.Message.TimeToBeReceived%2A> property of the first message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-636">次のコード例を取得し、メッセージの値を設定<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-636">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.TimeToBeReceived%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-637">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.TimeToBeReceived" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-637">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.TimeToBeReceived" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b53e0-638">
            <see cref="P:System.Messaging.Message.TimeToBeReceived" /> に指定された値が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-638">The value specified for <see cref="P:System.Messaging.Message.TimeToBeReceived" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.TimeToReachQueue" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TimeToReachQueue">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToReachQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToReachQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TimeToReachQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToReachQueue As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToReachQueue { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTimeToReachQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-639">メッセージがキューに到達するまでの最大許容時間を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-639">Gets or sets the maximum amount of time for the message to reach the queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-640">メッセージが送信されてから送信先キューに到達するまでのタイム リミット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-640">The time limit for the message to reach the destination queue, beginning from the time the message is sent.</span>
          </span>
          <span data-ttu-id="b53e0-641">既定値は、<see cref="F:System.Messaging.Message.InfiniteTimeout" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-641">The default is <see cref="F:System.Messaging.Message.InfiniteTimeout" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-642">間隔が指定されている場合、<xref:System.Messaging.Message.TimeToReachQueue%2A>プロパティでは、メッセージが宛先に到達する前に有効期限が切れる、メッセージ キューは 2 つの方法のいずれかでメッセージを破棄します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-642">If the interval specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property expires before the message reaches its destination, Message Queuing discards the message in one of two ways.</span></span> <span data-ttu-id="b53e0-643">メッセージの <xref:System.Messaging.Message.UseDeadLetterQueue%2A> プロパティが `true` の場合、メッセージは配信不能キューに送信されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-643">If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue.</span></span> <span data-ttu-id="b53e0-644">場合<xref:System.Messaging.Message.UseDeadLetterQueue%2A>は`false`メッセージは無視されます</span><span class="sxs-lookup"><span data-stu-id="b53e0-644">If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored</span></span>  
  
 <span data-ttu-id="b53e0-645">彼はメッセージを設定することができます<xref:System.Messaging.Message.AcknowledgeType%2A>タイマーの有効期限が切れる前に、メッセージが到着しない場合、送信元アプリケーションにメッセージ キュー、否定受信確認メッセージを送信を要求するプロパティがバックアップされます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-645">You can set he message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message does not arrive before the timer expires.</span></span>  
  
 <span data-ttu-id="b53e0-646">場合、<xref:System.Messaging.Message.TimeToReachQueue%2A>プロパティが 0 秒に設定されて、メッセージ キューは 1 回、送信先にメッセージを送信、キューがメッセージを待機している場合。</span><span class="sxs-lookup"><span data-stu-id="b53e0-646">If the <xref:System.Messaging.Message.TimeToReachQueue%2A> property is set to 0 seconds, Message Queuing tries once to send the message to its destination—if the queue is waiting for the message.</span></span> <span data-ttu-id="b53e0-647">キューがローカルの場合は、メッセージ常に到達します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-647">If the queue is local, the message always reaches it.</span></span>  
  
 <span data-ttu-id="b53e0-648">値が指定されている場合、<xref:System.Messaging.Message.TimeToReachQueue%2A>プロパティがで指定された値より大きい、<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティ、<xref:System.Messaging.Message.TimeToBeReceived%2A>が優先されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-648">If the value specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property is greater than the value specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property, <xref:System.Messaging.Message.TimeToBeReceived%2A> takes precedence.</span></span>  
  
 <span data-ttu-id="b53e0-649">単一のトランザクションで複数のメッセージが送信されると、メッセージ キューは、<xref:System.Messaging.Message.TimeToReachQueue%2A>最初のメッセージのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-649">When several messages are sent in a single transaction, Message Queuing uses the <xref:System.Messaging.Message.TimeToReachQueue%2A> property of the first message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-650">次のコード例を取得し、メッセージの値を設定<xref:System.Messaging.Message.TimeToReachQueue%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-650">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.TimeToReachQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-651">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.TimeToReachQueue" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-651">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.TimeToReachQueue" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b53e0-652">
            <see cref="P:System.Messaging.Message.TimeToReachQueue" /> に指定された値が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-652">The value specified for <see cref="P:System.Messaging.Message.TimeToReachQueue" /> is invalid.</span>
          </span>
          <span data-ttu-id="b53e0-653">負数を表している可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-653">It might represent a negative number.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TransactionId">
      <MemberSignature Language="C#" Value="public string TransactionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransactionId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TransactionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TransactionId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TransactionId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTransactionId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-654">一部にメッセージを含むトランザクションの ID を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-654">Gets the identifier for the transaction of which the message was a part.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-655">メッセージに関連付けられているトランザクションの ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-655">The identifier for the transaction associated with the message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-656">アプリケーション使用の受信、<xref:System.Messaging.Message.TransactionId%2A>プロパティを特定のトランザクションの一部としてメッセージが送信されたことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="b53e0-656">Receiving applications use the <xref:System.Messaging.Message.TransactionId%2A> property to verify that a message was sent as part of a specific transaction.</span></span> <span data-ttu-id="b53e0-657">トランザクションの識別子には、4 バイトのトランザクション シーケンス番号の後に、送信元コンピューター (最初の 16 ビット) の識別子が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b53e0-657">The transaction identifier contains the identifier of the sending computer (first 16 bits) followed by a 4-byte transaction sequence number.</span></span>  
  
 <span data-ttu-id="b53e0-658">このプロパティは以降のバージョンのメッセージ キュー 2.0 にのみ利用可能です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-658">This property is available only for Message Queuing version 2.0 and later.</span></span>  
  
 <span data-ttu-id="b53e0-659">トランザクション id がトランザクション シーケンス番号は、永続的なと再び経由で 2 ために、一意である保証はありません<sup>20</sup>です。</span><span class="sxs-lookup"><span data-stu-id="b53e0-659">Transaction identifiers are not guaranteed to be unique, because transaction sequence numbers are not persistent, and they start over again at 2 <sup>20</sup>.</span></span> <span data-ttu-id="b53e0-660">メッセージ キューは、後続のトランザクションが別のトランザクション シーケンス番号を持つのみ保証されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-660">Message Queuing guarantees only that subsequent transactions will have different transaction sequence numbers.</span></span>  
  
 <span data-ttu-id="b53e0-661">使用することができます、<xref:System.Messaging.Message.TransactionId%2A>プロパティと共に、<xref:System.Messaging.Message.IsFirstInTransaction%2A>と<xref:System.Messaging.Message.IsLastInTransaction%2A>プロパティをトランザクションの境界を確認します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-661">You can use the <xref:System.Messaging.Message.TransactionId%2A> property along with the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties to verify transaction boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-662">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.TransactionId%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-662">The following code example displays the value of a message's <xref:System.Messaging.Message.TransactionId%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-663">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-663">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-664">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-664">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-665">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-665">-or-</span>
          </span>
          <span data-ttu-id="b53e0-666">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.TransactionId" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-666">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.TransactionId" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="TransactionStatusQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue TransactionStatusQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TransactionStatusQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TransactionStatusQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ TransactionStatusQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTransactionStatusQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-667">送信元コンピューター上のトランザクション ステータス キューを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-667">Gets the transaction status queue on the source computer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-668">送信元コンピューター上のトランザクション ステータス キュー。送信元アプリケーションに受信確認メッセージを返すときに使われます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-668">The transaction status queue on the source computer, which is used for sending acknowledgement messages back to the sending application.</span>
          </span>
          <span data-ttu-id="b53e0-669">既定値は、<see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-669">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-670"><xref:System.Messaging.Message.TransactionStatusQueue%2A>プロパティは、コネクタ アプリケーションから読み取り受信確認を受信するソース コンピューター上のトランザクション キューを識別します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-670">The <xref:System.Messaging.Message.TransactionStatusQueue%2A> property identifies the transactional queue on the source computer that receives read-receipt acknowledgments from connector applications.</span></span> <span data-ttu-id="b53e0-671">メッセージ キューは、プロパティを設定し、外部キューに送信されるトランザクション メッセージを取得するときに、コネクタ アプリケーションはプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-671">Message Queuing sets the property, and connector applications use the property when retrieving transactional messages sent to foreign queues.</span></span>  
  
 <span data-ttu-id="b53e0-672">外部のキューは、Microsoft メッセージ キュー以外のキュー システムに存在します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-672">A foreign queue exists in a queuing system other than Microsoft Message Queuing.</span></span> <span data-ttu-id="b53e0-673">メッセージ キューは、コネクタ アプリケーションを使用してこのようなキューと通信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-673">Message Queuing communicates with such queues through a connector application.</span></span>  
  
 <span data-ttu-id="b53e0-674">コネクタ アプリケーションは、トランザクション状態キューを使用して、受信確認メッセージを送信元アプリケーションに送信することができます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-674">The connector application can use the transaction status queue to send acknowledgment messages back to the sending application.</span></span> <span data-ttu-id="b53e0-675">トランザクション状態キューは、送信元アプリケーションが別の受信確認を要求していない場合でも、これらの確認を受信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-675">The transaction status queue should receive these acknowledgments even if the sending application does not request other acknowledgments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-676">次のコード例には、メッセージの値が表示されます。<xref:System.Messaging.Message.TransactionStatusQueue%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-676">The following code example displays the value of a message's <xref:System.Messaging.Message.TransactionStatusQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-677">メッセージは送信されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-677">The message has not been sent.</span>
          </span>
          <span data-ttu-id="b53e0-678">このプロパティは、キューから取得したメッセージでだけ読み込むことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-678">This property can only be read on messages retrieved from a queue.</span>
          </span>
          <span data-ttu-id="b53e0-679">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-679">-or-</span>
          </span>
          <span data-ttu-id="b53e0-680">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.TransactionStatusQueue" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-680">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.TransactionStatusQueue" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.DestinationQueue" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
      </Docs>
    </Member>
    <Member MemberName="UseAuthentication">
      <MemberSignature Language="C#" Value="public bool UseAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UseAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseAuthentication { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseAuthentication")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-681">メッセージが送信前に認証された (または認証される必要がある) かどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-681">Gets or sets a value that indicates whether the message was (or must be) authenticated before being sent.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-682">送信元アプリケーションがメッセージの認証を要求した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-682">
              <see langword="true" /> if the sending application requested authentication for the message; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-683"><xref:System.Messaging.Message.UseAuthentication%2A>プロパティは、メッセージを認証する必要があるかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-683">The <xref:System.Messaging.Message.UseAuthentication%2A> property specifies whether the message needs to be authenticated.</span></span> <span data-ttu-id="b53e0-684">送信元アプリケーションは、認証を要求している場合はメッセージ キュー、デジタル署名を作成しが送信されるメッセージに署名し、メッセージの認証を受信したときに使用します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-684">If the sending application requests authentication, Message Queuing creates a digital signature and uses it to sign the message when it is sent and authenticate the message when it is received.</span></span>  
  
 <span data-ttu-id="b53e0-685">場合<xref:System.Messaging.Message.UseAuthentication%2A>は`false`を認証されたメッセージのみを受け取るキューにメッセージが送信されると、キューになったときに、メッセージは拒否されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-685">If <xref:System.Messaging.Message.UseAuthentication%2A> is `false` and a message is sent to a queue that accepts only authenticated messages, the message will be rejected when it reaches the queue.</span></span>  
  
 <span data-ttu-id="b53e0-686">メッセージのプロパティを調べることで認証に失敗したかどうかを判断できません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-686">You cannot determine if a message failed authentication by looking at its properties.</span></span> <span data-ttu-id="b53e0-687">メッセージ キューは、キューに配信される前に、このようなメッセージを破棄します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-687">Message Queuing discards such messages before they are delivered to the queue.</span></span> <span data-ttu-id="b53e0-688">ただし、配信の失敗が原因でメッセージがキューに到着した場合に、受信確認メッセージを送信することを要求することができます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-688">However, you can request that an acknowledgment message be sent if a delivery failure prevents a message from arriving in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-689">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.UseAuthentication" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-689">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.UseAuthentication" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
      </Docs>
    </Member>
    <Member MemberName="UseDeadLetterQueue">
      <MemberSignature Language="C#" Value="public bool UseDeadLetterQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDeadLetterQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseDeadLetterQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDeadLetterQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDeadLetterQueue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseDeadLetterQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-690">配信できなかったメッセージのコピーを配信不能キューに送信するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-690">Gets or sets a value that indicates whether a copy of the message that could not be delivered should be sent to a dead-letter queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-691">メッセージが配信できなかったときにそのメッセージのコピーを配信不能キューに送信する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-691">
              <see langword="true" /> if message-delivery failure should result in a copy of the message being sent to a dead-letter queue; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b53e0-692">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-692">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-693"><xref:System.Messaging.Message.UseJournalQueue%2A>と<xref:System.Messaging.Message.UseDeadLetterQueue%2A>プロパティは、メッセージ キューがメッセージには追跡を指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-693">The <xref:System.Messaging.Message.UseJournalQueue%2A> and <xref:System.Messaging.Message.UseDeadLetterQueue%2A> properties specify how Message Queuing tracks a message.</span></span> <span data-ttu-id="b53e0-694">場合<xref:System.Messaging.Message.UseDeadLetterQueue%2A>は`true`メッセージが配信できなかったコンピューターの非トランザクション配信不能キューに送信されるメッセージは生成 (非トランザクション メッセージの場合) の配信が失敗します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-694">If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `true`, delivery failure (of a non-transactional message), causes the message to be sent to the non-transactional dead-letter queue on the computer that could not deliver the message.</span></span> <span data-ttu-id="b53e0-695">配信の失敗は、期限切れのメッセージのタイマーが原因と考えられます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-695">Delivery failure could be caused by a message timer expiring, for example.</span></span>  
  
 <span data-ttu-id="b53e0-696">トランザクション メッセージの配信失敗した場合、メッセージ キューとすべての負の値と、状態が不明の場合、ソース マシン上のトランザクション配信不能キューにも、メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-696">In the case of delivery failure for a transactional message, Message Queuing sends the message to the transactional dead-letter queue on the source machine in all negative and in-doubt cases.</span></span>  
  
 <span data-ttu-id="b53e0-697">配信不能キューにメッセージを格納する際は、不要になったメッセージを削除するには、定期的にキューをクリアする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b53e0-697">When you store messages in a dead-letter queue, you should clear the queue periodically to remove messages that are no longer needed.</span></span> <span data-ttu-id="b53e0-698">キューが存在するコンピューターのサイズ クォータに対して配信不能キューに格納されたメッセージ。</span><span class="sxs-lookup"><span data-stu-id="b53e0-698">Messages stored in dead-letter queues count against the size quota for the computer where the queue resides.</span></span> <span data-ttu-id="b53e0-699">コンピューターのクォータは、管理者が設定されているし、1 つのキューではなく、コンピューター全体にメッセージを格納するために割り当てられているサイズを示します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-699">The computer quota is set by the administrator and refers to the size allocated for storing messages on the whole computer, not just in a single queue.</span></span>  
  
 <span data-ttu-id="b53e0-700">ジャーナルや配信不能キューを作成しません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-700">You do not create a journal or dead-letter queue.</span></span> <span data-ttu-id="b53e0-701">これらは、メッセージ キューによって生成される両方のシステム キューです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-701">These are both system queues that Message Queuing generates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-702">次のコード例を取得し、メッセージの値を設定<xref:System.Messaging.Message.UseDeadLetterQueue%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-702">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-703">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.UseDeadLetterQueue" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-703">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.UseDeadLetterQueue" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
        <altmember cref="P:System.Messaging.Message.UseTracing" />
      </Docs>
    </Member>
    <Member MemberName="UseEncryption">
      <MemberSignature Language="C#" Value="public bool UseEncryption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseEncryption" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseEncryption" />
      <MemberSignature Language="VB.NET" Value="Public Property UseEncryption As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseEncryption { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseEncryption")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-704">メッセージをプライベートにするかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-704">Gets or sets a value that indicates whether to make the message private.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-705">メッセージ キューにメッセージを暗号化するように要求する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-705">
              <see langword="true" /> to require Message Queuing to encrypt the message; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b53e0-706">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-706">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-707">メッセージがプライベートの場合は、送信および受信したときに暗号化を解除する前に、本文は暗号化されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-707">If a message is private, its body is encrypted before it is sent and decrypted when it is received.</span></span> <span data-ttu-id="b53e0-708">その暗号化を使用するプライベート メッセージを送信する送信元のアプリケーションを指定する必要がありますと、必要に応じて、暗号化アルゴリズムです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-708">To send a private message, the sending application must specify that encryption be used and, optionally, the encryption algorithm.</span></span>  
  
 <span data-ttu-id="b53e0-709">プライベート メッセージを送信するときに、アプリケーションがメッセージの暗号化を実行する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-709">When sending private messages, your application does not need to perform the message encryption.</span></span> <span data-ttu-id="b53e0-710">メッセージ キューは、アプリケーションがディレクトリ サービスへのアクセス権を持つ Microsoft Windows 2000 エンタープライズ内のメッセージを送信する場合のメッセージ本文を暗号化できます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-710">Message Queuing can encrypt the message body for you if your application is sending messages within a Microsoft Windows 2000 enterprise, which has access to the directory service.</span></span> <span data-ttu-id="b53e0-711">プライベート メッセージを受信するときに受信キュー マネージャで、メッセージ本文が常に暗号化解除します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-711">When receiving private messages, the receiving Queue Manager always decrypts the message body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-712">次のコード例を取得し、メッセージの値を設定<xref:System.Messaging.Message.UseEncryption%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-712">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseEncryption%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-713">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.UseEncryption" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-713">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.UseEncryption" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.EncryptionAlgorithm" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseJournalQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-714">送信元のコンピューターの履歴にメッセージのコピーを保持するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-714">Gets or sets a value that indicates whether a copy of the message should be kept in a machine journal on the originating computer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-715">メッセージが (送信元のコンピューターから次のサーバーに) 正常に送信された後に送信元コンピューターの履歴にメッセージのコピーを保持するように要求する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-715">
              <see langword="true" /> to require that a copy of a message be kept in the originating computer's machine journal after the message has been successfully transmitted (from the originating computer to the next server); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b53e0-716">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-716">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-717"><xref:System.Messaging.Message.UseJournalQueue%2A>と<xref:System.Messaging.Message.UseDeadLetterQueue%2A>プロパティは、メッセージ キューがメッセージには追跡を指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-717">The <xref:System.Messaging.Message.UseJournalQueue%2A> and <xref:System.Messaging.Message.UseDeadLetterQueue%2A> properties specify how Message Queuing tracks a message.</span></span> <span data-ttu-id="b53e0-718">場合<xref:System.Messaging.Message.UseJournalQueue%2A>は`true`はコンピューター ジャーナル メッセージを送信する各ステップでは、発信元のコンピューターにコピーを保持し、します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-718">If <xref:System.Messaging.Message.UseJournalQueue%2A> is `true`, then a copy is kept in the computer journal on the originating machine at each step that a message is transmitted.</span></span>  
  
 <span data-ttu-id="b53e0-719">送信したメッセージは、送信先キューがリモート コンピューター上にある場合にのみ、ジャーナル キューにコピーされます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-719">The sent message is only copied to the journal queue if the destination queue is on a remote computer.</span></span> <span data-ttu-id="b53e0-720">メッセージがキューに直接送信される先がローカル コンピューター上にある場合は、履歴を必要とする中間の手順はありません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-720">If the destination is on the local computer, the message is sent directly to the queue; there are no intermediate steps to require journaling.</span></span>  
  
 <span data-ttu-id="b53e0-721">ジャーナル キューにメッセージを格納する際は、不要になったメッセージを削除するには、定期的にキューをクリアします。</span><span class="sxs-lookup"><span data-stu-id="b53e0-721">When you store messages in a journal queue, clear the queue periodically to remove messages that are no longer needed.</span></span> <span data-ttu-id="b53e0-722">キューが存在するコンピューターのクォータに照らし合わせてジャーナル キューに格納されているメッセージです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-722">Messages stored in journal queues count against the quota for the computer where the queue resides.</span></span> <span data-ttu-id="b53e0-723">(コンピューターのクォータは、管理者によって設定します。)</span><span class="sxs-lookup"><span data-stu-id="b53e0-723">(The computer quota is set by the administrator.)</span></span>  
  
 <span data-ttu-id="b53e0-724">ジャーナルや配信不能キューを作成しません。</span><span class="sxs-lookup"><span data-stu-id="b53e0-724">You do not create a journal or dead-letter queue.</span></span> <span data-ttu-id="b53e0-725">これらは、メッセージ キューによって生成される両方のシステム キューです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-725">These are both system queues that Message Queuing generates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-726">次のコード例を取得し、メッセージの値を設定<xref:System.Messaging.Message.UseJournalQueue%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-726">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseJournalQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-727">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.UseJournalQueue" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-727">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.UseJournalQueue" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseTracing" />
        <altmember cref="P:System.Messaging.MessageQueue.UseJournalQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.MaximumJournalSize" />
      </Docs>
    </Member>
    <Member MemberName="UseTracing">
      <MemberSignature Language="C#" Value="public bool UseTracing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTracing" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseTracing" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTracing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTracing { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseTracing")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b53e0-728">メッセージが送信先キューに移動していく途中でメッセージをトレースするかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-728">Gets or sets a value that indicates whether to trace a message as it moves toward its destination queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b53e0-729">元のメッセージが送信先キューに到達するまでに発生する各中間ステップごとにレポートを生成して、システムのレポート キューに送信する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-729">
              <see langword="true" /> if each intermediate step made by the original message en route to the destination queue generates a report to be sent to the system's report queue; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b53e0-730">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-730">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b53e0-731"><xref:System.Messaging.Message.UseTracing%2A>プロパティでは、送信先キューに移動するときに、メッセージの経路を追跡するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-731">The <xref:System.Messaging.Message.UseTracing%2A> property specifies whether to track the route of a message as it moves toward its destination queue.</span></span> <span data-ttu-id="b53e0-732">場合`true`、(メッセージ キューによって生成される)、レポート メッセージは、メッセージがメッセージ キューのルーティング サーバーを通過するたびにレポート キューに送信します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-732">If `true`, a report message (generated by Message Queuing) is sent to a report queue each time the message passes through a Message Queuing routing server.</span></span> <span data-ttu-id="b53e0-733">レポート キューは、送信元キュー マネージャーによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-733">The report queue is specified by the source Queue Manager.</span></span> <span data-ttu-id="b53e0-734">レポート キューにメッセージがキュー; によって生成されたメッセージをレポートに限定されていませんアプリケーションによって生成されたメッセージは、レポート キューに送信することもできます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-734">Report queues are not limited to report messages generated by Message Queuing; your application-generated messages can also be sent to report queues.</span></span>  
  
 <span data-ttu-id="b53e0-735">トレースを使用するには、Active Directory を設定して、メッセージ キュー エンタープライズ レポート キューを指定することが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b53e0-735">Using tracing involves setting up Active Directory and specifying a report queue for the Message Queuing enterprise.</span></span> <span data-ttu-id="b53e0-736">管理者は、これらの設定を構成します。</span><span class="sxs-lookup"><span data-stu-id="b53e0-736">The administrator configures these settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b53e0-737">次のコード例を取得し、メッセージの値を設定<xref:System.Messaging.Message.UseTracing%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b53e0-737">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseTracing%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b53e0-738">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.UseTracing" /> プロパティを無視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b53e0-738">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.UseTracing" /> property.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
      </Docs>
    </Member>
  </Members>
</Type>