<Type Name="Message" FullName="System.Messaging.Message">
  <Metadata><Meta Name="ms.openlocfilehash" Value="daa0e77edf7b25392c1fdafe9ec2d03ec85cbf7c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69115955" /></Metadata><TypeSignature Language="C#" Value="public class Message : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Message extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.Message" />
  <TypeSignature Language="VB.NET" Value="Public Class Message&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Message : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Message = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>メッセージ キューのメッセージを定義するのに必要なプロパティへのアクセスを実現します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キューから<xref:System.Messaging.Message>メッセージをピークまたは受信したり、メッセージをキューに送信するときにメッセージのプロパティを細かく制御したりするには、クラスを使用します。  
  
 <xref:System.Messaging.MessageQueue>は、キューからメッセージをピークまたは受信するときに<xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=nameWithType> <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> <xref:System.Messaging.Message> クラスを使用します。これは、メソッドとメソッドの両方がクラスの新しいインスタンスを作成し、インスタンス<xref:System.Messaging.Message>のプロパティを設定するためです。 クラス<xref:System.Messaging.Message>の読み取り専用プロパティは、キューからメッセージを取得するために適用されます。読み取り/書き込みプロパティは、メッセージの送受信に適用されます。 が<xref:System.Messaging.MessageQueue>キューからメッセージをピークまたは受信すると<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> 、そのプロパティによって、どのメッセージのプロパティが取得されるかが決まります。  
  
 <xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Send%2A>メソッドを使用すると、そのキューに送信されるメッセージの任意のオブジェクトの種類を指定できます。 <xref:System.Messaging.MessageQueue>インスタンスの<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>プロパティを使用して、キューに送信される汎用メッセージの設定を指定できます。 設定の種類には、フォーマッタ、ラベル、暗号化、および認証が含まれます。 また、受信確認メッセージとレポートメッセージ<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>に応答するようにメッセージングアプリケーションを調整するときに、適切なメンバーの値を指定することもできます。 <xref:System.Messaging.Message>インスタンスを使用してキューにメッセージを送信すると、1つのメッセージに対して、またはメッセージごとに、これらのプロパティの多くにアクセスして変更する柔軟性が得られます。 <xref:System.Messaging.Message>プロパティはより<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>も優先されます。  
  
 メッセージデータは、 <xref:System.Messaging.Message.Body%2A>プロパティとプロパティ、 <xref:System.Messaging.Message.AppSpecific%2A>および<xref:System.Messaging.Message.Extension%2A>プロパティに格納されます。 メッセージデータが暗号化、シリアル化、または逆シリアル化される場合<xref:System.Messaging.Message.Body%2A> 、プロパティの内容のみが影響を受けます。  
  
 <xref:System.Messaging.Message.Body%2A>プロパティの内容は、指定した<xref:System.Messaging.Message.Formatter%2A>プロパティを使用して、メッセージが送信されるときにシリアル化されます。 シリアル化されたコンテンツは<xref:System.Messaging.Message.BodyStream%2A> 、プロパティにあります。 また、 <xref:System.Messaging.Message.BodyStream%2A>プロパティを直接設定することもできます。たとえば、ファイルをメッセージのデータコンテンツとして送信することができます。 またはの<xref:System.Messaging.Message.Body%2A>プロパティは<xref:System.Messaging.Message.Formatter%2A> 、メッセージを送信する前にいつでも変更できます。また、を呼び出す<xref:System.Messaging.MessageQueue.Send%2A>と、データが適切にシリアル化されます。  
  
 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType>プロパティによって定義されるプロパティは、型<xref:System.Messaging.Message>ではないメッセージにのみ適用されます。 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> <xref:System.Messaging.Message> のプロパティを指定した場合、そのキューに送信されたインスタンスの同じ名前のプロパティによって、これらの既定のプロパティが無視<xref:System.Messaging.MessageQueue>されます。  
  
 の<xref:System.Messaging.Message>インスタンスの初期プロパティ値の一覧につい<xref:System.Messaging.Message.%23ctor%2A>ては、コンストラクターを参照してください。  
  
   
  
## Examples  
 次のコード例は、を使用して<xref:System.Messaging.BinaryMessageFormatter>メッセージ本文を書式設定する方法を示しています。  
  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 次のコード例は、を使用して<xref:System.Messaging.XmlMessageFormatter>メッセージ本文を書式設定する方法を示しています。  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
    <altmember cref="M:System.Messaging.MessageQueue.Receive" />
    <altmember cref="M:System.Messaging.MessageQueue.Peek" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Messaging.Message" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Messaging.Message" /> クラスの新しいインスタンスを空の本文で初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバーロードを使用して、 <xref:System.Messaging.Message>空の本文を持つクラスの新しいインスタンスを作成します。  
  
 オブジェクトを<xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.BodyStream%2A> 送信する前に、プロパティまたはプロパティのいずれかを指定<xref:System.Messaging.Message>してください。 プロパティ<xref:System.Messaging.Message.Body%2A>には、テキスト文字列、構造体オブジェクト、クラスインスタンス、または埋め込みオブジェクトなど、シリアル化できる任意のオブジェクトを指定できます。  
  
 メッセージの内容を<xref:System.Messaging.Message.BodyStream%2A>プロパティに直接書き込む場合を除き、メッセージを送信する前に<xref:System.Messaging.Message.Formatter%2A>プロパティを設定します。 本文は、 <xref:System.Messaging.Message.Formatter%2A> <xref:System.Messaging.MessageQueue>インスタンスで<xref:System.Messaging.MessageQueue.Send%2A>メソッドが呼び出されたときに、プロパティの値を使用してシリアル化されます。  
  
 <xref:System.Messaging.XmlMessageFormatter>は疎結合であるため、この形式を使用する場合、送信側と受信側で同じオブジェクト型を使用する必要はありません。 <xref:System.Messaging.ActiveXMessageFormatter> と<xref:System.Messaging.BinaryMessageFormatter>は、データをバイナリ表現にシリアル化します。 は<xref:System.Messaging.ActiveXMessageFormatter> 、COM コンポーネントを送受信するときに使用されます。  
  
 次の表に、の<xref:System.Messaging.Message>インスタンスのプロパティの初期値を示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|0|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider バージョン1.0|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|`null`|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|0|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|空の文字列 ("")|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|空の文字列 ("")|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 次のコード例では、異なる優先順位の2つのメッセージをキューに送信し、それらを後で取得します。  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message (object body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (body As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message(System::Object ^ body);" />
      <MemberSignature Language="F#" Value="new System.Messaging.Message : obj -&gt; System.Messaging.Message" Usage="new System.Messaging.Message body" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="body" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="body">メッセージの本文にシリアル化されるオブジェクト。</param>
        <summary>指定したオブジェクトをメッセージの本文にシリアル化するために <see cref="T:System.Messaging.XmlMessageFormatter" /> を使用して、<see cref="T:System.Messaging.Message" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバーロードを使用して、 <xref:System.Messaging.Message> `body`パラメーターによって指定され<xref:System.Messaging.Message.Body%2A>たを含むクラスの新しいインスタンスを作成します。 パラメーター `body`には、テキスト文字列、構造体オブジェクト、クラスインスタンス、または埋め込みオブジェクトなど、シリアル化できる任意のオブジェクトを指定できます。 が送信される前に<xref:System.Messaging.XmlMessageFormatter> <xref:System.Messaging.Message.Formatter%2A>プロパティを変更しない限り、本文はを使用してシリアル化されます。 <xref:System.Messaging.Message> を呼び出す<xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.Formatter%2A> 前<xref:System.Messaging.MessageQueue.Send%2A>に、またはプロパティをいつでも変更した場合、メッセージは新しいプロパティ値に従ってシリアル化されます。  
  
 <xref:System.Messaging.XmlMessageFormatter>は疎結合であるため、この形式を使用する場合、送信側と受信側で同じオブジェクト型を使用する必要はありません。 <xref:System.Messaging.ActiveXMessageFormatter> と<xref:System.Messaging.BinaryMessageFormatter>は、データをバイナリ表現にシリアル化します。 は<xref:System.Messaging.ActiveXMessageFormatter> 、COM コンポーネントを送受信するときに使用されます。  
  
 次の表に、の<xref:System.Messaging.Message>インスタンスのプロパティの初期値を示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|0|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider バージョン1.0|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|`body` パラメーター。|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|0|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|空の文字列 ("")|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|空の文字列 ("")|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 次のコード例では、新しいキューを作成し、注文を含むメッセージを送信して、それを取得します。  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message (object body, System.Messaging.IMessageFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object body, class System.Messaging.IMessageFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (body As Object, formatter As IMessageFormatter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message(System::Object ^ body, System::Messaging::IMessageFormatter ^ formatter);" />
      <MemberSignature Language="F#" Value="new System.Messaging.Message : obj * System.Messaging.IMessageFormatter -&gt; System.Messaging.Message" Usage="new System.Messaging.Message (body, formatter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="body" Type="System.Object" />
        <Parameter Name="formatter" Type="System.Messaging.IMessageFormatter" />
      </Parameters>
      <Docs>
        <param name="body">メッセージの本文にシリアル化されるオブジェクト。</param>
        <param name="formatter">メッセージ本文をシリアル化するときに使うフォーマッタを指定する <see cref="T:System.Messaging.IMessageFormatter" />。</param>
        <summary>指定したオブジェクトをメッセージの本文にシリアル化するために指定したフォーマッタを使用して、<see cref="T:System.Messaging.Message" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバーロードを使用して、 <xref:System.Messaging.Message> `body`パラメーターによって<xref:System.Messaging.Message.Body%2A>指定されたを格納し、任意の有効なフォーマッタを使用して本文をシリアル化するクラスの新しいインスタンスを作成します。 `body`パラメーターは、テキスト文字列、構造体オブジェクト、クラスインスタンス、または埋め込みオブジェクトなど、シリアル化できる任意のオブジェクトです。 を呼び出す<xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.Formatter%2A> 前<xref:System.Messaging.MessageQueue.Send%2A>に、またはプロパティをいつでも変更した場合、メッセージは新しいプロパティ値に従ってシリアル化されます。  
  
 <xref:System.Messaging.XmlMessageFormatter>は疎結合であるため、この形式を使用する場合、送信側と受信側で同じオブジェクト型を使用する必要はありません。 <xref:System.Messaging.ActiveXMessageFormatter> と<xref:System.Messaging.BinaryMessageFormatter>は、データをバイナリ表現にシリアル化します。 は<xref:System.Messaging.ActiveXMessageFormatter> 、COM コンポーネントを送受信するときに使用されます。  
  
 次の表に、の<xref:System.Messaging.Message>インスタンスのプロパティの初期値を示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|0|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider バージョン1.0|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|`body` パラメーター。|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|0|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|空の文字列 ("")|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.Formatter%2A>|`formatter` パラメーター。|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|空の文字列 ("")|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|長さ0のバイト配列|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeType">
      <MemberSignature Language="C#" Value="public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.AcknowledgeTypes AcknowledgeType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AcknowledgeType" />
      <MemberSignature Language="VB.NET" Value="Public Property AcknowledgeType As AcknowledgeTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AcknowledgeTypes AcknowledgeType { System::Messaging::AcknowledgeTypes get(); void set(System::Messaging::AcknowledgeTypes value); };" />
      <MemberSignature Language="F#" Value="member this.AcknowledgeType : System.Messaging.AcknowledgeTypes with get, set" Usage="System.Messaging.Message.AcknowledgeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgAcknowledgeType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AcknowledgeTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>送信元アプリケーションに返す受信確認メッセージのタイプを取得または設定します。</summary>
        <value><see cref="T:System.Messaging.AcknowledgeTypes" /> 値の 1 つ。この値は、システムによって管理キューにポストされる受信確認メッセージのタイプと、送信元のアプリケーションに受信確認メッセージを返すときの条件を表します。 既定値は、<see langword="None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.AcknowledgeType%2A>は、送信元アプリケーションによって要求される受信確認メッセージの種類を指定します。 特定の<xref:System.Messaging.Message.AcknowledgeType%2A>発生の通知を要求するために、メッセージを送信する前にプロパティを設定します。たとえば、メッセージが送信先キューに到達した場合、メッセージが取得された場合、タイムアウトが発生したためにメッセージが到達したり取得されたりすることを防ぎます。送信先キュー。  
  
 メッセージキューは、元のメッセージによって<xref:System.Messaging.Message.AdministrationQueue%2A>指定されたプロパティに確認メッセージを送信することによって通知を返します。 受信確認メッセージの<xref:System.Messaging.Message.Acknowledgment%2A>プロパティは、それが表す受信確認の種類を示します。 たとえば、受信確認メッセージが送信されたときに、メッセージが送信先に到着<xref:System.Messaging.Message.TimeToReachQueue%2A>してから間隔<xref:System.Messaging.Message.Acknowledgment%2A>が経過していない場合、受信`ReachQueueTimeout`確認メッセージのプロパティに値が含まれます。  
  
   
  
## Examples  
 次のコード例では、キューとの間で注文を含むメッセージを送受信します。 これは、元のメッセージがキューに到達するか、キューから取得されるときに肯定受信確認を要求します。  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージがフィルター処理され、<see cref="P:System.Messaging.Message.AcknowledgeType" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.Acknowledgment" />
      </Docs>
    </Member>
    <Member MemberName="Acknowledgment">
      <MemberSignature Language="C#" Value="public System.Messaging.Acknowledgment Acknowledgment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.Acknowledgment Acknowledgment" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Acknowledgment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Acknowledgment As Acknowledgment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Acknowledgment Acknowledgment { System::Messaging::Acknowledgment get(); };" />
      <MemberSignature Language="F#" Value="member this.Acknowledgment : System.Messaging.Acknowledgment" Usage="System.Messaging.Message.Acknowledgment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgAcknowledgement")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.Acknowledgment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメッセージが表す受信確認の分類を取得します。</summary>
        <value><see cref="T:System.Messaging.Acknowledgment" /> 列挙値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 管理キューからメッセージを受信した場合は、 <xref:System.Messaging.Message.Acknowledgment%2A>プロパティを読み取って元のメッセージの状態を確認します。  
  
 メッセージが送信先キューに送信されると、メッセージキューを要求して、受信確認メッセージを投稿することができます。 このようなメッセージは、メッセージが到着したかどうか、指定されたタイムアウト内に取得されたかどうか、または配信に失敗した場合に発生した問題を示すことができます。 送信先キューは、受信確認メッセージを返し、元のメッセージの<xref:System.Messaging.Message.AdministrationQueue%2A>プロパティに指定されている管理キューに送信します。 受信<xref:System.Messaging.Message.Id%2A>確認メッセージのプロパティは、元のメッセージではなく、受信確認メッセージを識別します。 受信確認<xref:System.Messaging.Message>インスタンスの<xref:System.Messaging.Message.CorrelationId%2A>プロパティには、元のメッセージの識別子を見つけることができます。  
  
 この<xref:System.Messaging.Message>インスタンスが受信確認メッセージを表す場合<xref:System.Messaging.Message.Acknowledgment%2A> 、プロパティは受信確認の種類を指定します。 それ以外の<xref:System.Messaging.Message.Acknowledgment%2A>場合、プロパティに`Normal`は値が含まれます。  
  
 元のメッセージのプロパティを使用して、受信確認が返される状況を指定します。<xref:System.Messaging.Message.AcknowledgeType%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
- または - 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.CorrelationId" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekById(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveById(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="AdministrationQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue AdministrationQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue AdministrationQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AdministrationQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property AdministrationQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ AdministrationQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AdministrationQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.Message.AdministrationQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgAdministrationQueue")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージ キューによって生成される受信確認メッセージを受け取るキューを取得または設定します。</summary>
        <value>システムによって生成される受信確認メッセージ用の管理キューを指定する <see cref="T:System.Messaging.MessageQueue" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.AdministrationQueue%2A>プロパティで指定されたキューは、非トランザクションキューにすることができます。 管理キューに送信される受信確認メッセージは、元のメッセージが送信先キューに到達したかどうか、メッセージがキューから削除されたかどうかを示すことができます。  
  
 プロパティの<xref:System.Messaging.Message.AcknowledgeType%2A>値が以外`None`の場合、送信側アプリケーションでは、管理キューとして使用するキューを指定する必要があります。  
  
   
  
## Examples  
 次のコード例では、キューとの間で注文を含むメッセージを送受信します。 これは、元のメッセージがキューに到達するか、キューから取得されるときに肯定受信確認を要求します。  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.AdministrationQueue" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.Acknowledgment" />
      </Docs>
    </Member>
    <Member MemberName="AppSpecific">
      <MemberSignature Language="C#" Value="public int AppSpecific { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AppSpecific" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AppSpecific" />
      <MemberSignature Language="VB.NET" Value="Public Property AppSpecific As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AppSpecific { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AppSpecific : int with get, set" Usage="System.Messaging.Message.AppSpecific" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgAppSpecific")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーション固有の追加情報を取得または設定します。</summary>
        <value>アプリケーションに固有の情報。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.AppSpecific%2A>には、さまざまな種類のメッセージを整理するために使用できるアプリケーション固有の情報が含まれています。 たとえば、アプリケーション固有のインデックスを使用できます。 プロパティ情報を解釈<xref:System.Messaging.Message.AppSpecific%2A>するのは、アプリケーションの役割です。  
  
 可能な場合は、 <xref:System.Messaging.Message.AppSpecific%2A>プロパティではなく、メッセージの本文にメッセージデータを含める必要があります。  
  
 外部キューを使用する場合は、 <xref:System.Messaging.Message.Extension%2A>プロパティを使用して、メッセージキューに存在しないメッセージプロパティを指定します。 プロパティと同様に、 <xref:System.Messaging.Message.Extension%2A>プロパティの内容を理解するのはアプリケーションの役割です。 <xref:System.Messaging.Message.AppSpecific%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.AppSpecific" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.Body" />
      </Docs>
    </Member>
    <Member MemberName="ArrivedTime">
      <MemberSignature Language="C#" Value="public DateTime ArrivedTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ArrivedTime" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ArrivedTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArrivedTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime ArrivedTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ArrivedTime : DateTime" Usage="System.Messaging.Message.ArrivedTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgArrivedTime")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージが送信先キューに到達した時刻を取得します。</summary>
        <value>メッセージが送信先キューに到達した時刻を表す <see cref="T:System.DateTime" />。 この時刻は、グリニッジ平均時から、送信先キューが存在するコンピューターのローカル時間に調整されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージの<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティは、送信先キューからメッセージを受信する必要がある速度を示します。 <xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティタイマーは、メッセージが送信されると開始されます。メッセージがキューに到着したときには開始されません。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.ArrivedTime%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.ArrivedTime" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
      </Docs>
    </Member>
    <Member MemberName="AttachSenderId">
      <MemberSignature Language="C#" Value="public bool AttachSenderId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AttachSenderId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AttachSenderId" />
      <MemberSignature Language="VB.NET" Value="Public Property AttachSenderId As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AttachSenderId { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AttachSenderId : bool with get, set" Usage="System.Messaging.Message.AttachSenderId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgAttachSenderId")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージに送信者 ID を結び付ける必要があるかどうかを示す値を取得または設定します。</summary>
        <value><see cref="P:System.Messaging.Message.SenderId" /> をメッセージに結び付ける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.SenderId%2A>プロパティは、送信ユーザーの識別子を表すバイト配列です。 送信者 ID はメッセージキューによって設定され、受信側キューマネージャーがキューへのアクセス権を持っているかどうかを確認するために使用されます。  
  
 送信側 ID が存在しない場合は、メッセージキューがメッセージの送信者を検証したり、受信キューへの送信者のアクセス権を確認したりする必要がないことを、送信元のアプリケーションによって示されます。 は<xref:System.Messaging.Message.SenderId%2A> 、メッセージが送信先キューに到達したときに認証された場合にのみ信頼できます。 キューが認証済みメッセージのみを<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>受け入れる場合、 <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>またはプロパティが`false`である場合、メッセージは送信先キューに到達すると拒否されます。  
  
> [!CAUTION]
>  メッセージが拒否された場合は、配信不能キューに送信されるか ( <xref:System.Messaging.Message.UseDeadLetterQueue%2A>が`true`の場合)、または無視されます。 メッセージがキューに届かない場合は、受信確認を要求できます。 それ以外の<xref:System.Messaging.Message.UseDeadLetterQueue%2A>場合`false` 、がの場合、警告が表示されずにメッセージが失われる可能性があります。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.AttachSenderId%2A>プロパティの値を取得して設定します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.AttachSenderId" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.SenderId" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.HashAlgorithm" />
        <altmember cref="P:System.Messaging.Message.SenderCertificate" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
      </Docs>
    </Member>
    <Member MemberName="Authenticated">
      <MemberSignature Language="C#" Value="public bool Authenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticated" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Authenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Authenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Authenticated : bool" Usage="System.Messaging.Message.Authenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgAuthenticated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージが認証されたかどうかを示す値を取得します。</summary>
        <value>メッセージがキューに格納されたときにメッセージの認証が要求された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.Authenticated%2A>プロパティは、アプリケーションがメッセージを操作していて、認証が要求されたかどうかを判断しようとしているときにのみ使用されます。 メッセージがキューにある場合、メッセージは認証されています。 逆に、 <xref:System.Messaging.Message.Authenticated%2A>プロパティが`true`の場合、受信側キューマネージャーは、メッセージを受信したときにメッセージを認証します。  
  
 メッセージのプロパティを確認することによって、メッセージの認証に失敗したかどうかを判断することはできません。 メッセージキューは、メッセージがキューに配信される前に、認証に失敗したメッセージを破棄します。 ただし、配信エラーによってメッセージがキューに到着しない場合は、受信確認メッセージを送信するように要求できます。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.Authenticated%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Authenticated" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationProviderName">
      <MemberSignature Language="C#" Value="public string AuthenticationProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AuthenticationProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AuthenticationProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AuthenticationProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationProviderName : string with get, set" Usage="System.Messaging.Message.AuthenticationProviderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgAuthenticationProviderName")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージのデジタル署名を生成するのに使われる暗号化プロバイダーの名前を取得または設定します。</summary>
        <value>メッセージのデジタル署名を生成するのに使われる暗号化プロバイダーの名前。 既定値は Microsoft ベース暗号化プロバイダー Version 1.0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 外部キューを操作<xref:System.Messaging.Message.AuthenticationProviderName%2A>する場合は、通常、を使用します。 メッセージキューでは、外部キューに送信されたメッセージとメッセージに渡されたメッセージの両方のデジタル署名を検証するために、暗号化サービスプロバイダー (認証プロバイダー) の認証プロバイダー名と認証プロバイダーの種類が必要です。外部キューからのキュー。  
  
 メッセージを送信する場合は、常<xref:System.Messaging.Message.AuthenticationProviderName%2A>に<xref:System.Messaging.Message.ConnectorType%2A>プロパティとプロパティを一緒に設定します。 メッセージが送信されると、コネクタの種類も設定されていない場合、メッセージキューは認証プロバイダーの名前を無視します。  
  
 プロパティをにする`null`ことはできませんが、空の文字列 ("") を指定することはできます。 <xref:System.Messaging.Message.AuthenticationProviderName%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.Message.AuthenticationProviderName" /> プロパティを設定できませんでした。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.AuthenticationProviderName" /> プロパティを無視します。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Messaging.Message.AuthenticationProviderName" /> が <see langword="null" /> に設定されました。</exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationProviderType">
      <MemberSignature Language="C#" Value="public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.CryptographicProviderType AuthenticationProviderType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AuthenticationProviderType" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationProviderType As CryptographicProviderType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::CryptographicProviderType AuthenticationProviderType { System::Messaging::CryptographicProviderType get(); void set(System::Messaging::CryptographicProviderType value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationProviderType : System.Messaging.CryptographicProviderType with get, set" Usage="System.Messaging.Message.AuthenticationProviderType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgAuthenticationProviderType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.CryptographicProviderType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージのデジタル署名を生成するのに使われる暗号化プロバイダーの種類を取得または設定します。</summary>
        <value><see cref="T:System.Messaging.CryptographicProviderType" /> 値のいずれか。 既定値は、<see langword="RSA_FULL" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、外部キュー <xref:System.Messaging.Message.AuthenticationProviderType%2A>を操作するときは、プロパティを使用して、メッセージに関連付けられている暗号化サービスプロバイダーを指定します。 メッセージキューでは、外部キューに送信されたメッセージとメッセージに渡されたメッセージの両方のデジタル署名を検証するために、暗号化サービスプロバイダー (認証プロバイダー) の認証プロバイダー名と認証プロバイダーの種類が必要です。外部キューからのキュー。  
  
 は`RsaFull` 、メッセージングでの使用のみを目的としています。  
  
 メッセージを送信する場合は、常<xref:System.Messaging.Message.AuthenticationProviderType%2A>に<xref:System.Messaging.Message.ConnectorType%2A>プロパティとプロパティを一緒に設定します。 メッセージが送信されると、コネクタの種類も設定されていない場合、メッセージキューは認証プロバイダーの種類を無視します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.Message.AuthenticationProviderType" /> プロパティを設定できませんでした。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.AuthenticationProviderType" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="T:System.Messaging.CryptographicProviderType" />
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public object Body { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Body" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Body" />
      <MemberSignature Language="VB.NET" Value="Public Property Body As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Body { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Body : obj with get, set" Usage="System.Messaging.Message.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージの内容を取得または設定します。</summary>
        <value>メッセージの内容を指定するオブジェクト。 オブジェクトとして使用できるのは、文字列、日付、通貨、数値、バイト配列、または任意のマネージド オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージの<xref:System.Messaging.Message.Body%2A>プロパティには、通常、メッセージに関連付けられたデータが含まれます。 プロパティ<xref:System.Messaging.Message.AppSpecific%2A> <xref:System.Messaging.Message.Body%2A>と<xref:System.Messaging.Message.Extension%2A>プロパティでアプリケーション固有のデータを送信することもできますが、可能な場合は、メッセージのにメッセージデータを含める必要があります。 プロパティの<xref:System.Messaging.Message.Body%2A>内容のみがシリアル化または暗号化されます。  
  
 プロパティ<xref:System.Messaging.Message.Body%2A>には、サイズが 4 MB を超えない任意のオブジェクトを含めることができます。 を使用<xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType>して型<xref:System.Messaging.MessageQueue.Peek%2A> <xref:System.Messaging.MessageQueue.Receive%2A> <xref:System.Messaging.MessageQueue> <xref:System.Messaging.Message>ではないオブジェクトをに送信すると<xref:System.Messaging.Message.Body%2A> 、そのオブジェクトはまたはによって返され<xref:System.Messaging.Message>たインスタンスのプロパティに配置されます。  
  
 の`MessageQueue.Send("hello.")`文字列引数は、このような汎用オブジェクトの例です。  
  
 プロパティ<xref:System.Messaging.Message.BodyType%2A>は、メッセージ本文に格納されている情報の種類を示します。 メッセージキューは、 <xref:System.Messaging.Message.Body%2A>この情報を使用してプロパティの内容の種類を識別します。  
  
 オブジェクトを<xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.BodyStream%2A> 送信する前に、プロパティまたはプロパティのいずれかを指定<xref:System.Messaging.Message>してください。 プロパティ<xref:System.Messaging.Message.Body%2A>には、テキスト文字列、構造体オブジェクト、クラスインスタンス、または埋め込みオブジェクトなど、任意のシリアル化可能なオブジェクトを指定できます。  
  
 メッセージの内容を<xref:System.Messaging.Message.BodyStream%2A>プロパティに直接書き込む場合を除き、メッセージを送信する前に<xref:System.Messaging.Message.Formatter%2A>プロパティを設定します。 インスタンスでメソッドが呼び出されると、 <xref:System.Messaging.Message.Formatter%2A>プロパティに格納されているフォーマッタを使用して本文がシリアル化されます。 <xref:System.Messaging.MessageQueue.Send%2A> <xref:System.Messaging.MessageQueue> <xref:System.Messaging.Message.Formatter%2A>プロパティの値を指定せずにメッセージを送信した場合、フォーマッタは<xref:System.Messaging.XmlMessageFormatter>既定でに設定されます。  
  
> [!NOTE]
>  メッセージの本文を<xref:System.Decimal.MaxValue>に設定しようとすると、 <xref:System.OverflowException> <xref:System.Messaging.MessageQueue>クラスの`Send`メソッドが呼び出され、 <xref:System.Messaging.ActiveXMessageFormatter>が使用されると、が発生します。  
  
   
  
## Examples  
 次のコード例では、異なる優先順位の2つのメッセージをキューに送信し、それらを後で取得します。  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.Message.Formatter" /> プロパティが <see langword="null" /> である。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Body" /> プロパティを無視します。</exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.BodyStream" />
        <altmember cref="P:System.Messaging.Message.BodyType" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BodyStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BodyStream { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BodyStream" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.BodyStream" />
      <MemberSignature Language="VB.NET" Value="Public Property BodyStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ BodyStream { System::IO::Stream ^ get(); void set(System::IO::Stream ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BodyStream : System.IO.Stream with get, set" Usage="System.Messaging.Message.BodyStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgBodyStream")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージの本文の情報を取得または設定します。</summary>
        <value>メッセージの <see cref="T:System.IO.Stream" /> に含まれるシリアル化された情報を格納する <see cref="P:System.Messaging.Message.Body" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージの本文は、文字列、日付、通貨、数値、バイト配列、または任意のマネージオブジェクトなど、任意の種類の情報で構成されます。 この情報は、 <xref:System.IO.Stream>キューに渡されるためににシリアル化されます。  
  
 オブジェクトを<xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.BodyStream%2A> 送信する前に、プロパティまたはプロパティのいずれかを指定<xref:System.Messaging.Message>してください。 <xref:System.Messaging.Message.Body%2A>プロパティを設定すると、コンテンツは<xref:System.Messaging.Message.BodyStream%2A>プロパティにシリアル化されます。 ただし、 <xref:System.Messaging.Message.BodyStream%2A>プロパティを直接作成することもできます。 これは、ファイルへの接続を開いて、その内容をメッセージの本文としてストリームする場合などに便利です。  
  
 メッセージの内容を<xref:System.Messaging.Message.BodyStream%2A>プロパティに直接書き込む場合を除き、メッセージを送信する前に<xref:System.Messaging.Message.Formatter%2A>プロパティを設定します。 インスタンスでメソッドが呼び出されると、 <xref:System.Messaging.Message.Formatter%2A>プロパティに格納されているフォーマッタを使用して本文がシリアル化されます。 <xref:System.Messaging.MessageQueue.Send%2A> <xref:System.Messaging.MessageQueue> <xref:System.Messaging.Message.Formatter%2A>プロパティの値を指定せずにメッセージを送信した場合、フォーマッタは<xref:System.Messaging.XmlMessageFormatter>既定でに設定されます。  
  
 このメッセージの本文<xref:System.Messaging.Message.UseEncryption%2A>に対し`true`てプロパティをに設定すると、メッセージは送信時に暗号化され、 <xref:System.Messaging.Message.Body%2A>プロパティを設定したときには暗号化されません。 したがって、 <xref:System.Messaging.Message.BodyStream%2A>プロパティは暗号化されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Body" /> プロパティを無視します。</exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="P:System.Messaging.Message.BodyType" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BodyType">
      <MemberSignature Language="C#" Value="public int BodyType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BodyType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.BodyType" />
      <MemberSignature Language="VB.NET" Value="Public Property BodyType As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BodyType { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BodyType : int with get, set" Usage="System.Messaging.Message.BodyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgBodyType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージ本文に含まれるデータ型を取得または設定します。</summary>
        <value>文字列、日付、通貨、数値など、メッセージ本文の実際の型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージキューは、本文の内容をオブジェクトまたはシリアル化されたストリームとして認識します。 プロパティ<xref:System.Messaging.Message.BodyType%2A>は、メッセージの<xref:System.Messaging.Message.Body%2A>プロパティ内のオブジェクトの型を示します。  
  
 は<xref:System.Messaging.XmlMessageFormatter> 、ネイティブ型とメッセージ本文内のオブジェクトとの間のバインドを実行します。 を使用<xref:System.Messaging.XmlMessageFormatter>すると、フォーマッタによって<xref:System.Messaging.Message.BodyType%2A>プロパティが設定されます。  
  
 他のフォーマッタは、次C#のコードに示すように、バインド機能も提供できます。  
  
```  
message.Formatter = new ActiveXMessageFormatter();  
object myObject message.Body;  
if (myObject is string) {  
}  
if (myObject is int) {  
}  
if (myObject is float) {  
}  
```  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.BodyType%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Body" /> プロパティを無視します。</exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="P:System.Messaging.Message.BodyStream" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConnectorType">
      <MemberSignature Language="C#" Value="public Guid ConnectorType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ConnectorType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ConnectorType" />
      <MemberSignature Language="VB.NET" Value="Public Property ConnectorType As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid ConnectorType { Guid get(); void set(Guid value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorType : Guid with get, set" Usage="System.Messaging.Message.ConnectorType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgConnectorType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通常ではメッセージ キューによって設定されるメッセージ プロパティが、実際には送信元アプリケーションによって設定されたことを示す値を取得または設定します。</summary>
        <value>アプリケーションによって定義され、コネクタ アプリケーションまたはメッセージ暗号方式と共に使われる <see cref="T:System.Guid" />。 この <see cref="T:System.Guid" /> を使うと、受信側アプリケーションは、通常はメッセージ キューによって設定されますが、実際には送信元アプリケーションによって設定されたメッセージ プロパティを解釈できます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージキューでは<xref:System.Messaging.Message.ConnectorType%2A> 、通常、メッセージキューによって設定されるメッセージプロパティがアプリケーションによって設定されるたびに、プロパティを設定する必要があります。 アプリケーションでは、通常<xref:System.Messaging.Message.ConnectorType%2A> 、次の2つの場合にを使用します。  
  
-   コネクタアプリケーションがメッセージを渡すたびに。 は<xref:System.Messaging.Message.ConnectorType%2A> 、メッセージのセキュリティと受信確認のプロパティを解釈する方法を、送信側と受信側のアプリケーションに指示します。  
  
-   メッセージキューではなく、送信元のアプリケーションがメッセージを暗号化する場合。 は<xref:System.Messaging.Message.ConnectorType%2A> 、 <xref:System.Messaging.Message.DestinationSymmetricKey%2A>プロパティ値を使用してメッセージを復号化するようにメッセージキューに指示します。  
  
 次のいずれか<xref:System.Messaging.Message.ConnectorType%2A>のプロパティを設定する場合は、プロパティを設定する必要があります (それ以外の場合、メッセージが送信されると、キューはこれらのプロパティを無視します)。  
  
-   <xref:System.Messaging.Message.AuthenticationProviderName%2A>  
  
-   <xref:System.Messaging.Message.AuthenticationProviderType%2A>  
  
-   <xref:System.Messaging.Message.DestinationSymmetricKey%2A>  
  
-   <xref:System.Messaging.Message.DigitalSignature%2A>  
  
-   <xref:System.Messaging.Message.MessageType%2A>  
  
-   <xref:System.Messaging.Message.SenderId%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.ConnectorType" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.DestinationSymmetricKey" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.Message.MessageType" />
        <altmember cref="P:System.Messaging.Message.SenderId" />
      </Docs>
    </Member>
    <Member MemberName="CorrelationId">
      <MemberSignature Language="C#" Value="public string CorrelationId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CorrelationId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.CorrelationId" />
      <MemberSignature Language="VB.NET" Value="Public Property CorrelationId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CorrelationId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CorrelationId : string with get, set" Usage="System.Messaging.Message.CorrelationId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgCorrelationId")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>元のメッセージを参照するために、受信確認メッセージ、レポート メッセージ、応答メッセージによって使われるメッセージ ID を取得または設定します。</summary>
        <value>元のメッセージの <see cref="P:System.Messaging.Message.Id" /> プロパティによって指定されるメッセージ ID。 相関関係 ID は、メッセージ キューが受信確認メッセージまたはレポート メッセージを生成するときにメッセージ キューによって、またアプリケーションが応答メッセージを生成するときにアプリケーションによってそれぞれ使用されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージキューは、受信確認メッセージまたはレポートメッセージを生成するときに、"関連付け識別子" プロパティを使用して、元のメッセージのメッセージ id を指定します。 その結果、相関 ID によってレポート メッセージまたは受信確認メッセージが、元のメッセージに結び付けられます。  
  
 送信側アプリケーションは、 <xref:System.Messaging.Message.CorrelationId%2A>プロパティを使用して元のメッセージの<xref:System.Messaging.Message.Id%2A>プロパティを識別することで、受信確認またはレポートを元のメッセージと一致させることができます。  
  
 コネクタアプリケーションでは、受信<xref:System.Messaging.Message.CorrelationId%2A>確認メッセージとレポートメッセージのプロパティを元のメッセージのメッセージ識別子に設定する必要もあります。  
  
 アプリケーションから送信側アプリケーションに応答メッセージを送信するときに、応答メッセージ<xref:System.Messaging.Message.CorrelationId%2A>のプロパティを元のメッセージのメッセージ識別子に設定できます。 送信側アプリケーションは、送信されたメッセージに応答メッセージを照合できます。  
  
   
  
## Examples  
 次のコード例では、キューとの間で注文を含むメッセージを送受信します。 これは、元のメッセージがキューに到達するか、キューから取得されるときに肯定受信確認を要求します。  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.CorrelationId" /> プロパティを無視します。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Messaging.Message.CorrelationId" /> が <see langword="null" /> です。</exception>
        <altmember cref="P:System.Messaging.Message.Id" />
        <altmember cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DestinationQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue DestinationQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue DestinationQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DestinationQueue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DestinationQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ DestinationQueue { System::Messaging::MessageQueue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DestinationQueue : System.Messaging.MessageQueue" Usage="System.Messaging.Message.DestinationQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgDestinationQueue")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージの目的の送信先キューを取得します。</summary>
        <value>メッセージの送信先キューを指定する <see cref="T:System.Messaging.MessageQueue" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.DestinationQueue%2A>は、通常、ジャーナルまたは配信不能キューに到着したメッセージの元の送信先を決定するために使用されます。 通常は、送信先キューからメッセージを取得するので、このプロパティを調べる必要はありません。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.DestinationQueue%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.DestinationQueue" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
      </Docs>
    </Member>
    <Member MemberName="DestinationSymmetricKey">
      <MemberSignature Language="C#" Value="public byte[] DestinationSymmetricKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] DestinationSymmetricKey" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DestinationSymmetricKey" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationSymmetricKey As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ DestinationSymmetricKey { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationSymmetricKey : byte[] with get, set" Usage="System.Messaging.Message.DestinationSymmetricKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgDestinationSymmetricKey")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションによって暗号化されるメッセージ、または外部キューに送信されるメッセージを暗号化するために使用する対称キーを取得または設定します。</summary>
        <value>メッセージを暗号化するために使用される送信先対称キーを指定するバイト値配列。 既定値は長さ 0 の配列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2つのシナリオでは、 <xref:System.Messaging.Message.DestinationSymmetricKey%2A>プロパティを使用する必要があります。 1つ目は、メッセージキューではなく、アプリケーションがメッセージを暗号化する場合です。 2つ目は、メッセージキュー以外のキューシステムに暗号化されたメッセージを送信する場合です。  
  
 このプロパティを設定する前に、受信側キューマネージャーの公開キーを使用して対称キーを暗号化する必要があります。 アプリケーションで暗号化されたメッセージを送信すると、受信側キューマネージャーは、メッセージを送信先キューに送信する前に、対称キーを使用してメッセージの暗号化を解除します。  
  
 メッセージを外部キューに送信する場合、メッセージは、適切なコネクタアプリケーションによって最初に受信されます。このアプリケーションは、暗号化されたメッセージを、添付された対称キーと共に受信側のアプリケーションに転送します。 次に、受信側アプリケーションで、対称キーを使用してメッセージを復号化する必要があります。  
  
 <xref:System.Messaging.Message.DestinationSymmetricKey%2A>プロパティを設定する場合は、 <xref:System.Messaging.Message.ConnectorType%2A>プロパティも設定する必要があります。 メッセージが送信されると、 <xref:System.Messaging.Message.DestinationSymmetricKey%2A> <xref:System.Messaging.Message.ConnectorType%2A>プロパティが設定されていない場合、メッセージキューはプロパティを無視します。  
  
 プロパティ<xref:System.Messaging.Message.DestinationSymmetricKey%2A>の最大配列サイズは256です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> プロパティを無視します。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> が <see langword="null" /> です。</exception>
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
      </Docs>
    </Member>
    <Member MemberName="DigitalSignature">
      <MemberSignature Language="C#" Value="public byte[] DigitalSignature { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] DigitalSignature" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DigitalSignature" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitalSignature As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ DigitalSignature { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DigitalSignature : byte[] with get, set" Usage="System.Messaging.Message.DigitalSignature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgDigitalSignature")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージ キューがメッセージの認証に使用するデジタル署名を取得または設定します。</summary>
        <value>メッセージを認証するのに使われるメッセージ キュー 1.0 デジタル署名を指定するバイト値配列。 既定値は長さ 0 の配列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージキューは、メッセージキューバージョン1.0 によって送信されたメッセージを認証するときに、デジタル署名を使用します。 ほとんどの場合、送信元アプリケーションが認証を<xref:System.Messaging.Message.DigitalSignature%2A>要求したときに、メッセージキューによってプロパティが生成され、設定されます。 受信側のアプリケーションは、このプロパティを使用して、メッセージに添付されているデジタル署名を取得します。  
  
 メッセージキューバージョン2.0 を<xref:System.Messaging.Message.DigitalSignature%2A>実行している場合にのみ、プロパティを使用できます。 送信側アプリケーションでは、認証を要求するときに、メッセージキューバージョン1.0 署名を指定する必要があります。 送信元のアプリケーションがメッセージキューバージョン2.0 の署名を送信する場合、このプロパティには、それぞれ0を含む4バイトのバッファーが含まれます。  
  
 プロパティは、 <xref:System.Messaging.Message.SenderCertificate%2A>プロパティと共に、メッセージが送信されるときにコネクタアプリケーションによっても使用されます。 <xref:System.Messaging.Message.DigitalSignature%2A> このシナリオでは、メッセージキューではなくコネクタアプリケーションによってデジタル署名が生成されます。デジタル署名は、メッセージを送信するユーザーの証明書に基づいています。  
  
 プロパティ<xref:System.Messaging.Message.DigitalSignature%2A>の最大配列サイズは256です。  
  
 <xref:System.Messaging.Message.DigitalSignature%2A>プロパティを設定する場合は、 <xref:System.Messaging.Message.ConnectorType%2A>プロパティも設定する必要があります。 メッセージが送信されると、 <xref:System.Messaging.Message.DigitalSignature%2A> <xref:System.Messaging.Message.ConnectorType%2A>プロパティが設定されていない場合、メッセージキューはプロパティを無視します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.DigitalSignature" /> プロパティを無視します。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Messaging.Message.DigitalSignature" /> プロパティが <see langword="null" /> である。</exception>
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.SenderCertificate" />
        <altmember cref="P:System.Messaging.Message.HashAlgorithm" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
      </Docs>
    </Member>
    <Member MemberName="EncryptionAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionAlgorithm EncryptionAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.EncryptionAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionAlgorithm As EncryptionAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionAlgorithm EncryptionAlgorithm { System::Messaging::EncryptionAlgorithm get(); void set(System::Messaging::EncryptionAlgorithm value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptionAlgorithm : System.Messaging.EncryptionAlgorithm with get, set" Usage="System.Messaging.Message.EncryptionAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgEncryptionAlgorithm")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プライベート メッセージの本文を暗号化するのに使われる暗号化アルゴリズムを取得または設定します。</summary>
        <value><see cref="T:System.Messaging.EncryptionAlgorithm" /> 列挙値のいずれか。 既定値は、<see langword="RC2" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージがプライベート (暗号化) されている場合、メッセージは、受信時に送信および復号化される前に暗号化されます。 プロパティ<xref:System.Messaging.Message.EncryptionAlgorithm%2A>は、プライベートメッセージのメッセージ本文を暗号化するために使用されるアルゴリズムを指定します。  
  
 キューでは、受信メッセージを暗号化することが必要になる場合があります。 アプリケーションが、プライベートメッセージだけを受け入れるキューに暗号化されていない (非公開の) メッセージを送信する場合、またはプライベートメッセージのみを受け入れるキューにプライベートメッセージを送信する場合、キューはそのメッセージを拒否します。 送信側アプリケーションは、このような場合に否定受信確認メッセージを返すように要求できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.EncryptionAlgorithm" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="T:System.Messaging.EncryptionRequired" />
      </Docs>
    </Member>
    <Member MemberName="Extension">
      <MemberSignature Language="C#" Value="public byte[] Extension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Extension" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Extension" />
      <MemberSignature Language="VB.NET" Value="Public Property Extension As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Extension { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Extension : byte[] with get, set" Usage="System.Messaging.Message.Extension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgExtension")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージに関連付けられているアプリケーション定義の追加情報を取得または設定します。</summary>
        <value>メッセージに関連付けられているアプリケーション定義の情報を提供するバイト値配列。 既定値は長さ 0 の配列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.Extension%2A>は、メッセージに関連付けられている、大きなバイナリオブジェクトのようなアプリケーション定義の情報を提供します。 受信側アプリケーションは、 <xref:System.Messaging.Message.Extension%2A>プロパティの内容を解釈する役割を担います。  
  
 可能であれば、 <xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.Extension%2A>プロパティではなく、メッセージのプロパティにメッセージデータを含める必要があります。  
  
 外部キューを使用する場合は、 <xref:System.Messaging.Message.Extension%2A>プロパティを使用して、メッセージキューに存在しないメッセージプロパティを指定します。  
  
 外部キューが Microsoft Message Queuing 以外のキューシステムに存在します。 メッセージキューは、コネクタアプリケーションを介してこのようなキューと通信します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Extension" /> プロパティを無視します。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Messaging.Message.Extension" /> プロパティが <see langword="null" /> である。</exception>
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Body" />
      </Docs>
    </Member>
    <Member MemberName="Formatter">
      <MemberSignature Language="C#" Value="public System.Messaging.IMessageFormatter Formatter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.IMessageFormatter Formatter" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Formatter" />
      <MemberSignature Language="VB.NET" Value="Public Property Formatter As IMessageFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::IMessageFormatter ^ Formatter { System::Messaging::IMessageFormatter ^ get(); void set(System::Messaging::IMessageFormatter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Formatter : System.Messaging.IMessageFormatter with get, set" Usage="System.Messaging.Message.Formatter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.IMessageFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトをメッセージ本文にシリアル化する、またはメッセージ本文からオブジェクトを逆シリアル化するのに使用する書式指定子を取得または設定します。</summary>
        <value>メッセージ本文に書き込むストリーム、またはメッセージ本文から読み取るストリームを生成する <see cref="T:System.Messaging.IMessageFormatter" />。 既定値は、<see cref="T:System.Messaging.XmlMessageFormatter" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージの<xref:System.Messaging.Message.Formatter%2A>読み取りと書き込みを行う場合は、プロパティを使用します。 メッセージがキューに送信されると、フォーマッタは、メッセージ<xref:System.Messaging.Message.Body%2A>キューに送信できるストリームにプロパティをシリアル化します。 フォーマッタは、キューから読み取るときに、メッセージデータを<xref:System.Messaging.Message.Body%2A>プロパティに逆シリアル化します。  
  
 メッセージの内容を<xref:System.Messaging.Message.BodyStream%2A>プロパティに直接書き込む場合を除き、メッセージを送信する前に<xref:System.Messaging.Message.Formatter%2A>プロパティを設定します。 インスタンスでメソッドが呼び出されると、 <xref:System.Messaging.Message.Formatter%2A>プロパティに格納されているフォーマッタを使用して本文がシリアル化されます。 <xref:System.Messaging.MessageQueue.Send%2A> <xref:System.Messaging.MessageQueue> <xref:System.Messaging.Message.Formatter%2A>プロパティの値を指定せずにメッセージを送信した場合、フォーマッタは<xref:System.Messaging.XmlMessageFormatter>既定でに設定されます。  
  
 <xref:System.Messaging.XmlMessageFormatter>は疎結合であるため、この形式を使用する場合、送信側と受信側で同じオブジェクト型を使用する必要はありません。 <xref:System.Messaging.ActiveXMessageFormatter> と<xref:System.Messaging.BinaryMessageFormatter>は、データをバイナリ表現にシリアル化します。 は<xref:System.Messaging.ActiveXMessageFormatter> 、COM コンポーネントを送受信するときに使用されます。  
  
   
  
## Examples  
 次のコード例は、を使用して<xref:System.Messaging.BinaryMessageFormatter>メッセージ本文を書式設定する方法を示しています。  
  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 次のコード例は、を使用して<xref:System.Messaging.XmlMessageFormatter>メッセージ本文を書式設定する方法を示しています。  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Messaging.Message.Formatter" /> プロパティが <see langword="null" /> である。</exception>
        <altmember cref="M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="P:System.Messaging.MessageQueue.Formatter" />
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.HashAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As HashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::HashAlgorithm HashAlgorithm { System::Messaging::HashAlgorithm get(); void set(System::Messaging::HashAlgorithm value); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Messaging.HashAlgorithm with get, set" Usage="System.Messaging.Message.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgHashAlgorithm")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ハッシュ アルゴリズムを取得または設定します。メッセージ キューは、メッセージを認証するとき、またはメッセージのデジタル署名を作成するときに、ハッシュ アルゴリズムを使用します。</summary>
        <value><see cref="T:System.Messaging.HashAlgorithm" /> 列挙値のいずれか。 Windows XP の場合、既定値は <see langword="SHA" /> です。 それ以外の場合、既定値は <see langword="MD5" /> になります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソースコンピューターでは、メッセージキューは、メッセージのデジタル署名を作成するときにハッシュアルゴリズムを使用します。 その後、ターゲットキューマネージャーは、受信時にメッセージを認証するために同じハッシュアルゴリズムを使用します。  

 MD5 と SHA1 の衝突の問題により、Microsoft は SHA256 を推奨しています。 
 
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.HashAlgorithm" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="T:System.Messaging.HashAlgorithm" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.Messaging.Message.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgId")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージの ID を取得します。</summary>
        <value>メッセージの一意識別子。メッセージ キューによって生成されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージキューは、メッセージが送信されるときにメッセージ識別子を生成します。 この識別子は20バイトで構成され、送信元コンピューター <xref:System.Guid>のコンピューターと、コンピューター上のメッセージの一意の識別子の2つの項目が含まれています。 この 2 つの項目の組み合わせにより、ネットワーク上で一意のメッセージ ID が生成されます。  
  
 メッセージキューは、受信確認メッセージとレポートメッセージを含む、すべてのメッセージのメッセージ識別子を生成します。 通常、受信確認メッセージは、送信された元のメッセージの到着または失敗に反応して、メッセージキューによって送信されます。 元のメッセージの<xref:System.Messaging.Message.Id%2A>プロパティ値は、受信確認メッセージの<xref:System.Messaging.Message.CorrelationId%2A>プロパティで確認できます。  
  
 応答キューに応答メッセージ<xref:System.Messaging.Message.Id%2A>を送信するときに、プロパティを使用することもできます。 元のメッセージの識別子を応答メッセージに含めるには、応答メッセージ<xref:System.Messaging.Message.CorrelationId%2A>のプロパティ<xref:System.Messaging.Message.Id%2A>を元のメッセージのプロパティに設定します。 応答メッセージを読み取るアプリケーションは、応答メッセージの関連付け識別子を使用して元のメッセージを識別できます。  
  
   
  
## Examples  
 次のコード例では、キューとの間で注文を含むメッセージを送受信します。 これは、元のメッセージがキューに到達するか、キューから取得されるときに肯定受信確認を要求します。  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
- または - 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Id" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.CorrelationId" />
      </Docs>
    </Member>
    <Member MemberName="InfiniteTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Messaging.Message.InfiniteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteTimeout;" />
      <MemberSignature Language="F#" Value=" staticval mutable InfiniteTimeout : TimeSpan" Usage="System.Messaging.Message.InfiniteTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイムアウトが存在しないことを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.TimeToBeReceived%2A>および<xref:System.Messaging.Message.TimeToReachQueue%2A>には、タイムアウトを指定する値が必要です。前者の場合、タイムアウトとは、キューからメッセージを受信するために許容される最大時間のことです。 後者の場合、タイムアウトはメッセージがキューに到着するまでに許容される時間です。 どちらの場合も、タイムアウトを秒数で指定するか、を使用<xref:System.Messaging.Message.InfiniteTimeout>してタイムアウトが存在しないことを示すことができます。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Messaging.Message.InfiniteTimeout>フィールドの使用方法を示しています。  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
        <altmember cref="P:System.Messaging.Message.TimeToReachQueue" />
      </Docs>
    </Member>
    <Member MemberName="IsFirstInTransaction">
      <MemberSignature Language="C#" Value="public bool IsFirstInTransaction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFirstInTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.IsFirstInTransaction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFirstInTransaction As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFirstInTransaction { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFirstInTransaction : bool" Usage="System.Messaging.Message.IsFirstInTransaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgIsFirstInTransaction")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>そのメッセージがトランザクションで送信された最初のメッセージかどうかを示す値を取得します。</summary>
        <value>そのメッセージがトランザクションで送信された最初のメッセージである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 受信アプリケーションでは<xref:System.Messaging.Message.IsFirstInTransaction%2A> 、プロパティを使用して、1つのトランザクションで1つのキューに送信された最初のメッセージがメッセージであることを確認します。  
  
 このプロパティは、メッセージキューバージョン2.0 以降でのみ使用できます。  
  
 トランザクションの境界を確認するには、 <xref:System.Messaging.Message.IsFirstInTransaction%2A>プロパティと、他の2つ<xref:System.Messaging.Message.IsLastInTransaction%2A>の<xref:System.Messaging.Message.TransactionId%2A>プロパティ (および) を使用します。 前のを使用して、メッセージがトランザクションで最後に送信されたメッセージであるかどうかを確認し、後者を使用してトランザクションの識別子を取得します。  
  
 トランザクションで送信されるメッセージが1つだけの<xref:System.Messaging.Message.IsFirstInTransaction%2A>場合<xref:System.Messaging.Message.IsLastInTransaction%2A> 、プロパティとプロパティは`true`両方ともに設定されます。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.IsFirstInTransaction%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.IsFirstInTransaction" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="IsLastInTransaction">
      <MemberSignature Language="C#" Value="public bool IsLastInTransaction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLastInTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.IsLastInTransaction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLastInTransaction As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLastInTransaction { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLastInTransaction : bool" Usage="System.Messaging.Message.IsLastInTransaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgIsLastInTransaction")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージがトランザクションで送信された最後のメッセージかどうかを示す値を取得します。</summary>
        <value>そのメッセージがトランザクションで送信された最後のメッセージである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 受信側のアプリケーション<xref:System.Messaging.Message.IsLastInTransaction%2A>では、プロパティを使用して、1つのトランザクションで1つのキューに送信された最後のメッセージがメッセージであることを確認します。  
  
 このプロパティは、メッセージキューバージョン2.0 以降でのみ使用できます。  
  
 トランザクションの境界を確認するには、 <xref:System.Messaging.Message.IsLastInTransaction%2A>プロパティと、他の2つ<xref:System.Messaging.Message.IsFirstInTransaction%2A>の<xref:System.Messaging.Message.TransactionId%2A>プロパティ (および) を使用します。 前のを使用して、メッセージがトランザクションで最初に送信されたメッセージであるかどうかを確認し、後者を使用してトランザクションの識別子を取得します。  
  
 トランザクションで送信されるメッセージが1つだけの<xref:System.Messaging.Message.IsFirstInTransaction%2A>場合<xref:System.Messaging.Message.IsLastInTransaction%2A> 、プロパティとプロパティは`true`両方ともに設定されます。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.IsLastInTransaction%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.IsLastInTransaction" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="System.Messaging.Message.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgLabel")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージを記述するアプリケーション定義の Unicode 文字列を取得または設定します。</summary>
        <value>メッセージのラベル。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージ ラベルを使用する目的はいくつか考えられます。 メッセージ ラベルは、表示目的で使用できます。たとえば、ラベルの値に基づいてメッセージを選択的に処理するために使用できます。 ラベルは、メッセージ全体で一意である必要はありません。  
  
 メッセージ キュー ラベルとメッセージ ラベルは、アプリケーション定義の値を表します。これらのラベルは、ユーザーの判読できる単語などを使用して、キューやメッセージを識別するのに便利です。 メッセージキューアプリケーションに固有の意味を持たないラベルの内容を解釈するのは、アプリケーションの役割です。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.Label%2A>プロパティの値を取得して設定します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Label" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
      </Docs>
    </Member>
    <Member MemberName="LookupId">
      <MemberSignature Language="C#" Value="public long LookupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LookupId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.LookupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LookupId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LookupId { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LookupId : int64" Usage="System.Messaging.Message.LookupId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>MSMQ 3.0 で導入されました。 メッセージの参照識別子を取得します。</summary>
        <value>メッセージ キューによって生成され、そのメッセージが存在するキューに対して一意であるメッセージの参照識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.LookupId%2A>は、メッセージの参照識別子への読み取り専用アクセスを提供します。 MSMQ 3.0 で導入された参照識別子は64ビット識別子であり、メッセージキューによって生成され、メッセージがキューに置かれたときに各メッセージに割り当てられます。 参照識別子は、メッセージの送信時に生成されるメッセージ id と同じではありません。  
  
 メッセージキューは、アプリケーションによって生成される送信先、管理、およびレポートキューのほか、システムによって生成されたジャーナル、配信不能、コネクタ、発信キューなど、任意のキューに配置されるすべてのメッセージの参照識別子を生成します。 つまり、アプリケーションの送信とメッセージキューの両方によって送信されたメッセージの両方が含まれます。 参照識別子はキューに対して一意であり、キューの外部には意味がありません。  
  
 複数の送信先キューにメッセージが送信された場合、またはメッセージのコピーがコンピュータージャーナルまたはキュージャーナルに格納されている場合、メッセージの各コピーは、それぞれのキューに配置されるときに独自の参照識別子を持ちます。  
  
 プロパティ<xref:System.Messaging.Message.LookupId%2A>は、キューから取得したメッセージに対してのみ読み取ることができます。  
  
 参照識別子は、キュー内の特定のメッセージを読み取るために使用されます。 メッセージの参照識別子がわかったら、受信側のアプリケーションは、 <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>または<xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A>関数を呼び出してそのメッセージに直接アクセスし、キューの先頭から開始する必要があるカーソルとは異なり、キューからそのメッセージをピークまたは取得することができます。キューの末尾に移動します。  
  
 キュー内のメッセージの参照識別子を取得することは、アプリケーションの役割です。 参照識別子を取得する方法の1つとして、キューに配置された各メッセージの識別子をキャッシュするコンポーネントを呼び出す送信先キューのトリガーを作成する方法があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">MSMQ 3.0 がインストールされていません。</exception>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.LookupId" /> プロパティを無視します。</exception>
        <altmember cref="Overload:System.Messaging.MessageQueue.PeekByLookupId" />
        <altmember cref="Overload:System.Messaging.MessageQueue.ReceiveByLookupId" />
      </Docs>
    </Member>
    <Member MemberName="MessageType">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageType MessageType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageType MessageType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.MessageType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MessageType As MessageType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageType MessageType { System::Messaging::MessageType get(); };" />
      <MemberSignature Language="F#" Value="member this.MessageType : System.Messaging.MessageType" Usage="System.Messaging.Message.MessageType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgMessageType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージの種類 (<see langword="Normal" />、<see langword="Acknowledgment" />、または <see langword="Report" /> のいずれか) を取得します。</summary>
        <value><see cref="P:System.Messaging.Message.MessageType" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、メッセージキューは、メッセージを送信するときにこのプロパティを設定します。 メッセージ キューのメッセージには、次のタイプがあります。  
  
-   `Normal`。アプリケーションからキューに送信される一般的なメッセージ、または送信元アプリケーションに返される応答メッセージのいずれかです。  
  
-   `Acknowledgement`。送信元アプリケーションが要求するたびに、メッセージキューによって生成されます。 たとえば、メッセージ キューは、元のメッセージが到達したかまたは読み取られたことを示すために肯定受信確認メッセージまたは否定受信確認メッセージを生成できます。 メッセージ キューは、送信元アプリケーションによって指定される管理キューに適切な受信確認メッセージを返します。  
  
-   `Report`。ソースキューマネージャーでレポートキューが定義されるたびに、メッセージキューによって生成されます。 トレースが有効である場合、メッセージ キューは、メッセージ キュー サーバーで元のメッセージの入出力が発生するたびに、レポート メッセージをメッセージ キュー レポート キューに送信します。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.MessageType%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.MessageType" /> プロパティを無視します。</exception>
        <altmember cref="T:System.Messaging.MessageType" />
        <altmember cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Messaging.MessagePriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessagePriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As MessagePriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessagePriority Priority { System::Messaging::MessagePriority get(); void set(System::Messaging::MessagePriority value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : System.Messaging.MessagePriority with get, set" Usage="System.Messaging.Message.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgPriority")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessagePriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キュー内でのメッセージの格納場所を決定するのに使われる、メッセージの優先順位を取得または設定します。</summary>
        <value>非トランザクション メッセージの優先順位を表す <see cref="T:System.Messaging.MessagePriority" /> 値の 1 つ。 既定値は、<see langword="Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.Priority%2A>は、メッセージキューがルーティングされている間と送信先に到達したときの両方でメッセージを処理する方法に影響します。 優先順位の高いメッセージほど、送信中に優先権が与えられ、送信先キューの中の先頭近くに挿入されます。 優先順位の同じメッセージは、到達時刻に応じてキュー内に配置されます。  
  
 トランザクション以外のメッセージに対してのみ、意味のある優先順位を設定できます。 メッセージキューは、トランザクションメッセージの優先順位を`Lowest`に自動的に設定します。これにより、トランザクションメッセージの優先度が無視されます。  
  
   
  
## Examples  
 次のコード例では、異なる優先順位の2つのメッセージをキューに送信し、それらを後で取得します。  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Priority" /> プロパティを無視します。</exception>
        <altmember cref="T:System.Messaging.MessagePriority" />
        <altmember cref="P:System.Messaging.Message.MessageType" />
        <altmember cref="P:System.Messaging.MessageQueue.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="Recoverable">
      <MemberSignature Language="C#" Value="public bool Recoverable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Recoverable" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Recoverable" />
      <MemberSignature Language="VB.NET" Value="Public Property Recoverable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Recoverable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Recoverable : bool with get, set" Usage="System.Messaging.Message.Recoverable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgRecoverable")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンピューターの障害やネットワークの問題が発生したときにメッセージの配信が保証されるかどうかを示す値を取得または設定します。</summary>
        <value>送信中にメッセージをディスクに保存することによって配信が保証される場合は <see langword="true" />、配信が保証されない場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.Recoverable%2A>は、メッセージが送信先キューに送信されている間にコンピューターがクラッシュした場合でも、メッセージの配信を保証するかどうかを示します。  
  
 メッセージの配信が保証される場合、メッセージは、次のコンピューターに正常に転送されるまで、ルートに沿ってすべての手順でローカルに保存されます。 プロパティを<xref:System.Messaging.Message.Recoverable%2A>に設定`true`すると、スループットに影響を与える可能性があります。  
  
 メッセージがトランザクションである場合、メッセージキューは、 <xref:System.Messaging.Message.Recoverable%2A>プロパティの値に関係なく、メッセージを回復可能として自動的に処理します。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.Recoverable%2A>プロパティの値を取得して設定します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.Recoverable" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.UseTracing" />
      </Docs>
    </Member>
    <Member MemberName="ResponseQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue ResponseQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue ResponseQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ResponseQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ ResponseQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResponseQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.Message.ResponseQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgResponseQueue")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションによって生成される応答メッセージを受け取るキューを取得または設定します。</summary>
        <value>アプリケーションによって生成される応答メッセージが返される <see cref="T:System.Messaging.MessageQueue" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.ResponseQueue%2A>は、アプリケーションによって生成される応答メッセージを受信するキューを識別します。受信側アプリケーションは、送信元アプリケーションに返されます。 送信元アプリケーションは、メッセージを送信するときに応答キューを指定します。 使用できる任意のキューを応答キューとして指定できます。  
  
 応答キューに対して返されるメッセージは、アプリケーション固有です。 アプリケーションは、メッセージの内容と、メッセージの受信時に実行するアクションを定義する必要があります。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.ResponseQueue%2A>プロパティの値を取得して設定します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.ResponseQueue" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.DestinationQueue" />
        <altmember cref="P:System.Messaging.Message.TransactionStatusQueue" />
      </Docs>
    </Member>
    <Member MemberName="SecurityContext">
      <MemberSignature Language="C#" Value="public System.Messaging.SecurityContext SecurityContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.SecurityContext SecurityContext" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SecurityContext" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityContext As SecurityContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::SecurityContext ^ SecurityContext { System::Messaging::SecurityContext ^ get(); void set(System::Messaging::SecurityContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContext : System.Messaging.SecurityContext with get, set" Usage="System.Messaging.Message.SecurityContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.SecurityContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージのセキュリティ コンテキストを取得または設定します。</summary>
        <value>このプロパティが設定済みの場合、<see cref="T:System.Messaging.SecurityContext" /> オブジェクトにはメッセージのセキュリティ コンテキストが含まれます。それ以外の場合は NULL になります。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SenderCertificate">
      <MemberSignature Language="C#" Value="public byte[] SenderCertificate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SenderCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderCertificate" />
      <MemberSignature Language="VB.NET" Value="Public Property SenderCertificate As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SenderCertificate { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SenderCertificate : byte[] with get, set" Usage="System.Messaging.Message.SenderCertificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgSenderCertificate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージを認証するのに使うセキュリティ証明書を取得または設定します。</summary>
        <value>メッセージの差出人を確認するのにメッセージ キューが使うセキュリティ証明書を表すバイト値配列。 既定値は長さ 0 の配列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージに外部セキュリティ証明<xref:System.Messaging.Message.SenderCertificate%2A>書が含まれている場合、受信側アプリケーションはプロパティを使用します。  
  
 メッセージキューでは、内部または外部のセキュリティ証明書を使用してメッセージを認証できます。 メッセージキューは、メッセージの整合性を確認するために使用される内部証明書を提供します。 証明機関は、メッセージのプロパティを<xref:System.Messaging.Message.SenderCertificate%2A>介してアクセスできる外部証明書を提供します。 メッセージキューでメッセージを認証できるようにするだけでなく、外部証明書を使用すると、受信側のアプリケーションでは送信側をさらに検証することができます。 内部証明書には、受信側のアプリケーションに使用できる値がありません。  
  
 外部証明書は、メッセージキューシステムのディレクトリサービスに登録する必要があります。 外部証明書には、証明機関、証明書ユーザー、証明書の有効期間、証明書ユーザーの公開キー、および証明機関の署名に関する情報が含まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.SenderCertificate" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.Message.Authenticated" />
      </Docs>
    </Member>
    <Member MemberName="SenderId">
      <MemberSignature Language="C#" Value="public byte[] SenderId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SenderId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SenderId As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SenderId { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SenderId : byte[]" Usage="System.Messaging.Message.SenderId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgSenderId")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>送信元ユーザーの ID を取得します。</summary>
        <value>差出人を識別するバイト値配列。 受信側キュー マネージャーは、メッセージを認証するときにこの ID を使って、メッセージの差出人と差出人のキューへのアクセス権とを確認します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティが`false`の場合、 <xref:System.Messaging.Message.SenderId%2A>プロパティで指定された送信者 id は、メッセージの送信時にメッセージに添付されません。 <xref:System.Messaging.Message.AttachSenderId%2A> これは、メッセージを送信先キューに送信するときに、送信側が検証されないことをメッセージキューに示すことを示します。 プロパティが`true`の場合、 <xref:System.Messaging.Message.SenderId%2A>プロパティの値は、メッセージが認証された場合にのみ信頼できます。 <xref:System.Messaging.Message.AttachSenderId%2A> プロパティを<xref:System.Messaging.Message.SenderId%2A>プロパティと共に使用して、送信者のアクセス権を確認します。 <xref:System.Messaging.Message.Authenticated%2A>  
  
 コネクタアプリケーションは、コネクタサーバーを使用して、メッセージキューと他のキューシステム間の通信を提供するアプリケーションです。 メッセージキューでは、送信者の id を提供するためにコネクタアプリケーションが必要です。 コネクタアプリケーションを使用<xref:System.Messaging.Message.ConnectorType%2A>してメッセージを送信する場合は、プロパティを設定する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.SenderId" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
      </Docs>
    </Member>
    <Member MemberName="SenderVersion">
      <MemberSignature Language="C#" Value="public long SenderVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 SenderVersion" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SenderVersion As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long SenderVersion { long get(); };" />
      <MemberSignature Language="F#" Value="member this.SenderVersion : int64" Usage="System.Messaging.Message.SenderVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgSenderVersion")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージを送信するのに使われるメッセージ キューのバージョンを取得します。</summary>
        <value>メッセージを送信するのに使われるメッセージ キューのバージョン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.SenderVersion%2A>は、特定の機能にとって重要です。 たとえば、トランザクション処理は、メッセージキュー2.0 以降でのみサポートされます。デジタル署名は、MSMQ 1.0 によって送信されるメッセージを認証するために使用されます。  
  
 送信キューマネージャーは、メッセージ<xref:System.Messaging.Message.SenderVersion%2A>が送信されるときにプロパティを設定します。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.SenderVersion%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
- または - 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.SenderVersion" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionStatusQueue" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
      </Docs>
    </Member>
    <Member MemberName="SentTime">
      <MemberSignature Language="C#" Value="public DateTime SentTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime SentTime" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SentTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SentTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime SentTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.SentTime : DateTime" Usage="System.Messaging.Message.SentTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgSentTime")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージが送信元キュー マネージャーによって送信されたときの、送信元コンピューター上の日付と時刻を取得します。</summary>
        <value>メッセージが送信された日時を表す <see cref="T:System.DateTime" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティは、 <xref:System.Messaging.Message>クラスのこのインスタンスが作成されたコンピューターのローカル時刻に調整されます。 <xref:System.Messaging.Message.SentTime%2A> このタイムゾーンは、送信元キューと送信先キューとは異なる場合があります。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.SentTime%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
- または - 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.SentTime" /> プロパティを無視します。</exception>
      </Docs>
    </Member>
    <Member MemberName="SourceMachine">
      <MemberSignature Language="C#" Value="public string SourceMachine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceMachine" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SourceMachine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceMachine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceMachine { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceMachine : string" Usage="System.Messaging.Message.SourceMachine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgSourceMachine")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージの送信元のコンピューターを取得します。</summary>
        <value>メッセージの送信元のコンピューターの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.SourceMachine%2A>プロパティの形式には、前の2つのスラッシュ (\\\\) は含まれません。 たとえば、 `myServer`は有効<xref:System.Messaging.Message.SourceMachine%2A>なです。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.SourceMachine%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
- または - 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.SourceMachine" /> プロパティを無視します。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">コンピューターの情報またはディレクトリ サービスにアクセスできません。</exception>
        <altmember cref="P:System.Messaging.MessageQueue.MachineName" />
      </Docs>
    </Member>
    <Member MemberName="TimeToBeReceived">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToBeReceived { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToBeReceived" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TimeToBeReceived" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToBeReceived As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToBeReceived { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.TimeToBeReceived : TimeSpan with get, set" Usage="System.Messaging.Message.TimeToBeReceived" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgTimeToBeReceived")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.TimeoutConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージが送信先キューから受信されるまでの最大時間を取得または設定します。</summary>
        <value>送信されたメッセージが送信先キューから受信されるまでの合計時間。 既定値は、<see cref="F:System.Messaging.Message.InfiniteTimeout" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.TimeToBeReceived%2A>は、送信されたメッセージが送信先キューから受信されるまでの合計時間を指定します。 制限時間には、送信先キューへの到達に要した時間と、メッセージを受信する前にキューで待機する時間が含まれます。  
  
> [!CAUTION]
>  依存するクライアントコンピューターを使用する場合は、クライアントコンピューターの時計が、メッセージキューを実行しているサーバーのクロックと同期されていることを確認してください。 それ以外の場合、 <xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティがではないメッセージを送信すると、予期しない<xref:System.Messaging.Message.InfiniteTimeout>動作が発生する可能性があります。  
  
 メッセージがキューから削除さ<xref:System.Messaging.Message.TimeToBeReceived%2A>れる前にプロパティによって指定された期間が経過すると、メッセージキューは2つの方法のいずれかでメッセージを破棄します。 メッセージの <xref:System.Messaging.Message.UseDeadLetterQueue%2A> プロパティが `true` の場合、メッセージは配信不能キューに送信されます。 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> が`false`の場合、メッセージは無視されます。  
  
 メッセージの<xref:System.Messaging.Message.AcknowledgeType%2A>プロパティを設定して、タイマーの有効期限が切れる前にメッセージが取得されなかった場合に、メッセージキューが送信元アプリケーションに否定受信確認メッセージを返すように要求することができます。  
  
 <xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティによって指定された値が<xref:System.Messaging.Message.TimeToReachQueue%2A>プロパティで指定された値<xref:System.Messaging.Message.TimeToBeReceived%2A>よりも小さい場合は、が優先されます。  
  
 1つのトランザクションで複数のメッセージが送信されると、 <xref:System.Messaging.Message.TimeToBeReceived%2A>メッセージキューは最初のメッセージのプロパティを使用します。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティの値を取得して設定します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.TimeToBeReceived" /> プロパティを無視します。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Messaging.Message.TimeToBeReceived" /> に指定された値が無効です。</exception>
        <altmember cref="P:System.Messaging.Message.TimeToReachQueue" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TimeToReachQueue">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToReachQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToReachQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TimeToReachQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToReachQueue As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToReachQueue { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.TimeToReachQueue : TimeSpan with get, set" Usage="System.Messaging.Message.TimeToReachQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgTimeToReachQueue")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.TimeoutConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージがキューに到達するまでの最大許容時間を取得または設定します。</summary>
        <value>メッセージが送信されてから送信先キューに到達するまでのタイム リミット。 既定値は、<see cref="F:System.Messaging.Message.InfiniteTimeout" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージが送信先に到達する<xref:System.Messaging.Message.TimeToReachQueue%2A>前にプロパティによって指定された間隔が経過すると、メッセージキューは2つの方法のいずれかでメッセージを破棄します。 メッセージの <xref:System.Messaging.Message.UseDeadLetterQueue%2A> プロパティが `true` の場合、メッセージは配信不能キューに送信されます。 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> が`false`の場合、メッセージは無視されます。  
  
 メッセージの<xref:System.Messaging.Message.AcknowledgeType%2A>プロパティを設定して、タイマーの有効期限が切れる前にメッセージが到着しなかった場合に、メッセージキューから送信側アプリケーションに否定受信確認メッセージを返すように要求できます。  
  
 <xref:System.Messaging.Message.TimeToReachQueue%2A>このプロパティが0秒に設定されている場合、メッセージキューはメッセージを待機している場合に、メッセージを送信先に送信しようとします。 キューがローカルの場合、メッセージは常にそのキューに到達します。  
  
 <xref:System.Messaging.Message.TimeToReachQueue%2A>プロパティによって指定された値が<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティで指定された値<xref:System.Messaging.Message.TimeToBeReceived%2A>よりも大きい場合、はが優先されます。  
  
 1つのトランザクションで複数のメッセージが送信されると、 <xref:System.Messaging.Message.TimeToReachQueue%2A>メッセージキューは最初のメッセージのプロパティを使用します。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.TimeToReachQueue%2A>プロパティの値を取得して設定します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.TimeToReachQueue" /> プロパティを無視します。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Messaging.Message.TimeToReachQueue" /> に指定された値が無効です。 負数を表している可能性があります。</exception>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TransactionId">
      <MemberSignature Language="C#" Value="public string TransactionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransactionId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TransactionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TransactionId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TransactionId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TransactionId : string" Usage="System.Messaging.Message.TransactionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgTransactionId")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>一部にメッセージを含むトランザクションの ID を取得します。</summary>
        <value>メッセージに関連付けられているトランザクションの ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 受信側のアプリケーション<xref:System.Messaging.Message.TransactionId%2A>では、プロパティを使用して、特定のトランザクションの一部としてメッセージが送信されたことを確認します。 トランザクション識別子には、送信元コンピューターの識別子 (最初の16ビット) と4バイトのトランザクションシーケンス番号が含まれます。  
  
 このプロパティは、メッセージキューバージョン2.0 以降でのみ使用できます。  
  
 トランザクションのシーケンス番号は永続的ではないため、トランザクションの識別子は一意であるとは限りません。 <sup></sup> メッセージキューでは、後続のトランザクションのトランザクションシーケンス番号が異なるだけであることが保証されます。  
  
 <xref:System.Messaging.Message.TransactionId%2A> プロパティ<xref:System.Messaging.Message.IsFirstInTransaction%2A>とプロパティを使用して、トランザクションの境界を確認することができます。<xref:System.Messaging.Message.IsLastInTransaction%2A>  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.TransactionId%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.TransactionId" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="TransactionStatusQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue TransactionStatusQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TransactionStatusQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TransactionStatusQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ TransactionStatusQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransactionStatusQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.Message.TransactionStatusQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgTransactionStatusQueue")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>送信元コンピューター上のトランザクション ステータス キューを取得します。</summary>
        <value>送信元コンピューター上のトランザクション ステータス キュー。送信元アプリケーションに受信確認メッセージを返すときに使われます。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.TransactionStatusQueue%2A>は、コネクタアプリケーションからの読み取り受信確認を受信するソースコンピューター上のトランザクションキューを識別します。 メッセージキューはプロパティを設定し、コネクタアプリケーションは、外部キューに送信されるトランザクションメッセージを取得するときにプロパティを使用します。  
  
 外部キューが Microsoft Message Queuing 以外のキューシステムに存在します。 メッセージキューは、コネクタアプリケーションを介してこのようなキューと通信します。  
  
 コネクタアプリケーションは、トランザクションステータスキューを使用して、送信側アプリケーションに受信確認メッセージを返信できます。 送信元アプリケーションが他の確認を要求しない場合でも、トランザクションステータスキューはこれらの受信確認を受信する必要があります。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.TransactionStatusQueue%2A>プロパティの値を表示します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージは送信されていません。 このプロパティは、キューから取得したメッセージでだけ読み込むことができます。  
  
または 
メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.TransactionStatusQueue" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.DestinationQueue" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
      </Docs>
    </Member>
    <Member MemberName="UseAuthentication">
      <MemberSignature Language="C#" Value="public bool UseAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UseAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseAuthentication { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseAuthentication : bool with get, set" Usage="System.Messaging.Message.UseAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgUseAuthentication")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージが送信前に認証された (または認証される必要がある) かどうかを示す値を取得または設定します。</summary>
        <value>送信元アプリケーションがメッセージの認証を要求した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.UseAuthentication%2A>は、メッセージを認証する必要があるかどうかを指定します。 送信元のアプリケーションが認証を要求する場合、メッセージキューはデジタル署名を作成し、メッセージの受信時にメッセージの署名に使用します。  
  
 <xref:System.Messaging.Message.UseAuthentication%2A> が`false`で、認証されたメッセージだけを受け入れるキューにメッセージが送信された場合、メッセージはキューに到達すると拒否されます。  
  
 メッセージのプロパティを確認することによって、メッセージの認証に失敗したかどうかを判断することはできません。 メッセージキューは、メッセージがキューに配信される前に、そのようなメッセージを破棄します。 ただし、配信エラーによってメッセージがキューに到着しない場合は、受信確認メッセージを送信するように要求できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.UseAuthentication" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
      </Docs>
    </Member>
    <Member MemberName="UseDeadLetterQueue">
      <MemberSignature Language="C#" Value="public bool UseDeadLetterQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDeadLetterQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseDeadLetterQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDeadLetterQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDeadLetterQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDeadLetterQueue : bool with get, set" Usage="System.Messaging.Message.UseDeadLetterQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgUseDeadLetterQueue")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>配信できなかったメッセージのコピーを配信不能キューに送信するかどうかを示す値を取得または設定します。</summary>
        <value>メッセージが配信できなかったときにそのメッセージのコピーを配信不能キューに送信する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.UseJournalQueue%2A> と<xref:System.Messaging.Message.UseDeadLetterQueue%2A>プロパティは、メッセージキューがメッセージを追跡する方法を指定します。 が<xref:System.Messaging.Message.UseDeadLetterQueue%2A>の`true`場合、(非トランザクションメッセージの) 配信エラーが発生すると、メッセージを配信できなかったコンピューター上の非トランザクション配信不能キューにメッセージが送信されます。 配信エラーは、たとえば、メッセージタイマーの期限が切れた場合に発生する可能性があります。  
  
 トランザクションメッセージの配信エラーが発生した場合、メッセージキューは、すべての負のケースとインダウトのケースで、ソースマシンのトランザクション配信不能キューにメッセージを送信します。  
  
 配信不能キューにメッセージを格納する場合は、キューを定期的に消去して、不要になったメッセージを削除する必要があります。 配信不能キューに格納されているメッセージは、キューが存在するコンピューターのサイズクォータに対してカウントされます。 コンピューターのクォータは、管理者によって設定され、1つのキューだけでなく、コンピューター全体にメッセージを格納するために割り当てられたサイズを参照します。  
  
 ジャーナルや配信不能キューは作成しません。 これらは両方とも、メッセージキューによって生成されるシステムキューです。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.UseDeadLetterQueue%2A>プロパティの値を取得して設定します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.UseDeadLetterQueue" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
        <altmember cref="P:System.Messaging.Message.UseTracing" />
      </Docs>
    </Member>
    <Member MemberName="UseEncryption">
      <MemberSignature Language="C#" Value="public bool UseEncryption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseEncryption" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseEncryption" />
      <MemberSignature Language="VB.NET" Value="Public Property UseEncryption As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseEncryption { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseEncryption : bool with get, set" Usage="System.Messaging.Message.UseEncryption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgUseEncryption")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージをプライベートにするかどうかを示す値を取得または設定します。</summary>
        <value>メッセージ キューにメッセージを暗号化するように要求する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージがプライベートである場合、受信時にメッセージが送信され、暗号化が解除される前に、その本文が暗号化されます。 プライベートメッセージを送信するには、送信アプリケーションで暗号化を使用するように指定し、必要に応じて暗号化アルゴリズムを指定する必要があります。  
  
 プライベートメッセージを送信する場合、アプリケーションでメッセージの暗号化を実行する必要はありません。 アプリケーションが Microsoft Windows 2000 enterprise 内でディレクトリサービスにアクセスできるメッセージを送信する場合、メッセージキューはメッセージ本文を暗号化できます。 受信キューマネージャーは、プライベートメッセージを受信するときに、常にメッセージ本文の暗号化を解除します。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.UseEncryption%2A>プロパティの値を取得して設定します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.UseEncryption" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.EncryptionAlgorithm" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseJournalQueue : bool with get, set" Usage="System.Messaging.Message.UseJournalQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgUseJournalQueue")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>送信元のコンピューターの履歴にメッセージのコピーを保持するかどうかを示す値を取得または設定します。</summary>
        <value>メッセージが (送信元のコンピューターから次のサーバーに) 正常に送信された後に送信元コンピューターの履歴にメッセージのコピーを保持するように要求する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.UseJournalQueue%2A> と<xref:System.Messaging.Message.UseDeadLetterQueue%2A>プロパティは、メッセージキューがメッセージを追跡する方法を指定します。 <xref:System.Messaging.Message.UseJournalQueue%2A> が`true`の場合、メッセージが送信される各ステップで、コピーは元のコンピューターのコンピュータージャーナルに保持されます。  
  
 送信されたメッセージは、送信先キューがリモートコンピューター上にある場合にのみ、ジャーナルキューにコピーされます。 転送先がローカルコンピューター上にある場合、メッセージはキューに直接送信されます。ジャーナリングを必要とする中間手順はありません。  
  
 メッセージをジャーナルキューに格納する場合は、キューを定期的にクリアして、不要になったメッセージを削除します。 ジャーナルキューに格納されているメッセージは、キューが存在するコンピューターのクォータに対してカウントされます。 (コンピューターのクォータは管理者によって設定されます)。  
  
 ジャーナルや配信不能キューは作成しません。 これらは両方とも、メッセージキューによって生成されるシステムキューです。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.UseJournalQueue%2A>プロパティの値を取得して設定します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.UseJournalQueue" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseTracing" />
        <altmember cref="P:System.Messaging.MessageQueue.UseJournalQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.MaximumJournalSize" />
      </Docs>
    </Member>
    <Member MemberName="UseTracing">
      <MemberSignature Language="C#" Value="public bool UseTracing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTracing" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseTracing" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTracing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTracing { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseTracing : bool with get, set" Usage="System.Messaging.Message.UseTracing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MsgUseTracing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージが送信先キューに移動していく途中でメッセージをトレースするかどうかを示す値を取得または設定します。</summary>
        <value>元のメッセージが送信先キューに到達するまでに発生する各中間ステップごとにレポートを生成して、システムのレポート キューに送信する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Messaging.Message.UseTracing%2A>は、メッセージが送信先キューに移動するときに、そのルートを追跡するかどうかを指定します。 の`true`場合、メッセージがメッセージキュールーティングサーバーを通過するたびに、メッセージキューによって生成されるレポートメッセージがレポートキューに送信されます。 レポートキューは、送信元のキューマネージャーによって指定されます。 レポートキューは、メッセージキューによって生成されるレポートメッセージに限定されません。アプリケーションで生成されたメッセージをレポートキューに送信することもできます。  
  
 トレースを使用するには、Active Directory を設定し、メッセージキューエンタープライズのレポートキューを指定します。 これらの設定は、管理者が構成します。  
  
   
  
## Examples  
 次のコード例では、メッセージの<xref:System.Messaging.Message.UseTracing%2A>プロパティの値を取得して設定します。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">メッセージ キューがフィルター処理され、<see cref="P:System.Messaging.Message.UseTracing" /> プロパティを無視します。</exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
      </Docs>
    </Member>
  </Members>
</Type>
