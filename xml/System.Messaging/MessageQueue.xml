<Type Name="MessageQueue" FullName="System.Messaging.MessageQueue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="811421d63f59291395e6acc542f3d1bf00d3e3ed" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70657824" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueue : System.ComponentModel.Component, System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueue extends System.ComponentModel.Component implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueue" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueue&#xA;Inherits Component&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueue : System::ComponentModel::Component, System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type MessageQueue = class&#xA;    inherit Component&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("ReceiveCompleted")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.Messaging.MessageQueueInstaller))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageQueueConverter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VisualStudio.Install.MessageQueueInstallableComponentDesigner, Microsoft.VisualStudio, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Messaging.MessagingDescription("MessageQueueDesc")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2e7ae-101">メッセージ キュー サーバーのキューにアクセスできるようにします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-101">Provides access to a queue on a Message Queuing server.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-102">メッセージキューテクノロジを使用すると、異なるタイミングで実行されているアプリケーションが、一時的にオフラインになっている可能性のある異種ネットワークやシステム間で通信を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-102">The Message Queuing technology allows applications running at different times to communicate across heterogeneous networks and systems that might be temporarily offline.</span></span> <span data-ttu-id="2e7ae-103">アプリケーションは、キューからメッセージを送信、受信、またはピーク (削除せずに読み取り) します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-103">Applications send, receive, or peek (read without removing) messages from queues.</span></span> <span data-ttu-id="2e7ae-104">メッセージキューは、および Windows NT [!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)]のオプションのコンポーネントであり、個別にインストールする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-104">Message Queuing is an optional component of [!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)] and Windows NT, and must be installed separately.</span></span>  
  
 <span data-ttu-id="2e7ae-105">クラス<xref:System.Messaging.MessageQueue>は、メッセージキューのラッパーです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-105">The <xref:System.Messaging.MessageQueue> class is a wrapper around Message Queuing.</span></span> <span data-ttu-id="2e7ae-106">メッセージキューには複数のバージョンがあり、 <xref:System.Messaging.MessageQueue>クラスを使用すると、使用しているオペレーティングシステムによって若干異なる動作になる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-106">There are multiple versions of Message Queuing, and using the <xref:System.Messaging.MessageQueue> class can result in slightly different behavior, depending on the operating system you are using.</span></span> <span data-ttu-id="2e7ae-107">各バージョンのメッセージキューの特定の機能の詳細については、MSDN のプラットフォーム SDK の「メッセージキューの新機能」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-107">For information about specific features of each version of Message Queuing, see the topic "What's New in Message Queuing" in the Platform SDK in MSDN.</span></span>  
  
 <span data-ttu-id="2e7ae-108">クラス<xref:System.Messaging.MessageQueue>は、メッセージキューのキューへの参照を提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-108">The <xref:System.Messaging.MessageQueue> class provides a reference to a Message Queuing queue.</span></span> <span data-ttu-id="2e7ae-109">既存のリソースに接続するため<xref:System.Messaging.MessageQueue.%23ctor%2A>のコンストラクターのパスを指定することも、サーバーに新しいキューを作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-109">You can specify a path in the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor to connect to an existing resource, or you can create a new queue on the server.</span></span> <span data-ttu-id="2e7ae-110">、 <xref:System.Messaging.MessageQueue.Send%28System.Object%29> <xref:System.Messaging.MessageQueue> 、または <xref:System.Messaging.MessageQueue.Receive%2A> を呼び出す前に、クラスの新しいインスタンスを既存のキューに関連付ける必要があります。 <xref:System.Messaging.MessageQueue.Peek%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-110">Before you can call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, you must associate the new instance of the <xref:System.Messaging.MessageQueue> class with an existing queue.</span></span> <span data-ttu-id="2e7ae-111">その時点で、 <xref:System.Messaging.MessageQueue.Category%2A>や<xref:System.Messaging.MessageQueue.Label%2A>などのキューのプロパティを操作できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-111">At that point, you can manipulate the queue properties such as <xref:System.Messaging.MessageQueue.Category%2A> and <xref:System.Messaging.MessageQueue.Label%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-112"><xref:System.Messaging.MessageQueue>では、同期と非同期の2種類のメッセージ取得がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-112"><xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous.</span></span> <span data-ttu-id="2e7ae-113">同期メソッド、 <xref:System.Messaging.MessageQueue.Peek%2A>および<xref:System.Messaging.MessageQueue.Receive%2A>は、新しいメッセージがキューに到達するまで、プロセススレッドが指定された時間間隔待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-113">The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-114">非同期メソッド ( <xref:System.Messaging.MessageQueue.BeginPeek%2A>および) <xref:System.Messaging.MessageQueue.BeginReceive%2A>を使用すると、メッセージがキューに到着するまで、メインアプリケーションタスクが別のスレッドで続行されるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-114">The asynchronous methods, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A>, allow the main application tasks to continue in a separate thread until a message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-115">これらのメソッドは、コールバックオブジェクトと状態オブジェクトを使用してスレッド間で情報を伝達することによって機能します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-115">These methods work by using callback objects and state objects to communicate information between threads.</span></span>  
  
 <span data-ttu-id="2e7ae-116"><xref:System.Messaging.MessageQueue>クラスの新しいインスタンスを作成しても、新しいメッセージキューのキューは作成されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-116">When you create a new instance of the <xref:System.Messaging.MessageQueue> class, you are not creating a new Message Queuing queue.</span></span> <span data-ttu-id="2e7ae-117">代わりに、、 <xref:System.Messaging.MessageQueue.Create%28System.String%29> <xref:System.Messaging.MessageQueue.Delete%28System.String%29>、および<xref:System.Messaging.MessageQueue.Purge%2A>の各メソッドを使用して、サーバー上のキューを管理できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-117">Instead, you can use the <xref:System.Messaging.MessageQueue.Create%28System.String%29>, <xref:System.Messaging.MessageQueue.Delete%28System.String%29>, and <xref:System.Messaging.MessageQueue.Purge%2A> methods to manage queues on the server.</span></span>  
  
 <span data-ttu-id="2e7ae-118"><xref:System.Messaging.MessageQueue.Purge%2A> <xref:System.Messaging.MessageQueue.Delete%28System.String%29>とは異なり、 `static`とはメンバーであるため、 <xref:System.Messaging.MessageQueue>クラスの新しいインスタンスを作成せずに呼び出すことができます。 <xref:System.Messaging.MessageQueue.Create%28System.String%29></span><span class="sxs-lookup"><span data-stu-id="2e7ae-118">Unlike <xref:System.Messaging.MessageQueue.Purge%2A>, <xref:System.Messaging.MessageQueue.Create%28System.String%29> and <xref:System.Messaging.MessageQueue.Delete%28System.String%29> are `static` members, so you can call them without creating a new instance of the <xref:System.Messaging.MessageQueue> class.</span></span>  
  
 <span data-ttu-id="2e7ae-119"><xref:System.Messaging.MessageQueue>オブジェクトの<xref:System.Messaging.MessageQueue.Path%2A>プロパティは、表示名<xref:System.Messaging.MessageQueue.Label%2A>、 <xref:System.Messaging.MessageQueue.FormatName%2A>、またはの3つの名前のいずれかを使用して設定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-119">You can set the <xref:System.Messaging.MessageQueue> object's <xref:System.Messaging.MessageQueue.Path%2A> property with one of three names: the friendly name, the <xref:System.Messaging.MessageQueue.FormatName%2A>, or the <xref:System.Messaging.MessageQueue.Label%2A>.</span></span> <span data-ttu-id="2e7ae-120"><xref:System.Messaging.MessageQueue.MachineName%2A>キューのプロパティおよび\\ `Private$` <xref:System.Messaging.MessageQueue.MachineName%2A> \\ \\ <xref:System.Messaging.MessageQueue.MachineName%2A> <xref:System.Messaging.MessageQueue.QueueName%2A>プロパティによって定義されている表示名は、パブリックキュー用です。 <xref:System.Messaging.MessageQueue.QueueName%2A> <xref:System.Messaging.MessageQueue.QueueName%2A>プライベートキューの場合。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-120">The friendly name, which is defined by the queue's <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties, is <xref:System.Messaging.MessageQueue.MachineName%2A>\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a public queue, and <xref:System.Messaging.MessageQueue.MachineName%2A>\\`Private$`\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a private queue.</span></span> <span data-ttu-id="2e7ae-121">プロパティ<xref:System.Messaging.MessageQueue.FormatName%2A>は、メッセージキューへのオフラインアクセスを許可します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-121">The <xref:System.Messaging.MessageQueue.FormatName%2A> property allows offline access to message queues.</span></span> <span data-ttu-id="2e7ae-122">最後に、キューの<xref:System.Messaging.MessageQueue.Label%2A>プロパティを使用して、 <xref:System.Messaging.MessageQueue.Path%2A>キューのを設定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-122">Lastly, you can use the queue's <xref:System.Messaging.MessageQueue.Label%2A> property to set the queue's <xref:System.Messaging.MessageQueue.Path%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-123">の<xref:System.Messaging.MessageQueue>インスタンスの初期プロパティ値の一覧につい<xref:System.Messaging.MessageQueue.%23ctor%2A>ては、コンストラクターを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-123">For a list of initial property values for an instance of <xref:System.Messaging.MessageQueue>, see the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-124">次のコード例では<xref:System.Messaging.MessageQueue> 、さまざまなパス名の構文型を使用して新しいオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-124">The following code example creates new <xref:System.Messaging.MessageQueue> objects using various path name syntax types.</span></span> <span data-ttu-id="2e7ae-125">いずれの場合も、コンストラクターで定義されているパスを持つキューにメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-125">In each case, it sends a message to the queue whose path is defined in the constructor.</span></span>  
  
 [!code-cpp[MessageQueue.Path#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Path/CPP/mqpath.cpp#1)]
 [!code-csharp[MessageQueue.Path#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Path/CS/mqpath.cs#1)]
 [!code-vb[MessageQueue.Path#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Path/VB/mqpath.vb#1)]  
  
 <span data-ttu-id="2e7ae-126">次のコード例では、キューにメッセージを送信し、という`Order`アプリケーション固有のクラスを使用してキューからメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-126">The following code example sends a message to a queue, and receives a message from a queue, using an application-specific class called `Order`.</span></span>  
  
 [!code-cpp[MessageQueue.Receive_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Receive_noparms/CPP/mqreceive_noparms.cpp#1)]
 [!code-csharp[MessageQueue.Receive_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Receive_noparms/CS/mqreceive_noparms.cs#1)]
 [!code-vb[MessageQueue.Receive_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Receive_noparms/VB/mqreceive_noparms.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="2e7ae-127"><see cref="M:System.Messaging.MessageQueue.GetAllMessages" />メソッドだけがスレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-127">Only the <see cref="M:System.Messaging.MessageQueue.GetAllMessages" /> method is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
    <altmember cref="T:System.Messaging.MessageQueueException" />
    <altmember cref="M:System.Messaging.MessageQueue.#ctor" />
    <altmember cref="M:System.Messaging.MessageQueue.Peek" />
    <altmember cref="M:System.Messaging.MessageQueue.Receive" />
    <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
    <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
    <altmember cref="P:System.Messaging.MessageQueue.Path" />
    <altmember cref="P:System.Messaging.MessageQueue.Label" />
    <altmember cref="P:System.Messaging.MessageQueue.FormatName" />
    <altmember cref="P:System.Messaging.MessageQueue.QueueName" />
    <altmember cref="P:System.Messaging.MessageQueue.MachineName" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-128"><see cref="T:System.Messaging.MessageQueue" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-128">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueue" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-129"><see cref="T:System.Messaging.MessageQueue" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-129">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueue" /> class.</span></span> <span data-ttu-id="2e7ae-130">パラメーターなしのコンストラクターが新しいインスタンスを初期化した後、そのインスタンスを使用する前にインスタンスの <see cref="P:System.Messaging.MessageQueue.Path" /> プロパティを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-130">After the parameterless constructor initializes the new instance, you must set the instance's <see cref="P:System.Messaging.MessageQueue.Path" /> property before you can use the instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-131">このオーバーロードを使用して、メッセージキューサーバー <xref:System.Messaging.MessageQueue>のキューにすぐに関連付けられていないクラスの新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-131">Use this overload to create a new instance of the <xref:System.Messaging.MessageQueue> class that is not immediately tied to a queue on the Message Queuing server.</span></span> <span data-ttu-id="2e7ae-132">このインスタンスを使用する前に、 <xref:System.Messaging.MessageQueue.Path%2A>プロパティを設定して、既存のメッセージキューのキューに接続する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-132">Before using this instance, you must connect it to an existing Message Queuing queue by setting the <xref:System.Messaging.MessageQueue.Path%2A> property.</span></span> <span data-ttu-id="2e7ae-133">または、 <xref:System.Messaging.MessageQueue.Create%28System.String%29>メソッドの戻り<xref:System.Messaging.MessageQueue>値への参照を設定して、新しいメッセージキューのキューを作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-133">Alternatively, you can set the <xref:System.Messaging.MessageQueue> reference to the <xref:System.Messaging.MessageQueue.Create%28System.String%29> method's return value, thereby creating a new Message Queuing queue.</span></span>  
  
 <span data-ttu-id="2e7ae-134">コンストラクター <xref:System.Messaging.MessageQueue.%23ctor%2A>は、 <xref:System.Messaging.MessageQueue>クラスの新しいインスタンスをインスタンス化します。新しいメッセージキューのキューを作成しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-134">The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue.</span></span>  
  
 <span data-ttu-id="2e7ae-135">次の表に、の<xref:System.Messaging.MessageQueue>インスタンスのプロパティの初期値を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-135">The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>.</span></span>  
  
|<span data-ttu-id="2e7ae-136">プロパティ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-136">Property</span></span>|<span data-ttu-id="2e7ae-137">初期値</span><span class="sxs-lookup"><span data-stu-id="2e7ae-137">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|<span data-ttu-id="2e7ae-138"><xref:System.Messaging.DefaultPropertiesToSend>クラスのパラメーターなしのコンストラクターによって設定される値。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-138">The values set by the parameterless constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.</span></span>|  
|<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>|  
|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|<span data-ttu-id="2e7ae-139"><xref:System.Messaging.MessagePropertyFilter>クラスのパラメーターなしのコンストラクターによって設定される値。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-139">The values set by the parameterless constructor of the <xref:System.Messaging.MessagePropertyFilter> class.</span></span> <span data-ttu-id="2e7ae-140">すべてのフィルター値はに`true`設定されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-140">All the filter values are set to `true`.</span></span>|  
|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|`false`|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-141">次のコード例では、 <xref:System.Messaging.MessageQueue>新しいを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-141">The following code example creates a new <xref:System.Messaging.MessageQueue>.</span></span>  
  
 [!code-csharp[MessageQueue#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
        <altmember cref="P:System.Messaging.MessageQueue.QueueName" />
        <altmember cref="P:System.Messaging.MessageQueue.FormatName" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueue (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueue(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Messaging.MessageQueue : string -&gt; System.Messaging.MessageQueue" Usage="new System.Messaging.MessageQueue path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2e7ae-142">この <see cref="T:System.Messaging.MessageQueue" /> が参照するキューの場所。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-142">The location of the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />.</span></span></param>
        <summary><span data-ttu-id="2e7ae-143">指定したパスのメッセージ キューのキューを参照する <see cref="T:System.Messaging.MessageQueue" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-143">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueue" /> class that references the Message Queuing queue at the specified path.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-144">パス、形式名、またはラベルがわかっ<xref:System.Messaging.MessageQueue>ている特定のメッセージキューのキューに新しいインスタンスを関連付ける場合は、このオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-144">Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> instance to a particular Message Queuing queue, for which you know the path, format name, or label.</span></span> <span data-ttu-id="2e7ae-145">キューを参照する最初のアプリケーションに排他アクセスを許可する場合は、 <xref:System.Messaging.MessageQueue.DenySharedReceive%2A>プロパティをに`true`設定するか、読み取りアクセス制限パラメーターを渡すコンストラクターを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-145">If you want to grant exclusive access to the first application that references the queue, you must set the <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> property to `true` or use the constructor that passes a read-access restriction parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-146">コンストラクター <xref:System.Messaging.MessageQueue.%23ctor%2A>は、 <xref:System.Messaging.MessageQueue>クラスの新しいインスタンスをインスタンス化します。新しいメッセージキューのキューを作成しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-146">The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue.</span></span> <span data-ttu-id="2e7ae-147">メッセージキューに新しいキューを作成するには<xref:System.Messaging.MessageQueue.Create%28System.String%29>、を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-147">To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-148">`path`パラメーターの構文は、次の表に示すように、参照するキューの種類によって異なります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-148">The syntax of the `path` parameter depends on the type of queue it references, as shown in the following table.</span></span>  
  
|<span data-ttu-id="2e7ae-149">キューの種類</span><span class="sxs-lookup"><span data-stu-id="2e7ae-149">Queue type</span></span>|<span data-ttu-id="2e7ae-150">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-150">Syntax</span></span>|  
|----------------|------------|  
|<span data-ttu-id="2e7ae-151">パブリックキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-151">Public queue</span></span>|`MachineName`\\`QueueName`|  
|<span data-ttu-id="2e7ae-152">専用キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-152">Private queue</span></span>|`MachineName`\\`Private$`\\`QueueName`|  
|<span data-ttu-id="2e7ae-153">ジャーナルキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-153">Journal queue</span></span>|`MachineName`\\`QueueName`\\`Journal$`|  
|<span data-ttu-id="2e7ae-154">マシンジャーナルキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-154">Machine journal queue</span></span>|`MachineName`\\`Journal$`|  
|<span data-ttu-id="2e7ae-155">コンピューターの配信不能キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-155">Machine dead-letter queue</span></span>|`MachineName`\\`Deadletter$`|  
|<span data-ttu-id="2e7ae-156">コンピュータートランザクション配信不能キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-156">Machine transactional dead-letter queue</span></span>|`MachineName`\\`XactDeadletter$`|  
  
 <span data-ttu-id="2e7ae-157"><xref:System.Messaging.MessageQueue.FormatName%2A>または、次の表に示すように、または<xref:System.Messaging.MessageQueue.Label%2A>を使用してキューのパスを記述することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-157">Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table.</span></span>  
  
|<span data-ttu-id="2e7ae-158">関連項目</span><span class="sxs-lookup"><span data-stu-id="2e7ae-158">Reference</span></span>|<span data-ttu-id="2e7ae-159">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-159">Syntax</span></span>|<span data-ttu-id="2e7ae-160">例</span><span class="sxs-lookup"><span data-stu-id="2e7ae-160">Example</span></span>|  
|---------------|------------|-------------|  
|<span data-ttu-id="2e7ae-161">形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-161">Format name</span></span>|<span data-ttu-id="2e7ae-162">`FormatName:`[*形式名*]</span><span class="sxs-lookup"><span data-stu-id="2e7ae-162">`FormatName:` [ *format name* ]</span></span>|<span data-ttu-id="2e7ae-163">`FormatName:Public=`5A5F7535-AE9A-41d4-935C-845C2AFF7112</span><span class="sxs-lookup"><span data-stu-id="2e7ae-163">`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112</span></span><br /><br /> <span data-ttu-id="2e7ae-164">`FormatName:DIRECT=SPX:``NetworkNumber`;`HostNumber`\\`QueueName`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-164">`FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\`QueueName`</span></span><br /><br /> <span data-ttu-id="2e7ae-165">`FormatName:DIRECT=TCP:` `IPAddress`\\`QueueName`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-165">`FormatName:DIRECT=TCP:` `IPAddress`\\`QueueName`</span></span><br /><br /> <span data-ttu-id="2e7ae-166">`FormatName:DIRECT=OS:` `MachineName`\\`QueueName`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-166">`FormatName:DIRECT=OS:` `MachineName`\\`QueueName`</span></span>|  
|<span data-ttu-id="2e7ae-167">group1</span><span class="sxs-lookup"><span data-stu-id="2e7ae-167">Label</span></span>|<span data-ttu-id="2e7ae-168">`Label:`[*ラベル*]</span><span class="sxs-lookup"><span data-stu-id="2e7ae-168">`Label:` [ *label* ]</span></span>|<span data-ttu-id="2e7ae-169">`Label:`TheLabel</span><span class="sxs-lookup"><span data-stu-id="2e7ae-169">`Label:` TheLabel</span></span>|  
  
 <span data-ttu-id="2e7ae-170">オフラインで作業するには、コンストラクターのパス名の構文ではなく、形式名の構文を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-170">To work offline, you must use the format name syntax, not the path name syntax for the constructor.</span></span> <span data-ttu-id="2e7ae-171">そうしないと、プライマリドメインコントローラーが形式名へのパスを解決できないため、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-171">Otherwise, an exception is thrown because the primary domain controller is not available to resolve the path to the format name.</span></span>  
  
 <span data-ttu-id="2e7ae-172">次の表に、の<xref:System.Messaging.MessageQueue>インスタンスのプロパティの初期値を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-172">The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>.</span></span> <span data-ttu-id="2e7ae-173">これらの値は、 `path`パラメーターによって指定されたパスを持つメッセージキューのキューのプロパティに基づいています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-173">These values are based on the properties of the Message Queuing queue with the path specified by the `path` parameter.</span></span>  
  
|<span data-ttu-id="2e7ae-174">プロパティ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-174">Property</span></span>|<span data-ttu-id="2e7ae-175">初期値</span><span class="sxs-lookup"><span data-stu-id="2e7ae-175">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.MessageQueue.Authenticate%2A>|`false`|  
|<xref:System.Messaging.MessageQueue.BasePriority%2A>|<span data-ttu-id="2e7ae-176">0</span><span class="sxs-lookup"><span data-stu-id="2e7ae-176">0</span></span>|  
|<xref:System.Messaging.MessageQueue.Category%2A>|<xref:System.Guid.Empty>|  
|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|<span data-ttu-id="2e7ae-177"><xref:System.Messaging.DefaultPropertiesToSend>クラスのパラメーターなしのコンストラクターによって設定される値。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-177">The values set by the parameterless constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.</span></span>|  
|<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>|<span data-ttu-id="2e7ae-178">`true`メッセージキューのキューのプライバシーレベルの設定が "Body" の場合は。それ以外`false`の場合は。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-178">`true`, if the Message Queuing queue's privacy level setting is "Body"; otherwise, `false`.</span></span>|  
|<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>|  
|<xref:System.Messaging.MessageQueue.Label%2A>|<xref:System.String.Empty>|  
|<xref:System.Messaging.MessageQueue.MachineName%2A>|<span data-ttu-id="2e7ae-179">メッセージキューのキューのコンピューター名プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-179">The value of the Message Queuing queue's computer name property.</span></span>|  
|<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>|  
|<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>|  
|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|<span data-ttu-id="2e7ae-180"><xref:System.Messaging.MessagePropertyFilter>クラスのパラメーターなしのコンストラクターによって設定される値。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-180">The values set by the parameterless constructor of the <xref:System.Messaging.MessagePropertyFilter> class.</span></span>|  
|<xref:System.Messaging.MessageQueue.Path%2A>|<span data-ttu-id="2e7ae-181"><xref:System.String.Empty>コンストラクターによって設定されていない場合は。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-181"><xref:System.String.Empty>, if not set by the constructor.</span></span>|  
|<xref:System.Messaging.MessageQueue.QueueName%2A>|<span data-ttu-id="2e7ae-182"><xref:System.String.Empty>コンストラクターによって設定されていない場合は。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-182"><xref:System.String.Empty>, if not set by the constructor.</span></span>|  
|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|`false`|  
|<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>|<span data-ttu-id="2e7ae-183">`true`メッセージキューオブジェクトのジャーナル設定が有効な場合は。それ以外`false`の場合は。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-183">`true`, if the Message Queuing object's journal setting is enabled; otherwise, `false`.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-184">次のコード例では<xref:System.Messaging.MessageQueue> 、さまざまなパス名の構文型を使用して新しいオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-184">The following code example creates new <xref:System.Messaging.MessageQueue> objects using various path name syntax types.</span></span> <span data-ttu-id="2e7ae-185">いずれの場合も、コンストラクターで定義されているパスを持つキューにメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-185">In each case, it sends a message to the queue whose path is defined in the constructor.</span></span>  
  
 [!code-cpp[MessageQueue.Path#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Path/CPP/mqpath.cpp#1)]
 [!code-csharp[MessageQueue.Path#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Path/CS/mqpath.cs#1)]
 [!code-vb[MessageQueue.Path#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Path/VB/mqpath.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-186"><see cref="P:System.Messaging.MessageQueue.Path" /> プロパティが無効です。プロパティが設定されていないためと考えられます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-186">The <see cref="P:System.Messaging.MessageQueue.Path" /> property is not valid, possibly because it has not been set.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.FormatName" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
        <altmember cref="P:System.Messaging.MessageQueue.QueueName" />
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueue (string path, bool sharedModeDenyReceive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, bool sharedModeDenyReceive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, sharedModeDenyReceive As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueue(System::String ^ path, bool sharedModeDenyReceive);" />
      <MemberSignature Language="F#" Value="new System.Messaging.MessageQueue : string * bool -&gt; System.Messaging.MessageQueue" Usage="new System.Messaging.MessageQueue (path, sharedModeDenyReceive)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="sharedModeDenyReceive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2e7ae-187">この <see cref="T:System.Messaging.MessageQueue" /> が参照するキューの場所。ローカル コンピューターの場合は "." にできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-187">The location of the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />, which can be "." for the local computer.</span></span></param>
        <param name="sharedModeDenyReceive"><span data-ttu-id="2e7ae-188">キューにアクセスする最初のアプリケーションに排他読み取りアクセス許可を与える場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-188"><see langword="true" /> to grant exclusive read access to the first application that accesses the queue; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="2e7ae-189">指定した読み取りアクセス制限を持つ指定したパスのメッセージ キューのキューを参照する <see cref="T:System.Messaging.MessageQueue" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-189">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueue" /> class that references the Message Queuing queue at the specified path and with the specified read-access restriction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-190">パス、形式名、またはラベルがわかっ<xref:System.Messaging.MessageQueue>ている特定のメッセージキューのキューに新しいを関連付ける場合は、このオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-190">Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> to a particular Message Queuing queue, for which you know the path, format name, or label.</span></span> <span data-ttu-id="2e7ae-191">キューを参照する最初のアプリケーションに排他アクセスを許可する場合は、 `sharedModeDenyReceive`パラメーターをに`true`設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-191">If you want to grant exclusive access to the first application that references the queue, set the `sharedModeDenyReceive` parameter to `true`.</span></span> <span data-ttu-id="2e7ae-192">それ以外の`sharedModeDenyReceive`場合`false`は、をに設定するか、 `path`パラメーターのみを持つコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-192">Otherwise, set `sharedModeDenyReceive` to `false` or use the constructor that has only a `path` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-193">を`sharedModeDenyReceive`に`true`設定すると、他のアプリケーションを含め、メッセージキューのキューにアクセスするすべてのオブジェクトに影響します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-193">Setting `sharedModeDenyReceive` to `true` affects all objects that access the Message Queuing queue, including other applications.</span></span> <span data-ttu-id="2e7ae-194">パラメーターの効果は、このアプリケーションに限定されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-194">The effects of the parameter are not restricted to this application.</span></span>  
  
 <span data-ttu-id="2e7ae-195">コンストラクター <xref:System.Messaging.MessageQueue.%23ctor%2A>は、 <xref:System.Messaging.MessageQueue>クラスの新しいインスタンスを作成します。この場合、新しいメッセージキューのキューは作成されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-195">The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor creates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue.</span></span> <span data-ttu-id="2e7ae-196">メッセージキューに新しいキューを作成するには<xref:System.Messaging.MessageQueue.Create%28System.String%29>、を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-196">To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-197">`path`パラメーターの構文は、キューの種類によって異なります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-197">The syntax of the `path` parameter depends on the type of queue.</span></span>  
  
|<span data-ttu-id="2e7ae-198">キューの種類</span><span class="sxs-lookup"><span data-stu-id="2e7ae-198">Queue type</span></span>|<span data-ttu-id="2e7ae-199">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-199">Syntax</span></span>|  
|----------------|------------|  
|<span data-ttu-id="2e7ae-200">パブリックキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-200">Public queue</span></span>|`MachineName`\\`QueueName`|  
|<span data-ttu-id="2e7ae-201">専用キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-201">Private queue</span></span>|`MachineName`\\`Private$`\\`QueueName`|  
|<span data-ttu-id="2e7ae-202">ジャーナルキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-202">Journal queue</span></span>|`MachineName`\\`QueueName`\\`Journal$`|  
|<span data-ttu-id="2e7ae-203">マシンジャーナルキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-203">Machine journal queue</span></span>|`MachineName`\\`Journal$`|  
|<span data-ttu-id="2e7ae-204">コンピューターの配信不能キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-204">Machine dead-letter queue</span></span>|`MachineName`\\`Deadletter$`|  
|<span data-ttu-id="2e7ae-205">コンピュータートランザクション配信不能キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-205">Machine transactional dead-letter queue</span></span>|`MachineName`\\`XactDeadletter$`|  
  
 <span data-ttu-id="2e7ae-206">また、メッセージキューのキューの形式名またはラベルを使用して、キューのパスを記述することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-206">Alternatively, you can use the format name or label of a Message Queuing queue to describe the queue path.</span></span>  
  
|<span data-ttu-id="2e7ae-207">関連項目</span><span class="sxs-lookup"><span data-stu-id="2e7ae-207">Reference</span></span>|<span data-ttu-id="2e7ae-208">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-208">Syntax</span></span>|<span data-ttu-id="2e7ae-209">例</span><span class="sxs-lookup"><span data-stu-id="2e7ae-209">Example</span></span>|  
|---------------|------------|-------------|  
|<span data-ttu-id="2e7ae-210">形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-210">Format name</span></span>|<span data-ttu-id="2e7ae-211">`FormatName:`[*形式名*]</span><span class="sxs-lookup"><span data-stu-id="2e7ae-211">`FormatName:` [ *format name* ]</span></span>|<span data-ttu-id="2e7ae-212">`FormatName:Public=`5A5F7535-AE9A-41d4-935C-845C2AFF7112</span><span class="sxs-lookup"><span data-stu-id="2e7ae-212">`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112</span></span><br /><br /> <span data-ttu-id="2e7ae-213">`FormatName:DIRECT=SPX:``NetworkNumber`;`HostNumber`\\`QueueName`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-213">`FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\`QueueName`</span></span><br /><br /> <span data-ttu-id="2e7ae-214">`FormatName:DIRECT=TCP:` `IPAddress`\\`QueueName`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-214">`FormatName:DIRECT=TCP:` `IPAddress`\\`QueueName`</span></span><br /><br /> <span data-ttu-id="2e7ae-215">`FormatName:DIRECT=OS:` `MachineName`\\`QueueName`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-215">`FormatName:DIRECT=OS:` `MachineName`\\`QueueName`</span></span>|  
|<span data-ttu-id="2e7ae-216">group1</span><span class="sxs-lookup"><span data-stu-id="2e7ae-216">Label</span></span>|<span data-ttu-id="2e7ae-217">`Label:`[*ラベル*]</span><span class="sxs-lookup"><span data-stu-id="2e7ae-217">`Label:` [ *label* ]</span></span>|<span data-ttu-id="2e7ae-218">`Label:`TheLabel</span><span class="sxs-lookup"><span data-stu-id="2e7ae-218">`Label:` TheLabel</span></span>|  
  
 <span data-ttu-id="2e7ae-219">オフラインで作業するには、フレンドリ名の構文ではなく、形式名の構文を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-219">To work offline, you must use the format name syntax, rather than the friendly name syntax.</span></span> <span data-ttu-id="2e7ae-220">それ以外の場合は、(Active Directory が存在する) プライマリドメインコントローラーが形式名へのパスを解決できないため、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-220">Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.</span></span>  
  
 <span data-ttu-id="2e7ae-221"><xref:System.Messaging.MessageQueue> `sharedModeDenyReceive`が<xref:System.Messaging.MessageQueueException>パラメーターをに `true` 設定してキューを開くと、共有違反が発生したため、後でキューからの読み取りを試みたではが生成されます。 <xref:System.Messaging.MessageQueue></span><span class="sxs-lookup"><span data-stu-id="2e7ae-221">If a <xref:System.Messaging.MessageQueue> opens a queue with the `sharedModeDenyReceive` parameter set to `true`, any <xref:System.Messaging.MessageQueue> that subsequently tries to read from the queue generates a <xref:System.Messaging.MessageQueueException> because of a sharing violation.</span></span> <span data-ttu-id="2e7ae-222">は、が排他モードで<xref:System.Messaging.MessageQueue>キューにアクセスしようとしたときに、 <xref:System.Messaging.MessageQueue>別のが既にキューへの非排他的アクセスを持っている場合にもスローされます。 <xref:System.Messaging.MessageQueueException></span><span class="sxs-lookup"><span data-stu-id="2e7ae-222">A <xref:System.Messaging.MessageQueueException> is also thrown if a <xref:System.Messaging.MessageQueue> tries to access the queue in exclusive mode while another <xref:System.Messaging.MessageQueue> already has non-exclusive access to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-223">次の表に、の<xref:System.Messaging.MessageQueue>インスタンスのプロパティの初期値を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-223">The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>.</span></span> <span data-ttu-id="2e7ae-224">これらの値は、 `path`パラメーターによって指定されたパスを使用して、メッセージキューのキューのプロパティに基づいています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-224">These values are based on the properties of the Message Queuing queue, with the path specified by the `path` parameter.</span></span>  
  
|<span data-ttu-id="2e7ae-225">プロパティ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-225">Property</span></span>|<span data-ttu-id="2e7ae-226">初期値</span><span class="sxs-lookup"><span data-stu-id="2e7ae-226">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.MessageQueue.Authenticate%2A>|<span data-ttu-id="2e7ae-227">`false`。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-227">`false`.</span></span>|  
|<xref:System.Messaging.MessageQueue.BasePriority%2A>|<span data-ttu-id="2e7ae-228">0.</span><span class="sxs-lookup"><span data-stu-id="2e7ae-228">0.</span></span>|  
|<xref:System.Messaging.MessageQueue.Category%2A>|<span data-ttu-id="2e7ae-229"><xref:System.Guid.Empty>。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-229"><xref:System.Guid.Empty>.</span></span>|  
|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|<span data-ttu-id="2e7ae-230"><xref:System.Messaging.DefaultPropertiesToSend>クラスのパラメーターなしのコンストラクターによって設定される値。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-230">The values set by the parameterless constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.</span></span>|  
|<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>|<span data-ttu-id="2e7ae-231">`true`メッセージキューのキューのプライバシーレベルの設定が "Body" の場合は。それ以外`false`の場合は。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-231">`true`, if the Message Queuing queue's privacy level setting is "Body"; otherwise, `false`.</span></span>|  
|<xref:System.Messaging.MessageQueue.Formatter%2A>|<span data-ttu-id="2e7ae-232"><xref:System.Messaging.XmlMessageFormatter>。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-232"><xref:System.Messaging.XmlMessageFormatter>.</span></span>|  
|<xref:System.Messaging.MessageQueue.Label%2A>|<span data-ttu-id="2e7ae-233"><xref:System.String.Empty>。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-233"><xref:System.String.Empty>.</span></span>|  
|<xref:System.Messaging.MessageQueue.MachineName%2A>|<span data-ttu-id="2e7ae-234">メッセージキューのキューのコンピューター名プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-234">The value of the Message Queuing queue's computer name property.</span></span>|  
|<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>|<span data-ttu-id="2e7ae-235"><xref:System.Messaging.MessageQueue.InfiniteQueueSize>。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-235"><xref:System.Messaging.MessageQueue.InfiniteQueueSize>.</span></span>|  
|<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>|<span data-ttu-id="2e7ae-236"><xref:System.Messaging.MessageQueue.InfiniteQueueSize>。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-236"><xref:System.Messaging.MessageQueue.InfiniteQueueSize>.</span></span>|  
|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|<span data-ttu-id="2e7ae-237"><xref:System.Messaging.MessagePropertyFilter>クラスのパラメーターなしのコンストラクターによって設定される値。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-237">The values set by the parameterless constructor of the <xref:System.Messaging.MessagePropertyFilter> class.</span></span>|  
|<xref:System.Messaging.MessageQueue.Path%2A>|<span data-ttu-id="2e7ae-238"><xref:System.String.Empty>コンストラクターによって設定されていない場合は。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-238"><xref:System.String.Empty>, if not set by the constructor.</span></span>|  
|<xref:System.Messaging.MessageQueue.QueueName%2A>|<span data-ttu-id="2e7ae-239"><xref:System.String.Empty>コンストラクターによって設定されていない場合は。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-239"><xref:System.String.Empty>, if not set by the constructor.</span></span>|  
|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|<span data-ttu-id="2e7ae-240">`sharedModeDenyReceive` パラメーターの値。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-240">The value of the `sharedModeDenyReceive` parameter.</span></span>|  
|<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>|<span data-ttu-id="2e7ae-241">`true`メッセージキューオブジェクトのジャーナル設定が有効な場合は。それ以外`false`の場合は。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-241">`true`, if the Message Queuing object's journal setting is enabled; otherwise, `false`.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-242">次のコード例では、 <xref:System.Messaging.MessageQueue>排他アクセスを使用して新しいを作成し、そのパスを設定して、メッセージをキューに送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-242">The following code example creates a new <xref:System.Messaging.MessageQueue> with exclusive access, sets its path, and sends a message to the queue.</span></span>  
  
 [!code-cpp[MessageQueue.ctor_PathSharedModeDenyReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ctor_PathSharedModeDenyReceive/CPP/mqctor_denysharedreceive.cpp#1)]
 [!code-csharp[MessageQueue.ctor_PathSharedModeDenyReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ctor_PathSharedModeDenyReceive/CS/mqctor_denysharedreceive.cs#1)]
 [!code-vb[MessageQueue.ctor_PathSharedModeDenyReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ctor_PathSharedModeDenyReceive/VB/mqctor_denysharedreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-243"><see cref="P:System.Messaging.MessageQueue.Path" /> プロパティが無効です。プロパティが設定されていないためと考えられます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-243">The <see cref="P:System.Messaging.MessageQueue.Path" /> property is not valid, possibly because it has not been set.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.FormatName" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
        <altmember cref="P:System.Messaging.MessageQueue.QueueName" />
        <altmember cref="P:System.Messaging.MessageQueue.DenySharedReceive" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueue (string path, System.Messaging.QueueAccessMode accessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.Messaging.QueueAccessMode accessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.#ctor(System.String,System.Messaging.QueueAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, accessMode As QueueAccessMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueue(System::String ^ path, System::Messaging::QueueAccessMode accessMode);" />
      <MemberSignature Language="F#" Value="new System.Messaging.MessageQueue : string * System.Messaging.QueueAccessMode -&gt; System.Messaging.MessageQueue" Usage="new System.Messaging.MessageQueue (path, accessMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="accessMode" Type="System.Messaging.QueueAccessMode" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2e7ae-244">この <see cref="T:System.Messaging.MessageQueue" /> が参照するキューの場所。ローカル コンピューターの場合は "." にできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-244">The location of the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />, which can be "." for the local computer.</span></span></param>
        <param name="accessMode"><span data-ttu-id="2e7ae-245"><see cref="T:System.Messaging.QueueAccessMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-245">One of the <see cref="T:System.Messaging.QueueAccessMode" /> values.</span></span></param>
        <summary><span data-ttu-id="2e7ae-246"><see cref="T:System.Messaging.MessageQueue" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-246">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueue" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueue (string path, bool sharedModeDenyReceive, bool enableCache);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, bool sharedModeDenyReceive, bool enableCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, sharedModeDenyReceive As Boolean, enableCache As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueue(System::String ^ path, bool sharedModeDenyReceive, bool enableCache);" />
      <MemberSignature Language="F#" Value="new System.Messaging.MessageQueue : string * bool * bool -&gt; System.Messaging.MessageQueue" Usage="new System.Messaging.MessageQueue (path, sharedModeDenyReceive, enableCache)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="sharedModeDenyReceive" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="enableCache" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2e7ae-247">この <see cref="T:System.Messaging.MessageQueue" /> が参照するキューの場所。ローカル コンピューターの場合は "." にできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-247">The location of the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />, which can be "." for the local computer.</span></span></param>
        <param name="sharedModeDenyReceive"><span data-ttu-id="2e7ae-248">キューにアクセスする最初のアプリケーションに排他読み取りアクセス許可を与える場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-248"><see langword="true" /> to grant exclusive read access to the first application that accesses the queue; otherwise, <see langword="false" />.</span></span></param>
        <param name="enableCache"><span data-ttu-id="2e7ae-249">接続キャッシュを作成し、使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-249"><see langword="true" /> to create and use a connection cache; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="2e7ae-250"><see cref="T:System.Messaging.MessageQueue" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-250">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueue" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2e7ae-251">次のコード例では、 <xref:System.Messaging.MessageQueue>排他的読み取りアクセスを使用して新しいを作成し、接続キャッシュを有効にします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-251">The following code example creates a new <xref:System.Messaging.MessageQueue> with exclusive read access and with connection caching enabled.</span></span>  
  
 [!code-cpp[MessageQueue4#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue4/cpp/class1.cpp#1)]
 [!code-csharp[MessageQueue4#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue4/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueue (string path, bool sharedModeDenyReceive, bool enableCache, System.Messaging.QueueAccessMode accessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, bool sharedModeDenyReceive, bool enableCache, valuetype System.Messaging.QueueAccessMode accessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, sharedModeDenyReceive As Boolean, enableCache As Boolean, accessMode As QueueAccessMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueue(System::String ^ path, bool sharedModeDenyReceive, bool enableCache, System::Messaging::QueueAccessMode accessMode);" />
      <MemberSignature Language="F#" Value="new System.Messaging.MessageQueue : string * bool * bool * System.Messaging.QueueAccessMode -&gt; System.Messaging.MessageQueue" Usage="new System.Messaging.MessageQueue (path, sharedModeDenyReceive, enableCache, accessMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="sharedModeDenyReceive" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="enableCache" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="accessMode" Type="System.Messaging.QueueAccessMode" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2e7ae-252">この <see cref="T:System.Messaging.MessageQueue" /> が参照するキューの場所。ローカル コンピューターの場合は "." にできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-252">The location of the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />, which can be "." for the local computer.</span></span></param>
        <param name="sharedModeDenyReceive"><span data-ttu-id="2e7ae-253">キューにアクセスする最初のアプリケーションに排他読み取りアクセス許可を与える場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-253"><see langword="true" /> to grant exclusive read access to the first application that accesses the queue; otherwise, <see langword="false" />.</span></span></param>
        <param name="enableCache"><span data-ttu-id="2e7ae-254">接続キャッシュを作成し、使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-254"><see langword="true" /> to create and use a connection cache; otherwise, <see langword="false" />.</span></span></param>
        <param name="accessMode"><span data-ttu-id="2e7ae-255"><see cref="T:System.Messaging.QueueAccessMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-255">One of the <see cref="T:System.Messaging.QueueAccessMode" /> values.</span></span></param>
        <summary><span data-ttu-id="2e7ae-256"><see cref="T:System.Messaging.MessageQueue" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-256">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueue" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessMode">
      <MemberSignature Language="C#" Value="public System.Messaging.QueueAccessMode AccessMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.QueueAccessMode AccessMode" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.AccessMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AccessMode As QueueAccessMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::QueueAccessMode AccessMode { System::Messaging::QueueAccessMode get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessMode : System.Messaging.QueueAccessMode" Usage="System.Messaging.MessageQueue.AccessMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.QueueAccessMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-257">キューのアクセス モードを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-257">Gets a value that indicates the access mode for the queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-258"><see cref="T:System.Messaging.QueueAccessMode" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-258">One of the <see cref="T:System.Messaging.QueueAccessMode" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-259">キューの既定のアクセスモードは、 `QueueAccessMode.SendAndReceive`コンストラクターを呼び出すときに特に指定しない限り、です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-259">The default access mode for a queue is `QueueAccessMode.SendAndReceive`, unless you specify otherwise when calling the constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public bool Authenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.Authenticate" />
      <MemberSignature Language="VB.NET" Value="Public Property Authenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Authenticate : bool with get, set" Usage="System.Messaging.MessageQueue.Authenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_Authenticate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-260">キューが認証済みメッセージだけを受け入れるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-260">Gets or sets a value that indicates whether the queue accepts only authenticated messages.</span></span></summary>
        <value><span data-ttu-id="2e7ae-261">キューが認証済みメッセージだけを受け入れる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-261"><see langword="true" /> if the queue accepts only authenticated messages; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2e7ae-262">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-262">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-263">メッセージ認証は、メッセージの整合性を確保し、メッセージを送信したユーザーを確認する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-263">Message authentication provides a way to ensure message integrity and to verify who sent the message.</span></span> <span data-ttu-id="2e7ae-264">送信アプリケーションは、認証を要求するために、メッセージの認証レベルを設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-264">To request authentication, the sending application sets the message's authentication level.</span></span>  
  
 <span data-ttu-id="2e7ae-265">をに<xref:System.Messaging.MessageQueue.Authenticate%2A> `true`設定すると、この<xref:System.Messaging.MessageQueue>インスタンスだけでなく、サーバー上のキューへのアクセスが制限されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-265">When you set <xref:System.Messaging.MessageQueue.Authenticate%2A> to `true`, you are restricting access to the queue on the server, not only to this <xref:System.Messaging.MessageQueue> instance.</span></span> <span data-ttu-id="2e7ae-266">同じメッセージキューのキューに対して動作しているすべてのクライアントが影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-266">All clients working against the same Message Queuing queue will be affected.</span></span>  
  
 <span data-ttu-id="2e7ae-267">認証済みのメッセージだけを受け入れるキューは、認証されていないメッセージを拒否します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-267">A queue that accepts only authenticated messages will reject a non-authenticated message.</span></span> <span data-ttu-id="2e7ae-268">メッセージの拒否通知を要求するには、送信側アプリケーション<xref:System.Messaging.Message.AcknowledgeType%2A>でメッセージのプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-268">To request notification of message rejection, a sending application can set the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the message.</span></span> <span data-ttu-id="2e7ae-269">メッセージが拒否されることは他にないため、配信元のアプリケーションは、配信不能キューに送信されるように要求しない限り、メッセージを紛失する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-269">Because no other indication of message rejection exists, the sending application can lose the message unless you request that it be sent to the dead-letter queue.</span></span>  
  
 <span data-ttu-id="2e7ae-270">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-270">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-271">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-271">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-272">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-272">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-273">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-273">Local computer</span></span>|<span data-ttu-id="2e7ae-274">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-274">Yes</span></span>|  
|<span data-ttu-id="2e7ae-275">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-275">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-276">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-276">Yes</span></span>|  
|<span data-ttu-id="2e7ae-277">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-277">Remote computer</span></span>|<span data-ttu-id="2e7ae-278">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-278">No</span></span>|  
|<span data-ttu-id="2e7ae-279">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-279">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-280">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-280">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-281">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.Authenticate%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-281">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.Authenticate%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#3](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-282">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-282">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public short BasePriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public Property BasePriority As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short BasePriority { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int16 with get, set" Usage="System.Messaging.MessageQueue.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_BasePriority")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-283">ネットワーク上でパブリック キューのメッセージを送信するためにメッセージ キューが使用する基本優先順位を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-283">Gets or sets the base priority Message Queuing uses to route a public queue's messages over the network.</span></span></summary>
        <value><span data-ttu-id="2e7ae-284">パブリック キューに送信されるすべてのメッセージに適用される単一の基本優先順位。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-284">The single base priority for all messages sent to the (public) queue.</span></span> <span data-ttu-id="2e7ae-285">既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-285">The default is zero (0).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-286">メッセージキューの基本優先順位によって、そのキューに送信されるメッセージをネットワーク経由で転送するときにどのように処理するかが指定されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-286">A message queue's base priority specifies how a message en route to that queue is treated as it travels through the network.</span></span> <span data-ttu-id="2e7ae-287">プロパティを設定する<xref:System.Messaging.MessageQueue.BasePriority%2A>と、指定したキューに送信されたすべてのメッセージに対して、他のキューに送信されたメッセージよりも優先度が高いか低いかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-287">You can set the <xref:System.Messaging.MessageQueue.BasePriority%2A> property to confer a higher or lower priority to all messages sent to the specified queue than those sent to other queues.</span></span> <span data-ttu-id="2e7ae-288">このプロパティを設定すると、メッセージキューのキューが変更されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-288">Setting this property modifies the Message Queuing queue.</span></span> <span data-ttu-id="2e7ae-289">そのため、その<xref:System.Messaging.MessageQueue>他のインスタンスは変更の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-289">Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.</span></span>  
  
 <span data-ttu-id="2e7ae-290">メッセージキューの<xref:System.Messaging.MessageQueue.BasePriority%2A>は、メッセージの<xref:System.Messaging.Message.Priority%2A>プロパティに関連付けられていません。これは、受信メッセージがキューに配置される順序を指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-290">A message queue's <xref:System.Messaging.MessageQueue.BasePriority%2A> is not related to the <xref:System.Messaging.Message.Priority%2A> property of a message, which specifies the order in which an incoming message is placed in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-291"><xref:System.Messaging.MessageQueue.BasePriority%2A>形式名を使用して指定されたパスを持つパブリックキューにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-291"><xref:System.Messaging.MessageQueue.BasePriority%2A> applies only to public queues whose paths are specified using the format name.</span></span> <span data-ttu-id="2e7ae-292">プライベートキューの基本優先順位は常にゼロ (0) です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-292">The base priority of a private queue is always zero (0).</span></span>  
  
 <span data-ttu-id="2e7ae-293">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-293">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-294">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-294">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-295">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-295">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-296">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-296">Local computer</span></span>|<span data-ttu-id="2e7ae-297">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-297">Yes</span></span>|  
|<span data-ttu-id="2e7ae-298">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-298">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-299">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-299">Yes</span></span>|  
|<span data-ttu-id="2e7ae-300">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-300">Remote computer</span></span>|<span data-ttu-id="2e7ae-301">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-301">No</span></span>|  
|<span data-ttu-id="2e7ae-302">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-302">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-303">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-303">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-304">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.BasePriority%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-304">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.BasePriority%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#4](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-305">基本優先順位に無効な値が設定されています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-305">The base priority was set to an invalid value.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-306">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-306">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.FormatName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginPeek">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <threadsafe><span data-ttu-id="2e7ae-307">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-307">The method is not thread safe.</span></span></threadsafe>
        <summary><span data-ttu-id="2e7ae-308">メッセージのピークを開始し、完了したときにイベント ハンドラーに通知するようにメッセージ キューに指示して、非同期のピーク操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-308">Initiates an asynchronous peek operation by telling Message Queuing to begin peeking a message and notify the event handler when finished.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginPeek">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginPeek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginPeek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.BeginPeek" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginPeek () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginPeek();" />
      <MemberSignature Language="F#" Value="member this.BeginPeek : unit -&gt; IAsyncResult" Usage="messageQueue.BeginPeek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-309">タイムアウトのない非同期のピーク操作を実行します。操作は、キューのメッセージが利用可能になるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-309">Initiates an asynchronous peek operation that has no time-out. The operation is not complete until a message becomes available in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-310">ポストされた非同期要求を識別する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-310">The <see cref="T:System.IAsyncResult" /> that identifies the posted asynchronous request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-311">非同期処理では、を<xref:System.Messaging.MessageQueue.BeginPeek%2A>使用して<xref:System.Messaging.MessageQueue.PeekCompleted> 、キューでメッセージが使用可能になったときにイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-311">In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-312"><xref:System.Messaging.MessageQueue.PeekCompleted>は、メッセージが既にキューに存在する場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-312"><xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-313">を使用<xref:System.Messaging.MessageQueue.BeginPeek%2A>するには、非同期操作の結果を処理してイベントデリゲートに関連付けるイベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-313">To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate.</span></span> <span data-ttu-id="2e7ae-314"><xref:System.Messaging.MessageQueue.BeginPeek%2A>非同期のピーク操作を開始します。は、メッセージ<xref:System.Messaging.MessageQueue.PeekCompleted> がキューに到着すると、イベントの発生時に通知 <xref:System.Messaging.MessageQueue> されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-314"><xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-315">次に、を呼び出し<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>て、またはを使用して結果を<xref:System.Messaging.PeekCompletedEventArgs>取得することによって、メッセージにアクセスできます。 <xref:System.Messaging.MessageQueue></span><span class="sxs-lookup"><span data-stu-id="2e7ae-315">The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="2e7ae-316">メソッド<xref:System.Messaging.MessageQueue.BeginPeek%2A>はすぐにを返しますが、非同期操作は、イベントハンドラーが呼び出されるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-316">The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.</span></span>  
  
 <span data-ttu-id="2e7ae-317">は<xref:System.Messaging.MessageQueue.BeginPeek%2A>非同期であるため、このメソッドを呼び出して、現在の実行スレッドをブロックせずにキューをピークすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-317">Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution.</span></span> <span data-ttu-id="2e7ae-318">キューを同期的にピークするに<xref:System.Messaging.MessageQueue.Peek%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-318">To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-319">非同期操作が完了したら、イベントハンドラー <xref:System.Messaging.MessageQueue.BeginPeek%2A>で<xref:System.Messaging.MessageQueue.BeginReceive%2A>またはを呼び出して、通知を受信し続けることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-319">Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.</span></span>  
  
 <span data-ttu-id="2e7ae-320">返さ<xref:System.IAsyncResult> れる <xref:System.Messaging.MessageQueue.BeginPeek%2A> は、メソッドが開始した非同期操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-320">The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started.</span></span> <span data-ttu-id="2e7ae-321">これ<xref:System.IAsyncResult>は、操作の有効期間全体にわたって使用できます。ただし、が呼び出さ<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>れるまでは通常は使用しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-321">You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called.</span></span> <span data-ttu-id="2e7ae-322">ただし、複数の非同期操作を開始する場合は、それら<xref:System.IAsyncResult>の値を配列に格納し、すべての操作または操作が完了するまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-322">However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete.</span></span> <span data-ttu-id="2e7ae-323">この場合は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.IAsyncResult>のプロパティを使用して、完了した操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-323">In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.</span></span>  
  
 <span data-ttu-id="2e7ae-324">が<xref:System.Messaging.MessageQueue.CanRead%2A> <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>の場合、完了イベントが発生しますが、を呼び出すと例外がスローされます。 `false`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-324">If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-325">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-325">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-326">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-326">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-327">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-327">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-328">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-328">Local computer</span></span>|<span data-ttu-id="2e7ae-329">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-329">Yes</span></span>|  
|<span data-ttu-id="2e7ae-330">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-330">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-331">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-331">Yes</span></span>|  
|<span data-ttu-id="2e7ae-332">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-332">Remote computer</span></span>|<span data-ttu-id="2e7ae-333">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-333">No</span></span>|  
|<span data-ttu-id="2e7ae-334">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-334">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-335">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-335">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-336">次のコード例では、という`MyPeekCompleted`名前のイベントハンドラーを<xref:System.Messaging.MessageQueue.PeekCompleted>作成し、それをイベント<xref:System.Messaging.MessageQueue.BeginPeek%2A>ハンドラーデリゲートにアタッチし、を呼び出して、パス ".\myQueue" にあるキューで非同期のピーク操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-336">The following code example creates an event handler named `MyPeekCompleted`, attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> to initiate an asynchronous peek operation on the queue that is located at the path ".\myQueue".</span></span> <span data-ttu-id="2e7ae-337"><xref:System.Messaging.MessageQueue.PeekCompleted>イベントが発生すると、この例では、メッセージをピークし、その本文を画面に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-337">When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the example peeks the message and writes its body to the screen.</span></span> <span data-ttu-id="2e7ae-338">この例では<xref:System.Messaging.MessageQueue.BeginPeek%2A> 、を再度呼び出して、新しい非同期ピーク操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-338">The example then calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> again to initiate a new asynchronous peek operation.</span></span>  
  
 [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CPP/mqbeginpeek_noparms.cpp#1)]
 [!code-csharp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CS/mqbeginpeek_noparms.cs#1)]
 [!code-vb[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/VB/mqbeginpeek_noparms.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-339">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-339">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-340">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-340">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="E:System.Messaging.MessageQueue.PeekCompleted" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName="BeginPeek">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginPeek (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginPeek(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginPeek (timeout As TimeSpan) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginPeek(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.BeginPeek : TimeSpan -&gt; IAsyncResult" Usage="messageQueue.BeginPeek timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-341">メッセージを使用できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-341">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</span></span></param>
        <summary><span data-ttu-id="2e7ae-342">指定したタイムアウトのある非同期のピーク操作を実行します。この操作は、メッセージをキューで使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-342">Initiates an asynchronous peek operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-343">ポストされた非同期要求を識別する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-343">The <see cref="T:System.IAsyncResult" /> that identifies the posted asynchronous request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-344">非同期処理では、を<xref:System.Messaging.MessageQueue.BeginPeek%2A>使用して<xref:System.Messaging.MessageQueue.PeekCompleted> 、メッセージがキューで使用可能になったとき、または指定した時間が経過したときにイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-344">In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.</span></span>  
  
 <span data-ttu-id="2e7ae-345"><xref:System.Messaging.MessageQueue.PeekCompleted>は、メッセージが既にキューに存在する場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-345"><xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-346">を使用<xref:System.Messaging.MessageQueue.BeginPeek%2A>するには、非同期操作の結果を処理してイベントデリゲートに関連付けるイベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-346">To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate.</span></span> <span data-ttu-id="2e7ae-347"><xref:System.Messaging.MessageQueue.BeginPeek%2A>非同期のピーク操作を開始します。は、メッセージ<xref:System.Messaging.MessageQueue.PeekCompleted> がキューに到着すると、イベントの発生時に通知 <xref:System.Messaging.MessageQueue> されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-347"><xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-348">次に、を呼び出し<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>て、またはを使用して結果を<xref:System.Messaging.PeekCompletedEventArgs>取得することによって、メッセージにアクセスできます。 <xref:System.Messaging.MessageQueue></span><span class="sxs-lookup"><span data-stu-id="2e7ae-348">The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="2e7ae-349">メソッド<xref:System.Messaging.MessageQueue.BeginPeek%2A>はすぐにを返しますが、非同期操作は、イベントハンドラーが呼び出されるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-349">The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.</span></span>  
  
 <span data-ttu-id="2e7ae-350">は<xref:System.Messaging.MessageQueue.BeginPeek%2A>非同期であるため、このメソッドを呼び出して、現在の実行スレッドをブロックせずにキューをピークすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-350">Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution.</span></span> <span data-ttu-id="2e7ae-351">キューを同期的にピークするに<xref:System.Messaging.MessageQueue.Peek%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-351">To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-352">非同期操作が完了したら、イベントハンドラー <xref:System.Messaging.MessageQueue.BeginPeek%2A>で<xref:System.Messaging.MessageQueue.BeginReceive%2A>またはを呼び出して、通知を受信し続けることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-352">Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.</span></span>  
  
 <span data-ttu-id="2e7ae-353">返さ<xref:System.IAsyncResult> れる <xref:System.Messaging.MessageQueue.BeginPeek%2A> は、メソッドが開始した非同期操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-353">The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started.</span></span> <span data-ttu-id="2e7ae-354">これ<xref:System.IAsyncResult>は、操作の有効期間全体にわたって使用できます。ただし、が呼び出さ<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>れるまでは通常は使用しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-354">You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called.</span></span> <span data-ttu-id="2e7ae-355">ただし、複数の非同期操作を開始する場合は、それら<xref:System.IAsyncResult>の値を配列に格納し、すべての操作または操作が完了するまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-355">However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete.</span></span> <span data-ttu-id="2e7ae-356">この場合は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.IAsyncResult>のプロパティを使用して、完了した操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-356">In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.</span></span>  
  
 <span data-ttu-id="2e7ae-357">このオーバーロードは、タイムアウトを指定します。`timeout`パラメーターで指定した間隔が経過すると、このコンポーネント<xref:System.Messaging.MessageQueue.PeekCompleted>はイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-357">This overload specifies a time-out. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event.</span></span> <span data-ttu-id="2e7ae-358">メッセージが存在しないため、後続の<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>への呼び出しでは例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-358">Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception.</span></span>  
  
 <span data-ttu-id="2e7ae-359">が<xref:System.Messaging.MessageQueue.CanRead%2A> <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>の場合、完了イベントが発生しますが、を呼び出すと例外がスローされます。 `false`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-359">If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-360">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-360">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-361">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-361">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-362">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-362">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-363">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-363">Local computer</span></span>|<span data-ttu-id="2e7ae-364">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-364">Yes</span></span>|  
|<span data-ttu-id="2e7ae-365">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-365">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-366">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-366">Yes</span></span>|  
|<span data-ttu-id="2e7ae-367">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-367">Remote computer</span></span>|<span data-ttu-id="2e7ae-368">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-368">No</span></span>|  
|<span data-ttu-id="2e7ae-369">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-369">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-370">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-370">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-371">次のコード例では、キューのパス ".\myQueue" を使用して、非同期のピーク操作を作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-371">The following code example creates an asynchronous peek operation, using the queue path ".\myQueue".</span></span> <span data-ttu-id="2e7ae-372">イベントハンドラー `MyPeekCompleted`を作成し、 <xref:System.Messaging.MessageQueue.PeekCompleted>イベントハンドラーデリゲートにアタッチします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-372">It creates an event handler, `MyPeekCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate.</span></span> <span data-ttu-id="2e7ae-373"><xref:System.Messaging.MessageQueue.BeginPeek%2A>は、非同期のピーク操作を開始するために、1分のタイムアウトで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-373"><xref:System.Messaging.MessageQueue.BeginPeek%2A> is called with a time-out of one minute, to initiate the asynchronous peek operation.</span></span> <span data-ttu-id="2e7ae-374"><xref:System.Messaging.MessageQueue.PeekCompleted>イベントが発生するか、タイムアウトの時間が経過すると、メッセージが存在する場合はメッセージが取得され、本文は画面に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-374">When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised or the time-out expires, the message is retrieved if one exists, and its body is written to the screen.</span></span> <span data-ttu-id="2e7ae-375">次<xref:System.Messaging.MessageQueue.BeginPeek%2A>に、を再度呼び出して、同じタイムアウトを持つ新しい非同期ピーク操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-375">Then <xref:System.Messaging.MessageQueue.BeginPeek%2A> is called again to initiate a new asynchronous peek operation with the same time-out.</span></span>  
  
 [!code-cpp[MessageQueue.BeginPeek_timeout#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_timeout/CPP/mqbeginpeek_timeout.cpp#1)]
 [!code-csharp[MessageQueue.BeginPeek_timeout#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_timeout/CS/mqbeginpeek_timeout.cs#1)]
 [!code-vb[MessageQueue.BeginPeek_timeout#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_timeout/VB/mqbeginpeek_timeout.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-376"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-376">The value specified for the <paramref name="timeout" /> parameter is not valid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-377">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-377">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-378">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-378">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="E:System.Messaging.MessageQueue.PeekCompleted" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="BeginPeek">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginPeek (TimeSpan timeout, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginPeek(valuetype System.TimeSpan timeout, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginPeek (timeout As TimeSpan, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginPeek(TimeSpan timeout, System::Object ^ stateObject);" />
      <MemberSignature Language="F#" Value="member this.BeginPeek : TimeSpan * obj -&gt; IAsyncResult" Usage="messageQueue.BeginPeek (timeout, stateObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-379">メッセージを使用できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-379">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</span></span></param>
        <param name="stateObject"><span data-ttu-id="2e7ae-380">非同期操作に関連付けられている情報を保持する状態オブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-380">A state object, specified by the application, that contains information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="2e7ae-381">指定したタイムアウトと指定した状態オブジェクトを持つ非同期のピーク操作を実行します。状態オブジェクトは、操作の有効期間を通じて関連付けられた情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-381">Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime.</span></span> <span data-ttu-id="2e7ae-382">この操作は、メッセージをキューで使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-382">The operation is not complete until either a message becomes available in the queue or the time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-383">ポストされた非同期要求を識別する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-383">The <see cref="T:System.IAsyncResult" /> that identifies the posted asynchronous request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-384">非同期処理では、を<xref:System.Messaging.MessageQueue.BeginPeek%2A>使用して<xref:System.Messaging.MessageQueue.PeekCompleted> 、メッセージがキューで使用可能になったとき、または指定した時間が経過したときにイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-384">In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.</span></span>  
  
 <span data-ttu-id="2e7ae-385"><xref:System.Messaging.MessageQueue.PeekCompleted>は、メッセージが既にキューに存在する場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-385"><xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-386">このオーバーロードを使用して、操作の有効期間全体にわたって保持される操作に情報を関連付けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-386">Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime.</span></span> <span data-ttu-id="2e7ae-387">イベントハンドラーは、操作に関連付けられて<xref:System.IAsyncResult.AsyncState%2A>いる<xref:System.IAsyncResult>のプロパティを参照することによって、この情報にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-387">The event handler can access this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.</span></span>  
  
 <span data-ttu-id="2e7ae-388">を使用<xref:System.Messaging.MessageQueue.BeginPeek%2A>するには、非同期操作の結果を処理してイベントデリゲートに関連付けるイベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-388">To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate.</span></span> <span data-ttu-id="2e7ae-389"><xref:System.Messaging.MessageQueue.BeginPeek%2A>非同期のピーク操作を開始します。は、メッセージ<xref:System.Messaging.MessageQueue.PeekCompleted> がキューに到着すると、イベントの発生時に通知 <xref:System.Messaging.MessageQueue> されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-389"><xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-390">次に、を呼び出し<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>て、またはを使用して結果を<xref:System.Messaging.PeekCompletedEventArgs>取得することによって、メッセージにアクセスできます。 <xref:System.Messaging.MessageQueue></span><span class="sxs-lookup"><span data-stu-id="2e7ae-390">The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="2e7ae-391">メソッド<xref:System.Messaging.MessageQueue.BeginPeek%2A>はすぐにを返しますが、非同期操作は、イベントハンドラーが呼び出されるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-391">The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.</span></span>  
  
 <span data-ttu-id="2e7ae-392">は<xref:System.Messaging.MessageQueue.BeginPeek%2A>非同期であるため、このメソッドを呼び出して、現在の実行スレッドをブロックせずにキューをピークすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-392">Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution.</span></span> <span data-ttu-id="2e7ae-393">キューを同期的にピークするに<xref:System.Messaging.MessageQueue.Peek%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-393">To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-394">非同期操作が完了したら、イベントハンドラー <xref:System.Messaging.MessageQueue.BeginPeek%2A>で<xref:System.Messaging.MessageQueue.BeginReceive%2A>またはを呼び出して、通知を受信し続けることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-394">Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.</span></span>  
  
 <span data-ttu-id="2e7ae-395"><xref:System.Messaging.MessageQueue.BeginPeek%2A>メソッドが<xref:System.IAsyncResult>開始した非同期操作を識別するを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-395"><xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started.</span></span> <span data-ttu-id="2e7ae-396">これ<xref:System.IAsyncResult>は、操作の有効期間全体にわたって使用できます。ただし、が呼び出さ<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>れるまでは通常は使用しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-396">You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called.</span></span> <span data-ttu-id="2e7ae-397">ただし、複数の非同期操作を開始する場合は、それら<xref:System.IAsyncResult>の値を配列に格納し、すべての操作または操作が完了するまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-397">However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete.</span></span> <span data-ttu-id="2e7ae-398">この場合は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.IAsyncResult>のプロパティを使用して、完了した操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-398">In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.</span></span>  
  
 <span data-ttu-id="2e7ae-399">このオーバーロードは、タイムアウトと状態オブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-399">This overload specifies a time-out and a state object.</span></span> <span data-ttu-id="2e7ae-400">`timeout`パラメーターで指定した間隔が経過すると、このコンポーネント<xref:System.Messaging.MessageQueue.PeekCompleted>はイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-400">If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event.</span></span> <span data-ttu-id="2e7ae-401">メッセージが存在しないため、後続の<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>への呼び出しでは例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-401">Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception.</span></span>  
  
 <span data-ttu-id="2e7ae-402">状態オブジェクトは、状態情報を操作に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-402">The state object associates state information with the operation.</span></span> <span data-ttu-id="2e7ae-403">たとえば、複数回を呼び出し<xref:System.Messaging.MessageQueue.BeginPeek%2A>て複数の操作を開始する場合は、定義した個別の状態オブジェクトを使用して各操作を識別できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-403">For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.</span></span> <span data-ttu-id="2e7ae-404">このシナリオの図解は、「例」のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-404">For an illustration of this scenario, see the Example section.</span></span>  
  
 <span data-ttu-id="2e7ae-405">また、state オブジェクトを使用して、プロセススレッド間で情報を渡すこともできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-405">You can also use the state object to pass information across process threads.</span></span> <span data-ttu-id="2e7ae-406">スレッドが開始されていても、コールバックが非同期シナリオの別のスレッドにある場合は、状態オブジェクトがマーシャリングされ、イベントからの情報と共に返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-406">If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.</span></span>  
  
 <span data-ttu-id="2e7ae-407">が<xref:System.Messaging.MessageQueue.CanRead%2A> <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>の場合、完了イベントが発生しますが、を呼び出すと例外がスローされます。 `false`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-407">If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-408">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-408">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-409">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-409">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-410">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-410">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-411">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-411">Local computer</span></span>|<span data-ttu-id="2e7ae-412">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-412">Yes</span></span>|  
|<span data-ttu-id="2e7ae-413">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-413">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-414">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-414">Yes</span></span>|  
|<span data-ttu-id="2e7ae-415">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-415">Remote computer</span></span>|<span data-ttu-id="2e7ae-416">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-416">No</span></span>|  
|<span data-ttu-id="2e7ae-417">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-417">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-418">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-418">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-419">次のコード例では、キューのパス ".\myQueue" を使用して、非同期のピーク操作を作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-419">The following code example creates an asynchronous peek operation, using the queue path ".\myQueue".</span></span> <span data-ttu-id="2e7ae-420">イベントハンドラー `MyPeekCompleted`を作成し、 <xref:System.Messaging.MessageQueue.PeekCompleted>イベントハンドラーデリゲートにアタッチします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-420">It creates an event handler, `MyPeekCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate.</span></span> <span data-ttu-id="2e7ae-421"><xref:System.Messaging.MessageQueue.BeginPeek%2A>は、1分のタイムアウトを使用して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-421"><xref:System.Messaging.MessageQueue.BeginPeek%2A> is called, with a time-out of one minute.</span></span> <span data-ttu-id="2e7ae-422">へ<xref:System.Messaging.MessageQueue.BeginPeek%2A>の各呼び出しには、その特定の操作を識別する一意の関連付けられた整数があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-422">Each call to <xref:System.Messaging.MessageQueue.BeginPeek%2A> has a unique associated integer that identifies that particular operation.</span></span> <span data-ttu-id="2e7ae-423"><xref:System.Messaging.MessageQueue.PeekCompleted>イベントが発生するか、タイムアウトの時間が経過すると、メッセージが存在する場合はメッセージが取得され、本文および操作固有の整数識別子が画面に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-423">When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised or the time-out expired, the message, if one exists, is retrieved and its body and the operation-specific integer identifier are written to the screen.</span></span> <span data-ttu-id="2e7ae-424">次<xref:System.Messaging.MessageQueue.BeginPeek%2A>に、が再度呼び出され、同じタイムアウトと、完了した直前の操作の関連付けられた整数を使用して、新しい非同期ピーク操作が開始されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-424">Then <xref:System.Messaging.MessageQueue.BeginPeek%2A> is called again to initiate a new asynchronous peek operation with the same time-out and the associated integer of the just completed operation.</span></span>  
  
 [!code-cpp[MessageQueue.BeginPeek_TimeSpanStateObject#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_TimeSpanStateObject/CPP/mqbeginpeek_timeoutstateobject.cpp#1)]
 [!code-csharp[MessageQueue.BeginPeek_TimeSpanStateObject#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_TimeSpanStateObject/CS/mqbeginpeek_timeoutstateobject.cs#1)]
 [!code-vb[MessageQueue.BeginPeek_TimeSpanStateObject#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_TimeSpanStateObject/VB/mqbeginpeek_timeoutstateobject.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-425"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-425">The value specified for the <paramref name="timeout" /> parameter is not valid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-426">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-426">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-427">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-427">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="E:System.Messaging.MessageQueue.PeekCompleted" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="BeginPeek">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginPeek (TimeSpan timeout, object stateObject, AsyncCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginPeek(valuetype System.TimeSpan timeout, object stateObject, class System.AsyncCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginPeek (timeout As TimeSpan, stateObject As Object, callback As AsyncCallback) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginPeek(TimeSpan timeout, System::Object ^ stateObject, AsyncCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.BeginPeek : TimeSpan * obj * AsyncCallback -&gt; IAsyncResult" Usage="messageQueue.BeginPeek (timeout, stateObject, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="stateObject" Type="System.Object" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-428">メッセージを使用できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-428">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</span></span></param>
        <param name="stateObject"><span data-ttu-id="2e7ae-429">非同期操作に関連付けられている情報を保持する状態オブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-429">A state object, specified by the application, that contains information associated with the asynchronous operation.</span></span></param>
        <param name="callback"><span data-ttu-id="2e7ae-430">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-430">The <see cref="T:System.AsyncCallback" /> that will receive the notification of the asynchronous operation completion.</span></span></param>
        <summary><span data-ttu-id="2e7ae-431">指定したタイムアウトと指定した状態オブジェクトを持つ非同期のピーク操作を実行します。状態オブジェクトは、操作の有効期間を通じて関連付けられた情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-431">Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime.</span></span> <span data-ttu-id="2e7ae-432">このオーバーロードは、コールバックを通じて操作のイベント ハンドラー ID の通知を受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-432">This overload receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="2e7ae-433">この操作は、メッセージをキューで使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-433">The operation is not complete until either a message becomes available in the queue or the time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-434">ポストされた非同期要求を識別する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-434">The <see cref="T:System.IAsyncResult" /> that identifies the posted asynchronous request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-435">このオーバーロードを使用すると、メッセージがキューで利用可能になるか、指定した時間が経過したときに、callback パラメーターで指定されたコールバックが直接呼び出されます。<xref:System.Messaging.MessageQueue.PeekCompleted>イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-435">When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised.</span></span> <span data-ttu-id="2e7ae-436">の<xref:System.Messaging.MessageQueue.BeginPeek%2A>他のオーバーロードは、このコンポーネントに依存し<xref:System.Messaging.MessageQueue.PeekCompleted>てイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-436">The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.</span></span>  
  
 <span data-ttu-id="2e7ae-437"><xref:System.Messaging.MessageQueue.PeekCompleted>は、メッセージが既にキューに存在する場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-437"><xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-438">メソッド<xref:System.Messaging.MessageQueue.BeginPeek%2A>はすぐにを返しますが、非同期操作は、イベントハンドラーが呼び出されるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-438">The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.</span></span>  
  
 <span data-ttu-id="2e7ae-439">は<xref:System.Messaging.MessageQueue.BeginPeek%2A>非同期であるため、このメソッドを呼び出して、現在の実行スレッドをブロックせずにキューをピークすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-439">Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution.</span></span> <span data-ttu-id="2e7ae-440">キューを同期的にピークするに<xref:System.Messaging.MessageQueue.Peek%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-440">To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-441">非同期操作が完了したら、イベントハンドラー <xref:System.Messaging.MessageQueue.BeginPeek%2A>で<xref:System.Messaging.MessageQueue.BeginReceive%2A>またはを呼び出して、通知を受信し続けることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-441">Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.</span></span>  
  
 <span data-ttu-id="2e7ae-442"><xref:System.Messaging.MessageQueue.BeginPeek%2A>メソッドが<xref:System.IAsyncResult>開始した非同期操作を識別するを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-442"><xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started.</span></span> <span data-ttu-id="2e7ae-443">これ<xref:System.IAsyncResult>は、操作の有効期間全体にわたって使用できます。ただし、が呼び出さ<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>れるまでは通常は使用しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-443">You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called.</span></span> <span data-ttu-id="2e7ae-444">ただし、複数の非同期操作を開始する場合は、それら<xref:System.IAsyncResult>の値を配列に格納し、すべての操作または操作が完了するまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-444">However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete.</span></span> <span data-ttu-id="2e7ae-445">この場合は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.IAsyncResult>のプロパティを使用して、完了した操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-445">In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.</span></span>  
  
 <span data-ttu-id="2e7ae-446">状態オブジェクトは、状態情報を操作に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-446">The state object associates state information with the operation.</span></span> <span data-ttu-id="2e7ae-447">たとえば、複数回を呼び出し<xref:System.Messaging.MessageQueue.BeginPeek%2A>て複数の操作を開始する場合は、定義した個別の状態オブジェクトを使用して各操作を識別できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-447">For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.</span></span>  
  
 <span data-ttu-id="2e7ae-448">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-448">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-449">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-449">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-450">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-450">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-451">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-451">Local computer</span></span>|<span data-ttu-id="2e7ae-452">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-452">Yes</span></span>|  
|<span data-ttu-id="2e7ae-453">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-453">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-454">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-454">Yes</span></span>|  
|<span data-ttu-id="2e7ae-455">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-455">Remote computer</span></span>|<span data-ttu-id="2e7ae-456">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-456">No</span></span>|  
|<span data-ttu-id="2e7ae-457">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-457">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-458">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-458">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-459">次のコード例では、非同期のピーク操作を作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-459">The following code example creates an asynchronous peek operation.</span></span> <span data-ttu-id="2e7ae-460">このコード例では、メッセージをローカルのメッセージキューに送信<xref:System.Messaging.MessageQueue.BeginPeek%28System.TimeSpan%2CSystem.Object%2CSystem.AsyncCallback%29>し、を呼び出します。これには、10秒のタイムアウト値、特定のメッセージを識別する一意の整数、および<xref:System.AsyncCallback>イベントハンドラーを識別するの新しいインスタンスが含まれます。`MyPeekCompleted`.</span><span class="sxs-lookup"><span data-stu-id="2e7ae-460">The code example sends a message to a local message queue, then calls <xref:System.Messaging.MessageQueue.BeginPeek%28System.TimeSpan%2CSystem.Object%2CSystem.AsyncCallback%29>, passing in: a time-out value of ten seconds; a unique integer that identifies that particular message; and a new instance of <xref:System.AsyncCallback> that identifies the event handler, `MyPeekCompleted`.</span></span> <span data-ttu-id="2e7ae-461"><xref:System.Messaging.MessageQueue.PeekCompleted>イベントが発生すると、イベントハンドラーはメッセージをピークし、メッセージ本文と整数メッセージ識別子を画面に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-461">When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the event handler peeks at the message and writes the message body and the integer message identifier to the screen.</span></span>  
  
 [!code-cpp[MessageQueueBeginPeek#0](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueueBeginPeek/cpp/class1.cpp#0)]
 [!code-csharp[MessageQueueBeginPeek#0](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueueBeginPeek/CS/class1.cs#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-462"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-462">The value specified for the <paramref name="timeout" /> parameter is not valid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-463">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-463">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-464">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-464">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="E:System.Messaging.MessageQueue.PeekCompleted" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="BeginPeek">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginPeek (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.PeekAction action, object state, AsyncCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginPeek(valuetype System.TimeSpan timeout, class System.Messaging.Cursor cursor, valuetype System.Messaging.PeekAction action, object state, class System.AsyncCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginPeek(TimeSpan timeout, System::Messaging::Cursor ^ cursor, System::Messaging::PeekAction action, System::Object ^ state, AsyncCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.BeginPeek : TimeSpan * System.Messaging.Cursor * System.Messaging.PeekAction * obj * AsyncCallback -&gt; IAsyncResult" Usage="messageQueue.BeginPeek (timeout, cursor, action, state, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cursor" Type="System.Messaging.Cursor" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="action" Type="System.Messaging.PeekAction" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="4" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-465">メッセージを使用できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-465">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</span></span></param>
        <param name="cursor"><span data-ttu-id="2e7ae-466">メッセージ キュー内の特定の位置を維持する <see cref="T:System.Messaging.Cursor" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-466">A <see cref="T:System.Messaging.Cursor" /> that maintains a specific position in the message queue.</span></span></param>
        <param name="action"><span data-ttu-id="2e7ae-467"><see cref="T:System.Messaging.PeekAction" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-467">One of the <see cref="T:System.Messaging.PeekAction" /> values.</span></span> <span data-ttu-id="2e7ae-468">キュー内の現在のメッセージと次のメッセージのどちらをピークするかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-468">Indicates whether to peek at the current message in the queue, or the next message.</span></span></param>
        <param name="state"><span data-ttu-id="2e7ae-469">非同期操作に関連付けられている情報を保持する状態オブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-469">A state object, specified by the application, that contains information associated with the asynchronous operation.</span></span></param>
        <param name="callback"><span data-ttu-id="2e7ae-470">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-470">The <see cref="T:System.AsyncCallback" /> that receives the notification of the asynchronous operation completion.</span></span></param>
        <summary><span data-ttu-id="2e7ae-471">指定したタイムアウトがあり、指定したカーソル、ピーク処理、および状態オブジェクトを使用する非同期のピーク操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-471">Initiates an asynchronous peek operation that has a specified time-out and that uses a specified cursor, a specified peek action, and a specified state object.</span></span> <span data-ttu-id="2e7ae-472">状態オブジェクトは、操作の有効期間を通じて、関連付けられた情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-472">The state object provides associated information throughout the lifetime of the operation.</span></span> <span data-ttu-id="2e7ae-473">このオーバーロードは、コールバックを通じて操作のイベント ハンドラー ID の通知を受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-473">This overload receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="2e7ae-474">この操作は、メッセージをキューで使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-474">The operation is not complete until either a message becomes available in the queue or the time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-475">ポストされた非同期要求を識別する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-475">The <see cref="T:System.IAsyncResult" /> that identifies the posted asynchronous request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-476">このオーバーロードを使用すると、メッセージがキューで使用可能になったとき、または指定した時間間隔が経過したときに、callback パラメーターで指定されたコールバックが直接呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-476">When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired.</span></span> <span data-ttu-id="2e7ae-477"><xref:System.Messaging.MessageQueue.PeekCompleted>イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-477">The <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised.</span></span> <span data-ttu-id="2e7ae-478">の<xref:System.Messaging.MessageQueue.BeginPeek%2A>他のオーバーロードは、このコンポーネントに依存し<xref:System.Messaging.MessageQueue.PeekCompleted>てイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-478">The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.</span></span>  
  
 <span data-ttu-id="2e7ae-479"><xref:System.Messaging.MessageQueue.PeekCompleted>は、メッセージが既にキューに存在する場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-479"><xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-480">メソッド<xref:System.Messaging.MessageQueue.BeginPeek%2A>はすぐにを返しますが、非同期操作は、イベントハンドラーが呼び出されるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-480">The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.</span></span>  
  
 <span data-ttu-id="2e7ae-481">は<xref:System.Messaging.MessageQueue.BeginPeek%2A>非同期であるため、このメソッドを呼び出して、現在の実行スレッドをブロックせずにキューをピークすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-481">Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution.</span></span> <span data-ttu-id="2e7ae-482">キューを同期的にピークするに<xref:System.Messaging.MessageQueue.Peek%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-482">To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-483">非同期操作が完了したら、イベントハンドラー <xref:System.Messaging.MessageQueue.BeginPeek%2A>で<xref:System.Messaging.MessageQueue.BeginReceive%2A>またはを呼び出して、通知を受信し続けることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-483">Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.</span></span>  
  
 <span data-ttu-id="2e7ae-484"><xref:System.Messaging.MessageQueue.BeginPeek%2A>メソッドに<xref:System.IAsyncResult>よって開始された非同期操作を識別するを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-484"><xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation started by the method.</span></span> <span data-ttu-id="2e7ae-485">これ<xref:System.IAsyncResult>は、操作の有効期間全体にわたって使用できます。ただし、が呼び出さ<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>れるまでは通常は使用しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-485">You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called.</span></span> <span data-ttu-id="2e7ae-486">ただし、複数の非同期操作を開始する場合は、それら<xref:System.IAsyncResult>の値を配列に格納し、すべての操作または操作が完了するまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-486">However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete.</span></span> <span data-ttu-id="2e7ae-487">この場合は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.IAsyncResult>のプロパティを使用して、完了した操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-487">In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.</span></span>  
  
 <span data-ttu-id="2e7ae-488">状態オブジェクトは、状態情報を操作に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-488">The state object associates state information with the operation.</span></span> <span data-ttu-id="2e7ae-489">たとえば、複数回を呼び出し<xref:System.Messaging.MessageQueue.BeginPeek%2A>て複数の操作を開始する場合は、定義した個別の状態オブジェクトを使用して各操作を識別できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-489">For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.</span></span>  
  
 <span data-ttu-id="2e7ae-490">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-490">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-491">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-491">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-492">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-492">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-493">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-493">Local computer</span></span>|<span data-ttu-id="2e7ae-494">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-494">Yes</span></span>|  
|<span data-ttu-id="2e7ae-495">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-495">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-496">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-496">Yes</span></span>|  
|<span data-ttu-id="2e7ae-497">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-497">Remote computer</span></span>|<span data-ttu-id="2e7ae-498">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-498">No</span></span>|  
|<span data-ttu-id="2e7ae-499">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-499">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-500">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-500">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2e7ae-501"><paramref name="action" /> パラメーターに <see langword="PeekAction.Current" /> または <see langword="PeekAction.Next" /> 以外の値が指定されました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-501">A value other than <see langword="PeekAction.Current" /> or <see langword="PeekAction.Next" /> was specified for the <paramref name="action" /> parameter.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-502"><paramref name="cursor" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-502">The <paramref name="cursor" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-503"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-503">The value specified for the <paramref name="timeout" /> parameter is not valid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-504">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-504">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-505">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-505">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="E:System.Messaging.MessageQueue.PeekCompleted" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <threadsafe><span data-ttu-id="2e7ae-506">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-506">The method is not thread safe.</span></span></threadsafe>
        <summary><span data-ttu-id="2e7ae-507">メッセージの受信を開始し、完了したときにイベント ハンドラーに通知するようにメッセージ キューに指示して、非同期の受信操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-507">Initiates an asynchronous receive operation by telling Message Queuing to begin receiving a message and notify the event handler when finished.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.BeginReceive" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive();" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : unit -&gt; IAsyncResult" Usage="messageQueue.BeginReceive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-508">タイムアウトのない非同期の受信操作を実行します。操作は、キューのメッセージが利用可能になるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-508">Initiates an asynchronous receive operation that has no time-out. The operation is not complete until a message becomes available in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-509">ポストされた非同期要求を識別する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-509">The <see cref="T:System.IAsyncResult" /> that identifies the posted asynchronous request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-510">非同期処理では、を<xref:System.Messaging.MessageQueue.BeginReceive%2A>使用して<xref:System.Messaging.MessageQueue.ReceiveCompleted> 、キューからメッセージが削除されたときにイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-510">In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message has been removed from the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-511"><xref:System.Messaging.MessageQueue.ReceiveCompleted>は、メッセージが既にキューに存在する場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-511"><xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-512">を使用<xref:System.Messaging.MessageQueue.BeginReceive%2A>するには、非同期操作の結果を処理してイベントデリゲートに関連付けるイベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-512">To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate.</span></span> <span data-ttu-id="2e7ae-513"><xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期の受信操作を開始します。は、メッセージ<xref:System.Messaging.MessageQueue.ReceiveCompleted> がキューに到着すると、イベントの発生時に通知 <xref:System.Messaging.MessageQueue> されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-513"><xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-514">次<xref:System.Messaging.MessageQueue>に、を呼び出し<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>て、メッセージにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-514">The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-515">メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>はすぐにを返しますが、非同期操作は、イベントハンドラーが呼び出されるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-515">The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.</span></span>  
  
 <span data-ttu-id="2e7ae-516">は<xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期であるため、このメソッドを呼び出して、現在の実行スレッドをブロックせずにキューからメッセージを受信することができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-516">Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution.</span></span> <span data-ttu-id="2e7ae-517">同期的にメッセージを受信するに<xref:System.Messaging.MessageQueue.Receive%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-517">To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-518">非同期操作が完了したら、イベントハンドラー <xref:System.Messaging.MessageQueue.BeginPeek%2A>で<xref:System.Messaging.MessageQueue.BeginReceive%2A>またはを呼び出して、通知を受信し続けることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-518">Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.</span></span>  
  
 <span data-ttu-id="2e7ae-519">返さ<xref:System.IAsyncResult> れる <xref:System.Messaging.MessageQueue.BeginReceive%2A> は、メソッドが開始した非同期操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-519">The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started.</span></span> <span data-ttu-id="2e7ae-520">これ<xref:System.IAsyncResult>は、操作の有効期間全体にわたって使用できます。ただし、が呼び出さ<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>れるまでは通常は使用しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-520">You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called.</span></span> <span data-ttu-id="2e7ae-521">ただし、複数の非同期操作を開始する場合は、それら<xref:System.IAsyncResult>の値を配列に格納し、すべての操作または操作が完了するまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-521">However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete.</span></span> <span data-ttu-id="2e7ae-522">この場合は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.IAsyncResult>のプロパティを使用して、完了した操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-522">In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.</span></span>  
  
 <span data-ttu-id="2e7ae-523">が<xref:System.Messaging.MessageQueue.CanRead%2A> <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>の場合、完了イベントが発生しますが、を呼び出すと例外がスローされます。 `false`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-523">If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-524">トランザクションで非同期呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A>を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-524">Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions.</span></span> <span data-ttu-id="2e7ae-525">トランザクション非同期操作を実行する場合は、を呼び出し<xref:System.Messaging.MessageQueue.BeginPeek%2A>、トランザクションと (同期) <xref:System.Messaging.MessageQueue.Receive%2A>メソッドを peek 操作用に作成したイベントハンドラー内に配置します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-525">If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation.</span></span> <span data-ttu-id="2e7ae-526">イベントハンドラーには、次C#のコードに示すような機能が含まれている場合があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-526">Your event handler might contain functionality as shown in the following C# code.</span></span>  
  
```csharp  
myMessageQueue.BeginTransaction();  
 myMessageQueue.Receive();  
 myMessageQueue.CommitTransaction();  
```  
  
 <span data-ttu-id="2e7ae-527">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-527">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-528">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-528">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-529">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-529">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-530">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-530">Local computer</span></span>|<span data-ttu-id="2e7ae-531">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-531">Yes</span></span>|  
|<span data-ttu-id="2e7ae-532">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-532">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-533">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-533">Yes</span></span>|  
|<span data-ttu-id="2e7ae-534">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-534">Remote computer</span></span>|<span data-ttu-id="2e7ae-535">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-535">No</span></span>|  
|<span data-ttu-id="2e7ae-536">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-536">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-537">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-537">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-538">次のコード例では、非同期要求をチェーンします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-538">The following code example chains asynchronous requests.</span></span> <span data-ttu-id="2e7ae-539">これは、"myQueue" という名前のローカルコンピューターにキューがあることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-539">It assumes there is a queue on the local computer called "myQueue".</span></span> <span data-ttu-id="2e7ae-540">関数は、 `MyReceiveCompleted`ルーチンによって処理される非同期操作を開始します。 `Main`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-540">The `Main` function begins the asynchronous operation that is handled by the `MyReceiveCompleted` routine.</span></span> <span data-ttu-id="2e7ae-541">`MyReceiveCompleted`現在のメッセージを処理し、新しい非同期の受信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-541">`MyReceiveCompleted` processes the current message and begins a new asynchronous receive operation.</span></span>  
  
 [!code-cpp[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CPP/mqbeginreceive_noparms_mre.cpp#1)]
 [!code-csharp[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CS/mqbeginreceive_noparms_mre.cs#1)]
 [!code-vb[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/VB/mqbeginreceive_noparms_mre.vb#1)]  
  
 <span data-ttu-id="2e7ae-542">次のコード例では、非同期要求をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-542">The following code example queues asynchronous requests.</span></span> <span data-ttu-id="2e7ae-543">の呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A>は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A>戻り値にを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-543">The call to <xref:System.Messaging.MessageQueue.BeginReceive%2A> uses the <xref:System.IAsyncResult.AsyncWaitHandle%2A> in its return value.</span></span> <span data-ttu-id="2e7ae-544">ルーチン`Main`は、すべての非同期操作が完了するのを待ってから終了します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-544">The `Main` routine waits for all asynchronous operations to be completed before exiting.</span></span>  
  
 [!code-cpp[MessageQueue.BeginReceive_noparms_combined#2](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CPP/mqbeginreceive_noparms_wh.cpp#2)]
 [!code-csharp[MessageQueue.BeginReceive_noparms_combined#2](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CS/mqbeginreceive_noparms_wh.cs#2)]
 [!code-vb[MessageQueue.BeginReceive_noparms_combined#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/VB/mqbeginreceive_noparms_wh.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-545">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-545">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-546">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-546">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : TimeSpan -&gt; IAsyncResult" Usage="messageQueue.BeginReceive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-547">メッセージを使用できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-547">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</span></span></param>
        <summary><span data-ttu-id="2e7ae-548">指定したタイムアウトのある非同期の受信操作を実行します。この操作は、メッセージをキューで使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-548">Initiates an asynchronous receive operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-549">ポストされた非同期要求を識別する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-549">The <see cref="T:System.IAsyncResult" /> that identifies the posted asynchronous request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-550">非同期処理では、を<xref:System.Messaging.MessageQueue.BeginReceive%2A>使用して<xref:System.Messaging.MessageQueue.ReceiveCompleted> 、メッセージがキューで使用可能になったとき、または指定した時間が経過したときにイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-550">In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.</span></span>  
  
 <span data-ttu-id="2e7ae-551"><xref:System.Messaging.MessageQueue.ReceiveCompleted>は、メッセージが既にキューに存在する場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-551"><xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-552">を使用<xref:System.Messaging.MessageQueue.BeginReceive%2A>するには、非同期操作の結果を処理してイベントデリゲートに関連付けるイベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-552">To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate.</span></span> <span data-ttu-id="2e7ae-553"><xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期の受信操作を開始します。は、メッセージ<xref:System.Messaging.MessageQueue.ReceiveCompleted> がキューに到着すると、イベントの発生時に通知 <xref:System.Messaging.MessageQueue> されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-553"><xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-554">次に、を使用してを<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>呼び出すか、を使用<xref:System.Messaging.ReceiveCompletedEventArgs>して結果を取得することで、メッセージにアクセスできます。 <xref:System.Messaging.MessageQueue></span><span class="sxs-lookup"><span data-stu-id="2e7ae-554">The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="2e7ae-555">メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>はすぐにを返しますが、非同期操作は、イベントハンドラーが呼び出されるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-555">The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.</span></span>  
  
 <span data-ttu-id="2e7ae-556">は<xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期であるため、このメソッドを呼び出して、現在の実行スレッドをブロックせずにキューからメッセージを受信することができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-556">Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution.</span></span> <span data-ttu-id="2e7ae-557">同期的にメッセージを受信するに<xref:System.Messaging.MessageQueue.Receive%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-557">To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-558">非同期操作が完了したら、イベントハンドラー <xref:System.Messaging.MessageQueue.BeginPeek%2A>で<xref:System.Messaging.MessageQueue.BeginReceive%2A>またはを呼び出して、通知を受信し続けることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-558">Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.</span></span>  
  
 <span data-ttu-id="2e7ae-559">が<xref:System.Messaging.MessageQueue.CanRead%2A> <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>の場合、完了イベントが発生しますが、を呼び出すと例外がスローされます。 `false`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-559">If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-560">返さ<xref:System.IAsyncResult> れる <xref:System.Messaging.MessageQueue.BeginReceive%2A> は、メソッドが開始した非同期操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-560">The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started.</span></span> <span data-ttu-id="2e7ae-561">これ<xref:System.IAsyncResult>は、操作の有効期間全体にわたって使用できます。ただし、が呼び出さ<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>れるまでは通常は使用しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-561">You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called.</span></span> <span data-ttu-id="2e7ae-562">ただし、複数の非同期操作を開始する場合は、それら<xref:System.IAsyncResult>の値を配列に格納し、すべての操作または操作が完了するまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-562">However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete.</span></span> <span data-ttu-id="2e7ae-563">この場合は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.IAsyncResult>のプロパティを使用して、完了した操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-563">In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.</span></span>  
  
 <span data-ttu-id="2e7ae-564">このオーバーロードは、タイムアウトを指定します。`timeout`パラメーターで指定した間隔が経過すると、このコンポーネント<xref:System.Messaging.MessageQueue.ReceiveCompleted>はイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-564">This overload specifies a time-out. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.</span></span> <span data-ttu-id="2e7ae-565">メッセージが存在しないため、後続の<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>への呼び出しでは例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-565">Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception.</span></span>  
  
 <span data-ttu-id="2e7ae-566">トランザクションで非同期呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A>を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-566">Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions.</span></span> <span data-ttu-id="2e7ae-567">トランザクション非同期操作を実行する場合は、を呼び出し<xref:System.Messaging.MessageQueue.BeginPeek%2A>、トランザクションと (同期) <xref:System.Messaging.MessageQueue.Receive%2A>メソッドを peek 操作用に作成したイベントハンドラー内に配置します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-567">If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation.</span></span> <span data-ttu-id="2e7ae-568">イベントハンドラーには、次C#のコードに示すような機能が含まれている場合があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-568">Your event handler might contain functionality as shown in the following C# code.</span></span>  
  
```csharp  
myMessageQueue.BeginTransaction();  
 myMessageQueue.Receive();  
 myMessageQueue.CommitTransaction();  
```  
  
 <span data-ttu-id="2e7ae-569">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-569">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-570">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-570">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-571">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-571">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-572">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-572">Local computer</span></span>|<span data-ttu-id="2e7ae-573">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-573">Yes</span></span>|  
|<span data-ttu-id="2e7ae-574">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-574">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-575">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-575">Yes</span></span>|  
|<span data-ttu-id="2e7ae-576">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-576">Remote computer</span></span>|<span data-ttu-id="2e7ae-577">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-577">No</span></span>|  
|<span data-ttu-id="2e7ae-578">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-578">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-579">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-579">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-580">次のコード例では、非同期の受信操作を作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-580">The following code example creates an asynchronous receive operation.</span></span> <span data-ttu-id="2e7ae-581">このコード例では、イベントハンドラー `MyReceiveCompleted`を作成し、 <xref:System.Messaging.MessageQueue.ReceiveCompleted>イベントハンドラーデリゲートにアタッチします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-581">The code example creates an event handler, `MyReceiveCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event handler delegate.</span></span> <span data-ttu-id="2e7ae-582">このコード例では、メッセージをローカルのメッセージキューに送信<xref:System.Messaging.MessageQueue.BeginReceive%28System.TimeSpan%29>し、を呼び出して、タイムアウト値を10秒に渡します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-582">The code example sends a message to a local message queue, then calls <xref:System.Messaging.MessageQueue.BeginReceive%28System.TimeSpan%29>, passing in a time-out value of ten seconds.</span></span> <span data-ttu-id="2e7ae-583"><xref:System.Messaging.MessageQueue.ReceiveCompleted>イベントが発生すると、イベントハンドラーはメッセージを受信し、メッセージ本文を画面に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-583">When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the event handler receives the message and writes the message body to the screen.</span></span>  
  
 [!code-cpp[MessageQueueBeginReceive1#0](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueueBeginReceive1/cpp/class1.cpp#0)]
 [!code-csharp[MessageQueueBeginReceive1#0](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueueBeginReceive1/CS/class1.cs#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-584"><paramref name="timeout" /> パラメーターに指定された値が無効です。負数の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-584">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly because it represents a negative number.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-585">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-585">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-586">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-586">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, System::Object ^ stateObject);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : TimeSpan * obj -&gt; IAsyncResult" Usage="messageQueue.BeginReceive (timeout, stateObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-587">メッセージを使用できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-587">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</span></span></param>
        <param name="stateObject"><span data-ttu-id="2e7ae-588">非同期操作に関連付けられている情報を保持する状態オブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-588">A state object, specified by the application, that contains information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="2e7ae-589">指定したタイムアウトと指定した状態オブジェクトを持つ非同期の受信操作を実行します。状態オブジェクトは、操作の有効期間を通じて関連付けられた情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-589">Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime.</span></span> <span data-ttu-id="2e7ae-590">この操作は、メッセージをキューで使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-590">The operation is not complete until either a message becomes available in the queue or the time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-591">ポストされた非同期要求を識別する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-591">The <see cref="T:System.IAsyncResult" /> that identifies the posted asynchronous request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-592">非同期処理では、を<xref:System.Messaging.MessageQueue.BeginReceive%2A>使用して<xref:System.Messaging.MessageQueue.ReceiveCompleted> 、メッセージがキューで使用可能になったとき、または指定した時間が経過したときにイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-592">In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.</span></span>  
  
 <span data-ttu-id="2e7ae-593"><xref:System.Messaging.MessageQueue.ReceiveCompleted>は、メッセージが既にキューに存在する場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-593"><xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-594">このオーバーロードを使用して、操作の有効期間全体にわたって保持される操作に情報を関連付けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-594">Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime.</span></span> <span data-ttu-id="2e7ae-595">イベントハンドラーは、操作に関連付けられて<xref:System.IAsyncResult.AsyncState%2A>いる<xref:System.IAsyncResult>のプロパティを参照することによって、この情報を検出できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-595">The event handler can detect this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.</span></span>  
  
 <span data-ttu-id="2e7ae-596">を使用<xref:System.Messaging.MessageQueue.BeginReceive%2A>するには、非同期操作の結果を処理してイベントデリゲートに関連付けるイベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-596">To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate.</span></span> <span data-ttu-id="2e7ae-597"><xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期の受信操作を開始します。は、メッセージ<xref:System.Messaging.MessageQueue.ReceiveCompleted> がキューに到着すると、イベントの発生時に通知 <xref:System.Messaging.MessageQueue> されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-597"><xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-598">次に、を使用してを<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>呼び出すか、を使用<xref:System.Messaging.ReceiveCompletedEventArgs>して結果を取得することで、メッセージにアクセスできます。 <xref:System.Messaging.MessageQueue></span><span class="sxs-lookup"><span data-stu-id="2e7ae-598">The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="2e7ae-599">メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>はすぐにを返しますが、非同期操作は、イベントハンドラーが呼び出されるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-599">The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.</span></span>  
  
 <span data-ttu-id="2e7ae-600">は<xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期であるため、このメソッドを呼び出して、現在の実行スレッドをブロックせずにキューからメッセージを受信することができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-600">Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution.</span></span> <span data-ttu-id="2e7ae-601">同期的にメッセージを受信するに<xref:System.Messaging.MessageQueue.Receive%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-601">To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-602">非同期操作が完了したら、イベントハンドラー <xref:System.Messaging.MessageQueue.BeginPeek%2A>で<xref:System.Messaging.MessageQueue.BeginReceive%2A>またはを呼び出して、通知を受信し続けることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-602">Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.</span></span>  
  
 <span data-ttu-id="2e7ae-603">返さ<xref:System.IAsyncResult> れる <xref:System.Messaging.MessageQueue.BeginReceive%2A> は、メソッドが開始した非同期操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-603">The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started.</span></span> <span data-ttu-id="2e7ae-604">これ<xref:System.IAsyncResult>は、操作の有効期間全体にわたって使用できます。ただし、が呼び出さ<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>れるまでは通常は使用しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-604">You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called.</span></span> <span data-ttu-id="2e7ae-605">ただし、複数の非同期操作を開始する場合は、それら<xref:System.IAsyncResult>の値を配列に格納し、すべての操作または操作が完了するまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-605">However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete.</span></span> <span data-ttu-id="2e7ae-606">この場合は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.IAsyncResult>のプロパティを使用して、完了した操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-606">In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.</span></span>  
  
 <span data-ttu-id="2e7ae-607">このオーバーロードは、タイムアウトと状態オブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-607">This overload specifies a time-out and a state object.</span></span> <span data-ttu-id="2e7ae-608">`timeout`パラメーターで指定した間隔が経過すると、このコンポーネント<xref:System.Messaging.MessageQueue.ReceiveCompleted>はイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-608">If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.</span></span> <span data-ttu-id="2e7ae-609">メッセージが存在しないため、後続の<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>への呼び出しでは例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-609">Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception.</span></span>  
  
 <span data-ttu-id="2e7ae-610">状態オブジェクトは、状態情報を操作に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-610">The state object associates state information with the operation.</span></span> <span data-ttu-id="2e7ae-611">たとえば、複数回を呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A>て複数の操作を開始する場合は、定義した個別の状態オブジェクトを使用して各操作を識別できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-611">For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.</span></span>  
  
 <span data-ttu-id="2e7ae-612">また、state オブジェクトを使用して、プロセススレッド間で情報を渡すこともできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-612">You can also use the state object to pass information across process threads.</span></span> <span data-ttu-id="2e7ae-613">スレッドが開始されていても、コールバックが非同期シナリオの別のスレッドにある場合は、状態オブジェクトがマーシャリングされ、イベントからの情報と共に返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-613">If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.</span></span>  
  
 <span data-ttu-id="2e7ae-614">トランザクションで非同期呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A>を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-614">Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions.</span></span> <span data-ttu-id="2e7ae-615">トランザクション非同期操作を実行する場合は、を呼び出し<xref:System.Messaging.MessageQueue.BeginPeek%2A>、トランザクションと (同期) <xref:System.Messaging.MessageQueue.Receive%2A>メソッドを peek 操作用に作成したイベントハンドラー内に配置します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-615">If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation.</span></span> <span data-ttu-id="2e7ae-616">イベントハンドラーには、次C#のコードに示すような機能が含まれている場合があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-616">Your event handler might contain functionality as shown in the following C# code.</span></span>  
  
```csharp  
myMessageQueue.BeginTransaction();  
 myMessageQueue.Receive();  
 myMessageQueue.CommitTransaction();  
```  
  
 <span data-ttu-id="2e7ae-617">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-617">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-618">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-618">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-619">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-619">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-620">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-620">Local computer</span></span>|<span data-ttu-id="2e7ae-621">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-621">Yes</span></span>|  
|<span data-ttu-id="2e7ae-622">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-622">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-623">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-623">Yes</span></span>|  
|<span data-ttu-id="2e7ae-624">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-624">Remote computer</span></span>|<span data-ttu-id="2e7ae-625">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-625">No</span></span>|  
|<span data-ttu-id="2e7ae-626">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-626">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-627">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-627">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-628">次のコード例では、非同期の受信操作を作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-628">The following code example creates an asynchronous receive operation.</span></span> <span data-ttu-id="2e7ae-629">このコード例では、イベントハンドラー `MyReceiveCompleted`を作成し、 <xref:System.Messaging.MessageQueue.ReceiveCompleted>イベントハンドラーデリゲートにアタッチします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-629">The code example creates an event handler, `MyReceiveCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event handler delegate.</span></span> <span data-ttu-id="2e7ae-630">このコード例では、メッセージをローカルのメッセージキューに送信<xref:System.Messaging.MessageQueue.BeginReceive%28System.TimeSpan%2CSystem.Object%29>した後、を呼び出して、タイムアウト値を10秒、特定のメッセージを識別する一意の整数を渡します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-630">The code example sends a message to a local message queue, then calls <xref:System.Messaging.MessageQueue.BeginReceive%28System.TimeSpan%2CSystem.Object%29>, passing in a time-out value of ten seconds and a unique integer that identifies that particular message.</span></span> <span data-ttu-id="2e7ae-631"><xref:System.Messaging.MessageQueue.ReceiveCompleted>イベントが発生すると、イベントハンドラーはメッセージを受信し、メッセージ本文と整数メッセージ識別子を画面に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-631">When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the event handler receives the message and writes the message body and the integer message identifier to the screen.</span></span>  
  
 [!code-cpp[MessageQueueBeginReceive2#0](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueueBeginReceive2/cpp/class1.cpp#0)]
 [!code-csharp[MessageQueueBeginReceive2#0](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueueBeginReceive2/CS/class1.cs#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-632"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-632">The value specified for the <paramref name="timeout" /> parameter is not valid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-633">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-633">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-634">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-634">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, object stateObject, AsyncCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, object stateObject, class System.AsyncCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, stateObject As Object, callback As AsyncCallback) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, System::Object ^ stateObject, AsyncCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : TimeSpan * obj * AsyncCallback -&gt; IAsyncResult" Usage="messageQueue.BeginReceive (timeout, stateObject, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="stateObject" Type="System.Object" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-635">メッセージを使用できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-635">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</span></span></param>
        <param name="stateObject"><span data-ttu-id="2e7ae-636">非同期操作に関連付けられている情報を保持する状態オブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-636">A state object, specified by the application, that contains information associated with the asynchronous operation.</span></span></param>
        <param name="callback"><span data-ttu-id="2e7ae-637">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-637">The <see cref="T:System.AsyncCallback" /> that will receive the notification of the asynchronous operation completion.</span></span></param>
        <summary><span data-ttu-id="2e7ae-638">指定したタイムアウトと指定した状態オブジェクトを持つ非同期の受信操作を実行します。状態オブジェクトは、操作の有効期間を通じて関連付けられた情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-638">Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime.</span></span> <span data-ttu-id="2e7ae-639">このオーバーロードは、コールバックを通じて操作のイベント ハンドラー ID の通知を受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-639">This overload receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="2e7ae-640">この操作は、メッセージをキューで使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-640">The operation is not complete until either a message becomes available in the queue or the time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-641">ポストされた非同期要求を識別する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-641">The <see cref="T:System.IAsyncResult" /> that identifies the posted asynchronous request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-642">このオーバーロードを使用すると、メッセージがキューで利用可能になるか、指定した時間が経過したときに、callback パラメーターで指定されたコールバックが直接呼び出されます。<xref:System.Messaging.MessageQueue.ReceiveCompleted>イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-642">When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised.</span></span> <span data-ttu-id="2e7ae-643">の<xref:System.Messaging.MessageQueue.BeginReceive%2A>他のオーバーロードは、このコンポーネントに依存し<xref:System.Messaging.MessageQueue.ReceiveCompleted>てイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-643">The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.</span></span>  
  
 <span data-ttu-id="2e7ae-644"><xref:System.Messaging.MessageQueue.ReceiveCompleted>は、メッセージが既にキューに存在する場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-644"><xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-645">を使用<xref:System.Messaging.MessageQueue.BeginReceive%2A>するには、非同期操作の結果を処理してイベントデリゲートに関連付けるイベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-645">To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate.</span></span> <span data-ttu-id="2e7ae-646"><xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期の受信操作を開始します。は、メッセージ<xref:System.Messaging.MessageQueue.ReceiveCompleted> がキューに到着すると、イベントの発生時に通知 <xref:System.Messaging.MessageQueue> されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-646"><xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-647">次に、を使用してを<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>呼び出すか、を使用<xref:System.Messaging.ReceiveCompletedEventArgs>して結果を取得することで、メッセージにアクセスできます。 <xref:System.Messaging.MessageQueue></span><span class="sxs-lookup"><span data-stu-id="2e7ae-647">The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="2e7ae-648">メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>はすぐにを返しますが、非同期操作は、イベントハンドラーが呼び出されるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-648">The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.</span></span>  
  
 <span data-ttu-id="2e7ae-649">は<xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期であるため、このメソッドを呼び出して、現在の実行スレッドをブロックせずにキューからメッセージを受信することができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-649">Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution.</span></span> <span data-ttu-id="2e7ae-650">同期的にメッセージを受信するに<xref:System.Messaging.MessageQueue.Receive%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-650">To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-651">非同期操作が完了したら、イベントハンドラー <xref:System.Messaging.MessageQueue.BeginPeek%2A>で<xref:System.Messaging.MessageQueue.BeginReceive%2A>またはを呼び出して、通知を受信し続けることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-651">Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.</span></span>  
  
 <span data-ttu-id="2e7ae-652">返さ<xref:System.IAsyncResult> れる <xref:System.Messaging.MessageQueue.BeginReceive%2A> は、メソッドが開始した非同期操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-652">The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started.</span></span> <span data-ttu-id="2e7ae-653">これ<xref:System.IAsyncResult>は、操作の有効期間全体にわたって使用できます。ただし、が呼び出さ<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>れるまでは通常は使用しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-653">You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called.</span></span> <span data-ttu-id="2e7ae-654">ただし、複数の非同期操作を開始する場合は、それら<xref:System.IAsyncResult>の値を配列に格納し、すべての操作または操作が完了するまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-654">However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete.</span></span> <span data-ttu-id="2e7ae-655">この場合は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.IAsyncResult>のプロパティを使用して、完了した操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-655">In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.</span></span>  
  
 <span data-ttu-id="2e7ae-656">状態オブジェクトは、状態情報を操作に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-656">The state object associates state information with the operation.</span></span> <span data-ttu-id="2e7ae-657">たとえば、複数回を呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A>て複数の操作を開始する場合は、定義した個別の状態オブジェクトを使用して各操作を識別できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-657">For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.</span></span>  
  
 <span data-ttu-id="2e7ae-658">また、state オブジェクトを使用して、プロセススレッド間で情報を渡すこともできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-658">You can also use the state object to pass information across process threads.</span></span> <span data-ttu-id="2e7ae-659">スレッドが開始されていても、コールバックが非同期シナリオの別のスレッドにある場合は、状態オブジェクトがマーシャリングされ、イベントからの情報と共に返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-659">If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.</span></span>  
  
 <span data-ttu-id="2e7ae-660">トランザクションで非同期呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A>を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-660">Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions.</span></span> <span data-ttu-id="2e7ae-661">トランザクション非同期操作を実行する場合は、を呼び出し<xref:System.Messaging.MessageQueue.BeginPeek%2A>、トランザクションと (同期) <xref:System.Messaging.MessageQueue.Receive%2A>メソッドを peek 操作用に作成したイベントハンドラー内に配置します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-661">If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation.</span></span> <span data-ttu-id="2e7ae-662">イベントハンドラーには、次C#のコードに示すような機能が含まれている場合があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-662">Your event handler might contain functionality as shown in the following C# code.</span></span>  
  
```csharp  
myMessageQueue.BeginTransaction();  
 myMessageQueue.Receive();  
 myMessageQueue.CommitTransaction();  
```  
  
 <span data-ttu-id="2e7ae-663">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-663">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-664">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-664">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-665">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-665">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-666">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-666">Local computer</span></span>|<span data-ttu-id="2e7ae-667">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-667">Yes</span></span>|  
|<span data-ttu-id="2e7ae-668">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-668">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-669">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-669">Yes</span></span>|  
|<span data-ttu-id="2e7ae-670">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-670">Remote computer</span></span>|<span data-ttu-id="2e7ae-671">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-671">No</span></span>|  
|<span data-ttu-id="2e7ae-672">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-672">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-673">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-673">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-674">次のコード例では、非同期の受信操作を作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-674">The following code example creates an asynchronous receive operation.</span></span> <span data-ttu-id="2e7ae-675">このコード例では、メッセージをローカルのメッセージキューに送信<xref:System.Messaging.MessageQueue.BeginReceive%28System.TimeSpan%2CSystem.Object%2CSystem.AsyncCallback%29>し、を呼び出します。これには、10秒のタイムアウト値、特定のメッセージを識別する一意の整数、および<xref:System.AsyncCallback>イベントハンドラーを識別するの新しいインスタンスが含まれます。`MyReceiveCompleted`.</span><span class="sxs-lookup"><span data-stu-id="2e7ae-675">The code example sends a message to a local message queue, then calls <xref:System.Messaging.MessageQueue.BeginReceive%28System.TimeSpan%2CSystem.Object%2CSystem.AsyncCallback%29>, passing in: a time-out value of ten seconds; a unique integer that identifies that particular message; and a new instance of <xref:System.AsyncCallback> that identifies the event handler, `MyReceiveCompleted`.</span></span> <span data-ttu-id="2e7ae-676"><xref:System.Messaging.MessageQueue.ReceiveCompleted>イベントが発生すると、イベントハンドラーはメッセージを受信し、メッセージ本文と整数メッセージ識別子を画面に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-676">When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the event handler receives the message and writes the message body and the integer message identifier to the screen.</span></span>  
  
 [!code-cpp[MessageQueueBeginReceive3#0](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueueBeginReceive3/cpp/class1.cpp#0)]
 [!code-csharp[MessageQueueBeginReceive3#0](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueueBeginReceive3/CS/class1.cs#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-677"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-677">The value specified for the <paramref name="timeout" /> parameter is not valid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-678">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-678">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-679">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-679">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, System.Messaging.Cursor cursor, object state, AsyncCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.Messaging.Cursor cursor, object state, class System.AsyncCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, System::Messaging::Cursor ^ cursor, System::Object ^ state, AsyncCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : TimeSpan * System.Messaging.Cursor * obj * AsyncCallback -&gt; IAsyncResult" Usage="messageQueue.BeginReceive (timeout, cursor, state, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cursor" Type="System.Messaging.Cursor" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="state" Type="System.Object" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-680">メッセージを使用できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-680">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</span></span></param>
        <param name="cursor"><span data-ttu-id="2e7ae-681">メッセージ キュー内の特定の位置を維持する <see cref="T:System.Messaging.Cursor" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-681">A <see cref="T:System.Messaging.Cursor" /> that maintains a specific position in the message queue.</span></span></param>
        <param name="state"><span data-ttu-id="2e7ae-682">非同期操作に関連付けられている情報を保持する状態オブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-682">A state object, specified by the application, that contains information associated with the asynchronous operation.</span></span></param>
        <param name="callback"><span data-ttu-id="2e7ae-683">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-683">The <see cref="T:System.AsyncCallback" /> that receives the notification of the asynchronous operation completion.</span></span></param>
        <summary><span data-ttu-id="2e7ae-684">指定したタイムアウトがあり、指定したカーソルおよび状態オブジェクトを使用する非同期の受信操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-684">Initiates an asynchronous receive operation that has a specified time-out and uses a specified cursor and a specified state object.</span></span> <span data-ttu-id="2e7ae-685">状態オブジェクトは、操作の有効期間を通じて、関連付けられた情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-685">The state object provides associated information throughout the lifetime of the operation.</span></span> <span data-ttu-id="2e7ae-686">このオーバーロードは、コールバックを通じて操作のイベント ハンドラー ID の通知を受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-686">This overload receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="2e7ae-687">この操作は、メッセージをキューで使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-687">The operation is not complete until either a message becomes available in the queue or the time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-688">ポストされた非同期要求を識別する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-688">The <see cref="T:System.IAsyncResult" /> that identifies the posted asynchronous request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-689">このオーバーロードを使用すると、メッセージがキューで利用可能になるか、指定した時間が経過したときに、callback パラメーターで指定されたコールバックが直接呼び出されます。<xref:System.Messaging.MessageQueue.ReceiveCompleted>イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-689">When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised.</span></span> <span data-ttu-id="2e7ae-690">の<xref:System.Messaging.MessageQueue.BeginReceive%2A>他のオーバーロードは、このコンポーネントに依存し<xref:System.Messaging.MessageQueue.ReceiveCompleted>てイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-690">The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.</span></span>  
  
 <span data-ttu-id="2e7ae-691"><xref:System.Messaging.MessageQueue.ReceiveCompleted>は、メッセージが既にキューに存在する場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-691"><xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-692">を使用<xref:System.Messaging.MessageQueue.BeginReceive%2A>するには、非同期操作の結果を処理してイベントデリゲートに関連付けるイベントハンドラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-692">To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate.</span></span> <span data-ttu-id="2e7ae-693"><xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期の受信操作を開始します。は、メッセージ<xref:System.Messaging.MessageQueue.ReceiveCompleted> がキューに到着すると、イベントの発生時に通知 <xref:System.Messaging.MessageQueue> されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-693"><xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-694">次に、を使用してを<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>呼び出すか、を使用<xref:System.Messaging.ReceiveCompletedEventArgs>して結果を取得することで、メッセージにアクセスできます。 <xref:System.Messaging.MessageQueue></span><span class="sxs-lookup"><span data-stu-id="2e7ae-694">The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="2e7ae-695">メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>はすぐにを返しますが、非同期操作は、イベントハンドラーが呼び出されるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-695">The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.</span></span>  
  
 <span data-ttu-id="2e7ae-696">は<xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期であるため、このメソッドを呼び出して、現在の実行スレッドをブロックせずにキューからメッセージを受信することができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-696">Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution.</span></span> <span data-ttu-id="2e7ae-697">同期的にメッセージを受信するに<xref:System.Messaging.MessageQueue.Receive%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-697">To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-698">非同期操作が完了したら、イベントハンドラー <xref:System.Messaging.MessageQueue.BeginPeek%2A>で<xref:System.Messaging.MessageQueue.BeginReceive%2A>またはを呼び出して、通知を受信し続けることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-698">Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.</span></span>  
  
 <span data-ttu-id="2e7ae-699">返さ<xref:System.IAsyncResult> れる <xref:System.Messaging.MessageQueue.BeginReceive%2A> は、メソッドが開始した非同期操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-699">The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started.</span></span> <span data-ttu-id="2e7ae-700">これ<xref:System.IAsyncResult>は、操作の有効期間全体にわたって使用できます。ただし、が呼び出さ<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>れるまでは通常は使用しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-700">You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called.</span></span> <span data-ttu-id="2e7ae-701">ただし、複数の非同期操作を開始する場合は、それら<xref:System.IAsyncResult>の値を配列に格納し、すべての操作または操作が完了するまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-701">However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete.</span></span> <span data-ttu-id="2e7ae-702">この場合は、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.IAsyncResult>のプロパティを使用して、完了した操作を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-702">In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.</span></span>  
  
 <span data-ttu-id="2e7ae-703">状態オブジェクトは、状態情報を操作に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-703">The state object associates state information with the operation.</span></span> <span data-ttu-id="2e7ae-704">たとえば、複数回を呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A>て複数の操作を開始する場合は、定義した個別の状態オブジェクトを使用して各操作を識別できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-704">For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.</span></span>  
  
 <span data-ttu-id="2e7ae-705">また、state オブジェクトを使用して、プロセススレッド間で情報を渡すこともできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-705">You can also use the state object to pass information across process threads.</span></span> <span data-ttu-id="2e7ae-706">スレッドが開始されていても、コールバックが非同期シナリオの別のスレッドにある場合は、状態オブジェクトがマーシャリングされ、イベントからの情報と共に返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-706">If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.</span></span>  
  
 <span data-ttu-id="2e7ae-707">トランザクションで非同期呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A>を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-707">Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions.</span></span> <span data-ttu-id="2e7ae-708">トランザクション非同期操作を実行する場合は、を呼び出し<xref:System.Messaging.MessageQueue.BeginPeek%2A>、トランザクションと (同期) <xref:System.Messaging.MessageQueue.Receive%2A>メソッドを peek 操作用に作成したイベントハンドラー内に配置します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-708">If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation.</span></span> <span data-ttu-id="2e7ae-709">イベントハンドラーには、次C#のコードに示すような機能が含まれている場合があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-709">Your event handler might contain functionality as shown in the following C# code.</span></span>  
  
```csharp  
myMessageQueue.BeginTransaction();  
 myMessageQueue.Receive();  
 myMessageQueue.CommitTransaction();  
```  
  
 <span data-ttu-id="2e7ae-710">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-710">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-711">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-711">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-712">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-712">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-713">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-713">Local computer</span></span>|<span data-ttu-id="2e7ae-714">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-714">Yes</span></span>|  
|<span data-ttu-id="2e7ae-715">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-715">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-716">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-716">Yes</span></span>|  
|<span data-ttu-id="2e7ae-717">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-717">Remote computer</span></span>|<span data-ttu-id="2e7ae-718">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-718">No</span></span>|  
|<span data-ttu-id="2e7ae-719">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-719">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-720">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-720">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-721"><paramref name="cursor" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-721">The <paramref name="cursor" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-722"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-722">The value specified for the <paramref name="timeout" /> parameter is not valid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-723">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-723">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-724">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-724">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Messaging.MessageQueue.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_CanRead")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-725"><see cref="T:System.Messaging.MessageQueue" /> を読み取ることができるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-725">Gets a value that indicates whether the <see cref="T:System.Messaging.MessageQueue" /> can be read.</span></span></summary>
        <value><span data-ttu-id="2e7ae-726"><see cref="T:System.Messaging.MessageQueue" /> が存在し、アプリケーションが読み取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-726"><see langword="true" /> if the <see cref="T:System.Messaging.MessageQueue" /> exists and the application can read from it; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-727"><xref:System.Messaging.MessageQueue.CanRead%2A>アプリケーションがキューからメッセージをピークまたは受信できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-727"><xref:System.Messaging.MessageQueue.CanRead%2A> indicates whether the application is able to peek or receive messages from the queue.</span></span> <span data-ttu-id="2e7ae-728"><xref:System.Messaging.MessageQueue>が<xref:System.Messaging.MessageQueue.CanRead%2A> の場合、はキューからメッセージを受信またはピークできます。 `true`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-728">If <xref:System.Messaging.MessageQueue.CanRead%2A> is `true`, the <xref:System.Messaging.MessageQueue> can receive or peek messages from the queue.</span></span> <span data-ttu-id="2e7ae-729">それ以外の場合はできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-729">Otherwise, it cannot.</span></span>  
  
 <span data-ttu-id="2e7ae-730"><xref:System.Messaging.MessageQueue.CanRead%2A>キュー `false`が排他読み取りアクセスで既に開かれている場合 (または非排他アクセスで開かれている<xref:System.Messaging.MessageQueue>場合に、排他アクセスを要求した場合)、またはアプリケーションにアクセスするための十分な権限がない場合はです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-730"><xref:System.Messaging.MessageQueue.CanRead%2A> is `false` if a queue is already open with exclusive read access (or if it's open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it.</span></span> <span data-ttu-id="2e7ae-731">がの<xref:System.Messaging.MessageQueue.CanRead%2A> `false`ときにアプリケーションがキューからの読み取りを試行した場合、アクセスは拒否されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-731">If your application tries to read from a queue when <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, access is denied.</span></span>  
  
 <span data-ttu-id="2e7ae-732">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-732">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-733">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-733">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-734">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-734">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-735">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-735">Local computer</span></span>|<span data-ttu-id="2e7ae-736">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-736">Yes</span></span>|  
|<span data-ttu-id="2e7ae-737">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-737">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-738">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-738">Yes</span></span>|  
|<span data-ttu-id="2e7ae-739">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-739">Remote computer</span></span>|<span data-ttu-id="2e7ae-740">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-740">No</span></span>|  
|<span data-ttu-id="2e7ae-741">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-741">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-742">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-742">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-743">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.CanRead%2A>プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-743">The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.CanRead%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#5](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueue.CanWrite" />
        <altmember cref="P:System.Messaging.MessageQueue.ReadHandle" />
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Messaging.MessageQueue.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_CanWrite")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-744"><see cref="T:System.Messaging.MessageQueue" /> に書き込むことができるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-744">Gets a value that indicates whether the <see cref="T:System.Messaging.MessageQueue" /> can be written to.</span></span></summary>
        <value><span data-ttu-id="2e7ae-745"><see cref="T:System.Messaging.MessageQueue" /> が存在し、アプリケーションが書き込むことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-745"><see langword="true" /> if the <see cref="T:System.Messaging.MessageQueue" /> exists and the application can write to it; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-746"><xref:System.Messaging.MessageQueue.CanWrite%2A>アプリケーションがメッセージをキューに送信できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-746"><xref:System.Messaging.MessageQueue.CanWrite%2A> indicates whether the application is able to send messages to the queue.</span></span> <span data-ttu-id="2e7ae-747"><xref:System.Messaging.MessageQueue>が<xref:System.Messaging.MessageQueue.CanWrite%2A> の場合、はキューにメッセージを送信できます。 `true`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-747">If <xref:System.Messaging.MessageQueue.CanWrite%2A> is `true`, the <xref:System.Messaging.MessageQueue> can send messages to the queue.</span></span> <span data-ttu-id="2e7ae-748">それ以外の場合はできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-748">Otherwise, it cannot.</span></span>  
  
 <span data-ttu-id="2e7ae-749"><xref:System.Messaging.MessageQueue.CanWrite%2A>キュー `false`が排他的な書き込みアクセスで既に開かれている (または排他アクセスで開かれてい<xref:System.Messaging.MessageQueue>て、排他アクセスを要求している) 場合、またはアプリケーションにアクセスするための十分な権限がない場合は、です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-749"><xref:System.Messaging.MessageQueue.CanWrite%2A> is `false` if a queue is already open with exclusive write access (or if it's open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it.</span></span> <span data-ttu-id="2e7ae-750">がの<xref:System.Messaging.MessageQueue.CanWrite%2A> `false`ときにアプリケーションがキューに書き込もうとした場合、アクセスが拒否されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-750">If your application tries to write to a queue when <xref:System.Messaging.MessageQueue.CanWrite%2A> is `false`, access is denied.</span></span>  
  
 <span data-ttu-id="2e7ae-751">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-751">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-752">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-752">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-753">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-753">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-754">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-754">Local computer</span></span>|<span data-ttu-id="2e7ae-755">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-755">Yes</span></span>|  
|<span data-ttu-id="2e7ae-756">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-756">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-757">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-757">Yes</span></span>|  
|<span data-ttu-id="2e7ae-758">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-758">Remote computer</span></span>|<span data-ttu-id="2e7ae-759">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-759">No</span></span>|  
|<span data-ttu-id="2e7ae-760">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-760">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-761">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-761">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-762">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.CanWrite%2A>プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-762">The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.CanWrite%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#6](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueue.WriteHandle" />
        <altmember cref="P:System.Messaging.MessageQueue.CanRead" />
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public Guid Category { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Category" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.Category" />
      <MemberSignature Language="VB.NET" Value="Public Property Category As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Category { Guid get(); void set(Guid value); };" />
      <MemberSignature Language="F#" Value="member this.Category : Guid with get, set" Usage="System.Messaging.MessageQueue.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_Category")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-763">キュー カテゴリを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-763">Gets or sets the queue category.</span></span></summary>
        <value><span data-ttu-id="2e7ae-764">キュー カテゴリを表す <see cref="T:System.Guid" /> (メッセージ キュー タイプ ID)。これによって、アプリケーションはキューを分類できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-764">A <see cref="T:System.Guid" /> that represents the queue category (Message Queuing type identifier), which allows an application to categorize its queues.</span></span> <span data-ttu-id="2e7ae-765">既定値は、<see langword="Guid.empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-765">The default is <see langword="Guid.empty" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-766">キューカテゴリを使用すると、アプリケーションはキューを分類できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-766">The queue category allows an application to categorize its queues.</span></span> <span data-ttu-id="2e7ae-767">たとえば、すべての請求キューを1つのカテゴリに配置し、すべての注文キューを別のカテゴリに配置できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-767">For example, you can place all Billing queues in one category and all Order queues in another.</span></span>  
  
 <span data-ttu-id="2e7ae-768">プロパティ<xref:System.Messaging.MessageQueue.Category%2A>は、コンピューターの管理コンソールの **[キューのプロパティ]** ダイアログボックスを使用してアクセスできる、"メッセージキューの種類 ID" プロパティ (読み取り/書き込み) へのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-768">The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing Type ID property (which is read/write), accessible through the **Queue Properties** dialog box in the Computer Management Console.</span></span> <span data-ttu-id="2e7ae-769">新しいカテゴリを定義できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-769">You can define a new category.</span></span> <span data-ttu-id="2e7ae-770">を使用<xref:System.Guid.NewGuid%2A>して、すべて<xref:System.Guid>の値で一意のカテゴリ値を作成することもできますが、このようなアクションは必要ありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-770">Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, such an action is unnecessary.</span></span> <span data-ttu-id="2e7ae-771">カテゴリ値は、他のすべて<xref:System.Guid>の値からではなく、他のカテゴリからのみ一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-771">The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values.</span></span> <span data-ttu-id="2e7ae-772">{00000000-0000-0000-0000-000000000001}たとえば、 <xref:System.Messaging.MessageQueue.Category%2A> 1 つ <xref:System.Messaging.MessageQueue.Category%2A> のキューセットのをとして、別のセットのとしてを割り当てることができます。 {00000000-0000-0000-0000-000000000002}</span><span class="sxs-lookup"><span data-stu-id="2e7ae-772">For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set.</span></span>  
  
 <span data-ttu-id="2e7ae-773">を設定<xref:System.Messaging.MessageQueue.Category%2A>する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-773">It is not necessary to set the <xref:System.Messaging.MessageQueue.Category%2A>.</span></span> <span data-ttu-id="2e7ae-774">値として `null` を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-774">The value can be `null`.</span></span>  
  
 <span data-ttu-id="2e7ae-775">このプロパティを設定すると、メッセージキューのキューが変更されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-775">Setting this property modifies the Message Queuing queue.</span></span> <span data-ttu-id="2e7ae-776">そのため、その<xref:System.Messaging.MessageQueue>他のインスタンスは変更の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-776">Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.</span></span>  
  
 <span data-ttu-id="2e7ae-777">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-777">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-778">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-778">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-779">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-779">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-780">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-780">Local computer</span></span>|<span data-ttu-id="2e7ae-781">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-781">Yes</span></span>|  
|<span data-ttu-id="2e7ae-782">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-782">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-783">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-783">Yes</span></span>|  
|<span data-ttu-id="2e7ae-784">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-784">Remote computer</span></span>|<span data-ttu-id="2e7ae-785">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-785">No</span></span>|  
|<span data-ttu-id="2e7ae-786">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-786">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-787">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-787">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-788">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.Category%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-788">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.Category%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#7](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-789">キュー カテゴリに無効な値が設定されています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-789">The queue category was set to an invalid value.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-790">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-790">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Id" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
        <altmember cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
      </Docs>
    </Member>
    <Member MemberName="ClearConnectionCache">
      <MemberSignature Language="C#" Value="public static void ClearConnectionCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearConnectionCache() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ClearConnectionCache" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearConnectionCache ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearConnectionCache();" />
      <MemberSignature Language="F#" Value="static member ClearConnectionCache : unit -&gt; unit" Usage="System.Messaging.MessageQueue.ClearConnectionCache " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-791">接続キャッシュを消去します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-791">Clears the connection cache.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-792">を呼び出す<xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>と、キャッシュに格納されている形式名が削除され、キャッシュに格納されて格納されているハンドルが閉じられます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-792">When you call <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, the format names stored in the cache are removed and handles opened and stored in the cache are closed.</span></span>  
  
 <span data-ttu-id="2e7ae-793">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-793">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-794">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-794">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-795">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-795">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-796">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-796">Local computer</span></span>|<span data-ttu-id="2e7ae-797">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-797">Yes</span></span>|  
|<span data-ttu-id="2e7ae-798">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-798">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-799">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-799">Yes</span></span>|  
|<span data-ttu-id="2e7ae-800">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-800">Remote computer</span></span>|<span data-ttu-id="2e7ae-801">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-801">Yes</span></span>|  
|<span data-ttu-id="2e7ae-802">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-802">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-803">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-803">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-804"><xref:System.Messaging.MessageQueue.ClearConnectionCache%2A> を呼び出すコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-804">The following code example calls <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>.</span></span>  
  
 [!code-csharp[MessageQueue#8](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageQueue.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-805"><see cref="T:System.Messaging.MessageQueue" /> で割り当てられたすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-805">Frees all resources allocated by the <see cref="T:System.Messaging.MessageQueue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-806"><xref:System.Messaging.MessageQueue.Close%2A>に関連付けられて<xref:System.Messaging.MessageQueue>いるすべてのリソースを解放します (必要に応じて共有リソースを含む)。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-806"><xref:System.Messaging.MessageQueue.Close%2A> frees all resources associated with a <xref:System.Messaging.MessageQueue>, including shared resources if appropriate.</span></span> <span data-ttu-id="2e7ae-807">次<xref:System.Messaging.MessageQueue.Send%28System.Object%29> C#のコードのように、メソッドを呼び出すと、これらのリソースが引き続き使用可能な場合は、システムによって自動的に再取得されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-807">The system re-acquires these resources automatically if they are still available, for example when you call the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method, as in the following C# code.</span></span>  
  
```csharp  
myMessageQueue.Send("Text 1.");  
myMessageQueue.Close();  
myMessageQueue.Send("Text 2."); //Resources are re-acquired.  
```  
  
 <span data-ttu-id="2e7ae-808">を呼び出す<xref:System.Messaging.MessageQueue.Close%2A>と、 <xref:System.Messaging.MessageQueue>メッセージキューのキューに直接アクセスするすべてのプロパティがクリアされます。、、 <xref:System.Messaging.MessageQueue.Path%2A> 、および <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> は、そのまま残ります。 <xref:System.Messaging.MessageQueue.Formatter%2A> <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-808">When you call <xref:System.Messaging.MessageQueue.Close%2A>, all <xref:System.Messaging.MessageQueue> properties that directly access the Message Queuing queue are cleared out. The <xref:System.Messaging.MessageQueue.Path%2A>, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, <xref:System.Messaging.MessageQueue.Formatter%2A>, and <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> all remain as they were.</span></span>  
  
 <span data-ttu-id="2e7ae-809"><xref:System.Messaging.MessageQueue.Close%2A>は、共有されている可能性があるため、キューに対して読み取りおよび書き込みハンドルを必ず解放するわけではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-809"><xref:System.Messaging.MessageQueue.Close%2A> does not always free the read and write handles to a queue, because they might be shared.</span></span> <span data-ttu-id="2e7ae-810">次のいずれかの手順を実行して、 <xref:System.Messaging.MessageQueue.Close%2A>が読み取りハンドルおよび書き込みハンドルをキューに確実に解放することができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-810">You can take any of the following steps to ensure that <xref:System.Messaging.MessageQueue.Close%2A> frees the read and write handles to a queue:</span></span>  
  
-   <span data-ttu-id="2e7ae-811">排他アクセス<xref:System.Messaging.MessageQueue>でを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-811">Create the <xref:System.Messaging.MessageQueue> with exclusive access.</span></span> <span data-ttu-id="2e7ae-812">これを<xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%29>行うには、 `sharedModeDenyReceive`コンストラクター <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29>またはコンストラクターを呼び出し、パラメーター `true`をに設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-812">To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%29> or <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor, and set the `sharedModeDenyReceive` parameter to `true`.</span></span>  
  
-   <span data-ttu-id="2e7ae-813">接続キャッシュ<xref:System.Messaging.MessageQueue>を無効にしてを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-813">Create the <xref:System.Messaging.MessageQueue> with connection caching disabled.</span></span> <span data-ttu-id="2e7ae-814">これを行うには、 <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29>コンストラクターを呼び出し、 `enableConnectionCache`パラメーターを`false`に設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-814">To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor and set the `enableConnectionCache` parameter to `false`.</span></span>  
  
-   <span data-ttu-id="2e7ae-815">接続キャッシュを無効にします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-815">Disable connection caching.</span></span> <span data-ttu-id="2e7ae-816">これを行うには、 <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A>プロパティを`false`に設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-816">To do so, set the <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> property to `false`.</span></span>  
  
 <span data-ttu-id="2e7ae-817">メッセージキューサーバー <xref:System.Messaging.MessageQueue.Close%2A>のキューを削除する前に、キューに対してを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-817">You should call <xref:System.Messaging.MessageQueue.Close%2A> for a queue before you delete the queue on the Message Queuing server.</span></span> <span data-ttu-id="2e7ae-818">そうしないと、キューに送信されたメッセージが例外をスローしたり、配信不能キューに表示されたりする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-818">Otherwise, messages sent to the queue could throw exceptions or appear in the dead-letter queue.</span></span>  
  
 <span data-ttu-id="2e7ae-819">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-819">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-820">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-820">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-821">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-821">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-822">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-822">Local computer</span></span>|<span data-ttu-id="2e7ae-823">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-823">Yes</span></span>|  
|<span data-ttu-id="2e7ae-824">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-824">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-825">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-825">Yes</span></span>|  
|<span data-ttu-id="2e7ae-826">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-826">Remote computer</span></span>|<span data-ttu-id="2e7ae-827">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-827">Yes</span></span>|  
|<span data-ttu-id="2e7ae-828">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-828">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-829">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-829">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-830">次のコード例では、メッセージキューのキューを閉じます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-830">The following code example closes a Message Queuing queue.</span></span>  
  
 [!code-cpp[MessageQueue.Close#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Close/CPP/mqclose.cpp#1)]
 [!code-csharp[MessageQueue.Close#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Close/CS/mqclose.cs#1)]
 [!code-vb[MessageQueue.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Close/VB/mqclose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-831">メッセージ キュー サーバーの指定したパスに新しいキューを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-831">Creates a new queue at the specified path on a Message Queuing server.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Messaging.MessageQueue Create (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.MessageQueue Create(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (path As String) As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Messaging::MessageQueue ^ Create(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Messaging.MessageQueue" Usage="System.Messaging.MessageQueue.Create path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2e7ae-832">作成するキューのパス。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-832">The path of the queue to create.</span></span></param>
        <summary><span data-ttu-id="2e7ae-833">指定したパスに非トランザクション メッセージ キューのキューを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-833">Creates a non-transactional Message Queuing queue at the specified path.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-834">新しいキューを表す <see cref="T:System.Messaging.MessageQueue" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-834">A <see cref="T:System.Messaging.MessageQueue" /> that represents the new queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-835">このオーバーロードを使用して、非トランザクションメッセージキューのキューを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-835">Use this overload to create a non-transactional Message Queuing queue.</span></span>  
  
 <span data-ttu-id="2e7ae-836">アプリケーションで<xref:System.Messaging.MessageQueue>クラスの新しいインスタンスを作成し、既存のキューにバインドするには<xref:System.Messaging.MessageQueue.%23ctor%2A> 、コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-836">To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor.</span></span> <span data-ttu-id="2e7ae-837">メッセージキューに新しいキューを作成するには<xref:System.Messaging.MessageQueue.Create%28System.String%29>、を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-837">To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-838">`path`パラメーターの構文は、次の表に示すように、参照するキューの種類によって異なります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-838">The syntax for the `path` parameter depends on the type of queue it references, as shown in the following table.</span></span>  
  
|<span data-ttu-id="2e7ae-839">キューの種類</span><span class="sxs-lookup"><span data-stu-id="2e7ae-839">Queue type</span></span>|<span data-ttu-id="2e7ae-840">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-840">Syntax</span></span>|  
|----------------|------------|  
|<span data-ttu-id="2e7ae-841">パブリックキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-841">Public queue</span></span>|`MachineName`\\`QueueName`|  
|<span data-ttu-id="2e7ae-842">専用キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-842">Private queue</span></span>|`MachineName`\\`Private$`\\`QueueName`|  
  
 <span data-ttu-id="2e7ae-843">ローカルコンピューターには "." を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-843">Use "." for the local computer.</span></span> <span data-ttu-id="2e7ae-844">構文の詳細について<xref:System.Messaging.MessageQueue.Path%2A>は、プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-844">For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.</span></span>  
  
 <span data-ttu-id="2e7ae-845">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-845">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-846">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-846">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-847">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-847">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-848">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-848">Local computer</span></span>|<span data-ttu-id="2e7ae-849">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-849">Yes</span></span>|  
|<span data-ttu-id="2e7ae-850">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-850">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-851">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-851">Yes</span></span>|  
|<span data-ttu-id="2e7ae-852">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-852">Remote computer</span></span>|<span data-ttu-id="2e7ae-853">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-853">No</span></span>|  
|<span data-ttu-id="2e7ae-854">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-854">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-855">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-855">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-856">次のコード例では、パブリックキューと専用キューを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-856">The following code example creates public and private queues.</span></span> <span data-ttu-id="2e7ae-857">選択したキューにメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-857">It sends a message to selected queues.</span></span>  
  
 [!code-cpp[MessageQueue.Create_path#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Create_path/CPP/mqcreate.cpp#1)]
 [!code-csharp[MessageQueue.Create_path#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Create_path/CS/mqcreate.cs#1)]
 [!code-vb[MessageQueue.Create_path#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Create_path/VB/mqcreate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-858"><paramref name="path" /> パラメーターが <see langword="null" /> または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-858">The <paramref name="path" /> parameter is <see langword="null" /> or is an empty string ("").</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-859">指定したパスには既にキューが存在します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-859">A queue already exists at the specified path.</span></span>  
  
 <span data-ttu-id="2e7ae-860">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-860">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-861">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-861">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
        <altmember cref="M:System.Messaging.MessageQueue.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Messaging.MessageQueue Create (string path, bool transactional);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.MessageQueue Create(string path, bool transactional) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Create(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (path As String, transactional As Boolean) As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Messaging::MessageQueue ^ Create(System::String ^ path, bool transactional);" />
      <MemberSignature Language="F#" Value="static member Create : string * bool -&gt; System.Messaging.MessageQueue" Usage="System.Messaging.MessageQueue.Create (path, transactional)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="transactional" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2e7ae-862">作成するキューのパス。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-862">The path of the queue to create.</span></span></param>
        <param name="transactional"><span data-ttu-id="2e7ae-863">トランザクション キューを作成する場合は <see langword="true" />。非トランザクション キューを作成する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-863"><see langword="true" /> to create a transactional queue; <see langword="false" /> to create a non-transactional queue.</span></span></param>
        <summary><span data-ttu-id="2e7ae-864">指定したパスに、トランザクション メッセージ キューのキューまたは非トランザクション メッセージ キューのキューを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-864">Creates a transactional or non-transactional Message Queuing queue at the specified path.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-865">新しいキューを表す <see cref="T:System.Messaging.MessageQueue" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-865">A <see cref="T:System.Messaging.MessageQueue" /> that represents the new queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-866">このオーバーロードを使用して、メッセージキューでトランザクションキューを作成できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-866">You can use this overload to create a transactional queue in Message Queuing.</span></span> <span data-ttu-id="2e7ae-867">非トランザクションキューを作成するには、 `transactional`パラメーターをに設定する`false`か、の<xref:System.Messaging.MessageQueue.Create%28System.String%29>他のオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-867">You can create a non-transactional queue, by setting the `transactional` parameter to `false` or by calling the other overload of <xref:System.Messaging.MessageQueue.Create%28System.String%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-868">アプリケーションで<xref:System.Messaging.MessageQueue>クラスの新しいインスタンスを作成し、既存のキューにバインドするには<xref:System.Messaging.MessageQueue.%23ctor%2A> 、コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-868">To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor.</span></span> <span data-ttu-id="2e7ae-869">メッセージキューに新しいキューを作成するには<xref:System.Messaging.MessageQueue.Create%28System.String%29>、を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-869">To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-870">`path`パラメーターの構文は、次の表に示すように、参照するキューの種類によって異なります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-870">The syntax for the `path` parameter depends on the type of queue it references, as shown in the following table.</span></span>  
  
|<span data-ttu-id="2e7ae-871">キューの種類</span><span class="sxs-lookup"><span data-stu-id="2e7ae-871">Queue type</span></span>|<span data-ttu-id="2e7ae-872">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-872">Syntax</span></span>|  
|----------------|------------|  
|<span data-ttu-id="2e7ae-873">パブリックキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-873">Public queue</span></span>|`MachineName`\\`QueueName`|  
|<span data-ttu-id="2e7ae-874">専用キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-874">Private queue</span></span>|`MachineName`\\`Private$`\\`QueueName`|  
  
 <span data-ttu-id="2e7ae-875">ローカルコンピューターには "." を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-875">Use "." for the local computer.</span></span> <span data-ttu-id="2e7ae-876">構文の詳細について<xref:System.Messaging.MessageQueue.Path%2A>は、プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-876">For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.</span></span>  
  
 <span data-ttu-id="2e7ae-877">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-877">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-878">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-878">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-879">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-879">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-880">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-880">Local computer</span></span>|<span data-ttu-id="2e7ae-881">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-881">Yes</span></span>|  
|<span data-ttu-id="2e7ae-882">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-882">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-883">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-883">Yes</span></span>|  
|<span data-ttu-id="2e7ae-884">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-884">Remote computer</span></span>|<span data-ttu-id="2e7ae-885">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-885">No</span></span>|  
|<span data-ttu-id="2e7ae-886">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-886">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-887">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-887">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-888">次のコード例では、パブリックおよびプライベートのトランザクションキューを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-888">The following code example creates public and private transactional queues.</span></span> <span data-ttu-id="2e7ae-889">選択したキューにメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-889">It sends a message to selected queues.</span></span>  
  
 [!code-cpp[MessageQueue.Create_PathTransactional#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Create_PathTransactional/CPP/mqcreate_transactional.cpp#1)]
 [!code-csharp[MessageQueue.Create_PathTransactional#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Create_PathTransactional/CS/mqcreate_transactional.cs#1)]
 [!code-vb[MessageQueue.Create_PathTransactional#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Create_PathTransactional/VB/mqcreate_transactional.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-890"><paramref name="path" /> パラメーターが <see langword="null" /> または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-890">The <paramref name="path" /> parameter is <see langword="null" /> or is an empty string ("").</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-891">指定したパスには既にキューが存在します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-891">A queue already exists at the specified path.</span></span>  
  
 <span data-ttu-id="2e7ae-892">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-892">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-893">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-893">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
        <altmember cref="M:System.Messaging.MessageQueue.#ctor" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="CreateCursor">
      <MemberSignature Language="C#" Value="public System.Messaging.Cursor CreateCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Cursor CreateCursor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.CreateCursor" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCursor () As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Cursor ^ CreateCursor();" />
      <MemberSignature Language="F#" Value="member this.CreateCursor : unit -&gt; System.Messaging.Cursor" Usage="messageQueue.CreateCursor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Cursor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-894">現在のメッセージ キューの新しい <see cref="T:System.Messaging.Cursor" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-894">Creates a new <see cref="T:System.Messaging.Cursor" /> for the current message queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-895">現在のメッセージ キューの新しい <see cref="T:System.Messaging.Cursor" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-895">A new <see cref="T:System.Messaging.Cursor" /> for the current message queue.</span></span> <span data-ttu-id="2e7ae-896">このカーソルは、キューのメッセージを読み取るときに、キュー内の特定の場所を維持するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-896">This cursor is used to maintain a specific location in the queue when reading the queue's messages.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Messaging.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="CreateTime">
      <MemberSignature Language="C#" Value="public DateTime CreateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime CreateTime" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.CreateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime CreateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateTime : DateTime" Usage="System.Messaging.MessageQueue.CreateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_CreateTime")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-897">キューがメッセージ キューに作成された時刻と日付を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-897">Gets the time and date that the queue was created in Message Queuing.</span></span></summary>
        <value><span data-ttu-id="2e7ae-898">キューが作成された日付と時刻を表す <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-898">A <see cref="T:System.DateTime" /> that represents the date and time at which the queue was created.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-899"><xref:System.Messaging.MessageQueue.CreateTime%2A>は、 <xref:System.Messaging.MessageQueue>インスタンスではなく、メッセージキューサーバーのキューを参照します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-899"><xref:System.Messaging.MessageQueue.CreateTime%2A> refers to the queue on the Message Queuing server, not the <xref:System.Messaging.MessageQueue> instance.</span></span>  
  
 <span data-ttu-id="2e7ae-900">キューが存在する場合、このプロパティはキューが作成された時刻を表し、キューが存在するサーバーのローカル時刻に調整されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-900">If the queue exists, this property represents the time the queue was created, adjusted to the local time of the server on which the queue exists.</span></span>  
  
 <span data-ttu-id="2e7ae-901">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-901">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-902">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-902">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-903">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-903">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-904">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-904">Local computer</span></span>|<span data-ttu-id="2e7ae-905">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-905">Yes</span></span>|  
|<span data-ttu-id="2e7ae-906">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-906">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-907">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-907">Yes</span></span>|  
|<span data-ttu-id="2e7ae-908">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-908">Remote computer</span></span>|<span data-ttu-id="2e7ae-909">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-909">No</span></span>|  
|<span data-ttu-id="2e7ae-910">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-910">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-911">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-911">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-912">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.CreateTime%2A>プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-912">The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.CreateTime%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#9](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-913">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-913">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.LastModifyTime" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPropertiesToSend">
      <MemberSignature Language="C#" Value="public System.Messaging.DefaultPropertiesToSend DefaultPropertiesToSend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.DefaultPropertiesToSend DefaultPropertiesToSend" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultPropertiesToSend As DefaultPropertiesToSend" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::DefaultPropertiesToSend ^ DefaultPropertiesToSend { System::Messaging::DefaultPropertiesToSend ^ get(); void set(System::Messaging::DefaultPropertiesToSend ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPropertiesToSend : System.Messaging.DefaultPropertiesToSend with get, set" Usage="System.Messaging.MessageQueue.DefaultPropertiesToSend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_DefaultPropertiesToSend")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.DefaultPropertiesToSend</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-914">アプリケーションがメッセージをキューに送信するときに既定で使用されるメッセージ プロパティ値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-914">Gets or sets the message property values to be used by default when the application sends messages to the queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-915">アプリケーションが <see cref="T:System.Messaging.DefaultPropertiesToSend" /> インスタンス以外のオブジェクトをキューに送信するときに使用する既定のメッセージ キューのメッセージ プロパティ値を含む <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-915">A <see cref="T:System.Messaging.DefaultPropertiesToSend" /> that contains the default Message Queuing message property values used when the application sends objects other than <see cref="T:System.Messaging.Message" /> instances to the queue.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-916">型<xref:System.Messaging.Message>ではないオブジェクトをキューに送信すると、はそのオブジェクト<xref:System.Messaging.MessageQueue>をメッセージキューメッセージに挿入します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-916">When you send any object that is not of type <xref:System.Messaging.Message> to the queue, the <xref:System.Messaging.MessageQueue> inserts the object into a Message Queuing message.</span></span> <span data-ttu-id="2e7ae-917">その時点で、は<xref:System.Messaging.MessageQueue> 、 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>プロパティで指定したプロパティ値をメッセージに適用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-917">At that time, the <xref:System.Messaging.MessageQueue> applies to the message the property values you specify in the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property.</span></span> <span data-ttu-id="2e7ae-918">逆に、を<xref:System.Messaging.Message>キューに送信すると、これらのプロパティはインスタンス自体<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>に対して既に指定されて<xref:System.Messaging.Message>いるので、では無視されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-918">Conversely, if you send a <xref:System.Messaging.Message> to the queue, these properties are already specified for the instance itself, so <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> is ignored for the <xref:System.Messaging.Message>.</span></span>  
  
 <span data-ttu-id="2e7ae-919"><xref:System.Messaging.MessageQueue>オブジェクトを使用してプロパティを設定して<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>も、はキュー自体ではなく、キューに送信されるメッセージのプロパティを参照します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-919">Although you set the properties through the <xref:System.Messaging.MessageQueue> object, the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> refers to the properties of the messages that are sent to the queue, not the queue itself.</span></span>  
  
 <span data-ttu-id="2e7ae-920">次の表に、プロパティの既定値を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-920">The default values for the properties are shown in the following table.</span></span>  
  
|<span data-ttu-id="2e7ae-921">プロパティ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-921">Property</span></span>|<span data-ttu-id="2e7ae-922">既定値</span><span class="sxs-lookup"><span data-stu-id="2e7ae-922">Default value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.DefaultPropertiesToSend.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>|<span data-ttu-id="2e7ae-923">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="2e7ae-923">Zero (0)</span></span>|  
|<xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>|<span data-ttu-id="2e7ae-924">長さ0のバイト配列</span><span class="sxs-lookup"><span data-stu-id="2e7ae-924">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.DefaultPropertiesToSend.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.DefaultPropertiesToSend.Label%2A>|<span data-ttu-id="2e7ae-925">空の文字列 ("")</span><span class="sxs-lookup"><span data-stu-id="2e7ae-925">Empty string ("")</span></span>|  
|<xref:System.Messaging.DefaultPropertiesToSend.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseTracing%2A>|`false`|  
  
 <span data-ttu-id="2e7ae-926">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-926">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-927">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-927">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-928">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-928">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-929">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-929">Local computer</span></span>|<span data-ttu-id="2e7ae-930">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-930">Yes</span></span>|  
|<span data-ttu-id="2e7ae-931">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-931">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-932">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-932">Yes</span></span>|  
|<span data-ttu-id="2e7ae-933">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-933">Remote computer</span></span>|<span data-ttu-id="2e7ae-934">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-934">Yes</span></span>|  
|<span data-ttu-id="2e7ae-935">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-935">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-936">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-936">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-937">次のコード例では、メッセージの優先度を使用して、メッセージに対して送信する既定のプロパティを決定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-937">The following code example uses the priority of a message to determine default properties to send for the message.</span></span>  
  
 [!code-cpp[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/CPP/mqdefaultpropertiestosend.cpp#1)]
 [!code-csharp[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/CS/mqdefaultpropertiestosend.cs#1)]
 [!code-vb[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/VB/mqdefaultpropertiestosend.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-938">既定のプロパティをキューに設定できませんでした。いずれかのプロパティが無効であることが原因である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-938">The default properties could not be set for the queue, possibly because one of the properties is not valid.</span></span></exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
        <altmember cref="T:System.Messaging.EncryptionAlgorithm" />
        <altmember cref="T:System.Messaging.HashAlgorithm" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Delete : string -&gt; unit" Usage="System.Messaging.MessageQueue.Delete path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2e7ae-939">削除するキューの場所。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-939">The location of the queue to be deleted.</span></span></param>
        <summary><span data-ttu-id="2e7ae-940">メッセージ キュー サーバーのキューを削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-940">Deletes a queue on a Message Queuing server.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-941">`path`パラメーターの構文は、キューの種類によって異なります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-941">The syntax for the `path` parameter depends on the type of queue.</span></span>  
  
|<span data-ttu-id="2e7ae-942">キューの種類</span><span class="sxs-lookup"><span data-stu-id="2e7ae-942">Queue type</span></span>|<span data-ttu-id="2e7ae-943">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-943">Syntax</span></span>|  
|----------------|------------|  
|<span data-ttu-id="2e7ae-944">パブリックキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-944">Public queue</span></span>|`MachineName`\\`QueueName`|  
|<span data-ttu-id="2e7ae-945">専用キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-945">Private queue</span></span>|`MachineName`\\`Private$`\\`QueueName`|  
  
 <span data-ttu-id="2e7ae-946">構文の詳細について<xref:System.Messaging.MessageQueue.Path%2A>は、プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-946">For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.</span></span>  
  
 <span data-ttu-id="2e7ae-947">または、 <xref:System.Messaging.MessageQueue.FormatName%2A>または<xref:System.Messaging.MessageQueue.Label%2A>を使用して、キューのパスを記述することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-947">Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path.</span></span>  
  
|<span data-ttu-id="2e7ae-948">関連項目</span><span class="sxs-lookup"><span data-stu-id="2e7ae-948">Reference</span></span>|<span data-ttu-id="2e7ae-949">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-949">Syntax</span></span>|  
|---------------|------------|  
|<span data-ttu-id="2e7ae-950">形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-950">Format name</span></span>|<span data-ttu-id="2e7ae-951">FormatName: [*形式名*]</span><span class="sxs-lookup"><span data-stu-id="2e7ae-951">FormatName:[ *format name* ]</span></span>|  
|<span data-ttu-id="2e7ae-952">group1</span><span class="sxs-lookup"><span data-stu-id="2e7ae-952">Label</span></span>|<span data-ttu-id="2e7ae-953">ラベル: [*ラベル*]</span><span class="sxs-lookup"><span data-stu-id="2e7ae-953">Label:[ *label* ]</span></span>|  
  
 <span data-ttu-id="2e7ae-954">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-954">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-955">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-955">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-956">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-956">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-957">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-957">Local computer</span></span>|<span data-ttu-id="2e7ae-958">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-958">Yes</span></span>|  
|<span data-ttu-id="2e7ae-959">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-959">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-960">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-960">Yes</span></span>|  
|<span data-ttu-id="2e7ae-961">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-961">Remote computer</span></span>|<span data-ttu-id="2e7ae-962">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-962">No</span></span>|  
|<span data-ttu-id="2e7ae-963">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-963">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-964">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-964">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-965">次のコード例では、メッセージキューのキューが存在する場合は削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-965">The following code example deletes a Message Queuing queue, if it exists.</span></span>  
  
 [!code-cpp[MessageQueue.ExistsDelete#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ExistsDelete/CPP/mqexistsdelete.cpp#1)]
 [!code-csharp[MessageQueue.ExistsDelete#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ExistsDelete/CS/mqexistsdelete.cs#1)]
 [!code-vb[MessageQueue.ExistsDelete#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ExistsDelete/VB/mqexistsdelete.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-966"><paramref name="path" /> パラメーターが <see langword="null" /> または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-966">The <paramref name="path" /> parameter is <see langword="null" /> or is an empty string ("").</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-967"><paramref name="path" /> パラメーターの構文が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-967">The syntax for the <paramref name="path" /> parameter is not valid.</span></span>  
  
<span data-ttu-id="2e7ae-968">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-968">-or-</span></span> 
<span data-ttu-id="2e7ae-969">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-969">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.Close" />
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
      </Docs>
    </Member>
    <Member MemberName="DenySharedReceive">
      <MemberSignature Language="C#" Value="public bool DenySharedReceive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DenySharedReceive" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.DenySharedReceive" />
      <MemberSignature Language="VB.NET" Value="Public Property DenySharedReceive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DenySharedReceive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DenySharedReceive : bool with get, set" Usage="System.Messaging.MessageQueue.DenySharedReceive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_DenySharedReceive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-970">この <see cref="T:System.Messaging.MessageQueue" /> に、メッセージ キューのキューからメッセージを受信する排他アクセス許可が与えられているかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-970">Gets or sets a value that indicates whether this <see cref="T:System.Messaging.MessageQueue" /> has exclusive access to receive messages from the Message Queuing queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-971">この <see cref="T:System.Messaging.MessageQueue" /> に、キューからメッセージを受信する排他アクセス許可が与えられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-971"><see langword="true" /> if this <see cref="T:System.Messaging.MessageQueue" /> has exclusive rights to receive messages from the queue; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2e7ae-972">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-972">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-973"><xref:System.Messaging.MessageQueue.DenySharedReceive%2A>この<xref:System.Messaging.MessageQueue>によって参照されるキューの共有モードを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-973"><xref:System.Messaging.MessageQueue.DenySharedReceive%2A> specifies the shared mode of the queue referenced by this <xref:System.Messaging.MessageQueue>.</span></span> <span data-ttu-id="2e7ae-974">に<xref:System.Messaging.MessageQueue.DenySharedReceive%2A> 設定 `true`  すると <xref:System.Messaging.MessageQueue.Path%2A> 、指定したを使用してキューからメッセージをピークまたは受信するためのアクセス権を持つだけであることを示します。 <xref:System.Messaging.MessageQueue></span><span class="sxs-lookup"><span data-stu-id="2e7ae-974">Set <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> to `true` to indicate that only this <xref:System.Messaging.MessageQueue> should have access to peek or receive messages from the queue with the specified <xref:System.Messaging.MessageQueue.Path%2A>.</span></span> <span data-ttu-id="2e7ae-975">別<xref:System.Messaging.MessageQueue>のアプリケーションまたは別のアプリケーションが同じキューリソースに関連付けられている場合、そのインスタンスまたはアプリケーションはメッセージをピークまたは受信できませんが、メッセージを送信することはできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-975">If another <xref:System.Messaging.MessageQueue> or another application is associated with the same queue resource, that instance or application will not be able to peek or receive messages, but it can still send them.</span></span>  
  
 <span data-ttu-id="2e7ae-976"><xref:System.Messaging.MessageQueue.DenySharedReceive%2A> が `false` の場合、キューはメッセージの送信、ピーク、または受信のために複数のアプリケーションで使用できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-976">If <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> is `false`, the queue is available to multiple applications for sending, peeking, or receiving messages.</span></span>  
  
 <span data-ttu-id="2e7ae-977">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-977">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-978">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-978">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-979">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-979">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-980">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-980">Local computer</span></span>|<span data-ttu-id="2e7ae-981">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-981">Yes</span></span>|  
|<span data-ttu-id="2e7ae-982">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-982">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-983">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-983">Yes</span></span>|  
|<span data-ttu-id="2e7ae-984">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-984">Remote computer</span></span>|<span data-ttu-id="2e7ae-985">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-985">Yes</span></span>|  
|<span data-ttu-id="2e7ae-986">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-986">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-987">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-987">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-988">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-988">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#10](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.#ctor" />
        <altmember cref="P:System.Messaging.MessageQueue.EnableConnectionCache" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="messageQueue.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="2e7ae-989">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-989"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="2e7ae-990"><see cref="T:System.Messaging.MessageQueue" /> で使用されていたリソース (メモリを除く) を解放します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-990">Disposes of the resources (other than memory) used by the <see cref="T:System.Messaging.MessageQueue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-991"><xref:System.Messaging.MessageQueue> を使い終わったら、<xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-991">Call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> when you are finished using the <xref:System.Messaging.MessageQueue>.</span></span> <span data-ttu-id="2e7ae-992"><xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29>メソッドによって、<xref:System.Messaging.MessageQueue> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-992">The <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> method leaves the <xref:System.Messaging.MessageQueue> in an unusable state.</span></span> <span data-ttu-id="2e7ae-993">を呼び出し<xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29>た後は、に対するすべての<xref:System.Messaging.MessageQueue>参照を解放して、占有していたメモリがガベージコレクションによって回収されるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-993">After calling <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29>, you must release all references to the <xref:System.Messaging.MessageQueue> so the memory it was occupying can be reclaimed by garbage collection.</span></span>  
  
 <span data-ttu-id="2e7ae-994">への最後<xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29>の参照を解放する前に、 <xref:System.Messaging.MessageQueue>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-994">You should call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> before you release your last reference to the <xref:System.Messaging.MessageQueue>.</span></span> <span data-ttu-id="2e7ae-995">それ以外の場合、 <xref:System.Messaging.MessageQueue>が使用しているリソースは、ガベージコレクションが<xref:System.Messaging.MessageQueue>オブジェクトのデストラクターを呼び出すまで解放されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-995">Otherwise, the resources the <xref:System.Messaging.MessageQueue> is using will not be freed until garbage collection calls the <xref:System.Messaging.MessageQueue> object's destructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.Close" />
      </Docs>
    </Member>
    <Member MemberName="EnableConnectionCache">
      <MemberSignature Language="C#" Value="public static bool EnableConnectionCache { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnableConnectionCache" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.EnableConnectionCache" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property EnableConnectionCache As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnableConnectionCache { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableConnectionCache : bool with get, set" Usage="System.Messaging.MessageQueue.EnableConnectionCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-996">接続のキャッシュをアプリケーションで維持するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-996">Gets or sets a value that indicates whether a cache of connections will be maintained by the application.</span></span></summary>
        <value><span data-ttu-id="2e7ae-997">接続キャッシュを作成し、使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-997"><see langword="true" /> to create and use a connection cache; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-998">接続キャッシュとは、キューへの読み取りまたは書き込みハンドルを含む構造体への参照の一覧です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-998">A connection cache is a list of references to structures that contain read or write handles to queues.</span></span> <span data-ttu-id="2e7ae-999">が<xref:System.Messaging.MessageQueue.EnableConnectionCache%2A>の場合、 <xref:System.Messaging.MessageQueue>ではは、新しいハンドルを開くのでは<xref:System.Messaging.MessageQueue.Peek%2A>なく、 <xref:System.Messaging.MessageQueue.Receive%2A>、、またはを呼び出す<xref:System.Messaging.MessageQueue.Send%28System.Object%29>たびにキャッシュから処理さ`true`れます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-999">When <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> is `true`, the <xref:System.Messaging.MessageQueue> borrows handles from the cache each time you call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, rather than open new handles.</span></span> <span data-ttu-id="2e7ae-1000">これにより、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1000">This can improve performance.</span></span> <span data-ttu-id="2e7ae-1001">また、接続キャッシュを使用する<xref:System.Messaging.MessageQueue>と、ネットワークトポロジの変化を防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1001">Using a connection cache also insulates the <xref:System.Messaging.MessageQueue> from changes in the network topology.</span></span>  
  
 <span data-ttu-id="2e7ae-1002">接続キャッシュがいっぱいになったときにキューへの新しい接続を作成する<xref:System.Messaging.MessageQueue>と、では、最近アクセスした構造体が新しい接続で上書きされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1002">If you create a new connection to a queue when the connection cache is full, the <xref:System.Messaging.MessageQueue> overwrites the least recently accessed structure with the new connection.</span></span> <span data-ttu-id="2e7ae-1003">を呼び出す<xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>ことによって、キャッシュを完全に消去できます。たとえば、使用しているキューの形式名が変更され、以前の読み取りハンドルと書き込みハンドルが無効になっている場合などです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1003">You can clear the cache entirely by calling <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, for example, if the format names of the queues you are working with have changed so that the previous read and write handles are no longer valid.</span></span>  
  
 <span data-ttu-id="2e7ae-1004">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1004">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1005">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1005">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1006">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1006">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1007">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1007">Local computer</span></span>|<span data-ttu-id="2e7ae-1008">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1008">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1009">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1009">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1010">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1010">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1011">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1011">Remote computer</span></span>|<span data-ttu-id="2e7ae-1012">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1012">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1013">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1013">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1014">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1014">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1015">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.EnableConnectionCache%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1015">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#11](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.ClearConnectionCache" />
      </Docs>
    </Member>
    <Member MemberName="EncryptionRequired">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionRequired EncryptionRequired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionRequired EncryptionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.EncryptionRequired" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionRequired As EncryptionRequired" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionRequired EncryptionRequired { System::Messaging::EncryptionRequired get(); void set(System::Messaging::EncryptionRequired value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptionRequired : System.Messaging.EncryptionRequired with get, set" Usage="System.Messaging.MessageQueue.EncryptionRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_EncryptionRequired")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionRequired</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1016">キューが非プライベート (暗号化されていない) メッセージだけを受け入れるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1016">Gets or sets a value that indicates whether the queue accepts only non-private (non-encrypted) messages.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1017"><see cref="T:System.Messaging.EncryptionRequired" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1017">One of the <see cref="T:System.Messaging.EncryptionRequired" /> values.</span></span> <span data-ttu-id="2e7ae-1018">既定値は、<see langword="None" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1018">The default is <see langword="None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1019">キューに送信されるメッセージに暗号化が必要であることを指定すると、メッセージ本文のみが暗号化されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1019">When you specify that encryption is required for the messages sent to a queue, only the message bodies are encrypted.</span></span> <span data-ttu-id="2e7ae-1020">他のメンバー (たとえば<xref:System.Messaging.Message.Label%2A> 、プロパティや<xref:System.Messaging.Message.SenderId%2A>プロパティ) は暗号化できません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1020">The other members (for example, the <xref:System.Messaging.Message.Label%2A> and <xref:System.Messaging.Message.SenderId%2A> properties) cannot be encrypted.</span></span>  
  
 <span data-ttu-id="2e7ae-1021">このプロパティを設定すると、メッセージキューのキューが変更されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1021">Setting this property modifies the Message Queuing queue.</span></span> <span data-ttu-id="2e7ae-1022">そのため、その<xref:System.Messaging.MessageQueue>他のインスタンスは変更の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1022">Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.</span></span>  
  
 <span data-ttu-id="2e7ae-1023">メッセージを暗号化すると、メッセージがプライベートになります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1023">Encrypting a message makes the message private.</span></span> <span data-ttu-id="2e7ae-1024">キューの暗号化要件`None`を、 `Body`、 <xref:System.Messaging.MessageQueue.EncryptionRequired%2A> 、または`Optional`に設定して、プロパティを適切に設定することができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1024">You can specify the queue's encryption requirement to be `None`, `Body`, or `Optional` by setting the <xref:System.Messaging.MessageQueue.EncryptionRequired%2A> property appropriately.</span></span> <span data-ttu-id="2e7ae-1025">メッセージ<xref:System.Messaging.Message.UseEncryption%2A>の設定は、キューの暗号化要件に対応している必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1025">The <xref:System.Messaging.Message.UseEncryption%2A> setting of the message must correspond to the encryption requirement of the queue.</span></span> <span data-ttu-id="2e7ae-1026">メッセージが暗号化されていないが、 `Body`キューがを指定している場合、または`None`メッセージが暗号化されていてもキューでが指定されている場合、メッセージはキューによって拒否されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1026">If the message is not encrypted but the queue specifies `Body`, or if the message is encrypted but the queue specifies `None`, the message is rejected by the queue.</span></span> <span data-ttu-id="2e7ae-1027">送信元のアプリケーションがこのイベントで否定受信確認メッセージを要求した場合、メッセージキューは、送信元アプリケーションに対するメッセージの拒否を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1027">If the sending application requests a negative acknowledgment message in this event, Message Queuing indicates the message's rejection to the sending application.</span></span> <span data-ttu-id="2e7ae-1028"><xref:System.Messaging.Message.UseDeadLetterQueue%2A>プロパティが `true` の場合、暗号化に失敗したメッセージは配信不能キューに送信されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1028">If the <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, a message that fails encryption is sent to the dead-letter queue.</span></span> <span data-ttu-id="2e7ae-1029">それ以外の場合、メッセージは失われます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1029">Otherwise, the message is lost.</span></span>  
  
 <span data-ttu-id="2e7ae-1030">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1030">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1031">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1031">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1032">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1032">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1033">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1033">Local computer</span></span>|<span data-ttu-id="2e7ae-1034">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1034">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1035">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1035">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1036">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1036">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1037">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1037">Remote computer</span></span>|<span data-ttu-id="2e7ae-1038">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1038">No</span></span>|  
|<span data-ttu-id="2e7ae-1039">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1039">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1040">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1040">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1041">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1041">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.EncryptionRequired%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#12](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1042">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1042">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.Acknowledgment" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
      </Docs>
    </Member>
    <Member MemberName="EndPeek">
      <MemberSignature Language="C#" Value="public System.Messaging.Message EndPeek (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message EndPeek(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndPeek (asyncResult As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ EndPeek(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndPeek : IAsyncResult -&gt; System.Messaging.Message" Usage="messageQueue.EndPeek asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="2e7ae-1043">完了する非同期のピーク操作を識別する <see cref="T:System.IAsyncResult" />。ここから最終結果が取得されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1043">The <see cref="T:System.IAsyncResult" /> that identifies the asynchronous peek operation to finish and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1044">指定した非同期のピーク操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1044">Completes the specified asynchronous peek operation.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1045">完了した非同期操作に関連付けられた <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1045">The <see cref="T:System.Messaging.Message" /> associated with the completed asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1046">イベントが発生すると、 <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>は<xref:System.Messaging.MessageQueue.BeginPeek%2A>呼び出しによって開始された操作を完了します。 <xref:System.Messaging.MessageQueue.PeekCompleted></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1046">When the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginPeek%2A> call.</span></span> <span data-ttu-id="2e7ae-1047">これを行うに<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>は、によってメッセージがピークされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1047">To do so, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> peeks the message.</span></span>  
  
 <span data-ttu-id="2e7ae-1048"><xref:System.Messaging.MessageQueue.BeginPeek%2A>タイムアウトを指定できます。これにより、 <xref:System.Messaging.MessageQueue.PeekCompleted>キューにメッセージが表示される前にタイムアウトが発生した場合に、イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1048"><xref:System.Messaging.MessageQueue.BeginPeek%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised if the time-out occurs before a message appears in the queue.</span></span> <span data-ttu-id="2e7ae-1049">キューにメッセージが到着せずにタイムアウトが発生すると、へ<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>の後続の呼び出しで例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1049">When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> throws an exception.</span></span>  
  
 <span data-ttu-id="2e7ae-1050"><xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>は、 <xref:System.Messaging.MessageQueue.PeekCompleted>イベントが発生する原因となったメッセージを読み取るために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1050"><xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to read the message that caused the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised.</span></span>  
  
 <span data-ttu-id="2e7ae-1051">メッセージを非同期にピークする場合は、を呼び出し<xref:System.Messaging.MessageQueue.BeginPeek%2A> <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>た後でをもう一度呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1051">If you want to continue to asynchronously peek messages, you can again call <xref:System.Messaging.MessageQueue.BeginPeek%2A> after calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-1052">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1052">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1053">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1053">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1054">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1054">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1055">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1055">Local computer</span></span>|<span data-ttu-id="2e7ae-1056">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1056">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1057">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1057">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1058">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1058">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1059">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1059">Remote computer</span></span>|<span data-ttu-id="2e7ae-1060">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1060">No</span></span>|  
|<span data-ttu-id="2e7ae-1061">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1061">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1062">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1062">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1063">次のコード例では、という`MyPeekCompleted`名前のイベントハンドラーを<xref:System.Messaging.MessageQueue.PeekCompleted>作成し、それをイベント<xref:System.Messaging.MessageQueue.BeginPeek%2A>ハンドラーデリゲートにアタッチし、を呼び出して、パス ".\myQueue" にあるキューで非同期のピーク操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1063">The following code example creates an event handler named `MyPeekCompleted`, attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> to initiate an asynchronous peek operation on the queue that is located at the path ".\myQueue".</span></span> <span data-ttu-id="2e7ae-1064"><xref:System.Messaging.MessageQueue.PeekCompleted>イベントが発生すると、この例では、メッセージをピークし、その本文を画面に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1064">When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the example peeks the message and writes its body to the screen.</span></span> <span data-ttu-id="2e7ae-1065">この例では<xref:System.Messaging.MessageQueue.BeginPeek%2A> 、を再度呼び出して、新しい非同期ピーク操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1065">The example then calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> again to initiate a new asynchronous peek operation.</span></span>  
  
 [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CPP/mqbeginpeek_noparms.cpp#1)]
 [!code-csharp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CS/mqbeginpeek_noparms.cs#1)]
 [!code-vb[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/VB/mqbeginpeek_noparms.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-1066"><paramref name="asyncResult" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1066">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1067"><paramref name="asyncResult" /> パラメーターの構文が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1067">The syntax of the <paramref name="asyncResult" /> parameter is not valid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1068">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1068">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="E:System.Messaging.MessageQueue.PeekCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.Messaging.Message EndReceive (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message EndReceive(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ EndReceive(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult -&gt; System.Messaging.Message" Usage="messageQueue.EndReceive asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="2e7ae-1069">完了する非同期の受信操作を識別する <see cref="T:System.IAsyncResult" />。ここから最終結果が取得されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1069">The <see cref="T:System.IAsyncResult" /> that identifies the asynchronous receive operation to finish and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1070">指定した非同期の受信操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1070">Completes the specified asynchronous receive operation.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1071">完了した非同期操作に関連付けられた <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1071">The <see cref="T:System.Messaging.Message" /> associated with the completed asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1072">イベントが発生すると、 <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>は<xref:System.Messaging.MessageQueue.BeginReceive%2A>呼び出しによって開始された操作を完了します。 <xref:System.Messaging.MessageQueue.ReceiveCompleted></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1072">When the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginReceive%2A> call.</span></span> <span data-ttu-id="2e7ae-1073">これを行うため<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>に、はメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1073">To do so, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> receives the message.</span></span>  
  
 <span data-ttu-id="2e7ae-1074"><xref:System.Messaging.MessageQueue.BeginReceive%2A>タイムアウトを指定できます。これにより、 <xref:System.Messaging.MessageQueue.ReceiveCompleted>キューにメッセージが表示される前にタイムアウトが発生した場合に、イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1074"><xref:System.Messaging.MessageQueue.BeginReceive%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised if the time-out occurs before a message appears in the queue.</span></span> <span data-ttu-id="2e7ae-1075">キューにメッセージが到着せずにタイムアウトが発生すると、へ<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>の後続の呼び出しで例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1075">When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> throws an exception.</span></span>  
  
 <span data-ttu-id="2e7ae-1076"><xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>は、イベントの<xref:System.Messaging.MessageQueue.ReceiveCompleted>発生原因となったメッセージの読み取り (キューからの削除) に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1076"><xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to read (removing from the queue) the message that caused the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised.</span></span>  
  
 <span data-ttu-id="2e7ae-1077">引き続き非同期的にメッセージを受信する場合は、を呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A> <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>た後でをもう一度呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1077">If you want to continue to asynchronously receive messages, you can again call <xref:System.Messaging.MessageQueue.BeginReceive%2A> after calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.</span></span>  
  
 <span data-ttu-id="2e7ae-1078">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1078">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1079">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1079">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1080">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1080">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1081">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1081">Local computer</span></span>|<span data-ttu-id="2e7ae-1082">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1082">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1083">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1083">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1084">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1084">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1085">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1085">Remote computer</span></span>|<span data-ttu-id="2e7ae-1086">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1086">No</span></span>|  
|<span data-ttu-id="2e7ae-1087">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1087">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1088">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1088">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1089">次のコード例では、非同期要求をチェーンします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1089">The following code example chains asynchronous requests.</span></span> <span data-ttu-id="2e7ae-1090">これは、"myQueue" という名前のローカルコンピューターにキューがあることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1090">It assumes there is a queue on the local computer called "myQueue".</span></span> <span data-ttu-id="2e7ae-1091">関数は、 `MyReceiveCompleted`ルーチンによって処理される非同期操作を開始します。 `Main`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1091">The `Main` function begins the asynchronous operation that is handled by the `MyReceiveCompleted` routine.</span></span> <span data-ttu-id="2e7ae-1092">`MyReceiveCompleted`現在のメッセージを処理し、新しい非同期の受信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1092">`MyReceiveCompleted` processes the current message and begins a new asynchronous receive operation.</span></span>  
  
 [!code-cpp[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CPP/mqbeginreceive_noparms_mre.cpp#1)]
 [!code-csharp[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CS/mqbeginreceive_noparms_mre.cs#1)]
 [!code-vb[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/VB/mqbeginreceive_noparms_mre.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-1093"><paramref name="asyncResult" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1093">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1094"><paramref name="asyncResult" /> パラメーターの構文が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1094">The syntax of the <paramref name="asyncResult" /> parameter is not valid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1095">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1095">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
        <altmember cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Exists : string -&gt; bool" Usage="System.Messaging.MessageQueue.Exists path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2e7ae-1096">検索するキューの場所。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1096">The location of the queue to find.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1097">指定したパスにメッセージ キューのキューが存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1097">Determines whether a Message Queuing queue exists at the specified path.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1098">指定したパスにキューが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1098"><see langword="true" /> if a queue with the specified path exists; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1099">メソッド<xref:System.Messaging.MessageQueue.Exists%28System.String%29>は、指定されたパスにメッセージキューのキューが存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1099">The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method determines whether a Message Queuing queue exists at a specified path.</span></span> <span data-ttu-id="2e7ae-1100">指定された形式名のキューが存在するかどうかを判断するためのメソッドが存在しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1100">No method exists to determine whether a queue with a specified format name exists.</span></span> <span data-ttu-id="2e7ae-1101">形式名の構文とその他のパス構文形式の詳細について<xref:System.Messaging.MessageQueue.Path%2A>は、「」プロパティを参照してください。)</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1101">For more information about the format name syntax and other path syntax forms, see the <xref:System.Messaging.MessageQueue.Path%2A> property.)</span></span>  
  
 <span data-ttu-id="2e7ae-1102"><xref:System.Messaging.MessageQueue.Exists%28System.String%29>は負荷の高い操作です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1102"><xref:System.Messaging.MessageQueue.Exists%28System.String%29> is an expensive operation.</span></span> <span data-ttu-id="2e7ae-1103">アプリケーション内で必要な場合にのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1103">Use it only when it is necessary within the application.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2e7ae-1104">メソッドは、プレフィックスを<xref:System.Messaging.MessageQueue.FormatName%2A>サポートしていません。 <xref:System.Messaging.MessageQueue.Exists%28System.String%29></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1104">The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method does not support the <xref:System.Messaging.MessageQueue.FormatName%2A> prefix.</span></span>  
  
 <span data-ttu-id="2e7ae-1105">`path`パラメーターの構文は、次の表に示すように、キューの種類によって異なります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1105">The syntax for the `path` parameter depends on the type of queue, as shown in the following table.</span></span>  
  
|<span data-ttu-id="2e7ae-1106">キューの種類</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1106">Queue type</span></span>|<span data-ttu-id="2e7ae-1107">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1107">Syntax</span></span>|  
|----------------|------------|  
|<span data-ttu-id="2e7ae-1108">パブリックキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1108">Public queue</span></span>|`MachineName`\\`QueueName`|  
  
 <span data-ttu-id="2e7ae-1109"><xref:System.Messaging.MessageQueue.Exists%28System.String%29>を呼び出して、リモート専用キューの存在を確認することはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1109"><xref:System.Messaging.MessageQueue.Exists%28System.String%29> cannot be called to verify the existence of a remote private queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1110">構文の詳細について<xref:System.Messaging.MessageQueue.Path%2A>は、プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1110">For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.</span></span>  
  
 <span data-ttu-id="2e7ae-1111">または<xref:System.Messaging.MessageQueue.Label%2A> 、を使用してキューのパスを記述することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1111">Alternatively, you can use the <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path.</span></span>  
  
|<span data-ttu-id="2e7ae-1112">関連項目</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1112">Reference</span></span>|<span data-ttu-id="2e7ae-1113">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1113">Syntax</span></span>|  
|---------------|------------|  
|<span data-ttu-id="2e7ae-1114">group1</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1114">Label</span></span>|<span data-ttu-id="2e7ae-1115">ラベル: [ `label` ]</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1115">Label:[ `label` ]</span></span>|  
  
 <span data-ttu-id="2e7ae-1116">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1116">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1117">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1117">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1118">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1118">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1119">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1119">Local computer</span></span>|<span data-ttu-id="2e7ae-1120">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1120">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1121">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1121">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1122">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1122">No</span></span>|  
|<span data-ttu-id="2e7ae-1123">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1123">Remote computer</span></span>|<span data-ttu-id="2e7ae-1124">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1124">No</span></span>|  
|<span data-ttu-id="2e7ae-1125">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1125">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1126">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1126">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1127">次のコード例では、メッセージキューのキューが存在するかどうかを確認してから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1127">The following code example verifies whether a Message Queuing queue exists, and then deletes it.</span></span>  
  
 [!code-cpp[MessageQueue.ExistsDelete#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ExistsDelete/CPP/mqexistsdelete.cpp#1)]
 [!code-csharp[MessageQueue.ExistsDelete#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ExistsDelete/CS/mqexistsdelete.cs#1)]
 [!code-vb[MessageQueue.ExistsDelete#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ExistsDelete/VB/mqexistsdelete.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1128"><paramref name="path" /> 構文が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1128">The <paramref name="path" /> syntax is not valid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1129">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1129">An error occurred when accessing a Message Queuing method.</span></span>  
  
<span data-ttu-id="2e7ae-1130">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1130">-or-</span></span> 
<span data-ttu-id="2e7ae-1131"><see cref="M:System.Messaging.MessageQueue.Exists(System.String)" /> メソッドがリモート プライベート キューで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1131">The <see cref="M:System.Messaging.MessageQueue.Exists(System.String)" /> method is being called on a remote private queue</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-1132">キューの存在を確認するときに、アプリケーションが書式名構文を使用しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1132">The application used format name syntax when verifying queue existence.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
      </Docs>
    </Member>
    <Member MemberName="FormatName">
      <MemberSignature Language="C#" Value="public string FormatName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatName" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.FormatName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FormatName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FormatName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormatName : string" Usage="System.Messaging.MessageQueue.FormatName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_FormatName")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1133">キューの作成時にメッセージ キューが生成した一意のキュー名を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1133">Gets the unique queue name that Message Queuing generated at the time of the queue's creation.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1134">ネットワークで一意なキューの名前。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1134">The name for the queue, which is unique on the network.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1135">プロパティ<xref:System.Messaging.MessageQueue.FormatName%2A>は、キューの形式名を格納します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1135">The <xref:System.Messaging.MessageQueue.FormatName%2A> property contains the format name of the queue.</span></span> <span data-ttu-id="2e7ae-1136">メッセージキューは、形式名を使用して、開くキューとアクセス方法を識別します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1136">Message Queuing uses the format name to identify which queue to open and how to access it.</span></span> <span data-ttu-id="2e7ae-1137">キューの特性のほとんどと異なり、形式名はメッセージキューアプリケーションキュープロパティではないため、メッセージキュー管理ツールを使用してアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1137">Unlike most of a queue's characteristics, the format name is not a Message Queuing application queue property, so you cannot access it through the Message Queuing management tool.</span></span> <span data-ttu-id="2e7ae-1138">形式名は、キューの一意の名前です。キューを作成するとき、または後でアプリケーションが生成するときに、メッセージキューによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1138">The format name is simply a unique name for the queue, which Message Queuing generates when it creates the queue or which the application generates later.</span></span>  
  
 <span data-ttu-id="2e7ae-1139">キューに対して読み取りまたは書き込みを行うときに format `myComputer\myQueue`name 構文を使用するのではなく、パス名の構文 (など) を使用してパスを指定した場合、 <xref:System.Messaging.MessageQueue.Path%2A>プライマリドメインコントローラー (Active Directory を使用) は、を関連付けられたに変換します。<xref:System.Messaging.MessageQueue.FormatName%2A>キューにアクセスする前。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1139">If you specify a path using the path name syntax (such as `myComputer\myQueue`) rather than using the format name syntax when you read or write to the queue, the primary domain controller (which uses Active Directory) translates the <xref:System.Messaging.MessageQueue.Path%2A> into the associated <xref:System.Messaging.MessageQueue.FormatName%2A> before accessing the queue.</span></span> <span data-ttu-id="2e7ae-1140">アプリケーションがオフラインで作業している場合は、形式名の構文を使用する必要があります。そうしないと、プライマリドメインコントローラーはパス変換を実行できなくなります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1140">If your application is working offline, you must use the format name syntax; otherwise, the primary domain controller will not be available to perform the path translation.</span></span>  
  
 <span data-ttu-id="2e7ae-1141">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1141">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1142">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1142">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1143">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1143">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1144">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1144">Local computer</span></span>|<span data-ttu-id="2e7ae-1145">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1145">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1146">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1146">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1147">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1147">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1148">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1148">Remote computer</span></span>|<span data-ttu-id="2e7ae-1149">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1149">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1150">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1150">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1151">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1151">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1152">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.FormatName%2A>プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1152">The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.FormatName%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#13](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1153"><see cref="P:System.Messaging.MessageQueue.Path" /> が設定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1153">The <see cref="P:System.Messaging.MessageQueue.Path" /> is not set.</span></span>  
  
<span data-ttu-id="2e7ae-1154">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1154">-or-</span></span> 
<span data-ttu-id="2e7ae-1155">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1155">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
        <altmember cref="T:System.Messaging.MessageQueue" />
      </Docs>
    </Member>
    <Member MemberName="Formatter">
      <MemberSignature Language="C#" Value="public System.Messaging.IMessageFormatter Formatter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.IMessageFormatter Formatter" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.Formatter" />
      <MemberSignature Language="VB.NET" Value="Public Property Formatter As IMessageFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::IMessageFormatter ^ Formatter { System::Messaging::IMessageFormatter ^ get(); void set(System::Messaging::IMessageFormatter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Formatter : System.Messaging.IMessageFormatter with get, set" Usage="System.Messaging.MessageQueue.Formatter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageFormatterConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_Formatter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.IMessageFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1156">キューから読み取られるメッセージまたはキューに書き込まれるメッセージの本文とオブジェクトとの間でシリアル化または逆シリアル化を行うために使用する書式指定子を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1156">Gets or sets the formatter used to serialize an object into or deserialize an object from the body of a message read from or written to the queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1157">メッセージ本文に書き込むストリーム、またはメッセージ本文から読み取るストリームを生成する <see cref="T:System.Messaging.IMessageFormatter" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1157">The <see cref="T:System.Messaging.IMessageFormatter" /> that produces a stream to be written to or read from the message body.</span></span> <span data-ttu-id="2e7ae-1158">既定値は、<see cref="T:System.Messaging.XmlMessageFormatter" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1158">The default is <see cref="T:System.Messaging.XmlMessageFormatter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1159">プロパティ<xref:System.Messaging.MessageQueue.Formatter%2A>は、アプリケーションがキューに対して読み取りまたは書き込みを行うときにメッセージを変換する、フォーマッタオブジェクトのインスタンスを格納します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1159">The <xref:System.Messaging.MessageQueue.Formatter%2A> property contains an instance of a formatter object, which transforms messages when your application reads or writes to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1160">アプリケーションがメッセージをキューに送信すると、フォーマッタはオブジェクトをストリームにシリアル化し、メッセージ本文に挿入します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1160">When the application sends message to the queue, the formatter serializes the object into a stream and inserts it into the message body.</span></span> <span data-ttu-id="2e7ae-1161">フォーマッタは、キューから読み取るときに、メッセージデータを<xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message>のプロパティに逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1161">When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.</span></span>  
  
 <span data-ttu-id="2e7ae-1162"><xref:System.Messaging.XmlMessageFormatter>は疎結合であるため、この形式を使用する場合、送信側と受信側で同じオブジェクト型を使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1162">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.</span></span> <span data-ttu-id="2e7ae-1163"><xref:System.Messaging.ActiveXMessageFormatter> と <xref:System.Messaging.BinaryMessageFormatter> は、データをバイナリ表現にシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1163">The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation.</span></span> <span data-ttu-id="2e7ae-1164">は<xref:System.Messaging.ActiveXMessageFormatter> 、COM コンポーネントを送受信するときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1164">The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.</span></span>  
  
 <span data-ttu-id="2e7ae-1165"><xref:System.Messaging.BinaryMessageFormatter>と<xref:System.Messaging.ActiveXMessageFormatter>は、 <xref:System.Messaging.XmlMessageFormatter>よりも高速なスループットを提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1165"><xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>.</span></span> <span data-ttu-id="2e7ae-1166">で<xref:System.Messaging.ActiveXMessageFormatter>は、Visual Basic 6.0 のメッセージキューアプリケーションとの相互運用が可能です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1166">The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications.</span></span>  
  
 <span data-ttu-id="2e7ae-1167">アプリケーションがメッセージをキューに送信すると、 <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType>は、既定のメッセージプロパティであるを<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>使用するメッセージにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1167">When your application sends messages to the queue, the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType> applies only to those messages that use the default message properties, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.</span></span> <span data-ttu-id="2e7ae-1168">を<xref:System.Messaging.Message>キューに送信する場合、メッセージキューは、 <xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType>プロパティで定義されているフォーマッタを使用して、代わりに本文をシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1168">If you send a <xref:System.Messaging.Message> to the queue, Message Queuing uses the formatter defined in the <xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType> property to serialize the body instead.</span></span>  
  
 <span data-ttu-id="2e7ae-1169">クラス<xref:System.Messaging.MessageQueue>は、常にを<xref:System.Messaging.Message>使用して、キューからメッセージを受信またはピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1169">The <xref:System.Messaging.MessageQueue> class will always use a <xref:System.Messaging.Message> to receive or peek a message from the queue.</span></span> <span data-ttu-id="2e7ae-1170">メッセージは、 <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType>プロパティを使用して逆シリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1170">The message is deserialized using the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="2e7ae-1171">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1171">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1172">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1172">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1173">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1173">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1174">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1174">Local computer</span></span>|<span data-ttu-id="2e7ae-1175">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1175">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1176">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1176">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1177">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1177">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1178">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1178">Remote computer</span></span>|<span data-ttu-id="2e7ae-1179">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1179">No</span></span>|  
|<span data-ttu-id="2e7ae-1180">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1180">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1181">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1181">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1182">次のコード例は、を使用して<xref:System.Messaging.BinaryMessageFormatter>メッセージ本文を書式設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1182">The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.</span></span>  
  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 <span data-ttu-id="2e7ae-1183">次のコード例は、を使用して<xref:System.Messaging.XmlMessageFormatter>メッセージ本文を書式設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1183">The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
      </Docs>
    </Member>
    <Member MemberName="GetAllMessages">
      <MemberSignature Language="C#" Value="public System.Messaging.Message[] GetAllMessages ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message[] GetAllMessages() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetAllMessages" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllMessages () As Message()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Messaging::Message ^&gt; ^ GetAllMessages();" />
      <MemberSignature Language="F#" Value="member this.GetAllMessages : unit -&gt; System.Messaging.Message[]" Usage="messageQueue.GetAllMessages " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-1184">キューにあるすべてのメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1184">Returns all the messages that are in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1185">キューにあるすべてのメッセージを表す <see cref="T:System.Messaging.Message" /> 型の配列。配列の順序は、メッセージがメッセージ キューのキューに存在する順序と同じです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1185">An array of type <see cref="T:System.Messaging.Message" /> that represents all the messages in the queue, in the same order as they appear in the Message Queuing queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1186"><xref:System.Messaging.MessageQueue.GetAllMessages%2A>キュー内のメッセージの静的スナップショットを返します。これらのメッセージへの動的リンクは返しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1186"><xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a static snapshot of the messages in the queue, not dynamic links to those messages.</span></span> <span data-ttu-id="2e7ae-1187">したがって、配列を使用してキュー内のメッセージを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1187">Therefore, you cannot use the array to modify the messages in the queue.</span></span> <span data-ttu-id="2e7ae-1188">キューとの動的な対話 (メッセージを削除する機能など) が必要な場合は、メソッドを呼び出します<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> 。このメソッドは、キュー内のメッセージの動的な一覧を返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1188">If you want real-time, dynamic interaction with the queue (such as the ability to delete messages), call the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> method, which returns a dynamic list of the messages in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1189">は<xref:System.Messaging.MessageQueue.GetAllMessages%2A> 、メソッドが呼び出されたときにキュー内のメッセージのコピーを返すため、配列にはキューに到着した新しいメッセージや、キューから削除されたメッセージは反映されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1189">Because <xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a copy of the messages in the queue at the time the method was called, the array does not reflect new messages that arrive in the queue or messages that are removed from the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1190"><xref:System.Messaging.MessageQueue.GetAllMessages%2A>プロパティによって除外された<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>プロパティだけを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1190"><xref:System.Messaging.MessageQueue.GetAllMessages%2A> retrieves only those properties not filtered out by the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property.</span></span>  
  
 <span data-ttu-id="2e7ae-1191">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1191">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1192">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1192">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1193">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1193">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1194">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1194">Local computer</span></span>|<span data-ttu-id="2e7ae-1195">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1195">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1196">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1196">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1197">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1197">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1198">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1198">Remote computer</span></span>|<span data-ttu-id="2e7ae-1199">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1199">No</span></span>|  
|<span data-ttu-id="2e7ae-1200">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1200">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1201">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1201">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1202">次のコード例は、<xref:System.Messaging.MessageQueue.GetAllMessages%2A> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1202">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.GetAllMessages%2A>.</span></span>  
  
 [!code-cpp[MessageQueue2#21](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#21)]
 [!code-csharp[MessageQueue2#21](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1203">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1203">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="messageQueue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method returns a MessageEnumerator that implements RemoveCurrent family of methods incorrectly. Please use GetMessageEnumerator2 instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-1204">キューに格納されているメッセージを列挙します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1204">Enumerates the messages in a queue.</span></span> <span data-ttu-id="2e7ae-1205"><see cref="M:System.Messaging.MessageQueue.GetEnumerator" /> は使用されなくなりました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1205"><see cref="M:System.Messaging.MessageQueue.GetEnumerator" /> is deprecated.</span></span> <span data-ttu-id="2e7ae-1206">代わりに <see cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" /> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1206"><see cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" /> should be used instead.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1207">キュー内のメッセージへの動的な接続を提供する <see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1207">A <see cref="T:System.Collections.IEnumerator" /> that provides a dynamic connection to the messages in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1208">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1208">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1209">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1209">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1210">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1210">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1211">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1211">Local computer</span></span>|<span data-ttu-id="2e7ae-1212">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1212">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1213">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1213">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1214">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1214">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1215">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1215">Remote computer</span></span>|<span data-ttu-id="2e7ae-1216">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1216">No</span></span>|  
|<span data-ttu-id="2e7ae-1217">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1217">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1218">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1218">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1219">次のコード例は、<xref:System.Messaging.MessageQueue.GetEnumerator%2A> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1219">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.GetEnumerator%2A>.</span></span>  
  
 [!code-cpp[MessageQueue2#22](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#22)]
 [!code-csharp[MessageQueue2#22](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#22)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
      </Docs>
    </Member>
    <Member MemberName="GetMachineId">
      <MemberSignature Language="C#" Value="public static Guid GetMachineId (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid GetMachineId(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetMachineId(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMachineId (machineName As String) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Guid GetMachineId(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetMachineId : string -&gt; Guid" Usage="System.Messaging.MessageQueue.GetMachineId machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName"><span data-ttu-id="2e7ae-1220">キューを含むコンピューターの名前。先頭に 2 つの円記号 (\\\\) を付けません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1220">The name of the computer that contains the queue, without the two preceding backslashes (\\\\).</span></span></param>
        <summary><span data-ttu-id="2e7ae-1221">この <see cref="T:System.Messaging.MessageQueue" /> が参照するキューが存在するコンピューターの ID を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1221">Gets the identifier of the computer on which the queue referenced by this <see cref="T:System.Messaging.MessageQueue" /> is located.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1222">キューが存在するコンピューターの一意の ID を表す <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1222">A <see cref="T:System.Guid" /> that represents a unique identifier for the computer on which the queue is located.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1223">コンピューターの識別子は、コンピューターのジャーナルを読み取り、セキュリティ証明書を設定するために、2つの目的で使用できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1223">You can use a computer's identifier for two purposes, among others: to read the computer journal and to set security certificates.</span></span> <span data-ttu-id="2e7ae-1224">ただし、オフラインで作業<xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29>している場合は、を呼び出すことはできません。これは、アプリケーションがドメインコントローラー上のディレクトリサービスにアクセスできる必要があるためです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1224">However, you cannot call <xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29> for a remote computer when you are working offline because the application must have access to the directory service on the domain controller.</span></span>  
  
 <span data-ttu-id="2e7ae-1225">コンピューター id (またはコンピューター id) は<xref:System.Guid> 、コンピューターが企業に追加されるときにメッセージキューによって作成されるです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1225">The computer identifier (or machine identifier) is a <xref:System.Guid> that Message Queuing creates when a computer is added to the enterprise.</span></span> <span data-ttu-id="2e7ae-1226">メッセージキューは、コンピューター `Machine`の識別子とキーワードを組み合わせて、と`Journal`いう構文`Machine=<computeridentifier>;Journal`を持つコンピュータージャーナルの形式名を作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1226">Message Queuing combines the computer identifier with the `Machine` and `Journal` keywords to create the machine journal's format name, which has the syntax `Machine=<computeridentifier>;Journal`.</span></span> <span data-ttu-id="2e7ae-1227">ジャーナルキューとも呼ばれるコンピュータージャーナルは、 <xref:System.Messaging.MessageQueue.UseJournalQueue%2A>プロパティが`true`の場合に、アプリケーションによって生成されるメッセージのコピーを格納するシステムキューです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1227">The machine journal, which is also known as the journal queue, is a system queue that stores copies of application-generated messages when the <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="2e7ae-1228">ジャーナルのこの構文は、キューの形式名を構築する場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1228">This syntax for the journal is only valid when constructing the format name for the queue.</span></span> <span data-ttu-id="2e7ae-1229">パス名の構文は`MachineName` \\ `Journal$`です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1229">The path name syntax is `MachineName`\\`Journal$`.</span></span>  
  
 <span data-ttu-id="2e7ae-1230">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1230">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1231">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1231">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1232">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1232">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1233">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1233">Local computer</span></span>|<span data-ttu-id="2e7ae-1234">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1234">No</span></span>|  
|<span data-ttu-id="2e7ae-1235">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1235">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1236">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1236">No</span></span>|  
|<span data-ttu-id="2e7ae-1237">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1237">Remote computer</span></span>|<span data-ttu-id="2e7ae-1238">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1238">No</span></span>|  
|<span data-ttu-id="2e7ae-1239">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1239">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1240">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1240">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1241"><xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29> を呼び出すコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1241">The following code example calls <xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29>.</span></span>  
  
 [!code-csharp[MessageQueue#14](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1242">コンピューターの ID を取得できません。オフラインで作業しているなど、ディレクトリ サービスが利用できないことが原因である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1242">The computer identifier could not be retrieved, possibly because the directory service is not available; for example, if you are working offline.</span></span>  
  
 <span data-ttu-id="2e7ae-1243">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1243">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-1244">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1244">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.MachineName" />
        <altmember cref="P:System.Messaging.MessageQueue.UseJournalQueue" />
      </Docs>
    </Member>
    <Member MemberName="GetMessageEnumerator">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageEnumerator GetMessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.MessageEnumerator GetMessageEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMessageEnumerator () As MessageEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::MessageEnumerator ^ GetMessageEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetMessageEnumerator : unit -&gt; System.Messaging.MessageEnumerator" Usage="messageQueue.GetMessageEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method returns a MessageEnumerator that implements RemoveCurrent family of methods incorrectly. Please use GetMessageEnumerator2 instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-1245">キューにあるすべてのメッセージに対して列挙子オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1245">Creates an enumerator object for all the messages in the queue.</span></span> <span data-ttu-id="2e7ae-1246"><see cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" /> は使用されなくなりました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1246"><see cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" /> is deprecated.</span></span> <span data-ttu-id="2e7ae-1247">代わりに <see cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" /> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1247"><see cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" /> should be used instead.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1248">キューに含まれるメッセージを保持する <see cref="T:System.Messaging.MessageEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1248">The <see cref="T:System.Messaging.MessageEnumerator" /> holding the messages that are contained in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1249"><xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A>キュー内のすべてのメッセージの動的な一覧を作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1249"><xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> creates a dynamic list of all the messages in a queue.</span></span> <span data-ttu-id="2e7ae-1250">を<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 返す <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> の<xref:System.Messaging.MessageEnumerator>を呼び出すことにより、列挙子の現在位置にあるメッセージをキューから削除できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1250">You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> returns.</span></span>  
  
 <span data-ttu-id="2e7ae-1251">カーソルはキュー内のメッセージの動的な一覧に関連付けられているので、メッセージが現在のカーソル位置を超えている場合は、キュー内のメッセージに加えた変更が列挙体に反映されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1251">Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position.</span></span> <span data-ttu-id="2e7ae-1252">たとえば、列挙子は、カーソルの現在位置を超えている優先順位の低いメッセージに自動的にアクセスできますが、その位置の前に挿入される優先順位の高いメッセージは自動的には表示されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1252">For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position.</span></span> <span data-ttu-id="2e7ae-1253">ただし、を呼び出す<xref:System.Messaging.MessageEnumerator.Reset%2A> <xref:System.Messaging.MessageEnumerator>ことによって、列挙体をリセットし、カーソルをリストの先頭に戻すことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1253">However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.</span></span>  
  
 <span data-ttu-id="2e7ae-1254">列挙内のメッセージの順序は、キュー内のメッセージの順序に反映されます。そのため、優先順位の低いメッセージは、優先順位の低い方の前に表示されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1254">The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.</span></span>  
  
 <span data-ttu-id="2e7ae-1255">キューに動的に接続するのではなく、キュー内のメッセージの静的スナップショットが必要な<xref:System.Messaging.MessageQueue.GetAllMessages%2A>場合は、を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1255">If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>.</span></span> <span data-ttu-id="2e7ae-1256">このメソッドは、メソッドが<xref:System.Messaging.Message>呼び出されたときのメッセージを表すオブジェクトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1256">This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.</span></span>  
  
 <span data-ttu-id="2e7ae-1257">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1257">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1258">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1258">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1259">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1259">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1260">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1260">Local computer</span></span>|<span data-ttu-id="2e7ae-1261">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1261">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1262">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1262">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1263">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1263">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1264">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1264">Remote computer</span></span>|<span data-ttu-id="2e7ae-1265">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1265">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1266">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1266">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1267">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1267">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1268">次のコード例では、キュー内のメッセージの動的な一覧を取得し、 <xref:System.Messaging.Message.Priority%2A>プロパティがに<xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>設定されたすべてのメッセージをカウントします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1268">The following code example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.GetAllMessages" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetMessageEnumerator2">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageEnumerator GetMessageEnumerator2 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.MessageEnumerator GetMessageEnumerator2() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMessageEnumerator2 () As MessageEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::MessageEnumerator ^ GetMessageEnumerator2();" />
      <MemberSignature Language="F#" Value="member this.GetMessageEnumerator2 : unit -&gt; System.Messaging.MessageEnumerator" Usage="messageQueue.GetMessageEnumerator2 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-1269">キューにあるすべてのメッセージに対して列挙子オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1269">Creates an enumerator object for all the messages in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1270">キューに含まれるメッセージを保持する <see cref="T:System.Messaging.MessageEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1270">The <see cref="T:System.Messaging.MessageEnumerator" /> holding the messages that are contained in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1271"><xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>キュー内のすべてのメッセージの動的な一覧を作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1271"><xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> creates a dynamic list of all the messages in a queue.</span></span> <span data-ttu-id="2e7ae-1272">を<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 返す <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> の<xref:System.Messaging.MessageEnumerator>を呼び出すことにより、列挙子の現在位置にあるメッセージをキューから削除できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1272">You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> returns.</span></span>  
  
 <span data-ttu-id="2e7ae-1273">カーソルはキュー内のメッセージの動的な一覧に関連付けられているので、メッセージが現在のカーソル位置を超えている場合は、キュー内のメッセージに加えた変更が列挙体に反映されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1273">Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position.</span></span> <span data-ttu-id="2e7ae-1274">たとえば、列挙子は、カーソルの現在位置を超えている優先順位の低いメッセージに自動的にアクセスできますが、その位置の前に挿入される優先順位の高いメッセージは自動的には表示されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1274">For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position.</span></span> <span data-ttu-id="2e7ae-1275">ただし、を呼び出す<xref:System.Messaging.MessageEnumerator.Reset%2A> <xref:System.Messaging.MessageEnumerator>ことによって、列挙体をリセットし、カーソルをリストの先頭に戻すことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1275">However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.</span></span>  
  
 <span data-ttu-id="2e7ae-1276">列挙内のメッセージの順序は、キュー内のメッセージの順序に反映されます。そのため、優先順位の低いメッセージは、優先順位の低い方の前に表示されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1276">The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.</span></span>  
  
 <span data-ttu-id="2e7ae-1277">キューに動的に接続するのではなく、キュー内のメッセージの静的スナップショットが必要な<xref:System.Messaging.MessageQueue.GetAllMessages%2A>場合は、を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1277">If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>.</span></span> <span data-ttu-id="2e7ae-1278">このメソッドは、メソッドが<xref:System.Messaging.Message>呼び出されたときのメッセージを表すオブジェクトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1278">This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.</span></span>  
  
 <span data-ttu-id="2e7ae-1279">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1279">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1280">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1280">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1281">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1281">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1282">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1282">Local computer</span></span>|<span data-ttu-id="2e7ae-1283">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1283">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1284">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1284">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1285">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1285">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1286">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1286">Remote computer</span></span>|<span data-ttu-id="2e7ae-1287">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1287">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1288">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1288">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1289">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1289">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.GetAllMessages" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMessageQueueEnumerator">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1290">列挙子オブジェクトを作成し、ネットワーク上のパブリック キューの動的リストを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1290">Creates an enumerator object for a dynamic listing of the public queues on the network.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMessageQueueEnumerator">
      <MemberSignature Language="C#" Value="public static System.Messaging.MessageQueueEnumerator GetMessageQueueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.MessageQueueEnumerator GetMessageQueueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMessageQueueEnumerator () As MessageQueueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Messaging::MessageQueueEnumerator ^ GetMessageQueueEnumerator();" />
      <MemberSignature Language="F#" Value="static member GetMessageQueueEnumerator : unit -&gt; System.Messaging.MessageQueueEnumerator" Usage="System.Messaging.MessageQueue.GetMessageQueueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-1291">ネットワーク上のすべてのパブリック キューを列挙するための順方向専用カーソル セマンティクスをサポートします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1291">Provides forward-only cursor semantics to enumerate through all public queues on the network.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1292">ネットワーク上のすべてのパブリックメッセージ キューの動的リストを作成する <see cref="T:System.Messaging.MessageQueueEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1292">A <see cref="T:System.Messaging.MessageQueueEnumerator" /> that provides a dynamic listing of all the public message queues on the network.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1293">の<xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>このオーバーロードは、ネットワーク上のすべてのパブリックキューの列挙体を返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1293">This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns an enumeration of all the public queues that are on the network.</span></span>  
  
 <span data-ttu-id="2e7ae-1294">カーソルは動的なリストに関連付けられているので、列挙は、カーソルの現在位置を超えて削除または追加されたキューのキューリストに加えた変更を反映します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1294">Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue list for queues deleted or added beyond the cursor's current position.</span></span> <span data-ttu-id="2e7ae-1295">カーソルの現在位置より前にあるキューの追加または削除は反映されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1295">Additions or deletion of queues located before the cursor's current position are not reflected.</span></span> <span data-ttu-id="2e7ae-1296">たとえば、列挙子はカーソル位置を超えて追加されたキューに自動的にアクセスできますが、その位置の前には挿入されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1296">For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position.</span></span> <span data-ttu-id="2e7ae-1297">ただし、を呼び出す<xref:System.Messaging.MessageQueueEnumerator.Reset%2A> <xref:System.Messaging.MessageQueueEnumerator>ことによって、列挙体をリセットし、カーソルをリストの先頭に戻すことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1297">However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.</span></span>  
  
 <span data-ttu-id="2e7ae-1298">ネットワークにキューの順序が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1298">There is no defined ordering of queues in a network.</span></span> <span data-ttu-id="2e7ae-1299">列挙子は、コンピューター、ラベル、パブリックまたはプライベートの状態、その他のアクセス可能な条件などによって並べ替えられません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1299">An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.</span></span>  
  
 <span data-ttu-id="2e7ae-1300">動的に接続するのではなく、ネットワーク上のキューの静的スナップショットが必要な場合は<xref:System.Messaging.MessageQueue.GetPublicQueues%2A> 、 <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>またはを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1300">If you want a static snapshot of the queues on the network rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-1301">これらの2つのメソッドは、メソッド<xref:System.Messaging.MessageQueue>が呼び出されたときのキューを表すオブジェクトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1301">Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called.</span></span>  
  
 <span data-ttu-id="2e7ae-1302">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1302">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1303">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1303">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1304">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1304">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1305">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1305">Local computer</span></span>|<span data-ttu-id="2e7ae-1306">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1306">No</span></span>|  
|<span data-ttu-id="2e7ae-1307">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1307">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1308">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1308">No</span></span>|  
|<span data-ttu-id="2e7ae-1309">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1309">Remote computer</span></span>|<span data-ttu-id="2e7ae-1310">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1310">No</span></span>|  
|<span data-ttu-id="2e7ae-1311">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1311">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1312">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1312">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1313">次のコード例では、ネットワーク内のすべてのメッセージキューを反復処理し、各キューのパスを調べます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1313">The following code example iterates through all the message queues in the network, and examines the path for each queue.</span></span> <span data-ttu-id="2e7ae-1314">最後に、ネットワーク上のパブリックキューの数が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1314">Finally, it displays the number of public queues on the network.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CPP/mqgetmessagequeueenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CS/mqgetmessagequeueenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/VB/mqgetmessagequeueenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
      </Docs>
    </Member>
    <Member MemberName="GetMessageQueueEnumerator">
      <MemberSignature Language="C#" Value="public static System.Messaging.MessageQueueEnumerator GetMessageQueueEnumerator (System.Messaging.MessageQueueCriteria criteria);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.MessageQueueEnumerator GetMessageQueueEnumerator(class System.Messaging.MessageQueueCriteria criteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMessageQueueEnumerator (criteria As MessageQueueCriteria) As MessageQueueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Messaging::MessageQueueEnumerator ^ GetMessageQueueEnumerator(System::Messaging::MessageQueueCriteria ^ criteria);" />
      <MemberSignature Language="F#" Value="static member GetMessageQueueEnumerator : System.Messaging.MessageQueueCriteria -&gt; System.Messaging.MessageQueueEnumerator" Usage="System.Messaging.MessageQueue.GetMessageQueueEnumerator criteria" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="criteria" Type="System.Messaging.MessageQueueCriteria" />
      </Parameters>
      <Docs>
        <param name="criteria"><span data-ttu-id="2e7ae-1315">利用できるメッセージ キューのフィルター処理に使用する基準が格納されている <see cref="T:System.Messaging.MessageQueueCriteria" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1315">A <see cref="T:System.Messaging.MessageQueueCriteria" /> that contains the criteria used to filter the available message queues.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1316">指定した基準を満たすネットワーク上のすべてのパブリック キューを列挙するための順方向専用カーソル セマンティクスをサポートします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1316">Provides forward-only cursor semantics to enumerate through all public queues on the network that meet the specified criteria.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1317"><paramref name="criteria" /> パラメーターで指定された制約を満たすネットワーク上のパブリックメッセージ キューの動的リストを作成する <see cref="T:System.Messaging.MessageQueueEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1317">A <see cref="T:System.Messaging.MessageQueueEnumerator" /> that provides a dynamic listing of the public message queues on the network that satisfy the restrictions specified by the <paramref name="criteria" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1318">の<xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>このオーバーロードは、アプリケーション条件で定義された条件を満たすネットワーク上のすべてのパブリックキューの一覧を返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1318">This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns a listing of all the public queues on the network that satisfy criteria defined in the application criteria.</span></span> <span data-ttu-id="2e7ae-1319">キューの作成や変更時間、コンピューター名、ラベル、カテゴリ、またはこれらの組み合わせなど、含める条件を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1319">You can specify the criteria to include, for example, queue creation or modification time, computer name, label, category, or any combination of these.</span></span>  
  
 <span data-ttu-id="2e7ae-1320">カーソルは動的な一覧に関連付けられているので、列挙体には、カーソルの現在位置を超えて発生するキューに対して行った変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1320">Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue that occurs beyond the cursor's current position.</span></span> <span data-ttu-id="2e7ae-1321">カーソルの現在位置より前にあるキューへの変更は反映されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1321">Changes to queues located before the cursor's current position are not reflected.</span></span> <span data-ttu-id="2e7ae-1322">たとえば、列挙子はカーソル位置を超えて追加されたキューに自動的にアクセスできますが、その位置の前には挿入されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1322">For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position.</span></span> <span data-ttu-id="2e7ae-1323">ただし、を呼び出す<xref:System.Messaging.MessageQueueEnumerator.Reset%2A> <xref:System.Messaging.MessageQueueEnumerator>ことによって、列挙体をリセットし、カーソルをリストの先頭に戻すことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1323">However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.</span></span>  
  
 <span data-ttu-id="2e7ae-1324">ネットワークにキューの順序が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1324">There is no defined ordering of queues in a network.</span></span> <span data-ttu-id="2e7ae-1325">列挙子は、コンピューター、ラベル、パブリックまたはプライベートの状態、その他のアクセス可能な条件などによって並べ替えられません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1325">An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.</span></span>  
  
 <span data-ttu-id="2e7ae-1326">動的に接続するのではなく、ネットワーク上のキューの静的スナップショットが必要な場合は、の<xref:System.Messaging.MessageQueue.GetPublicQueues%2A>条件を<xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>指定するか、を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1326">If you want a static snapshot of the queues on the network rather than a dynamic connection to them, specify criteria for <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or call <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-1327">これらの2つのメソッドは、メソッド<xref:System.Messaging.MessageQueue>が呼び出されたときのキューを表すオブジェクトの配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1327">Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called.</span></span> <span data-ttu-id="2e7ae-1328"><xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29> <xref:System.Messaging.MessageQueue.MachineName%2A> <xref:System.Messaging.MessageQueue.Category%2A> <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> 、、また<xref:System.Messaging.MessageQueue.Label%2A>は<xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>を呼び出すと、それぞれ、、およびのフィルター条件を使用してを呼び出す場合と同じ結果が得られます。 <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1328">Calling <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provides the same results as calling <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> with the filtering criteria of <xref:System.Messaging.MessageQueue.Category%2A>, <xref:System.Messaging.MessageQueue.Label%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>, respectively.</span></span>  
  
 <span data-ttu-id="2e7ae-1329">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1329">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1330">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1330">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1331">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1331">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1332">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1332">Local computer</span></span>|<span data-ttu-id="2e7ae-1333">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1333">No</span></span>|  
|<span data-ttu-id="2e7ae-1334">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1334">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1335">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1335">No</span></span>|  
|<span data-ttu-id="2e7ae-1336">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1336">Remote computer</span></span>|<span data-ttu-id="2e7ae-1337">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1337">No</span></span>|  
|<span data-ttu-id="2e7ae-1338">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1338">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1339">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1339">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1340">次のコード例では、メッセージキューを反復処理し、最後の1日に作成され、コンピューター "MyComputer" に存在する各キューのパスを表示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1340">The following code example iterates through message queues and displays the path of each queue that was created in the last day and that exists on the computer "MyComputer".</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageQueueEnumerator_criteria#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_criteria/CPP/mqgetmessagequeueenumerator_criteria.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageQueueEnumerator_criteria#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_criteria/CS/mqgetmessagequeueenumerator_criteria.cs#1)]
 [!code-vb[MessageQueue.GetMessageQueueEnumerator_criteria#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_criteria/VB/mqgetmessagequeueenumerator_criteria.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
      </Docs>
    </Member>
    <Member MemberName="GetPrivateQueuesByMachine">
      <MemberSignature Language="C#" Value="public static System.Messaging.MessageQueue[] GetPrivateQueuesByMachine (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.MessageQueue[] GetPrivateQueuesByMachine(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetPrivateQueuesByMachine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPrivateQueuesByMachine (machineName As String) As MessageQueue()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Messaging::MessageQueue ^&gt; ^ GetPrivateQueuesByMachine(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetPrivateQueuesByMachine : string -&gt; System.Messaging.MessageQueue[]" Usage="System.Messaging.MessageQueue.GetPrivateQueuesByMachine machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName"><span data-ttu-id="2e7ae-1341">プライベート キューを取得するコンピューター。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1341">The computer from which to retrieve the private queues.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1342">指定したコンピューターにあるすべてのプライベート キューを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1342">Retrieves all the private queues on the specified computer.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1343">取得されたプライベート キューを参照する <see cref="T:System.Messaging.MessageQueue" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1343">An array of <see cref="T:System.Messaging.MessageQueue" /> objects that reference the retrieved private queues.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1344"><xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>指定されたコンピューター上のキューの静的スナップショットを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1344"><xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues on a specified computer.</span></span>  
  
 <span data-ttu-id="2e7ae-1345">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1345">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1346">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1346">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1347">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1347">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1348">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1348">Local computer</span></span>|<span data-ttu-id="2e7ae-1349">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1349">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1350">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1350">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1351">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1351">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1352">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1352">Remote computer</span></span>|<span data-ttu-id="2e7ae-1353">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1353">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1354">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1354">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1355">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1355">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1356">次のコード例では、キューのリストを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1356">The following code example retrieves lists of queues.</span></span>  
  
 [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]
 [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]
 [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1357"><paramref name="machineName" /> パラメーターが <see langword="null" /> または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1357">The <paramref name="machineName" /> parameter is <see langword="null" /> or an empty string ("").</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1358">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1358">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.MachineName" />
        <altmember cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPublicQueues">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1359">ネットワーク上のすべてのパブリック キューを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1359">Retrieves all the public queues on the network.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPublicQueues">
      <MemberSignature Language="C#" Value="public static System.Messaging.MessageQueue[] GetPublicQueues ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.MessageQueue[] GetPublicQueues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetPublicQueues" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPublicQueues () As MessageQueue()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Messaging::MessageQueue ^&gt; ^ GetPublicQueues();" />
      <MemberSignature Language="F#" Value="static member GetPublicQueues : unit -&gt; System.Messaging.MessageQueue[]" Usage="System.Messaging.MessageQueue.GetPublicQueues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-1360">ネットワーク上のすべてのパブリック キューを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1360">Retrieves all the public queues on the network.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1361">取得したパブリック キューを参照する <see cref="T:System.Messaging.MessageQueue" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1361">An array of <see cref="T:System.Messaging.MessageQueue" /> objects that reference the retrieved public queues.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1362">ネットワーク上のすべてのパブリックキューの完全な一覧が必要な場合は、このオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1362">Use this overload if you want a complete list of all the public queues on the network.</span></span> <span data-ttu-id="2e7ae-1363"><xref:System.Messaging.MessageQueue.MachineName%2A> 、 <xref:System.Messaging.MessageQueue.Category%2A> 、または最終変更時刻など、特定の条件によってリストを制限する場合は、このメソッドの別のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1363">If you want to restrict the list by certain criteria, such as <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, or last modified time use another overload of this method.</span></span> <span data-ttu-id="2e7ae-1364">(または、、、 <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>また<xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>は<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>を使用できます)。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1364">(Alternatively, you can use <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>.)</span></span>  
  
 <span data-ttu-id="2e7ae-1365"><xref:System.Messaging.MessageQueue.GetPublicQueues%2A>キューの静的スナップショットを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1365"><xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues.</span></span> <span data-ttu-id="2e7ae-1366">キューの動的リストを操作するには、を<xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1366">To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-1367">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1367">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1368">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1368">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1369">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1369">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1370">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1370">Local computer</span></span>|<span data-ttu-id="2e7ae-1371">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1371">No</span></span>|  
|<span data-ttu-id="2e7ae-1372">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1372">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1373">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1373">No</span></span>|  
|<span data-ttu-id="2e7ae-1374">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1374">Remote computer</span></span>|<span data-ttu-id="2e7ae-1375">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1375">No</span></span>|  
|<span data-ttu-id="2e7ae-1376">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1376">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1377">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1377">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1378">次のコード例では、キューのリストを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1378">The following code example retrieves lists of queues.</span></span>  
  
 [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]
 [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]
 [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1379">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1379">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetPublicQueues">
      <MemberSignature Language="C#" Value="public static System.Messaging.MessageQueue[] GetPublicQueues (System.Messaging.MessageQueueCriteria criteria);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.MessageQueue[] GetPublicQueues(class System.Messaging.MessageQueueCriteria criteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetPublicQueues(System.Messaging.MessageQueueCriteria)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPublicQueues (criteria As MessageQueueCriteria) As MessageQueue()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Messaging::MessageQueue ^&gt; ^ GetPublicQueues(System::Messaging::MessageQueueCriteria ^ criteria);" />
      <MemberSignature Language="F#" Value="static member GetPublicQueues : System.Messaging.MessageQueueCriteria -&gt; System.Messaging.MessageQueue[]" Usage="System.Messaging.MessageQueue.GetPublicQueues criteria" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="criteria" Type="System.Messaging.MessageQueueCriteria" />
      </Parameters>
      <Docs>
        <param name="criteria"><span data-ttu-id="2e7ae-1380">キューのフィルター処理に使用する基準が格納されている <see cref="T:System.Messaging.MessageQueueCriteria" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1380">A <see cref="T:System.Messaging.MessageQueueCriteria" /> that contains the criteria used to filter the queues.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1381">指定した基準を満たすネットワーク上のすべてのパブリック キューを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1381">Retrieves all the public queues on the network that meet the specified criteria.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1382">取得したパブリック キューを参照する <see cref="T:System.Messaging.MessageQueue" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1382">An array of <see cref="T:System.Messaging.MessageQueue" /> objects that reference the retrieved public queues.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1383">ネットワーク上のすべてのパブリックキューをラベル、カテゴリ、またはコンピューター名でフィルター処理する場合、 <xref:System.Messaging.MessageQueue>クラスには、その機能を提供する<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>特定<xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>のメソッド<xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>(、、および) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1383">If you want to filter all the public queues on the network by label, category, or computer name, the <xref:System.Messaging.MessageQueue> class contains specific methods that provide that functionality (<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, respectively).</span></span> <span data-ttu-id="2e7ae-1384">このオーバーロードを使用して、これらの条件のうちの1つ以上を満たすネットワーク上のすべてのパブリックキューの一覧を取得します (ラベルとカテゴリの両方を指定する場合など)。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1384">Use this overload to get a list of all the public queues on the network that meet more than one of these criteria (for example, if you want to specify both a label and a category).</span></span> <span data-ttu-id="2e7ae-1385">、 <xref:System.Messaging.MessageQueue.Label%2A> 、 <xref:System.Messaging.MessageQueue.Category%2A> および以外のメッセージ条件によってフィルター処理すること <xref:System.Messaging.MessageQueue.MachineName%2A> もできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1385">You can also filter by message criteria other than <xref:System.Messaging.MessageQueue.Label%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>.</span></span> <span data-ttu-id="2e7ae-1386">たとえば、このオーバーロードを使用して、キューの最終更新時刻でフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1386">For example, you use this overload to filter by a queue's last-modified time.</span></span> <span data-ttu-id="2e7ae-1387"><xref:System.Messaging.MessageQueueCriteria>クラスの新しいインスタンスを作成し、インスタンスの適切なプロパティを設定して、インスタンスを`criteria`パラメーターとして渡すだけです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1387">Simply create a new instance of the <xref:System.Messaging.MessageQueueCriteria> class, set the appropriate properties in the instance, and pass the instance as the `criteria` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-1388"><xref:System.Messaging.MessageQueue.GetPublicQueues%2A>キューの静的スナップショットを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1388"><xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues.</span></span> <span data-ttu-id="2e7ae-1389">キューの動的リストを操作するには、を<xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1389">To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-1390">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1390">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1391">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1391">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1392">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1392">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1393">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1393">Local computer</span></span>|<span data-ttu-id="2e7ae-1394">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1394">No</span></span>|  
|<span data-ttu-id="2e7ae-1395">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1395">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1396">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1396">No</span></span>|  
|<span data-ttu-id="2e7ae-1397">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1397">Remote computer</span></span>|<span data-ttu-id="2e7ae-1398">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1398">No</span></span>|  
|<span data-ttu-id="2e7ae-1399">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1399">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1400">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1400">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1401">次のコード例では、キューのリストを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1401">The following code example retrieves lists of queues.</span></span>  
  
 [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]
 [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]
 [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1402">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1402">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueCriteria" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetPublicQueuesByCategory">
      <MemberSignature Language="C#" Value="public static System.Messaging.MessageQueue[] GetPublicQueuesByCategory (Guid category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.MessageQueue[] GetPublicQueuesByCategory(valuetype System.Guid category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetPublicQueuesByCategory(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPublicQueuesByCategory (category As Guid) As MessageQueue()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Messaging::MessageQueue ^&gt; ^ GetPublicQueuesByCategory(Guid category);" />
      <MemberSignature Language="F#" Value="static member GetPublicQueuesByCategory : Guid -&gt; System.Messaging.MessageQueue[]" Usage="System.Messaging.MessageQueue.GetPublicQueuesByCategory category" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="category"><span data-ttu-id="2e7ae-1403">取得するキューのセットをグループ化する <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1403">A <see cref="T:System.Guid" /> that groups the set of queues to be retrieved.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1404">指定したカテゴリに属するネットワーク上のすべてのパブリック キューを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1404">Retrieves all the public queues on the network that belong to the specified category.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1405">取得したパブリック キューを参照する <see cref="T:System.Messaging.MessageQueue" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1405">An array of <see cref="T:System.Messaging.MessageQueue" /> objects that reference the retrieved public queues.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1406">このメソッドを使用して、パブリックキューをカテゴリ別にフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1406">Use this method to filter the public queues by category.</span></span> <span data-ttu-id="2e7ae-1407">プロパティ<xref:System.Messaging.MessageQueue.Category%2A>は、特定のキューの "メッセージキューの種類 ID" プロパティ (読み取り/書き込み) へのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1407">The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing type ID property (which is read/write) of a particular queue.</span></span> <span data-ttu-id="2e7ae-1408">を使用<xref:System.Guid.NewGuid%2A>して、すべて<xref:System.Guid>の値で一意のカテゴリ値を作成することもできますが、必須ではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1408">Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, it is not necessary.</span></span> <span data-ttu-id="2e7ae-1409">カテゴリ値は、他のすべて<xref:System.Guid>の値からではなく、他のカテゴリからのみ一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1409">The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values.</span></span> <span data-ttu-id="2e7ae-1410">{00000000-0000-0000-0000-000000000001}たとえば、 <xref:System.Messaging.MessageQueue.Category%2A> 1 つ <xref:System.Messaging.MessageQueue.Category%2A> のキューセットのをとして、別のセットのとしてを割り当てることができます。 {00000000-0000-0000-0000-000000000002}</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1410">For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set.</span></span>  
  
 <span data-ttu-id="2e7ae-1411"><xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>キューの静的スナップショットを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1411"><xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29> retrieves a static snapshot of the queues.</span></span> <span data-ttu-id="2e7ae-1412">キューの動的リストを操作するには、を<xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1412">To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.</span></span> <span data-ttu-id="2e7ae-1413">メソッドに渡すの一部<xref:System.Messaging.MessageQueueCriteria>として、カテゴリを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1413">You can specify the category as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.</span></span>  
  
 <span data-ttu-id="2e7ae-1414">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1414">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1415">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1415">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1416">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1416">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1417">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1417">Local computer</span></span>|<span data-ttu-id="2e7ae-1418">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1418">No</span></span>|  
|<span data-ttu-id="2e7ae-1419">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1419">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1420">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1420">No</span></span>|  
|<span data-ttu-id="2e7ae-1421">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1421">Remote computer</span></span>|<span data-ttu-id="2e7ae-1422">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1422">No</span></span>|  
|<span data-ttu-id="2e7ae-1423">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1423">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1424">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1424">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1425">次のコード例では、キューのリストを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1425">The following code example retrieves lists of queues.</span></span>  
  
 [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]
 [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]
 [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1426">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1426">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Category" />
        <altmember cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetPublicQueuesByLabel">
      <MemberSignature Language="C#" Value="public static System.Messaging.MessageQueue[] GetPublicQueuesByLabel (string label);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.MessageQueue[] GetPublicQueuesByLabel(string label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetPublicQueuesByLabel(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPublicQueuesByLabel (label As String) As MessageQueue()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Messaging::MessageQueue ^&gt; ^ GetPublicQueuesByLabel(System::String ^ label);" />
      <MemberSignature Language="F#" Value="static member GetPublicQueuesByLabel : string -&gt; System.Messaging.MessageQueue[]" Usage="System.Messaging.MessageQueue.GetPublicQueuesByLabel label" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="label"><span data-ttu-id="2e7ae-1427">取得するキューのセットをグループ化するラベル。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1427">A label that groups the set of queues to be retrieved.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1428">指定したラベルが設定されているネットワーク上のすべてのパブリック キューを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1428">Retrieves all the public queues on the network that carry the specified label.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1429">取得したパブリック キューを参照する <see cref="T:System.Messaging.MessageQueue" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1429">An array of <see cref="T:System.Messaging.MessageQueue" /> objects that reference the retrieved public queues.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1430">このメソッドを使用して、パブリックキューをラベルでフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1430">Use this method to filter the public queues by label.</span></span>  
  
 <span data-ttu-id="2e7ae-1431"><xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>キューの静的スナップショットを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1431"><xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29> retrieves a static snapshot of the queues.</span></span> <span data-ttu-id="2e7ae-1432">キューの動的リストを操作するには、を<xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1432">To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.</span></span> <span data-ttu-id="2e7ae-1433">メソッドに渡すの一部<xref:System.Messaging.MessageQueueCriteria>として、ラベルを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1433">You can specify the label as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.</span></span>  
  
 <span data-ttu-id="2e7ae-1434">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1434">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1435">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1435">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1436">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1436">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1437">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1437">Local computer</span></span>|<span data-ttu-id="2e7ae-1438">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1438">No</span></span>|  
|<span data-ttu-id="2e7ae-1439">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1439">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1440">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1440">No</span></span>|  
|<span data-ttu-id="2e7ae-1441">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1441">Remote computer</span></span>|<span data-ttu-id="2e7ae-1442">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1442">No</span></span>|  
|<span data-ttu-id="2e7ae-1443">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1443">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1444">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1444">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1445">次のコード例では、キューのリストを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1445">The following code example retrieves lists of queues.</span></span>  
  
 [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]
 [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]
 [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1446">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1446">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-1447"><paramref name="label" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1447">The <paramref name="label" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
        <altmember cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetPublicQueuesByMachine">
      <MemberSignature Language="C#" Value="public static System.Messaging.MessageQueue[] GetPublicQueuesByMachine (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.MessageQueue[] GetPublicQueuesByMachine(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetPublicQueuesByMachine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPublicQueuesByMachine (machineName As String) As MessageQueue()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Messaging::MessageQueue ^&gt; ^ GetPublicQueuesByMachine(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetPublicQueuesByMachine : string -&gt; System.Messaging.MessageQueue[]" Usage="System.Messaging.MessageQueue.GetPublicQueuesByMachine machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName"><span data-ttu-id="2e7ae-1448">取得するパブリック キューのセットが含まれているコンピューターの名前。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1448">The name of the computer that contains the set of public queues to be retrieved.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1449">指定したコンピューターにあるすべてのパブリック キューを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1449">Retrieves all the public queues that reside on the specified computer.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1450">コンピューターのパブリック キューを参照する <see cref="T:System.Messaging.MessageQueue" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1450">An array of <see cref="T:System.Messaging.MessageQueue" /> objects that reference the public queues on the computer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1451">このメソッドを使用して、コンピューター別にパブリックキューをフィルター処理します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1451">Use this method to filter the public queues by computer.</span></span>  
  
 <span data-ttu-id="2e7ae-1452"><xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>キューの静的スナップショットを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1452"><xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues.</span></span> <span data-ttu-id="2e7ae-1453">キューの動的リストを操作するには、を<xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1453">To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.</span></span> <span data-ttu-id="2e7ae-1454">メソッドに渡すの一部<xref:System.Messaging.MessageQueueCriteria>として、コンピューター名を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1454">You can specify the computer name as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.</span></span>  
  
 <span data-ttu-id="2e7ae-1455">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1455">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1456">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1456">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1457">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1457">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1458">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1458">Local computer</span></span>|<span data-ttu-id="2e7ae-1459">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1459">No</span></span>|  
|<span data-ttu-id="2e7ae-1460">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1460">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1461">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1461">No</span></span>|  
|<span data-ttu-id="2e7ae-1462">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1462">Remote computer</span></span>|<span data-ttu-id="2e7ae-1463">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1463">No</span></span>|  
|<span data-ttu-id="2e7ae-1464">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1464">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1465">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1465">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1466">次のコード例では、キューのリストを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1466">The following code example retrieves lists of queues.</span></span>  
  
 [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]
 [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]
 [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1467"><paramref name="machineName" /> パラメーターの構文が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1467">The <paramref name="machineName" /> parameter has incorrect syntax.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1468">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1468">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.MachineName" />
        <altmember cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetSecurityContext">
      <MemberSignature Language="C#" Value="public static System.Messaging.SecurityContext GetSecurityContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Messaging.SecurityContext GetSecurityContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.GetSecurityContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSecurityContext () As SecurityContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Messaging::SecurityContext ^ GetSecurityContext();" />
      <MemberSignature Language="F#" Value="static member GetSecurityContext : unit -&gt; System.Messaging.SecurityContext" Usage="System.Messaging.MessageQueue.GetSecurityContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.SecurityContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-1469">この呼び出しの時点で現在のユーザーが MSMQ によって関連付けられているセキュリティ コンテキスト (スレッド ID) を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1469">Retrieves the security context that MSMQ associates with the current user (thread identity) at the time of this call.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1470">セキュリティ コンテキストを格納している <see cref="T:System.Messaging.SecurityContext" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1470">A <see cref="T:System.Messaging.SecurityContext" /> object that contains the security context.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Messaging.Message.SecurityContext" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public Guid Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Id" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Id { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : Guid" Usage="System.Messaging.MessageQueue.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_GuidId")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1471">キューの一意なメッセージ キュー ID を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1471">Gets the unique Message Queuing identifier of the queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1472">メッセージ キュー アプリケーションが生成したメッセージ ID を表す <see cref="P:System.Messaging.MessageQueue.Id" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1472">A <see cref="P:System.Messaging.MessageQueue.Id" /> that represents the message identifier generated by the Message Queuing application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1473">メッセージキューは、 <xref:System.Messaging.MessageQueue.Id%2A>キューの作成時にプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1473">Message Queuing sets the <xref:System.Messaging.MessageQueue.Id%2A> property when it creates the queue.</span></span> <span data-ttu-id="2e7ae-1474">このプロパティは、パブリックキューでのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1474">This property is only available for public queues.</span></span>  
  
 <span data-ttu-id="2e7ae-1475">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1475">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1476">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1476">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1477">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1477">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1478">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1478">Local computer</span></span>|<span data-ttu-id="2e7ae-1479">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1479">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1480">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1480">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1481">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1481">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1482">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1482">Remote computer</span></span>|<span data-ttu-id="2e7ae-1483">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1483">No</span></span>|  
|<span data-ttu-id="2e7ae-1484">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1484">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1485">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1485">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1486">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.Id%2A>プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1486">The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.Id%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#15](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1487">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1487">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Category" />
      </Docs>
    </Member>
    <Member MemberName="InfiniteQueueSize">
      <MemberSignature Language="C#" Value="public static readonly long InfiniteQueueSize;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 InfiniteQueueSize" />
      <MemberSignature Language="DocId" Value="F:System.Messaging.MessageQueue.InfiniteQueueSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteQueueSize As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long InfiniteQueueSize;" />
      <MemberSignature Language="F#" Value=" staticval mutable InfiniteQueueSize : int64" Usage="System.Messaging.MessageQueue.InfiniteQueueSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1488">キューにサイズ制限が存在しないことを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1488">Specifies that no size restriction exists for a queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1489">このメンバーは、または<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>を設定するときによく使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1489">This member is frequently used when setting <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> or <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1490">次のコード例は、 <xref:System.Messaging.MessageQueue.InfiniteQueueSize>メンバーの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1490">The following code example demonstrates the use of the <xref:System.Messaging.MessageQueue.InfiniteQueueSize> member.</span></span>  
  
 [!code-csharp[MessageQueue#16](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueue.MaximumJournalSize" />
        <altmember cref="P:System.Messaging.MessageQueue.MaximumQueueSize" />
      </Docs>
    </Member>
    <Member MemberName="InfiniteTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Messaging.MessageQueue.InfiniteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteTimeout;" />
      <MemberSignature Language="F#" Value=" staticval mutable InfiniteTimeout : TimeSpan" Usage="System.Messaging.MessageQueue.InfiniteTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1491">メッセージをピークまたは受信するメソッドにタイムアウトが存在しないことを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1491">Specifies that no time-out exists for methods that peek or receive messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1492"><xref:System.Messaging.MessageQueue>では、同期と非同期の2種類のメッセージ取得がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1492"><xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous.</span></span> <span data-ttu-id="2e7ae-1493">同期メソッド、 <xref:System.Messaging.MessageQueue.Peek%2A>および<xref:System.Messaging.MessageQueue.Receive%2A>は、新しいメッセージがキューに到達するまで、プロセススレッドが指定された時間間隔待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1493">The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-1494">指定した時間間隔が<xref:System.Messaging.MessageQueue.InfiniteTimeout>の場合、新しいメッセージが使用可能になるまで、プロセススレッドはブロックされたままになります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1494">If the specified time interval is <xref:System.Messaging.MessageQueue.InfiniteTimeout>, the process thread remains blocked until a new message is available.</span></span> <span data-ttu-id="2e7ae-1495">一方、 <xref:System.Messaging.MessageQueue.BeginReceive%2A>と (非同期メソッド) では、メッセージがキューに到着するまで、メインアプリケーションタスクが別のスレッドで続行されるようにします。 <xref:System.Messaging.MessageQueue.BeginPeek%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1495">On the other hand, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A> (the asynchronous methods), allow the main application tasks to continue in a separate thread until a message arrives in the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1496">次のコード例は、 <xref:System.Messaging.MessageQueue.InfiniteTimeout>メンバーの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1496">The following code example demonstrates the use of the <xref:System.Messaging.MessageQueue.InfiniteTimeout> member.</span></span>  
  
 [!code-csharp[MessageQueue#17](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="System.Messaging.MessageQueue.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_Label")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1497">キューの説明を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1497">Gets or sets the queue description.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1498">メッセージ キューのラベル。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1498">The label for the message queue.</span></span> <span data-ttu-id="2e7ae-1499">既定値は、空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1499">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1500">メッセージキューラベルの最大長は124文字です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1500">The maximum length of a message queue label is 124 characters.</span></span>  
  
 <span data-ttu-id="2e7ae-1501">プロパティ<xref:System.Messaging.MessageQueue.Label%2A>は、すべてのキューで一意である必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1501">The <xref:System.Messaging.MessageQueue.Label%2A> property does not need to be unique across all queues.</span></span> <span data-ttu-id="2e7ae-1502">ただし、複数のキューが同じ<xref:System.Messaging.MessageQueue.Label%2A>を共有している場合は、メソッドを使用して<xref:System.Messaging.MessageQueue.Send%28System.Object%29> 、そのすべてにメッセージをブロードキャストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1502">However, if multiple queues share the same <xref:System.Messaging.MessageQueue.Label%2A>, you cannot use the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method to broadcast a message to all of them.</span></span> <span data-ttu-id="2e7ae-1503">メッセージを送信するときに<xref:System.Messaging.MessageQueue.Path%2A>プロパティのラベル構文を使用すると、 <xref:System.Messaging.MessageQueue.Label%2A>が一意でない場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1503">If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique.</span></span>  
  
 <span data-ttu-id="2e7ae-1504">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1504">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1505">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1505">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1506">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1506">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1507">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1507">Local computer</span></span>|<span data-ttu-id="2e7ae-1508">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1508">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1509">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1509">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1510">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1510">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1511">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1511">Remote computer</span></span>|<span data-ttu-id="2e7ae-1512">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1512">No</span></span>|  
|<span data-ttu-id="2e7ae-1513">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1513">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1514">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1514">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1515">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.Label%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1515">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.Label%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#18](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1516">ラベルが無効な値が設定されています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1516">The label was set to an invalid value.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1517">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1517">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
        <altmember cref="P:System.Messaging.MessageQueue.FormatName" />
        <altmember cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="LastModifyTime">
      <MemberSignature Language="C#" Value="public DateTime LastModifyTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LastModifyTime" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.LastModifyTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastModifyTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LastModifyTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LastModifyTime : DateTime" Usage="System.Messaging.MessageQueue.LastModifyTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_LastModifyTime")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1518">キューのプロパティが最後に変更された時刻を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1518">Gets the last time the properties of a queue were modified.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1519">キューのプロパティが最後に変更された時刻を示す <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1519">A <see cref="T:System.DateTime" /> that indicates when the queue properties were last modified.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1520">最後の変更時刻には、キューが作成<xref:System.Messaging.MessageQueue>された日時、メッセージキューのキューを変更するプロパティ (など<xref:System.Messaging.MessageQueue.BasePriority%2A>) が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1520">The last modification time includes when the queue was created and any <xref:System.Messaging.MessageQueue> property that modifies the Message Queuing queue, such as <xref:System.Messaging.MessageQueue.BasePriority%2A>.</span></span> <span data-ttu-id="2e7ae-1521"><xref:System.Messaging.MessageQueue.LastModifyTime%2A>プロパティの値は、ローカルコンピューターのシステム時刻を表します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1521">The value of the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property represents the system time of the local computer.</span></span>  
  
 <span data-ttu-id="2e7ae-1522">プロパティを<xref:System.Messaging.MessageQueue.Refresh%2A> <xref:System.Messaging.MessageQueue.LastModifyTime%2A>取得する前にを呼び出す必要があります。それ以外<xref:System.Messaging.MessageQueue>の場合は、このに関連付けられている変更時刻が最新ではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1522">You must call <xref:System.Messaging.MessageQueue.Refresh%2A> before getting the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property; otherwise, the modification time associated with this <xref:System.Messaging.MessageQueue> might not be current.</span></span>  
  
 <span data-ttu-id="2e7ae-1523">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1523">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1524">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1524">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1525">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1525">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1526">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1526">Local computer</span></span>|<span data-ttu-id="2e7ae-1527">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1527">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1528">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1528">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1529">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1529">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1530">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1530">Remote computer</span></span>|<span data-ttu-id="2e7ae-1531">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1531">No</span></span>|  
|<span data-ttu-id="2e7ae-1532">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1532">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1533">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1533">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1534">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.LastModifyTime%2A>プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1534">The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#19](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1535">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1535">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.CreateTime" />
        <altmember cref="P:System.Messaging.MessageQueue.DenySharedReceive" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Messaging.MessageQueue.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_MachineName")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1536">メッセージ キューのキューが存在するコンピューターの名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1536">Gets or sets the name of the computer where the Message Queuing queue is located.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1537">キューが存在するコンピューターの名前。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1537">The name of the computer where the queue is located.</span></span> <span data-ttu-id="2e7ae-1538">メッセージ キューの既定値は、ローカル コンピューターを表す "." です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1538">The Message Queuing default is ".", the local computer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1539">は、キュー <xref:System.Messaging.MessageQueue.Path%2A>のフレンドリ名構文の整数部分です。 <xref:System.Messaging.MessageQueue.MachineName%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1539">The <xref:System.Messaging.MessageQueue.MachineName%2A> is an integral component of the friendly name syntax of the queue <xref:System.Messaging.MessageQueue.Path%2A>.</span></span> <span data-ttu-id="2e7ae-1540">次の表は、表示名を使用してキューのパスを識別する場合に、指定した種類のキューに使用する構文を示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1540">The following table shows the syntax you should use for a queue of a specified type when you want to identify the queue path using its friendly name.</span></span>  
  
|<span data-ttu-id="2e7ae-1541">キューの種類</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1541">Queue type</span></span>|<span data-ttu-id="2e7ae-1542">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1542">Syntax</span></span>|  
|----------------|------------|  
|<span data-ttu-id="2e7ae-1543">パブリックキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1543">Public queue</span></span>|`MachineName`\\`QueueName`|  
|<span data-ttu-id="2e7ae-1544">専用キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1544">Private queue</span></span>|`MachineName`\\`Private$`\\`QueueName`|  
|<span data-ttu-id="2e7ae-1545">ジャーナルキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1545">Journal queue</span></span>|`MachineName`\\`QueueName`\\`Journal$`|  
|<span data-ttu-id="2e7ae-1546">マシンジャーナルキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1546">Machine journal queue</span></span>|`MachineName`\\`Journal$`|  
|<span data-ttu-id="2e7ae-1547">コンピューターの配信不能キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1547">Machine dead-letter queue</span></span>|`MachineName`\\`Deadletter$`|  
|<span data-ttu-id="2e7ae-1548">コンピュータートランザクション配信不能キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1548">Machine transactional dead-letter queue</span></span>|`MachineName`\\`XactDeadletter$`|  
  
 <span data-ttu-id="2e7ae-1549">を指定する場合は、 <xref:System.Messaging.MessageQueue.MachineName%2A>ローカルコンピューターに "." を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1549">Use "." for the local computer when specifying the <xref:System.Messaging.MessageQueue.MachineName%2A>.</span></span> <span data-ttu-id="2e7ae-1550">このプロパティでは、コンピューター名のみが認識されます`Server0`。たとえば、のようになります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1550">Only the computer name is recognized for this property, for example, `Server0`.</span></span> <span data-ttu-id="2e7ae-1551">プロパティ<xref:System.Messaging.MessageQueue.MachineName%2A>は、IP アドレスの形式をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1551">The <xref:System.Messaging.MessageQueue.MachineName%2A> property does not support the IP address format.</span></span>  
  
 <span data-ttu-id="2e7ae-1552"><xref:System.Messaging.MessageQueue.Path%2A> を <xref:System.Messaging.MessageQueue.MachineName%2A> の観点で定義すると、パス変換にドメインコントローラーが必要になるため、アプリケーションはオフラインで作業しているときに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1552">If you define the <xref:System.Messaging.MessageQueue.Path%2A> in terms of the <xref:System.Messaging.MessageQueue.MachineName%2A>, the application throws an exception when working offline because the domain controller is required for path translation.</span></span> <span data-ttu-id="2e7ae-1553">そのため、オフラインで作業<xref:System.Messaging.MessageQueue.FormatName%2A>する場合<xref:System.Messaging.MessageQueue.Path%2A>は、構文にを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1553">Therefore, you must use the <xref:System.Messaging.MessageQueue.FormatName%2A> for the <xref:System.Messaging.MessageQueue.Path%2A> syntax when working offline.</span></span>  
  
 <span data-ttu-id="2e7ae-1554">、 <xref:System.Messaging.MessageQueue.MachineName%2A> 、 <xref:System.Messaging.MessageQueue.Path%2A> および <xref:System.Messaging.MessageQueue.QueueName%2A> の各プロパティは関連しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1554">The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related.</span></span> <span data-ttu-id="2e7ae-1555">プロパティを変更すると<xref:System.Messaging.MessageQueue.Path%2A> 、プロパティが変更されます。 <xref:System.Messaging.MessageQueue.MachineName%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1555">Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change.</span></span> <span data-ttu-id="2e7ae-1556">これは、新しい<xref:System.Messaging.MessageQueue.MachineName%2A> <xref:System.Messaging.MessageQueue.QueueName%2A>とから構築されています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1556">It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>.</span></span> <span data-ttu-id="2e7ae-1557">(たとえば、形式名の構文を使用するように) を変更<xref:System.Messaging.MessageQueue.MachineName%2A>する<xref:System.Messaging.MessageQueue.QueueName%2A>と、プロパティとプロパティがリセットされ、新しいキューが参照されます。 <xref:System.Messaging.MessageQueue.Path%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1557">Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue.</span></span> <span data-ttu-id="2e7ae-1558">プロパティが空<xref:System.Messaging.MessageQueue.Path%2A>の場合、は指定したコンピューターのジャーナルキューに設定されます。 <xref:System.Messaging.MessageQueue.QueueName%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1558">If the <xref:System.Messaging.MessageQueue.QueueName%2A> property is empty, the <xref:System.Messaging.MessageQueue.Path%2A> is set to the Journal queue of the computer you specify.</span></span>  
  
 <span data-ttu-id="2e7ae-1559">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1559">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1560">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1560">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1561">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1561">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1562">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1562">Local computer</span></span>|<span data-ttu-id="2e7ae-1563">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1563">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1564">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1564">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1565">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1565">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1566">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1566">Remote computer</span></span>|<span data-ttu-id="2e7ae-1567">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1567">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1568">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1568">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1569">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1569">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1570">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.MachineName%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1570">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.MachineName%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#20](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1571"><see cref="P:System.Messaging.MessageQueue.MachineName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1571">The <see cref="P:System.Messaging.MessageQueue.MachineName" /> is <see langword="null" />.</span></span>        
<span data-ttu-id="2e7ae-1572">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1572">-or-</span></span>

<span data-ttu-id="2e7ae-1573">コンピューター名が無効です。構文が間違っているためと考えられます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1573">The name of the computer is not valid, possibly because the syntax is incorrect.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1574">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1574">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.QueueName" />
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
        <altmember cref="P:System.Messaging.MessageQueue.FormatName" />
        <altmember cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="MaximumJournalSize">
      <MemberSignature Language="C#" Value="public long MaximumJournalSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumJournalSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.MaximumJournalSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumJournalSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumJournalSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumJournalSize : int64 with get, set" Usage="System.Messaging.MessageQueue.MaximumJournalSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_MaximumJournalSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.SizeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1575">履歴キューの最大サイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1575">Gets or sets the maximum size of the journal queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1576">履歴キューの最大サイズ。単位は KB です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1576">The maximum size, in kilobytes, of the journal queue.</span></span> <span data-ttu-id="2e7ae-1577">メッセージ キューの既定値は、制限なしです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1577">The Message Queuing default specifies that no limit exists.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1578"><xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>メッセージキュージャーナルの記憶域の制限へのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1578"><xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> provides access to the Message Queuing journal storage limit.</span></span> <span data-ttu-id="2e7ae-1579">がの<xref:System.Messaging.MessageQueue.UseJournalQueue%2A> `true`場合にのみ関連します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1579">It is relevant only when <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> is `true`.</span></span> <span data-ttu-id="2e7ae-1580">このプロパティを設定すると、メッセージキューのキューが変更されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1580">Setting this property modifies the Message Queuing queue.</span></span> <span data-ttu-id="2e7ae-1581">そのため、その<xref:System.Messaging.MessageQueue>他のインスタンスは変更の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1581">Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change</span></span>  
  
 <span data-ttu-id="2e7ae-1582">メッセージをジャーナルまたは配信不能キューに格納する場合は、不要になったメッセージを削除するために、定期的にキューをクリアする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1582">If you store messages in a journal or dead-letter queue, you should periodically clear the queue to remove messages that are no longer needed.</span></span> <span data-ttu-id="2e7ae-1583">このようなキュー内のメッセージは、キューが存在するコンピューターのメッセージクォータにカウントされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1583">Messages in such a queue count toward the message quota for the computer where the queue resides.</span></span> <span data-ttu-id="2e7ae-1584">(管理者は、コンピューターのクォータを設定します)。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1584">(The administrator sets the computer quota.)</span></span>  
  
 <span data-ttu-id="2e7ae-1585">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1585">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1586">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1586">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1587">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1587">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1588">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1588">Local computer</span></span>|<span data-ttu-id="2e7ae-1589">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1589">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1590">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1590">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1591">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1591">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1592">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1592">Remote computer</span></span>|<span data-ttu-id="2e7ae-1593">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1593">No</span></span>|  
|<span data-ttu-id="2e7ae-1594">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1594">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1595">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1595">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1596">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1596">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#21](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1597">最大履歴キューサイズに無効な値が設定されています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1597">The maximum journal queue size was set to an invalid value.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1598">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1598">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.UseJournalQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.MaximumQueueSize" />
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteQueueSize" />
      </Docs>
    </Member>
    <Member MemberName="MaximumQueueSize">
      <MemberSignature Language="C#" Value="public long MaximumQueueSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumQueueSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.MaximumQueueSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumQueueSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumQueueSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumQueueSize : int64 with get, set" Usage="System.Messaging.MessageQueue.MaximumQueueSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_MaximumQueueSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.SizeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1599">キューの最大サイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1599">Gets or sets the maximum size of the queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1600">キューの最大サイズ。単位は KB です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1600">The maximum size, in kilobytes, of the queue.</span></span> <span data-ttu-id="2e7ae-1601">メッセージ キューの既定値は、制限なしです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1601">The Message Queuing default specifies that no limit exists.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1602">は<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A> 、メッセージキューのメッセージの記憶域制限にアクセスできるようにします。これは、管理者が定義するコンピューターのメッセージクォータとは別のものです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1602">The <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A> provides access to the Message Queuing message storage limit, which is separate from the computer's message quota that the administrator defines.</span></span> <span data-ttu-id="2e7ae-1603">メッセージクォータの詳細については、 <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1603">For more information about the message quota, see <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-1604">このプロパティを設定すると、メッセージキューのキューが変更されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1604">Setting this property modifies the Message Queuing queue.</span></span> <span data-ttu-id="2e7ae-1605">そのため、その<xref:System.Messaging.MessageQueue>他のインスタンスは変更の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1605">Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change</span></span>  
  
 <span data-ttu-id="2e7ae-1606">最大キューサイズまたはコンピューターメッセージクォータを超える試行が行われた場合、メッセージが失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1606">If an attempt is made to exceed either the maximum queue size or the computer message quota, messages might be lost.</span></span> <span data-ttu-id="2e7ae-1607">キュークォータに達すると、メッセージキューは、送信元アプリケーションの管理キューに、否定受信確認メッセージを返すことによってキューがいっぱいであることを通知します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1607">When the queue quota is reached, Message Queuing notifies the administration queue of the sending application to indicate that the queue is full, by returning a negative acknowledgment message.</span></span> <span data-ttu-id="2e7ae-1608">キュー内のメッセージの合計サイズが制限を下回るまで、メッセージキューは否定受信確認を送信し続けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1608">Message Queuing continues to send negative acknowledgments until the total size of the messages in the queue drops below the limit.</span></span>  
  
 <span data-ttu-id="2e7ae-1609">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1609">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1610">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1610">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1611">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1611">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1612">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1612">Local computer</span></span>|<span data-ttu-id="2e7ae-1613">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1613">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1614">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1614">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1615">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1615">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1616">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1616">Remote computer</span></span>|<span data-ttu-id="2e7ae-1617">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1617">No</span></span>|  
|<span data-ttu-id="2e7ae-1618">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1618">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1619">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1619">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1620">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1620">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#22](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1621">最大キューサイズに負の値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1621">The maximum queue size contains a negative value.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1622">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1622">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.MaximumJournalSize" />
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteQueueSize" />
      </Docs>
    </Member>
    <Member MemberName="MessageReadPropertyFilter">
      <MemberSignature Language="C#" Value="public System.Messaging.MessagePropertyFilter MessageReadPropertyFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessagePropertyFilter MessageReadPropertyFilter" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.MessageReadPropertyFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageReadPropertyFilter As MessagePropertyFilter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessagePropertyFilter ^ MessageReadPropertyFilter { System::Messaging::MessagePropertyFilter ^ get(); void set(System::Messaging::MessagePropertyFilter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageReadPropertyFilter : System.Messaging.MessagePropertyFilter with get, set" Usage="System.Messaging.MessageQueue.MessageReadPropertyFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_MessageReadPropertyFilter")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessagePropertyFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1623">メッセージの受信またはピークに使用するプロパティ フィルターを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1623">Gets or sets the property filter for receiving or peeking messages.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1624">メッセージごとに受信またはピークするプロパティのセットをフィルター処理するためにキューが使用する <see cref="T:System.Messaging.MessagePropertyFilter" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1624">The <see cref="T:System.Messaging.MessagePropertyFilter" /> used by the queue to filter the set of properties it receives or peeks for each message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1625">このフィルターは、が<xref:System.Messaging.MessageQueue>受信またはピークするメッセージプロパティを制限するブール値のセットです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1625">This filter is a set of Boolean values restricting the message properties that the <xref:System.Messaging.MessageQueue> receives or peeks.</span></span> <span data-ttu-id="2e7ae-1626">が<xref:System.Messaging.MessageQueue>サーバーキューからメッセージを受信またはピークすると、その<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>値がであるプロパティのみが取得`true`されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1626">When the <xref:System.Messaging.MessageQueue> receives or peeks a message from the server queue, it retrieves only those properties for which the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> value is `true`.</span></span>  
  
 <span data-ttu-id="2e7ae-1627"><xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>プロパティの初期プロパティ値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1627">The following shows initial property values for the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property.</span></span> <span data-ttu-id="2e7ae-1628">これらの設定は、で<xref:System.Messaging.MessagePropertyFilter.SetDefaults%2A>を呼び<xref:System.Messaging.MessagePropertyFilter>出す場合と同じです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1628">These settings are identical to calling <xref:System.Messaging.MessagePropertyFilter.SetDefaults%2A> on a <xref:System.Messaging.MessagePropertyFilter>.</span></span>  
  
|<span data-ttu-id="2e7ae-1629">プロパティ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1629">Property</span></span>|<span data-ttu-id="2e7ae-1630">既定値</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1630">Default value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.MessagePropertyFilter.Acknowledgment%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.AcknowledgeType%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.AdministrationQueue%2A>|`true`|  
|<xref:System.Messaging.MessagePropertyFilter.AppSpecific%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.ArrivedTime%2A>|`true`|  
|<xref:System.Messaging.MessagePropertyFilter.AttachSenderId%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.Authenticated%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.AuthenticationProviderName%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.AuthenticationProviderType%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.Body%2A>|`true`|  
|<xref:System.Messaging.MessagePropertyFilter.ConnectorType%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.CorrelationId%2A>|`true`|  
|<xref:System.Messaging.MessagePropertyFilter.DefaultBodySize%2A>|<span data-ttu-id="2e7ae-1631">1024バイト</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1631">1024 bytes</span></span>|  
|<xref:System.Messaging.MessagePropertyFilter.DefaultExtensionSize%2A>|<span data-ttu-id="2e7ae-1632">255バイト</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1632">255 bytes</span></span>|  
|<xref:System.Messaging.MessagePropertyFilter.DefaultLabelSize%2A>|<span data-ttu-id="2e7ae-1633">255バイト</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1633">255 bytes</span></span>|  
|<xref:System.Messaging.MessagePropertyFilter.DestinationQueue%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.DestinationSymmetricKey%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.DigitalSignature%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.EncryptionAlgorithm%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.Extension%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.HashAlgorithm%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.Id%2A>|`true`|  
|<xref:System.Messaging.MessagePropertyFilter.IsFirstInTransaction%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.IsLastInTransaction%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.Label%2A>|`true`|  
|<xref:System.Messaging.MessagePropertyFilter.MessageType%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.Priority%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.Recoverable%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.ResponseQueue%2A>|`true`|  
|<xref:System.Messaging.MessagePropertyFilter.SenderCertificate%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.SenderId%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.SenderVersion%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.SentTime%2A>|`true`|  
|<xref:System.Messaging.MessagePropertyFilter.SourceMachine%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.TimeToBeReceived%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.TimeToReachQueue%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.TransactionId%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.TransactionStatusQueue%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.MessagePropertyFilter.UseTracing%2A>|`false`|  
  
 <span data-ttu-id="2e7ae-1634">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1634">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1635">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1635">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1636">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1636">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1637">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1637">Local computer</span></span>|<span data-ttu-id="2e7ae-1638">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1638">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1639">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1639">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1640">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1640">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1641">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1641">Remote computer</span></span>|<span data-ttu-id="2e7ae-1642">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1642">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1643">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1643">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1644">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1644">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1645">次のコード例では<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> 、を使用して、受信したメッセージプロパティを制限します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1645">The following code example uses the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> to restrict the message properties received.</span></span>  
  
 [!code-cpp[MessageQueue.MessageReadPropertyFilter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.MessageReadPropertyFilter/CPP/mqmessagereadpropertyfilter.cpp#1)]
 [!code-csharp[MessageQueue.MessageReadPropertyFilter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.MessageReadPropertyFilter/CS/mqmessagereadpropertyfilter.cs#1)]
 [!code-vb[MessageQueue.MessageReadPropertyFilter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.MessageReadPropertyFilter/VB/mqmessagereadpropertyfilter.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1646">フィルターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1646">The filter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="MulticastAddress">
      <MemberSignature Language="C#" Value="public string MulticastAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MulticastAddress" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.MulticastAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MulticastAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastAddress : string with get, set" Usage="System.Messaging.MessageQueue.MulticastAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_MulticastAddress")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1647">MSMQ 3.0 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1647">Introduced in MSMQ 3.0.</span></span> <span data-ttu-id="2e7ae-1648">キューに関連付けられているマルチキャスト アドレスを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1648">Gets or sets the multicast address associated with the queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1649">有効なマルチキャスト アドレス (次に示す形式) を格納している <see cref="T:System.String" />、またはキューがマルチキャスト アドレスに関連付けられていないことを示す <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1649">A <see cref="T:System.String" /> that contains a valid multicast address (in the form shown below) or <see langword="null" />, which indicates that the queue is not associated with a multicast address.</span></span>  
  
```  
&lt;address&gt;:&lt;port&gt;  
```</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1650">プロパティ<xref:System.Messaging.MessageQueue.MulticastAddress%2A>は、メッセージを送信するときに使用できるマルチキャストアドレスに非トランザクションキューを関連付けるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1650">The <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property is used to associate a non-transactional queue with a multicast address that can be used when sending messages.</span></span> <span data-ttu-id="2e7ae-1651">トランザクションキューをマルチキャストアドレスに関連付けることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1651">You cannot associate a transactional queue with a multicast address.</span></span> <span data-ttu-id="2e7ae-1652">送信元アプリケーションがマルチキャストアドレスにメッセージを送信すると、メッセージキューはそのアドレスに関連付けられているすべてのキューにメッセージのコピーを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1652">When the sending application sends messages to a multicast address, Message Queuing sends a copy of the message to every queue associated with that address.</span></span>  
  
 <span data-ttu-id="2e7ae-1653">IP マルチキャストアドレスは、クラス D の範囲の 224.0.0.0 ~ 239.255.255.255 でなければなりません。これは、最初の4つの上位ビットを1110に設定した場合に対応します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1653">IP multicast addresses must be in the class D range from 224.0.0.0 to 239.255.255.255, which corresponds to setting the first four high-order bits equal to 1110.</span></span> <span data-ttu-id="2e7ae-1654">ただし、この範囲のアドレスの特定の範囲のみが予約されていないため、マルチキャストメッセージの送信に使用できません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1654">However, only certain ranges of addresses in this range are unreserved and available for sending multicast messages.</span></span> <span data-ttu-id="2e7ae-1655">予約されているマルチキャストアドレスの最新の一覧については、[インターネットアドレス指定機関 (IANA) のインターネットマルチキャストアドレス](https://go.microsoft.com/fwlink/?linkid=3859)に関する Web ページを参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1655">For the latest list of reserved multicast addresses, see the [Internet Assigned Number Authority (IANA) Internet Multicast Addresses](https://go.microsoft.com/fwlink/?linkid=3859) Web page.</span></span> <span data-ttu-id="2e7ae-1656">ポート番号に制限はありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1656">There are no restrictions on the port number.</span></span>  
  
 <span data-ttu-id="2e7ae-1657">複数のソースコンピューターがマルチキャストメッセージを送信しているときに、特定のキューで1つの送信元コンピューターからのメッセージのみを受信する場合は、各ソースコンピューターで、IP アドレスとポート番号の異なる組み合わせにメッセージを送信する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1657">If several source computers are sending multicast messages and you want a specific queue to receive messages from only one source computer, each source computer must send messages to a different combination of IP address and port number.</span></span>  
  
 <span data-ttu-id="2e7ae-1658">マルチキャストアドレスからキューの関連付けを解除するに<xref:System.Messaging.MessageQueue.MulticastAddress%2A>は、プロパティを長さ0の文字列に設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1658">To dissociate a queue from a multicast address, set the <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property to a zero-length string.</span></span> <span data-ttu-id="2e7ae-1659">に`null`設定しないでください。これにより、 <xref:System.ArgumentNullException>がになります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1659">Do not set it to `null`, as this will result in a <xref:System.ArgumentNullException>.</span></span>  
  
 <span data-ttu-id="2e7ae-1660">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1660">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1661">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1661">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1662">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1662">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1663">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1663">Local computer</span></span>|<span data-ttu-id="2e7ae-1664">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1664">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1665">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1665">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1666">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1666">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1667">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1667">Remote computer</span></span>|<span data-ttu-id="2e7ae-1668">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1668">No</span></span>|  
|<span data-ttu-id="2e7ae-1669">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1669">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1670">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1670">No</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="2e7ae-1671">MSMQ 3.0 がインストールされていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1671">MSMQ 3.0 is not installed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Messaging.MessageQueue.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_Path")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1672">キューのパスを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1672">Gets or sets the queue's path.</span></span> <span data-ttu-id="2e7ae-1673"><see cref="P:System.Messaging.MessageQueue.Path" /> を設定すると、<see cref="T:System.Messaging.MessageQueue" /> は新しいキューを指します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1673">Setting the <see cref="P:System.Messaging.MessageQueue.Path" /> causes the <see cref="T:System.Messaging.MessageQueue" /> to point to a new queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-1674"><see cref="T:System.Messaging.MessageQueue" /> が参照するキュー。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1674">The queue that is referenced by the <see cref="T:System.Messaging.MessageQueue" />.</span></span> <span data-ttu-id="2e7ae-1675">既定値は、使用する <see cref="M:System.Messaging.MessageQueue.#ctor" /> コンストラクターによって異なり、<see langword="null" /> かコンストラクターの <paramref name="path" /> パラメーターで指定された値になります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1675">The default depends on which <see cref="M:System.Messaging.MessageQueue.#ctor" /> constructor you use; it is either <see langword="null" /> or is specified by the constructor's <paramref name="path" /> parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1676"><xref:System.Messaging.MessageQueue.Path%2A>プロパティの構文は、次の表に示すように、が指すキューの種類によって異なります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1676">The syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue it points to, as shown in the following table.</span></span>  
  
|<span data-ttu-id="2e7ae-1677">キューの種類</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1677">Queue type</span></span>|<span data-ttu-id="2e7ae-1678">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1678">Syntax</span></span>|  
|----------------|------------|  
|<span data-ttu-id="2e7ae-1679">パブリックキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1679">Public queue</span></span>|`MachineName`\\`QueueName`|  
|<span data-ttu-id="2e7ae-1680">専用キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1680">Private queue</span></span>|`MachineName`\\`Private$`\\`QueueName`|  
|<span data-ttu-id="2e7ae-1681">ジャーナルキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1681">Journal queue</span></span>|`MachineName`\\`QueueName`\\`Journal$`|  
|<span data-ttu-id="2e7ae-1682">マシンジャーナルキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1682">Machine journal queue</span></span>|`MachineName`\\`Journal$`|  
|<span data-ttu-id="2e7ae-1683">コンピューターの配信不能キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1683">Machine dead-letter queue</span></span>|`MachineName`\\`Deadletter$`|  
|<span data-ttu-id="2e7ae-1684">コンピュータートランザクション配信不能キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1684">Machine transactional dead-letter queue</span></span>|`MachineName`\\`XactDeadletter$`|  
  
 <span data-ttu-id="2e7ae-1685">"." を使用してローカルコンピューターを表します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1685">Use "." to represent the local computer.</span></span>  
  
 <span data-ttu-id="2e7ae-1686">、 <xref:System.Messaging.MessageQueue.MachineName%2A> 、 <xref:System.Messaging.MessageQueue.Path%2A> および <xref:System.Messaging.MessageQueue.QueueName%2A> の各プロパティは関連しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1686">The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related.</span></span> <span data-ttu-id="2e7ae-1687">プロパティを変更すると<xref:System.Messaging.MessageQueue.Path%2A> 、プロパティが変更されます。 <xref:System.Messaging.MessageQueue.MachineName%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1687">Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change.</span></span> <span data-ttu-id="2e7ae-1688">これは、新しい<xref:System.Messaging.MessageQueue.MachineName%2A> <xref:System.Messaging.MessageQueue.QueueName%2A>とから構築されています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1688">It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>.</span></span> <span data-ttu-id="2e7ae-1689">(たとえば、形式名の構文を使用するように) を変更<xref:System.Messaging.MessageQueue.MachineName%2A>する<xref:System.Messaging.MessageQueue.QueueName%2A>と、プロパティとプロパティがリセットされ、新しいキューが参照されます。 <xref:System.Messaging.MessageQueue.Path%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1689">Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1690"><xref:System.Messaging.MessageQueue.FormatName%2A>または、次の表に示すように、または<xref:System.Messaging.MessageQueue.Label%2A>を使用してキューのパスを記述することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1690">Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table.</span></span>  
  
|<span data-ttu-id="2e7ae-1691">関連項目</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1691">Reference</span></span>|<span data-ttu-id="2e7ae-1692">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1692">Syntax</span></span>|<span data-ttu-id="2e7ae-1693">例</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1693">Example</span></span>|  
|---------------|------------|-------------|  
|<span data-ttu-id="2e7ae-1694">形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1694">Format name</span></span>|<span data-ttu-id="2e7ae-1695">`FormatName:`[*形式名*]</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1695">`FormatName:` [ *format name* ]</span></span>|<span data-ttu-id="2e7ae-1696">`FormatName:Public=`5A5F7535-AE9A-41d4-935C-845C2AFF7112</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1696">`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112</span></span>|  
|<span data-ttu-id="2e7ae-1697">group1</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1697">Label</span></span>|<span data-ttu-id="2e7ae-1698">`Label:`[*ラベル*]</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1698">`Label:` [ *label* ]</span></span>|<span data-ttu-id="2e7ae-1699">`Label:`TheLabel</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1699">`Label:` TheLabel</span></span>|  
  
 <span data-ttu-id="2e7ae-1700">メッセージを送信するときに<xref:System.Messaging.MessageQueue.Path%2A>プロパティのラベル構文を使用すると、 <xref:System.Messaging.MessageQueue.Label%2A>が一意でない場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1700">If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique.</span></span>  
  
 <span data-ttu-id="2e7ae-1701">オフラインで作業するには、最初のテーブルのフレンドリ名の構文ではなく、形式名の構文を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1701">To work offline, you must use the format name syntax, rather than the friendly name syntax in the first table.</span></span> <span data-ttu-id="2e7ae-1702">それ以外の場合は、(Active Directory が存在する) プライマリドメインコントローラーが形式名へのパスを解決できないため、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1702">Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.</span></span>  
  
 <span data-ttu-id="2e7ae-1703">新しいパスを設定すると、メッセージキューが閉じられ、すべてのハンドルが解放されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1703">Setting a new path closes the message queue and releases all handles.</span></span>  
  
 <span data-ttu-id="2e7ae-1704">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1704">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1705">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1705">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1706">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1706">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1707">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1707">Local computer</span></span>|<span data-ttu-id="2e7ae-1708">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1708">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1709">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1709">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1710">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1710">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1711">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1711">Remote computer</span></span>|<span data-ttu-id="2e7ae-1712">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1712">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1713">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1713">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1714">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1714">Yes</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="2e7ae-1715">ワークグループモードでは、専用キューのみを使用できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1715">In workgroup mode you can only use private queues.</span></span> <span data-ttu-id="2e7ae-1716">このパスは、プライベートキュー `MachineName`の構文\\ `Private$` \\ `QueueName`を使用して指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1716">You specify the path using the private queue syntax `MachineName`\\`Private$`\\`QueueName`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1717">次のコード例では<xref:System.Messaging.MessageQueue> 、さまざまなパス名の構文型を使用して新しいオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1717">The following code example creates new <xref:System.Messaging.MessageQueue> objects using various path name syntax types.</span></span> <span data-ttu-id="2e7ae-1718">いずれの場合も、コンストラクターで定義されているパスを持つキューにメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1718">In each case, it sends a message to the queue whose path is defined in the constructor.</span></span>  
  
 [!code-cpp[MessageQueue.Path#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Path/CPP/mqpath.cpp#1)]
 [!code-csharp[MessageQueue.Path#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Path/CS/mqpath.cs#1)]
 [!code-vb[MessageQueue.Path#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Path/VB/mqpath.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1719">パスが無効です。構文が無効であるためと考えられます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1719">The path is not valid, possibly because the syntax is not valid.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.QueueName" />
        <altmember cref="P:System.Messaging.MessageQueue.MachineName" />
        <altmember cref="P:System.Messaging.MessageQueue.FormatName" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
        <altmember cref="M:System.Messaging.MessageQueue.#ctor" />
        <altmember cref="M:System.Messaging.MessageQueue.Close" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Peek">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <threadsafe><span data-ttu-id="2e7ae-1720">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1720">The method is not thread safe.</span></span></threadsafe>
        <summary><span data-ttu-id="2e7ae-1721">キューにある最初のメッセージのコピーを返します。メッセージはキューから削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1721">Returns a copy of the first message in the queue without removing the message from the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; System.Messaging.Message" Usage="messageQueue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-1722">この <see cref="T:System.Messaging.MessageQueue" /> が参照するキューにある最初のメッセージを、削除せずに返します (ピークします)。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1722">Returns without removing (peeks) the first message in the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />.</span></span> <span data-ttu-id="2e7ae-1723"><see cref="M:System.Messaging.MessageQueue.Peek" /> メソッドは同期メソッドであるため、メッセージが利用可能になるまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1723">The <see cref="M:System.Messaging.MessageQueue.Peek" /> method is synchronous, so it blocks the current thread until a message becomes available.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1724">キューの最初のメッセージを表す <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1724">The <see cref="T:System.Messaging.Message" /> that represents the first message in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1725">キューをピークしたり、メッセージがキューに存在するまで待機したりするには、このオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1725">Use this overload to peek a queue, or to wait until a message exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1726">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、キューから最初のメッセージを読み取りますが、削除しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1726">The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue.</span></span> <span data-ttu-id="2e7ae-1727">そのため、より優先<xref:System.Messaging.MessageQueue.Peek%2A>順位の高いメッセージがキューに到着しない限り、を繰り返し呼び出して同じメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1727">Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-1728">一方<xref:System.Messaging.MessageQueue.Receive%2A> 、メソッドは、キューから最初のメッセージを読み取り、削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1728">The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue.</span></span> <span data-ttu-id="2e7ae-1729">このため、 <xref:System.Messaging.MessageQueue.Receive%2A>を繰り返し呼び出すと、異なるメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1729">Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.</span></span>  
  
 <span data-ttu-id="2e7ae-1730">メッセージキューは、優先度と到着時刻に従ってキュー内のメッセージを並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1730">Message Queuing orders messages in the queue according to priority and arrival time.</span></span> <span data-ttu-id="2e7ae-1731">新しいメッセージは、優先順位が高い場合にのみ、古いものよりも前に配置されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1731">A newer message is placed before an older one only if it is of a higher priority.</span></span>  
  
 <span data-ttu-id="2e7ae-1732">キューにメッセージが到達するまで待機する間、現在のスレッドがブロックされてもいい場合は、<xref:System.Messaging.MessageQueue.Peek%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1732">Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-1733">このオーバーロードではタイムアウトが指定されていないため、アプリケーションは無制限に待機する場合があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1733">Because this overload does not specify a time-out, the application might wait indefinitely.</span></span> <span data-ttu-id="2e7ae-1734">待機せずにアプリケーションの処理を継続する必要がある場合は、非同期の <xref:System.Messaging.MessageQueue.BeginPeek%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1734">If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.</span></span> <span data-ttu-id="2e7ae-1735">または、タイムアウトを指定するの<xref:System.Messaging.MessageQueue.Peek%2A>オーバーロードを使用して、メッセージがキューに到達するまでのタイムアウトを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1735">Alternatively, you can specify a time-out for a message to arrive in the queue by using the overload of <xref:System.Messaging.MessageQueue.Peek%2A> that specifies a time-out.</span></span>  
  
 <span data-ttu-id="2e7ae-1736">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1736">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1737">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1737">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1738">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1738">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1739">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1739">Local computer</span></span>|<span data-ttu-id="2e7ae-1740">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1740">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1741">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1741">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1742">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1742">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1743">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1743">Remote computer</span></span>|<span data-ttu-id="2e7ae-1744">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1744">No</span></span>|  
|<span data-ttu-id="2e7ae-1745">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1745">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1746">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1746">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1747">次の例では<xref:System.Messaging.MessageQueue.Peek%2A> 、キューに対してメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1747">The following examples use the <xref:System.Messaging.MessageQueue.Peek%2A> method on a queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1748">最初の例では、アプリケーションはメッセージがキューで使用可能になるまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1748">In the first example, the application waits until a message becomes available in the queue.</span></span> <span data-ttu-id="2e7ae-1749">最初の例では、受信したメッセージにアクセスしないことに注意してください。メッセージが到着するまで、処理を一時停止するだけです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1749">Note that the first example does not access the message that arrives; it merely pauses processing until a message arrives.</span></span> <span data-ttu-id="2e7ae-1750">メッセージが既にキューに存在する場合は、直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1750">If a message already exists in the queue, it will return immediately.</span></span>  
  
 <span data-ttu-id="2e7ae-1751">2番目の例では、アプリケーション定義`Order`のクラスを含むメッセージがキューに送信され、キューからピークされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1751">In the second example, a message that contains an application-defined `Order` class is sent to the queue, and then peeked from the queue.</span></span>  
  
 [!code-cpp[MessageQueue.Peek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Peek_noparms/CPP/mqpeek_noparms.cpp#1)]
 [!code-csharp[MessageQueue.Peek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Peek_noparms/CS/mqpeek_noparms.cs#1)]
 [!code-vb[MessageQueue.Peek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Peek_noparms/VB/mqpeek_noparms.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1752">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1752">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-1753">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1753">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Peek (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Peek(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Peek(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Peek(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Peek : TimeSpan -&gt; System.Messaging.Message" Usage="messageQueue.Peek timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-1754">キューにメッセージが格納されるまで待機する最大時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1754">A <see cref="T:System.TimeSpan" /> that indicates the maximum time to wait for the queue to contain a message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1755">この <see cref="T:System.Messaging.MessageQueue" /> が参照するキューにある最初のメッセージを、削除せずに返します (ピークします)。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1755">Returns without removing (peeks) the first message in the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />.</span></span> <span data-ttu-id="2e7ae-1756"><see cref="M:System.Messaging.MessageQueue.Peek" /> メソッドは同期メソッドであるため、メッセージが利用可能になるか、指定したタイムアウトが発生するまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1756">The <see cref="M:System.Messaging.MessageQueue.Peek" /> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1757">キューの最初のメッセージを表す <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1757">The <see cref="T:System.Messaging.Message" /> that represents the first message in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1758">キューをピークする場合、またはキューにメッセージが存在するまで指定した期間待機する場合は、このオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1758">Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue.</span></span> <span data-ttu-id="2e7ae-1759">メッセージが既にキューに存在する場合、メソッドは直ちにを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1759">The method returns immediately if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1760">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、キューから最初のメッセージを読み取りますが、削除しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1760">The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue.</span></span> <span data-ttu-id="2e7ae-1761">そのため、より優先<xref:System.Messaging.MessageQueue.Peek%2A>順位の高いメッセージがキューに到着しない限り、を繰り返し呼び出して同じメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1761">Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-1762">一方<xref:System.Messaging.MessageQueue.Receive%2A> 、メソッドは、キューから最初のメッセージを読み取り、削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1762">The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue.</span></span> <span data-ttu-id="2e7ae-1763">このため、 <xref:System.Messaging.MessageQueue.Receive%2A>を繰り返し呼び出すと、異なるメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1763">Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.</span></span>  
  
 <span data-ttu-id="2e7ae-1764">メッセージキューは、優先度と到着時刻に従ってキュー内のメッセージを並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1764">Message Queuing orders messages in the queue according to priority and arrival time.</span></span> <span data-ttu-id="2e7ae-1765">新しいメッセージは、優先順位が高い場合にのみ、古いものよりも前に配置されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1765">A newer message is placed before an older one only if it is of a higher priority.</span></span>  
  
 <span data-ttu-id="2e7ae-1766">キューにメッセージが到達するまで待機する間、現在のスレッドがブロックされてもいい場合は、<xref:System.Messaging.MessageQueue.Peek%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1766">Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-1767">スレッドは、指定された期間にわたってブロックされるか、または<xref:System.Messaging.MessageQueue.InfiniteTimeout>指定した場合は無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1767">The thread will be blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>.</span></span> <span data-ttu-id="2e7ae-1768">待機せずにアプリケーションの処理を継続する必要がある場合は、非同期の <xref:System.Messaging.MessageQueue.BeginPeek%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1768">If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-1769">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1769">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1770">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1770">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1771">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1771">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1772">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1772">Local computer</span></span>|<span data-ttu-id="2e7ae-1773">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1773">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1774">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1774">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1775">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1775">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1776">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1776">Remote computer</span></span>|<span data-ttu-id="2e7ae-1777">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1777">No</span></span>|  
|<span data-ttu-id="2e7ae-1778">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1778">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1779">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1779">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1780">次のコード例では<xref:System.Messaging.MessageQueue.Peek%2A> 、ゼロのタイムアウトを指定してメソッドを使用して、キューが空かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1780">The following code example uses the <xref:System.Messaging.MessageQueue.Peek%2A> method with a time-out of zero to check whether the queue is empty.</span></span>  
  
 [!code-cpp[MessageQueue.Peek_timeout#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Peek_timeout/CPP/mqpeek_timeout.cpp#1)]
 [!code-csharp[MessageQueue.Peek_timeout#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Peek_timeout/CS/mqpeek_timeout.cs#1)]
 [!code-vb[MessageQueue.Peek_timeout#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Peek_timeout/VB/mqpeek_timeout.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1781"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1781">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1782">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1782">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-1783">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1783">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Peek (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.PeekAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Peek(valuetype System.TimeSpan timeout, class System.Messaging.Cursor cursor, valuetype System.Messaging.PeekAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Peek(TimeSpan timeout, System::Messaging::Cursor ^ cursor, System::Messaging::PeekAction action);" />
      <MemberSignature Language="F#" Value="member this.Peek : TimeSpan * System.Messaging.Cursor * System.Messaging.PeekAction -&gt; System.Messaging.Message" Usage="messageQueue.Peek (timeout, cursor, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cursor" Type="System.Messaging.Cursor" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="action" Type="System.Messaging.PeekAction" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-1784">キューにメッセージが格納されるまで待機する最大時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1784">A <see cref="T:System.TimeSpan" /> that indicates the maximum time to wait for the queue to contain a message.</span></span></param>
        <param name="cursor"><span data-ttu-id="2e7ae-1785">メッセージ キュー内の特定の位置を維持する <see cref="T:System.Messaging.Cursor" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1785">A <see cref="T:System.Messaging.Cursor" /> that maintains a specific position in the message queue.</span></span></param>
        <param name="action"><span data-ttu-id="2e7ae-1786"><see cref="T:System.Messaging.PeekAction" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1786">One of the <see cref="T:System.Messaging.PeekAction" /> values.</span></span> <span data-ttu-id="2e7ae-1787">キュー内の現在のメッセージと次のメッセージのどちらをピークするかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1787">Indicates whether to peek at the current message in the queue, or the next message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1788">指定されたカーソルを使用して、キュー内の現在のメッセージまたは次のメッセージを、削除せずに返します (ピークします)。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1788">Returns without removing (peeks) the current or next message in the queue, using the specified cursor.</span></span> <span data-ttu-id="2e7ae-1789"><see cref="M:System.Messaging.MessageQueue.Peek" /> メソッドは同期メソッドであるため、メッセージが利用可能になるか、指定したタイムアウトが発生するまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1789">The <see cref="M:System.Messaging.MessageQueue.Peek" /> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1790">キュー内のメッセージを表す <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1790">A <see cref="T:System.Messaging.Message" /> that represents a message in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1791">キューをピークする場合、またはキューにメッセージが存在するまで指定した期間待機する場合は、このオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1791">Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue.</span></span> <span data-ttu-id="2e7ae-1792">メッセージが既にキューに存在する場合、メソッドは直ちにを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1792">The method returns immediately if a message already exists in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1793">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、キューからメッセージを読み取りますが、削除しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1793">The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, a message from the queue.</span></span> <span data-ttu-id="2e7ae-1794">一方<xref:System.Messaging.MessageQueue.Receive%2A> 、メソッドは、キューからメッセージを読み取り、削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1794">The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes a message from the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1795">キューにメッセージが到達するまで待機する間、現在のスレッドがブロックされてもいい場合は、<xref:System.Messaging.MessageQueue.Peek%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1795">Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-1796">スレッドは、指定された期間まで、または指定した場合<xref:System.Messaging.MessageQueue.InfiniteTimeout>は無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1796">The thread is blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>.</span></span> <span data-ttu-id="2e7ae-1797">待機せずにアプリケーションの処理を継続する必要がある場合は、非同期の <xref:System.Messaging.MessageQueue.BeginPeek%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1797">If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-1798">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1798">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1799">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1799">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1800">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1800">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1801">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1801">Local computer</span></span>|<span data-ttu-id="2e7ae-1802">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1802">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1803">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1803">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1804">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1804">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1805">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1805">Remote computer</span></span>|<span data-ttu-id="2e7ae-1806">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1806">No</span></span>|  
|<span data-ttu-id="2e7ae-1807">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1807">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1808">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1808">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2e7ae-1809"><paramref name="action" /> パラメーターに <see langword="PeekAction.Current" /> または <see langword="PeekAction.Next" /> 以外の値が指定されました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1809">A value other than <see langword="PeekAction.Current" /> or <see langword="PeekAction.Next" /> was specified for the <paramref name="action" /> parameter.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-1810"><paramref name="cursor" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1810">The <paramref name="cursor" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1811"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1811">The value specified for the <paramref name="timeout" /> parameter is not valid.</span></span> <span data-ttu-id="2e7ae-1812"><paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> より小さい値か、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> より大きい値である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1812">Possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1813">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1813">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-1814">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1814">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="T:System.Messaging.PeekAction" />
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PeekByCorrelationId">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1815">指定した相関 ID と一致するメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1815">Peeks a message that matches a given correlation identifier.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PeekByCorrelationId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message PeekByCorrelationId (string correlationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message PeekByCorrelationId(string correlationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekByCorrelationId (correlationId As String) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ PeekByCorrelationId(System::String ^ correlationId);" />
      <MemberSignature Language="F#" Value="member this.PeekByCorrelationId : string -&gt; System.Messaging.Message" Usage="messageQueue.PeekByCorrelationId correlationId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correlationId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="correlationId"><span data-ttu-id="2e7ae-1816">ピークするメッセージの <see cref="P:System.Messaging.Message.CorrelationId" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1816">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to peek.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1817">指定した相関 ID と一致するメッセージをピークします。現在、指定した相関 ID と一致するメッセージがキューに存在しない場合は、すぐに例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1817">Peeks the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1818">渡された <paramref name="correlationId" /> パラメーターと一致する <see cref="P:System.Messaging.Message.CorrelationId" /> を持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1818">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the <paramref name="correlationId" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1819">このメソッドは、によって参照さ<xref:System.Messaging.MessageQueue>れるキュー内で<xref:System.Messaging.Message.CorrelationId%2A> 、指定し`correlationId`たパラメーターと一致するメッセージを検索します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1819">This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-1820">パラメーターに`correlationID`一致するメッセージが見つからない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1820">If no message is found that matches the `correlationID` parameter, an exception is thrown.</span></span>  
  
 <span data-ttu-id="2e7ae-1821"><xref:System.Messaging.Message.CorrelationId%2A>プロパティは、キューに送信されたメッセージを、関連付けられている応答、レポート、または受信確認メッセージに関連付けるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1821">The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.</span></span>  
  
 <span data-ttu-id="2e7ae-1822">他の2つの方法では、キュー内のメッセージをピークすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1822">Two other methods allow you to peek messages in a queue.</span></span> <span data-ttu-id="2e7ae-1823">メソッドは、キュー内の最初のメッセージを返します<xref:System.Messaging.MessageQueue.PeekById%28System.String%29> 。メソッドは、一意の識別子を指定することによってメッセージを取得するために使用されます。 <xref:System.Messaging.MessageQueue.Peek%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1823">The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.</span></span>  
  
 <span data-ttu-id="2e7ae-1824">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1824">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1825">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1825">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1826">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1826">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1827">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1827">Local computer</span></span>|<span data-ttu-id="2e7ae-1828">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1828">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1829">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1829">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1830">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1830">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1831">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1831">Remote computer</span></span>|<span data-ttu-id="2e7ae-1832">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1832">No</span></span>|  
|<span data-ttu-id="2e7ae-1833">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1833">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1834">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1834">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1835">次のコード例では、キューとの間で注文を含むメッセージを送受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1835">The following code example sends and receives a message that contains an order to and from a queue.</span></span> <span data-ttu-id="2e7ae-1836">これは、元のメッセージがキューに到達するか、キューから取得されるときに肯定受信確認を要求します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1836">It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.</span></span>  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-1837"><paramref name="correlationId" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1837">The <paramref name="correlationId" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-1838">指定した <paramref name="correlationId" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1838">The message with the specified <paramref name="correlationId" /> could not be found.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1839">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1839">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.CorrelationId" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
      </Docs>
    </Member>
    <Member MemberName="PeekByCorrelationId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message PeekByCorrelationId (string correlationId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message PeekByCorrelationId(string correlationId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekByCorrelationId (correlationId As String, timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ PeekByCorrelationId(System::String ^ correlationId, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.PeekByCorrelationId : string * TimeSpan -&gt; System.Messaging.Message" Usage="messageQueue.PeekByCorrelationId (correlationId, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correlationId" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="correlationId"><span data-ttu-id="2e7ae-1840">ピークするメッセージの <see cref="P:System.Messaging.Message.CorrelationId" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1840">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to peek.</span></span></param>
        <param name="timeout"><span data-ttu-id="2e7ae-1841">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1841">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1842">指定した相関 ID と一致するメッセージをピークします。指定した相関 ID のメッセージがキューで利用可能になるか、タイムアウトが経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1842">Peeks the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1843">渡された <paramref name="correlationId" /> パラメーターと一致する <see cref="P:System.Messaging.Message.CorrelationId" /> を持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1843">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the <paramref name="correlationId" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1844">このメソッドは、によって参照さ<xref:System.Messaging.MessageQueue>れるキュー内で<xref:System.Messaging.Message.CorrelationId%2A> 、指定し`correlationId`たパラメーターと一致するメッセージを検索します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1844">This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-1845">`correlationID`パラメーターに一致するメッセージが見つからず、 `timeout`パラメーターで指定された期間内に新しいメッセージがキューに届いていない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1845">If no message is found that matches the `correlationID` parameter, and no new message arrives in the queue within the period specified by the `timeout` parameter, an exception is thrown.</span></span>  
  
 <span data-ttu-id="2e7ae-1846">パラメーター `timeout`で、このメソッドの合計実行時間が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1846">The `timeout` parameter does not specify the total running time for this method.</span></span> <span data-ttu-id="2e7ae-1847">代わりに、キューに新しいメッセージが到着するまで待機する時間を指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1847">Rather, it specifies the time to wait for a new message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-1848">このメソッドは、新しいメッセージが到着するたびに<xref:System.Messaging.Message.CorrelationId%2A> 、新しいメッセージのを調べて、 `correlationId`パラメーターと一致するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1848">Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-1849">それ以外の場合、このメソッドはタイムアウト期間を開始し、別の新しいメッセージが到着するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1849">If not, this method starts the time-out period over and waits for another new message to arrive.</span></span> <span data-ttu-id="2e7ae-1850">したがって、タイムアウト期間内に新しいメッセージが引き続き到着する場合、このメソッドは、タイムアウト期間が新しいメッセージを受信せずに期限切れになるか、または次のメッセージが到着<xref:System.Messaging.Message.CorrelationId%2A>するまで、無期限に実行を継続することができます。`correlationId`パラメーターと一致します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1850">Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-1851"><xref:System.Messaging.Message.CorrelationId%2A>プロパティは、キューに送信されたメッセージを、関連付けられている応答、レポート、または受信確認メッセージに関連付けるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1851">The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.</span></span>  
  
 <span data-ttu-id="2e7ae-1852">他の2つの方法では、キュー内のメッセージをピークすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1852">Two other methods allow you to peek messages in a queue.</span></span> <span data-ttu-id="2e7ae-1853">メソッドは、キュー内の最初のメッセージを返します<xref:System.Messaging.MessageQueue.PeekById%28System.String%29> 。メソッドは、一意の識別子を指定することによってメッセージを取得するために使用されます。 <xref:System.Messaging.MessageQueue.Peek%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1853">The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.</span></span>  
  
 <span data-ttu-id="2e7ae-1854">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1854">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1855">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1855">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1856">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1856">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1857">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1857">Local computer</span></span>|<span data-ttu-id="2e7ae-1858">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1858">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1859">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1859">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1860">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1860">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1861">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1861">Remote computer</span></span>|<span data-ttu-id="2e7ae-1862">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1862">No</span></span>|  
|<span data-ttu-id="2e7ae-1863">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1863">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1864">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1864">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1865">次のコード例は、<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%2CSystem.TimeSpan%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1865">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%2CSystem.TimeSpan%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#5](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#5)]
 [!code-csharp[MessageQueue2#5](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-1866"><paramref name="correlationId" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1866">The <paramref name="correlationId" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1867"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1867">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-1868">指定した <paramref name="correlationId" /> を持つメッセージがキューに存在せず、タイムアウトが経過する前にキューに到達することもありませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1868">The message with the specified <paramref name="correlationId" /> does not exist in the queue and did not arrive before the time-out expired.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1869">タイムアウトが経過する前にメッセージが到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1869">A message did not arrive before the time-out expired.</span></span>  
  
 <span data-ttu-id="2e7ae-1870">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1870">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-1871">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1871">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="P:System.Messaging.Message.CorrelationId" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PeekById">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1872">指定したメッセージ ID を持つメッセージのコピーを返します。メッセージはキューから削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1872">Returns a copy of the message that has the specified message identifier without removing the message from the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PeekById">
      <MemberSignature Language="C#" Value="public System.Messaging.Message PeekById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message PeekById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.PeekById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekById (id As String) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ PeekById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.PeekById : string -&gt; System.Messaging.Message" Usage="messageQueue.PeekById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"><span data-ttu-id="2e7ae-1873">ピークするメッセージの <see cref="P:System.Messaging.Message.Id" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1873">The <see cref="P:System.Messaging.Message.Id" /> of the message to peek.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1874">メッセージ ID が <paramref name="id" /> パラメーターと一致するメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1874">Peeks the message whose message identifier matches the <paramref name="id" /> parameter.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1875"><paramref name="id" /> パラメーターと一致する <see cref="P:System.Messaging.Message.Id" /> プロパティを持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1875">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the <paramref name="id" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1876">を<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>使用すると、既知のメッセージ識別子を持つメッセージをキューから削除せずに読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1876">Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier.</span></span> <span data-ttu-id="2e7ae-1877">メッセージの識別子はメッセージキューエンタープライズ全体で一意であるため、指定`id`されたパラメーターに一致するメッセージがキューに1つだけ存在します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1877">The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.</span></span> <span data-ttu-id="2e7ae-1878">現在、キューにメッセージが含まれていない場合、このオーバーロードは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1878">This overload throws an exception if the queue does not currently contain the message.</span></span>  
  
 <span data-ttu-id="2e7ae-1879">2つの追加のメソッドを使用する<xref:System.Messaging.MessageQueue.Peek%2A>と、 <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>キュー内のメッセージをピークすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1879">Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-1880">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、キュー内の最初のメッセージを返します。<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>キューに送信されたメッセージの結果として作成された、受信確認、レポート、またはアプリケーションで生成された応答メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1880">The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1881">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1881">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1882">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1882">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1883">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1883">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1884">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1884">Local computer</span></span>|<span data-ttu-id="2e7ae-1885">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1885">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1886">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1886">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1887">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1887">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1888">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1888">Remote computer</span></span>|<span data-ttu-id="2e7ae-1889">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1889">No</span></span>|  
|<span data-ttu-id="2e7ae-1890">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1890">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1891">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1891">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1892">次のコード例は、<xref:System.Messaging.MessageQueue.PeekById%28System.String%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1892">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#6](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#6)]
 [!code-csharp[MessageQueue2#6](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-1893"><paramref name="id" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1893">The <paramref name="id" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-1894">指定した <paramref name="id" /> を持つメッセージが存在しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1894">No message with the specified <paramref name="id" /> exists.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1895">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1895">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.Id" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
      </Docs>
    </Member>
    <Member MemberName="PeekById">
      <MemberSignature Language="C#" Value="public System.Messaging.Message PeekById (string id, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message PeekById(string id, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.PeekById(System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekById (id As String, timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ PeekById(System::String ^ id, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.PeekById : string * TimeSpan -&gt; System.Messaging.Message" Usage="messageQueue.PeekById (id, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="id"><span data-ttu-id="2e7ae-1896">ピークするメッセージの <see cref="P:System.Messaging.Message.Id" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1896">The <see cref="P:System.Messaging.Message.Id" /> of the message to peek.</span></span></param>
        <param name="timeout"><span data-ttu-id="2e7ae-1897">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1897">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1898">メッセージ ID が <paramref name="id" /> パラメーターと一致するメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1898">Peeks the message whose message identifier matches the <paramref name="id" /> parameter.</span></span> <span data-ttu-id="2e7ae-1899">メッセージがキューに出現するか、タイムアウトが発生するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1899">Waits until the message appears in the queue or a time-out occurs.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1900"><paramref name="id" /> パラメーターと一致する <see cref="P:System.Messaging.Message.Id" /> プロパティを持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1900">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the <paramref name="id" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1901">を<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>使用すると、既知のメッセージ識別子を持つメッセージをキューから削除せずに読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1901">Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier.</span></span> <span data-ttu-id="2e7ae-1902">メッセージの識別子はメッセージキューエンタープライズ全体で一意であるため、指定`id`されたパラメーターに一致するメッセージがキューに1つだけ存在します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1902">The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.</span></span> <span data-ttu-id="2e7ae-1903">現在キューにメッセージが含まれておらず、タイムアウトが発生する前に新しいメッセージが到着しなかった場合、このオーバーロードは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1903">This overload throws an exception if the queue does not currently contain the message and a new message does not arrive before the time-out occurs.</span></span>  
  
 <span data-ttu-id="2e7ae-1904">パラメーター `timeout`で、このメソッドの合計実行時間が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1904">The `timeout` parameter does not specify the total running time for this method.</span></span> <span data-ttu-id="2e7ae-1905">代わりに、キューに新しいメッセージが到着するまで待機する時間を指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1905">Rather, it specifies the time to wait for a new message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-1906">このメソッドは、新しいメッセージが到着するたびに<xref:System.Messaging.Message.Id%2A> 、新しいメッセージのを調べて、 `id`パラメーターと一致するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1906">Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter.</span></span> <span data-ttu-id="2e7ae-1907">それ以外の場合、このメソッドはタイムアウト期間を開始し、別の新しいメッセージが到着するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1907">If not, this method starts the time-out period over and waits for another new message to arrive.</span></span> <span data-ttu-id="2e7ae-1908">したがって、タイムアウト期間内に新しいメッセージが引き続き到着する場合、このメソッドは、タイムアウト期間が新しいメッセージを受信せずに期限切れになるか、または次のメッセージが到着<xref:System.Messaging.Message.Id%2A>するまで、無期限に実行を継続することができます。`id`パラメーターと一致します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1908">Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-1909">2つの追加のメソッドを使用する<xref:System.Messaging.MessageQueue.Peek%2A>と、 <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>キュー内のメッセージをピークすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1909">Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-1910">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、キュー内の最初のメッセージを返します。<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>キューに送信されたメッセージの結果として作成された、受信確認、レポート、またはアプリケーションで生成された応答メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1910">The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1911">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1911">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1912">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1912">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1913">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1913">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1914">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1914">Local computer</span></span>|<span data-ttu-id="2e7ae-1915">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1915">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1916">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1916">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1917">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1917">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1918">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1918">Remote computer</span></span>|<span data-ttu-id="2e7ae-1919">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1919">No</span></span>|  
|<span data-ttu-id="2e7ae-1920">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1920">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1921">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1921">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1922">次のコード例は、<xref:System.Messaging.MessageQueue.PeekById%28System.String%2CSystem.TimeSpan%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1922">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.PeekById%28System.String%2CSystem.TimeSpan%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#7](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#7)]
 [!code-csharp[MessageQueue2#7](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-1923"><paramref name="id" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1923">The <paramref name="id" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-1924"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1924">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-1925">指定した <paramref name="id" /> のメッセージがキューに存在せず、<paramref name="timeout" /> パラメーターで指定した時間が経過する前にキューに到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1925">The message with the specified <paramref name="id" /> does not exist in the queue and did not arrive before the period specified by the <paramref name="timeout" /> parameter expired.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1926">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1926">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="P:System.Messaging.Message.Id" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PeekByLookupId">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1927">MSMQ 3.0 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1927">Introduced in MSMQ 3.0.</span></span> <span data-ttu-id="2e7ae-1928">キュー内の特定のメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1928">Peeks at a specific message from the queue.</span></span> <span data-ttu-id="2e7ae-1929">メッセージは、参照識別子で指定することも、キューの前後の位置関係で指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1929">The message can be specified by a lookup identifier or by its position at the front or end of the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PeekByLookupId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message PeekByLookupId (long lookupId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message PeekByLookupId(int64 lookupId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.PeekByLookupId(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekByLookupId (lookupId As Long) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ PeekByLookupId(long lookupId);" />
      <MemberSignature Language="F#" Value="member this.PeekByLookupId : int64 -&gt; System.Messaging.Message" Usage="messageQueue.PeekByLookupId lookupId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lookupId" Type="System.Int64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="lookupId"><span data-ttu-id="2e7ae-1930">ピークするメッセージの <see cref="P:System.Messaging.Message.LookupId" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1930">The <see cref="P:System.Messaging.Message.LookupId" /> of the message to peek at.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1931">MSMQ 3.0 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1931">Introduced in MSMQ 3.0.</span></span> <span data-ttu-id="2e7ae-1932">非トランザクション キュー内の指定した参照識別子に一致するメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1932">Peeks at the message that matches the given lookup identifier from a non-transactional queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1933">渡された <paramref name="lookupId" /> パラメーターと一致する <see cref="P:System.Messaging.Message.LookupId" /> プロパティを持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1933">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.LookupId" /> property matches the <paramref name="lookupId" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1934">このメソッドを使用して、既知の参照識別子を持つメッセージをキューから削除せずに読み取ります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1934">Use this method to read a message with a known lookup identifier without removing it from the queue.</span></span> <span data-ttu-id="2e7ae-1935">このメソッドは、メッセージがキューに存在しない場合、すぐに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1935">This method throws an exception immediately if the message is not in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1936">メッセージの`lookupId`プロパティは、メッセージが存在するキューに対して一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.LookupId%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1936">The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-1937">指定された参照識別子を持つメッセージを読み取り、キューから削除するには<xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> 、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1937">To read a message with a specified lookup identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-1938">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1938">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1939">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1939">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1940">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1940">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1941">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1941">Local computer</span></span>|<span data-ttu-id="2e7ae-1942">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1942">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1943">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1943">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1944">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1944">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1945">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1945">Remote computer</span></span>|<span data-ttu-id="2e7ae-1946">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1946">No</span></span>|  
|<span data-ttu-id="2e7ae-1947">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1947">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1948">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1948">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="2e7ae-1949">MSMQ 3.0 がインストールされていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1949">MSMQ 3.0 is not installed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-1950">指定した <paramref name="lookupId" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1950">The message with the specified <paramref name="lookupId" /> could not be found.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1951">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1951">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.LookupId" />
        <altmember cref="Overload:System.Messaging.MessageQueue.ReceiveByLookupId" />
      </Docs>
    </Member>
    <Member MemberName="PeekByLookupId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message PeekByLookupId (System.Messaging.MessageLookupAction action, long lookupId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message PeekByLookupId(valuetype System.Messaging.MessageLookupAction action, int64 lookupId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekByLookupId (action As MessageLookupAction, lookupId As Long) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ PeekByLookupId(System::Messaging::MessageLookupAction action, long lookupId);" />
      <MemberSignature Language="F#" Value="member this.PeekByLookupId : System.Messaging.MessageLookupAction * int64 -&gt; System.Messaging.Message" Usage="messageQueue.PeekByLookupId (action, lookupId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Messaging.MessageLookupAction" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="lookupId" Type="System.Int64" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="2e7ae-1952">キュー内のメッセージを読み取る方法を指定する <see cref="T:System.Messaging.MessageLookupAction" /> のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1952">One of the <see cref="T:System.Messaging.MessageLookupAction" /> values, specifying how the message is read in the queue.</span></span> <span data-ttu-id="2e7ae-1953">次のいずれかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1953">Specify one of the following:</span></span> 
 <span data-ttu-id="2e7ae-1954"><see langword="MessageLookupAction.Current" />:<paramref name="lookupId" /> で指定されたメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1954"><see langword="MessageLookupAction.Current" />: Peeks at the message specified by <paramref name="lookupId" />.</span></span>  
  
 <span data-ttu-id="2e7ae-1955"><see langword="MessageLookupAction.Next" />:<paramref name="lookupId" /> で指定されたメッセージの次のメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1955"><see langword="MessageLookupAction.Next" />: Peeks at the message following the message specified by <paramref name="lookupId" />.</span></span>  
  
 <span data-ttu-id="2e7ae-1956"><see langword="MessageLookupAction.Previous" />:<paramref name="lookupId" /> で指定されたメッセージの前のメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1956"><see langword="MessageLookupAction.Previous" />: Peeks at the message preceding the message specified by <paramref name="lookupId" />.</span></span>  
  
 <span data-ttu-id="2e7ae-1957"><see langword="MessageLookupAction.First" />:キューの最初のメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1957"><see langword="MessageLookupAction.First" />: Peeks at the first message in the queue.</span></span> <span data-ttu-id="2e7ae-1958"><paramref name="lookupId" /> パラメーターは、0 に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1958">The <paramref name="lookupId" /> parameter must be set to 0.</span></span>  
  
 <span data-ttu-id="2e7ae-1959"><see langword="MessageLookupAction.Last" />:キューの最後のメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1959"><see langword="MessageLookupAction.Last" />: Peeks at the last message in the queue.</span></span> <span data-ttu-id="2e7ae-1960"><paramref name="lookupId" /> パラメーターは、0 に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1960">The <paramref name="lookupId" /> parameter must be set to 0.</span></span></param>
        <param name="lookupId"><span data-ttu-id="2e7ae-1961">ピークするメッセージの <see cref="P:System.Messaging.Message.LookupId" /> か、0。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1961">The <see cref="P:System.Messaging.Message.LookupId" /> of the message to peek at, or 0.</span></span> <span data-ttu-id="2e7ae-1962">キューの最初または最後のメッセージにアクセスする場合は 0 を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1962">0 is used when accessing the first or last message in the queue.</span></span></param>
        <summary><span data-ttu-id="2e7ae-1963">MSMQ 3.0 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1963">Introduced in MSMQ 3.0.</span></span> <span data-ttu-id="2e7ae-1964">キュー内の特定のメッセージをピークします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1964">Peeks at a specific message from the queue.</span></span> <span data-ttu-id="2e7ae-1965">メッセージは、参照識別子で指定することも、キューの前後の位置関係で指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1965">The message can be specified by a lookup identifier or by its position at the front or end of the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-1966">渡された <paramref name="action" /> パラメーターおよび <paramref name="lookupId" /> パラメーターで指定された <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1966">The <see cref="T:System.Messaging.Message" /> specified by the <paramref name="action" /> and <paramref name="lookupId" /> parameters passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1967">このメソッドを使用して、既知の参照識別子を持つメッセージをキューから削除せずに読み取ります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1967">Use this method to read a message with a known lookup identifier without removing it from the queue.</span></span> <span data-ttu-id="2e7ae-1968">このメソッドは、メッセージがキューに存在しない場合、すぐに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1968">This method throws an exception immediately if the message is not in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1969">メッセージの`lookupId`プロパティは、メッセージが存在するキューに対して一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.LookupId%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-1969">The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-1970">指定された id を持つメッセージを読み取り、キューから削除するには<xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> 、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1970">To read a message with a specified identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-1971">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1971">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-1972">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1972">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-1973">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1973">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-1974">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1974">Local computer</span></span>|<span data-ttu-id="2e7ae-1975">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1975">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1976">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1976">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1977">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1977">Yes</span></span>|  
|<span data-ttu-id="2e7ae-1978">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1978">Remote computer</span></span>|<span data-ttu-id="2e7ae-1979">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1979">No</span></span>|  
|<span data-ttu-id="2e7ae-1980">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1980">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-1981">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1981">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="2e7ae-1982">MSMQ 3.0 がインストールされていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1982">MSMQ 3.0 is not installed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-1983">指定した <paramref name="lookupId" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1983">The message with the specified <paramref name="lookupId" /> could not be found.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-1984">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1984">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-1985"><paramref name="action" /> パラメーターが、<see cref="T:System.Messaging.MessageLookupAction" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1985">The <paramref name="action" /> parameter is not one of the <see cref="T:System.Messaging.MessageLookupAction" /> members.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.LookupId" />
        <altmember cref="Overload:System.Messaging.MessageQueue.ReceiveByLookupId" />
      </Docs>
    </Member>
    <Member MemberName="PeekCompleted">
      <MemberSignature Language="C#" Value="public event System.Messaging.PeekCompletedEventHandler PeekCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Messaging.PeekCompletedEventHandler PeekCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Messaging.MessageQueue.PeekCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PeekCompleted As PeekCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Messaging::PeekCompletedEventHandler ^ PeekCompleted;" />
      <MemberSignature Language="F#" Value="member this.PeekCompleted : System.Messaging.PeekCompletedEventHandler " Usage="member this.PeekCompleted : System.Messaging.PeekCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_PeekCompleted")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.PeekCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-1986">キューから削除せずにメッセージを読み取ると発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1986">Occurs when a message is read without being removed from the queue.</span></span> <span data-ttu-id="2e7ae-1987">この発生は、非同期操作 <see cref="M:System.Messaging.MessageQueue.BeginPeek" /> の結果です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1987">This is a result of the asynchronous operation, <see cref="M:System.Messaging.MessageQueue.BeginPeek" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1988"><xref:System.Messaging.MessageQueue.BeginPeek%2A>は、メッセージがキューで利用可能<xref:System.Messaging.MessageQueue.PeekCompleted>な場合にイベントを発生させるために、非同期処理で使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1988"><xref:System.Messaging.MessageQueue.BeginPeek%2A> is used in asynchronous processing to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message is available in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-1989"><xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>は、の呼び出し<xref:System.Messaging.MessageQueue.BeginPeek%2A>によって開始された操作を完了し、 <xref:System.Messaging.MessageQueue.PeekCompleted>イベントが発生したときにそのメッセージをピークするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1989"><xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginPeek%2A> and peek the message when the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised.</span></span>  
  
 <span data-ttu-id="2e7ae-1990"><xref:System.Messaging.PeekCompletedEventHandler> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1990">When you create a <xref:System.Messaging.PeekCompletedEventHandler> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="2e7ae-1991">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1991">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="2e7ae-1992">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1992">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="2e7ae-1993">イベントハンドラーデリゲートの詳細については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1993">For more information about event handler delegates, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-1994">次のコード例では、という`MyPeekCompleted`名前のイベントハンドラーを<xref:System.Messaging.MessageQueue.PeekCompleted>作成し、それをイベント<xref:System.Messaging.MessageQueue.BeginPeek%2A>ハンドラーデリゲートにアタッチし、を呼び出して、パス ".\myQueue" にあるキューで非同期のピーク操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1994">The following code example creates an event handler named `MyPeekCompleted`, attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> to initiate an asynchronous peek operation on the queue that is located at the path ".\myQueue".</span></span> <span data-ttu-id="2e7ae-1995"><xref:System.Messaging.MessageQueue.PeekCompleted>イベントが発生すると、この例では、メッセージをピークし、その本文を画面に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1995">When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the example peeks the message and writes its body to the screen.</span></span> <span data-ttu-id="2e7ae-1996">この例では<xref:System.Messaging.MessageQueue.BeginPeek%2A> 、を再度呼び出して、新しい非同期ピーク操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1996">The example then calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> again to initiate a new asynchronous peek operation</span></span>  
  
 [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CPP/mqbeginpeek_noparms.cpp#1)]
 [!code-csharp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CS/mqbeginpeek_noparms.cs#1)]
 [!code-vb[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/VB/mqbeginpeek_noparms.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public void Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Sub Purge ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Purge();" />
      <MemberSignature Language="F#" Value="member this.Purge : unit -&gt; unit" Usage="messageQueue.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-1997">キューに含まれるすべてのメッセージを削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1997">Deletes all the messages contained in the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-1998">キューを削除すると、メッセージキューによってキュー変更フラグが設定<xref:System.Messaging.MessageQueue.LastModifyTime%2A>され、プロパティに影響します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1998">Purging the queue causes Message Queuing to set the queue modification flag, which affects the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property.</span></span> <span data-ttu-id="2e7ae-1999">キューから削除されたメッセージは失われます。これらのメッセージは、配信不能キューまたはジャーナルキューには送信されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-1999">Messages that are purged from the queue are lost; they are not sent to the dead-letter queue or the journal queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2000">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2000">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2001">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2001">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2002">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2002">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2003">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2003">Local computer</span></span>|<span data-ttu-id="2e7ae-2004">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2004">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2005">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2005">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2006">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2006">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2007">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2007">Remote computer</span></span>|<span data-ttu-id="2e7ae-2008">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2008">No</span></span>|  
|<span data-ttu-id="2e7ae-2009">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2009">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2010">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2010">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2011">次のコード例は、<xref:System.Messaging.MessageQueue.Purge%2A> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2011">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Purge%2A>.</span></span>  
  
 [!code-cpp[MessageQueue2#29](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#29)]
 [!code-csharp[MessageQueue2#29](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2012">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2012">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.Close" />
        <altmember cref="M:System.Messaging.MessageQueue.Refresh" />
      </Docs>
    </Member>
    <Member MemberName="QueueName">
      <MemberSignature Language="C#" Value="public string QueueName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QueueName" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.QueueName" />
      <MemberSignature Language="VB.NET" Value="Public Property QueueName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ QueueName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueueName : string with get, set" Usage="System.Messaging.MessageQueue.QueueName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_QueueName")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-2013">キューを識別する表示名を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2013">Gets or sets the friendly name that identifies the queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-2014">この <see cref="T:System.Messaging.MessageQueue" /> が参照するキューを識別する名前。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2014">The name that identifies the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />.</span></span> <span data-ttu-id="2e7ae-2015">値を <see langword="null" /> にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2015">The value cannot be <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2016">を<xref:System.Messaging.MessageQueue.QueueName%2A> <xref:System.Messaging.MessageQueue.Path%2A>と組み合わせて、キューのフレンドリ名を作成できます。 <xref:System.Messaging.MessageQueue.MachineName%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2016">You can combine the <xref:System.Messaging.MessageQueue.QueueName%2A> with the <xref:System.Messaging.MessageQueue.MachineName%2A> to create a friendly <xref:System.Messaging.MessageQueue.Path%2A> name for the queue.</span></span> <span data-ttu-id="2e7ae-2017"><xref:System.Messaging.MessageQueue.Path%2A>プロパティのフレンドリ名のバリエーションの構文は、次の表に示すように、キューの種類によって異なります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2017">The syntax for the friendly name variation of the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue, as shown in the following table.</span></span>  
  
|<span data-ttu-id="2e7ae-2018">キューの種類</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2018">Queue type</span></span>|<span data-ttu-id="2e7ae-2019">構文</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2019">Syntax</span></span>|  
|----------------|------------|  
|<span data-ttu-id="2e7ae-2020">パブリックキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2020">Public queue</span></span>|`MachineName`\\`QueueName`|  
|<span data-ttu-id="2e7ae-2021">専用キュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2021">Private queue</span></span>|`MachineName`\\`Private$`\\`QueueName`|  
|<span data-ttu-id="2e7ae-2022">ジャーナルキュー</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2022">Journal queue</span></span>|`MachineName`\\`QueueName`\\`Journal$`|  
  
 <span data-ttu-id="2e7ae-2023">"." を使用してローカルコンピューターを表します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2023">Use "." to represent the local computer.</span></span>  
  
 <span data-ttu-id="2e7ae-2024">プロパティを<xref:System.Messaging.MessageQueue.QueueName%2A>変更すると<xref:System.Messaging.MessageQueue.Path%2A> 、プロパティに影響します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2024">Changing the <xref:System.Messaging.MessageQueue.QueueName%2A> property affects the <xref:System.Messaging.MessageQueue.Path%2A> property.</span></span> <span data-ttu-id="2e7ae-2025">プロパティを<xref:System.Messaging.MessageQueue.QueueName%2A> <xref:System.Messaging.MessageQueue.Path%2A> \\設定せずにを設定した場合、プロパティはになります。 <xref:System.Messaging.MessageQueue.MachineName%2A>`QueueName`.</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2025">If you set the <xref:System.Messaging.MessageQueue.QueueName%2A> without setting the <xref:System.Messaging.MessageQueue.MachineName%2A> property, the <xref:System.Messaging.MessageQueue.Path%2A> property becomes .\\`QueueName`.</span></span> <span data-ttu-id="2e7ae-2026">それ以外の<xref:System.Messaging.MessageQueue.Path%2A>場合`MachineName`、はになり\\ `QueueName`ます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2026">Otherwise, the <xref:System.Messaging.MessageQueue.Path%2A> becomes `MachineName`\\`QueueName`.</span></span>  
  
 <span data-ttu-id="2e7ae-2027">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2027">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2028">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2028">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2029">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2029">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2030">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2030">Local computer</span></span>|<span data-ttu-id="2e7ae-2031">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2031">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2032">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2032">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2033">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2033">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2034">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2034">Remote computer</span></span>|<span data-ttu-id="2e7ae-2035">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2035">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2036">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2036">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2037">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2037">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2038">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.QueueName%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2038">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.QueueName%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#24](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2039">キュー名が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2039">The queue name is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
        <altmember cref="P:System.Messaging.MessageQueue.MachineName" />
      </Docs>
    </Member>
    <Member MemberName="ReadHandle">
      <MemberSignature Language="C#" Value="public IntPtr ReadHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ReadHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.ReadHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ReadHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadHandle : nativeint" Usage="System.Messaging.MessageQueue.ReadHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_ReadHandle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-2040">メッセージ キューからメッセージを読み取るときに使用するネイティブ ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2040">Gets the native handle used to read messages from the message queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-2041">キューからメッセージをピークおよび受信するときに使用するネイティブ キューオブジェクトへのハンドル。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2041">A handle to the native queue object that you use for peeking and receiving messages from the queue.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2042">は<xref:System.Messaging.MessageQueue.ReadHandle%2A> 、キューからメッセージをピークおよび受信するために使用されるメッセージキューオブジェクトへのネイティブ Windows ハンドルを提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2042">The <xref:System.Messaging.MessageQueue.ReadHandle%2A> provides a native Windows handle to the message queue object that is used for peeking and receiving messages from the queue.</span></span> <span data-ttu-id="2e7ae-2043">キューのパスを変更すると、ハンドルは閉じられ、新しい値で再び開かれます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2043">If you change the path of the queue, the handle is closed and reopened with a new value.</span></span>  
  
 <span data-ttu-id="2e7ae-2044">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2044">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2045">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2045">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2046">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2046">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2047">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2047">Local computer</span></span>|<span data-ttu-id="2e7ae-2048">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2048">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2049">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2049">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2050">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2050">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2051">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2051">Remote computer</span></span>|<span data-ttu-id="2e7ae-2052">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2052">No</span></span>|  
|<span data-ttu-id="2e7ae-2053">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2053">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2054">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2054">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2055">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2055">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.CanRead" />
        <altmember cref="P:System.Messaging.MessageQueue.WriteHandle" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <threadsafe><span data-ttu-id="2e7ae-2056">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2056">The method is not thread safe.</span></span></threadsafe>
        <summary><span data-ttu-id="2e7ae-2057">キューにある最初のメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2057">Receives the first message in the queue, removing it from the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Receive();" />
      <MemberSignature Language="F#" Value="member this.Receive : unit -&gt; System.Messaging.Message" Usage="messageQueue.Receive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-2058"><see cref="T:System.Messaging.MessageQueue" /> で参照されるキューで利用できる最初のメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2058">Receives the first message available in the queue referenced by the <see cref="T:System.Messaging.MessageQueue" />.</span></span> <span data-ttu-id="2e7ae-2059">この呼び出しは同期呼び出しであるため、メッセージが利用可能になるまで、現在のスレッドの実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2059">This call is synchronous, and blocks the current thread of execution until a message is available.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2060">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2060">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2061">このオーバーロードを使用して、キューからメッセージを受信するか、キュー内にメッセージが存在するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2061">Use this overload to receive a message from a queue, or wait until there are messages in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2062"><xref:System.Messaging.MessageQueue.Receive%2A>メソッドを使用すると、メッセージを同期的に読み取ることができ、それによってキューからメッセージが削除されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2062">The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue.</span></span> <span data-ttu-id="2e7ae-2063">後続のへ<xref:System.Messaging.MessageQueue.Receive%2A>の呼び出しでは、キューにあるメッセージ、または新しい優先順位の高いメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2063">Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.</span></span>  
  
 <span data-ttu-id="2e7ae-2064">キューの最初のメッセージをキューから削除せずに読み取るには、 <xref:System.Messaging.MessageQueue.Peek%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2064">To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span> <span data-ttu-id="2e7ae-2065">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2065">The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2066">メッセージがキューに<xref:System.Messaging.MessageQueue.Receive%2A>到着するのを待機している間に、現在のスレッドがブロックされてもかまわない場合は、の呼び出しを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2066">Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2067">この<xref:System.Messaging.MessageQueue.Receive%2A>メソッドのオーバーロードではタイムアウトが無制限であることが指定されているため、アプリケーションは無期限に待機する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2067">Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely.</span></span> <span data-ttu-id="2e7ae-2068">メッセージを待たずにアプリケーションの処理を続行する場合は、非同期メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>の使用を検討してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2068">If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2069">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2069">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2070">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2070">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2071">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2071">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2072">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2072">Local computer</span></span>|<span data-ttu-id="2e7ae-2073">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2073">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2074">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2074">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2075">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2075">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2076">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2076">Remote computer</span></span>|<span data-ttu-id="2e7ae-2077">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2077">No</span></span>|  
|<span data-ttu-id="2e7ae-2078">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2078">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2079">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2079">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2080">次のコード例では、キューからメッセージを受信し、そのメッセージに関する情報を画面に出力します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2080">The following code example receives a message from a queue and outputs information about that message to the screen.</span></span>  
  
 [!code-cpp[MessageQueue.Receive_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Receive_noparms/CPP/mqreceive_noparms.cpp#1)]
 [!code-csharp[MessageQueue.Receive_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Receive_noparms/CS/mqreceive_noparms.cs#1)]
 [!code-vb[MessageQueue.Receive_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Receive_noparms/VB/mqreceive_noparms.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2081">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2081">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Receive (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Receive(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Receive(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageQueue.Receive transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction"><span data-ttu-id="2e7ae-2082"><see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2082">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2083"><see cref="T:System.Messaging.MessageQueue" /> で参照されるトランザクション キューで利用できる最初のメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2083">Receives the first message available in the transactional queue referenced by the <see cref="T:System.Messaging.MessageQueue" />.</span></span> <span data-ttu-id="2e7ae-2084">この呼び出しは同期呼び出しであるため、メッセージが利用可能になるまで、現在のスレッドの実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2084">This call is synchronous, and blocks the current thread of execution until a message is available.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2085">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2085">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2086">このオーバーロードを使用して、 `transaction`パラメーターで定義された内部トランザクションコンテキストを使用してトランザクションキューからメッセージを受信するか、キュー内にメッセージが存在するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2086">Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, or wait until there are messages in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2087"><xref:System.Messaging.MessageQueue.Receive%2A>メソッドを使用すると、メッセージを同期的に読み取ることができ、それによってキューからメッセージが削除されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2087">The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue.</span></span> <span data-ttu-id="2e7ae-2088">後続のへ<xref:System.Messaging.MessageQueue.Receive%2A>の呼び出しでは、キュー内の次のメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2088">Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2089">このメソッドはトランザクションキューで呼び出されるため、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2089">Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2090">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2090">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2091">キューの最初のメッセージをキューから削除せずに読み取るには、 <xref:System.Messaging.MessageQueue.Peek%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2091">To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span> <span data-ttu-id="2e7ae-2092">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2092">The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2093">へ<xref:System.Messaging.MessageQueue.Peek%2A>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2093">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>.</span></span> <span data-ttu-id="2e7ae-2094">は<xref:System.Messaging.MessageQueue.Peek%2A>キュー内のメッセージを削除しないため、の<xref:System.Messaging.MessageQueueTransaction.Abort%2A>呼び出しによってロールバックすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2094">Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2095">メッセージがキューに<xref:System.Messaging.MessageQueue.Receive%2A>到着するのを待機している間に、現在のスレッドがブロックされてもかまわない場合は、の呼び出しを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2095">Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2096">この<xref:System.Messaging.MessageQueue.Receive%2A>メソッドのオーバーロードではタイムアウトが無制限であることが指定されているため、アプリケーションは無期限に待機する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2096">Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely.</span></span> <span data-ttu-id="2e7ae-2097">メッセージを待たずにアプリケーションの処理を続行する場合は、非同期メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>の使用を検討してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2097">If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2098">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2098">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2099">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2099">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2100">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2100">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2101">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2101">Local computer</span></span>|<span data-ttu-id="2e7ae-2102">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2102">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2103">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2103">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2104">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2104">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2105">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2105">Remote computer</span></span>|<span data-ttu-id="2e7ae-2106">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2106">No</span></span>|  
|<span data-ttu-id="2e7ae-2107">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2107">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2108">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2108">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2109">次のコード例では、ローカルコンピューター上のトランザクションキューに接続し、メッセージをキューに送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2109">The following code example connects to a transactional queue on the local computer and sends a message to the queue.</span></span> <span data-ttu-id="2e7ae-2110">次に、注文を含むメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2110">It then receives the message that contains an order.</span></span> <span data-ttu-id="2e7ae-2111">トランザクション以外のキューが検出されると、例外がスローされ、トランザクションがロールバックされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2111">If it encounters a non-transactional queue, it will throw and exception and rollback the transaction.</span></span>  
  
 [!code-cpp[MessageQueue.Receive_transaction#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Receive_transaction/CPP/mqreceive_transaction.cpp#1)]
 [!code-csharp[MessageQueue.Receive_transaction#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Receive_transaction/CS/mqreceive_transaction.cs#1)]
 [!code-vb[MessageQueue.Receive_transaction#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Receive_transaction/VB/mqreceive_transaction.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2112">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2112">An error occurred when accessing a Message Queuing method.</span></span>  
  
 <span data-ttu-id="2e7ae-2113">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2113">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2114">キューが非トランザクション キューです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2114">The queue is non-transactional.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-2115">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2115">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Receive (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Receive(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Receive(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageQueue.Receive transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType"><span data-ttu-id="2e7ae-2116">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2116">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2117"><see cref="T:System.Messaging.MessageQueue" /> で参照されるキューで利用できる最初のメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2117">Receives the first message available in the queue referenced by the <see cref="T:System.Messaging.MessageQueue" />.</span></span> <span data-ttu-id="2e7ae-2118">この呼び出しは同期呼び出しであるため、メッセージが利用可能になるまで、現在のスレッドの実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2118">This call is synchronous, and blocks the current thread of execution until a message is available.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2119">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2119">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2120">このオーバーロードを使用して、 `transactionType`パラメーターで定義されたトランザクションコンテキストを使用してキューからメッセージを受信するか、キュー内にメッセージが存在するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2120">Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, or wait until there are messages in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2121">メッセージ`Automatic`の受信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2121">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="2e7ae-2122">メッセージ`Single`を1つの内部トランザクションとして受信するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2122">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="2e7ae-2123">トランザクションコンテキストの`None`外部にあるトランザクションキューからメッセージを受信するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2123">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="2e7ae-2124"><xref:System.Messaging.MessageQueue.Receive%2A>メソッドを使用すると、メッセージを同期的に読み取ることができ、それによってキューからメッセージが削除されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2124">The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue.</span></span> <span data-ttu-id="2e7ae-2125">後続のへ<xref:System.Messaging.MessageQueue.Receive%2A>の呼び出しでは、キュー内の次のメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2125">Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2126">トランザクションキューからメッセージを受信するためにこのメソッドが呼び出された場合、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2126">If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2127">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2127">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2128">キューの最初のメッセージをキューから削除せずに読み取るには、 <xref:System.Messaging.MessageQueue.Peek%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2128">To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span> <span data-ttu-id="2e7ae-2129">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2129">The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2130">へ<xref:System.Messaging.MessageQueue.Peek%2A>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2130">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>.</span></span> <span data-ttu-id="2e7ae-2131">は<xref:System.Messaging.MessageQueue.Peek%2A>キュー内のメッセージを削除しないため、の<xref:System.Messaging.MessageQueueTransaction.Abort%2A>呼び出しによってロールバックすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2131">Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2132">メッセージがキューに<xref:System.Messaging.MessageQueue.Receive%2A>到着するのを待機している間に、現在のスレッドがブロックされてもかまわない場合は、の呼び出しを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2132">Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2133">この<xref:System.Messaging.MessageQueue.Receive%2A>メソッドのオーバーロードではタイムアウトが無制限であることが指定されているため、アプリケーションは無期限に待機する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2133">Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely.</span></span> <span data-ttu-id="2e7ae-2134">メッセージを待たずにアプリケーションの処理を続行する場合は、非同期メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>の使用を検討してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2134">If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2135">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2135">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2136">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2136">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2137">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2137">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2138">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2138">Local computer</span></span>|<span data-ttu-id="2e7ae-2139">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2139">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2140">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2140">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2141">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2141">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2142">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2142">Remote computer</span></span>|<span data-ttu-id="2e7ae-2143">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2143">No</span></span>|  
|<span data-ttu-id="2e7ae-2144">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2144">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2145">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2145">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2146">次のコード例は、<xref:System.Messaging.MessageQueue.Receive%28System.Messaging.MessageQueueTransactionType%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2146">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Receive%28System.Messaging.MessageQueueTransactionType%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#9](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#9)]
 [!code-csharp[MessageQueue2#9](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2147">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2147">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-2148"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2148">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-2149">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2149">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Receive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Receive : TimeSpan -&gt; System.Messaging.Message" Usage="messageQueue.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-2150">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2150">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2151"><see cref="T:System.Messaging.MessageQueue" /> が参照するキューで利用できる最初のメッセージを受信します。キューでメッセージが利用可能になるか、タイムアウトの時間が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2151">Receives the first message available in the queue referenced by the <see cref="T:System.Messaging.MessageQueue" /> and waits until either a message is available in the queue, or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2152">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2152">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2153">このオーバーロードを使用して、キューからメッセージを受信します。キューにメッセージがない場合は、指定した時間が経過した後で制御が戻ります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2153">Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2154"><xref:System.Messaging.MessageQueue.Receive%2A>メソッドを使用すると、メッセージを同期的に読み取り、キューから削除できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2154">The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, removing it from the queue.</span></span> <span data-ttu-id="2e7ae-2155">後続のへ<xref:System.Messaging.MessageQueue.Receive%2A>の呼び出しでは、キューにあるメッセージ、または新しい優先順位の高いメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2155">Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.</span></span>  
  
 <span data-ttu-id="2e7ae-2156">キューの最初のメッセージをキューから削除せずに読み取るには、 <xref:System.Messaging.MessageQueue.Peek%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2156">To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span> <span data-ttu-id="2e7ae-2157">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2157">The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2158">メッセージがキューに<xref:System.Messaging.MessageQueue.Receive%2A>到着するのを待機している間に、現在のスレッドがブロックされてもかまわない場合は、の呼び出しを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2158">Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2159">スレッドは、指定された期間、または<xref:System.Messaging.MessageQueue.InfiniteTimeout> `timeout`パラメーターの値を指定した場合は無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2159">The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter.</span></span> <span data-ttu-id="2e7ae-2160">メッセージを待たずにアプリケーションの処理を続行する場合は、非同期メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>の使用を検討してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2160">If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2161">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2161">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2162">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2162">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2163">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2163">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2164">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2164">Local computer</span></span>|<span data-ttu-id="2e7ae-2165">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2165">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2166">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2166">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2167">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2167">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2168">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2168">Remote computer</span></span>|<span data-ttu-id="2e7ae-2169">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2169">No</span></span>|  
|<span data-ttu-id="2e7ae-2170">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2170">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2171">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2171">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2172">次のコード例では、キューからメッセージを受信し、そのメッセージに関する情報を画面に出力します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2172">The following code example receives a message from a queue and outputs information about that message to the screen.</span></span> <span data-ttu-id="2e7ae-2173">この例では、キューにメッセージが到着するのを待機している間、最大5秒間、実行を一時停止します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2173">The example pauses execution for up to five seconds while waiting for a message to arrive in the queue.</span></span>  
  
 [!code-cpp[MessageQueue.Receive_timeout#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Receive_timeout/CPP/mqreceive_timeout.cpp#1)]
 [!code-csharp[MessageQueue.Receive_timeout#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Receive_timeout/CS/mqreceive_timeout.cs#1)]
 [!code-vb[MessageQueue.Receive_timeout#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Receive_timeout/VB/mqreceive_timeout.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2174"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2174">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2175">タイムアウトが経過する前に、キューにメッセージが到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2175">A message did not arrive in the queue before the time-out expired.</span></span>  
  
 <span data-ttu-id="2e7ae-2176">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2176">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2177">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2177">An error occurred when accessing a Message Queuing method</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-2178">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2178">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Receive(valuetype System.TimeSpan timeout, class System.Messaging.Cursor cursor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Receive(TimeSpan timeout, System::Messaging::Cursor ^ cursor);" />
      <MemberSignature Language="F#" Value="member this.Receive : TimeSpan * System.Messaging.Cursor -&gt; System.Messaging.Message" Usage="messageQueue.Receive (timeout, cursor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cursor" Type="System.Messaging.Cursor" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-2179">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2179">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <param name="cursor"><span data-ttu-id="2e7ae-2180">メッセージ キュー内の特定の位置を維持する <see cref="T:System.Messaging.Cursor" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2180">A <see cref="T:System.Messaging.Cursor" /> that maintains a specific position in the message queue.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2181">指定したカーソルを使用して、キューの現在のメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2181">Receives the current message in the queue, using a specified cursor.</span></span> <span data-ttu-id="2e7ae-2182">利用可能なメッセージがない場合、このメソッドは、メッセージが利用可能になるまで、またはタイムアウトが発生するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2182">If no message is available, this method waits until either a message is available, or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2183">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2183">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2184"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2184">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2185">タイムアウトが経過する前に、キューにメッセージが到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2185">A message did not arrive in the queue before the time-out expired.</span></span>  
  
 <span data-ttu-id="2e7ae-2186">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2186">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2187">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2187">An error occurred when accessing a Message Queuing method</span></span>  
  
 <span data-ttu-id="2e7ae-2188">このオーバーロードを使用して、キューからメッセージを受信します。キューにメッセージがない場合は、指定した時間が経過した後で制御が戻ります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2188">Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-2189">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2189">The method is not thread safe.</span></span></threadsafe>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Receive(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Receive(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.Receive : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageQueue.Receive (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-2190">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2190">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <param name="transaction"><span data-ttu-id="2e7ae-2191"><see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2191">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2192"><see cref="T:System.Messaging.MessageQueue" /> が参照するトランザクション キューで利用できる最初のメッセージを受信します。キューでメッセージが利用可能になるか、タイムアウトの時間が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2192">Receives the first message available in the transactional queue referenced by the <see cref="T:System.Messaging.MessageQueue" /> and waits until either a message is available in the queue, or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2193">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2193">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2194">このオーバーロードを使用して、 `transaction`パラメーターで定義された内部トランザクションコンテキストを使用してトランザクションキューからメッセージを受信し、キューにメッセージがない場合は指定した時間内にを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2194">Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, and return within a specified period of time if there are no messages in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2195"><xref:System.Messaging.MessageQueue.Receive%2A>メソッドを使用すると、メッセージを同期的に読み取ることができ、それによってキューからメッセージが削除されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2195">The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue.</span></span> <span data-ttu-id="2e7ae-2196">後続のへ<xref:System.Messaging.MessageQueue.Receive%2A>の呼び出しでは、キュー内の次のメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2196">Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2197">このメソッドはトランザクションキューで呼び出されるため、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2197">Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2198">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2198">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2199">キューの最初のメッセージをキューから削除せずに読み取るには、 <xref:System.Messaging.MessageQueue.Peek%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2199">To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span> <span data-ttu-id="2e7ae-2200">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2200">The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2201">へ<xref:System.Messaging.MessageQueue.Peek%2A>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2201">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>.</span></span> <span data-ttu-id="2e7ae-2202">は<xref:System.Messaging.MessageQueue.Peek%2A>キュー内のメッセージを削除しないため、の<xref:System.Messaging.MessageQueueTransaction.Abort%2A>呼び出しによってロールバックすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2202">Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2203">メッセージがキューに<xref:System.Messaging.MessageQueue.Receive%2A>到着するのを待機している間に、現在のスレッドがブロックされてもかまわない場合は、の呼び出しを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2203">Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2204">スレッドは、指定された期間、または<xref:System.Messaging.MessageQueue.InfiniteTimeout> `timeout`パラメーターの値を指定した場合は無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2204">The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter.</span></span> <span data-ttu-id="2e7ae-2205">メッセージを待たずにアプリケーションの処理を続行する場合は、非同期メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>の使用を検討してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2205">If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2206">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2206">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2207">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2207">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2208">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2208">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2209">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2209">Local computer</span></span>|<span data-ttu-id="2e7ae-2210">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2210">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2211">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2211">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2212">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2212">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2213">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2213">Remote computer</span></span>|<span data-ttu-id="2e7ae-2214">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2214">No</span></span>|  
|<span data-ttu-id="2e7ae-2215">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2215">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2216">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2216">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2217">次のコード例は、このメソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2217">The following code example demonstrates the use of this method.</span></span>  
  
 [!code-cpp[MessageQueue.Receive_TimeoutTransaction#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Receive_TimeoutTransaction/CPP/mqreceive_timeouttransaction.cpp#1)]
 [!code-csharp[MessageQueue.Receive_TimeoutTransaction#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Receive_TimeoutTransaction/CS/mqreceive_timeouttransaction.cs#1)]
 [!code-vb[MessageQueue.Receive_TimeoutTransaction#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Receive_TimeoutTransaction/VB/mqreceive_timeouttransaction.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2218"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2218">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2219">タイムアウトが経過する前に、キューにメッセージが到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2219">A message did not arrive in the queue before the time-out expired.</span></span>  
  
 <span data-ttu-id="2e7ae-2220">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2220">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2221">キューが非トランザクション キューです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2221">The queue is non-transactional.</span></span>  
  
 <span data-ttu-id="2e7ae-2222">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2222">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2223">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2223">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-2224">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2224">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Receive(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Receive(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.Receive : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageQueue.Receive (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-2225">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2225">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <param name="transactionType"><span data-ttu-id="2e7ae-2226">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2226">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2227"><see cref="T:System.Messaging.MessageQueue" /> で参照されるキューで利用できる最初のメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2227">Receives the first message available in the queue referenced by the <see cref="T:System.Messaging.MessageQueue" />.</span></span> <span data-ttu-id="2e7ae-2228">この呼び出しは同期的に実行され、メッセージがキューで使用できるようになるか、タイムアウトが経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2228">This call is synchronous, and waits until either a message is available in the queue, or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2229">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2229">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2230">このオーバーロードを使用して、 `transactionType`パラメーターで定義されたトランザクションコンテキストを使用してキューからメッセージを受信し、キューにメッセージが存在しない場合は、指定された時間を返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2230">Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, and return in a specified period of time if there are no messages in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2231">メッセージ`Automatic`の受信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2231">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="2e7ae-2232">メッセージ`Single`を1つの内部トランザクションとして受信するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2232">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="2e7ae-2233">トランザクションコンテキストの`None`外部にあるトランザクションキューからメッセージを受信するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2233">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="2e7ae-2234"><xref:System.Messaging.MessageQueue.Receive%2A>メソッドを使用すると、メッセージを同期的に読み取ることができ、それによってキューからメッセージが削除されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2234">The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue.</span></span> <span data-ttu-id="2e7ae-2235">後続のへ<xref:System.Messaging.MessageQueue.Receive%2A>の呼び出しでは、キュー内の次のメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2235">Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2236">トランザクションキューからメッセージを受信するためにこのメソッドが呼び出された場合、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2236">If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2237">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2237">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2238">キューの最初のメッセージをキューから削除せずに読み取るには、 <xref:System.Messaging.MessageQueue.Peek%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2238">To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span> <span data-ttu-id="2e7ae-2239">メソッド<xref:System.Messaging.MessageQueue.Peek%2A>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2239">The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2240">へ<xref:System.Messaging.MessageQueue.Peek%2A>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2240">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>.</span></span> <span data-ttu-id="2e7ae-2241">は<xref:System.Messaging.MessageQueue.Peek%2A>キュー内のメッセージを削除しないため、の<xref:System.Messaging.MessageQueueTransaction.Abort%2A>呼び出しによってロールバックすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2241">Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2242">メッセージがキューに<xref:System.Messaging.MessageQueue.Receive%2A>到着するのを待機している間に、現在のスレッドがブロックされてもかまわない場合は、の呼び出しを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2242">Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2243">スレッドは、指定された期間、または<xref:System.Messaging.MessageQueue.InfiniteTimeout> `timeout`パラメーターの値を指定した場合は無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2243">The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter.</span></span> <span data-ttu-id="2e7ae-2244">メッセージを待たずにアプリケーションの処理を続行する場合は、非同期メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>の使用を検討してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2244">If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2245">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2245">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2246">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2246">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2247">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2247">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2248">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2248">Local computer</span></span>|<span data-ttu-id="2e7ae-2249">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2249">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2250">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2250">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2251">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2251">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2252">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2252">Remote computer</span></span>|<span data-ttu-id="2e7ae-2253">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2253">No</span></span>|  
|<span data-ttu-id="2e7ae-2254">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2254">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2255">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2255">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2256">次のコード例は、このメソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2256">The following code example demonstrates the use of this method.</span></span>  
  
 [!code-cpp[MessageQueue2#8](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#8)]
 [!code-csharp[MessageQueue2#8](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2257"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2257">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-2258"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2258">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2259">タイムアウトが経過する前に、キューにメッセージが到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2259">A message did not arrive in the queue before the time-out expired.</span></span>  
  
 <span data-ttu-id="2e7ae-2260">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2260">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2261">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2261">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-2262">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2262">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Receive(valuetype System.TimeSpan timeout, class System.Messaging.Cursor cursor, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Receive(TimeSpan timeout, System::Messaging::Cursor ^ cursor, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.Receive : TimeSpan * System.Messaging.Cursor * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageQueue.Receive (timeout, cursor, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cursor" Type="System.Messaging.Cursor" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-2263">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2263">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <param name="cursor"><span data-ttu-id="2e7ae-2264">メッセージ キュー内の特定の位置を維持する <see cref="T:System.Messaging.Cursor" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2264">A <see cref="T:System.Messaging.Cursor" /> that maintains a specific position in the message queue.</span></span></param>
        <param name="transaction"><span data-ttu-id="2e7ae-2265"><see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2265">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2266">指定したカーソルを使用して、キューの現在のメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2266">Receives the current message in the queue, using a specified cursor.</span></span> <span data-ttu-id="2e7ae-2267">利用可能なメッセージがない場合、このメソッドは、メッセージが利用可能になるまで、またはタイムアウトが発生するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2267">If no message is available, this method waits until either a message is available, or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2268">キューのメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2268">A <see cref="T:System.Messaging.Message" /> that references a message in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2269">このオーバーロードを使用して、 `transaction`パラメーターで定義された内部トランザクションコンテキストを使用してトランザクションキューからメッセージを受信し、キューにメッセージがない場合は指定した時間内にを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2269">Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, and return within a specified period of time if there are no messages in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2270"><xref:System.Messaging.MessageQueue.Receive%2A>メソッドを使用すると、メッセージを同期的に読み取ることができ、それによってキューからメッセージが削除されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2270">The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue.</span></span> <span data-ttu-id="2e7ae-2271">後続のを<xref:System.Messaging.MessageQueue.Receive%2A>呼び出すと、キュー内の次のメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2271">Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2272">このメソッドはトランザクションキューで呼び出されるため、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2272">Because this method is called on a transactional queue, the message that is received is returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2273">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2273">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2274">キューからメッセージを削除せずに、キュー内のメッセージを読み取るに<xref:System.Messaging.MessageQueue.Peek%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2274">To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span> <span data-ttu-id="2e7ae-2275">へ<xref:System.Messaging.MessageQueue.Peek%2A>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2275">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>.</span></span> <span data-ttu-id="2e7ae-2276">は<xref:System.Messaging.MessageQueue.Peek%2A>キュー内のメッセージを削除しないため、の<xref:System.Messaging.MessageQueueTransaction.Abort%2A>呼び出しによってロールバックすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2276">Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2277">メッセージがキューに<xref:System.Messaging.MessageQueue.Receive%2A>到着するのを待機している間に、現在のスレッドがブロックされてもかまわない場合は、の呼び出しを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2277">Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2278">スレッドは、指定された期間、または<xref:System.Messaging.MessageQueue.InfiniteTimeout> `timeout`パラメーターの値を指定した場合は無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2278">The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter.</span></span> <span data-ttu-id="2e7ae-2279">メッセージを待たずにアプリケーションの処理を続行する場合は、非同期メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>の使用を検討してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2279">If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2280">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2280">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2281">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2281">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2282">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2282">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2283">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2283">Local computer</span></span>|<span data-ttu-id="2e7ae-2284">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2284">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2285">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2285">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2286">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2286">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2287">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2287">Remote computer</span></span>|<span data-ttu-id="2e7ae-2288">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2288">No</span></span>|  
|<span data-ttu-id="2e7ae-2289">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2289">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2290">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2290">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2291"><paramref name="cursor" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2291">The <paramref name="cursor" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2e7ae-2292">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2292">-or-</span></span> 
<span data-ttu-id="2e7ae-2293"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2293">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2294"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2294">The value specified for the <paramref name="timeout" /> parameter is not valid.</span></span> <span data-ttu-id="2e7ae-2295"><paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> より小さい値か、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> より大きい値である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2295">Possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2296">タイムアウトが経過する前に、キューにメッセージが到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2296">A message did not arrive in the queue before the time-out expired.</span></span>  
  
 <span data-ttu-id="2e7ae-2297">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2297">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2298">キューが非トランザクション キューです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2298">The queue is non-transactional.</span></span>  
  
 <span data-ttu-id="2e7ae-2299">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2299">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2300">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2300">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-2301">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2301">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message Receive(valuetype System.TimeSpan timeout, class System.Messaging.Cursor cursor, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ Receive(TimeSpan timeout, System::Messaging::Cursor ^ cursor, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.Receive : TimeSpan * System.Messaging.Cursor * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageQueue.Receive (timeout, cursor, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cursor" Type="System.Messaging.Cursor" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="2e7ae-2302">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2302">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <param name="cursor"><span data-ttu-id="2e7ae-2303">メッセージ キュー内の特定の位置を維持する <see cref="T:System.Messaging.Cursor" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2303">A <see cref="T:System.Messaging.Cursor" /> that maintains a specific position in the message queue.</span></span></param>
        <param name="transactionType"><span data-ttu-id="2e7ae-2304">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2304">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values that describes the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2305">指定したカーソルを使用して、キューの現在のメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2305">Receives the current message in the queue, using a specified cursor.</span></span> <span data-ttu-id="2e7ae-2306">利用可能なメッセージがない場合、このメソッドは、メッセージが利用可能になるまで、またはタイムアウトが発生するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2306">If no message is available, this method waits until either a message is available, or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2307">キューのメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2307">A <see cref="T:System.Messaging.Message" /> that references a message in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2308">このオーバーロードを使用して、 `transactionType`パラメーターで定義されたトランザクションコンテキストを使用してキューからメッセージを受信し、キューにメッセージが存在しない場合は、指定された時間を返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2308">Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, and return in a specified period of time if there are no messages in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2309">メッセージ`Automatic`の受信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2309">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="2e7ae-2310">メッセージ`Single`を1つの内部トランザクションとして受信するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2310">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="2e7ae-2311">トランザクションコンテキストの`None`外部にあるトランザクションキューからメッセージを受信するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2311">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="2e7ae-2312"><xref:System.Messaging.MessageQueue.Receive%2A>メソッドを使用すると、メッセージを同期的に読み取ることができ、それによってキューからメッセージが削除されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2312">The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue.</span></span> <span data-ttu-id="2e7ae-2313">後続のを<xref:System.Messaging.MessageQueue.Receive%2A>呼び出すと、キュー内の次のメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2313">Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2314">トランザクションキューからメッセージを受信するためにこのメソッドが呼び出された場合、トランザクションが中止されると、受信されたメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2314">If this method is called to receive a message from a transactional queue, the message that is received is returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2315">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2315">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2316">キューからメッセージを削除せずに、キュー内のメッセージを読み取るに<xref:System.Messaging.MessageQueue.Peek%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2316">To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.</span></span> <span data-ttu-id="2e7ae-2317">へ<xref:System.Messaging.MessageQueue.Peek%2A>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2317">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>.</span></span> <span data-ttu-id="2e7ae-2318">は<xref:System.Messaging.MessageQueue.Peek%2A>キュー内のメッセージを削除しないため、の<xref:System.Messaging.MessageQueueTransaction.Abort%2A>呼び出しによってロールバックすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2318">Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2319">メッセージがキューに<xref:System.Messaging.MessageQueue.Receive%2A>到着するのを待機している間に、現在のスレッドがブロックされてもかまわない場合は、の呼び出しを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2319">Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2320">スレッドは、指定された期間、または<xref:System.Messaging.MessageQueue.InfiniteTimeout> `timeout`パラメーターの値を指定した場合は無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2320">The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter.</span></span> <span data-ttu-id="2e7ae-2321">メッセージを待たずにアプリケーションの処理を続行する場合は、非同期メソッド<xref:System.Messaging.MessageQueue.BeginReceive%2A>の使用を検討してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2321">If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="2e7ae-2322">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2322">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2323">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2323">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2324">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2324">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2325">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2325">Local computer</span></span>|<span data-ttu-id="2e7ae-2326">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2326">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2327">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2327">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2328">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2328">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2329">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2329">Remote computer</span></span>|<span data-ttu-id="2e7ae-2330">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2330">No</span></span>|  
|<span data-ttu-id="2e7ae-2331">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2331">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2332">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2332">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2333"><paramref name="cursor" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2333">The <paramref name="cursor" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2334"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2334">The value specified for the <paramref name="timeout" /> parameter is not valid.</span></span> <span data-ttu-id="2e7ae-2335"><paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> より小さい値か、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> より大きい値である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2335">Possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-2336"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2336">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2337">タイムアウトが経過する前に、キューにメッセージが到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2337">A message did not arrive in the queue before the time-out expired.</span></span>  
  
 <span data-ttu-id="2e7ae-2338">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2338">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2339">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2339">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <threadsafe><span data-ttu-id="2e7ae-2340">メソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2340">The method is not thread safe.</span></span></threadsafe>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveByCorrelationId">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-2341">指定した相関 ID と一致するメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2341">Receives a message that matches a given correlation identifier.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveByCorrelationId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveByCorrelationId (string correlationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveByCorrelationId(string correlationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveByCorrelationId (correlationId As String) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveByCorrelationId(System::String ^ correlationId);" />
      <MemberSignature Language="F#" Value="member this.ReceiveByCorrelationId : string -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveByCorrelationId correlationId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correlationId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="correlationId"><span data-ttu-id="2e7ae-2342">受信するメッセージの <see cref="P:System.Messaging.Message.CorrelationId" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2342">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2343">指定した相関 ID と一致するメッセージを (非トランザクション キューから) 受信します。現在、指定した相関 ID と一致するメッセージがキューに存在しない場合は、すぐに例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2343">Receives the message that matches the given correlation identifier (from a non-transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2344">渡された <paramref name="correlationId" /> パラメーターと一致する <see cref="P:System.Messaging.Message.CorrelationId" /> を持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2344">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the <paramref name="correlationId" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2345">このメソッドは、によって参照される非トランザクション<xref:System.Messaging.MessageQueue>キュー内で、 <xref:System.Messaging.Message.CorrelationId%2A>指定した`correlationId`パラメーターと一致するメッセージを検索します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2345">This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-2346">パラメーターに`correlationID`一致するメッセージが見つからない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2346">If no message is found that matches the `correlationID` parameter, an exception is thrown.</span></span> <span data-ttu-id="2e7ae-2347">それ以外の場合、メッセージはキューから削除され、アプリケーションに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2347">Otherwise, the message is removed from the queue and returned to the application.</span></span>  
  
 <span data-ttu-id="2e7ae-2348"><xref:System.Messaging.Message.CorrelationId%2A>プロパティは、キューに送信されたメッセージを、関連付けられている応答、レポート、または受信確認メッセージに関連付けるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2348">The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.</span></span>  
  
 <span data-ttu-id="2e7ae-2349">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2349">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2350">メソッド<xref:System.Messaging.MessageQueue.Receive%2A>は、キュー内の最初のメッセージを返します<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> 。メソッドは、一意の識別子を指定することによってメッセージを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2350">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method retrieves a message by specifying its unique identifier.</span></span>  
  
 <span data-ttu-id="2e7ae-2351">指定された相関 id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2351">To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2352">メソッド<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2352">The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2353">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2353">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2354">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2354">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2355">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2355">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2356">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2356">Local computer</span></span>|<span data-ttu-id="2e7ae-2357">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2357">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2358">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2358">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2359">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2359">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2360">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2360">Remote computer</span></span>|<span data-ttu-id="2e7ae-2361">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2361">No</span></span>|  
|<span data-ttu-id="2e7ae-2362">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2362">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2363">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2363">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2364">次のコード例では、キューとの間で注文を含むメッセージを送受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2364">The following code example sends and receives a message that contains an order to and from a queue.</span></span> <span data-ttu-id="2e7ae-2365">これは、元のメッセージがキューに到達するか、キューから取得されるときに肯定受信確認を要求します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2365">It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.</span></span>  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2366"><paramref name="correlationId" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2366">The <paramref name="correlationId" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-2367">指定した <paramref name="correlationId" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2367">The message with the specified <paramref name="correlationId" /> could not be found.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2368">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2368">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveByCorrelationId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveByCorrelationId (string correlationId, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveByCorrelationId(string correlationId, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveByCorrelationId (correlationId As String, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveByCorrelationId(System::String ^ correlationId, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.ReceiveByCorrelationId : string * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveByCorrelationId (correlationId, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correlationId" Type="System.String" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="correlationId"><span data-ttu-id="2e7ae-2369">受信するメッセージの <see cref="P:System.Messaging.Message.CorrelationId" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2369">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</span></span></param>
        <param name="transaction"><span data-ttu-id="2e7ae-2370"><see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2370">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2371">指定した相関 ID と一致するメッセージを (トランザクション キューから) 受信します。現在、指定した相関 ID と一致するメッセージがキューに存在しない場合は、すぐに例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2371">Receives the message that matches the given correlation identifier (from a transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2372">渡された <paramref name="correlationId" /> パラメーターと一致する <see cref="P:System.Messaging.Message.CorrelationId" /> を持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2372">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the <paramref name="correlationId" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2373">このメソッドは、によって参照される<xref:System.Messaging.MessageQueue>トランザクションキュー内で<xref:System.Messaging.Message.CorrelationId%2A> 、指定し`correlationId`たパラメーターと一致するメッセージを検索します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2373">This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-2374">パラメーターに`correlationID`一致するメッセージが見つからない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2374">If no message is found that matches the `correlationID` parameter, an exception is thrown.</span></span> <span data-ttu-id="2e7ae-2375">それ以外の場合、メッセージはキューから削除され、 `transaction`パラメーターによって定義された内部トランザクションコンテキストを使用してアプリケーションに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2375">Otherwise, the message is removed from the queue and returned to the application using the internal transaction context defined by the `transaction` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2376">このメソッドはトランザクションキューで呼び出されるため、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2376">Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2377">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2377">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2378"><xref:System.Messaging.Message.CorrelationId%2A>プロパティは、キューに送信されたメッセージを、関連付けられている応答、レポート、または受信確認メッセージに関連付けるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2378">The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.</span></span>  
  
 <span data-ttu-id="2e7ae-2379">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2379">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2380">メソッドは、キュー内の最初のメッセージを返します<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> 。メソッドは、一意の識別子を指定することによってメッセージを取得するために使用されます。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2380">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.</span></span>  
  
 <span data-ttu-id="2e7ae-2381">指定された相関 id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2381">To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2382">メソッド<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2382">The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2383">へ<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2383">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-2384">は<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>キュー内のメッセージを削除しないため、トランザクションが中止された場合、ロールバックは行われません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2384">Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.</span></span>  
  
 <span data-ttu-id="2e7ae-2385">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2385">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2386">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2386">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2387">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2387">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2388">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2388">Local computer</span></span>|<span data-ttu-id="2e7ae-2389">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2389">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2390">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2390">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2391">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2391">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2392">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2392">Remote computer</span></span>|<span data-ttu-id="2e7ae-2393">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2393">No</span></span>|  
|<span data-ttu-id="2e7ae-2394">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2394">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2395">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2395">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2396">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.Messaging.MessageQueueTransaction%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2396">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.Messaging.MessageQueueTransaction%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#14](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#14)]
 [!code-csharp[MessageQueue2#14](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2397"><paramref name="correlationId" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2397">The <paramref name="correlationId" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2e7ae-2398">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2398">-or-</span></span> 
<span data-ttu-id="2e7ae-2399"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2399">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-2400">指定した <paramref name="correlationId" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2400">The message with the specified <paramref name="correlationId" /> could not be found.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2401">キューが非トランザクション キューです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2401">The queue is non-transactional.</span></span>  
  
 <span data-ttu-id="2e7ae-2402">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2402">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2403">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2403">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveByCorrelationId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveByCorrelationId (string correlationId, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveByCorrelationId(string correlationId, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveByCorrelationId (correlationId As String, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveByCorrelationId(System::String ^ correlationId, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.ReceiveByCorrelationId : string * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveByCorrelationId (correlationId, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correlationId" Type="System.String" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="correlationId"><span data-ttu-id="2e7ae-2404">受信するメッセージの <see cref="P:System.Messaging.Message.CorrelationId" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2404">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</span></span></param>
        <param name="transactionType"><span data-ttu-id="2e7ae-2405">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2405">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2406">指定した相関 ID と一致するメッセージを受信します。現在、指定した相関 ID と一致するメッセージがキューに存在しない場合は、すぐに例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2406">Receives the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2407">渡された <paramref name="correlationId" /> パラメーターと一致する <see cref="P:System.Messaging.Message.CorrelationId" /> を持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2407">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the <paramref name="correlationId" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2408">このメソッドは、によって参照さ<xref:System.Messaging.MessageQueue>れるキュー内で<xref:System.Messaging.Message.CorrelationId%2A> 、指定し`correlationId`たパラメーターと一致するメッセージを検索します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2408">This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-2409">パラメーターに`correlationID`一致するメッセージが見つからない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2409">If no message is found that matches the `correlationID` parameter, an exception is thrown.</span></span> <span data-ttu-id="2e7ae-2410">それ以外の場合、メッセージはキューから削除され、 `transactionType`パラメーターで定義されたトランザクションコンテキストを使用してアプリケーションに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2410">Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2411">メッセージ`Automatic`の受信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2411">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="2e7ae-2412">メッセージ`Single`を1つの内部トランザクションとして受信するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2412">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="2e7ae-2413">トランザクションコンテキストの`None`外部にあるトランザクションキューからメッセージを受信するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2413">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="2e7ae-2414">トランザクションキューからメッセージを受信するためにこのメソッドが呼び出された場合、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2414">If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2415">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2415">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2416"><xref:System.Messaging.Message.CorrelationId%2A>プロパティは、キューに送信されたメッセージを、関連付けられている応答、レポート、または受信確認メッセージに関連付けるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2416">The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.</span></span>  
  
 <span data-ttu-id="2e7ae-2417">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2417">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2418">メソッドは、キュー内の最初のメッセージを返します<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> 。メソッドは、一意の識別子を指定することによってメッセージを取得するために使用されます。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2418">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.</span></span>  
  
 <span data-ttu-id="2e7ae-2419">指定された相関 id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2419">To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2420">メソッド<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2420">The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2421">へ<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2421">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-2422">は<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>キュー内のメッセージを削除しないため、トランザクションが中止された場合、ロールバックは行われません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2422">Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.</span></span>  
  
 <span data-ttu-id="2e7ae-2423">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2423">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2424">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2424">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2425">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2425">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2426">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2426">Local computer</span></span>|<span data-ttu-id="2e7ae-2427">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2427">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2428">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2428">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2429">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2429">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2430">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2430">Remote computer</span></span>|<span data-ttu-id="2e7ae-2431">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2431">No</span></span>|  
|<span data-ttu-id="2e7ae-2432">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2432">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2433">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2433">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2434">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.Messaging.MessageQueueTransactionType%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2434">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.Messaging.MessageQueueTransactionType%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#11](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#11)]
 [!code-csharp[MessageQueue2#11](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2435"><paramref name="correlationId" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2435">The <paramref name="correlationId" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-2436">指定した <paramref name="correlationId" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2436">The message with the specified <paramref name="correlationId" /> could not be found.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-2437"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2437">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2438">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2438">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveByCorrelationId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveByCorrelationId(string correlationId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveByCorrelationId (correlationId As String, timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveByCorrelationId(System::String ^ correlationId, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.ReceiveByCorrelationId : string * TimeSpan -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveByCorrelationId (correlationId, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correlationId" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="correlationId"><span data-ttu-id="2e7ae-2439">受信するメッセージの <see cref="P:System.Messaging.Message.CorrelationId" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2439">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</span></span></param>
        <param name="timeout"><span data-ttu-id="2e7ae-2440">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2440">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2441">指定した相関 ID と一致するメッセージを (非トランザクション キューから) 受信します。指定した相関 ID のメッセージがキューで利用可能になるか、タイムアウトの時間が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2441">Receives the message that matches the given correlation identifier (from a non-transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2442">渡された <paramref name="correlationId" /> パラメーターと一致する <see cref="P:System.Messaging.Message.CorrelationId" /> を持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2442">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the <paramref name="correlationId" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2443">このメソッドは、によって参照される非トランザクション<xref:System.Messaging.MessageQueue>キュー内で、 <xref:System.Messaging.Message.CorrelationId%2A>指定した`correlationId`パラメーターと一致するメッセージを検索します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2443">This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-2444">`correlationId`パラメーターによって指定された相関 id を持つメッセージがキューにある場合、このメソッドは直ちにを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2444">This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue.</span></span> <span data-ttu-id="2e7ae-2445">それ以外の場合、メソッドは、新しいメッセージが到着するまで、指定された期間待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2445">Otherwise, the method waits the given period of time for a new message to arrive.</span></span> <span data-ttu-id="2e7ae-2446">タイムアウトの期限が切れる前に新しいメッセージが到着しなかった場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2446">If a new message does not arrive before the time-out expires, an exception is thrown.</span></span>  
  
 <span data-ttu-id="2e7ae-2447">パラメーター `timeout`で、このメソッドの合計実行時間が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2447">The `timeout` parameter does not specify the total running time for this method.</span></span> <span data-ttu-id="2e7ae-2448">代わりに、キューに新しいメッセージが到着するまで待機する時間を指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2448">Rather, it specifies the time to wait for a new message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2449">このメソッドは、新しいメッセージが到着するたびに<xref:System.Messaging.Message.CorrelationId%2A> 、新しいメッセージのを調べて、 `correlationId`パラメーターと一致するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2449">Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-2450">それ以外の場合、このメソッドはタイムアウト期間を開始し、別の新しいメッセージが到着するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2450">If not, this method starts the time-out period over and waits for another new message to arrive.</span></span> <span data-ttu-id="2e7ae-2451">したがって、タイムアウト期間内に新しいメッセージが引き続き到着する場合、このメソッドは、タイムアウト期間が新しいメッセージを受信せずに期限切れになるか、または次のメッセージが到着<xref:System.Messaging.Message.CorrelationId%2A>するまで、無期限に実行を継続することができます。`correlationId`パラメーターと一致します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2451">Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2452"><xref:System.Messaging.Message.CorrelationId%2A>プロパティは、キューに送信されたメッセージを、関連付けられている応答、レポート、または受信確認メッセージに関連付けるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2452">The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.</span></span>  
  
 <span data-ttu-id="2e7ae-2453">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2453">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2454">メソッドは、キュー内の最初のメッセージを返します<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> 。メソッドは、一意の識別子を指定することによってメッセージを取得するために使用されます。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2454">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.</span></span>  
  
 <span data-ttu-id="2e7ae-2455">指定された相関 id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2455">To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2456">メソッド<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2456">The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2457">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2457">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2458">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2458">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2459">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2459">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2460">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2460">Local computer</span></span>|<span data-ttu-id="2e7ae-2461">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2461">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2462">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2462">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2463">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2463">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2464">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2464">Remote computer</span></span>|<span data-ttu-id="2e7ae-2465">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2465">No</span></span>|  
|<span data-ttu-id="2e7ae-2466">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2466">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2467">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2467">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2468">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.TimeSpan%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2468">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.TimeSpan%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#10](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#10)]
 [!code-csharp[MessageQueue2#10](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2469"><paramref name="correlationId" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2469">The <paramref name="correlationId" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2470"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2470">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2471">指定した <paramref name="correlationId" /> を持つメッセージがキューに存在せず、タイムアウトが経過する前にキューに到達することもありませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2471">The message with the specified <paramref name="correlationId" /> does not exist in the queue and did not arrive before the time-out expired.</span></span>  
  
<span data-ttu-id="2e7ae-2472">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2472">-or-</span></span> 
<span data-ttu-id="2e7ae-2473">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2473">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveByCorrelationId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveByCorrelationId(string correlationId, valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveByCorrelationId (correlationId As String, timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveByCorrelationId(System::String ^ correlationId, TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.ReceiveByCorrelationId : string * TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveByCorrelationId (correlationId, timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correlationId" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="correlationId"><span data-ttu-id="2e7ae-2474">受信するメッセージの <see cref="P:System.Messaging.Message.CorrelationId" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2474">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</span></span></param>
        <param name="timeout"><span data-ttu-id="2e7ae-2475">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2475">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <param name="transaction"><span data-ttu-id="2e7ae-2476"><see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2476">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2477">指定した相関 ID と一致するメッセージを (トランザクション キューから) 受信します。指定した相関 ID のメッセージがキューで利用可能になるか、タイムアウトの時間が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2477">Receives the message that matches the given correlation identifier (from a transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2478">渡された <paramref name="correlationId" /> パラメーターと一致する <see cref="P:System.Messaging.Message.CorrelationId" /> を持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2478">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the <paramref name="correlationId" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2479">このメソッドは、によって参照される<xref:System.Messaging.MessageQueue>トランザクションキュー内で<xref:System.Messaging.Message.CorrelationId%2A> 、指定し`correlationId`たパラメーターと一致するメッセージを検索します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2479">This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-2480">パラメーターで指定さ`correlationId`れた相関 id を持つメッセージが、 `transaction`パラメーターで定義された内部トランザクションコンテキストを使用してキューにある場合、このメソッドはすぐに制御を返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2480">This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using the internal transaction context defined by the `transaction` parameter.</span></span> <span data-ttu-id="2e7ae-2481">それ以外の場合、メソッドは、新しいメッセージが到着するまで、指定された期間待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2481">Otherwise, the method waits the given period of time for a new message to arrive.</span></span> <span data-ttu-id="2e7ae-2482">タイムアウトの期限が切れる前に新しいメッセージが到着しなかった場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2482">If a new message does not arrive before the time-out expires, an exception is thrown.</span></span>  
  
 <span data-ttu-id="2e7ae-2483">パラメーター `timeout`で、このメソッドの合計実行時間が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2483">The `timeout` parameter does not specify the total running time for this method.</span></span> <span data-ttu-id="2e7ae-2484">代わりに、キューに新しいメッセージが到着するまで待機する時間を指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2484">Rather, it specifies the time to wait for a new message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2485">このメソッドは、新しいメッセージが到着するたびに<xref:System.Messaging.Message.CorrelationId%2A> 、新しいメッセージのを調べて、 `correlationId`パラメーターと一致するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2485">Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-2486">それ以外の場合、このメソッドはタイムアウト期間を開始し、別の新しいメッセージが到着するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2486">If not, this method starts the time-out period over and waits for another new message to arrive.</span></span> <span data-ttu-id="2e7ae-2487">したがって、タイムアウト期間内に新しいメッセージが引き続き到着する場合、このメソッドは、タイムアウト期間が新しいメッセージを受信せずに期限切れになるか、または次のメッセージが到着<xref:System.Messaging.Message.CorrelationId%2A>するまで、無期限に実行を継続することができます。`correlationId`パラメーターと一致します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2487">Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2488">このメソッドはトランザクションキューで呼び出されるため、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2488">Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2489">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2489">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2490"><xref:System.Messaging.Message.CorrelationId%2A>プロパティは、キューに送信されたメッセージを、関連付けられている応答、レポート、または受信確認メッセージに関連付けるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2490">The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.</span></span>  
  
 <span data-ttu-id="2e7ae-2491">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2491">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2492">メソッドは、キュー内の最初のメッセージを返します<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> 。メソッドは、一意の識別子を指定することによってメッセージを取得するために使用されます。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2492">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.</span></span>  
  
 <span data-ttu-id="2e7ae-2493">指定された相関 id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2493">To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2494">メソッド<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2494">The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2495">へ<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2495">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-2496">は<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>キュー内のメッセージを削除しないため、トランザクションが中止された場合、ロールバックは行われません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2496">Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.</span></span>  
  
 <span data-ttu-id="2e7ae-2497">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2497">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2498">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2498">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2499">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2499">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2500">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2500">Local computer</span></span>|<span data-ttu-id="2e7ae-2501">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2501">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2502">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2502">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2503">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2503">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2504">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2504">Remote computer</span></span>|<span data-ttu-id="2e7ae-2505">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2505">No</span></span>|  
|<span data-ttu-id="2e7ae-2506">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2506">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2507">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2507">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2508">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransaction%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2508">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransaction%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#13](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#13)]
 [!code-csharp[MessageQueue2#13](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2509"><paramref name="correlationId" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2509">The <paramref name="correlationId" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2e7ae-2510">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2510">-or-</span></span> 
<span data-ttu-id="2e7ae-2511"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2511">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2512"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2512">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2513">指定した <paramref name="correlationId" /> を持つメッセージがキューに存在せず、タイムアウトが経過する前にキューに到達することもありませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2513">The message with the specified <paramref name="correlationId" /> does not exist in the queue and did not arrive before the time-out expired.</span></span>  
  
<span data-ttu-id="2e7ae-2514">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2514">-or-</span></span> 
<span data-ttu-id="2e7ae-2515">キューが非トランザクション キューです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2515">The queue is non-transactional.</span></span>  
  
<span data-ttu-id="2e7ae-2516">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2516">-or-</span></span> 
<span data-ttu-id="2e7ae-2517">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2517">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveByCorrelationId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveByCorrelationId(string correlationId, valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveByCorrelationId (correlationId As String, timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveByCorrelationId(System::String ^ correlationId, TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.ReceiveByCorrelationId : string * TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveByCorrelationId (correlationId, timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correlationId" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="correlationId"><span data-ttu-id="2e7ae-2518">受信するメッセージの <see cref="P:System.Messaging.Message.CorrelationId" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2518">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</span></span></param>
        <param name="timeout"><span data-ttu-id="2e7ae-2519">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2519">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <param name="transactionType"><span data-ttu-id="2e7ae-2520">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2520">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2521">指定した相関 ID と一致するメッセージを受信します。指定した相関 ID のメッセージがキューで利用可能になるか、タイムアウトの時間が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2521">Receives the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2522">渡された <paramref name="correlationId" /> パラメーターと一致する <see cref="P:System.Messaging.Message.CorrelationId" /> を持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2522">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the <paramref name="correlationId" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2523">このメソッドは、によって参照さ<xref:System.Messaging.MessageQueue>れるキュー内で<xref:System.Messaging.Message.CorrelationId%2A> 、指定し`correlationId`たパラメーターと一致するメッセージを検索します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2523">This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-2524">パラメーターで指定さ`correlationId`れた相関 id を持つメッセージがキューにある場合、このメソッドは、 `transactionType`パラメーターで定義されたトランザクションコンテキストを使用して、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2524">This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="2e7ae-2525">それ以外の場合、メソッドは、新しいメッセージが到着するまで、指定された期間待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2525">Otherwise, the method waits the given period of time for a new message to arrive.</span></span> <span data-ttu-id="2e7ae-2526">タイムアウトの期限が切れる前に新しいメッセージが到着しなかった場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2526">If a new message does not arrive before the time-out expires, an exception is thrown.</span></span>  
  
 <span data-ttu-id="2e7ae-2527">パラメーター `timeout`で、このメソッドの合計実行時間が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2527">The `timeout` parameter does not specify the total running time for this method.</span></span> <span data-ttu-id="2e7ae-2528">代わりに、キューに新しいメッセージが到着するまで待機する時間を指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2528">Rather, it specifies the time to wait for a new message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2529">このメソッドは、新しいメッセージが到着するたびに<xref:System.Messaging.Message.CorrelationId%2A> 、新しいメッセージのを調べて、 `correlationId`パラメーターと一致するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2529">Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-2530">それ以外の場合、このメソッドはタイムアウト期間を開始し、別の新しいメッセージが到着するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2530">If not, this method starts the time-out period over and waits for another new message to arrive.</span></span> <span data-ttu-id="2e7ae-2531">したがって、タイムアウト期間内に新しいメッセージが引き続き到着する場合、このメソッドは、タイムアウト期間が新しいメッセージを受信せずに期限切れになるか、または次のメッセージが到着<xref:System.Messaging.Message.CorrelationId%2A>するまで、無期限に実行を継続することができます。`correlationId`パラメーターと一致します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2531">Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.</span></span> <span data-ttu-id="2e7ae-2532">メッセージ`Automatic`の受信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2532">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="2e7ae-2533">メッセージ`Single`を1つの内部トランザクションとして受信するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2533">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="2e7ae-2534">トランザクションコンテキストの`None`外部にあるトランザクションキューからメッセージを受信するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2534">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="2e7ae-2535">トランザクションキューからメッセージを受信するためにこのメソッドが呼び出された場合、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2535">If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2536">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2536">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2537"><xref:System.Messaging.Message.CorrelationId%2A>プロパティは、キューに送信されたメッセージを、関連付けられている応答、レポート、または受信確認メッセージに関連付けるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2537">The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.</span></span>  
  
 <span data-ttu-id="2e7ae-2538">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2538">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2539">メソッドは、キュー内の最初のメッセージを返します<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> 。メソッドは、一意の識別子を指定することによってメッセージを取得するために使用されます。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2539">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.</span></span>  
  
 <span data-ttu-id="2e7ae-2540">指定された相関 id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2540">To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2541">メソッド<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2541">The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2542">へ<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2542">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-2543">は<xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>キュー内のメッセージを削除しないため、トランザクションが中止された場合、ロールバックは行われません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2543">Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.</span></span>  
  
 <span data-ttu-id="2e7ae-2544">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2544">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2545">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2545">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2546">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2546">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2547">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2547">Local computer</span></span>|<span data-ttu-id="2e7ae-2548">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2548">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2549">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2549">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2550">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2550">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2551">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2551">Remote computer</span></span>|<span data-ttu-id="2e7ae-2552">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2552">No</span></span>|  
|<span data-ttu-id="2e7ae-2553">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2553">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2554">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2554">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2555">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransactionType%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2555">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransactionType%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#12](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#12)]
 [!code-csharp[MessageQueue2#12](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2556"><paramref name="correlationId" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2556">The <paramref name="correlationId" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-2557">指定した <paramref name="correlationId" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2557">The message with the specified <paramref name="correlationId" /> could not be found.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2558"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2558">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-2559"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2559">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2560">指定した <paramref name="correlationId" /> を持つメッセージがキューに存在せず、タイムアウトが経過する前にキューに到達することもありませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2560">The message with the specified <paramref name="correlationId" /> does not exist in the queue and did not arrive before the time-out expired.</span></span>  
  
<span data-ttu-id="2e7ae-2561">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2561">-or-</span></span> 
<span data-ttu-id="2e7ae-2562">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2562">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveById">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-2563">指定した ID と一致するメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2563">Receives the message that matches the given identifier, removing it from the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveById">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveById (id As String) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.ReceiveById : string -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"><span data-ttu-id="2e7ae-2564">受信するメッセージの <see cref="P:System.Messaging.Message.Id" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2564">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2565">指定した ID と一致するメッセージを非トランザクション キューから受信します。現在、指定した ID と一致するメッセージがキューに存在しない場合は、すぐに例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2565">Receives the message that matches the given identifier from a non-transactional queue and immediately raises an exception if no message with the specified identifier currently exists in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2566">渡された <paramref name="id" /> パラメーターと一致する <see cref="P:System.Messaging.Message.Id" /> プロパティを持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2566">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the <paramref name="id" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2567">このメソッドを使用して、既知の識別子を持つメッセージを読み取り、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2567">Use this method to read a message with a known identifier and remove it from the queue.</span></span> <span data-ttu-id="2e7ae-2568">このメソッドは、メッセージがキューに存在しない場合、すぐに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2568">This method throws an exception immediately if the message is not in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2569">メッセージの`id`プロパティは、メッセージキューエンタープライズ全体で一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.Id%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2569">The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2570">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2570">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2571">メソッドは、キュー <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29>内の最初のメッセージを返します。また、メソッドを使用して、キューに送信されたメッセージの結果として作成された受信確認メッセージ、レポートメッセージ、またはアプリケーションで生成された応答メッセージを取得します。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2571">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2572">指定された id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2572">To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2573">メソッド<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2573">The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2574">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2574">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2575">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2575">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2576">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2576">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2577">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2577">Local computer</span></span>|<span data-ttu-id="2e7ae-2578">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2578">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2579">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2579">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2580">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2580">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2581">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2581">Remote computer</span></span>|<span data-ttu-id="2e7ae-2582">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2582">No</span></span>|  
|<span data-ttu-id="2e7ae-2583">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2583">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2584">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2584">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2585">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2585">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#16](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#16)]
 [!code-csharp[MessageQueue2#16](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2586"><paramref name="id" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2586">The <paramref name="id" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-2587">指定した <paramref name="id" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2587">The message with the specified <paramref name="id" /> could not be found.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2588">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2588">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveById">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveById (string id, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveById(string id, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveById (id As String, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveById(System::String ^ id, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.ReceiveById : string * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveById (id, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="id"><span data-ttu-id="2e7ae-2589">受信するメッセージの <see cref="P:System.Messaging.Message.Id" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2589">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</span></span></param>
        <param name="transaction"><span data-ttu-id="2e7ae-2590"><see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2590">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2591">指定した ID と一致するメッセージを (トランザクション キューから) 受信します。現在、指定した ID と一致するメッセージがキューに存在しない場合は、すぐに例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2591">Receives the message that matches the given identifier (from a transactional queue) and immediately raises an exception if no message with the specified identifier currently exists in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2592">渡された <paramref name="id" /> パラメーターと一致する <see cref="P:System.Messaging.Message.Id" /> プロパティを持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2592">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the <paramref name="id" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2593">このメソッドを使用して、既知の識別子を持つメッセージを読み取り、 `transaction`パラメーターで定義された内部トランザクションコンテキストを使用してキューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2593">Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter.</span></span> <span data-ttu-id="2e7ae-2594">このメソッドは、メッセージがキューに存在しない場合、直ちに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2594">This method throws an exception immediately if the message is not in the queue</span></span>  
  
 <span data-ttu-id="2e7ae-2595">メッセージの`id`プロパティは、メッセージキューエンタープライズ全体で一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.Id%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2595">The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2596">このメソッドはトランザクションキューで呼び出されるため、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2596">Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2597">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2597">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2598">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2598">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2599">メソッドは、キュー <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29>内の最初のメッセージを返します。また、メソッドを使用して、キューに送信されたメッセージの結果として作成された受信確認メッセージ、レポートメッセージ、またはアプリケーションで生成された応答メッセージを取得します。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2599">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2600">指定された id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2600">To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2601">メソッド<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2601">The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2602">へ<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2602">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-2603">は<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>キュー内のメッセージを削除しないため、トランザクションが中止された場合、ロールバックは行われません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2603">Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.</span></span>  
  
 <span data-ttu-id="2e7ae-2604">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2604">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2605">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2605">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2606">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2606">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2607">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2607">Local computer</span></span>|<span data-ttu-id="2e7ae-2608">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2608">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2609">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2609">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2610">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2610">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2611">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2611">Remote computer</span></span>|<span data-ttu-id="2e7ae-2612">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2612">No</span></span>|  
|<span data-ttu-id="2e7ae-2613">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2613">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2614">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2614">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2615">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.Messaging.MessageQueueTransaction%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2615">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.Messaging.MessageQueueTransaction%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#17](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#17)]
 [!code-csharp[MessageQueue2#17](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2616"><paramref name="id" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2616">The <paramref name="id" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2e7ae-2617">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2617">-or-</span></span> 
<span data-ttu-id="2e7ae-2618"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2618">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-2619">指定した <paramref name="id" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2619">The message with the specified <paramref name="id" /> could not be found.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2620">キューが非トランザクション キューです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2620">The queue is non-transactional.</span></span>  
  
 <span data-ttu-id="2e7ae-2621">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2621">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2622">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2622">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveById">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveById (string id, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveById(string id, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveById (id As String, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveById(System::String ^ id, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.ReceiveById : string * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveById (id, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="id"><span data-ttu-id="2e7ae-2623">受信するメッセージの <see cref="P:System.Messaging.Message.Id" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2623">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</span></span></param>
        <param name="transactionType"><span data-ttu-id="2e7ae-2624">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2624">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2625">指定した ID と一致するメッセージを受信します。現在、指定した ID と一致するメッセージがキューに存在しない場合は、すぐに例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2625">Receives the message that matches the given identifier and immediately raises an exception if no message with the specified identifier currently exists in the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2626">渡された <paramref name="id" /> パラメーターと一致する <see cref="P:System.Messaging.Message.Id" /> プロパティを持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2626">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the <paramref name="id" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2627">このメソッドを使用して、既知の識別子を持つメッセージを読み取り、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2627">Use this method to read a message with a known identifier and remove it from the queue.</span></span> <span data-ttu-id="2e7ae-2628">このメソッドは、メッセージがキューに存在しない場合、すぐに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2628">This method throws an exception immediately if the message is not in the queue.</span></span> <span data-ttu-id="2e7ae-2629">それ以外の場合、メッセージはキューから削除され、 `transactionType`パラメーターで定義されたトランザクションコンテキストを使用してアプリケーションに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2629">Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2630">メッセージ`Automatic`の受信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2630">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="2e7ae-2631">メッセージ`Single`を1つの内部トランザクションとして受信するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2631">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="2e7ae-2632">トランザクションコンテキストの`None`外部にあるトランザクションキューからメッセージを受信するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2632">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="2e7ae-2633">メッセージの`id`プロパティは、メッセージキューエンタープライズ全体で一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.Id%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2633">The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.</span></span> <span data-ttu-id="2e7ae-2634">指定した識別子を持つメッセージが、この<xref:System.Messaging.MessageQueue>インスタンスに関連付けられているキュー以外のキューにある場合、メッセージは見つかりません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2634">If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found.</span></span>  
  
 <span data-ttu-id="2e7ae-2635">トランザクションキューからメッセージを受信するためにこのメソッドが呼び出された場合、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2635">If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2636">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2636">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2637">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2637">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2638">メソッドは、キュー <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29>内の最初のメッセージを返します。また、メソッドを使用して、キューに送信されたメッセージの結果として作成された受信確認メッセージ、レポートメッセージ、またはアプリケーションで生成された応答メッセージを取得します。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2638">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2639">指定された id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2639">To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2640">メソッド<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2640">The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2641">へ<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2641">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-2642">は<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>キュー内のメッセージを削除しないため、トランザクションが中止された場合、ロールバックは行われません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2642">Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.</span></span>  
  
 <span data-ttu-id="2e7ae-2643">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2643">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2644">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2644">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2645">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2645">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2646">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2646">Local computer</span></span>|<span data-ttu-id="2e7ae-2647">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2647">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2648">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2648">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2649">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2649">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2650">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2650">Remote computer</span></span>|<span data-ttu-id="2e7ae-2651">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2651">No</span></span>|  
|<span data-ttu-id="2e7ae-2652">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2652">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2653">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2653">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2654">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.Messaging.MessageQueueTransactionType%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2654">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.Messaging.MessageQueueTransactionType%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#15](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#15)]
 [!code-csharp[MessageQueue2#15](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2655"><paramref name="id" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2655">The <paramref name="id" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-2656">指定した <paramref name="id" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2656">The message with the specified <paramref name="id" /> could not be found.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-2657"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2657">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2658">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2658">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveById">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveById (string id, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveById(string id, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveById (id As String, timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveById(System::String ^ id, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.ReceiveById : string * TimeSpan -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveById (id, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="id"><span data-ttu-id="2e7ae-2659">受信するメッセージの <see cref="P:System.Messaging.Message.Id" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2659">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</span></span></param>
        <param name="timeout"><span data-ttu-id="2e7ae-2660">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2660">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2661">指定した ID と一致するメッセージを (非トランザクション キューから) 受信します。指定した ID のメッセージがキューで利用可能になるか、タイムアウトの時間が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2661">Receives the message that matches the given identifier (from a non-transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2662">渡された <paramref name="id" /> パラメーターと一致する <see cref="P:System.Messaging.Message.Id" /> プロパティを持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2662">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the <paramref name="id" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2663">このメソッドを使用して、既知の識別子を持つメッセージを読み取り、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2663">Use this method to read a message with a known identifier and remove it from the queue.</span></span> <span data-ttu-id="2e7ae-2664">このメソッドは、 `id`パラメーターによって指定された識別子を持つメッセージがキューにある場合に、直ちにを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2664">This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue.</span></span> <span data-ttu-id="2e7ae-2665">それ以外の場合、メソッドは、新しいメッセージが到着するまで、指定された期間待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2665">Otherwise, the method waits the given period of time for a new message to arrive.</span></span> <span data-ttu-id="2e7ae-2666">タイムアウトの期限が切れる前に新しいメッセージが到着しなかった場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2666">If a new message does not arrive before the time-out expires, an exception is thrown.</span></span>  
  
 <span data-ttu-id="2e7ae-2667">パラメーター `timeout`で、このメソッドの合計実行時間が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2667">The `timeout` parameter does not specify the total running time for this method.</span></span> <span data-ttu-id="2e7ae-2668">代わりに、キューに新しいメッセージが到着するまで待機する時間を指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2668">Rather, it specifies the time to wait for a new message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2669">このメソッドは、新しいメッセージが到着するたびに<xref:System.Messaging.Message.Id%2A> 、新しいメッセージのを調べて、 `id`パラメーターと一致するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2669">Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter.</span></span> <span data-ttu-id="2e7ae-2670">それ以外の場合、このメソッドはタイムアウト期間を開始し、別の新しいメッセージが到着するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2670">If not, this method starts the time-out period over and waits for another new message to arrive.</span></span> <span data-ttu-id="2e7ae-2671">したがって、タイムアウト期間内に新しいメッセージが引き続き到着する場合、このメソッドは、タイムアウト期間が新しいメッセージを受信せずに期限切れになるか、または次のメッセージが到着<xref:System.Messaging.Message.Id%2A>するまで、無期限に実行を継続することができます。`id`パラメーターと一致します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2671">Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2672">メッセージの`id`プロパティは、メッセージキューエンタープライズ全体で一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.Id%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2672">The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2673">パラメーターで指定さ<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29>れたタイムアウト期間内に新しいメッセージがキューに到着するまで、現在のスレッドがブロックされてもかまわない場合は、のこのオーバーロードを使用します。 `timeout`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2673">Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.</span></span> <span data-ttu-id="2e7ae-2674">このスレッドは、少なくとも指定した期間、または<xref:System.Messaging.MessageQueue.InfiniteTimeout> `timeout`パラメーターの値を指定した場合は無期限にブロックされます。または、 `timeout`で指定されたタイムアウト期間内に新しいメッセージがキューに到着し続ける場合は、無期限にブロックされます。引き.</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2674">The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2675">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2675">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2676">メソッドは、キュー <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29>内の最初のメッセージを返します。また、メソッドを使用して、キューに送信されたメッセージの結果として作成された受信確認メッセージ、レポートメッセージ、またはアプリケーションで生成された応答メッセージを取得します。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2676">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2677">指定された id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2677">To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2678">メソッド<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2678">The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2679">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2679">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2680">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2680">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2681">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2681">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2682">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2682">Local computer</span></span>|<span data-ttu-id="2e7ae-2683">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2683">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2684">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2684">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2685">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2685">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2686">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2686">Remote computer</span></span>|<span data-ttu-id="2e7ae-2687">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2687">No</span></span>|  
|<span data-ttu-id="2e7ae-2688">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2688">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2689">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2689">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2690">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.TimeSpan%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2690">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.TimeSpan%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#20](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#20)]
 [!code-csharp[MessageQueue2#20](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2691"><paramref name="id" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2691">The <paramref name="id" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2692"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2692">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2693">タイムアウトが経過する前に、指定された <paramref name="id" /> を持つメッセージがキューに到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2693">A message with the specified <paramref name="id" /> did not arrive in the queue before the time-out expired.</span></span>  
  
<span data-ttu-id="2e7ae-2694">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2694">-or-</span></span> 
<span data-ttu-id="2e7ae-2695">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2695">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveById">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveById (string id, TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveById(string id, valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveById (id As String, timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveById(System::String ^ id, TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.ReceiveById : string * TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveById (id, timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="id"><span data-ttu-id="2e7ae-2696">受信するメッセージの <see cref="P:System.Messaging.Message.Id" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2696">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</span></span></param>
        <param name="timeout"><span data-ttu-id="2e7ae-2697">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2697">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <param name="transaction"><span data-ttu-id="2e7ae-2698"><see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2698">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2699">指定した ID と一致するメッセージを (トランザクション キューから) 受信します。指定した ID のメッセージがキューで利用可能になるか、タイムアウトの時間が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2699">Receives the message that matches the given identifier (from a transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2700">渡された <paramref name="id" /> パラメーターと一致する <see cref="P:System.Messaging.Message.Id" /> プロパティを持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2700">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the <paramref name="id" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2701">このメソッドを使用して、既知の識別子を持つメッセージを読み取り、 `transaction`パラメーターで定義された内部トランザクションコンテキストを使用してキューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2701">Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter.</span></span> <span data-ttu-id="2e7ae-2702">このメソッドは、 `id`パラメーターによって指定された識別子を持つメッセージがキューにある場合に、直ちにを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2702">This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue.</span></span> <span data-ttu-id="2e7ae-2703">それ以外の場合、メソッドは、新しいメッセージが到着するまで、指定された期間待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2703">Otherwise, the method waits the given period of time for a new message to arrive.</span></span> <span data-ttu-id="2e7ae-2704">タイムアウトの期限が切れる前に新しいメッセージが到着しなかった場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2704">If a new message does not arrive before the time-out expires, an exception is thrown.</span></span>  
  
 <span data-ttu-id="2e7ae-2705">パラメーター `timeout`で、このメソッドの合計実行時間が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2705">The `timeout` parameter does not specify the total running time for this method.</span></span> <span data-ttu-id="2e7ae-2706">代わりに、キューに新しいメッセージが到着するまで待機する時間を指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2706">Rather, it specifies the time to wait for a new message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2707">このメソッドは、新しいメッセージが到着するたびに<xref:System.Messaging.Message.Id%2A> 、新しいメッセージのを調べて、 `id`パラメーターと一致するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2707">Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter.</span></span> <span data-ttu-id="2e7ae-2708">それ以外の場合、このメソッドはタイムアウト期間を開始し、別の新しいメッセージが到着するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2708">If not, this method starts the time-out period over and waits for another new message to arrive.</span></span> <span data-ttu-id="2e7ae-2709">したがって、タイムアウト期間内に新しいメッセージが引き続き到着する場合、このメソッドは、タイムアウト期間が新しいメッセージを受信せずに期限切れになるか、または次のメッセージが到着<xref:System.Messaging.Message.Id%2A>するまで、無期限に実行を継続することができます。`id`パラメーターと一致します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2709">Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2710">メッセージの`id`プロパティは、メッセージキューエンタープライズ全体で一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.Id%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2710">The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2711">パラメーターで指定さ<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29>れたタイムアウト期間内に新しいメッセージがキューに到着するまで、現在のスレッドがブロックされてもかまわない場合は、のこのオーバーロードを使用します。 `timeout`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2711">Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.</span></span> <span data-ttu-id="2e7ae-2712">スレッドは、少なくとも指定した期間、または<xref:System.Messaging.MessageQueue.InfiniteTimeout> `timeout`パラメーターの値を指定した場合は無期限にブロックされます。また、 `timeout`によって指定されたタイムアウト期間内に新しいメッセージがキューに到着し続ける場合、引き.</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2712">The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the timeout period specified by the `timeout` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2713">このメソッドはトランザクションキューで呼び出されるため、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2713">Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2714">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2714">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2715">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2715">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2716">メソッドは、キュー <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29>内の最初のメッセージを返します。また、メソッドを使用して、キューに送信されたメッセージの結果として作成された受信確認メッセージ、レポートメッセージ、またはアプリケーションで生成された応答メッセージを取得します。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2716">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2717">指定された id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2717">To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2718">メソッド<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、メッセージがキューに到着しない限り、後続のメソッドの呼び出しは同じメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2718">The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message, unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2719">へ<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2719">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-2720">は<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>キュー内のメッセージを削除しないため、トランザクションが中止された場合、ロールバックは行われません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2720">Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.</span></span>  
  
 <span data-ttu-id="2e7ae-2721">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2721">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2722">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2722">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2723">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2723">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2724">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2724">Local computer</span></span>|<span data-ttu-id="2e7ae-2725">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2725">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2726">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2726">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2727">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2727">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2728">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2728">Remote computer</span></span>|<span data-ttu-id="2e7ae-2729">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2729">No</span></span>|  
|<span data-ttu-id="2e7ae-2730">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2730">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2731">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2731">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2732">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransaction%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2732">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransaction%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#18](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#18)]
 [!code-csharp[MessageQueue2#18](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2733"><paramref name="id" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2733">The <paramref name="id" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2e7ae-2734">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2734">-or-</span></span> 
<span data-ttu-id="2e7ae-2735"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2735">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2736"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2736">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2737">タイムアウトが経過する前に、指定された <paramref name="id" /> を持つメッセージがキューに到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2737">A message with the specified <paramref name="id" /> did not arrive in the queue before the time-out expired.</span></span>  
  
<span data-ttu-id="2e7ae-2738">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2738">-or-</span></span> 
<span data-ttu-id="2e7ae-2739">キューが非トランザクション キューです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2739">The queue is non-transactional.</span></span>  
  
<span data-ttu-id="2e7ae-2740">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2740">-or-</span></span> 
<span data-ttu-id="2e7ae-2741">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2741">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveById">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveById (string id, TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveById(string id, valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveById (id As String, timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveById(System::String ^ id, TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.ReceiveById : string * TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveById (id, timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="id"><span data-ttu-id="2e7ae-2742">受信するメッセージの <see cref="P:System.Messaging.Message.Id" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2742">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</span></span></param>
        <param name="timeout"><span data-ttu-id="2e7ae-2743">新しいメッセージを検査できるようになるまでの待機時間を示す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2743">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</span></span></param>
        <param name="transactionType"><span data-ttu-id="2e7ae-2744">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2744">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2745">指定した ID と一致するメッセージを受信します。指定した ID のメッセージがキューで利用可能になるか、タイムアウトの時間が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2745">Receives the message that matches the given identifier and waits until either a message with the specified identifier is available in the queue or the time-out expires.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2746">渡された <paramref name="id" /> パラメーターと一致する <see cref="P:System.Messaging.Message.Id" /> プロパティを持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2746">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the <paramref name="id" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2747">このメソッドを使用して、既知の識別子を持つメッセージを読み取り、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2747">Use this method to read a message with a known identifier and remove it from the queue.</span></span> <span data-ttu-id="2e7ae-2748">パラメーターで指定さ`id`れた識別子を持つメッセージがキューにある場合、このメソッドは、 `transactionType`パラメーターで定義されたトランザクションコンテキストを使用して、すぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2748">This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="2e7ae-2749">それ以外の場合、メソッドは、新しいメッセージが到着するまで、指定された期間待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2749">Otherwise, the method waits the given period of time for a new message to arrive.</span></span> <span data-ttu-id="2e7ae-2750">タイムアウトの期限が切れる前に新しいメッセージが到着しなかった場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2750">If a new message does not arrive before the time-out expires, an exception is thrown.</span></span>  
  
 <span data-ttu-id="2e7ae-2751">パラメーター `timeout`で、このメソッドの合計実行時間が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2751">The `timeout` parameter does not specify the total running time for this method.</span></span> <span data-ttu-id="2e7ae-2752">代わりに、キューに新しいメッセージが到着するまで待機する時間を指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2752">Rather, it specifies the time to wait for a new message to arrive in the queue.</span></span> <span data-ttu-id="2e7ae-2753">このメソッドは、新しいメッセージが到着するたびに<xref:System.Messaging.Message.Id%2A> 、新しいメッセージのを調べて、 `id`パラメーターと一致するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2753">Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter.</span></span> <span data-ttu-id="2e7ae-2754">それ以外の場合、このメソッドはタイムアウト期間を開始し、別の新しいメッセージが到着するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2754">If not, this method starts the time-out period over and waits for another new message to arrive.</span></span> <span data-ttu-id="2e7ae-2755">したがって、タイムアウト期間内に新しいメッセージが引き続き到着する場合、このメソッドは、タイムアウト期間が新しいメッセージを受信せずに期限切れになるか、または次のメッセージが到着<xref:System.Messaging.Message.Id%2A>するまで、無期限に実行を継続することができます。`id`パラメーターと一致します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2755">Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2756">メッセージ`Automatic`の受信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2756">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="2e7ae-2757">メッセージ`Single`を1つの内部トランザクションとして受信するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2757">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="2e7ae-2758">トランザクションコンテキストの`None`外部にあるトランザクションキューからメッセージを受信するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2758">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="2e7ae-2759">メッセージの`id`プロパティは、メッセージキューエンタープライズ全体で一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.Id%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2759">The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.</span></span> <span data-ttu-id="2e7ae-2760">指定した識別子を持つメッセージが、この<xref:System.Messaging.MessageQueue>インスタンスに関連付けられているキュー以外のキューにある場合、メッセージは見つかりません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2760">If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found.</span></span>  
  
 <span data-ttu-id="2e7ae-2761">パラメーターで指定さ<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29>れたタイムアウト期間内に新しいメッセージがキューに到着するまで、現在のスレッドがブロックされてもかまわない場合は、のこのオーバーロードを使用します。 `timeout`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2761">Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.</span></span> <span data-ttu-id="2e7ae-2762">このスレッドは、少なくとも指定した期間、または<xref:System.Messaging.MessageQueue.InfiniteTimeout> `timeout`パラメーターの値を指定した場合は無期限にブロックされます。または、 `timeout`で指定されたタイムアウト期間内に新しいメッセージがキューに到着し続ける場合は、無期限にブロックされます。引き.</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2762">The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2763">トランザクションキューからメッセージを受信するためにこのメソッドが呼び出された場合、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2763">If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2764">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2764">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2765">他の2つの方法では、キューからメッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2765">Two other methods allow you to receive messages from a queue.</span></span> <span data-ttu-id="2e7ae-2766">メソッドは、キュー <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29>内の最初のメッセージを返します。また、メソッドを使用して、キューに送信されたメッセージの結果として作成された受信確認メッセージ、レポートメッセージ、またはアプリケーションで生成された応答メッセージを取得します。 <xref:System.Messaging.MessageQueue.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2766">The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2767">指定された id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2767">To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method.</span></span> <span data-ttu-id="2e7ae-2768">メソッド<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>は、常にキュー内の最初のメッセージを返します。そのため、後続のメソッドの呼び出しでは、優先順位の高いメッセージがキューに到着しない限り、同じメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2768">The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.</span></span> <span data-ttu-id="2e7ae-2769">へ<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2769">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>.</span></span> <span data-ttu-id="2e7ae-2770">は<xref:System.Messaging.MessageQueue.PeekById%28System.String%29>キュー内のメッセージを削除しないため、トランザクションが中止された場合、ロールバックは行われません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2770">Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.</span></span>  
  
 <span data-ttu-id="2e7ae-2771">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2771">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2772">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2772">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2773">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2773">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2774">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2774">Local computer</span></span>|<span data-ttu-id="2e7ae-2775">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2775">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2776">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2776">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2777">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2777">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2778">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2778">Remote computer</span></span>|<span data-ttu-id="2e7ae-2779">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2779">No</span></span>|  
|<span data-ttu-id="2e7ae-2780">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2780">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2781">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2781">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2782">次のコード例は、<xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransactionType%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2782">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransactionType%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#19](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#19)]
 [!code-csharp[MessageQueue2#19](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-2783"><paramref name="id" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2783">The <paramref name="id" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-2784"><paramref name="timeout" /> パラメーターに指定した値が無効です。<paramref name="timeout" /> が <see cref="F:System.TimeSpan.Zero" /> よりも小さいか、<see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" /> よりも大きい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2784">The value specified for the <paramref name="timeout" /> parameter is not valid, possibly <paramref name="timeout" /> is less than <see cref="F:System.TimeSpan.Zero" /> or greater than <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2785">タイムアウトが経過する前に、指定された <paramref name="id" /> を持つメッセージがキューに到達しませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2785">A message with the specified <paramref name="id" /> did not arrive in the queue before the time-out expired.</span></span>  
  
<span data-ttu-id="2e7ae-2786">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2786">-or-</span></span> 
<span data-ttu-id="2e7ae-2787">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2787">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-2788"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2788">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveByLookupId">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-2789">MSMQ 3.0 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2789">Introduced in MSMQ 3.0.</span></span> <span data-ttu-id="2e7ae-2790">特定のメッセージをキューから受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2790">Receives a specific message from the queue.</span></span> <span data-ttu-id="2e7ae-2791">メッセージは、参照識別子で指定することも、キューの前後の位置関係で指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2791">The message can be specified by a lookup identifier or by its position at the front or end of the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveByLookupId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveByLookupId (long lookupId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveByLookupId(int64 lookupId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveByLookupId(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveByLookupId (lookupId As Long) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveByLookupId(long lookupId);" />
      <MemberSignature Language="F#" Value="member this.ReceiveByLookupId : int64 -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveByLookupId lookupId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lookupId" Type="System.Int64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="lookupId"><span data-ttu-id="2e7ae-2792">受信するメッセージの <see cref="P:System.Messaging.Message.LookupId" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2792">The <see cref="P:System.Messaging.Message.LookupId" /> of the message to receive.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2793">MSMQ 3.0 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2793">Introduced in MSMQ 3.0.</span></span> <span data-ttu-id="2e7ae-2794">非トランザクション キュー内の指定した参照識別子に一致するメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2794">Receives the message that matches the given lookup identifier from a non-transactional queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2795">渡された <paramref name="lookupId" /> パラメーターと一致する <see cref="P:System.Messaging.Message.LookupId" /> プロパティを持つ <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2795">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.LookupId" /> property matches the <paramref name="lookupId" /> parameter passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2796">このメソッドを使用して、既知の参照識別子を持つメッセージを読み取り、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2796">Use this method to read a message with a known lookup identifier and remove it from the queue.</span></span> <span data-ttu-id="2e7ae-2797">このメソッドは、メッセージがキューに存在しない場合、すぐに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2797">This method throws an exception immediately if the message is not in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2798">メッセージの`lookupId`プロパティは、メッセージが存在するキューに対して一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.LookupId%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2798">The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2799">指定された参照識別子を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekByLookupId%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2799">To read a message with a specified lookup identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method.</span></span>  
  
 <span data-ttu-id="2e7ae-2800">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2800">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2801">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2801">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2802">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2802">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2803">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2803">Local computer</span></span>|<span data-ttu-id="2e7ae-2804">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2804">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2805">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2805">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2806">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2806">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2807">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2807">Remote computer</span></span>|<span data-ttu-id="2e7ae-2808">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2808">No</span></span>|  
|<span data-ttu-id="2e7ae-2809">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2809">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2810">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2810">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="2e7ae-2811">MSMQ 3.0 がインストールされていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2811">MSMQ 3.0 is not installed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-2812">指定した <paramref name="lookupId" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2812">The message with the specified <paramref name="lookupId" /> could not be found.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2813">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2813">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.LookupId" />
        <altmember cref="Overload:System.Messaging.MessageQueue.PeekByLookupId" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveByLookupId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveByLookupId (System.Messaging.MessageLookupAction action, long lookupId, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveByLookupId(valuetype System.Messaging.MessageLookupAction action, int64 lookupId, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveByLookupId (action As MessageLookupAction, lookupId As Long, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveByLookupId(System::Messaging::MessageLookupAction action, long lookupId, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.ReceiveByLookupId : System.Messaging.MessageLookupAction * int64 * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveByLookupId (action, lookupId, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Messaging.MessageLookupAction" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="lookupId" Type="System.Int64" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="2e7ae-2814">キュー内のメッセージを読み取る方法を指定する <see cref="T:System.Messaging.MessageLookupAction" /> のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2814">One of the <see cref="T:System.Messaging.MessageLookupAction" /> values, specifying how the message is read in the queue.</span></span> <span data-ttu-id="2e7ae-2815">次のいずれかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2815">Specify one of the following:</span></span> 
 <span data-ttu-id="2e7ae-2816"><see langword="MessageLookupAction.Current" />:<paramref name="lookupId" /> で指定されたメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2816"><see langword="MessageLookupAction.Current" />: Receives the message specified by <paramref name="lookupId" /> and removes it from the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2817"><see langword="MessageLookupAction.Next" />:<paramref name="lookupId" /> で指定されたメッセージの次のメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2817"><see langword="MessageLookupAction.Next" />: Receives the message following the message specified by <paramref name="lookupId" /> and removes it from the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2818"><see langword="MessageLookupAction.Previous" />:<paramref name="lookupId" /> で指定されたメッセージの前のメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2818"><see langword="MessageLookupAction.Previous" />: Receives the message preceding the message specified by <paramref name="lookupId" /> and removes it from the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2819"><see langword="MessageLookupAction.First" />:キューの最初のメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2819"><see langword="MessageLookupAction.First" />: Receives the first message in the queue and removes it from the queue.</span></span> <span data-ttu-id="2e7ae-2820"><paramref name="lookupId" /> パラメーターは、0 に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2820">The <paramref name="lookupId" /> parameter must be set to 0.</span></span>  
  
 <span data-ttu-id="2e7ae-2821"><see langword="MessageLookupAction.Last" />:キューの最後のメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2821"><see langword="MessageLookupAction.Last" />: Receives the last message in the queue and removes it from the queue.</span></span> <span data-ttu-id="2e7ae-2822"><paramref name="lookupId" /> パラメーターは、0 に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2822">The <paramref name="lookupId" /> parameter must be set to 0.</span></span></param>
        <param name="lookupId"><span data-ttu-id="2e7ae-2823">受信するメッセージの <see cref="P:System.Messaging.Message.LookupId" /> か、0。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2823">The <see cref="P:System.Messaging.Message.LookupId" /> of the message to receive, or 0.</span></span> <span data-ttu-id="2e7ae-2824">キューの最初または最後のメッセージにアクセスする場合は 0 を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2824">0 is used when accessing the first or last message in the queue.</span></span></param>
        <param name="transaction"><span data-ttu-id="2e7ae-2825"><see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2825">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2826">MSMQ 3.0 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2826">Introduced in MSMQ 3.0.</span></span> <span data-ttu-id="2e7ae-2827">特定のメッセージをトランザクション キューから受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2827">Receives a specific message from a transactional queue.</span></span> <span data-ttu-id="2e7ae-2828">メッセージは、参照識別子で指定することも、キューの前後の位置関係で指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2828">The message can be specified by a lookup identifier or by its position at the front or end of the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2829">渡された <paramref name="lookupId" /> パラメーターおよび <paramref name="action" /> パラメーターで指定された <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2829">The <see cref="T:System.Messaging.Message" /> specified by the <paramref name="lookupId" /> and <paramref name="action" /> parameters passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2830">このメソッドを使用して、既知の参照識別子を持つメッセージを読み取り、 `transaction`パラメーターで定義されたトランザクションコンテキストを使用してキューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2830">Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transaction` parameter.</span></span> <span data-ttu-id="2e7ae-2831">このメソッドは、メッセージがキューに存在しない場合、すぐに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2831">This method throws an exception immediately if the message is not in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2832">メッセージの`lookupId`プロパティは、メッセージが存在するキューに対して一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.LookupId%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2832">The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2833">このメソッドはトランザクションキューで呼び出されるため、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2833">Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2834">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2834">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2835">指定された id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekByLookupId%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2835">To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method.</span></span> <span data-ttu-id="2e7ae-2836">へ<xref:System.Messaging.MessageQueue.PeekByLookupId%2A>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2836">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>.</span></span> <span data-ttu-id="2e7ae-2837">で<xref:System.Messaging.MessageQueue.PeekByLookupId%2A>は、キューからメッセージが削除されないので、トランザクションが中止された場合、ロールバックする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2837">Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.</span></span>  
  
 <span data-ttu-id="2e7ae-2838">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2838">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2839">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2839">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2840">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2840">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2841">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2841">Local computer</span></span>|<span data-ttu-id="2e7ae-2842">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2842">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2843">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2843">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2844">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2844">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2845">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2845">Remote computer</span></span>|<span data-ttu-id="2e7ae-2846">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2846">No</span></span>|  
|<span data-ttu-id="2e7ae-2847">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2847">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2848">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2848">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="2e7ae-2849">MSMQ 3.0 がインストールされていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2849">MSMQ 3.0 is not installed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-2850">指定した <paramref name="lookupId" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2850">The message with the specified <paramref name="lookupId" /> could not be found.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2851">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2851">An error occurred when accessing a Message Queuing method.</span></span>  
  
 <span data-ttu-id="2e7ae-2852">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2852">-or-</span></span>  
  
 <span data-ttu-id="2e7ae-2853">キューが非トランザクション キューです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2853">The queue is non-transactional.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-2854"><paramref name="action" /> パラメーターが、<see cref="T:System.Messaging.MessageLookupAction" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2854">The <paramref name="action" /> parameter is not one of the <see cref="T:System.Messaging.MessageLookupAction" /> members.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.LookupId" />
        <altmember cref="Overload:System.Messaging.MessageQueue.PeekByLookupId" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveByLookupId">
      <MemberSignature Language="C#" Value="public System.Messaging.Message ReceiveByLookupId (System.Messaging.MessageLookupAction action, long lookupId, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message ReceiveByLookupId(valuetype System.Messaging.MessageLookupAction action, int64 lookupId, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveByLookupId (action As MessageLookupAction, lookupId As Long, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ ReceiveByLookupId(System::Messaging::MessageLookupAction action, long lookupId, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.ReceiveByLookupId : System.Messaging.MessageLookupAction * int64 * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageQueue.ReceiveByLookupId (action, lookupId, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Messaging.MessageLookupAction" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="lookupId" Type="System.Int64" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="2e7ae-2855">キュー内のメッセージを読み取る方法を指定する <see cref="T:System.Messaging.MessageLookupAction" /> のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2855">One of the <see cref="T:System.Messaging.MessageLookupAction" /> values, specifying how the message is read in the queue.</span></span> <span data-ttu-id="2e7ae-2856">次のいずれかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2856">Specify one of the following:</span></span> 
 <span data-ttu-id="2e7ae-2857"><see langword="MessageLookupAction.Current" />:<paramref name="lookupId" /> で指定されたメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2857"><see langword="MessageLookupAction.Current" />: Receives the message specified by <paramref name="lookupId" /> and removes it from the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2858"><see langword="MessageLookupAction.Next" />:<paramref name="lookupId" /> で指定されたメッセージの次のメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2858"><see langword="MessageLookupAction.Next" />: Receives the message following the message specified by <paramref name="lookupId" /> and removes it from the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2859"><see langword="MessageLookupAction.Previous" />:<paramref name="lookupId" /> で指定されたメッセージの前のメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2859"><see langword="MessageLookupAction.Previous" />: Receives the message preceding the message specified by <paramref name="lookupId" /> and removes it from the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2860"><see langword="MessageLookupAction.First" />:キューの最初のメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2860"><see langword="MessageLookupAction.First" />: Receives the first message in the queue and removes it from the queue.</span></span> <span data-ttu-id="2e7ae-2861"><paramref name="lookupId" /> パラメーターは、0 に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2861">The <paramref name="lookupId" /> parameter must be set to 0.</span></span>  
  
 <span data-ttu-id="2e7ae-2862"><see langword="MessageLookupAction.Last" />:キューの最後のメッセージを受信し、キューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2862"><see langword="MessageLookupAction.Last" />: Receives the last message in the queue and removes it from the queue.</span></span> <span data-ttu-id="2e7ae-2863"><paramref name="lookupId" /> パラメーターは、0 に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2863">The <paramref name="lookupId" /> parameter must be set to 0.</span></span></param>
        <param name="lookupId"><span data-ttu-id="2e7ae-2864">受信するメッセージの <see cref="P:System.Messaging.Message.LookupId" /> か、0。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2864">The <see cref="P:System.Messaging.Message.LookupId" /> of the message to receive, or 0.</span></span> <span data-ttu-id="2e7ae-2865">キューの最初または最後のメッセージにアクセスする場合は 0 を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2865">0 is used when accessing the first or last message in the queue.</span></span></param>
        <param name="transactionType"><span data-ttu-id="2e7ae-2866">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2866">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2867">MSMQ 3.0 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2867">Introduced in MSMQ 3.0.</span></span> <span data-ttu-id="2e7ae-2868">トランザクション コンテキストを指定して、特定のメッセージをキューから受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2868">Receives a specific message from the queue, using the specified transaction context.</span></span> <span data-ttu-id="2e7ae-2869">メッセージは、参照識別子で指定することも、キューの前後の位置関係で指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2869">The message can be specified by a lookup identifier or by its position at the front or end of the queue.</span></span></summary>
        <returns><span data-ttu-id="2e7ae-2870">渡された <paramref name="action" /> パラメーターおよび <paramref name="lookupId" /> パラメーターで指定された <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2870">The <see cref="T:System.Messaging.Message" /> specified by the <paramref name="action" /> and <paramref name="lookupId" /> parameters passed in.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2871">このメソッドを使用して、既知の参照識別子を持つメッセージを読み取り、 `transactionType`パラメーターで定義されたトランザクションコンテキストを使用してキューから削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2871">Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="2e7ae-2872">このメソッドは、メッセージがキューに存在しない場合、すぐに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2872">This method throws an exception immediately if the message is not in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2873">メッセージの`lookupId`プロパティは、メッセージが存在するキューに対して一意であるため、指定されたパラメーターに一致するメッセージがキューに1つだけ存在します。 <xref:System.Messaging.Message.LookupId%2A></span><span class="sxs-lookup"><span data-stu-id="2e7ae-2873">The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2874">指定された id を持つメッセージをキューから削除せずに読み取るに<xref:System.Messaging.MessageQueue.PeekByLookupId%2A>は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2874">To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method.</span></span> <span data-ttu-id="2e7ae-2875">へ<xref:System.Messaging.MessageQueue.PeekByLookupId%2A>の呼び出しによって返されたメッセージに関連付けられたトランザクションコンテキストがありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2875">There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>.</span></span> <span data-ttu-id="2e7ae-2876">で<xref:System.Messaging.MessageQueue.PeekByLookupId%2A>は、キューからメッセージが削除されないので、トランザクションが中止された場合、ロールバックする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2876">Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.</span></span>  
  
 <span data-ttu-id="2e7ae-2877">メッセージ`Automatic`の受信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2877">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="2e7ae-2878">メッセージ`Single`を1つの内部トランザクションとして受信するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2878">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="2e7ae-2879">トランザクションコンテキストの`None`外部にあるトランザクションキューからメッセージを受信するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2879">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="2e7ae-2880">トランザクションキューからメッセージを受信するためにこのメソッドが呼び出された場合、トランザクションが中止されると、受信したメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2880">If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.</span></span> <span data-ttu-id="2e7ae-2881">トランザクションがコミットされるまで、メッセージはキューから完全に削除されません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2881">The message is not permanently removed from the queue until the transaction is committed.</span></span>  
  
 <span data-ttu-id="2e7ae-2882">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2882">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2883">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2883">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2884">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2884">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2885">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2885">Local computer</span></span>|<span data-ttu-id="2e7ae-2886">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2886">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2887">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2887">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2888">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2888">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2889">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2889">Remote computer</span></span>|<span data-ttu-id="2e7ae-2890">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2890">No</span></span>|  
|<span data-ttu-id="2e7ae-2891">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2891">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2892">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2892">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="2e7ae-2893">MSMQ 3.0 がインストールされていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2893">MSMQ 3.0 is not installed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2e7ae-2894">指定した <paramref name="lookupId" /> を持つメッセージは見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2894">The message with the specified <paramref name="lookupId" /> could not be found.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2895">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2895">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-2896"><paramref name="action" /> パラメーターが、<see cref="T:System.Messaging.MessageLookupAction" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2896">The <paramref name="action" /> parameter is not one of the <see cref="T:System.Messaging.MessageLookupAction" /> members.</span></span>  
  
<span data-ttu-id="2e7ae-2897">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2897">-or-</span></span> 
<span data-ttu-id="2e7ae-2898"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2898">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.LookupId" />
        <altmember cref="Overload:System.Messaging.MessageQueue.PeekByLookupId" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveCompleted">
      <MemberSignature Language="C#" Value="public event System.Messaging.ReceiveCompletedEventHandler ReceiveCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Messaging.ReceiveCompletedEventHandler ReceiveCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Messaging.MessageQueue.ReceiveCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ReceiveCompleted As ReceiveCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Messaging::ReceiveCompletedEventHandler ^ ReceiveCompleted;" />
      <MemberSignature Language="F#" Value="member this.ReceiveCompleted : System.Messaging.ReceiveCompletedEventHandler " Usage="member this.ReceiveCompleted : System.Messaging.ReceiveCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_ReceiveCompleted")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.ReceiveCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-2899">メッセージがキューから削除されると発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2899">Occurs when a message has been removed from the queue.</span></span> <span data-ttu-id="2e7ae-2900">このイベントは、非同期操作 <see cref="M:System.Messaging.MessageQueue.BeginReceive" /> によって発生します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2900">This event is raised by the asynchronous operation, <see cref="M:System.Messaging.MessageQueue.BeginReceive" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2901"><xref:System.Messaging.MessageQueue.BeginReceive%2A>は、メッセージがキューで利用可能<xref:System.Messaging.MessageQueue.ReceiveCompleted>な場合にイベントを発生させるために、非同期処理で使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2901"><xref:System.Messaging.MessageQueue.BeginReceive%2A> is used in asynchronous processing to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message is available in the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2902"><xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>は、の呼び出し<xref:System.Messaging.MessageQueue.BeginReceive%2A>によって開始された操作を完了し、 <xref:System.Messaging.MessageQueue.ReceiveCompleted>イベントが発生したときにそのメッセージをピークするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2902"><xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginReceive%2A> and peek the message when the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised.</span></span>  
  
 <span data-ttu-id="2e7ae-2903"><xref:System.Messaging.ReceiveCompletedEventHandler> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2903">When you create a <xref:System.Messaging.ReceiveCompletedEventHandler> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="2e7ae-2904">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2904">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="2e7ae-2905">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2905">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="2e7ae-2906">イベントハンドラーデリゲートの詳細については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2906">For more information about event handler delegates, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2907">次のコード例では、という`MyReceiveCompleted`名前のイベントハンドラーを<xref:System.Messaging.MessageQueue.ReceiveCompleted>作成し、それをイベント<xref:System.Messaging.MessageQueue.BeginReceive%2A>ハンドラーデリゲートにアタッチし、を呼び出して、パス ".\myQueue" にあるキューで非同期の受信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2907">The following code example creates an event handler named `MyReceiveCompleted`, attaches it to the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginReceive%2A> to initiate an asynchronous receive operation on the queue that is located at the path ".\myQueue".</span></span> <span data-ttu-id="2e7ae-2908"><xref:System.Messaging.MessageQueue.ReceiveCompleted>イベントが発生すると、この例ではメッセージを受信し、その本文を画面に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2908">When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the example receives the message and writes its body to the screen.</span></span> <span data-ttu-id="2e7ae-2909">この例では<xref:System.Messaging.MessageQueue.BeginReceive%2A> 、を再度呼び出して、新しい非同期の受信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2909">The example then calls <xref:System.Messaging.MessageQueue.BeginReceive%2A> again to initiate a new asynchronous receive operation.</span></span>  
  
 [!code-cpp[MessageQueue.ReceiveCompleted#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/CPP/mqreceivecompletedeventhandler.cpp#1)]
 [!code-csharp[MessageQueue.ReceiveCompleted#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/CS/mqreceivecompletedeventhandler.cs#1)]
 [!code-vb[MessageQueue.ReceiveCompleted#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/VB/mqreceivecompletedeventhandler.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
        <altmember cref="E:System.Messaging.MessageQueue.PeekCompleted" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberSignature Language="F#" Value="member this.Refresh : unit -&gt; unit" Usage="messageQueue.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-2910">リソースの現在の状態を反映するには、<see cref="T:System.Messaging.MessageQueue" /> で表されるプロパティを更新します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2910">Refreshes the properties presented by the <see cref="T:System.Messaging.MessageQueue" /> to reflect the current state of the resource.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2911"><xref:System.Messaging.MessageQueue.Refresh%2A>のプロパティを、関連<xref:System.Messaging.MessageQueue>付けられたメッセージキューサーバーリソースと同期します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2911"><xref:System.Messaging.MessageQueue.Refresh%2A> synchronizes the properties of a <xref:System.Messaging.MessageQueue> with its associated Message Queuing server resource.</span></span> <span data-ttu-id="2e7ae-2912"><xref:System.Messaging.MessageQueue.Label%2A>また<xref:System.Messaging.MessageQueue>は<xref:System.Messaging.MessageQueue.Category%2A>などのプロパティが、の作成時以降にサーバーで変更された場合、 <xref:System.Messaging.MessageQueue.Refresh%2A>は新しい<xref:System.Messaging.MessageQueue>情報でを更新します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2912">If any property, such as <xref:System.Messaging.MessageQueue.Label%2A> or <xref:System.Messaging.MessageQueue.Category%2A>, has changed on the server since the time the <xref:System.Messaging.MessageQueue> was created, <xref:System.Messaging.MessageQueue.Refresh%2A> updates the <xref:System.Messaging.MessageQueue> with the new information.</span></span>  
  
 <span data-ttu-id="2e7ae-2913">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2913">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2914">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2914">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2915">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2915">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2916">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2916">Local computer</span></span>|<span data-ttu-id="2e7ae-2917">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2917">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2918">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2918">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2919">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2919">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2920">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2920">Remote computer</span></span>|<span data-ttu-id="2e7ae-2921">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2921">No</span></span>|  
|<span data-ttu-id="2e7ae-2922">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2922">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2923">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2923">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2924">次のコード例は、<xref:System.Messaging.MessageQueue.Refresh%2A> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2924">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Refresh%2A>.</span></span>  
  
 [!code-cpp[MessageQueue2#28](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#28)]
 [!code-csharp[MessageQueue2#28](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
      </Docs>
    </Member>
    <Member MemberName="ResetPermissions">
      <MemberSignature Language="C#" Value="public void ResetPermissions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetPermissions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.ResetPermissions" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetPermissions ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetPermissions();" />
      <MemberSignature Language="F#" Value="member this.ResetPermissions : unit -&gt; unit" Usage="messageQueue.ResetPermissions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2e7ae-2925">アクセス許可リストをオペレーティング システムの既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2925">Resets the permission list to the operating system's default values.</span></span> <span data-ttu-id="2e7ae-2926">既定のリストに追加したキューのアクセス許可を削除します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2926">Removes any queue permissions you have appended to the default list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2927">を呼び出す<xref:System.Messaging.MessageQueue.ResetPermissions%2A>と、アクセス許可リストが既定値に戻ります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2927">When you call <xref:System.Messaging.MessageQueue.ResetPermissions%2A>, you return the permission list to its default values.</span></span> <span data-ttu-id="2e7ae-2928">一般に、キュー作成者にはすべてのアクセス許可が付与され、グループには次の権限が付与されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2928">Generally, this grants the queue creator all permissions, and gives the group Everyone the following rights:</span></span>  
  
-   <span data-ttu-id="2e7ae-2929">キューのプロパティを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2929">Get the properties of the queue.</span></span>  
  
-   <span data-ttu-id="2e7ae-2930">キューのアクセス許可を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2930">Get queue permissions.</span></span>  
  
-   <span data-ttu-id="2e7ae-2931">キューに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2931">Write to the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-2932">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2932">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2933">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2933">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2934">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2934">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2935">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2935">Local computer</span></span>|<span data-ttu-id="2e7ae-2936">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2936">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2937">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2937">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2938">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2938">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2939">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2939">Remote computer</span></span>|<span data-ttu-id="2e7ae-2940">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2940">No</span></span>|  
|<span data-ttu-id="2e7ae-2941">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2941">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2942">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2942">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2943">次のコード例は、<xref:System.Messaging.MessageQueue.ResetPermissions%2A> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2943">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ResetPermissions%2A>.</span></span>  
  
 [!code-cpp[MessageQueue2#27](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#27)]
 [!code-csharp[MessageQueue2#27](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2944">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2944">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-2945">キューにオブジェクトを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2945">Sends an object to a queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Send(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="member this.Send : obj -&gt; unit" Usage="messageQueue.Send obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2e7ae-2946">キューに送信するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2946">The object to send to the queue.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2947">この <see cref="T:System.Messaging.MessageQueue" /> で参照される非トランザクション キューにオブジェクトを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2947">Sends an object to non-transactional queue referenced by this <see cref="T:System.Messaging.MessageQueue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2948">このオーバーロードを使用して、 `obj`パラメーターを含むメッセージを、 <xref:System.Messaging.MessageQueue>によって参照されるキューに送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2948">Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>.</span></span> <span data-ttu-id="2e7ae-2949">キューに送信するオブジェクトは、 <xref:System.Messaging.Message>または任意のマネージオブジェクトにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2949">The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object.</span></span> <span data-ttu-id="2e7ae-2950">以外のオブジェクトを送信すると<xref:System.Messaging.Message>、オブジェクトがシリアル化され、メッセージの本文に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2950">If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.</span></span>  
  
 <span data-ttu-id="2e7ae-2951">このオーバーロードを使用してトランザクションキューにメッセージを送信すると、メッセージは配信不能キューに送信されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2951">If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue.</span></span> <span data-ttu-id="2e7ae-2952">メッセージを他のメッセージを含むトランザクションの一部にする場合は、パラメーターとしてまたは<xref:System.Messaging.MessageQueueTransaction> <xref:System.Messaging.MessageQueueTransactionType>を受け取るオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2952">If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-2953">を呼び出す<xref:System.Messaging.MessageQueue.Formatter%2A> <xref:System.Messaging.MessageQueue.Send%28System.Object%29>前にプロパティを設定しなかった場合、フォーマッタ<xref:System.Messaging.XmlMessageFormatter>は既定でに設定されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2953">If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 <span data-ttu-id="2e7ae-2954">プロパティ<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>は、 <xref:System.Messaging.Message>以外のすべてのオブジェクトに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2954">The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>.</span></span> <span data-ttu-id="2e7ae-2955">たとえば、 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>メンバーを使用してラベルや優先順位を指定した場合、これらの値は、アプリケーションからキューに送信されるときに<xref:System.Messaging.Message>型ではないオブジェクトを含むメッセージに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2955">If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue.</span></span> <span data-ttu-id="2e7ae-2956">を<xref:System.Messaging.Message>送信する場合、に設定<xref:System.Messaging.Message>されるプロパティ値が優先<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>され、メッセージ<xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType>のプロパティがキューの<xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType>プロパティよりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2956">When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="2e7ae-2957">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2957">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2958">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2958">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2959">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2959">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2960">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2960">Local computer</span></span>|<span data-ttu-id="2e7ae-2961">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2961">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2962">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2962">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2963">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2963">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2964">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2964">Remote computer</span></span>|<span data-ttu-id="2e7ae-2965">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2965">No</span></span>|  
|<span data-ttu-id="2e7ae-2966">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2966">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2967">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2967">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2968">次のコード例では、メッセージキューに接続し、メッセージをキューに送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2968">The following code example connects to a message queue and sends a message to the queue.</span></span>  
  
 [!code-cpp[MessageQueue.Send_obj#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Send_obj/CPP/mqsend_generic.cpp#1)]
 [!code-csharp[MessageQueue.Send_obj#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Send_obj/CS/mqsend_generic.cs#1)]
 [!code-vb[MessageQueue.Send_obj#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Send_obj/VB/mqsend_generic.vb#1)]  
  
 <span data-ttu-id="2e7ae-2969">次のコード例では、アプリケーション定義`Order`のクラスをキューに送信し、そのキューからメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2969">The following code example sends an application-defined `Order` class to a queue and then receives a message from that queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-2970"><see cref="P:System.Messaging.MessageQueue.Path" /> プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2970">The <see cref="P:System.Messaging.MessageQueue.Path" /> property has not been set.</span></span>  
  
<span data-ttu-id="2e7ae-2971">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2971">-or-</span></span> 
<span data-ttu-id="2e7ae-2972">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2972">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.MessageQueue.Path" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (object obj, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(object obj, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (obj As Object, transaction As MessageQueueTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Object ^ obj, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.Send : obj * System.Messaging.MessageQueueTransaction -&gt; unit" Usage="messageQueue.Send (obj, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2e7ae-2973">キューに送信するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2973">The object to send to the queue.</span></span></param>
        <param name="transaction"><span data-ttu-id="2e7ae-2974"><see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2974">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</span></span></param>
        <summary><span data-ttu-id="2e7ae-2975">この <see cref="T:System.Messaging.MessageQueue" /> で参照されるトランザクション キューにオブジェクトを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2975">Sends an object to the transactional queue referenced by this <see cref="T:System.Messaging.MessageQueue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-2976">このオーバーロードを使用して、パラメーターで`obj` `transaction`定義された内部トランザクションコンテキストを使用<xref:System.Messaging.MessageQueue>して、によって参照されるトランザクションキューにパラメーターを含むメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2976">Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter.</span></span> <span data-ttu-id="2e7ae-2977">キューに送信するオブジェクトは、 <xref:System.Messaging.Message>または任意のマネージオブジェクトにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2977">The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object.</span></span> <span data-ttu-id="2e7ae-2978">以外のオブジェクトを送信すると<xref:System.Messaging.Message>、オブジェクトがシリアル化され、メッセージの本文に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2978">If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.</span></span>  
  
 <span data-ttu-id="2e7ae-2979">このオーバーロードを使用して非トランザクションキューにメッセージを送信すると、例外をスローすることなく、メッセージが配信不能キューに送信される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2979">If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.</span></span>  
  
 <span data-ttu-id="2e7ae-2980">を呼び出す<xref:System.Messaging.MessageQueue.Formatter%2A> <xref:System.Messaging.MessageQueue.Send%28System.Object%29>前にプロパティを設定しなかった場合、フォーマッタ<xref:System.Messaging.XmlMessageFormatter>は既定でに設定されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2980">If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 <span data-ttu-id="2e7ae-2981">プロパティ<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>は、 <xref:System.Messaging.Message>以外のすべてのオブジェクトに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2981">The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>.</span></span> <span data-ttu-id="2e7ae-2982">たとえば、 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>メンバーを使用してラベルや優先順位を指定した場合、これらの値は、アプリケーションからキューに送信されるときに<xref:System.Messaging.Message>型ではないオブジェクトを含むメッセージに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2982">If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue.</span></span> <span data-ttu-id="2e7ae-2983">を<xref:System.Messaging.Message>送信する場合、に設定<xref:System.Messaging.Message>されるプロパティ値が優先<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>され、メッセージ<xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType>のプロパティがキューの<xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType>プロパティよりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2983">When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="2e7ae-2984"><xref:System.Messaging.MessageQueueTransaction>はスレッドアパートメントに対応しているため、アパートメント`STA`状態がの場合、複数のスレッドでトランザクションを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2984"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="2e7ae-2985">Visual Basic はメインスレッドの状態をに`STA`設定します。したがって、 <xref:System.MTAThreadAttribute>を`Main`サブルーチンに適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2985">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="2e7ae-2986">適用しない場合、別のスレッドを使用してトランザクション メッセージを送信すると、<xref:System.Messaging.MessageQueueException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2986">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="2e7ae-2987">を適用する<xref:System.MTAThreadAttribute>には、次のフラグメントを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2987">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 <span data-ttu-id="2e7ae-2988">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2988">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-2989">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2989">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-2990">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2990">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-2991">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2991">Local computer</span></span>|<span data-ttu-id="2e7ae-2992">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2992">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2993">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2993">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2994">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2994">Yes</span></span>|  
|<span data-ttu-id="2e7ae-2995">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2995">Remote computer</span></span>|<span data-ttu-id="2e7ae-2996">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2996">No</span></span>|  
|<span data-ttu-id="2e7ae-2997">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2997">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-2998">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2998">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-2999">次のコード例では、トランザクションキューに文字列を送信し、そのキューからメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-2999">The following code example sends a string to a transactional queue and then receives a message from that queue.</span></span>  
  
 [!code-cpp[MessageQueue.Send_ObjectTransaction#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Send_ObjectTransaction/CPP/mqsend_objtransaction.cpp#1)]
 [!code-csharp[MessageQueue.Send_ObjectTransaction#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Send_ObjectTransaction/CS/mqsend_objtransaction.cs#1)]
 [!code-vb[MessageQueue.Send_ObjectTransaction#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Send_ObjectTransaction/VB/mqsend_objtransaction.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-3000"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3000">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3001"><see cref="P:System.Messaging.MessageQueue.Path" /> プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3001">The <see cref="P:System.Messaging.MessageQueue.Path" /> property has not been set.</span></span>  
  
<span data-ttu-id="2e7ae-3002">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3002">-or-</span></span> 
<span data-ttu-id="2e7ae-3003">メッセージ キュー アプリケーションが、トランザクションの使用が正しくないことを示しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3003">The Message Queuing application indicated an incorrect transaction use.</span></span>  
  
<span data-ttu-id="2e7ae-3004">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3004">-or-</span></span> 
<span data-ttu-id="2e7ae-3005">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3005">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (object obj, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(object obj, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (obj As Object, transactionType As MessageQueueTransactionType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Object ^ obj, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.Send : obj * System.Messaging.MessageQueueTransactionType -&gt; unit" Usage="messageQueue.Send (obj, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2e7ae-3006">キューに送信するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3006">The object to send to the queue.</span></span></param>
        <param name="transactionType"><span data-ttu-id="2e7ae-3007">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3007">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-3008">この <see cref="T:System.Messaging.MessageQueue" /> で参照されるキューにオブジェクトを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3008">Sends an object to the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3009">このオーバーロードを使用して、パラメーターで`obj` `transactionType`定義されているトランザクションコンテキストを<xref:System.Messaging.MessageQueue>使用して、によって参照されるキューにパラメーターを含むメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3009">Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="2e7ae-3010">メッセージ`Automatic`の送信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3010">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message.</span></span> <span data-ttu-id="2e7ae-3011">メッセージ`Single`を1つの内部トランザクションとして送信するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3011">Specify `Single` if you want to send the message as a single internal transaction.</span></span> <span data-ttu-id="2e7ae-3012">トランザクションメッセージを`None`非トランザクションスレッドに送信するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3012">You can specify `None` if you want to send a transactional message to a non-transactional thread.</span></span>  
  
 <span data-ttu-id="2e7ae-3013">キューに送信するオブジェクトは、 <xref:System.Messaging.Message>または任意のマネージオブジェクトにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3013">The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object.</span></span> <span data-ttu-id="2e7ae-3014">以外のオブジェクトを送信すると<xref:System.Messaging.Message>、オブジェクトがシリアル化され、メッセージの本文に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3014">If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.</span></span>  
  
 <span data-ttu-id="2e7ae-3015">を呼び出す<xref:System.Messaging.MessageQueue.Formatter%2A> <xref:System.Messaging.MessageQueue.Send%28System.Object%29>前にプロパティを設定しなかった場合、フォーマッタ<xref:System.Messaging.XmlMessageFormatter>は既定でに設定されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3015">If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 <span data-ttu-id="2e7ae-3016">プロパティ<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>は、 <xref:System.Messaging.Message>以外のすべてのオブジェクトに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3016">The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>.</span></span> <span data-ttu-id="2e7ae-3017">たとえば、 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>メンバーを使用してラベルや優先順位を指定した場合、これらの値は、アプリケーションからキューに送信されるときに<xref:System.Messaging.Message>型ではないオブジェクトを含むメッセージに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3017">If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue.</span></span> <span data-ttu-id="2e7ae-3018">を<xref:System.Messaging.Message>送信する場合、に設定<xref:System.Messaging.Message>されるプロパティ値が優先<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>され、メッセージ<xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType>のプロパティがキューの<xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType>プロパティよりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3018">When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="2e7ae-3019">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3019">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3020">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3020">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3021">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3021">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3022">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3022">Local computer</span></span>|<span data-ttu-id="2e7ae-3023">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3023">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3024">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3024">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3025">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3025">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3026">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3026">Remote computer</span></span>|<span data-ttu-id="2e7ae-3027">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3027">No</span></span>|  
|<span data-ttu-id="2e7ae-3028">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3028">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3029">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3029">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-3030">次のコード例は、<xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.Messaging.MessageQueueTransactionType%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3030">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.Messaging.MessageQueueTransactionType%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#2](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#2)]
 [!code-csharp[MessageQueue2#2](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-3031"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3031">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3032"><see cref="P:System.Messaging.MessageQueue.Path" /> プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3032">The <see cref="P:System.Messaging.MessageQueue.Path" /> property has not been set.</span></span>  
  
<span data-ttu-id="2e7ae-3033">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3033">-or-</span></span> 
<span data-ttu-id="2e7ae-3034">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3034">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
        <altmember cref="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (object obj, string label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(object obj, string label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Send(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (obj As Object, label As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Object ^ obj, System::String ^ label);" />
      <MemberSignature Language="F#" Value="member this.Send : obj * string -&gt; unit" Usage="messageQueue.Send (obj, label)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="label" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2e7ae-3035">キューに送信するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3035">The object to send to the queue.</span></span></param>
        <param name="label"><span data-ttu-id="2e7ae-3036">メッセージのラベル。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3036">The label of the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-3037">この <see cref="T:System.Messaging.MessageQueue" /> で参照される非トランザクション キューにオブジェクトを送信し、メッセージのラベルを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3037">Sends an object to the non-transactional queue referenced by this <see cref="T:System.Messaging.MessageQueue" /> and specifies a label for the message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3038">このオーバーロードを使用して、 `obj`パラメーターを含むメッセージを、 <xref:System.Messaging.MessageQueue>によって参照されるキューに送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3038">Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>.</span></span> <span data-ttu-id="2e7ae-3039">このオーバーロードを使用すると、メッセージを識別する文字列ラベルを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3039">With this overload, you can specify the string label that identifies the message.</span></span> <span data-ttu-id="2e7ae-3040">キューに送信するオブジェクトには、 <xref:System.Messaging.Message>、構造体、データオブジェクト、または任意のマネージオブジェクトを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3040">The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object.</span></span> <span data-ttu-id="2e7ae-3041">以外のオブジェクトを送信すると<xref:System.Messaging.Message>、オブジェクトがシリアル化され、メッセージの本文に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3041">If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.</span></span>  
  
 <span data-ttu-id="2e7ae-3042">メッセージラベルは、メッセージキューのラベルとは異なりますが、どちらもアプリケーションに依存し、メッセージキューに対しては意味を継承しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3042">The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.</span></span>  
  
 <span data-ttu-id="2e7ae-3043">このオーバーロードを使用してトランザクションキューにメッセージを送信すると、メッセージは配信不能キューに送信されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3043">If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue.</span></span> <span data-ttu-id="2e7ae-3044">メッセージを他のメッセージを含むトランザクションの一部にする場合は、パラメーターとしてまたは<xref:System.Messaging.MessageQueueTransaction> <xref:System.Messaging.MessageQueueTransactionType>を受け取るオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3044">If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-3045">メッセージ<xref:System.Messaging.MessageQueue.Path%2A>を送信する<xref:System.Messaging.MessageQueue>前に、このインスタンスのプロパティを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3045">The <xref:System.Messaging.MessageQueue.Path%2A> property for this <xref:System.Messaging.MessageQueue> instance must be specified before you send the message.</span></span> <span data-ttu-id="2e7ae-3046">を呼び出す<xref:System.Messaging.MessageQueue.Formatter%2A> <xref:System.Messaging.MessageQueue.Send%28System.Object%29>前にプロパティを設定しなかった場合、フォーマッタ<xref:System.Messaging.XmlMessageFormatter>は既定でに設定されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3046">If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 <span data-ttu-id="2e7ae-3047">プロパティ<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>は、 <xref:System.Messaging.Message>以外のすべてのオブジェクトに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3047">The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>.</span></span> <span data-ttu-id="2e7ae-3048">たとえば、 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>メンバーを使用してラベルや優先順位を指定した場合、これらの値は、アプリケーションからキューに送信されるときに<xref:System.Messaging.Message>型ではないオブジェクトを含むメッセージに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3048">If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue.</span></span> <span data-ttu-id="2e7ae-3049">を<xref:System.Messaging.Message>送信する場合、に設定<xref:System.Messaging.Message>されるプロパティ値が優先<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>され、メッセージ<xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType>のプロパティがキューの<xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType>プロパティよりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3049">When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="2e7ae-3050">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3050">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3051">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3051">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3052">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3052">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3053">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3053">Local computer</span></span>|<span data-ttu-id="2e7ae-3054">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3054">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3055">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3055">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3056">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3056">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3057">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3057">Remote computer</span></span>|<span data-ttu-id="2e7ae-3058">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3058">No</span></span>|  
|<span data-ttu-id="2e7ae-3059">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3059">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3060">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3060">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-3061">次のコード例は、<xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.String%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3061">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.String%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#1)]
 [!code-csharp[MessageQueue2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-3062"><paramref name="label" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3062">The <paramref name="label" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3063"><see cref="P:System.Messaging.MessageQueue.Path" /> プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3063">The <see cref="P:System.Messaging.MessageQueue.Path" /> property has not been set.</span></span>  
  
<span data-ttu-id="2e7ae-3064">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3064">-or-</span></span> 
<span data-ttu-id="2e7ae-3065">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3065">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (object obj, string label, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(object obj, string label, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (obj As Object, label As String, transaction As MessageQueueTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Object ^ obj, System::String ^ label, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.Send : obj * string * System.Messaging.MessageQueueTransaction -&gt; unit" Usage="messageQueue.Send (obj, label, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2e7ae-3066">キューに送信するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3066">The object to send to the queue.</span></span></param>
        <param name="label"><span data-ttu-id="2e7ae-3067">メッセージのラベル。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3067">The label of the message.</span></span></param>
        <param name="transaction"><span data-ttu-id="2e7ae-3068"><see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3068">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</span></span></param>
        <summary><span data-ttu-id="2e7ae-3069">この <see cref="T:System.Messaging.MessageQueue" /> で参照されるトランザクション キューにオブジェクトを送信し、メッセージのラベルを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3069">Sends an object to the transactional queue referenced by this <see cref="T:System.Messaging.MessageQueue" /> and specifies a label for the message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3070">このオーバーロードを使用して、パラメーターで`obj` `transaction`定義された内部トランザクションコンテキストを使用<xref:System.Messaging.MessageQueue>して、によって参照されるトランザクションキューにパラメーターを含むメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3070">Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter.</span></span> <span data-ttu-id="2e7ae-3071">このオーバーロードを使用すると、メッセージを識別する文字列ラベルを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3071">With this overload, you can specify the string label that identifies the message.</span></span> <span data-ttu-id="2e7ae-3072">キューに送信するオブジェクトには、 <xref:System.Messaging.Message>、構造体、データオブジェクト、または任意のマネージオブジェクトを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3072">The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object.</span></span> <span data-ttu-id="2e7ae-3073">以外のオブジェクトを送信すると<xref:System.Messaging.Message>、オブジェクトがシリアル化され、メッセージの本文に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3073">If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.</span></span>  
  
 <span data-ttu-id="2e7ae-3074">メッセージラベルは、メッセージキューのラベルとは異なりますが、どちらもアプリケーションに依存し、メッセージキューに対しては意味を継承しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3074">The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.</span></span>  
  
 <span data-ttu-id="2e7ae-3075">このオーバーロードを使用して非トランザクションキューにメッセージを送信すると、例外をスローすることなく、メッセージが配信不能キューに送信される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3075">If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.</span></span>  
  
 <span data-ttu-id="2e7ae-3076">を呼び出す<xref:System.Messaging.MessageQueue.Formatter%2A> <xref:System.Messaging.MessageQueue.Send%28System.Object%29>前にプロパティを設定しなかった場合、フォーマッタ<xref:System.Messaging.XmlMessageFormatter>は既定でに設定されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3076">If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 <span data-ttu-id="2e7ae-3077">プロパティ<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>は、 <xref:System.Messaging.Message>以外のすべてのオブジェクトに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3077">The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>.</span></span> <span data-ttu-id="2e7ae-3078">たとえば、 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>メンバーを使用してラベルや優先順位を指定した場合、これらの値は、アプリケーションからキューに送信されるときに<xref:System.Messaging.Message>型ではないオブジェクトを含むメッセージに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3078">If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue.</span></span> <span data-ttu-id="2e7ae-3079">を<xref:System.Messaging.Message>送信する場合、に設定<xref:System.Messaging.Message>されるプロパティ値が優先<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>され、メッセージ<xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType>のプロパティがキューの<xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType>プロパティよりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3079">When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType> property</span></span>  
  
 <span data-ttu-id="2e7ae-3080"><xref:System.Messaging.MessageQueueTransaction>はスレッドアパートメントに対応しているため、アパートメント`STA`状態がの場合、複数のスレッドでトランザクションを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3080"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="2e7ae-3081">Visual Basic はメインスレッドの状態をに`STA`設定します。したがって、 <xref:System.MTAThreadAttribute>を`Main`サブルーチンに適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3081">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="2e7ae-3082">適用しない場合、別のスレッドを使用してトランザクション メッセージを送信すると、<xref:System.Messaging.MessageQueueException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3082">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="2e7ae-3083">を適用する<xref:System.MTAThreadAttribute>には、次のフラグメントを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3083">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 <span data-ttu-id="2e7ae-3084">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3084">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3085">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3085">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3086">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3086">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3087">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3087">Local computer</span></span>|<span data-ttu-id="2e7ae-3088">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3088">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3089">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3089">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3090">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3090">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3091">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3091">Remote computer</span></span>|<span data-ttu-id="2e7ae-3092">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3092">No</span></span>|  
|<span data-ttu-id="2e7ae-3093">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3093">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3094">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3094">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-3095">次のコード例は、<xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.String%2CSystem.Messaging.MessageQueueTransaction%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3095">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.String%2CSystem.Messaging.MessageQueueTransaction%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#4](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#4)]
 [!code-csharp[MessageQueue2#4](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-3096"><paramref name="label" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3096">The <paramref name="label" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2e7ae-3097">- または -</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3097">-or-</span></span> 
<span data-ttu-id="2e7ae-3098"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3098">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3099"><see cref="P:System.Messaging.MessageQueue.Path" /> プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3099">The <see cref="P:System.Messaging.MessageQueue.Path" /> property has not been set.</span></span>  
  
<span data-ttu-id="2e7ae-3100">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3100">-or-</span></span> 
<span data-ttu-id="2e7ae-3101">メッセージ キュー アプリケーションが、トランザクションの使用方法が間違っていることを示しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3101">The Message Queuing application indicated an incorrect transaction usage.</span></span>  
  
<span data-ttu-id="2e7ae-3102">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3102">-or-</span></span> 
<span data-ttu-id="2e7ae-3103">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3103">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (object obj, string label, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(object obj, string label, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (obj As Object, label As String, transactionType As MessageQueueTransactionType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Object ^ obj, System::String ^ label, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.Send : obj * string * System.Messaging.MessageQueueTransactionType -&gt; unit" Usage="messageQueue.Send (obj, label, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2e7ae-3104">キューに送信するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3104">The object to send to the queue.</span></span></param>
        <param name="label"><span data-ttu-id="2e7ae-3105">メッセージのラベル。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3105">The label of the message.</span></span></param>
        <param name="transactionType"><span data-ttu-id="2e7ae-3106">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3106">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="2e7ae-3107">この <see cref="T:System.Messaging.MessageQueue" /> で参照されるキューにオブジェクトを送信し、メッセージのラベルを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3107">Sends an object to the queue referenced by this <see cref="T:System.Messaging.MessageQueue" /> and specifies a label for the message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3108">このオーバーロードを使用して、パラメーターで`obj` `transactionType`定義されているトランザクションコンテキストを<xref:System.Messaging.MessageQueue>使用して、によって参照されるキューにパラメーターを含むメッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3108">Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="2e7ae-3109">メッセージ`Automatic`の送信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3109">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message.</span></span> <span data-ttu-id="2e7ae-3110">メッセージ`Single`を1つの内部トランザクションとして送信するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3110">Specify `Single` if you want to send the message as a single internal transaction.</span></span> <span data-ttu-id="2e7ae-3111">トランザクションメッセージを`None`非トランザクションスレッドに送信するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3111">You can specify `None` if you want to send a transactional message to a non-transactional thread.</span></span>  
  
 <span data-ttu-id="2e7ae-3112">キューに送信するオブジェクトは、 <xref:System.Messaging.Message>または任意のマネージオブジェクトにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3112">The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object.</span></span> <span data-ttu-id="2e7ae-3113">以外のオブジェクトを送信すると<xref:System.Messaging.Message>、オブジェクトがシリアル化され、メッセージの本文に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3113">If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.</span></span> <span data-ttu-id="2e7ae-3114">このオーバーロードを使用すると、メッセージを識別する文字列ラベルを指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3114">With this overload, you can specify the string label that identifies the message.</span></span>  
  
 <span data-ttu-id="2e7ae-3115">メッセージラベルは、メッセージキューのラベルとは異なりますが、どちらもアプリケーションに依存し、メッセージキューに対しては意味を継承しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3115">The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.</span></span>  
  
 <span data-ttu-id="2e7ae-3116">を呼び出す<xref:System.Messaging.MessageQueue.Formatter%2A> <xref:System.Messaging.MessageQueue.Send%28System.Object%29>前にプロパティを設定しなかった場合、フォーマッタ<xref:System.Messaging.XmlMessageFormatter>は既定でに設定されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3116">If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 <span data-ttu-id="2e7ae-3117">プロパティ<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>は、 <xref:System.Messaging.Message>以外のすべてのオブジェクトに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3117">The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>.</span></span> <span data-ttu-id="2e7ae-3118">たとえば、 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>メンバーを使用してラベルや優先順位を指定した場合、これらの値は、アプリケーションからキューに送信されるときに<xref:System.Messaging.Message>型ではないオブジェクトを含むメッセージに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3118">If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue.</span></span> <span data-ttu-id="2e7ae-3119">を<xref:System.Messaging.Message>送信するときに、に設定<xref:System.Messaging.Message>されたプロパティ値<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>が優先され、 <xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType>メッセージのプロパティがキューの<xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType>プロパティよりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3119">When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=nameWithType> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="2e7ae-3120">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3120">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3121">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3121">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3122">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3122">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3123">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3123">Local computer</span></span>|<span data-ttu-id="2e7ae-3124">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3124">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3125">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3125">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3126">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3126">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3127">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3127">Remote computer</span></span>|<span data-ttu-id="2e7ae-3128">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3128">No</span></span>|  
|<span data-ttu-id="2e7ae-3129">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3129">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3130">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3130">Yes</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-3131">次のコード例は、<xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.String%2CSystem.Messaging.MessageQueueTransactionType%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3131">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.String%2CSystem.Messaging.MessageQueueTransactionType%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#3](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#3)]
 [!code-csharp[MessageQueue2#3](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2e7ae-3132"><paramref name="label" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3132">The <paramref name="label" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueTransaction"><span data-ttu-id="2e7ae-3133">メッセージ キュー アプリケーションが、トランザクションの使用方法が間違っていることを示しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3133">The Message Queuing application indicated an incorrect transaction usage.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="2e7ae-3134"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3134">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3135"><see cref="P:System.Messaging.MessageQueue.Path" /> プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3135">The <see cref="P:System.Messaging.MessageQueue.Path" /> property has not been set.</span></span>  
  
<span data-ttu-id="2e7ae-3136">または</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3136">-or-</span></span> 
<span data-ttu-id="2e7ae-3137">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3137">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
        <altmember cref="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetPermissions">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2e7ae-3138">現在のセットにアクセス許可を追加します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3138">Adds permissions to the current set.</span></span> <span data-ttu-id="2e7ae-3139">キューのプロパティとキューのメッセージにアクセスできるユーザーを制御します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3139">This controls who has access rights to queue properties and messages in the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetPermissions">
      <MemberSignature Language="C#" Value="public void SetPermissions (System.Messaging.AccessControlList dacl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPermissions(class System.Messaging.AccessControlList dacl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.SetPermissions(System.Messaging.AccessControlList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPermissions (dacl As AccessControlList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPermissions(System::Messaging::AccessControlList ^ dacl);" />
      <MemberSignature Language="F#" Value="member this.SetPermissions : System.Messaging.AccessControlList -&gt; unit" Usage="messageQueue.SetPermissions dacl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dacl" Type="System.Messaging.AccessControlList" />
      </Parameters>
      <Docs>
        <param name="dacl"><span data-ttu-id="2e7ae-3140">トラスティと付与するアクセス許可を指定する 1 つ以上のアクセス制御エントリを含む <see cref="T:System.Messaging.AccessControlList" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3140">A <see cref="T:System.Messaging.AccessControlList" /> that contains one or more access control entries that specify the trustees and the permissions to grant.</span></span></param>
        <summary><span data-ttu-id="2e7ae-3141">アクセス制御リストの内容に基づいてアクセス権をキューに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3141">Assigns access rights to the queue based on the contents of an access control list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3142">権限の許可、拒否、または取り消しを行うには、このオーバーロードを使用して、トラスティおよびアクセス許可情報を指定するアクセス制御エントリのコレクションを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3142">Use this overload to grant, deny, or revoke rights by using a collection of access control entries to specify trustee and permissions information.</span></span> <span data-ttu-id="2e7ae-3143">これは、たとえば、複数のユーザーに同時にアクセス許可を付与するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3143">This is used, for example, to grant permissions to multiple users at the same time.</span></span>  
  
 <span data-ttu-id="2e7ae-3144">`ace`パラメーターを構築するときに指定するトラスティは、個々のユーザー、ユーザーのグループ、またはコンピューターです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3144">The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer.</span></span> <span data-ttu-id="2e7ae-3145">トラスティが個人の場合は、という形式`DOMAIN` \\ `user`を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3145">If the trustee is an individual, use the format `DOMAIN`\\`user`.</span></span> <span data-ttu-id="2e7ae-3146">トラスティがローカルコンピューターを示す場合は、"." を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3146">You can specify "." for the trustee to indicate the local computer.</span></span>  
  
 <span data-ttu-id="2e7ae-3147">既存のリストに権限<xref:System.Messaging.MessageQueue.SetPermissions%2A>を追加して割り当てるアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3147">The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list.</span></span> <span data-ttu-id="2e7ae-3148">既定では、パブリックキューまたは専用キューの作成者にはフルコントロールがあり、ドメイングループのすべてのユーザーは、キュープロパティの取得、アクセス許可の取得、およびキューへの書き込みを行う権限を持っています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3148">By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue.</span></span> <span data-ttu-id="2e7ae-3149">を呼び出す<xref:System.Messaging.MessageQueue.SetPermissions%2A>と、ユーザーとアクセス許可の情報が既存のリストの一番下に追加されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3149">When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.</span></span>  
  
 <span data-ttu-id="2e7ae-3150">システムは、次<xref:System.Messaging.AccessControlEntry>のいずれかのイベントが発生するまで、各を順番に調べます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3150">The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:</span></span>  
  
-   <span data-ttu-id="2e7ae-3151">アクセス拒否<xref:System.Messaging.AccessControlEntry>は、スレッドのアクセストークンに示されているいずれかのトラスティに対して、要求されたアクセス権を明示的に拒否します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3151">An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.</span></span>  
  
-   <span data-ttu-id="2e7ae-3152">スレッドのアクセストークンに一覧<xref:System.Messaging.AccessControlEntry>表示されているトラスティの1つまたは複数のアクセス許可項目は、要求されたすべてのアクセス権を明示的に付与します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3152">One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.</span></span>  
  
-   <span data-ttu-id="2e7ae-3153">すべて<xref:System.Messaging.AccessControlEntry>の項目がチェックされており、明示的に許可されていないアクセス権が少なくとも1つは存在します。この場合、アクセスは暗黙的に拒否されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3153">All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.</span></span>  
  
 <span data-ttu-id="2e7ae-3154">`dacl`パラメーターを構築する場合は、 <xref:System.Messaging.AccessControlList>コレクション<xref:System.Messaging.AccessControlEntry>にインスタンスを追加します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3154">When you construct the `dacl` parameter, you add <xref:System.Messaging.AccessControlEntry> instances to your <xref:System.Messaging.AccessControlList> collection.</span></span> <span data-ttu-id="2e7ae-3155">各アクセス制御エントリを作成するときに、汎用または標準のアクセス権を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3155">When you construct each access control entry, you can specify generic or standard access rights.</span></span> <span data-ttu-id="2e7ae-3156">キューに対する権限は、次の任意の組み合わせにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3156">The rights to a queue can be any combination of the following:</span></span>  
  
-   <span data-ttu-id="2e7ae-3157">削除</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3157">Delete</span></span>  
  
-   <span data-ttu-id="2e7ae-3158">セキュリティの読み取り</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3158">Read Security</span></span>  
  
-   <span data-ttu-id="2e7ae-3159">書き込みセキュリティ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3159">Write Security</span></span>  
  
-   <span data-ttu-id="2e7ae-3160">同期</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3160">Synchronize</span></span>  
  
-   <span data-ttu-id="2e7ae-3161">所有者の変更</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3161">Modify Owner</span></span>  
  
-   <span data-ttu-id="2e7ae-3162">読み取り</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3162">Read</span></span>  
  
-   <span data-ttu-id="2e7ae-3163">Write</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3163">Write</span></span>  
  
-   <span data-ttu-id="2e7ae-3164">実行</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3164">Execute</span></span>  
  
-   <span data-ttu-id="2e7ae-3165">必須</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3165">Required</span></span>  
  
-   <span data-ttu-id="2e7ae-3166">すべて</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3166">All</span></span>  
  
-   <span data-ttu-id="2e7ae-3167">None</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3167">None</span></span>  
  
 <span data-ttu-id="2e7ae-3168">これらの権限は、ビットフラグのセットであり、またはビットごとの演算子を使用して組み合わせることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3168">These rights are a set of bit flags that you can combine using the OR bitwise operator.</span></span>  
  
-   <span data-ttu-id="2e7ae-3169">フル コントロール</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3169">Full Control</span></span>  
  
-   <span data-ttu-id="2e7ae-3170">メッセージの削除</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3170">Delete Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3171">メッセージの受信</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3171">Receive Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3172">メッセージのピーク</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3172">Peek Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3173">ジャーナルメッセージの受信</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3173">Receive Journal Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3174">キューのプロパティを取得する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3174">Get Queue Properties</span></span>  
  
-   <span data-ttu-id="2e7ae-3175">キューのプロパティの設定</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3175">Set Queue Properties</span></span>  
  
-   <span data-ttu-id="2e7ae-3176">アクセス許可の取得</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3176">Get Permissions</span></span>  
  
-   <span data-ttu-id="2e7ae-3177">アクセス許可を設定する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3177">Set Permissions</span></span>  
  
-   <span data-ttu-id="2e7ae-3178">キューの所有権を取得する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3178">Take Queue Ownership</span></span>  
  
-   <span data-ttu-id="2e7ae-3179">メッセージの書き込み</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3179">Write Message</span></span>  
  
 <span data-ttu-id="2e7ae-3180">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3180">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3181">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3181">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3182">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3182">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3183">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3183">Local computer</span></span>|<span data-ttu-id="2e7ae-3184">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3184">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3185">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3185">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3186">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3186">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3187">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3187">Remote computer</span></span>|<span data-ttu-id="2e7ae-3188">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3188">No</span></span>|  
|<span data-ttu-id="2e7ae-3189">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3189">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3190">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3190">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-3191">次のコード例は、<xref:System.Messaging.MessageQueue.SetPermissions%28System.Messaging.AccessControlList%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3191">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.SetPermissions%28System.Messaging.AccessControlList%29>.</span></span>      
  
 [!code-cpp[MessageQueue2#26](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#26)]
 [!code-csharp[MessageQueue2#26](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3192">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3192">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.ResetPermissions" />
        <altmember cref="T:System.Messaging.Trustee" />
        <altmember cref="T:System.Messaging.AccessControlList" />
      </Docs>
    </Member>
    <Member MemberName="SetPermissions">
      <MemberSignature Language="C#" Value="public void SetPermissions (System.Messaging.MessageQueueAccessControlEntry ace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPermissions(class System.Messaging.MessageQueueAccessControlEntry ace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.SetPermissions(System.Messaging.MessageQueueAccessControlEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPermissions (ace As MessageQueueAccessControlEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPermissions(System::Messaging::MessageQueueAccessControlEntry ^ ace);" />
      <MemberSignature Language="F#" Value="member this.SetPermissions : System.Messaging.MessageQueueAccessControlEntry -&gt; unit" Usage="messageQueue.SetPermissions ace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ace" Type="System.Messaging.MessageQueueAccessControlEntry" />
      </Parameters>
      <Docs>
        <param name="ace"><span data-ttu-id="2e7ae-3193">ユーザー、アクセスの種類、およびアクセス許可の種類を指定する <see cref="T:System.Messaging.MessageQueueAccessControlEntry" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3193">A <see cref="T:System.Messaging.MessageQueueAccessControlEntry" /> that specifies a user, an access type, and a permission type.</span></span></param>
        <summary><span data-ttu-id="2e7ae-3194">アクセス制御エントリの内容に基づいてアクセス権をキューに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3194">Assigns access rights to the queue based on the contents of an access control entry.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3195">権限を許可、拒否、または取り消すには、アクセス制御エントリを使用してトラスティと権限情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3195">Use this overload to grant, deny, or revoke rights by using an access control entry to specify trustee and rights information.</span></span>  
  
 <span data-ttu-id="2e7ae-3196">`ace`パラメーターを構築するときに指定するトラスティは、個々のユーザー、ユーザーのグループ、またはコンピューターです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3196">The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer.</span></span> <span data-ttu-id="2e7ae-3197">トラスティが個人の場合は、という形式`DOMAIN` \\ `user`を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3197">If the trustee is an individual, use the format `DOMAIN`\\`user`.</span></span> <span data-ttu-id="2e7ae-3198">トラスティがローカルコンピューターを示す場合は、"." を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3198">You can specify "." for the trustee to indicate the local computer.</span></span>  
  
 <span data-ttu-id="2e7ae-3199">既存のリストに権限<xref:System.Messaging.MessageQueue.SetPermissions%2A>を追加して割り当てるアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3199">The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list.</span></span> <span data-ttu-id="2e7ae-3200">既定では、パブリックキューまたは専用キューの作成者にはフルコントロールがあり、ドメイングループのすべてのユーザーは、キュープロパティの取得、アクセス許可の取得、およびキューへの書き込みを行う権限を持っています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3200">By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue.</span></span> <span data-ttu-id="2e7ae-3201">を呼び出す<xref:System.Messaging.MessageQueue.SetPermissions%2A>と、ユーザーとアクセス許可の情報が既存のリストの一番下に追加されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3201">When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.</span></span>  
  
 <span data-ttu-id="2e7ae-3202">システムは、次<xref:System.Messaging.AccessControlEntry>のいずれかのイベントが発生するまで、各を順番に調べます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3202">The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:</span></span>  
  
-   <span data-ttu-id="2e7ae-3203">アクセス拒否<xref:System.Messaging.AccessControlEntry>は、スレッドのアクセストークンに示されているいずれかのトラスティに対して、要求されたアクセス権を明示的に拒否します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3203">An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.</span></span>  
  
-   <span data-ttu-id="2e7ae-3204">スレッドのアクセストークンに一覧<xref:System.Messaging.AccessControlEntry>表示されているトラスティの1つまたは複数のアクセス許可項目は、要求されたすべてのアクセス権を明示的に付与します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3204">One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.</span></span>  
  
-   <span data-ttu-id="2e7ae-3205">すべて<xref:System.Messaging.AccessControlEntry>の項目がチェックされており、明示的に許可されていないアクセス権が少なくとも1つは存在します。この場合、アクセスは暗黙的に拒否されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3205">All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.</span></span>  
  
 <span data-ttu-id="2e7ae-3206">`rights` を <xref:System.Messaging.MessageQueueAccessControlEntry> 構築するときにパラメーターで指定するキューに対する権限は、次の任意の組み合わせにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3206">The rights to a queue, which you specify in the `rights` parameter when you construct your <xref:System.Messaging.MessageQueueAccessControlEntry>, can be any combination of the following:</span></span>  
  
-   <span data-ttu-id="2e7ae-3207">フル コントロール</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3207">Full Control</span></span>  
  
-   <span data-ttu-id="2e7ae-3208">メッセージの削除</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3208">Delete Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3209">メッセージの受信</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3209">Receive Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3210">メッセージのピーク</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3210">Peek Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3211">ジャーナルメッセージの受信</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3211">Receive Journal Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3212">キューのプロパティを取得する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3212">Get Queue Properties</span></span>  
  
-   <span data-ttu-id="2e7ae-3213">キューのプロパティの設定</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3213">Set Queue Properties</span></span>  
  
-   <span data-ttu-id="2e7ae-3214">アクセス許可の取得</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3214">Get Permissions</span></span>  
  
-   <span data-ttu-id="2e7ae-3215">アクセス許可を設定する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3215">Set Permissions</span></span>  
  
-   <span data-ttu-id="2e7ae-3216">キューの所有権を取得する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3216">Take Queue Ownership</span></span>  
  
-   <span data-ttu-id="2e7ae-3217">メッセージの書き込み</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3217">Write Message</span></span>  
  
 <span data-ttu-id="2e7ae-3218">パラメーターのコンストラクターで指定する<xref:System.Messaging.MessageQueueAccessRights> パラメーターは、列挙型のフラグです。 `rights`  `ace`</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3218">The `rights` parameter you specify in the constructor for the `ace` parameter is a flag of the <xref:System.Messaging.MessageQueueAccessRights> enumeration.</span></span> <span data-ttu-id="2e7ae-3219">これは、ビットごとの演算子を使用するか、 `rights`パラメーターを作成するときに組み合わせることができる一連のビットフラグを表します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3219">It represents a set of bit flags that you can combine using the bitwise operator OR when you build the `rights` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-3220">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3220">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3221">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3221">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3222">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3222">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3223">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3223">Local computer</span></span>|<span data-ttu-id="2e7ae-3224">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3224">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3225">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3225">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3226">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3226">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3227">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3227">Remote computer</span></span>|<span data-ttu-id="2e7ae-3228">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3228">No</span></span>|  
|<span data-ttu-id="2e7ae-3229">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3229">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3230">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3230">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-3231">次のコード例は、<xref:System.Messaging.MessageQueue.SetPermissions%28System.Messaging.MessageQueueAccessControlEntry%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3231">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.SetPermissions%28System.Messaging.MessageQueueAccessControlEntry%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#24](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#24)]
 [!code-csharp[MessageQueue2#24](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3232">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3232">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.ResetPermissions" />
        <altmember cref="T:System.Messaging.Trustee" />
        <altmember cref="T:System.Messaging.MessageQueueAccessRights" />
        <altmember cref="T:System.Messaging.MessageQueueAccessControlEntry" />
      </Docs>
    </Member>
    <Member MemberName="SetPermissions">
      <MemberSignature Language="C#" Value="public void SetPermissions (string user, System.Messaging.MessageQueueAccessRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPermissions(string user, valuetype System.Messaging.MessageQueueAccessRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPermissions (user As String, rights As MessageQueueAccessRights)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPermissions(System::String ^ user, System::Messaging::MessageQueueAccessRights rights);" />
      <MemberSignature Language="F#" Value="member this.SetPermissions : string * System.Messaging.MessageQueueAccessRights -&gt; unit" Usage="messageQueue.SetPermissions (user, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="System.String" />
        <Parameter Name="rights" Type="System.Messaging.MessageQueueAccessRights" />
      </Parameters>
      <Docs>
        <param name="user"><span data-ttu-id="2e7ae-3233">キューに対する追加のアクセス権を取得するそれぞれのユーザー、グループ、またはコンピューター。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3233">The individual, group, or computer that gets additional rights to the queue.</span></span></param>
        <param name="rights"><span data-ttu-id="2e7ae-3234">メッセージ キューが <paramref name="user" /> に割り当てるキューに対するアクセス権のセットを示す <see cref="T:System.Messaging.MessageQueueAccessRights" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3234">A <see cref="T:System.Messaging.MessageQueueAccessRights" /> that indicates the set of rights to the queue that Message Queuing assigns to the <paramref name="user" /> passed in.</span></span></param>
        <summary><span data-ttu-id="2e7ae-3235">コンピューター、グループ、またはユーザーに指定したアクセス権を与えます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3235">Gives a computer, group, or user the specified access rights.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3236">このオーバーロードを使用して、指定した権限を個々のユーザーに付与します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3236">Use this overload to grant specified rights to an individual user.</span></span> <span data-ttu-id="2e7ae-3237">ユーザーは、個々のユーザー、ユーザーグループ、またはコンピューターを含む任意の有効なトラスティにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3237">The user can be any valid trustee, which includes individual users, groups of users, or a computer.</span></span> <span data-ttu-id="2e7ae-3238">ユーザーが個人の場合`DOMAIN`は、 `user`パラメーターの形式\\ `user`を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3238">If the user is an individual, use the format `DOMAIN`\\`user` for the `user` parameter.</span></span> <span data-ttu-id="2e7ae-3239">`user`パラメーターに "." を指定すると、ローカルコンピューターを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3239">You can specify "." for the `user` parameter to indicate the local computer.</span></span>  
  
 <span data-ttu-id="2e7ae-3240">既存のリストに権限<xref:System.Messaging.MessageQueue.SetPermissions%2A>を追加して割り当てるアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3240">The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list.</span></span> <span data-ttu-id="2e7ae-3241">既定では、パブリックキューまたは専用キューの作成者にはフルコントロールがあり、ドメイングループのすべてのユーザーは、キュープロパティの取得、アクセス許可の取得、およびキューへの書き込みを行う権限を持っています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3241">By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue.</span></span> <span data-ttu-id="2e7ae-3242">を呼び出す<xref:System.Messaging.MessageQueue.SetPermissions%2A>と、ユーザーとアクセス許可の情報が既存のリストの一番下に追加されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3242">When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.</span></span>  
  
 <span data-ttu-id="2e7ae-3243">システムは、次<xref:System.Messaging.AccessControlEntry>のいずれかのイベントが発生するまで、各を順番に調べます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3243">The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:</span></span>  
  
-   <span data-ttu-id="2e7ae-3244">アクセス拒否<xref:System.Messaging.AccessControlEntry>は、スレッドのアクセストークンに示されているいずれかのトラスティに対して、要求されたアクセス権を明示的に拒否します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3244">An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.</span></span>  
  
-   <span data-ttu-id="2e7ae-3245">スレッドのアクセストークンに一覧<xref:System.Messaging.AccessControlEntry>表示されているトラスティの1つまたは複数のアクセス許可項目は、要求されたすべてのアクセス権を明示的に付与します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3245">One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.</span></span>  
  
-   <span data-ttu-id="2e7ae-3246">すべて<xref:System.Messaging.AccessControlEntry>の項目がチェックされており、明示的に許可されていないアクセス権が少なくとも1つは存在します。この場合、アクセスは暗黙的に拒否されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3246">All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.</span></span>  
  
 <span data-ttu-id="2e7ae-3247">`rights`パラメーターで指定したキューに対する権限は、次の任意の組み合わせにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3247">The rights to a queue, specified in the `rights` parameter, can be any combination of the following:</span></span>  
  
-   <span data-ttu-id="2e7ae-3248">フル コントロール</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3248">Full Control</span></span>  
  
-   <span data-ttu-id="2e7ae-3249">メッセージの削除</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3249">Delete Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3250">メッセージの受信</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3250">Receive Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3251">メッセージのピーク</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3251">Peek Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3252">ジャーナルメッセージの受信</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3252">Receive Journal Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3253">キューのプロパティを取得する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3253">Get Queue Properties</span></span>  
  
-   <span data-ttu-id="2e7ae-3254">キューのプロパティの設定</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3254">Set Queue Properties</span></span>  
  
-   <span data-ttu-id="2e7ae-3255">アクセス許可の取得</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3255">Get Permissions</span></span>  
  
-   <span data-ttu-id="2e7ae-3256">アクセス許可を設定する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3256">Set Permissions</span></span>  
  
-   <span data-ttu-id="2e7ae-3257">キューの所有権を取得する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3257">Take Queue Ownership</span></span>  
  
-   <span data-ttu-id="2e7ae-3258">メッセージの書き込み</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3258">Write Message</span></span>  
  
 <span data-ttu-id="2e7ae-3259">列挙<xref:System.Messaging.MessageQueueAccessRights>は、ビットフラグのセットを表します。ビットフラグは、ビットごとの演算子を`rights`使用して組み合わせることも、パラメーターを作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3259">The <xref:System.Messaging.MessageQueueAccessRights> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the `rights` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-3260">このオーバーロードでは、アクセス許可のみを付与できます。これらのユーザーは、取り消したり拒否したりすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3260">With this overload, you can only grant permissions; you cannot revoke or deny them.</span></span> <span data-ttu-id="2e7ae-3261"><xref:System.Messaging.AccessControlEntryType> 以外 `Allow` のを明示的に付与するには、別のオーバーロードを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3261">You must use a different overload to explicitly grant any <xref:System.Messaging.AccessControlEntryType> other than `Allow`.</span></span>  
  
 <span data-ttu-id="2e7ae-3262">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3262">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3263">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3263">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3264">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3264">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3265">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3265">Local computer</span></span>|<span data-ttu-id="2e7ae-3266">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3266">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3267">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3267">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3268">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3268">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3269">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3269">Remote computer</span></span>|<span data-ttu-id="2e7ae-3270">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3270">No</span></span>|  
|<span data-ttu-id="2e7ae-3271">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3271">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3272">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3272">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-3273">次のコード例は、<xref:System.Messaging.MessageQueue.SetPermissions%28System.String%2CSystem.Messaging.MessageQueueAccessRights%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3273">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.SetPermissions%28System.String%2CSystem.Messaging.MessageQueueAccessRights%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#23](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#23)]
 [!code-csharp[MessageQueue2#23](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2e7ae-3274"><paramref name="user" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3274">The <paramref name="user" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3275">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3275">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.ResetPermissions" />
        <altmember cref="T:System.Messaging.Trustee" />
        <altmember cref="T:System.Messaging.MessageQueueAccessRights" />
      </Docs>
    </Member>
    <Member MemberName="SetPermissions">
      <MemberSignature Language="C#" Value="public void SetPermissions (string user, System.Messaging.MessageQueueAccessRights rights, System.Messaging.AccessControlEntryType entryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPermissions(string user, valuetype System.Messaging.MessageQueueAccessRights rights, valuetype System.Messaging.AccessControlEntryType entryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPermissions (user As String, rights As MessageQueueAccessRights, entryType As AccessControlEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPermissions(System::String ^ user, System::Messaging::MessageQueueAccessRights rights, System::Messaging::AccessControlEntryType entryType);" />
      <MemberSignature Language="F#" Value="member this.SetPermissions : string * System.Messaging.MessageQueueAccessRights * System.Messaging.AccessControlEntryType -&gt; unit" Usage="messageQueue.SetPermissions (user, rights, entryType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="System.String" />
        <Parameter Name="rights" Type="System.Messaging.MessageQueueAccessRights" />
        <Parameter Name="entryType" Type="System.Messaging.AccessControlEntryType" />
      </Parameters>
      <Docs>
        <param name="user"><span data-ttu-id="2e7ae-3276">キューに対する追加のアクセス権を取得するそれぞれのユーザー、グループ、またはコンピューター。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3276">The individual, group, or computer that gets additional rights to the queue.</span></span></param>
        <param name="rights"><span data-ttu-id="2e7ae-3277">メッセージ キューが <paramref name="user" /> に割り当てるキューに対するアクセス権のセットを示す <see cref="T:System.Messaging.MessageQueueAccessRights" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3277">A <see cref="T:System.Messaging.MessageQueueAccessRights" /> that indicates the set of rights to the queue that Message Queuing assigns to the <paramref name="user" /> passed in.</span></span></param>
        <param name="entryType"><span data-ttu-id="2e7ae-3278"><paramref name="rights" /> パラメーターで指定したアクセス許可で、付与、拒否、取り消しのどの操作を実行するかを指定する <see cref="T:System.Messaging.AccessControlEntryType" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3278">A <see cref="T:System.Messaging.AccessControlEntryType" /> that specifies whether to grant, deny, or revoke the permissions specified by the <paramref name="rights" /> parameter.</span></span></param>
        <summary><span data-ttu-id="2e7ae-3279">アクセス制御の種類 (許可、拒否、取り消し、またはセット) からいずれかを指定して、コンピューター、グループ、またはユーザーに指定したアクセス権を付与します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3279">Gives a computer, group, or user the specified access rights, with the specified access control type (allow, deny, revoke, or set).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3280">このオーバーロードを使用して、個々のユーザーに対して指定された権限を許可、拒否、または取り消すことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3280">Use this overload to grant, deny, or revoke specified rights for an individual user.</span></span> <span data-ttu-id="2e7ae-3281">ユーザーは、個々のユーザー、ユーザーグループ、またはコンピューターを含む任意の有効なトラスティにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3281">The user can be any valid trustee, which includes individual users, groups of users, or a computer.</span></span> <span data-ttu-id="2e7ae-3282">ユーザーが個人の場合`DOMAIN`は、 `user`パラメーターの形式\\ `user`を使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3282">If the user is an individual, use the format `DOMAIN`\\`user` for the `user` parameter.</span></span> <span data-ttu-id="2e7ae-3283">`user`パラメーターに "." を指定すると、ローカルコンピューターを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3283">You can specify "." for the `user` parameter to indicate the local computer.</span></span>  
  
 <span data-ttu-id="2e7ae-3284">既存のリストに権限<xref:System.Messaging.MessageQueue.SetPermissions%2A>を追加して割り当てるアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3284">The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list.</span></span> <span data-ttu-id="2e7ae-3285">既定では、パブリックキューまたは専用キューの作成者にはフルコントロールがあり、ドメイングループのすべてのユーザーは、キュープロパティの取得、アクセス許可の取得、およびキューへの書き込みを行う権限を持っています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3285">By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue.</span></span> <span data-ttu-id="2e7ae-3286">を呼び出す<xref:System.Messaging.MessageQueue.SetPermissions%2A>と、ユーザーとアクセス許可の情報が既存のリストの一番下に追加されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3286">When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.</span></span>  
  
 <span data-ttu-id="2e7ae-3287">システムは、次<xref:System.Messaging.AccessControlEntry>のいずれかのイベントが発生するまで、各を順番に調べます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3287">The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:</span></span>  
  
-   <span data-ttu-id="2e7ae-3288">アクセス拒否<xref:System.Messaging.AccessControlEntry>は、スレッドのアクセストークンに示されているいずれかのトラスティに対して、要求されたアクセス権を明示的に拒否します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3288">An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.</span></span>  
  
-   <span data-ttu-id="2e7ae-3289">スレッドのアクセストークンに一覧<xref:System.Messaging.AccessControlEntry>表示されているトラスティの1つまたは複数のアクセス許可項目は、要求されたすべてのアクセス権を明示的に付与します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3289">One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.</span></span>  
  
-   <span data-ttu-id="2e7ae-3290">すべて<xref:System.Messaging.AccessControlEntry>の項目がチェックされており、明示的に許可されていないアクセス権が少なくとも1つは存在します。この場合、アクセスは暗黙的に拒否されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3290">All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.</span></span>  
  
 <span data-ttu-id="2e7ae-3291">`rights`パラメーターで指定したキューに対する権限は、次の任意の組み合わせにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3291">The rights to a queue, specified in the `rights` parameter, can be any combination of the following:</span></span>  
  
-   <span data-ttu-id="2e7ae-3292">フル コントロール</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3292">Full Control</span></span>  
  
-   <span data-ttu-id="2e7ae-3293">メッセージの削除</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3293">Delete Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3294">メッセージの受信</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3294">Receive Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3295">メッセージのピーク</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3295">Peek Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3296">ジャーナルメッセージの受信</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3296">Receive Journal Message</span></span>  
  
-   <span data-ttu-id="2e7ae-3297">キューのプロパティを取得する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3297">Get Queue Properties</span></span>  
  
-   <span data-ttu-id="2e7ae-3298">キューのプロパティの設定</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3298">Set Queue Properties</span></span>  
  
-   <span data-ttu-id="2e7ae-3299">アクセス許可の取得</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3299">Get Permissions</span></span>  
  
-   <span data-ttu-id="2e7ae-3300">アクセス許可を設定する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3300">Set Permissions</span></span>  
  
-   <span data-ttu-id="2e7ae-3301">キューの所有権を取得する</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3301">Take Queue Ownership</span></span>  
  
-   <span data-ttu-id="2e7ae-3302">メッセージの書き込み</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3302">Write Message</span></span>  
  
 <span data-ttu-id="2e7ae-3303">列挙<xref:System.Messaging.MessageQueueAccessRights>は、ビットフラグのセットを表します。ビットフラグは、ビットごとの演算子を`rights`使用して組み合わせることも、パラメーターを作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3303">The <xref:System.Messaging.MessageQueueAccessRights> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the `rights` parameter.</span></span>  
  
 <span data-ttu-id="2e7ae-3304">次の表に、この方法をさまざまなワークグループモードで使用できるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3304">The following table shows whether this method is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3305">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3305">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3306">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3306">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3307">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3307">Local computer</span></span>|<span data-ttu-id="2e7ae-3308">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3308">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3309">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3309">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3310">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3310">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3311">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3311">Remote computer</span></span>|<span data-ttu-id="2e7ae-3312">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3312">No</span></span>|  
|<span data-ttu-id="2e7ae-3313">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3313">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3314">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3314">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-3315">次のコード例は、<xref:System.Messaging.MessageQueue.SetPermissions%28System.String%2CSystem.Messaging.MessageQueueAccessRights%2CSystem.Messaging.AccessControlEntryType%29> の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3315">The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.SetPermissions%28System.String%2CSystem.Messaging.MessageQueueAccessRights%2CSystem.Messaging.AccessControlEntryType%29>.</span></span>  
  
 [!code-cpp[MessageQueue2#25](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#25)]
 [!code-csharp[MessageQueue2#25](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3316">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3316">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueue.ResetPermissions" />
        <altmember cref="T:System.Messaging.Trustee" />
        <altmember cref="T:System.Messaging.MessageQueueAccessRights" />
        <altmember cref="T:System.Messaging.AccessControlEntry" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Messaging.MessageQueue.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_SynchronizingObject")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-3317"><see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> イベントまたは <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> イベントによって発生したイベント ハンドラー呼び出しをマーシャリングするオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3317">Gets or sets the object that marshals the event-handler call resulting from a <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> or <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> event.</span></span></summary>
        <value><span data-ttu-id="2e7ae-3318"><see cref="T:System.ComponentModel.ISynchronizeInvoke" /> イベントまたは <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> イベントによって発生したイベント ハンドラー呼び出しをマーシャリングするオブジェクトを表す <see cref="E:System.Messaging.MessageQueue.PeekCompleted" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3318">A <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, which represents the object that marshals the event-handler call resulting from a <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> or <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> event.</span></span> <span data-ttu-id="2e7ae-3319">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3319">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3320">イベント<xref:System.Messaging.MessageQueue.ReceiveCompleted>また<xref:System.Messaging.MessageQueue.PeekCompleted>はイベントが、 <xref:System.Messaging.MessageQueue.BeginReceive%2A>それぞれ<xref:System.Messaging.MessageQueue.BeginPeek%2A>特定のスレッドに対して、または要求から返されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3320">A <xref:System.Messaging.MessageQueue.ReceiveCompleted> or <xref:System.Messaging.MessageQueue.PeekCompleted> event results from a <xref:System.Messaging.MessageQueue.BeginReceive%2A> or <xref:System.Messaging.MessageQueue.BeginPeek%2A> request, respectively, to a specific thread.</span></span> <span data-ttu-id="2e7ae-3321">通常、は<xref:System.Messaging.MessageQueue.SynchronizingObject%2A> 、関連するコンポーネントが特定のスレッドにバインドされているため、関連するコンポーネントがコントロールまたはフォーム内に配置されるときに設定されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3321">Typically, the <xref:System.Messaging.MessageQueue.SynchronizingObject%2A> is set when its related component is placed inside a control or a form, because those components are bound to a specific thread.</span></span>  
  
 <span data-ttu-id="2e7ae-3322">通常、同期オブジェクトは、メソッド呼び出しを1つのスレッドにマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3322">Typically, the synchronizing object marshals a method call into a single thread.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Messaging.MessageQueue.PeekCompleted" />
        <altmember cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
      </Docs>
    </Member>
    <Member MemberName="Transactional">
      <MemberSignature Language="C#" Value="public bool Transactional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Transactional" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.Transactional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transactional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Transactional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Transactional : bool" Usage="System.Messaging.MessageQueue.Transactional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_Transactional")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-3323">キューがトランザクションだけを受け入れるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3323">Gets a value that indicates whether the queue accepts only transactions.</span></span></summary>
        <value><span data-ttu-id="2e7ae-3324">キューがトランザクションの一部として送信されるメッセージだけを受け入れる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3324"><see langword="true" /> if the queue accepts only messages sent as part of a transaction; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3325">トランザクションメッセージングとは、複数の関連するメッセージを1つのトランザクションに結合したものです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3325">Transactional messaging refers to the coupling of several related messages into a single transaction.</span></span> <span data-ttu-id="2e7ae-3326">トランザクションの一部としてメッセージを送信すると、メッセージが順番に配信され、1回だけ配信され、送信先キューから正常に取得されるようになります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3326">Sending messages as part of a transaction ensures that the messages are delivered in order, delivered only once, and successfully retrieved from their destination queue.</span></span>  
  
 <span data-ttu-id="2e7ae-3327">キューがトランザクションである場合は、トランザクションの一部として送信されたメッセージのみが受け入れられます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3327">If a queue is transactional, it accepts only messages that are sent as part of a transaction.</span></span> <span data-ttu-id="2e7ae-3328">ただし、トランザクション<xref:System.Messaging.MessageQueueTransaction.Begin%2A>、 <xref:System.Messaging.MessageQueueTransaction.Commit%2A>、および<xref:System.Messaging.MessageQueueTransaction.Abort%2A>構文を明示的に使用しなくても、ローカルトランザクションキューから非トランザクションメッセージを送受信できます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3328">However, a non-transactional message can be sent or received from a local transaction queue without explicitly using transactional <xref:System.Messaging.MessageQueueTransaction.Begin%2A>, <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, and <xref:System.Messaging.MessageQueueTransaction.Abort%2A> syntax.</span></span> <span data-ttu-id="2e7ae-3329">トランザクションキューに非トランザクションメッセージが送信された場合、このコンポーネントは、直接形式名を使用してリモートコンピューター上のキューを参照する場合を除いて、そのメッセージの単一メッセージトランザクションを作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3329">If a non-transactional message is sent to a transactional queue, this component creates a single-message transaction for it, except in the case of referencing a queue on a remote computer using a direct format name.</span></span> <span data-ttu-id="2e7ae-3330">この場合、メッセージの送信時にトランザクションコンテキストを指定しないと、メッセージは作成されず、メッセージは配信不能キューに送信されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3330">In this situation, if you do not specify a transaction context when sending a message, one is not created for you and the message will be sent to the dead-letter queue.</span></span>  
  
 <span data-ttu-id="2e7ae-3331">トランザクションキューに非トランザクションメッセージを送信すると、例外が発生した場合にメッセージをロールバックすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3331">If you send a non-transactional message to a transactional queue, you will not be able to roll back the message in the event of an exception.</span></span>  
  
 <span data-ttu-id="2e7ae-3332"><xref:System.Messaging.MessageQueueTransaction>はスレッドアパートメントに対応しているため、アパートメント`STA`状態がの場合、複数のスレッドでトランザクションを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3332"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="2e7ae-3333">Visual Basic はメインスレッドの状態をに`STA`設定します。したがって、 <xref:System.MTAThreadAttribute>を`Main`サブルーチンに適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3333">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="2e7ae-3334">適用しない場合、別のスレッドを使用してトランザクション メッセージを送信すると、<xref:System.Messaging.MessageQueueException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3334">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="2e7ae-3335">を適用する<xref:System.MTAThreadAttribute>には、次のフラグメントを使用します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3335">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 <span data-ttu-id="2e7ae-3336">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3336">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3337">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3337">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3338">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3338">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3339">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3339">Local computer</span></span>|<span data-ttu-id="2e7ae-3340">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3340">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3341">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3341">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3342">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3342">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3343">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3343">Remote computer</span></span>|<span data-ttu-id="2e7ae-3344">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3344">No</span></span>|  
|<span data-ttu-id="2e7ae-3345">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3345">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3346">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3346">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-3347">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.Transactional%2A>プロパティの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3347">The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.Transactional%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#27](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3348">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3348">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseJournalQueue : bool with get, set" Usage="System.Messaging.MessageQueue.UseJournalQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Messaging.MessagingDescription("MQ_WriteHandle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_UseJournalQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-3349">受信したメッセージを履歴キューにコピーするかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3349">Gets or sets a value that indicates whether received messages are copied to the journal queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-3350">キューから受信したメッセージを履歴キューにコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3350"><see langword="true" /> if messages received from the queue are copied to its journal queue; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3351">メッセージキューアプリケーションは、新しいアプリケーションキューを作成するときに、関連付けられたジャーナルキューを同じ場所に自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3351">When the Message Queuing application creates a new application queue, it automatically creates an associated journal queue in the same location.</span></span> <span data-ttu-id="2e7ae-3352">ジャーナルキューは、キューから削除されたメッセージを追跡するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3352">The journal queue is used to track the messages removed from a queue.</span></span> <span data-ttu-id="2e7ae-3353">このプロパティを設定すると、メッセージキューのキューが変更されます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3353">Setting this property modifies the Message Queuing queue.</span></span> <span data-ttu-id="2e7ae-3354">そのため、その<xref:System.Messaging.MessageQueue>他のインスタンスは変更の影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3354">Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.</span></span>  
  
 <span data-ttu-id="2e7ae-3355">ジャーナルキューは、キューから削除されたメッセージを追跡しません。これは、メッセージキューディレクトリサービス (インフォメーションストアまたは Active Directory) を使用して、キューから削除されたメッセージを追跡しないためです。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3355">The journal queue does not track messages removed from the queue because their time-to-be-received timer expired, nor does it track messages purged from the queue by using a Message Queuing directory service (Information Store or Active Directory).</span></span>  
  
 <span data-ttu-id="2e7ae-3356">アプリケーションは、ジャーナルキューにメッセージを送信できません。これらのキューの読み取り専用アクセスに制限されています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3356">Applications cannot send messages to journal queues; they are limited to read-only access of these queues.</span></span> <span data-ttu-id="2e7ae-3357">さらに、メッセージキューは、ジャーナルキューからメッセージを削除しません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3357">Furthermore, Message Queuing never removes messages from journal queues.</span></span> <span data-ttu-id="2e7ae-3358">キューを使用するアプリケーションでは、メッセージを受信するか、キューを削除することによって、これらのメッセージをクリアする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3358">The application using the queue must clear these messages either by receiving them or by purging the queue.</span></span>  
  
 <span data-ttu-id="2e7ae-3359">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3359">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3360">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3360">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3361">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3361">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3362">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3362">Local computer</span></span>|<span data-ttu-id="2e7ae-3363">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3363">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3364">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3364">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3365">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3365">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3366">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3366">Remote computer</span></span>|<span data-ttu-id="2e7ae-3367">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3367">No</span></span>|  
|<span data-ttu-id="2e7ae-3368">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3368">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3369">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3369">No</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2e7ae-3370">次のコード例では、メッセージキューの<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>プロパティの値を取得して設定します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3370">The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> property.</span></span>  
  
 [!code-csharp[MessageQueue#28](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3371">メッセージ キューのメソッドにアクセスしたときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3371">An error occurred when accessing a Message Queuing method.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.MaximumJournalSize" />
      </Docs>
    </Member>
    <Member MemberName="WriteHandle">
      <MemberSignature Language="C#" Value="public IntPtr WriteHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int WriteHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueue.WriteHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WriteHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr WriteHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteHandle : nativeint" Usage="System.Messaging.MessageQueue.WriteHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("MQ_WriteHandle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2e7ae-3372">メッセージ キューにメッセージを送信するときに使用するネイティブ ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3372">Gets the native handle used to send messages to the message queue.</span></span></summary>
        <value><span data-ttu-id="2e7ae-3373">キューにメッセージを送信するときに使用するネイティブ キューオブジェクトへのハンドル。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3373">A handle to the native queue object that you use for sending messages to the queue.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e7ae-3374">は<xref:System.Messaging.MessageQueue.WriteHandle%2A> 、キューにメッセージを送信するために使用されるメッセージキューオブジェクトへのネイティブ Windows ハンドルを提供します。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3374">The <xref:System.Messaging.MessageQueue.WriteHandle%2A> provides a native Windows handle to the message queue object that is used for sending messages to the queue.</span></span> <span data-ttu-id="2e7ae-3375">キューのパスを変更すると、ハンドルは閉じられ、新しい値で再び開かれます。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3375">If you change the path of the queue, the handle is closed and reopened with a new value.</span></span>  
  
 <span data-ttu-id="2e7ae-3376">次の表は、このプロパティがさまざまなワークグループモードで使用できるかどうかを示しています。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3376">The following table shows whether this property is available in various Workgroup modes.</span></span>  
  
|<span data-ttu-id="2e7ae-3377">ワークグループモード</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3377">Workgroup mode</span></span>|<span data-ttu-id="2e7ae-3378">使用可能</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3378">Available</span></span>|  
|--------------------|---------------|  
|<span data-ttu-id="2e7ae-3379">ローカル コンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3379">Local computer</span></span>|<span data-ttu-id="2e7ae-3380">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3380">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3381">ローカルコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3381">Local computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3382">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3382">Yes</span></span>|  
|<span data-ttu-id="2e7ae-3383">リモートコンピューター</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3383">Remote computer</span></span>|<span data-ttu-id="2e7ae-3384">いいえ</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3384">No</span></span>|  
|<span data-ttu-id="2e7ae-3385">リモートコンピューターと直接形式名</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3385">Remote computer and direct format name</span></span>|<span data-ttu-id="2e7ae-3386">はい</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3386">Yes</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2e7ae-3387">このメッセージ キューには書き込みができません。</span><span class="sxs-lookup"><span data-stu-id="2e7ae-3387">The message queue is not available for writing.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.CanWrite" />
        <altmember cref="P:System.Messaging.MessageQueue.ReadHandle" />
      </Docs>
    </Member>
  </Members>
</Type>
