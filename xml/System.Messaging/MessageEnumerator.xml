<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2e3490f70119c8c572eb3d2d44434ff7788fc926" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70657814" /></Metadata><TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>メッセージ キュー内のメッセージを列挙するための前方向カーソルを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キュー <xref:System.Messaging.MessageEnumerator>内のメッセージと動的にやり取りする場合に使用します。 <xref:System.Messaging.MessageQueue>クラスを介して使用できるメソッドは、 <xref:System.Messaging.MessageEnumerator>キュー内のメッセージの動的なリストを指すを返すことができます。また、指定したメソッドが呼び出された時点で、キューの特定のインスタントスナップショットにコピーが格納されている配列を返すこともできます。  
  
 静的スナップショットとは異なり、列挙子を使用してコレクションを変更できます。 <xref:System.Messaging.MessageEnumerator>を使用すると、キューからメッセージを削除することができ、変更は直ちにキューに反映されます。  
  
 列挙子は、キューに対してクエリを行うときに、キューからメッセージを削除しません。 現在のカーソル位置にあるメッセージに関する情報を返しますが、メッセージはキューに残されます。  
  
 はカーソルで、動的リストの先頭に初期化されます。 <xref:System.Messaging.MessageEnumerator> リストの順序は、メッセージの優先度に従って、キュー内のメッセージの順序と同じです。 を呼び出し<xref:System.Messaging.MessageEnumerator.MoveNext%2A>て、カーソルをキューの最初のメッセージに移動できます。 列挙子が初期化されたら、を使用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>して残りのメッセージを順番に進めることができます。 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>メソッドにタイムアウトを渡すことによって、メッセージが使用可能になるまで待機するかどうかを指定できます。  
  
 列挙子は動的であるため、カーソルの現在の位置の後に追加されるメッセージ (たとえば、優先度が低いため) には、列挙子からアクセスできます。 カーソルの現在位置の前に挿入されたメッセージにはアクセスできません。 で戻ることはできません<xref:System.Messaging.MessageEnumerator>。 カーソルは、順方向専用の移動を可能にします。 <xref:System.Messaging.MessageEnumerator.Reset%2A>メソッドを使用すると、キューの先頭にカーソルを戻すことができます。  
  
 特定の<xref:System.Messaging.MessageEnumerator>キューののインスタンスは、独立して動作します。 同じキューに適用<xref:System.Messaging.MessageEnumerator>される2つのインスタンスを作成できます。 2番目の<xref:System.Messaging.MessageEnumerator>列挙子が最初の列挙子の前に配置されている場合、キュー内のメッセージに対して行われた変更は、2番目の列挙子に直ちに反映されます。 ただし、2つの列挙子の位置が同じで、そのうちの1つがその位置にあるメッセージを削除した場合、他の列挙子が<xref:System.Messaging.MessageEnumerator.Current%2A> 、現在削除されているメッセージのプロパティの値を取得しようとすると、例外がスローされます。  
  
> [!NOTE]
>  をに<xref:System.Messaging.MessageQueue> <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType>設定してのインスタンスを作成した場合、そのキューに接続している間、他のアプリケーションが列挙子内のメッセージを変更することはできません。 `true`  
  
   
  
## Examples  
 次の例では、キュー内のメッセージの動的な一覧を取得し、 <xref:System.Messaging.Message.Priority%2A>プロパティがに<xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>設定されたすべてのメッセージをカウントします。  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>列挙子と関連付けられたリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オペレーティングシステムは、カーソルの有効期間中、キューへの開いているハンドルを保持します。 列挙子の操作が終了したら、を<xref:System.Messaging.MessageEnumerator.Close%2A>呼び出して、ハンドルに関連付けられているリソースを解放します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>その列挙子が指している現在の <see cref="T:System.Messaging.Message" /> を取得します。</summary>
        <value>現在のメッセージ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 列挙子が作成されると、最初のメッセージの前の位置にあるキューの先頭を指します。 この場合、は<xref:System.Messaging.MessageEnumerator.Current%2A>無効であり、アクセスされると例外がスローされます。 キューの最初<xref:System.Messaging.MessageEnumerator.MoveNext%2A>のメッセージにカーソルを置くには、を呼び出す必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">最初に <see cref="P:System.Messaging.MessageEnumerator.Current" /> を呼び出す前に <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> を呼び出しました。 カーソルは、メッセージ列挙体の最初の要素よりも前に位置しています。  
  
または 
<see cref="P:System.Messaging.MessageEnumerator.Current" /> の呼び出しにより <see langword="false" /> (メッセージ列挙体の中の最後の要素よりも後にカーソルが位置していることを示す) が返された後に <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> を呼び出しました。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">列挙子が現在指しているメッセージは存在しません。 削除されている可能性があります。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キュー内でメッセージを参照するために使われるネイティブなメッセージ キュー カーソル ハンドルを取得します。</summary>
        <value>ネイティブなカーソル ハンドル。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、列挙体へのネイティブハンドルを格納します。 列挙子の操作が終了したら、を<xref:System.Messaging.MessageEnumerator.Close%2A>呼び出してこのリソースを解放します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">ハンドルが存在しません。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Messaging.MessageEnumerator" /> で使用したリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Messaging.MessageEnumerator" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 を<xref:System.Messaging.MessageEnumerator.Dispose%2A>呼び出すと、 <xref:System.Messaging.MessageEnumerator>によって使用されるリソースを他の目的で再割り当てできます。 の詳細<xref:System.Messaging.MessageEnumerator.Dispose%2A>については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">アンマネージ リソースのクリーンアップ</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Messaging.MessageEnumerator" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、パブリック<xref:System.Messaging.MessageEnumerator.Dispose%2A>メソッド<xref:System.Object.Finalize%2A>とメソッドによって呼び出されます。 `Dispose()``disposing`パラメーターをに`Dispose(Boolean)` 設定して、保護されたメソッド `true` を呼び出します。 <xref:System.Object.Finalize%2A>をに`disposing` `Dispose` 設定してを呼び出します `false` 。  
  
 `disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Messaging.MessageEnumerator> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。 このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。 <see langword="Dispose(Boolean)" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。 を実装<see langword="Dispose" />する方法の詳細については、「 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」を参照してください。  
  
<see langword="Dispose" /> および <see langword="Finalize" /> の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」と「 [Finalize メソッドのオーバーライド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))」を参照してください。</para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Dispose メソッドの実装</related>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">アンマネージ リソースのクリーンアップ</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>列挙子に保持されているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
このメソッドは、<xref:System.Object.Finalize> をオーバーライドします。 アプリケーションコードはこのメソッドを呼び出すことはできません。オブジェクトの Finalize メソッドは、ガベージコレクションの実行中に、メソッドの<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>呼び出しによってガベージコレクターによる終了が無効にされていない限り、自動的に呼び出されます。

詳細については、「 [Finalize メソッドとデストラクター](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100))」、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」、および「 [finalize メソッドのオーバーライド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))」を参照してください。

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>キュー内の次のメッセージに列挙子を進めます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>キュー内の次のメッセージに列挙子を進めます (そのメッセージが現在使用できる場合)。</summary>
        <returns>列挙子が次のメッセージに正常に進んだ場合は <see langword="true" />。列挙子がキューの最後に到達した場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キューにメッセージがない場合、このオーバーロードはすぐにを返します。 メッセージを受信するために、指定<xref:System.TimeSpan>されたを待機する別のオーバーロードがあります。  
  
 キューが空であるか、コレクション内の最後の要素を超えて移動したためにメッセージが現在使用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>でき`false`ない場合は、呼び出し元のメソッドにを返します。  
  
 作成時に、列挙子は、キューの最初のメッセージの前に配置されます。 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>また、の最初の呼び出しによって、キューの最初のメッセージが表示されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">メッセージ キューに固有の例外がスローされました。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">列挙子がキューの最後に位置しているときにメッセージが使用できるようになるまで待機する <see cref="T:System.TimeSpan" />。</param>
        <summary>キュー内の次のメッセージに列挙子を進めます。 列挙子がキューの最後に位置しているときは、<see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> は、メッセージが使用できるようになるか指定のタイムアウト時間が経過するまで待機します。</summary>
        <returns>列挙子が次のメッセージに正常に進んだ場合は <see langword="true" />。列挙子がキューの最後に到達し、<paramref name="timeout" /> パラメーターによって指定される時間内にメッセージが使用できるようにならない場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバーロードは、キューにメッセージがない場合、またはカーソルがキューの最後に到達した場合に待機します。 キューが空であるか、コレクション内の最後の要素を超えて移動したためにメッセージが現在使用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>できない場合、は指定されたタイムアウトを待機します。  
  
 カーソルが既にキューの末尾にある場合、は<xref:System.Messaging.MessageEnumerator.MoveNext%2A> 、指定`true`された期間内に新しいメッセージが到着した場合にのみを返します。は、現在キューにあるすべてのメッセージより優先度が低く、キューの末尾に配置されます。 後続のメッセージがキューに存在しない場合、パラメーターを指定しないオーバーロードは直ちに返されます。  
  
 作成時に、列挙子は、列挙体の最初のメッセージの前に概念的に配置さ<xref:System.Messaging.MessageEnumerator.MoveNext%2A>れます。また、の最初の呼び出しにより、列挙体の最初のメッセージがビューに取り込まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">タイムアウト パラメーターに指定された値が無効です。 負数を表している可能性があります。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">メッセージ キューに固有の例外がスローされました。  
  
 または  
  
 タイムアウトの時間が経過しました。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。 メッセージを削除すると、そのメッセージがキューから削除されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これらのオーバーロードについて説明されている<xref:System.Messaging.MessageEnumerator>動作は、 <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>を使用してインスタンスを取得する場合にのみ適用できます。 このメソッドは<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A>非推奨とされ<xref:System.Messaging.MessageEnumerator>ているため、を使用してのインスタンスを取得しないでください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トランザクション キューまたは非トランザクション キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。 メッセージがキューに到達するまでのタイムアウトは指定されていません。</summary>
        <returns>キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>カーソルの現在の位置にあるメッセージを削除して返します。  
  
 キュージャーナリングを使用している場合、メッセージを削除すると、 <xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドと同様に、コピーがジャーナルキューに保持されます。  
  
 現在のメッセージを削除すると、カーソルは次のメッセージに移動します。 を呼び出し<xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>た後にを呼び出す必要はありません。  
  
 トランザクションキューでこのオーバーロードを呼び出すと、メッセージキューによって1つの内部トランザクションが作成されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">メッセージが削除されるトランザクションを指定する <see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</param>
        <summary>トランザクション キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。 メッセージがキューに到達するまでのタイムアウトは指定されていません。</summary>
        <returns>キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>`transaction`パラメーターで定義された内部トランザクションコンテキストを使用して、カーソルの現在の場所でメッセージを削除して返します。  
  
 キュージャーナリングを使用している場合、メッセージを削除すると、 <xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドと同様に、コピーがジャーナルキューに保持されます。  
  
 トランザクションキューを使用する場合、トランザクションをロールバックすると、の呼び出し<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>によって削除されたメッセージがキューに返されます。 トランザクションがコミットされるまで、削除を元に戻すことはできません。  
  
 現在のメッセージを削除すると、カーソルは次のメッセージに移動します。 を呼び出し<xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>た後にを呼び出す必要はありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</param>
        <summary>キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。 メッセージがキューに到達するまでのタイムアウトは指定されていません。</summary>
        <returns>キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>`transactionType`パラメーターで定義されているトランザクションコンテキストを使用して、カーソルの現在の場所でメッセージを削除して返します。  
  
 メッセージ`Automatic`の受信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。 メッセージ`Single`を1つの内部トランザクションとして受信するかどうかを指定します。 トランザクションコンテキストの`None`外部にあるトランザクションキューからメッセージを受信するかどうかを指定できます。  
  
 キュージャーナリングを使用している場合、メッセージを削除すると、 <xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドと同様に、コピーがジャーナルキューに保持されます。  
  
 トランザクションキューを使用する場合、トランザクションをロールバックすると、の呼び出し<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>によって削除されたメッセージがキューに返されます。 トランザクションがコミットされるまで、削除を元に戻すことはできません。  
  
 現在のメッセージを削除すると、カーソルは次のメッセージに移動します。 を呼び出し<xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>た後にを呼び出す必要はありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">メッセージがキューに到達するまで待機する時間間隔。</param>
        <summary>キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。 削除するメッセージがある場合、メソッドはすぐにメッセージを返します。 削除するメッセージがない場合、メソッドは新しいメッセージが到達するまで指定のタイムアウト時間だけ待機します。</summary>
        <returns>キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>カーソルの現在の位置にあるメッセージを削除して返します。 カーソルがキューの末尾にある場合、メソッドのこのオーバーロードは、メッセージが使用可能になるか、 `timeout`パラメーターで指定された間隔が経過するまで待機します。  
  
 キュージャーナリングを使用している場合、メッセージを削除すると、 <xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドと同様に、コピーがジャーナルキューに保持されます。  
  
 現在のメッセージを削除すると、カーソルは次のメッセージに移動します。 を呼び出し<xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>た後にを呼び出す必要はありません。  
  
 トランザクションキューでこのオーバーロードを呼び出すと、メッセージキューによって1つの内部トランザクションが作成されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="timeout" /> パラメーターに指定された値が無効です。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">タイムアウトの時間が経過しました。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout">削除するメッセージを待機する時間間隔。</param>
        <param name="transaction">メッセージのトランザクション コンテキストを指定する <see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</param>
        <summary>トランザクション キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。 削除するメッセージがある場合、メソッドはすぐにメッセージを返します。 削除するメッセージがない場合、メソッドは新しいメッセージが到達するまで指定のタイムアウト時間だけ待機します。</summary>
        <returns>キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>カーソルの現在の位置にあるメッセージを削除して返します。 カーソルがキューの末尾にある場合、メソッドのこのオーバーロードは、メッセージが使用可能になるか、 `timeout`パラメーターで指定された間隔が経過するまで待機します。  
  
 トランザクションキューを使用する場合、トランザクションをロールバックすると、の呼び出し<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>によって削除されたメッセージがキューに返されます。 トランザクションがコミットされるまで、削除を元に戻すことはできません。  
  
 キュージャーナリングを使用している場合、メッセージを削除すると、 <xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドと同様に、コピーがジャーナルキューに保持されます。  
  
 現在のメッセージを削除すると、カーソルは次のメッセージに移動します。 を呼び出し<xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>た後にを呼び出す必要はありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="timeout" /> パラメーターに指定された値が無効です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">タイムアウトの時間が経過しました。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout">削除するメッセージを待機する時間間隔。</param>
        <param name="transactionType">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</param>
        <summary>キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。 削除するメッセージがある場合、メソッドはすぐにメッセージを返します。 削除するメッセージがない場合、メソッドは新しいメッセージが到達するまで指定のタイムアウト時間だけ待機します。</summary>
        <returns>キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>`transactionType`パラメーターで定義されているトランザクションコンテキストを使用して、カーソルの現在の場所でメッセージを削除して返します。 カーソルがキューの末尾にある場合、メソッドのこのオーバーロードは、メッセージが使用可能になるか、 `timeout`パラメーターで指定された間隔が経過するまで待機します。  
  
 メッセージ`Automatic`の受信`transactionType`に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、パラメーターにを指定します。 メッセージ`Single`を1つの内部トランザクションとして受信するかどうかを指定します。 トランザクションコンテキストの`None`外部にあるトランザクションキューからメッセージを受信するかどうかを指定できます。  
  
 キュージャーナリングを使用している場合、メッセージを削除すると、 <xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドと同様に、コピーがジャーナルキューに保持されます。  
  
 トランザクションキューを使用する場合、トランザクションをロールバックすると、の呼び出し<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>によって削除されたメッセージがキューに返されます。 トランザクションがコミットされるまで、削除を元に戻すことはできません。  
  
 現在のメッセージを削除すると、カーソルは次のメッセージに移動します。 を呼び出し<xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>た後にを呼び出す必要はありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="timeout" /> パラメーターに指定された値が無効です。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">タイムアウトの時間が経過しました。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>キューの先頭を指すように現在の列挙子をリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 列挙子は、前方方向にのみ移動できます。 このメソッドを使用して、キューの先頭からやり直します。  
  
 を呼び<xref:System.Messaging.MessageEnumerator.Reset%2A>出すと、カーソルは最初のメッセージを指します。 を呼び出し<xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.Reset%2A>た後にを呼び出して、キュー内の最初のメッセージにカーソルを移動する必要はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカーソル位置にあるメッセージを参照する <see cref="T:System.Messaging.Message" /> を返します。</summary>
        <value>現在のカーソル位置にあるメッセージを参照する <see cref="T:System.Messaging.Message" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">最初に <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> を呼び出す前に、このプロパティにアクセスしました。 カーソルは、メッセージ列挙体の最初の要素よりも前に位置しています。あるいは、<see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> の呼び出しにより false (メッセージ列挙体の中の最後の要素よりも後にカーソルが位置していることを示す) が返された後に、このプロパティにアクセスしました。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">列挙子が現在指しているメッセージは存在しません。 削除されている可能性があります。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
