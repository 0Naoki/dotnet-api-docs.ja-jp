<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="23b91a2631794fe77c1398283e744a03f64ef34f" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46645652" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="40196-101">メッセージ キュー内のメッセージを列挙するための順方向専用カーソルを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="40196-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-102">使用<xref:System.Messaging.MessageEnumerator>キュー内のメッセージの動的な対話のためです。</span><span class="sxs-lookup"><span data-stu-id="40196-102">Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue.</span></span> <span data-ttu-id="40196-103">メソッドで使用できる、<xref:System.Messaging.MessageQueue>クラスは、いずれかを返すことができます、<xref:System.Messaging.MessageEnumerator>キューまたはキューの指定された時点のスナップショットのある時点でのコピーを含む配列内のメッセージの動的リストを指す、指定されたメソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="40196-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="40196-104">列挙子では、静的なスナップショットとは異なり、コレクションを変更できます。</span><span class="sxs-lookup"><span data-stu-id="40196-104">Unlike a static snapshot, an enumerator allows you to modify the collection.</span></span> <span data-ttu-id="40196-105">使用して、 <xref:System.Messaging.MessageEnumerator>、キューからメッセージを削除して、変更がキューにすぐに反映されます。</span><span class="sxs-lookup"><span data-stu-id="40196-105">Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.</span></span>  
  
 <span data-ttu-id="40196-106">列挙子、キューを照会したときに、メッセージをキューから削除されません。</span><span class="sxs-lookup"><span data-stu-id="40196-106">An enumerator does not remove the messages from the queue when it queries the queue.</span></span> <span data-ttu-id="40196-107">現在のカーソル位置にあるメッセージに関する情報が返されますが、メッセージはキューにそのままです。</span><span class="sxs-lookup"><span data-stu-id="40196-107">It returns information about the message at the current cursor position, but it leaves the message in the queue.</span></span>  
  
 <span data-ttu-id="40196-108">A<xref:System.Messaging.MessageEnumerator>カーソル、動的なリストの先頭に初期化します。</span><span class="sxs-lookup"><span data-stu-id="40196-108">A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="40196-109">一覧の順序は、メッセージの優先順位に従って、キュー内のメッセージの順序と同じです。</span><span class="sxs-lookup"><span data-stu-id="40196-109">The list order is the same as the order of the messages in the queue, according to message priority.</span></span> <span data-ttu-id="40196-110">キューの最初のメッセージを呼び出すことによって、カーソルを移動することができます<xref:System.Messaging.MessageEnumerator.MoveNext%2A>します。</span><span class="sxs-lookup"><span data-stu-id="40196-110">You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="40196-111">使用することができます、列挙子が初期化された後<xref:System.Messaging.MessageEnumerator.MoveNext%2A>ステップ前進して残りのメッセージにします。</span><span class="sxs-lookup"><span data-stu-id="40196-111">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages.</span></span> <span data-ttu-id="40196-112">メッセージがタイムアウトに渡すことによって使用可能になるまで待機するかどうかを指定することができます、<xref:System.Messaging.MessageEnumerator.MoveNext%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="40196-112">You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.</span></span>  
  
 <span data-ttu-id="40196-113">列挙子は動的であるため (たとえば、ため低優先度)、カーソルの現在の位置より後に追加するメッセージは、列挙子によってアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="40196-113">Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</span></span> <span data-ttu-id="40196-114">現在のカーソル位置にアクセスすることはできません前に挿入されているメッセージ。</span><span class="sxs-lookup"><span data-stu-id="40196-114">A message that is inserted before the cursor's current position cannot be accessed.</span></span> <span data-ttu-id="40196-115">前に戻ることはできません、<xref:System.Messaging.MessageEnumerator>します。</span><span class="sxs-lookup"><span data-stu-id="40196-115">It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>.</span></span> <span data-ttu-id="40196-116">カーソルは、順方向専用の移動をできます。</span><span class="sxs-lookup"><span data-stu-id="40196-116">A cursor allows forward-only movement.</span></span> <span data-ttu-id="40196-117"><xref:System.Messaging.MessageEnumerator.Reset%2A>メソッドでは、キューの先頭にカーソルを配置することができます。</span><span class="sxs-lookup"><span data-stu-id="40196-117">The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="40196-118">インスタンス<xref:System.Messaging.MessageEnumerator>を特定のキューは独立して動作します。</span><span class="sxs-lookup"><span data-stu-id="40196-118">Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently.</span></span> <span data-ttu-id="40196-119">2 つ作成することができます<xref:System.Messaging.MessageEnumerator>インスタンスが同じキューに適用されます。</span><span class="sxs-lookup"><span data-stu-id="40196-119">You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue.</span></span> <span data-ttu-id="40196-120">変更を 1 つ<xref:System.Messaging.MessageEnumerator>2 つ目の列挙子が 1 つ目の前に配置されている場合に、2 つ目の列挙子で、キュー内のメッセージにを直ちに反映されませんは。</span><span class="sxs-lookup"><span data-stu-id="40196-120">The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</span></span> <span data-ttu-id="40196-121">ただし、2 つの列挙子が同じ位置を持っており、その位置にあるメッセージを削除しますうち 1 つ場合、例外がスローされます、他の列挙子の値を取得しようとすると、<xref:System.Messaging.MessageEnumerator.Current%2A>削除メッセージのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="40196-121">However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="40196-122">インスタンスを作成する場合<xref:System.Messaging.MessageQueue>で<xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType>設定`true`、他のアプリケーションは変更できません、列挙子内のメッセージをキューに接続しているときにします。</span><span class="sxs-lookup"><span data-stu-id="40196-122">If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="40196-123">次の例は、キューにメッセージの動的リストを取得しのすべてのメッセージのカウント、<xref:System.Messaging.Message.Priority%2A>プロパティに設定<xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="40196-123">The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40196-124">列挙子と関連付けられたリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-124">Frees the resources associated with the enumerator.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-125">オペレーティング システムでは、カーソルの有効期間中に、キューを開いているハンドルを保持します。</span><span class="sxs-lookup"><span data-stu-id="40196-125">The operating system retains an open handle to the queue during the lifetime of the cursor.</span></span> <span data-ttu-id="40196-126">列挙子の操作が完了したら、呼び出す<xref:System.Messaging.MessageEnumerator.Close%2A>ハンドルに関連付けられたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="40196-126">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="40196-127">その列挙子が指している現在の <see cref="T:System.Messaging.Message" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-127">Gets the current <see cref="T:System.Messaging.Message" /> that this enumerator points to.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="40196-128">現在のメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-128">The current message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-129">列挙子が作成されたときに、最初のメッセージより前に、の位置、キューの先頭を指します。</span><span class="sxs-lookup"><span data-stu-id="40196-129">When the enumerator is created, it points to the head of the queue, at a location before the first message.</span></span> <span data-ttu-id="40196-130">この場合、<xref:System.Messaging.MessageEnumerator.Current%2A>が無効であり、アクセスする場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="40196-130">In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="40196-131">呼び出す必要があります<xref:System.Messaging.MessageEnumerator.MoveNext%2A>するキューの最初のメッセージにカーソルを置きます。</span><span class="sxs-lookup"><span data-stu-id="40196-131">You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="40196-132">最初に <see cref="P:System.Messaging.MessageEnumerator.Current" /> を呼び出す前に <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> を呼び出しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-132">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span>
          </span>
          <span data-ttu-id="40196-133">カーソルは、メッセージ列挙体の最初の要素よりも前に位置しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-133">The cursor is located before the first element of the message enumeration.</span>
          </span>
          <span data-ttu-id="40196-134">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-134">-or-</span>
          </span>
          <span data-ttu-id="40196-135">
            <see cref="P:System.Messaging.MessageEnumerator.Current" /> の呼び出しにより <see langword="false" /> (メッセージ列挙体の中の最後の要素よりも後にカーソルが位置していることを示す) が返された後に <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> を呼び出しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-135">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned <see langword="false" /> (indicating the cursor is located after the last element of the message enumeration.)</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="40196-136">列挙子が現在指しているメッセージは存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-136">The message the enumerator is currently pointing to no longer exists.</span>
          </span>
          <span data-ttu-id="40196-137">削除されている可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-137">It might have been deleted.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="40196-138">キュー内でメッセージを参照するために使われるネイティブなメッセージ キュー カーソル ハンドルを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-138">Gets the native Message Queuing cursor handle used to browse messages in the queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="40196-139">ネイティブなカーソル ハンドル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-139">The native cursor handle.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-140">このプロパティには、列挙体へのネイティブ ハンドルが含まれています。</span><span class="sxs-lookup"><span data-stu-id="40196-140">This property contains the native handle to the enumeration.</span></span> <span data-ttu-id="40196-141">列挙子の操作が完了したら、呼び出す<xref:System.Messaging.MessageEnumerator.Close%2A>このリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="40196-141">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="40196-142">ハンドルが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-142">The handle does not exist.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="40196-143">
            <see cref="T:System.Messaging.MessageEnumerator" /> で使用したリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-143">Releases the resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40196-144">
            <see cref="T:System.Messaging.MessageEnumerator" /> によって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-144">Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-145">呼び出す<xref:System.Messaging.MessageEnumerator.Dispose%2A>によって使用されるリソースの使用、<xref:System.Messaging.MessageEnumerator>他の目的で再割り当てします。</span><span class="sxs-lookup"><span data-stu-id="40196-145">Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="40196-146">詳細については<xref:System.Messaging.MessageEnumerator.Dispose%2A>を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)します。</span><span class="sxs-lookup"><span data-stu-id="40196-146">For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">
          <span data-ttu-id="40196-147">アンマネージ リソースのクリーンアップ</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-147">Cleaning Up Unmanaged Resources</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="40196-148">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-148">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40196-149">
            <see cref="T:System.Messaging.MessageEnumerator" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-149">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-150">このメソッドは、パブリック<xref:System.Messaging.MessageEnumerator.Dispose%2A>メソッドと<xref:System.Object.Finalize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="40196-150">This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="40196-151">`Dispose()` 保護された起動`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="40196-151">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="40196-152"><xref:System.Object.Finalize%2A> 呼び出す`Dispose`で`disposing`に設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="40196-152"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="40196-153">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Messaging.MessageEnumerator> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="40196-153">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references.</span></span> <span data-ttu-id="40196-154">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="40196-154">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="40196-155">
              <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="40196-155">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="40196-156">
              <see langword="Dispose(Boolean)" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="40196-156">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="40196-157">実装する方法についての詳細は<see langword="Dispose" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="40196-157">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="40196-158">詳細については<see langword="Dispose" />と<see langword="Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="40196-158">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span>
            </span>
          </para>
        </block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">
          <span data-ttu-id="40196-159">Dispose メソッドの実装</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-159">Implementing a Dispose method</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">
          <span data-ttu-id="40196-160">アンマネージ リソースのクリーンアップ</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-160">Cleaning Up Unmanaged Resources</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="40196-161">キュー内の次のメッセージに列挙子を進めます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-161">Advances the enumerator to the next message in the queue.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40196-162">キュー内の次のメッセージに列挙子を進めます (そのメッセージが現在使用できる場合)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-162">Advances the enumerator to the next message in the queue, if one is currently available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40196-163">列挙子が次のメッセージに正常に進んだ場合は <see langword="true" />。列挙子がキューの最後に到達した場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-163">
              <see langword="true" /> if the enumerator was succesfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-164">このオーバー ロードは、キューにメッセージが存在しないかどうかにすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="40196-164">This overload returns immediately if there is no message in the queue.</span></span> <span data-ttu-id="40196-165">指定した待機する別のオーバー ロードがある<xref:System.TimeSpan>メッセージが到着するのです。</span><span class="sxs-lookup"><span data-stu-id="40196-165">There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.</span></span>  
  
 <span data-ttu-id="40196-166">キューが空か、コレクション内の最後の要素より後に移動するため、メッセージを現在使用できることができない場合<xref:System.Messaging.MessageEnumerator.MoveNext%2A>返します`false`呼び出し元のメソッド。</span><span class="sxs-lookup"><span data-stu-id="40196-166">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.</span></span>  
  
 <span data-ttu-id="40196-167">作成時に、列挙子は、概念的には、キュー、および最初の呼び出しの最初のメッセージの前に配置<xref:System.Messaging.MessageEnumerator.MoveNext%2A>キューの最初のメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="40196-167">Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="40196-168">メッセージ キューに固有の例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-168">An exception specific to Message Queuing was thrown.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="40196-169">列挙子がキューの最後に位置しているときにメッセージが使用できるようになるまで待機する <see cref="T:System.TimeSpan" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-169">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40196-170">キュー内の次のメッセージに列挙子を進めます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-170">Advances the enumerator to the next message in the queue.</span>
          </span>
          <span data-ttu-id="40196-171">列挙子がキューの最後に位置しているときは、<see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> は、メッセージが使用できるようになるか指定のタイムアウト時間が経過するまで待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-171">If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the given timeout expires.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40196-172">列挙子が次のメッセージに正常に進んだ場合は <see langword="true" />。列挙子がキューの最後に到達し、<paramref name="timeout" /> パラメーターによって指定される時間内にメッセージが使用できるようにならない場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-172">
              <see langword="true" /> if the enumerator successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <paramref name="timeout" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-173">このオーバー ロードは、キューにメッセージがない場合、またはカーソルは、キューの末尾に達した場合に待機します。</span><span class="sxs-lookup"><span data-stu-id="40196-173">This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</span></span> <span data-ttu-id="40196-174">キューが空か、コレクション内の最後の要素より後に移動するため、メッセージを現在使用できることができない場合<xref:System.Messaging.MessageEnumerator.MoveNext%2A>指定のタイムアウトを待機します。</span><span class="sxs-lookup"><span data-stu-id="40196-174">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.</span></span>  
  
 <span data-ttu-id="40196-175">場合は、キューの末尾にカーソルは既に<xref:System.Messaging.MessageEnumerator.MoveNext%2A>のみが返されます`true`指定した時間間隔内で新しいメッセージが到着すると場合、キュー内のすべてのメッセージより低い優先順位にある現在とは、キューの末尾に置かれます。</span><span class="sxs-lookup"><span data-stu-id="40196-175">If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</span></span> <span data-ttu-id="40196-176">パラメーターなしのオーバー ロードは、キューにそれ以上のメッセージがないかどうかに直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="40196-176">An overload with no parameter returns immediately if no further messages are in the queue.</span></span>  
  
 <span data-ttu-id="40196-177">作成時に、列挙子は概念的には、列挙、および最初の呼び出しの最初のメッセージの前に配置<xref:System.Messaging.MessageEnumerator.MoveNext%2A>には、列挙体の最初のメッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="40196-177">Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="40196-178">タイムアウト パラメーターに指定された値が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-178">The value specified for the timeout parameter is invalid.</span>
          </span>
          <span data-ttu-id="40196-179">負数を表している可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-179">It might represent a negative number.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="40196-180">メッセージ キューに固有の例外がスローされました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-180">An exception specific to Message Queuing was thrown.</span>
          </span>
          <span data-ttu-id="40196-181">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-181">-or-</span>
          </span>
          <span data-ttu-id="40196-182">タイムアウトの時間が経過しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-182">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="40196-183">キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-183">Removes the current message from the queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="40196-184">メッセージを削除すると、そのメッセージがキューから削除されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-184">Removing the message deletes it from the queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-185">これらのオーバー ロードの動作は、該当する場合にのみ、<xref:System.Messaging.MessageEnumerator>を使用してインスタンスを取得、<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>します。</span><span class="sxs-lookup"><span data-stu-id="40196-185">The behavior described for these overloads is applicable only if the <xref:System.Messaging.MessageEnumerator> instance is retrieved by using the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span></span> <span data-ttu-id="40196-186">使用しない<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A>のインスタンスを取得する<xref:System.Messaging.MessageEnumerator>ようにこのメソッドは非推奨とされました。</span><span class="sxs-lookup"><span data-stu-id="40196-186">Do not use <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> to retrieve an instance of <xref:System.Messaging.MessageEnumerator> as this method has been deprecated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40196-187">トランザクション キューまたは非トランザクション キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-187">Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="40196-188">メッセージがキューに到達するまでのタイムアウトは指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-188">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40196-189">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-189">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-190"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除し、カーソルの現在の場所にメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="40196-190"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span>  
  
 <span data-ttu-id="40196-191">メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします。</span><span class="sxs-lookup"><span data-stu-id="40196-191">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="40196-192">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="40196-192">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="40196-193">呼び出す必要はありません<xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出した後<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。</span><span class="sxs-lookup"><span data-stu-id="40196-193">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="40196-194">場合は、トランザクション キューでこのオーバー ロードを呼び出すと、メッセージ キューは 1 つの内部トランザクションを作成します。</span><span class="sxs-lookup"><span data-stu-id="40196-194">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">
          <span data-ttu-id="40196-195">メッセージが削除されるトランザクションを指定する <see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-195">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40196-196">トランザクション キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-196">Removes the current message from a transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="40196-197">メッセージがキューに到達するまでのタイムアウトは指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-197">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40196-198">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-198">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-199"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除しで定義された内部トランザクション コンテキストを使用して、カーソルの現在位置にあるメッセージを返します、`transaction`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="40196-199"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.</span></span>  
  
 <span data-ttu-id="40196-200">メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします。</span><span class="sxs-lookup"><span data-stu-id="40196-200">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="40196-201">呼び出しで削除任意のメッセージの原因はトランザクション キューを使用する場合、トランザクションのロールバック<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>キューに返されます。</span><span class="sxs-lookup"><span data-stu-id="40196-201">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="40196-202">トランザクションがコミットされるまで削除は取り消すことができません。</span><span class="sxs-lookup"><span data-stu-id="40196-202">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="40196-203">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="40196-203">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="40196-204">呼び出す必要はありません<xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出した後<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。</span><span class="sxs-lookup"><span data-stu-id="40196-204">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="40196-205">
            <paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-205">The <paramref name="transaction" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType">
          <span data-ttu-id="40196-206">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-206">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40196-207">キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-207">Removes the current message from a queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="40196-208">メッセージがキューに到達するまでのタイムアウトは指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-208">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40196-209">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-209">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-210"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除しで定義されたトランザクションのコンテキストを使用して、カーソルの現在位置にあるメッセージを返します、`transactionType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="40196-210"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="40196-211">指定`Automatic`の`transactionType`外部トランザクション コンテキストが既に存在する場合は、パラメーターを使用してメッセージを受信する必要のあるスレッドにアタッチされています。</span><span class="sxs-lookup"><span data-stu-id="40196-211">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="40196-212">指定`Single`として 1 つの内部トランザクション メッセージを受信したい場合。</span><span class="sxs-lookup"><span data-stu-id="40196-212">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="40196-213">指定できる`None`トランザクション コンテキストの外でトランザクション キューからメッセージを受信する場合。</span><span class="sxs-lookup"><span data-stu-id="40196-213">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="40196-214">メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします。</span><span class="sxs-lookup"><span data-stu-id="40196-214">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="40196-215">呼び出しで削除任意のメッセージの原因はトランザクション キューを使用する場合、トランザクションのロールバック<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>キューに返されます。</span><span class="sxs-lookup"><span data-stu-id="40196-215">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="40196-216">トランザクションがコミットされるまで削除は取り消すことができません。</span><span class="sxs-lookup"><span data-stu-id="40196-216">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="40196-217">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="40196-217">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="40196-218">呼び出す必要はありません<xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出した後<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。</span><span class="sxs-lookup"><span data-stu-id="40196-218">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="40196-219">
            <paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-219">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="40196-220">メッセージがキューに到達するまで待機する時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-220">The interval of time to wait for a message to arrive in the queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40196-221">キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-221">Removes the current message from the queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="40196-222">削除するメッセージがある場合、メソッドはすぐにメッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-222">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="40196-223">削除するメッセージがない場合、メソッドは新しいメッセージが到達するまで指定のタイムアウト時間だけ待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-223">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40196-224">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-224">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-225"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除し、カーソルの現在の場所にメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="40196-225"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="40196-226">メソッドのこのオーバー ロードが、メッセージが利用可能またはによって指定される間隔までに待機カーソルが、キューの末尾にある場合、`timeout`パラメーターの有効期限が切れた。</span><span class="sxs-lookup"><span data-stu-id="40196-226">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="40196-227">メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします。</span><span class="sxs-lookup"><span data-stu-id="40196-227">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="40196-228">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="40196-228">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="40196-229">呼び出す必要はありません<xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出した後<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。</span><span class="sxs-lookup"><span data-stu-id="40196-229">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="40196-230">場合は、トランザクション キューでこのオーバー ロードを呼び出すと、メッセージ キューは 1 つの内部トランザクションを作成します。</span><span class="sxs-lookup"><span data-stu-id="40196-230">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="40196-231">
            <paramref name="timeout" /> パラメーターに指定された値が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-231">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="40196-232">タイムアウトの時間が経過しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-232">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="40196-233">削除するメッセージを待機する時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-233">The interval of time to wait for the message to be removed.</span>
          </span>
        </param>
        <param name="transaction">
          <span data-ttu-id="40196-234">メッセージのトランザクション コンテキストを指定する <see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-234">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40196-235">トランザクション キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-235">Removes the current message from a transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="40196-236">削除するメッセージがある場合、メソッドはすぐにメッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-236">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="40196-237">削除するメッセージがない場合、メソッドは新しいメッセージが到達するまで指定のタイムアウト時間だけ待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-237">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40196-238">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-238">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-239"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除し、カーソルの現在の場所にメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="40196-239"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="40196-240">メソッドのこのオーバー ロードが、メッセージが利用可能またはによって指定される間隔までに待機カーソルが、キューの末尾にある場合、`timeout`パラメーターの有効期限が切れた。</span><span class="sxs-lookup"><span data-stu-id="40196-240">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="40196-241">呼び出しで削除任意のメッセージの原因はトランザクション キューを使用する場合、トランザクションのロールバック<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>キューに返されます。</span><span class="sxs-lookup"><span data-stu-id="40196-241">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="40196-242">トランザクションがコミットされるまで削除は取り消すことができません。</span><span class="sxs-lookup"><span data-stu-id="40196-242">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="40196-243">メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします。</span><span class="sxs-lookup"><span data-stu-id="40196-243">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="40196-244">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="40196-244">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="40196-245">呼び出す必要はありません<xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出した後<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。</span><span class="sxs-lookup"><span data-stu-id="40196-245">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="40196-246">
            <paramref name="timeout" /> パラメーターに指定された値が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-246">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="40196-247">
            <paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-247">The <paramref name="transaction" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="40196-248">タイムアウトの時間が経過しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-248">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="40196-249">削除するメッセージを待機する時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-249">The interval of time to wait for the message to be removed.</span>
          </span>
        </param>
        <param name="transactionType">
          <span data-ttu-id="40196-250">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-250">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40196-251">キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-251">Removes the current message from a queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="40196-252">削除するメッセージがある場合、メソッドはすぐにメッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-252">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="40196-253">削除するメッセージがない場合、メソッドは新しいメッセージが到達するまで指定のタイムアウト時間だけ待機します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-253">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40196-254">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-254">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-255"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除しで定義されたトランザクションのコンテキストを使用して、カーソルの現在位置にあるメッセージを返します、`transactionType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="40196-255"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="40196-256">メソッドのこのオーバー ロードが、メッセージが利用可能またはによって指定される間隔までに待機カーソルが、キューの末尾にある場合、`timeout`パラメーターの有効期限が切れた。</span><span class="sxs-lookup"><span data-stu-id="40196-256">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="40196-257">指定`Automatic`の`transactionType`外部トランザクション コンテキストが既に存在する場合は、パラメーターを使用してメッセージを受信する必要のあるスレッドにアタッチされています。</span><span class="sxs-lookup"><span data-stu-id="40196-257">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="40196-258">指定`Single`として 1 つの内部トランザクション メッセージを受信したい場合。</span><span class="sxs-lookup"><span data-stu-id="40196-258">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="40196-259">指定できる`None`トランザクション コンテキストの外でトランザクション キューからメッセージを受信する場合。</span><span class="sxs-lookup"><span data-stu-id="40196-259">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="40196-260">メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします。</span><span class="sxs-lookup"><span data-stu-id="40196-260">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="40196-261">呼び出しで削除任意のメッセージの原因はトランザクション キューを使用する場合、トランザクションのロールバック<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>キューに返されます。</span><span class="sxs-lookup"><span data-stu-id="40196-261">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="40196-262">トランザクションがコミットされるまで削除は取り消すことができません。</span><span class="sxs-lookup"><span data-stu-id="40196-262">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="40196-263">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="40196-263">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="40196-264">呼び出す必要はありません<xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出した後<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。</span><span class="sxs-lookup"><span data-stu-id="40196-264">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="40196-265">
            <paramref name="timeout" /> パラメーターに指定された値が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-265">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="40196-266">タイムアウトの時間が経過しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-266">The timeout has expired.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="40196-267">
            <paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-267">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40196-268">キューの先頭を指すように現在の列挙子をリセットします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-268">Resets the current enumerator so it points to the head of the queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40196-269">列挙子は、順方向にのみ移動できます。</span><span class="sxs-lookup"><span data-stu-id="40196-269">An enumerator can only move in a forward direction.</span></span> <span data-ttu-id="40196-270">キューの先頭に最初からやり直すには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="40196-270">Use this method to start over at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="40196-271">呼び出した後<xref:System.Messaging.MessageEnumerator.Reset%2A>カーソルが最初のメッセージを指します。</span><span class="sxs-lookup"><span data-stu-id="40196-271">After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message.</span></span> <span data-ttu-id="40196-272">呼び出す必要はありません<xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出した後<xref:System.Messaging.MessageEnumerator.Reset%2A>キューの最初のメッセージにカーソルを移動します。</span><span class="sxs-lookup"><span data-stu-id="40196-272">You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="40196-273">現在のカーソル位置にあるメッセージを参照する <see cref="T:System.Messaging.Message" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-273">Returns a <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="40196-274">現在のカーソル位置にあるメッセージを参照する <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="40196-274">A <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>