<Type Name="ReceiveCompletedEventArgs" FullName="System.Messaging.ReceiveCompletedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="40fb7c4c36e8a9ddbae569f24bf33f51c4c52063" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37479104" /></Metadata><TypeSignature Language="C#" Value="public class ReceiveCompletedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReceiveCompletedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.ReceiveCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ReceiveCompletedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReceiveCompletedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ReceiveCompletedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> イベントのデータを提供します。 非同期の受信操作がイベント ハンドラーを呼び出すと、このクラスのインスタンスがハンドラーに渡されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベント通知を使用して、キューから非同期的にメッセージを受信するときにメッセージを処理するメソッドを作成する必要があります。 コードを呼び出す必要があります<xref:System.Messaging.MessageQueue.BeginReceive%2A>非同期処理を開始します。 アプリケーションに通知メッセージが受信したときに、<xref:System.Messaging.MessageQueue.ReceiveCompleted>イベント。 インスタンス<xref:System.Messaging.ReceiveCompletedEventArgs>イベント デリゲートを呼び出すイベント ハンドラーに渡されます。 関連付けられているデータ、<xref:System.Messaging.MessageQueue.ReceiveCompleted>デリゲートにイベントが含まれている<xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A>パラメーター。  
  
 イベントの完了通知を提供する 2 つの方法: イベント通知とコールバック。 <xref:System.Messaging.ReceiveCompletedEventArgs> イベント通知でのみ使用されます。 コールバックとイベント通知の比較については、"イベントとを参照してください。MSDN で"コールバック。  
  
 <xref:System.Messaging.ReceiveCompletedEventArgs> アクセスを提供します。 非同期の終了を開始したメッセージの受信操作を通じて、<xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A>メンバー。 これは、メッセージへの代替であり、動作への呼び出しとほぼ同じ<xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 次のコード例のイベント ハンドラーを作成する、<xref:System.Messaging.MessageQueue.ReceiveCompleted>イベントとイベントでの委任を使用して、<xref:System.Messaging.ReceiveCompletedEventHandler>します。 イベント ハンドラー、 `MyReceiveCompleted`、キューからメッセージを受信および画面に、本文を書き込みます。  
  
 [!code-cpp[MessageQueue.ReceiveCompleted#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/CPP/mqreceivecompletedeventhandler.cpp#1)]
 [!code-csharp[MessageQueue.ReceiveCompleted#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/CS/mqreceivecompletedeventhandler.cs#1)]
 [!code-vb[MessageQueue.ReceiveCompleted#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/VB/mqreceivecompletedeventhandler.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ReceiveCompletedEventHandler" />
    <altmember cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
    <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
    <altmember cref="M:System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)" />
    <altmember cref="T:System.Messaging.Message" />
  </Docs>
  <Members>
    <Member MemberName="AsyncResult">
      <MemberSignature Language="C#" Value="public IAsyncResult AsyncResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IAsyncResult AsyncResult" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.ReceiveCompletedEventArgs.AsyncResult" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncResult As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IAsyncResult ^ AsyncResult { IAsyncResult ^ get(); void set(IAsyncResult ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncResult : IAsyncResult with get, set" Usage="System.Messaging.ReceiveCompletedEventArgs.AsyncResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求された非同期操作の結果を取得または設定します。</summary>
        <value>受信操作に関連付けられたデータを格納している <see cref="T:System.IAsyncResult" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> 進行中または完了した非同期操作を識別します。 プロパティには、いくつかの潜在的な非同期操作を完了するのかを判断できるデータが含まれています。 イベント ハンドラーに渡されると、有効と<xref:System.Messaging.MessageQueue.EndReceive%2A>完了した操作に関連付けられているメッセージにアクセスします。  
  
 呼び出すと<xref:System.Messaging.MessageQueue.BeginReceive%2A>、<xref:System.IAsyncResult>場合でも、メッセージを 1 つが存在する場合はまだ取得されていない操作が完了していないため、すぐに、返されます。 <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A>非同期操作の状態を示します。 <xref:System.Messaging.MessageQueue.BeginReceive%2A> まで、操作全体で変更されると、オブジェクトを作成します<xref:System.Messaging.MessageQueue.EndReceive%2A>それを完了します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
        <altmember cref="M:System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)" />
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Message" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.ReceiveCompletedEventArgs.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Message { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : System.Messaging.Message" Usage="System.Messaging.ReceiveCompletedEventArgs.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期の受信操作に関連付けられているメッセージを取得します。</summary>
        <value>非同期の受信操作の最終結果を表す <see cref="T:System.Messaging.Message" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A>プロパティは、非同期の終了を開始したメッセージを取得するための手段を提供操作を受信します。  
  
 <xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=nameWithType> 初めてと呼びます、<xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A>を呼び出す必要はありませんので、プロパティは読み取り<xref:System.Messaging.MessageQueue.EndReceive%2A>前に、このプロパティの値を取得します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><see cref="P:System.Messaging.ReceiveCompletedEventArgs.Message" /> を取得できませんでした。 非同期操作のタイムアウト時間が経過した可能性があります。</exception>
      </Docs>
    </Member>
  </Members>
</Type>