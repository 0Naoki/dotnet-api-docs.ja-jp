<Type Name="CompositionTarget" FullName="System.Windows.Media.CompositionTarget">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3bf859ba376b46e8d1e346a7a51b7f5326c3d997" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CompositionTarget : System.Windows.Threading.DispatcherObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CompositionTarget extends System.Windows.Threading.DispatcherObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.CompositionTarget" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CompositionTarget&#xA;Inherits DispatcherObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositionTarget abstract : System::Windows::Threading::DispatcherObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="78f8c-101">アプリケーションの表示サーフェイスを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="78f8c-101">Represents the display surface of your application.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78f8c-102"><xref:System.Windows.Media.CompositionTarget> アプリケーションが描画される画面の表面を表すクラスです。</span><span class="sxs-lookup"><span data-stu-id="78f8c-102"><xref:System.Windows.Media.CompositionTarget> is a class that represents the display surface on which your application is being drawn.</span></span> <span data-ttu-id="78f8c-103">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] のアニメーション エンジンには、フレームベースのアニメーションを作成するためのさまざまな機能が用意されています。</span><span class="sxs-lookup"><span data-stu-id="78f8c-103">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] animation engine provides many features for creating frame-based animation.</span></span> <span data-ttu-id="78f8c-104">ただし、これにはフレーム ベースの描画を制御することが必要となるアプリケーションのシナリオがあります。</span><span class="sxs-lookup"><span data-stu-id="78f8c-104">However, there are application scenarios in which you need control over rendering on a per frame basis.</span></span> <span data-ttu-id="78f8c-105"><xref:System.Windows.Media.CompositionTarget>オブジェクトは、フレームごとのコールバックに基づくカスタム アニメーションを作成する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="78f8c-105">The <xref:System.Windows.Media.CompositionTarget> object provides the ability to create custom animations based on a per-frame callback.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78f8c-106">完全なコード サンプルを使用して、<xref:System.Windows.Media.CompositionTarget>を参照してください[CompositionTarget サンプルを使用して](http://go.microsoft.com/fwlink/?LinkID=160045)です。</span><span class="sxs-lookup"><span data-stu-id="78f8c-106">For a complete code sample using <xref:System.Windows.Media.CompositionTarget>, see [Using the CompositionTarget Sample](http://go.microsoft.com/fwlink/?LinkID=160045).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.CompositionTarget.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78f8c-107">
            <see cref="T:System.Windows.Media.CompositionTarget" /> を破棄します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78f8c-107">Disposes <see cref="T:System.Windows.Media.CompositionTarget" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rendering">
      <MemberSignature Language="C#" Value="public static event EventHandler Rendering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Rendering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.CompositionTarget.Rendering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event Rendering As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ Rendering;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78f8c-108">構成ツリーのオブジェクトがレンダリングされる直前に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78f8c-108">Occurs just before the objects in the composition tree are rendered.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78f8c-109"><xref:System.Windows.Media.CompositionTarget.Rendering>構成ツリーがアニメーションとレイアウトを適用した後は、イベントを指定されたイベント ハンドラーにルーティングします。</span><span class="sxs-lookup"><span data-stu-id="78f8c-109">The <xref:System.Windows.Media.CompositionTarget.Rendering> event is routed to the specified event handler after animation and layout have been applied to the composition tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78f8c-110"><xref:System.Windows.Media.CompositionTarget.Rendering>中にイベントが発生した、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]レンダリング処理します。</span><span class="sxs-lookup"><span data-stu-id="78f8c-110">The <xref:System.Windows.Media.CompositionTarget.Rendering> event is raised during the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] rendering process.</span></span> <span data-ttu-id="78f8c-111">次の例は、登録する方法を示しています、 <xref:System.EventHandler> 、静的なデリゲート<xref:System.Windows.Media.CompositionTarget.Rendering>メソッド<xref:System.Windows.Media.CompositionTarget>です。</span><span class="sxs-lookup"><span data-stu-id="78f8c-111">The following example shows how you register an <xref:System.EventHandler> delegate to the static <xref:System.Windows.Media.CompositionTarget.Rendering> method on <xref:System.Windows.Media.CompositionTarget>.</span></span>  
  
 [!code-csharp[CompositionTargetSample#CompositionTarget1](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetSample/CSharp/Window1.xaml.cs#compositiontarget1)]
 [!code-vb[CompositionTargetSample#CompositionTarget1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetSample/visualbasic/window1.xaml.vb#compositiontarget1)]  
  
 <span data-ttu-id="78f8c-112">描画イベント ハンドラーを使用すると、カスタムの描画コンテンツを作成します。</span><span class="sxs-lookup"><span data-stu-id="78f8c-112">You can use your rendering event handler to create custom drawing content.</span></span> <span data-ttu-id="78f8c-113">このイベント ハンドラーは、フレームごとに 1 回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="78f8c-113">This event handler gets called once per frame.</span></span> <span data-ttu-id="78f8c-114">ごとに[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]マーシャ リング コンポジション ツリーで、イベント ハンドラーに間でのビジュアル ツリー内の永続化された描画データと呼びます。</span><span class="sxs-lookup"><span data-stu-id="78f8c-114">Each time that [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] marshals the persisted rendering data in the visual tree across to the composition tree, your event handler is called.</span></span> <span data-ttu-id="78f8c-115">さらに、更新の強制実行構成ツリーがビジュアル ツリーの変更、されても、イベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="78f8c-115">In addition, if changes to the visual tree force updates to the composition tree, your event handler is also called.</span></span> <span data-ttu-id="78f8c-116">レイアウトの計算した後、イベント ハンドラーが呼び出されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="78f8c-116">Note that your event handler is called after layout has been computed.</span></span> <span data-ttu-id="78f8c-117">ただし、そのレイアウトを表示する前にもう一度計算されますが、イベント ハンドラーでレイアウトを変更することができます。</span><span class="sxs-lookup"><span data-stu-id="78f8c-117">However, you can modify layout in your event handler, which means that layout will be computed once more before rendering.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootVisual">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Media.Visual RootVisual { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Visual RootVisual" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.CompositionTarget.RootVisual" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RootVisual As Visual" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Media::Visual ^ RootVisual { System::Windows::Media::Visual ^ get(); void set(System::Windows::Media::Visual ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78f8c-118">
            <see cref="T:System.Windows.Media.CompositionTarget" /> のルート ビジュアルを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78f8c-118">Gets or sets the root visual of the <see cref="T:System.Windows.Media.CompositionTarget" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78f8c-119">
            <see cref="T:System.Windows.Media.CompositionTarget" /> のルート ビジュアル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78f8c-119">The root visual of the <see cref="T:System.Windows.Media.CompositionTarget" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="78f8c-120">ルートを設定するためのビジュアル、<see cref="T:System.Windows.Media.CompositionTarget" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78f8c-120">for setting the root visual of the <see cref="T:System.Windows.Media.CompositionTarget" />.</span>
          </span>
          <span data-ttu-id="78f8c-121">関連付けられた列挙は: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="78f8c-121">Associated enumerations: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="TransformFromDevice">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Media.Matrix TransformFromDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Matrix TransformFromDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.CompositionTarget.TransformFromDevice" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TransformFromDevice As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Windows::Media::Matrix TransformFromDevice { System::Windows::Media::Matrix get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78f8c-122">レンダリング先デバイスからこのターゲットに座標を変換するために使用できる行列を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78f8c-122">Gets a matrix that can be used to transform coordinates from the rendering destination device to this target.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78f8c-123">変換行列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78f8c-123">The transformation matrix.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformToDevice">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Media.Matrix TransformToDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Matrix TransformToDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.CompositionTarget.TransformToDevice" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TransformToDevice As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Windows::Media::Matrix TransformToDevice { System::Windows::Media::Matrix get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78f8c-124">このターゲットからレンダリング先デバイスに座標を変換するために使用できる行列を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78f8c-124">Gets a matrix that can be used to transform coordinates from this target to the rendering destination device.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78f8c-125">変換行列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78f8c-125">The transformation matrix.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>