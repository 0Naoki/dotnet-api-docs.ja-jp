<Type Name="SecurityTokenHandler" FullName="System.IdentityModel.Tokens.SecurityTokenHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24ee9e0178965939d224c31ccbd71a445222d09c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36480597" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SecurityTokenHandler : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityTokenHandler extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityTokenHandler&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityTokenHandler abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type SecurityTokenHandler = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="420ed-101">セキュリティ トークン ハンドラーの抽象基本クラス。</span>
      <span class="sxs-lookup">
        <span data-stu-id="420ed-101">The abstract base class for security token handlers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-102"><xref:System.IdentityModel.Tokens.SecurityTokenHandler>クラスは、すべてのセキュリティ トークン ハンドラーを派生させる基底クラスです。</span><span class="sxs-lookup"><span data-stu-id="420ed-102">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class is the base class from which all security token handlers derive.</span></span> <span data-ttu-id="420ed-103">セキュリティ トークン ハンドラーを。</span><span class="sxs-lookup"><span data-stu-id="420ed-103">A security token handler is responsible for:</span></span>  
  
-   <span data-ttu-id="420ed-104">セキュリティ トークンを検証しています (<xref:System.IdentityModel.Tokens.SecurityToken>) プロセスとパッケージ化にトークンのクレームが含まれているものでは、型の<xref:System.Security.Claims.ClaimsIdentity>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="420ed-104">Validating security tokens (<xref:System.IdentityModel.Tokens.SecurityToken>) of the type it is designed to process and packaging the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity> object.</span></span>  
  
-   <span data-ttu-id="420ed-105">シリアル化して、処理するものでは型のセキュリティ トークンを逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="420ed-105">Serializing and deserializing security tokens of the type it is designed to process.</span></span>  
  
-   <span data-ttu-id="420ed-106">シリアル化して、キー識別句を逆シリアル化 (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) との間に処理するものでは、型のトークンを参照する`<wsse:SecurityTokenReference>`要素。</span><span class="sxs-lookup"><span data-stu-id="420ed-106">Serializing and deserializing key identifier clauses (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that refer to tokens of the type it is designed to process to and from `<wsse:SecurityTokenReference>` elements.</span></span>  
  
-   <span data-ttu-id="420ed-107">セキュリティ トークンの作成、<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor>の実装によって渡されたオブジェクト、<xref:System.IdentityModel.SecurityTokenService>クラスです。</span><span class="sxs-lookup"><span data-stu-id="420ed-107">Creating security tokens from a <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> object passed by implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
-   <span data-ttu-id="420ed-108">実装のためのセキュリティ トークンからキー識別句を作成する、<xref:System.IdentityModel.SecurityTokenService>クラスです。</span><span class="sxs-lookup"><span data-stu-id="420ed-108">Creating key identifier clauses from a security token for implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
 <span data-ttu-id="420ed-109">Windows Identity Foundation (WIF) では、すぐ次のセキュリティ トークン ハンドラーが付属します。</span><span class="sxs-lookup"><span data-stu-id="420ed-109">Windows Identity Foundation (WIF) ships the following security token handlers out of the box:</span></span>  
  
-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  
  
 <span data-ttu-id="420ed-110">これらのクラスのほとんどは、クラスがデザインされているトークンの処理に特有の機能を実装する追加のメンバーを公開します。</span><span class="sxs-lookup"><span data-stu-id="420ed-110">Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed.</span></span> <span data-ttu-id="420ed-111">多くの場合で直接からではなく、これらのクラスのいずれかから派生する方がよい場合があります、<xref:System.IdentityModel.Tokens.SecurityTokenHandler>クラスです。</span><span class="sxs-lookup"><span data-stu-id="420ed-111">In many cases it may be better to derive from one of these classes rather than directly from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class.</span></span>  
  
 <span data-ttu-id="420ed-112">セキュリティ トークン ハンドラーを追加またはを指定して、トークン ハンドラー コレクションから削除することができます、 [&lt;追加&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)、 [&lt;削除&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)、または[&lt;オフ&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)の下の要素、 [ &lt;securityTokenHandlers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)構成ファイル内の要素。</span><span class="sxs-lookup"><span data-stu-id="420ed-112">A security token handler can be added or removed from  a token handler collection by specifying the [&lt;add&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md), [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md), or [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md) elements under the [&lt;securityTokenHandlers&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) element in a configuration file.</span></span> <span data-ttu-id="420ed-113"><xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration>経由のハンドラー コレクションの構成設定を格納しているオブジェクトでアクセスできる、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>プロパティとメンバーであるトークン ハンドラーのハンドラー コレクションからアクセスできる、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="420ed-113">The <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> object that contains the configuration settings for the handler collection can be accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property and the handler collection that the token handler is a member of can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> property.</span></span> <span data-ttu-id="420ed-114">オーバーライドすることができます、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A>ハンドラーは、すべてのカスタム構成要素を処理するメソッド。</span><span class="sxs-lookup"><span data-stu-id="420ed-114">You can override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method to process any custom configuration elements that your handler takes.</span></span>  
  
 <span data-ttu-id="420ed-115"><xref:System.IdentityModel.Tokens.SecurityTokenHandler>クラスは他のいくつかのプロパティとメソッドを公開します。</span><span class="sxs-lookup"><span data-stu-id="420ed-115">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class exposes several other properties and methods.</span></span> <span data-ttu-id="420ed-116">実装する機能、に応じて、これらのメンバーの一部またはすべてを上書きする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="420ed-116">Depending on the functionality that you choose to implement, you may override some or all of these members.</span></span>  
  
 <span data-ttu-id="420ed-117">オーバーライドする必要があります、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>プロパティおよび<xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>を処理するクラスがセキュリティ トークンの種類に関する情報を WIF インフラストラクチャを提供するメソッドが設計されています。</span><span class="sxs-lookup"><span data-stu-id="420ed-117">You must override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.</span></span>  
  
 <span data-ttu-id="420ed-118">検証、シリアル化および逆シリアル化機能は、ハンドラーがまたは複数の機能を実装するメソッドと組み合わせて、特定の関数を実行できるかどうかを指定するプロパティまたはメソッドによって公開されます。</span><span class="sxs-lookup"><span data-stu-id="420ed-118">Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality.</span></span> <span data-ttu-id="420ed-119">次の一覧は、プロパティまたはその機能を実装するメソッドでの機能を示すメソッドをペアします。</span><span class="sxs-lookup"><span data-stu-id="420ed-119">The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:</span></span>  
  
-   <span data-ttu-id="420ed-120"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A>プロパティおよび<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>メソッド: トークンを検証し、パッケージ化にトークンに含まれる信頼性情報、<xref:System.Security.Claims.ClaimsIdentity>です。</span><span class="sxs-lookup"><span data-stu-id="420ed-120">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property and  the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method: Validates a token and packages the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity>.</span></span>  
  
-   <span data-ttu-id="420ed-121"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>プロパティおよび<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>メソッド: トークンのシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="420ed-121">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods: Token serialization.</span></span>  
  
-   <span data-ttu-id="420ed-122"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A>メソッドおよび<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A>メソッド: トークンの逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="420ed-122">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> methods and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> methods: Token deserialization.</span></span>  
  
-   <span data-ttu-id="420ed-123"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>メソッドおよび<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A>メソッド: キー識別句を逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="420ed-123">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method: Deserializing key identifier clauses.</span></span>  
  
-   <span data-ttu-id="420ed-124"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>メソッドおよび<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A>メソッド。 キー識別子句のシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="420ed-124">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method: Serializing key identifier clauses.</span></span>  
  
 <span data-ttu-id="420ed-125"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A>と<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A>の実装では、パイプラインからのメソッドが呼び出される、<xref:System.IdentityModel.SecurityTokenService>クラスです。</span><span class="sxs-lookup"><span data-stu-id="420ed-125">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> methods are called from the pipeline in implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
 <span data-ttu-id="420ed-126"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A>メソッドは、指定されたトークンが既に受信されているかどうかを決定する WIF インフラストラクチャによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="420ed-126">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is called by the WIF infrastructure to determine whether the specified token has already been received.</span></span> <span data-ttu-id="420ed-127">既定ではこのメソッドが戻る`false`トークンが既に受信されていないことを示します。</span><span class="sxs-lookup"><span data-stu-id="420ed-127">By default this method returns `false`, which indicates that the token has not already been received.</span></span> <span data-ttu-id="420ed-128">メソッドをオーバーライドし、再生されたトークンを検出するためのロジックを提供することができます。</span><span class="sxs-lookup"><span data-stu-id="420ed-128">You can override the method and provide logic to detect replayed tokens.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-129">すべてのコード例、<xref:System.IdentityModel.Tokens.SecurityTokenHandler>トピックがから取得した、`Custom Token`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-129">The code examples in all of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> topics are taken from the `Custom Token` sample.</span></span> <span data-ttu-id="420ed-130">このサンプルでは、Simple Web Token (SWT) の処理を有効にするカスタム クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="420ed-130">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="420ed-131">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-131">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span> <span data-ttu-id="420ed-132">次の XML では、トークン ハンドラー コレクションに、SWT トークン ハンドラーを追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="420ed-132">The following XML shows how to add the SWT token handler to the token handlers collection.</span></span>  
  
```xml  
<system.identityModel>  
  <identityConfiguration saveBootstrapContext="true">  
    <issuerTokenResolver type="SimpleWebToken.CustomIssuerTokenResolver, SimpleWebToken">  
      <AddAudienceKeyPair  symmetricKey="wAVkldQiFypTQ+kdNdGWCYCHRcee8XmXxOvgmak8vSY=" audience="http://localhost:19851/" />  
    </issuerTokenResolver>  
    <issuerNameRegistry type="RelyingParty.TrustedIssuerNameRegistry, RelyingParty"/>  
    <audienceUris>  
      <add value="http://localhost:19851/"/>  
    </audienceUris>  
    <securityTokenHandlers>  
      <add type="SimpleWebToken.SimpleWebTokenHandler, SimpleWebToken" />  
    </securityTokenHandlers>  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SecurityToken" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />
    <altmember cref="T:System.IdentityModel.SecurityTokenService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityTokenHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="420ed-133">
            <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> クラスを初期化するために、派生クラスのコンストラクターから呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-133">Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadKeyIdentifierClause (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member CanReadKeyIdentifierClause : System.Xml.XmlReader -&gt; bool&#xA;override this.CanReadKeyIdentifierClause : System.Xml.XmlReader -&gt; bool" Usage="securityTokenHandler.CanReadKeyIdentifierClause reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="420ed-134">開始要素にある XML リーダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-134">An XML reader positioned at the start element.</span>
          </span>
          <span data-ttu-id="420ed-135">リーダーをこのメソッドにより移すことはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-135">The reader should not be advanced by this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-136">指定した XML リーダーによって参照される XML 要素が、このインスタンスによって逆シリアル化できるキー識別子節であるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-136">Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-137">
            <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> メソッドが要素を読み取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-137">
              <see langword="true" /> if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> method can read the element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="420ed-138">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-138">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-139">既定の実装を返します`false`を示すキー識別子句を読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="420ed-139">The default implementation returns `false` to indicate that the key identifier clause cannot be read.</span></span>  
  
 <span data-ttu-id="420ed-140">派生クラスでは、インスタンスがキー識別句を逆シリアル化できるかどうかを判断するため、リーダーが参照している要素を確認します。</span><span class="sxs-lookup"><span data-stu-id="420ed-140">A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause.</span></span> <span data-ttu-id="420ed-141">呼び出すことによってこれは通常、<xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType>メソッドを適切な要素と名前空間文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="420ed-141">This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType> method with the appropriate element and namespace strings specified.</span></span> <span data-ttu-id="420ed-142">オーバーライドする場合<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>、上書きすることも必要があります、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A>キー識別子句を逆シリアル化するためのロジックを提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="420ed-142">If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method to provide the logic to deserialize the key identifier clause.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="420ed-143">指定したトークンが、このインスタンスが処理する型のトークンとして逆シリアル化できるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-143">Returns a value that indicates whether the specified token can be deserialized as a token of the type processed by this instance.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (tokenString As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::String ^ tokenString);" />
      <MemberSignature Language="F#" Value="abstract member CanReadToken : string -&gt; bool&#xA;override this.CanReadToken : string -&gt; bool" Usage="securityTokenHandler.CanReadToken tokenString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">
          <span data-ttu-id="420ed-144">読み上げるトークンの文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-144">The token string to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-145">指定した文字列が、このインスタンスが処理する型のトークンとして逆シリアル化できるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-145">Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-146">
            <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> メソッドが要素を読み取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-146">
              <see langword="true" /> if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> method can read the element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="420ed-147">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-147">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-148">既定の実装では、常に `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="420ed-148">The default implementation always returns `false`.</span></span>  
  
 <span data-ttu-id="420ed-149">オーバーライドもこのメソッドをオーバーライドする場合、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>トークンを逆シリアル化するためのロジックを提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="420ed-149">If you override this method, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method to provide the logic to deserialize the token.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member CanReadToken : System.Xml.XmlReader -&gt; bool&#xA;override this.CanReadToken : System.Xml.XmlReader -&gt; bool" Usage="securityTokenHandler.CanReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="420ed-150">開始要素にある XML リーダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-150">An XML reader positioned at a start element.</span>
          </span>
          <span data-ttu-id="420ed-151">リーダーをこのメソッドにより移すことはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-151">The reader should not be advanced by this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-152">指定した XML リーダーによって参照される XML 要素が、このインスタンスによって処理される型のトークンとして読み取ることができるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-152">Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-153">
            <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> メソッドが要素を読み取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-153">
              <see langword="true" /> if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> method can read the element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="420ed-154">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-154">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-155">既定の実装では、常に `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="420ed-155">The default implementation always returns `false`.</span></span>  
  
 <span data-ttu-id="420ed-156">派生クラスでは、インスタンスが、セキュリティ トークンを逆シリアル化できるかどうかを判断するため、リーダーが参照している要素を確認します。</span><span class="sxs-lookup"><span data-stu-id="420ed-156">A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token.</span></span> <span data-ttu-id="420ed-157">呼び出すことによってこれは通常、<xref:System.Xml.XmlReader.IsStartElement%2A>メソッドを適切な要素と名前空間文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="420ed-157">This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A> method with the appropriate element and namespace strings specified.</span></span> <span data-ttu-id="420ed-158">オーバーライドする場合<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>、上書きすることも必要があります、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>メソッドまたは<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>キー識別子句を逆シリアル化するためのロジックを提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="420ed-158">If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method or the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method to provide the logic to deserialize the key identifier clause.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-159">次のコードがオーバーライドする方法を示します、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A>トークン ハンドラーで読み取り可能かどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="420ed-159">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> method to determine whether a token can be read by a handler.</span></span> <span data-ttu-id="420ed-160">コードがから取得した、`Custom Token`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-160">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="420ed-161">このサンプルでは、Simple Web Token (SWT) の処理を有効にするカスタム クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="420ed-161">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="420ed-162">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-162">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidateToken">
      <MemberSignature Language="C#" Value="public virtual bool CanValidateToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanValidateToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanValidateToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanValidateToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanValidateToken : bool" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="420ed-163">ハンドラーが、セキュリティ トークンの検証をサポートするかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-163">Gets a value that indicates whether the handler supports validation of security tokens.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="420ed-164">クラスがセキュリティ トークンを検証できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-164">
              <see langword="true" /> if the class is capable of validating security tokens; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="420ed-165">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-165">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-166">返すには、このプロパティをオーバーライドに検証を実装する派生クラスで、`true`をオーバーライドし、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>検証ロジックを実装するメソッド。</span><span class="sxs-lookup"><span data-stu-id="420ed-166">To implement validation in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method to implement the validation logic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-167">次のコードがオーバーライドする方法を示します、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A>カスタム ハンドラーがトークンを検証できることを示すプロパティです。</span><span class="sxs-lookup"><span data-stu-id="420ed-167">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property to indicate that a custom handler can validate tokens.</span></span> <span data-ttu-id="420ed-168">コードがから取得した、`Custom Token`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-168">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="420ed-169">このサンプルでは、Simple Web Token (SWT) の処理を有効にするカスタム クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="420ed-169">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="420ed-170">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-170">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanWriteKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanWriteKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberSignature Language="F#" Value="abstract member CanWriteKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool&#xA;override this.CanWriteKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool" Usage="securityTokenHandler.CanWriteKeyIdentifierClause securityKeyIdentifierClause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="securityKeyIdentifierClause">
          <span data-ttu-id="420ed-171">確認するキー識別句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-171">The key identifier clause to be checked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-172">指定したキー識別子句をこのインスタンスでシリアル化できるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-172">Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-173">キー識別句をシリアル化できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-173">
              <see langword="true" /> if the key identifier clause can be serialized; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="420ed-174">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-174">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-175">既定の実装では、常に `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="420ed-175">The default implementation always returns `false`.</span></span>  
  
 <span data-ttu-id="420ed-176">オーバーライドする場合は<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>、上書きすることも必要があります、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A>キー識別子句をシリアル化するためのロジックを提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="420ed-176">If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method to provide the logic to serialize the key identifier clause.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanWriteToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWriteToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWriteToken : bool" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="420ed-177">ハンドラーが、セキュリティ トークンをシリアル化できるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-177">Gets a value that indicates whether the handler can serialize security tokens.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="420ed-178">クラスがトークンをシリアル化できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-178">
              <see langword="true" /> if the class is capable of serializing tokens; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="420ed-179">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-179">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-180">派生クラスでシリアル化を実装するには、このプロパティを返すをオーバーライド`true`をオーバーライドし、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>をシリアル化ロジックを実装するメソッド。</span><span class="sxs-lookup"><span data-stu-id="420ed-180">To implement serialization in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods to implement the serialization logic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-181">次のコードがオーバーライドする方法を示します、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>カスタム ハンドラーがトークンをシリアル化できることを示すプロパティです。</span><span class="sxs-lookup"><span data-stu-id="420ed-181">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property to indicate that a custom handler can serialize tokens.</span></span> <span data-ttu-id="420ed-182">コードがから取得した、`Custom Token`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-182">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="420ed-183">このサンプルでは、Simple Web Token (SWT) の処理を有効にするカスタム クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="420ed-183">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="420ed-184">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-184">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberSignature Language="VB.NET" Value="Public Property Configuration As SecurityTokenHandlerConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ Configuration { System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ get(); void set(System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Configuration : System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration with get, set" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="420ed-185">現在のインスタンスの構成を提供する <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> オブジェクトを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-185">Gets or sets the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> object that provides configuration for the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="420ed-186">現在のインスタンスの構成オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-186">The configuration object for the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-187"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>プロパティは通常から構成インフラストラクチャによって設定される、 [ &lt;securityTokenHandlerConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)適用中に、構成ファイル内の要素を開始します。</span><span class="sxs-lookup"><span data-stu-id="420ed-187">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property is typically set by the configuration infrastructure from the [&lt;securityTokenHandlerConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) element in the configuration file during application start up.</span></span>  
  
 <span data-ttu-id="420ed-188">派生クラスで使用して、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>プロパティ アクセスの構成設定をたとえば、発行者名レジストリで使用する、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>メソッドからアクセスできる、<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType>構成オブジェクトのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="420ed-188">In derived classes, you use the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property to access configuration settings; for example, the issuer name registry to use in the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType> property of the configuration object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainingCollection">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainingCollection As SecurityTokenHandlerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ ContainingCollection { System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainingCollection : System.IdentityModel.Tokens.SecurityTokenHandlerCollection" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="420ed-189">現在のインスタンスを含むトークン ハンドラー コレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-189">Gets the token handler collection that contains the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="420ed-190">現在のインスタンスを含むトークン ハンドラー コレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-190">The token handler collection that contains the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-191">トークン ハンドラーを追加するときに、<xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection>インスタンスでは、このプロパティは自動的に設定します。</span><span class="sxs-lookup"><span data-stu-id="420ed-191">When the token handler is added to a <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection> instance, this property is automatically set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenReference">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference (System.IdentityModel.Tokens.SecurityToken token, bool attached);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference(class System.IdentityModel.Tokens.SecurityToken token, bool attached) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSecurityTokenReference (token As SecurityToken, attached As Boolean) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ CreateSecurityTokenReference(System::IdentityModel::Tokens::SecurityToken ^ token, bool attached);" />
      <MemberSignature Language="F#" Value="abstract member CreateSecurityTokenReference : System.IdentityModel.Tokens.SecurityToken * bool -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause&#xA;override this.CreateSecurityTokenReference : System.IdentityModel.Tokens.SecurityToken * bool -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Usage="securityTokenHandler.CreateSecurityTokenReference (token, attached)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="attached" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="420ed-192">参照が作成される対象のトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-192">The token for which the reference is to be created.</span>
          </span>
        </param>
        <param name="attached">
          <span data-ttu-id="420ed-193">アタッチされた参照を作成する必要がある場合は <see langword="true" />。アタッチされていない参照を作成する必要がある場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-193">
              <see langword="true" /> if an attached reference should be created; <see langword="false" /> if an unattached reference should be created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-194">派生クラスでオーバーライドされると、そのクラスによって処理されるトークンのセキュリティ トークン参照を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-194">When overridden in a derived class, creates the security token reference for tokens processed by that class.</span>
          </span>
          <span data-ttu-id="420ed-195">このメソッドは、通常、セキュリティ トークン サービス (STS) によって呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-195">This method is typically called by a security token service (STS).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-196">指定されたトークンを参照するキー識別子句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-196">A key identifier clause that references the specified token.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-197">既定では、このメソッドをスロー、<xref:System.NotImplementedException>例外。</span><span class="sxs-lookup"><span data-stu-id="420ed-197">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="420ed-198">派生クラスをキー識別子句を返すには、このメソッドをオーバーライドする (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) の作成に使用できる、`<wsse:SecurityTokenReference>`指定したトークンの要素。</span><span class="sxs-lookup"><span data-stu-id="420ed-198">Derived classes override this method to return a key identifier clause (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that can be used to create a `<wsse:SecurityTokenReference>` element for the specified token.</span></span>  
  
 <span data-ttu-id="420ed-199">実装から呼び出される、<xref:System.IdentityModel.SecurityTokenService>クラスです。</span><span class="sxs-lookup"><span data-stu-id="420ed-199">Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
 <span data-ttu-id="420ed-200">通常、 <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> 、以外のときに使用される、カスタム セキュリティ トークン サービスが作成される必要はありません。</span><span class="sxs-lookup"><span data-stu-id="420ed-200">Typically, a <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> does not need to be used, other than when a custom security token service is created.</span></span> <span data-ttu-id="420ed-201">セキュリティ トークン サービスがセキュリティ トークンを返した場合、発行されたセキュリティ トークンには、結び付けられているセキュリティ トークンまたは結び付けられていないセキュリティ トークンへの参照が含まれます。</span><span class="sxs-lookup"><span data-stu-id="420ed-201">When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens.</span></span> <span data-ttu-id="420ed-202">結び付けられている参照は、SOAP メッセージ トークンのセキュリティ ヘッダーに含まれるセキュリティ トークンを参照し、結び付けられていない参照は、SOAP メッセージのセキュリティ ヘッダーに含まれていないセキュリティ トークンを参照します。</span><span class="sxs-lookup"><span data-stu-id="420ed-202">Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message.</span></span> <span data-ttu-id="420ed-203">これらの参照は、通常、発行されたセキュリティ トークンの信頼性を確認します。</span><span class="sxs-lookup"><span data-stu-id="420ed-203">These references typically affirm the authenticity of the issued security token.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-204">次のコードがオーバーライドする方法を示します、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A>メソッドを指定されたトークンからキー識別句を作成します。</span><span class="sxs-lookup"><span data-stu-id="420ed-204">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> method to create a key identifier clause from the specified token.</span></span> <span data-ttu-id="420ed-205">コードがから取得した、`Custom Token`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-205">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="420ed-206">このサンプルでは、Simple Web Token (SWT) の処理を有効にするカスタム クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="420ed-206">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="420ed-207">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-207">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken CreateToken(class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateToken (tokenDescriptor As SecurityTokenDescriptor) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ CreateToken(System::IdentityModel::Tokens::SecurityTokenDescriptor ^ tokenDescriptor);" />
      <MemberSignature Language="F#" Value="abstract member CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.CreateToken tokenDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor">
          <span data-ttu-id="420ed-208">サブジェクトの作成元のセキュリティ トークン記述子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-208">The security token descriptor from which the token is to be created.</span>
          </span>
          <span data-ttu-id="420ed-209">トークン記述子のプロパティは、このメソッドを呼び出す前に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-209">Properties of the token descriptor are set before this method is called.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-210">派生クラスでオーバーライドされると、指定されたトークン記述子を使用してセキュリティ トークンを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-210">When overridden in a derived class, creates a security token using the specified token descriptor.</span>
          </span>
          <span data-ttu-id="420ed-211">このメソッドは、セキュリティ トークン サービス (STS) によって呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-211">This method is called by a security token service (STS).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-212">トークン記述子のプロパティと一致するセキュリティ トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-212">A security token that matches the properties of the token descriptor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-213">既定では、このメソッドをスロー、<xref:System.NotImplementedException>例外。</span><span class="sxs-lookup"><span data-stu-id="420ed-213">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="420ed-214">実装から呼び出される、<xref:System.IdentityModel.SecurityTokenService>クラスです。</span><span class="sxs-lookup"><span data-stu-id="420ed-214">Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-215">次のコードがオーバーライドする方法を示します、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A>を作成してトークン記述子からトークンを返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="420ed-215">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> method to create and return a token from a token descriptor.</span></span> <span data-ttu-id="420ed-216">コードがから取得した、`Custom Token`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-216">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="420ed-217">このサンプルでは、Simple Web Token (SWT) の処理を有効にするカスタム クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="420ed-217">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="420ed-218">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-218">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectReplayedToken">
      <MemberSignature Language="C#" Value="protected virtual void DetectReplayedToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetectReplayedToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DetectReplayedToken (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DetectReplayedToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member DetectReplayedToken : System.IdentityModel.Tokens.SecurityToken -&gt; unit&#xA;override this.DetectReplayedToken : System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.DetectReplayedToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="420ed-219">再生を確認するトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-219">The token to check for replay.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-220">派生クラスでオーバーライドされると、指定したトークンが再生中に検出された場合に例外をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-220">When overridden in a derived class, throws an exception if the specified token is detected as being replayed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-221">既定の実装では、何も行われません。</span><span class="sxs-lookup"><span data-stu-id="420ed-221">The default implementation does nothing.</span></span>  
  
 <span data-ttu-id="420ed-222">派生クラスをスローする必要があります、<xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException>トークンは既に使用されている場合。</span><span class="sxs-lookup"><span data-stu-id="420ed-222">Derived classes should throw a <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> if the token has already been used.</span></span>  
  
 <span data-ttu-id="420ed-223">Windows Identity Foundation (WIF) の提供、<xref:System.IdentityModel.Tokens.TokenReplayCache>キャッシュは派生クラスどの再生からクラスおよび[ &lt;tokenReplayCache&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)を構成するために使用する構成要素、アプリケーションのトークン ハンドラーによって使用されるキャッシュを再生します。ただしの正確な実装、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A>メソッドは、デザイナー、派生クラスの責任です。</span><span class="sxs-lookup"><span data-stu-id="420ed-223">Windows Identity Foundation (WIF) provides the <xref:System.IdentityModel.Tokens.TokenReplayCache> class from which replay caches may be derived and the [&lt;tokenReplayCache&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md) configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is up to the designer of the derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenTypeIdentifiers">
      <MemberSignature Language="C#" Value="public abstract string[] GetTokenTypeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetTokenTypeIdentifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTokenTypeIdentifiers () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::String ^&gt; ^ GetTokenTypeIdentifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetTokenTypeIdentifiers : unit -&gt; string[]" Usage="securityTokenHandler.GetTokenTypeIdentifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="420ed-224">派生クラスでオーバーライドされると、派生クラスによって処理される型のトークンを識別するために要求で使用される URI のセットを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-224">When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-225">このハンドラーがサポートするトークン型を識別する URI のセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-225">The set of URIs that identify the token type that this handler supports.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-226"><xref:System.Type>の現在のインスタンスによって処理されたトークンを介してアクセスは、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="420ed-226">The <xref:System.Type> of the token processed by the current instance is accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property.</span></span> <span data-ttu-id="420ed-227"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>メソッドは、トークンの種類を参照してくださいへのメッセージで使用できる許容可能な識別子のセットを返します。</span><span class="sxs-lookup"><span data-stu-id="420ed-227">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method returns the set of acceptable identifiers that can be used in messages to refer to the token type.</span></span> <span data-ttu-id="420ed-228">URI 値を使用するなど、`<wst:TokenType>`要素の下、`<wst:RequestSecurityToken>`特定の種類のトークンを要求する要素 (によって表される、<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType>オブジェクト モデルのプロパティ)。</span><span class="sxs-lookup"><span data-stu-id="420ed-228">For example, the URI value used in the `<wst:TokenType>` element under the `<wst:RequestSecurityToken>` element to request a specific kind of token (represented by the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType> property in the object model).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-229">次のコードがオーバーライドする方法を示します、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>カスタム トークン、トークンの種類の識別子を返します。</span><span class="sxs-lookup"><span data-stu-id="420ed-229">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to return the token type identifiers for a custom token.</span></span> <span data-ttu-id="420ed-230">コードがから取得した、`Custom Token`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-230">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="420ed-231">このサンプルでは、Simple Web Token (SWT) の処理を有効にするカスタム クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="420ed-231">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="420ed-232">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-232">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#17](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#17)]  
[!code-csharp[WifRcCustomToken#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="securityTokenHandler.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">
          <span data-ttu-id="420ed-233">構成 XML 要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-233">The configuration XML elements.</span>
          </span>
          <span data-ttu-id="420ed-234">リスト内の各ノードは <see cref="T:System.Xml.XmlElement" /> 型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-234">Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-235">派生クラスでオーバーライドされると、XML からカスタム構成を読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-235">When overridden in a derived class, loads custom configuration from XML.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-236"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A>メソッドは、構成のインフラストラクチャによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="420ed-236">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method is called by the configuration infrastructure.</span></span> <span data-ttu-id="420ed-237">このメソッドが呼び出されたときに、`nodelist`トークン ハンドラーの最上位レベルの子要素が表示されます[&lt;追加&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)構成ファイルからの要素。</span><span class="sxs-lookup"><span data-stu-id="420ed-237">When this method is called, the `nodelist` will contain the top-level child elements of the token handler’s [&lt;add&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) element from the configuration file.</span></span> <span data-ttu-id="420ed-238">属性または派生クラスを定義する構成スキーマに応じて子要素これらの各に含めることがあります。</span><span class="sxs-lookup"><span data-stu-id="420ed-238">Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</span></span>  
  
 <span data-ttu-id="420ed-239">既定の実装をスロー、<xref:System.NotImplementedException>です。</span><span class="sxs-lookup"><span data-stu-id="420ed-239">The default implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="420ed-240">構成ファイルからセキュリティ トークン ハンドラーの初期化を有効にする、派生クラスでこのメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="420ed-240">Override this method in your derived class to enable initialization of your security token handler from a configuration file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadKeyIdentifierClause (reader As XmlReader) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ ReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadKeyIdentifierClause : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause&#xA;override this.ReadKeyIdentifierClause : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Usage="securityTokenHandler.ReadKeyIdentifierClause reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="420ed-241">キー識別子句に逆シリアル化される XML の開始要素に配置される XML リーダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-241">An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-242">派生クラスでオーバーライドされると、指定された XML リーダーによって参照される XML を、派生クラスによって処理されるトークンを参照するキー識別句に逆シリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-242">When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-243">XML からでシリアル化されたキー識別句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-243">The key identifier clause that was deserialized from the XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-244">既定では、このメソッドをスロー、<xref:System.NotImplementedException>例外。</span><span class="sxs-lookup"><span data-stu-id="420ed-244">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="420ed-245">XML からのキー識別子句を逆シリアル化するためのロジックを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="420ed-245">Override this method to provide the logic to deserialize a key identifier clause from XML.</span></span> <span data-ttu-id="420ed-246">またをオーバーライドする必要があるこのメソッドをオーバーライドする場合、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="420ed-246">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="420ed-247">派生クラスでオーバーライドされると、派生クラスによって処理される型のトークンに指定の XML を逆シリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-247">When overridden in a derived class, deserializes the specified XML to a token of the type processed by the derived class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (tokenString As String) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::String ^ tokenString);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : string -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : string -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken tokenString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">
          <span data-ttu-id="420ed-248">逆シリアル化する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-248">The string to be deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-249">派生クラスでオーバーライドされると、派生クラスによって処理される型のトークンに指定の文字列を逆シリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-249">When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-250">指定された文字列から逆シリアル化されたセキュリティ トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-250">The security token that was deserialized from the specified string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="420ed-251">信頼できないデータをこのメソッドを呼び出すと、セキュリティ上のリスクです。</span><span class="sxs-lookup"><span data-stu-id="420ed-251">Calling this method with untrusted data is a security risk.</span></span> <span data-ttu-id="420ed-252">このメソッドでは、信頼されたデータだけです。</span><span class="sxs-lookup"><span data-stu-id="420ed-252">Call this method only with trusted data.</span></span> <span data-ttu-id="420ed-253">詳細については、次を参照してください。[データ検証](https://www.owasp.org/index.php/Data_Validation)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-253">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
 <span data-ttu-id="420ed-254">既定では、このメソッドをスロー、<xref:System.NotImplementedException>例外。</span><span class="sxs-lookup"><span data-stu-id="420ed-254">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="420ed-255">文字列からセキュリティ トークンを逆シリアル化できる機能を提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="420ed-255">Override this method to provide functionality that can deserialize a security token from a string.</span></span> <span data-ttu-id="420ed-256">またをオーバーライドする必要がある、このメソッドをオーバーライドする場合、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="420ed-256">If you override, this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="420ed-257">トークンの開始要素にある XML リーダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-257">An XML reader positioned at the start element of the token.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-258">派生クラスでオーバーライドされると、指定された XML リーダーによって参照される XML を、派生クラスによって処理される型のトークンに逆シリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-258">When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-259">XML から逆シリアル化されたセキュリティ トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-259">The security token that was deserialized from the XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="420ed-260">信頼できないデータをこのメソッドを呼び出すと、セキュリティ上のリスクです。</span><span class="sxs-lookup"><span data-stu-id="420ed-260">Calling this method with untrusted data is a security risk.</span></span> <span data-ttu-id="420ed-261">このメソッドでは、信頼されたデータだけです。</span><span class="sxs-lookup"><span data-stu-id="420ed-261">Call this method only with trusted data.</span></span> <span data-ttu-id="420ed-262">詳細については、次を参照してください。[データ検証](https://www.owasp.org/index.php/Data_Validation)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-262">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
 <span data-ttu-id="420ed-263">既定では、このメソッドをスロー、<xref:System.NotImplementedException>例外。</span><span class="sxs-lookup"><span data-stu-id="420ed-263">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="420ed-264">XML からセキュリティ トークンを逆シリアル化するためのロジックを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="420ed-264">Override this method to provide the logic to deserialize a security token from XML.</span></span> <span data-ttu-id="420ed-265">またをオーバーライドする必要があるこのメソッドをオーバーライドする場合、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="420ed-265">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="420ed-266">通常、派生クラスで場合、メソッドは参照先の XML からトークンを逆シリアル化できませんをスロー、<xref:System.Xml.XmlException>です。</span><span class="sxs-lookup"><span data-stu-id="420ed-266">Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-267">次のコードがオーバーライドする方法を示します、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A>指定した XML リーダーからカスタム トークンを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="420ed-267">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> method to read a custom token from the specified XML reader.</span></span> <span data-ttu-id="420ed-268">コードがから取得した、`Custom Token`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-268">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="420ed-269">このサンプルでは、Simple Web Token (SWT) の処理を有効にするカスタム クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="420ed-269">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="420ed-270">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-270">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#7)]  
[!code-csharp[WifRcCustomToken#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#8)]  
[!code-csharp[WifRcCustomToken#14](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader, tokenResolver As SecurityTokenResolver) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenResolver ^ tokenResolver);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken (reader, tokenResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="420ed-271">トークンの開始要素にある XML リーダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-271">An XML reader positioned at the start element of the token.</span>
          </span>
        </param>
        <param name="tokenResolver">
          <span data-ttu-id="420ed-272">帯域外およびキャッシュ済みトークンを含むトークン リゾルバー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-272">A token resolver that contains out-of-band and cached tokens.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-273">派生クラスでオーバーライドされると、指定された XML リーダーによって参照される XML を、指定のトークン リゾルバーを使用して派生クラスによって処理される型のトークンに逆シリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-273">When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-274">XML から逆シリアル化されたセキュリティ トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-274">The security token that was deserialized from the XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="420ed-275">信頼できないデータをこのメソッドを呼び出すと、セキュリティ上のリスクです。</span><span class="sxs-lookup"><span data-stu-id="420ed-275">Calling this method with untrusted data is a security risk.</span></span> <span data-ttu-id="420ed-276">このメソッドでは、信頼されたデータだけです。</span><span class="sxs-lookup"><span data-stu-id="420ed-276">Call this method only with trusted data.</span></span> <span data-ttu-id="420ed-277">詳細については、次を参照してください。[データ検証](https://www.owasp.org/index.php/Data_Validation)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-277">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
 <span data-ttu-id="420ed-278">既定の実装は無視されます、`tokenResolver`パラメーターに呼び出しを代行し、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="420ed-278">The default implementation ignores the `tokenResolver` parameter and delegates the call to the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="420ed-279">XML からセキュリティ トークンを逆シリアル化するためのロジックを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="420ed-279">Override this method to provide the logic to deserialize a security token from XML.</span></span> <span data-ttu-id="420ed-280">またをオーバーライドする必要があるこのメソッドをオーバーライドする場合、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="420ed-280">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="420ed-281">通常、派生クラスで場合、メソッドは参照先の XML からトークンを逆シリアル化できませんをスロー、<xref:System.Xml.XmlException>です。</span><span class="sxs-lookup"><span data-stu-id="420ed-281">Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public abstract Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TokenType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ TokenType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : Type" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="420ed-282">派生クラスでオーバーライドされると、このインスタンスで処理されるセキュリティ トークンの型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-282">When overridden in a derived class, gets the type of the security token that is processed by this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="420ed-283">このインスタンスによって処理されるセキュリティ トークンの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-283">The type of the security token that is processed by this instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-284">派生クラスでは、このプロパティをオーバーライドし、返す必要があります、 <xref:System.Type> 、セキュリティ トークンの (<xref:System.IdentityModel.Tokens.SecurityToken>)、派生クラスによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="420ed-284">You must override this property in derived classes and return the <xref:System.Type> of the security token (<xref:System.IdentityModel.Tokens.SecurityToken>) that is processed by the derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-285">次のコードがオーバーライドする方法を示します、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>返されるプロパティを<xref:System.Type>のカスタム ハンドラーによって処理されるセキュリティ トークン。</span><span class="sxs-lookup"><span data-stu-id="420ed-285">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property to return the <xref:System.Type> of the security tokens that are processed by a custom handler.</span></span> <span data-ttu-id="420ed-286">コードがから取得した、`Custom Token`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-286">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="420ed-287">このサンプルでは、Simple Web Token (SWT) の処理を有効にするカスタム クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="420ed-287">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="420ed-288">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-288">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#18](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationFailure">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationFailure (System.IdentityModel.Tokens.SecurityToken token, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationFailure(class System.IdentityModel.Tokens.SecurityToken token, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationFailure (token As SecurityToken, errorMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationFailure(System::IdentityModel::Tokens::SecurityToken ^ token, System::String ^ errorMessage);" />
      <MemberSignature Language="F#" Value="member this.TraceTokenValidationFailure : System.IdentityModel.Tokens.SecurityToken * string -&gt; unit" Usage="securityTokenHandler.TraceTokenValidationFailure (token, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="420ed-289">検証されているセキュリティ トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-289">The security token that is being validated.</span>
          </span>
        </param>
        <param name="errorMessage">
          <span data-ttu-id="420ed-290">トレースに書き込むメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-290">The message to write to the trace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-291">トレースが有効であるとき、セキュリティ トークンの検証中、障害イベントをトレースします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-291">Traces the failure event during the validation of security tokens when tracing is enabled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-292">このメソッドを呼び出す必要があります、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>メソッドは、トークンの検証が失敗したとします。</span><span class="sxs-lookup"><span data-stu-id="420ed-292">This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method when validation of the token fails.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationSuccess">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationSuccess (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationSuccess(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationSuccess (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationSuccess(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="member this.TraceTokenValidationSuccess : System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.TraceTokenValidationSuccess token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="420ed-293">検証されたトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-293">The token that was validated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-294">トレースが有効であるとき、セキュリティ トークン イベントの検証の成功をトレースします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-294">Traces the successful validation of security tokens event when tracing is enabled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-295">このメソッドを呼び出す必要があります、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>メソッド トークンが正常に検証された後にします。</span><span class="sxs-lookup"><span data-stu-id="420ed-295">This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method after the token has been successfully validated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateToken (token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;&#xA;override this.ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;" Usage="securityTokenHandler.ValidateToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="420ed-296">検証するトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-296">The token to validate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-297">派生クラスでオーバーライドされると、指定されたセキュリティ トークンを検証します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-297">When overridden in a derived class, validates the specified security token.</span>
          </span>
          <span data-ttu-id="420ed-298">トークンは、派生クラスによって処理される種類である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-298">The token must be of the type processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-299">トークンに含まれている ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-299">The identities contained in the token.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-300">既定では、このメソッドをスロー、<xref:System.NotImplementedException>例外。</span><span class="sxs-lookup"><span data-stu-id="420ed-300">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="420ed-301"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>メソッドを検証し、逆シリアル化されたセキュリティ トークンからクレームを抽出するためのインフラストラクチャによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="420ed-301">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method is called by the infrastructure to validate and extract the claims from the deserialized security token.</span></span> <span data-ttu-id="420ed-302">コレクションでこれらのクレームが返される<xref:System.Security.Claims.ClaimsIdentity>メソッドによって返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="420ed-302">These claims are returned in the collection of <xref:System.Security.Claims.ClaimsIdentity> objects returned by the method.</span></span> <span data-ttu-id="420ed-303">一般的な場合は、このコレクションには単一の id が含まれます。</span><span class="sxs-lookup"><span data-stu-id="420ed-303">In the typical case, this collection will contain a single identity.</span></span>  
  
 <span data-ttu-id="420ed-304">派生クラスで検証通常で指定された Uri、対象ユーザーに対してトークンで指定された対象とするユーザーを検証する、<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType>で指定されたトークン ハンドラー構成オブジェクトのプロパティ、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="420ed-304">In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType> property of the token handler configuration object specified on the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property.</span></span> <span data-ttu-id="420ed-305">これらの Uri が下にある構成ファイルで設定は通常、 [ &lt;Audienceuri&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)要素。</span><span class="sxs-lookup"><span data-stu-id="420ed-305">These URIs are typically set in the configuration file under the [&lt;audienceUris&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md) element.</span></span> <span data-ttu-id="420ed-306">対象ユーザーを検証できない場合、<xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException>例外をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="420ed-306">If the audience cannot be validated, an <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> exception should be thrown.</span></span>  
  
 <span data-ttu-id="420ed-307">発行者がのいずれかに、発行者トークンを渡すことによって通常検証トークンを処理する際、<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>のメソッド、<xref:System.IdentityModel.Tokens.IssuerNameRegistry>ハンドラーから構成されているオブジェクト、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="420ed-307">When processing the token, the issuer is typically validated by passing the issuer token to one of the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> methods on the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> object that is configured for the handler through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property.</span></span> <span data-ttu-id="420ed-308">発行者名レジストリの一般構成を通じて、 [ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)構成ファイル内の要素。</span><span class="sxs-lookup"><span data-stu-id="420ed-308">The issuer name registry is typically configured through the [&lt;issuerNameRegistry&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) element in the configuration file.</span></span> <span data-ttu-id="420ed-309"><xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>発行者の名前を返します。</span><span class="sxs-lookup"><span data-stu-id="420ed-309">The <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns the name of the issuer.</span></span> <span data-ttu-id="420ed-310">この名前を設定するために使用する必要があります、<xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType>トークンに含まれる要求のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="420ed-310">This name should be used to set the <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType> property in claims contained in the token.</span></span> <span data-ttu-id="420ed-311">発行者名レジストリには、発行者トークンのエントリが含まれていない場合<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>返します`null`です。</span><span class="sxs-lookup"><span data-stu-id="420ed-311">If the issuer name registry does not contain an entry for the issuer token, <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns `null`.</span></span> <span data-ttu-id="420ed-312">ここでは、<xref:System.IdentityModel.Tokens.SecurityTokenException>は通常、派生クラスでスローされますが、この動作をクラスのデザイナーまでです。</span><span class="sxs-lookup"><span data-stu-id="420ed-312">In this case a <xref:System.IdentityModel.Tokens.SecurityTokenException> is typically thrown in derived classes, but this behavior is up to the designer of the class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-313">次のコードのオーバーライドを示しています、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>単純な web トークン (SWT) を処理するセキュリティ トークン ハンドラーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="420ed-313">The following code shows an override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method for a security token handler that processes simple web tokens (SWT).</span></span> <span data-ttu-id="420ed-314">コードがから取得した、`CustomToken`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-314">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="420ed-315">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-315">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#9](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#9)]  
  
 <span data-ttu-id="420ed-316">次のコードは`CreateClaims`のオーバーライドから呼び出されるメソッド、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>前の例のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="420ed-316">The following code shows `CreateClaims` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the previous example.</span></span> <span data-ttu-id="420ed-317">このメソッドが戻る、<xref:System.Security.Claims.ClaimsIdentity>トークンの要求から作成されるオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="420ed-317">This method returns a <xref:System.Security.Claims.ClaimsIdentity> object that is created from the claims in the token.</span></span> <span data-ttu-id="420ed-318">コードがから取得した、`CustomToken`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-318">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="420ed-319">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-319">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#15](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#15)]  
  
 <span data-ttu-id="420ed-320">次のコードは`ValidateSignature`のオーバーライドから呼び出されるメソッド、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>単純な web トークン ハンドラーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="420ed-320">The following code shows `ValidateSignature` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the simple web token handler.</span></span> <span data-ttu-id="420ed-321">このメソッドは、構成を使用して、トークンの署名を検証<xref:System.IdentityModel.Tokens.IssuerTokenResolver>です。</span><span class="sxs-lookup"><span data-stu-id="420ed-321">This method validates the signature on the token by using the configured <xref:System.IdentityModel.Tokens.IssuerTokenResolver>.</span></span> <span data-ttu-id="420ed-322">コードがから取得した、`CustomToken`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-322">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="420ed-323">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-323">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#12](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#12)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 <span data-ttu-id="420ed-324">次のコードは`ValidateAudience`のオーバーライドから呼び出されるメソッド、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>単純な web トークン ハンドラーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="420ed-324">The following code shows `ValidateAudience` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the simple web token handler.</span></span> <span data-ttu-id="420ed-325">このメソッドは、対象の構成で指定された Uri に対してトークンに含まれている対象ユーザーを検証します。</span><span class="sxs-lookup"><span data-stu-id="420ed-325">This method validates the audience contained in the token against the audience URIs that were specified in configuration.</span></span> <span data-ttu-id="420ed-326">コードがから取得した、`CustomToken`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-326">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="420ed-327">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-327">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#13](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual void WriteKeyIdentifierClause (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteKeyIdentifierClause(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteKeyIdentifierClause(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberSignature Language="F#" Value="abstract member WriteKeyIdentifierClause : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; unit&#xA;override this.WriteKeyIdentifierClause : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; unit" Usage="securityTokenHandler.WriteKeyIdentifierClause (writer, securityKeyIdentifierClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="420ed-328">XML ライター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-328">The XML writer.</span>
          </span>
        </param>
        <param name="securityKeyIdentifierClause">
          <span data-ttu-id="420ed-329">シリアル化するキー識別句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-329">The key identifier clause to serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-330">派生クラスでオーバーライドされると、指定されたキー識別句を XML にシリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-330">When overridden in a derived class, serializes the specified key identifier clause to XML.</span>
          </span>
          <span data-ttu-id="420ed-331">キー識別句は、派生クラスでサポートされているタイプにする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-331">The key identifier clause must be of the type supported by the derived class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-332">既定では、このメソッドをスロー、<xref:System.NotImplementedException>例外。</span><span class="sxs-lookup"><span data-stu-id="420ed-332">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="420ed-333">キー識別子句で xml をシリアル化するためのロジックを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="420ed-333">Override this method to provide the logic to serialize a key identifier clause to XML.</span></span> <span data-ttu-id="420ed-334">またをオーバーライドする必要があるこのメソッドをオーバーライドする場合、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="420ed-334">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="420ed-335">派生クラスでオーバーライドされると、指定されたセキュリティ トークンをシリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-335">When overridden in a derived class, serializes the specified security token.</span>
          </span>
          <span data-ttu-id="420ed-336">トークンは、派生クラスによって処理される種類である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-336">The token must be of the type processed by the derived class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual string WriteToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string WriteToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteToken (token As SecurityToken) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ WriteToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member WriteToken : System.IdentityModel.Tokens.SecurityToken -&gt; string&#xA;override this.WriteToken : System.IdentityModel.Tokens.SecurityToken -&gt; string" Usage="securityTokenHandler.WriteToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="420ed-337">シリアル化するトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-337">The token to serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-338">派生クラスでオーバーライドされると、指定されたセキュリティ トークンを文字列にシリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-338">When overridden in a derived class, serializes the specified security token to a string.</span>
          </span>
          <span data-ttu-id="420ed-339">トークンは、派生クラスによって処理される種類である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-339">The token must be of the type processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="420ed-340">シリアル化されたトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-340">The serialized token.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-341">既定では、このメソッドをスロー、<xref:System.NotImplementedException>例外。</span><span class="sxs-lookup"><span data-stu-id="420ed-341">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="420ed-342">XML のセキュリティ トークンをシリアル化するためのロジックを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="420ed-342">Override this method to provide the logic to serialize a security token to XML.</span></span> <span data-ttu-id="420ed-343">またをオーバーライドする必要があるこのメソッドをオーバーライドする場合、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="420ed-343">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToken(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteToken (writer As XmlWriter, token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteToken(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit&#xA;override this.WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.WriteToken (writer, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="420ed-344">XML ライター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-344">The XML writer.</span>
          </span>
        </param>
        <param name="token">
          <span data-ttu-id="420ed-345">シリアル化するトークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-345">The token to serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="420ed-346">派生クラスでオーバーライドされると、指定されたセキュリティ トークンを XML にシリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-346">When overridden in a derived class, serializes the specified security token to XML.</span>
          </span>
          <span data-ttu-id="420ed-347">トークンは、派生クラスによって処理される種類である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="420ed-347">The token must be of the type processed by the derived class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="420ed-348">既定では、このメソッドをスロー、<xref:System.NotImplementedException>例外。</span><span class="sxs-lookup"><span data-stu-id="420ed-348">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="420ed-349">XML のセキュリティ トークンをシリアル化するためのロジックを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="420ed-349">Override this method to provide the logic to serialize a security token to XML.</span></span> <span data-ttu-id="420ed-350">またをオーバーライドする必要があるこのメソッドをオーバーライドする場合、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="420ed-350">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="420ed-351">次のコードがオーバーライドする方法を示します、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>カスタム トークンをシリアル化するメソッド。</span><span class="sxs-lookup"><span data-stu-id="420ed-351">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> method to serialize a custom token.</span></span> <span data-ttu-id="420ed-352">コードがから取得した、`Custom Token`サンプルです。</span><span class="sxs-lookup"><span data-stu-id="420ed-352">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="420ed-353">このサンプルでは、Simple Web Token (SWT) の処理を有効にするカスタム クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="420ed-353">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="420ed-354">このサンプルと WIF およびそれらをダウンロードできる場所で利用できるその他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)です。</span><span class="sxs-lookup"><span data-stu-id="420ed-354">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#10](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#10)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>