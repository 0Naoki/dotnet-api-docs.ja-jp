<Type Name="QueryableFilterUserControl" FullName="System.Web.DynamicData.QueryableFilterUserControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b41823a772ab075f1e1b79f4308b06f44c815ecb" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52228991" /></Metadata><TypeSignature Language="C#" Value="public abstract class QueryableFilterUserControl : System.Web.UI.UserControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit QueryableFilterUserControl extends System.Web.UI.UserControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.QueryableFilterUserControl" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class QueryableFilterUserControl&#xA;Inherits UserControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class QueryableFilterUserControl abstract : System::Web::UI::UserControl" />
  <TypeSignature Language="F#" Value="type QueryableFilterUserControl = class&#xA;    inherit UserControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.UserControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3aa60-101">フィルター コントロールの基本クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-101">Provides a base class for filter controls.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aa60-102"><xref:System.Web.DynamicData.QueryableFilterUserControl>クラスを基底クラスに基づいているフレームワークをフィルター処理する動的なデータにフィルターをレンダリングするユーザー コントロールをプラグインできる、<xref:System.Web.UI.WebControls.QueryExtender>クラス。</span><span class="sxs-lookup"><span data-stu-id="3aa60-102">The <xref:System.Web.DynamicData.QueryableFilterUserControl> class is the base class for user controls that render filters that can be plugged into the Dynamic Data filtering framework that is based on the <xref:System.Web.UI.WebControls.QueryExtender> class.</span></span>  
  
 <span data-ttu-id="3aa60-103">実装をオーバーライドする必要があります、<xref:System.Web.DynamicData.QueryableFilterUserControl.GetQueryable%2A>コントロール、変更を返す可能性のある<xref:System.Linq.IQueryable>フィルターの状態を反映するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3aa60-103">Implementers must override the <xref:System.Web.DynamicData.QueryableFilterUserControl.GetQueryable%2A> control, which can return a modified <xref:System.Linq.IQueryable> object that reflects the filter's state.</span></span> <span data-ttu-id="3aa60-104">基底クラスには、LINQ 式ツリーを構築するためのヘルパー メソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="3aa60-104">The base class contains helper methods for building LINQ expression trees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3aa60-105">Visual Studio プロジェクトとソース コードは、このトピックと共に使用できます:[スキャフォールディング動的データ](https://go.microsoft.com/fwlink/?LinkId=168914)します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-105">A Visual Studio project with source code is available to accompany this topic: [Scaffolding Dynamic Data](https://go.microsoft.com/fwlink/?LinkId=168914).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Linq" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected QueryableFilterUserControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.QueryableFilterUserControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; QueryableFilterUserControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3aa60-106"><see cref="T:System.Web.DynamicData.QueryableFilterUserControl" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-106">Initializes a new instance of the <see cref="T:System.Web.DynamicData.QueryableFilterUserControl" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyEqualityFilter">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable ApplyEqualityFilter (System.Linq.IQueryable source, string propertyName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable ApplyEqualityFilter(class System.Linq.IQueryable source, string propertyName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.QueryableFilterUserControl.ApplyEqualityFilter(System.Linq.IQueryable,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ApplyEqualityFilter (source As IQueryable, propertyName As String, value As Object) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::IQueryable ^ ApplyEqualityFilter(System::Linq::IQueryable ^ source, System::String ^ propertyName, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ApplyEqualityFilter : System.Linq.IQueryable * string * obj -&gt; System.Linq.IQueryable" Usage="System.Web.DynamicData.QueryableFilterUserControl.ApplyEqualityFilter (source, propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="3aa60-107">ソース <see cref="T:System.Linq.IQueryable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3aa60-107">The source <see cref="T:System.Linq.IQueryable" /> object.</span></span></param>
        <param name="propertyName"><span data-ttu-id="3aa60-108">プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="3aa60-108">The name of the property.</span></span></param>
        <param name="value"><span data-ttu-id="3aa60-109"><paramref name="propertyName" /> パラメーターの値。</span><span class="sxs-lookup"><span data-stu-id="3aa60-109">The value for the <paramref name="propertyName" /> parameter.</span></span></param>
        <summary><span data-ttu-id="3aa60-110">ソース <see cref="T:System.Linq.IQueryable" /> オブジェクトから変換された <see cref="T:System.Linq.IQueryable" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-110">Gets the transformed <see cref="T:System.Linq.IQueryable" /> object from the source <see cref="T:System.Linq.IQueryable" /> object.</span></span></summary>
        <returns><span data-ttu-id="3aa60-111">ソース <see cref="T:System.Linq.IQueryable" /> オブジェクトから変換された <see cref="T:System.Linq.IQueryable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3aa60-111">The transformed <see cref="T:System.Linq.IQueryable" /> object from the source <see cref="T:System.Linq.IQueryable" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="protected internal System.Web.DynamicData.MetaColumn Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.QueryableFilterUserControl.Column" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn" Usage="System.Web.DynamicData.QueryableFilterUserControl.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3aa60-112">フィルター処理に使用する列を取得します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-112">Gets the column to use for filtering.</span></span></summary>
        <value><span data-ttu-id="3aa60-113">フィルター処理に使用する列。</span><span class="sxs-lookup"><span data-stu-id="3aa60-113">The column to use for filtering.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public string DefaultValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.QueryableFilterUserControl.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultValue { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultValue : string" Usage="System.Web.DynamicData.QueryableFilterUserControl.DefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3aa60-114">テーブルに割り当てられた既定値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-114">Gets the default values that are mapped for the table.</span></span></summary>
        <value><span data-ttu-id="3aa60-115">テーブルに割り当てられた既定値。</span><span class="sxs-lookup"><span data-stu-id="3aa60-115">The default values that are mapped for the table.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aa60-116">既定では、動的データにはブール値、外部キー、および列挙型フィルター テンプレート。</span><span class="sxs-lookup"><span data-stu-id="3aa60-116">By default, Dynamic Data provides Boolean, foreign-key, and enumeration filter templates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; DefaultValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; DefaultValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.QueryableFilterUserControl.DefaultValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultValues As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ DefaultValues { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultValues : System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Web.DynamicData.QueryableFilterUserControl.DefaultValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3aa60-117">テーブルに割り当てられた既定値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-117">Gets the default values that are mapped for the table.</span></span></summary>
        <value><span data-ttu-id="3aa60-118">テーブルに割り当てられた既定値。</span><span class="sxs-lookup"><span data-stu-id="3aa60-118">The default values that are mapped for the table.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FilterChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FilterChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.DynamicData.QueryableFilterUserControl.FilterChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event FilterChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FilterChanged;" />
      <MemberSignature Language="F#" Value="member this.FilterChanged : EventHandler " Usage="member this.FilterChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3aa60-119"><see cref="M:System.Web.DynamicData.QueryableFilterUserControl.OnFilterChanged" /> メソッドが呼び出されると発生します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-119">Occurs when the <see cref="M:System.Web.DynamicData.QueryableFilterUserControl.OnFilterChanged" /> method is called.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterControl">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Control FilterControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FilterControl" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.QueryableFilterUserControl.FilterControl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FilterControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::Control ^ FilterControl { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterControl : System.Web.UI.Control" Usage="System.Web.DynamicData.QueryableFilterUserControl.FilterControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3aa60-120">フィルター テンプレート内のフィルターを処理するデータ コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-120">Gets the data control that handles the filter inside the filter template.</span></span></summary>
        <value><span data-ttu-id="3aa60-121">フィルターを処理するデータ コントロール。</span><span class="sxs-lookup"><span data-stu-id="3aa60-121">The data control that handles the filter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aa60-122">このプロパティは`null`場合は、フィルター テンプレートは上書きしません。</span><span class="sxs-lookup"><span data-stu-id="3aa60-122">This property is `null` if the filter template does not override it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public abstract System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.QueryableFilterUserControl.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="abstract member GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="queryableFilterUserControl.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="3aa60-123">ソース <see cref="T:System.Linq.IQueryable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3aa60-123">The source <see cref="T:System.Linq.IQueryable" /> object.</span></span></param>
        <summary><span data-ttu-id="3aa60-124">ソース <see cref="T:System.Linq.IQueryable" /> オブジェクトから変換された <see cref="T:System.Linq.IQueryable" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-124">Gets the transformed <see cref="T:System.Linq.IQueryable" /> object from the source <see cref="T:System.Linq.IQueryable" /> object.</span></span></summary>
        <returns><span data-ttu-id="3aa60-125">ソース <see cref="T:System.Linq.IQueryable" /> オブジェクトから変換された <see cref="T:System.Linq.IQueryable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3aa60-125">The transformed <see cref="T:System.Linq.IQueryable" /> object from the source <see cref="T:System.Linq.IQueryable" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aa60-126">コントロールを派生させる場合は、このメソッドを実装する必要があります<xref:System.Web.DynamicData.QueryableFilterUserControl>します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-126">You must implement this method if you derive a control from <xref:System.Web.DynamicData.QueryableFilterUserControl>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3aa60-127">このメソッドを実装して、ソースの変換を<xref:System.Linq.IQueryable>オブジェクトをターゲットに<xref:System.Linq.IQueryable>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3aa60-127">This method is implemented to transform the source <xref:System.Linq.IQueryable> object into the target <xref:System.Linq.IQueryable> object.</span></span> <span data-ttu-id="3aa60-128">例の<xref:System.Linq.IQueryable>by、範囲、順序を含める、または検索を実装する式。</span><span class="sxs-lookup"><span data-stu-id="3aa60-128">Examples of <xref:System.Linq.IQueryable> expressions that you might want to implement include order by, range, or search.</span></span>  
  
 <span data-ttu-id="3aa60-129">次の例は、実装する方法を示します、<xref:System.Web.DynamicData.QueryableFilterUserControl.GetQueryable%2A>メソッドから派生したブール型フィルターの<xref:System.Web.DynamicData.QueryableFilterUserControl>します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-129">The following example shows how to implement the <xref:System.Web.DynamicData.QueryableFilterUserControl.GetQueryable%2A> method for a Boolean filter that is derived from <xref:System.Web.DynamicData.QueryableFilterUserControl>.</span></span>  
  
```csharp  
public override IQueryable GetQueryable(IQueryable source) {  
    if (String.IsNullOrEmpty(DropDownList1.SelectedValue)) {  
        return source;  
    }  
  
    bool value = Convert.ToBoolean(DropDownList1.SelectedValue);  
  
    ParameterExpression parameterExpression =   
        Expression.Parameter(source.ElementType, "item");  
    Expression body = BuildQueryBody(  
        parameterExpression, value);  
  
    LambdaExpression lambda = Expression.Lambda(body,   
        parameterExpression);  
    MethodCallExpression whereCall = Expression.Call(  
        typeof(Queryable),   
        "Where",   
        new Type[] { source.ElementType },   
        source.Expression, Expression.Quote(lambda));  
    return source.Provider.CreateQuery(whereCall);  
}  
```  
  
```vb  
Public Overloads Overrides Function GetQueryable(ByVal source As IQueryable) As IQueryable   
    If [String].IsNullOrEmpty(DropDownList1.SelectedValue) Then   
        Return source   
    End If   
  
    Dim value As Boolean = Convert.ToBoolean(DropDownList1.SelectedValue)   
  
    Dim parameterExpression As ParameterExpression = Expression.Parameter(source.ElementType, "item")   
    Dim body As Expression = BuildQueryBody(parameterExpression, value)   
  
    Dim lambda As LambdaExpression = Expression.Lambda(body, parameterExpression)   
    Dim whereCall As MethodCallExpression = Expression.[Call](GetType(Queryable), "Where", _  
         New Type() {source.ElementType}, source.Expression, Expression.Quote(lambda))   
    Return source.Provider.CreateQuery(whereCall)   
End Function  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFilterChanged">
      <MemberSignature Language="C#" Value="protected void OnFilterChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFilterChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.QueryableFilterUserControl.OnFilterChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFilterChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFilterChanged();" />
      <MemberSignature Language="F#" Value="member this.OnFilterChanged : unit -&gt; unit" Usage="queryableFilterUserControl.OnFilterChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3aa60-130"><see cref="E:System.Web.DynamicData.QueryableFilterUserControl.FilterChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="3aa60-130">Raises the <see cref="E:System.Web.DynamicData.QueryableFilterUserControl.FilterChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aa60-131">クエリを再実行が必要なデータ ソースに通知するために、フィルター選択が変更されたときに、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-131">Call this method when the filter selection has changed in order to notify the data source that the query must be re-run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateListControl">
      <MemberSignature Language="C#" Value="public void PopulateListControl (System.Web.UI.WebControls.ListControl listControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PopulateListControl(class System.Web.UI.WebControls.ListControl listControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.QueryableFilterUserControl.PopulateListControl(System.Web.UI.WebControls.ListControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PopulateListControl(System::Web::UI::WebControls::ListControl ^ listControl);" />
      <MemberSignature Language="F#" Value="member this.PopulateListControl : System.Web.UI.WebControls.ListControl -&gt; unit" Usage="queryableFilterUserControl.PopulateListControl listControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listControl" Type="System.Web.UI.WebControls.ListControl" />
      </Parameters>
      <Docs>
        <param name="listControl"><span data-ttu-id="3aa60-132">リスト コントロール。</span><span class="sxs-lookup"><span data-stu-id="3aa60-132">A list control.</span></span></param>
        <summary><span data-ttu-id="3aa60-133">リスト コントロールにテーブル内のすべての外部キー要素またはブール型要素を設定します。</span><span class="sxs-lookup"><span data-stu-id="3aa60-133">Populates a list control with all the foreign-key elements or Boolean elements in the table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aa60-134">外部キー列には、外部キー テーブルから要素が格納されます。</span><span class="sxs-lookup"><span data-stu-id="3aa60-134">Foreign-key columns are populated with elements from the foreign-key table.</span></span> <span data-ttu-id="3aa60-135">ブール型の列には、"All"、"True"と"False"が設定されます。</span><span class="sxs-lookup"><span data-stu-id="3aa60-135">Boolean columns are populated with "All", "True", and "False".</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>