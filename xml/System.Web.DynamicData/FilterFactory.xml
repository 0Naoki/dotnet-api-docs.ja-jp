<Type Name="FilterFactory" FullName="System.Web.DynamicData.FilterFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd65fb73338091c246b89d0287291387b020e235" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70528653" /></Metadata><TypeSignature Language="C#" Value="public class FilterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilterFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.FilterFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class FilterFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilterFactory" />
  <TypeSignature Language="F#" Value="type FilterFactory = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>フィルター テンプレートを作成します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.FilterFactory>クラスは、特定の列の種類のフィルターテンプレートのインスタンスを取得するために動的データによって実行時に使用されます。  
  
 このクラスで定義されているメソッドをオーバーライドして、フィルターテンプレートの読み込み方法をカスタマイズできます。 たとえば、カスタム実装では、既定の ~/Dynamicdata/Filters フォルダーとは異なる場所からフィルターテンプレートを読み込むことができます。  
  
 動的データには、外部キー列、ブール型、および列挙型の列のフィルターテンプレートが用意<xref:System.Web.UI.WebControls.DropDownList>されており、コントロールを使用して表示します。 カスタムフィルターテンプレートを作成することもできます。  
  
   
  
## Examples  
 テーブル行フィルター選択の例については、既定のフィルターテンプレート<xref:System.Web.DynamicData.QueryableFilterRepeater>を使用します。クラスを参照してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.DynamicFilter" />
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
    <altmember cref="T:System.Web.DynamicData.FieldTemplateFactory" />
    <altmember cref="T:System.Web.DynamicData.EntityTemplateFactory" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilterFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilterFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.FilterFactory" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterControl">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.QueryableFilterUserControl CreateFilterControl (System.Web.DynamicData.MetaColumn column, string filterUIHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.DynamicData.QueryableFilterUserControl CreateFilterControl(class System.Web.DynamicData.MetaColumn column, string filterUIHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.CreateFilterControl(System.Web.DynamicData.MetaColumn,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFilterControl (column As MetaColumn, filterUIHint As String) As QueryableFilterUserControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::DynamicData::QueryableFilterUserControl ^ CreateFilterControl(System::Web::DynamicData::MetaColumn ^ column, System::String ^ filterUIHint);" />
      <MemberSignature Language="F#" Value="abstract member CreateFilterControl : System.Web.DynamicData.MetaColumn * string -&gt; System.Web.DynamicData.QueryableFilterUserControl&#xA;override this.CreateFilterControl : System.Web.DynamicData.MetaColumn * string -&gt; System.Web.DynamicData.QueryableFilterUserControl" Usage="filterFactory.CreateFilterControl (column, filterUIHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.QueryableFilterUserControl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Web.DynamicData.MetaColumn" />
        <Parameter Name="filterUIHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">フィルター テンプレートが適用されるデータ列。</param>
        <param name="filterUIHint">使用するフィルター テンプレートの名前。</param>
        <summary>フィルター テンプレートのインスタンスを作成します。</summary>
        <returns><see cref="T:System.Web.DynamicData.QueryableFilterUserControl" /> クラスのインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、フィルターテンプレートのインスタンスを取得するために動的データによって呼び出されます。 派生クラスでは、このメソッドをオーバーライドして、フィルターテンプレートのインスタンスの作成方法をカスタマイズできます。 たとえば、カスタム実装では、既定の ~/Dynamicdata/Filters フォルダーからではなく、コンパイルされたアセンブリからテンプレートを読み込むことができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="column" /> が **null** です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFilterVirtualPath">
      <MemberSignature Language="C#" Value="public virtual string GetFilterVirtualPath (System.Web.DynamicData.MetaColumn column, string filterUIHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFilterVirtualPath(class System.Web.DynamicData.MetaColumn column, string filterUIHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.GetFilterVirtualPath(System.Web.DynamicData.MetaColumn,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFilterVirtualPath (column As MetaColumn, filterUIHint As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFilterVirtualPath(System::Web::DynamicData::MetaColumn ^ column, System::String ^ filterUIHint);" />
      <MemberSignature Language="F#" Value="abstract member GetFilterVirtualPath : System.Web.DynamicData.MetaColumn * string -&gt; string&#xA;override this.GetFilterVirtualPath : System.Web.DynamicData.MetaColumn * string -&gt; string" Usage="filterFactory.GetFilterVirtualPath (column, filterUIHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Web.DynamicData.MetaColumn" />
        <Parameter Name="filterUIHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">フィルター テンプレートが適用されるデータ列。</param>
        <param name="filterUIHint">使用するフィルター テンプレート。</param>
        <summary>フィルター テンプレートの仮想パスを取得します。</summary>
        <returns>フィルター テンプレートの仮想パス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、フィルターテンプレートは ~/Dynamicdata/ファイラーフォルダーにあります。  
  
 このメソッドは、フィールドテンプレートが格納されているフォルダーの仮想パスを決定します。 派生クラスでは、このメソッドをオーバーライドして、別の仮想パスからフィルターテンプレートを提供できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="column" /> が **null** です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
