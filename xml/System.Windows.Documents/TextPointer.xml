<Type Name="TextPointer" FullName="System.Windows.Documents.TextPointer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="40f7a4634123521e33ab56cb5f7ff207c9909e11" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70359739" /></Metadata><TypeSignature Language="C#" Value="public class TextPointer : System.Windows.Documents.ContentPosition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPointer extends System.Windows.Documents.ContentPosition" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.TextPointer" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPointer&#xA;Inherits ContentPosition" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPointer : System::Windows::Documents::ContentPosition" />
  <TypeSignature Language="F#" Value="type TextPointer = class&#xA;    inherit ContentPosition" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.ContentPosition</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Windows.Documents.FlowDocument" /> 内または <see cref="T:System.Windows.Controls.TextBlock" /> 内の位置を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス<xref:System.Windows.Documents.TextPointer>には、次の用語が導入されています。  
  
-   Position-本質的に、 <xref:System.Windows.Documents.TextPointer>は常にコンテンツ内の*位置*を指します。  このような位置は、コンテンツ内の文字の間、またはコンテンツの構造を定義するフローコンテンツ要素タグの間にあります。  
  
-   現在の位置-は<xref:System.Windows.Documents.TextPointer>常に位置を示しているため、を<xref:System.Windows.Documents.TextPointer>使用して実行できる操作の多くは、 <xref:System.Windows.Documents.TextPointer>によって現在ポイントされている位置を基準としています。によっ<xref:System.Windows.Documents.TextPointer>て*現在位置*として示される位置。  
  
-   挿入位置-*挿入位置*は、関連付けられているコンテンツのセマンティックルールを破壊することなく、新しいコンテンツを追加できる位置です。  実際には、挿入位置は、キャレットが配置されているコンテンツ内の任意の場所にあります。  挿入位置ではない<xref:System.Windows.Documents.TextPointer>有効な位置の例として、隣接<xref:System.Windows.Documents.Paragraph>する2つのタグ (つまり、前の段落の終了タグと次の段落の開始タグの間) の位置があります。  
  
-   シンボル-シンボルに関連する<xref:System.Windows.Documents.TextPointer>操作のために、次のいずれかが*シンボル*であると見なされます。  
  
    -   <xref:System.Windows.Documents.TextElement>要素の開始タグまたは終了タグ。  
  
    -   または<xref:System.Windows.UIElement> <xref:System.Windows.Documents.InlineUIContainer>内に含まれる要素。 <xref:System.Windows.Documents.BlockUIContainer>  このよう<xref:System.Windows.UIElement>なは常に1つの記号としてカウントされることに注意し<xref:System.Windows.UIElement>てください。に含まれる追加のコンテンツまたは要素は、シンボルとしてカウントされません。  
  
    -   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] テキスト<xref:System.Windows.Documents.Run>要素内の各16ビット文字。  
  
-   テキストコンテナー-*テキストコンテナー*は、フローコンテンツの最終的な境界線を形成する要素です。によって<xref:System.Windows.Documents.TextPointer>示される位置は、常にテキストコンテナー内にあります。  現在、テキストコンテナーは<xref:System.Windows.Documents.FlowDocument>またはの<xref:System.Windows.Controls.TextBlock>いずれかである必要があります。  一般に、異なるテキスト<xref:System.Windows.Documents.TextPointer>コンテナー内のインスタンス間の操作はサポートされていません。  
  
-   ドキュメント- <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A> <xref:System.Windows.Documents.TextPointer.DocumentStart%2A> ** メソッド、プロパティ、プロパティなど、テキストコンテナー内のコンテンツをドキュメントと呼び<xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>ます。  
  
 クラスは、フローコンテンツ要素によって[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]表されるコンテンツの検査と操作を容易にすることを目的として<xref:System.Windows.Documents.TextElement>います。一般に、このような要素はから派生します。 <xref:System.Windows.Documents.TextPointer>  次のような操作<xref:System.Windows.Documents.TextPointer>を簡単に行うことができます。  
  
-   現在位置と2番目に指定した位置の序数による比較を実行します。  メソッドを<xref:System.Windows.Documents.TextPointer.CompareTo%2A>参照してください。  
  
-   指定した方向に現在の位置と隣接するコンテンツの種類を決定します。  <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>メソッドと<xref:System.Windows.Documents.TextPointerContext>列挙を参照してください。  
  
-   <xref:System.Windows.Documents.TextElement>そのスコープを取得します。または、現在の位置と隣接しています。  およびメソッドを参照して<xref:System.Windows.Documents.Paragraph>ください。 <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A>  
  
-   現在のドキュメントのスコープとなるテキストコンテナーを取得します。  <xref:System.Windows.Documents.TextPointer.Parent%2A> プロパティを参照してください。  
  
-   現在の位置の前または後に指定された数の文字を取得します。  メソッドを<xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>参照してください。  
  
-   現在位置に文字列を挿入します。  メソッドを<xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>参照してください。  
  
-   コンテンツ内の行の境界を検索します。  <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>メソッドと<xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>プロパティを参照してください。  
  
-   位置と<xref:System.Windows.Documents.TextPointer>記号のオフセットをコンテンツに変換します。  <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>メソッドと<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>メソッドを参照してください。  
  
-   <xref:System.Windows.Documents.TextPointer>位置と、相対座標を表すを変換する<xref:System.Windows.Point>ことによって、ビジュアルヒットテストを実行します。  
  
-   近くの挿入位置を検索するか、現在の位置が挿入位置であるかどうかを確認します。  <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>およびメソッド<xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>とプロパティを<xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A>参照してください。  
  
 オブジェクトによっ<xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>て示される位置とは変更できません。 <xref:System.Windows.Documents.TextPointer>  コンテンツの編集時または変更時に、によっ<xref:System.Windows.Documents.TextPointer>て示される位置は、周囲のテキストに対して相対的に変更されることはありません。代わりに、コンテンツの先頭からの位置のオフセットは、の新しい相対位置を反映するように調整されます。情報.  たとえば<xref:System.Windows.Documents.TextPointer> 、特定の段落の先頭の位置を示すは、段落の前または後にコンテンツが挿入または削除された場合でも、その段落の先頭をポイントし続けます。  
  
 クラス<xref:System.Windows.Documents.TextPointer>は、パブリックコンストラクターを提供しません。  の<xref:System.Windows.Documents.TextPointer>インスタンスは、他のオブジェクト (他<xref:System.Windows.Documents.TextPointer>のオブジェクトを含む) のプロパティまたはメソッドを使用して作成されます。 次の一覧に、を<xref:System.Windows.Documents.TextPointer>作成して返すメソッドとプロパティの例をいくつか示します。  この一覧は完全ではありません。  
  
-   <xref:System.Windows.Documents.TextRange>から: <xref:System.Windows.Documents.TextRange.Start%2A>および。 <xref:System.Windows.Documents.TextRange.End%2A>  
  
-   <xref:System.Windows.Documents.TextElement>From: <xref:System.Windows.Documents.TextElement.ContentStart%2A>、 、<xref:System.Windows.Documents.TextElement.ContentEnd%2A>、および<xref:System.Windows.Documents.TextElement.ElementEnd%2A>。 <xref:System.Windows.Documents.TextElement.ElementStart%2A>  
  
-   (テキストコンテナー) から: <xref:System.Windows.Controls.TextBlock.ContentStart%2A>、 <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>、および<xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>。 <xref:System.Windows.Controls.TextBlock>  
  
-   (テキストコンテナー) から: <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>、、および<xref:System.Windows.Documents.FlowDocument><xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>  
  
-   既存<xref:System.Windows.Documents.TextPointer>のから: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>、 <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> 、<xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>、および<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>。  
  
   
  
## Examples  
 次の例では、を<xref:System.Windows.Documents.TextPointer>使用して、指定したテキストコンテナー内の最初<xref:System.Windows.Documents.Run>の要素の内部にある位置を検索する方法を示します。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer1)]
 [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer1)]  
  
 次の例では、機能を使用<xref:System.Windows.Documents.TextPointer>して単純な検索アルゴリズムを実装しています。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer2)]
 [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.TextRange" />
    <altmember cref="T:System.Windows.Documents.TextPointerContext" />
    <altmember cref="T:System.Windows.Documents.TextElement" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (position As TextPointer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Windows::Documents::TextPointer ^ position);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : System.Windows.Documents.TextPointer -&gt; int" Usage="textPointer.CompareTo position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">現在の位置と比較する位置を指定する <see cref="T:System.Windows.Documents.TextPointer" />。</param>
        <summary>現在の <see cref="T:System.Windows.Documents.TextPointer" /> と指定された 2 つ目の <see cref="T:System.Windows.Documents.TextPointer" /> によって指定される位置の順序を比較します。</summary>
        <returns>現在の <see cref="T:System.Windows.Documents.TextPointer" /> が <paramref name="position" /> の前である場合は -1。両位置が同じ場合は 0。現在の <see cref="T:System.Windows.Documents.TextPointer" /> が <paramref name="position" /> の後である場合は +1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値-1 は、現在<xref:System.Windows.Documents.TextPointer>のによって指定された位置が、で指定された位置より`position`前にあることを示します。  値が0の場合は、指定された位置が等しいことを示します。  正 + 1 の値は、現在<xref:System.Windows.Documents.TextPointer>のによって指定された位置が、で`position`指定された位置に続くことを示します。  
  
   
  
## Examples  
 このメソッドの使用例を次に示します。  この例<xref:System.Windows.Documents.TextPointer.CompareTo%2A>では、メソッドを<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>メソッドと組み合わせて使用して、指定され<xref:System.Windows.Documents.TextElement>たが空であるかどうかをテストします。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="position" /> は、現在の位置に関連付けられているテキスト コンテナー外部の位置を指定します。</exception>
        <altmember cref="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteTextInRun">
      <MemberSignature Language="C#" Value="public int DeleteTextInRun (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DeleteTextInRun(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteTextInRun (count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int DeleteTextInRun(int count);" />
      <MemberSignature Language="F#" Value="member this.DeleteTextInRun : int -&gt; int" Usage="textPointer.DeleteTextInRun count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">現在の位置から削除する文字数。 現在の位置より後の文字を削除する場合は正の値を指定します。現在の位置より前の文字を削除する場合は負の値を指定します。</param>
        <summary>現在の <see cref="T:System.Windows.Documents.TextPointer" /> で示される位置から指定された文字数を削除します。</summary>
        <returns>実際に削除された文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の位置の後にある文字を削除するには正の<xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType>値を指定します (のように)。現在の位置の前に<xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType>ある文字を削除するには負の値を指定します (のように)。  
  
 実際に削除された文字数は、で`count`指定した数よりも小さくなる場合があります。  これは、が、 `count`削除対象の文字よりも多くの文字を指定している場合に発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">テキストが許可されない位置でメソッドが呼び出されました。</exception>
        <altmember cref="Overload:System.Windows.Documents.TextPointer.GetTextInRun" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DocumentEnd">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer DocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer DocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.DocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentEnd As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ DocumentEnd { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentEnd : System.Windows.Documents.TextPointer" Usage="System.Windows.Documents.TextPointer.DocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の位置に関連付けられているテキスト コンテナーのコンテンツの末尾にある <see cref="T:System.Windows.Documents.TextPointer" /> を取得します。</summary>
        <value>現在の位置に関連付けられているテキスト コンテナーのコンテンツの末尾にある <see cref="T:System.Windows.Documents.TextPointer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返さ<xref:System.Windows.Documents.TextPointer.Parent%2A>れる<xref:System.Windows.Controls.TextBlock> <xref:System.Windows.Documents.FlowDocument> <xref:System.Windows.Documents.TextElement>のは、ではなく、常にテキストコンテナー (または) です。 <xref:System.Windows.Documents.TextPointer>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.DocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="DocumentStart">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer DocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer DocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.DocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentStart As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ DocumentStart { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentStart : System.Windows.Documents.TextPointer" Usage="System.Windows.Documents.TextPointer.DocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の位置に関連付けられているテキスト コンテナーのコンテンツの先頭にある <see cref="T:System.Windows.Documents.TextPointer" /> を取得します。</summary>
        <value>現在の位置に関連付けられているテキスト コンテナーのコンテンツの先頭にある <see cref="T:System.Windows.Documents.TextPointer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって返される位置を基準位置として使用して、他の位置との相対オフセットを操作します。  メソッド<xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> と<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>メソッドは、位置と位置のオフセットを変換する方法を提供します。  
  
 返さ<xref:System.Windows.Documents.TextPointer.Parent%2A>れる<xref:System.Windows.Controls.TextBlock> <xref:System.Windows.Documents.FlowDocument> <xref:System.Windows.Documents.TextElement>のは、ではなく、常にテキストコンテナー (または) です。 <xref:System.Windows.Documents.TextPointer>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.DocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjacentElement">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyObject GetAdjacentElement(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjacentElement (direction As LogicalDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyObject ^ GetAdjacentElement(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetAdjacentElement : System.Windows.Documents.LogicalDirection -&gt; System.Windows.DependencyObject" Usage="textPointer.GetAdjacentElement direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">隣接する要素を検索する論理方向を指定する <see cref="T:System.Windows.Documents.LogicalDirection" /> 値のいずれか。</param>
        <summary>指定された論理方向で現在の <see cref="T:System.Windows.Documents.TextPointer" /> に隣接する要素を返します (存在する場合)。</summary>
        <returns>指定した <paramref name="direction" /> の隣接する要素。隣接する要素が存在しない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返される要素は、通常<xref:System.Windows.Documents.TextElement>はです。  が<xref:System.Windows.UIElement> <xref:System.Windows.Documents.BlockUIContainer>要素または<xref:System.Windows.Documents.TextPointer> 要素<xref:System.Windows.Documents.InlineUIContainer>内の位置を示している場合は、を返すことができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRect">
      <MemberSignature Language="C#" Value="public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect GetCharacterRect(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCharacterRect (direction As LogicalDirection) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Rect GetCharacterRect(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetCharacterRect : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Rect" Usage="textPointer.GetCharacterRect direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">コンテンツの境界ボックスを検索する論理方向を指定する <see cref="T:System.Windows.Documents.LogicalDirection" /> 値のいずれか。</param>
        <summary>指定した論理方向で現在の <see cref="T:System.Windows.Rect" /> に隣接するコンテンツの境界ボックス (<see cref="T:System.Windows.Documents.TextPointer" />) を返します。</summary>
        <returns>指定した方向で現在の <see cref="T:System.Windows.Documents.TextPointer" /> に隣接するコンテンツの境界ボックス。現在の有効なレイアウト情報を利用できない場合は <see cref="P:System.Windows.Rect.Empty" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextElement>このメソッドの目的では、エッジはコンテンツとは見なされません。  がエッジの<xref:System.Windows.Documents.TextElement>前に配置されている場合、戻り値は、指定された<xref:System.Windows.Documents.TextElement>方向の次の非コンテンツの境界ボックスになります。 <xref:System.Windows.Documents.TextPointer>  指定された方向にコンテンツがない場合は、前の<xref:System.Windows.Rect>コンテンツの高さと高さが一致する高さのゼロ幅が返されます。  
  
 このメソッドによって実行される操作は、有効なレイアウトによって異なります。  必要に応じて、このメソッドは、操作を続行する前に、有効なレイアウトを自動的に再生成しようとします。  レイアウトを再生成すると、比較的負荷のかかる操作になる可能性があります。  レイアウトを<xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>再生成する可能性のある操作を実行する前に、プロパティを使用して有効なレイアウトを確認してください。  詳細については、「[Layout](~/docs/framework/wpf/advanced/layout.md)」 (レイアウト) を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.HasValidLayout" />
      </Docs>
    </Member>
    <Member MemberName="GetInsertionPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetInsertionPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertionPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetInsertionPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetInsertionPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetInsertionPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">最も近い挿入位置を検索する論理方向を指定する <see cref="T:System.Windows.Documents.LogicalDirection" /> 値のいずれか。</param>
        <summary>指定した論理方向の最も近い挿入位置への <see cref="T:System.Windows.Documents.TextPointer" /> を返します。</summary>
        <returns>指定した方向の最も近い挿入位置への <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 挿入位置は、関連付けられているコンテンツのセマンティックルールを破壊することなく、新しいコンテンツを追加できる位置です。  実際には、挿入位置は、キャレットが配置されているコンテンツ内の任意の場所にあります。  挿入位置ではない<xref:System.Windows.Documents.TextPointer>有効な位置の例として、隣接<xref:System.Windows.Documents.Paragraph>する2つのタグ (つまり、前の段落の終了タグと次の段落の開始タグの間) の位置があります。  
  
 が既<xref:System.Windows.Documents.TextPointer>に有効な挿入位置を指していても、空でない書式シーケンスの終了タグが指定された方向の位置に直接<xref:System.Windows.Documents.TextPointer>続く場合、このメソッドによって返されたは挿入を指すように調整されます。書式指定シーケンスが終了した直後の位置。 たとえば、マークアップシーケンス`<Bold>a</Bold>b`について考えてみます。 `a` 2 つの文字`b`の間には、終了`Bold`タグの前に2つ、終了`Bold`タグの直後に2つの挿入位置があることに注意してください。 が<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> `direction` `Bold` <xref:System.Windows.Documents.TextPointer> に対して、<xref:System.Windows.Documents.LogicalDirection.Forward>文字`a`の直後と終了タグの直前の位置に対して呼び出され、がの場合、返されるはを指すように調整されます。<xref:System.Windows.Documents.TextPointer>`b`終了`Bold`タグの後の文字の直前の位置。 逆の論理方向で作業するときに、書式設定タグを開く場合も同様の調整が行われます。 このメソッドは、同様のケースで挿入位置のあいまいさを解消する手段を提供することを目的としています。  
  
 このメソッドは、構造タグのシーケンスが関係している場合に、挿入ポイントを選択するためにも使用できます。 たとえば、段落の終了タグと開始タグの間の位置にある場合、direction パラメーターを使用して、次の段落の先頭 (を指定<xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType>することにより) または前の段落の末尾で最も近い挿入ポイントを選択できます (を指定<xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType>します。  
  
 ポインターが既に挿入位置にあり、指定さ`direction`れたに隣接する書式設定タグが存在しない場合、返さ<xref:System.Windows.Documents.TextPointer>れたは呼び出し<xref:System.Windows.Documents.TextPointer>元と同じ位置を指します。  
  
 が指す<xref:System.Windows.Documents.TextPointer>位置を基準とした有効な挿入位置が存在しない可能性があります。  これは、参照されるコンテンツが、空のテーブルまたはリストのように構造的に不完全である場合に発生する可能性があります。  このような場合、このメソッドは単<xref:System.Windows.Documents.TextPointer>に、このメソッドの呼び出し<xref:System.Windows.Documents.TextPointer>元と同じ位置にを返します。  このメソッドは常に有効<xref:System.Windows.Documents.TextPointer>なを返します。  
  
   
  
## Examples  
 この例では、メソッドを<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>使用して、指定さ<xref:System.Windows.Documents.TextElement>れたが印刷可能なコンテンツを空であるかどうかを確認する方法を示します。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetLineStartPosition">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.Windows.Documents.TextPointer" /> の位置に対する相対位置で指定した行の先頭にある <see cref="T:System.Windows.Documents.TextPointer" /> を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetLineStartPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetLineStartPosition (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetLineStartPosition(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineStartPosition (count As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetLineStartPosition(int count);" />
      <MemberSignature Language="F#" Value="member this.GetLineStartPosition : int -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetLineStartPosition count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">開始位置を返す対象の行を決定するときにスキップする行頭マーカーの数。 負の値は以前の行、0 は現在の行、正の値は以降の行をそれぞれ指定します。</param>
        <summary>現在の <see cref="T:System.Windows.Documents.TextPointer" /> の位置に対する相対位置で指定した行の先頭にある <see cref="T:System.Windows.Documents.TextPointer" /> を返します。</summary>
        <returns>指定した行の先頭を指す <see cref="T:System.Windows.Documents.TextPointer" /> (<see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> が <see cref="F:System.Windows.Documents.LogicalDirection.Forward" /> に設定されている場合)。指定した行が範囲外の場合や見つからない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が<xref:System.Windows.Documents.TextPointer> 2 つの行の間など、あいまいな位置を指している場合、で<xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>指定された方向の行が、相対開始行として選択されます。  
  
 このメソッドによって実行される操作は、有効なレイアウトによって異なります。  必要に応じて、このメソッドは、操作を続行する前に、有効なレイアウトを自動的に再生成しようとします。  レイアウトを再生成すると、比較的負荷のかかる操作になる可能性があります。  レイアウト<xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>を再生成する可能性のある操作を実行する前に、を使用して有効なレイアウトを確認します。  詳細については、「[Layout](~/docs/framework/wpf/advanced/layout.md)」 (レイアウト) を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineStartPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetLineStartPosition(int32 count, [out] int32&amp; actualCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineStartPosition (count As Integer, ByRef actualCount As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetLineStartPosition(int count, [Runtime::InteropServices::Out] int % actualCount);" />
      <MemberSignature Language="F#" Value="member this.GetLineStartPosition : int * int -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetLineStartPosition (count, actualCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="actualCount" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="count">開始位置を返す対象の行を決定するときにスキップする行頭マーカーの数。 負の値は以前の行、0 は現在の行、正の値は以降の行をそれぞれ指定します。</param>
        <param name="actualCount">このメソッドが終了すると、開始位置を返す対象の行を決定するときにスキップされた行頭マーカーの実際の数が格納されます。  指定された行数をスキップする前にコンテンツの先頭または末尾が見つかった場合は、この値が <paramref name="count" /> より少なくなることがあります。 このパラメーターは初期化せずに渡されます。</param>
        <summary>現在の <see cref="T:System.Windows.Documents.TextPointer" /> の位置に対する相対位置で指定した行の先頭にある <see cref="T:System.Windows.Documents.TextPointer" /> を返し、スキップされた行数を通知します。</summary>
        <returns>指定した行の先頭を指す <see cref="T:System.Windows.Documents.TextPointer" /> (<see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> が <see cref="F:System.Windows.Documents.LogicalDirection.Forward" /> に設定されている場合)。または指定した行が範囲外の場合は、指定した行に最も近い行の先頭を指します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が<xref:System.Windows.Documents.TextPointer> 2 つの行の間など、あいまいな位置を指している場合は、 <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>プロパティで指定された方向の行が相対開始行として選択されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextContextPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextContextPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextContextPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetNextContextPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetNextContextPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetNextContextPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">次のシンボルを検索する論理方向を指定する <see cref="T:System.Windows.Documents.LogicalDirection" /> 値のいずれか。</param>
        <summary>指定された論理方向の次のシンボルへのポインターを返します。</summary>
        <returns>指定した方向の次のシンボルへの <see cref="T:System.Windows.Documents.TextPointer" />。現在の <see cref="T:System.Windows.Documents.TextPointer" /> がコンテンツの先頭または末尾に隣接している場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次のいずれかがシンボルであると見なされます。  
  
-   <xref:System.Windows.Documents.TextElement>要素の開始タグまたは終了タグ。  
  
-   または<xref:System.Windows.Documents.InlineUIContainer> <xref:System.Windows.UIElement> に格納され<xref:System.Windows.Documents.BlockUIContainer>ている要素。  このよう<xref:System.Windows.UIElement>なは常に1つの記号としてカウントされることに注意し<xref:System.Windows.UIElement>てください。に含まれる追加のコンテンツまたは要素は、シンボルとしてカウントされません。  
  
-   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] テキスト<xref:System.Windows.Documents.Run>要素内の16ビット文字。  
  
 次のシンボルが<xref:System.Windows.Documents.TextPointerContext.EmbeddedElement>、 <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>メソッドによっ<xref:System.Windows.Documents.TextPointerContext.ElementStart>て識別<xref:System.Windows.Documents.TextPointerContext.ElementEnd>される、、またはとして分類<xref:System.Windows.Documents.TextPointer>されている場合、このメソッドによって返されるは、現在の位置からの1つのシンボルによって高度になります。  
  
 次のシンボルがとして<xref:System.Windows.Documents.TextPointerContext.Text>分類され<xref:System.Windows.Documents.TextPointer>ている場合、このメソッドによって返されるは、テキストの次の非テキストシンボル (つまり、 <xref:System.Windows.Documents.TextPointerContext>がでない<xref:System.Windows.Documents.TextPointerContext.Text>場合は次の位置) に進みます。  正確なシンボルカウントを超えた場合は、メソッドを<xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>呼び出すことによって事前に計算できます。  
  
   
  
## Examples  
 このメソッドの使用例を次に示します。  この例では<xref:System.Windows.Documents.TextPointer.GetNextContextPosition%2A> 、メソッドを<xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>メソッドと組み合わせて使用して、指定した<xref:System.Windows.Documents.TextElement>のシンボルを走査し、抽出します。  
  
 この例は、指定[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] <xref:System.Windows.Documents.TextElement>されたの内容の構造を抽出するために使用できますが、説明的な目的だけを目的としています。運用環境のコードでは使用しないでください。  XML の操作と処理用に設計された豊富な型の名前空間については、「」を参照してください。<xref:System.Xml>  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextcontextposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextcontextposition)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextInsertionPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextInsertionPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextInsertionPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetNextInsertionPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetNextInsertionPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetNextInsertionPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">次の挿入位置を検索する論理方向を指定する <see cref="T:System.Windows.Documents.LogicalDirection" /> 値のいずれか。</param>
        <summary>指定された論理方向の次の挿入位置への <see cref="T:System.Windows.Documents.TextPointer" /> を返します。</summary>
        <returns>指定した方向の次の挿入位置を識別する <see cref="T:System.Windows.Documents.TextPointer" />。次の挿入位置が見つからない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *挿入位置*は、関連付けられているコンテンツのセマンティックルールを破壊することなく、新しいコンテンツを追加できる位置です。  実際には、挿入位置は、キャレットが配置されているコンテンツ内の任意の場所にあります。  挿入位置ではない<xref:System.Windows.Documents.TextPointer>有効な位置の例として、隣接<xref:System.Windows.Documents.Paragraph>する2つのタグ (つまり、前の段落の終了タグと次の段落の開始タグの間) の位置があります。  
  
   
  
## Examples  
 このメソッドの使用例を次に示します。 この例では<xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> 、メソッドを使用して、指定した<xref:System.Windows.Documents.TextPointer> 2 つの<xref:System.Windows.Documents.Paragraph>インスタンスの間に存在する要素の数をカウントするために、コンテンツ要素の境界を走査します。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextinsertionposition)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <Member MemberName="GetOffsetToPosition">
      <MemberSignature Language="C#" Value="public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetOffsetToPosition(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOffsetToPosition (position As TextPointer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetOffsetToPosition(System::Windows::Documents::TextPointer ^ position);" />
      <MemberSignature Language="F#" Value="member this.GetOffsetToPosition : System.Windows.Documents.TextPointer -&gt; int" Usage="textPointer.GetOffsetToPosition position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">距離 (シンボル単位) を確認する位置を指定する <see cref="T:System.Windows.Documents.TextPointer" />。</param>
        <summary>現在の <see cref="T:System.Windows.Documents.TextPointer" /> と指定した 2 つ目の <see cref="T:System.Windows.Documents.TextPointer" /> の間にあるシンボルの数を返します。</summary>
        <returns>現在の <see cref="T:System.Windows.Documents.TextPointer" /> と <paramref name="position" /> の間にあるシンボルの相対的な数。  負の値は、現在の <see cref="T:System.Windows.Documents.TextPointer" /> が <paramref name="position" /> で指定された位置より後にあることを示します。0 は、2 つの位置が等しいことを示します。正の値は、現在の <see cref="T:System.Windows.Documents.TextPointer" /> が <paramref name="position" /> で指定されている位置より前にあることを示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次のいずれかがシンボルであると見なされます。  
  
-   <xref:System.Windows.Documents.TextElement>要素の開始タグまたは終了タグ。  
  
-   または<xref:System.Windows.Documents.InlineUIContainer> <xref:System.Windows.UIElement> に格納され<xref:System.Windows.Documents.BlockUIContainer>ている要素。  このよう<xref:System.Windows.UIElement>なは常に1つの記号としてカウントされることに注意し<xref:System.Windows.UIElement>てください。に含まれる追加のコンテンツまたは要素は、シンボルとしてカウントされません。  
  
-   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] テキスト<xref:System.Windows.Documents.Run>要素内の16ビット文字。  
  
   
  
## Examples  
 このメソッドの使用例を次に示します。 この例では<xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> 、メソッドを使用して 2 <xref:System.Windows.Documents.TextPointer>つのインスタンスのオフセットを検索し、この情報を使用して<xref:System.Windows.Controls.RichTextBox>の選択を保存および復元します。  この例では、 <xref:System.Windows.Controls.RichTextBox>の内容が選択保存と選択復元の間で変更されていないことを前提としています。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="position" /> は、現在の位置に関連付けられているテキスト コンテナー外部の位置を指定します。</exception>
        <altmember cref="Overload:System.Windows.Documents.TextPointer.GetPositionAtOffset" />
        <altmember cref="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="GetPointerContext">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Documents.TextPointerContext GetPointerContext(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPointerContext (direction As LogicalDirection) As TextPointerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointerContext GetPointerContext(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetPointerContext : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointerContext" Usage="textPointer.GetPointerContext direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">隣接するコンテンツのカテゴリを決定する論理方向を指定する <see cref="T:System.Windows.Documents.LogicalDirection" /> 値のいずれか。</param>
        <summary>指定された論理方向で現在の <see cref="T:System.Windows.Documents.TextPointer" /> に隣接するコンテンツのカテゴリ インジケーターを返します。</summary>
        <returns>指定された論理方向の隣接するコンテンツのカテゴリを指定する <see cref="T:System.Windows.Documents.TextPointerContext" /> 値のいずれか。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 このメソッドの使用例を次に示します。 この例では<xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> 、メソッドを使用して、指定した<xref:System.Windows.Documents.TextPointer> 2 つの位置の間にある要素タグの開始と終了のバランスを計算するためのアルゴリズムを実装します。  開始要素タグはそれぞれ + 1 としてカウントされ、各終了要素タグは-1 としてカウントされます。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition2)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPositionAtOffset">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コンテンツの先頭からの指定されたオフセット (シンボル単位) が示す位置への <see cref="T:System.Windows.Documents.TextPointer" /> を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPositionAtOffset">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionAtOffset(int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionAtOffset (offset As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetPositionAtOffset(int offset);" />
      <MemberSignature Language="F#" Value="member this.GetPositionAtOffset : int -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetPositionAtOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">位置を計算して返す際の対象となるオフセット (シンボル単位)。  このオフセットが負の場合は、<see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> プロパティが示すのとは逆の論理方向で位置が計算されます。</param>
        <summary>現在の <see cref="T:System.Windows.Documents.TextPointer" /> の先頭からの指定されたオフセット (シンボル単位) が示す位置への <see cref="T:System.Windows.Documents.TextPointer" /> を返します。</summary>
        <returns>指定されたオフセットが示す位置への <see cref="T:System.Windows.Documents.TextPointer" />。対応する位置が見つからない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次のいずれかがシンボルであると見なされます。  
  
-   <xref:System.Windows.Documents.TextElement>要素の開始タグまたは終了タグ。  
  
-   または<xref:System.Windows.Documents.InlineUIContainer> <xref:System.Windows.UIElement> に格納され<xref:System.Windows.Documents.BlockUIContainer>ている要素。  このよう<xref:System.Windows.UIElement>なは常に1つの記号としてカウントされることに注意し<xref:System.Windows.UIElement>てください。に含まれる追加のコンテンツまたは要素は、シンボルとしてカウントされません。  
  
-   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] テキスト<xref:System.Windows.Documents.Run>要素内の16ビット文字。  
  
   
  
## Examples  
 このメソッドの使用例を次に示します。 この例では<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> 、メソッドを使用して、2つのメソッドを実装します。1つは、ホストしている段落から相対的に指定<xref:System.Windows.Documents.TextPointer>された位置へのオフセットを計算するメソッドで、もう1つは指定された段落内の指定されたオフセットにを返します。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getpositionatoffset)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getpositionatoffset)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionAtOffset">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionAtOffset(int32 offset, valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionAtOffset (offset As Integer, direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetPositionAtOffset(int offset, System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetPositionAtOffset : int * System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetPositionAtOffset (offset, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="offset">位置を計算して返す際の対象となるオフセット (シンボル単位)。  このオフセットが負の場合は、返される <see cref="T:System.Windows.Documents.TextPointer" /> は現在の <see cref="T:System.Windows.Documents.TextPointer" /> より前になります。それ以外の場合は後になります。</param>
        <param name="direction">返される <see cref="T:System.Windows.Documents.LogicalDirection" /> の論理方向を指定する <see cref="T:System.Windows.Documents.TextPointer" /> 値のいずれか。</param>
        <summary>指定された方向に、現在の <see cref="T:System.Windows.Documents.TextPointer" /> の先頭からの指定されたオフセット (シンボル単位) が示す位置への <see cref="T:System.Windows.Documents.TextPointer" /> を返します。</summary>
        <returns>指定されたオフセットが示す位置への <see cref="T:System.Windows.Documents.TextPointer" />。オフセットがコンテンツの末尾を超える場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次のいずれかがシンボルであると見なされます。  
  
-   <xref:System.Windows.Documents.TextElement>要素の開始タグまたは終了タグ。  
  
-   または<xref:System.Windows.Documents.InlineUIContainer> <xref:System.Windows.UIElement> に格納され<xref:System.Windows.Documents.BlockUIContainer>ている要素。  このよう<xref:System.Windows.UIElement>なは常に1つの記号としてカウントされることに注意し<xref:System.Windows.UIElement>てください。に含まれる追加のコンテンツまたは要素は、シンボルとしてカウントされません。  
  
-   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] テキスト<xref:System.Windows.Documents.Run>要素内の16ビット文字。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTextInRun">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.Windows.Documents.TextPointer" /> に隣接するテキストを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTextInRun">
      <MemberSignature Language="C#" Value="public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTextInRun(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextInRun (direction As LogicalDirection) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTextInRun(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetTextInRun : System.Windows.Documents.LogicalDirection -&gt; string" Usage="textPointer.GetTextInRun direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">隣接するテキストを検索して返す論理方向を指定する <see cref="T:System.Windows.Documents.LogicalDirection" /> 値のいずれか。</param>
        <summary>指定された論理方向で現在の <see cref="T:System.Windows.Documents.TextPointer" /> に隣接するテキストを格納する文字列を返します。</summary>
        <returns>指定された論理方向の隣接するテキストを格納する文字列。隣接するテキストが見つからない場合は <see cref="F:System.String.Empty" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、中断されていないテキストの実行のみを返します。  以外<xref:System.Windows.Documents.TextPointerContext.Text>のシンボル型が、指定された方向で現在<xref:System.Windows.Documents.TextPointer>のに隣接している場合は、何も返されません。  同様に、テキストは、次のテキスト以外のシンボルに対してのみ返されます。  
  
   
  
## Examples  
 このメソッドの使用例を次に示します。 この例では<xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> 、メソッドを使用して、単純なテキスト抽出を実装します。  メソッドは、指定された<xref:System.Windows.Documents.TextPointer> 2 つのインスタンス間のすべてのテキストを連結した文字列を返します。  
  
 この例は、2つ<xref:System.Windows.Documents.TextPointer>のインスタンス間でテキストを抽出するために使用できますが、説明的な目的だけを目的としています。運用環境のコードでは使用しないでください。  代わりに、<xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=nameWithType> プロパティを使用してください。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_gettextinrun)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_gettextinrun)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextInRun">
      <MemberSignature Language="C#" Value="public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTextInRun(valuetype System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextInRun (direction As LogicalDirection, textBuffer As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTextInRun(System::Windows::Documents::LogicalDirection direction, cli::array &lt;char&gt; ^ textBuffer, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.GetTextInRun : System.Windows.Documents.LogicalDirection * char[] * int * int -&gt; int" Usage="textPointer.GetTextInRun (direction, textBuffer, startIndex, count)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
        <Parameter Name="textBuffer" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="direction">隣接するテキストを検索してコピーする論理方向を指定する <see cref="T:System.Windows.Documents.LogicalDirection" /> 値のいずれか。</param>
        <param name="textBuffer">テキストのコピー先のバッファー。</param>
        <param name="startIndex">コピーしたテキストの書き込みを開始する <paramref name="textBuffer" /> のインデックス。</param>
        <param name="count">コピーする文字の最大数。</param>
        <summary>指定された方向の隣接するテキストから、指定された最大数の文字を、呼び出し元が用意した文字配列にコピーします。</summary>
        <returns>実際に <paramref name="textBuffer" /> にコピーされた文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、中断されていないテキストの実行のみを返します。  以外<xref:System.Windows.Documents.TextPointerContext.Text>のシンボル型が、指定された方向で現在<xref:System.Windows.Documents.TextPointer>のに隣接している場合は、何も返されません。  同様に、テキストは、次のテキスト以外のシンボルに対してのみ返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="startIndex" /> が 0 より小さいか、<paramref name="textBuffer" /> の <see cref="P:System.Array.Length" /> プロパティより大きい。  
  
- または - 
 <paramref name="count" /> が 0 より小さいか、<paramref name="textBuffer" /> (<paramref name="textBuffer" />.<see cref="P:System.Array.Length" /> - <paramref name="startIndex" />) の残りの領域より大きい。</exception>
        <altmember cref="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextRunLength">
      <MemberSignature Language="C#" Value="public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTextRunLength(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextRunLength (direction As LogicalDirection) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTextRunLength(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetTextRunLength : System.Windows.Documents.LogicalDirection -&gt; int" Usage="textPointer.GetTextRunLength direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">文字数をカウントする論理方向を指定する <see cref="T:System.Windows.Documents.LogicalDirection" /> 値のいずれか。</param>
        <summary>現在の <see cref="T:System.Windows.Documents.TextPointer" /> と、指定された論理方向の次のテキスト以外のシンボルとの間にある Unicode 文字の数を返します。</summary>
        <returns>現在の <see cref="T:System.Windows.Documents.TextPointer" /> と次のテキスト以外のシンボルとの間にある Unicode 文字の数。  隣接するテキストがない場合は 0 になります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次のいずれかがシンボルであると見なされます。  
  
-   <xref:System.Windows.Documents.TextElement>要素の開始タグまたは終了タグ。  
  
-   または<xref:System.Windows.Documents.InlineUIContainer> <xref:System.Windows.UIElement> に格納され<xref:System.Windows.Documents.BlockUIContainer>ている要素。  このよう<xref:System.Windows.UIElement>なは常に1つの記号としてカウントされることに注意し<xref:System.Windows.UIElement>てください。に含まれる追加のコンテンツまたは要素は、シンボルとしてカウントされません。  
  
-   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] テキスト<xref:System.Windows.Documents.Run>要素内の16ビット文字。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValidLayout">
      <MemberSignature Language="C#" Value="public bool HasValidLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValidLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.HasValidLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValidLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValidLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValidLayout : bool" Usage="System.Windows.Documents.TextPointer.HasValidLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.HasValidLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の位置に関連付けられているテキスト コンテナーに有効な (最新の) レイアウトがあるかどうかを示す値を取得します。</summary>
        <value>レイアウトが最新かつ有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必要に応じて、有効なレイアウト ( <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>メソッド、 <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A>メソッド、 <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>プロパティなど) に依存する操作は、操作を続行する前に、有効なレイアウトを自動的に再生成しようとします。  レイアウトを再生成すると、比較的負荷のかかる操作になる可能性があります。  レイアウトを再生成する可能性のある操作を実行する前に、このプロパティを使用して有効なレイアウトを確認します。  詳細については、「[Layout](~/docs/framework/wpf/advanced/layout.md)」 (レイアウト) を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertLineBreak">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer InsertLineBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer InsertLineBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertLineBreak () As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ InsertLineBreak();" />
      <MemberSignature Language="F#" Value="member this.InsertLineBreak : unit -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.InsertLineBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置に改行を挿入します。</summary>
        <returns>このメソッドによって挿入された <see cref="T:System.Windows.Documents.TextPointer" /> 要素の直後にある <see cref="T:System.Windows.Documents.LineBreak" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParagraphBreak">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer InsertParagraphBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer InsertParagraphBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertParagraphBreak () As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ InsertParagraphBreak();" />
      <MemberSignature Language="F#" Value="member this.InsertParagraphBreak : unit -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.InsertParagraphBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置に段落の区切りを挿入します。</summary>
        <returns>新しい段落の先頭 (<see cref="T:System.Windows.Documents.TextPointer" />) への <see cref="P:System.Windows.Documents.TextElement.ContentStart" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の位置が既存<xref:System.Windows.Documents.Paragraph>の要素の内部にある場合に、このメソッドが呼び出されると、既存の段落とそれに含まれるすべての内容が、現在位置にある2つの段落に分割されます。  現在の位置が既存の段落の内部にない場合にこのメソッドが呼び出されると、新しい空の段落が挿入されます。  このメソッドが、段落の分割または挿入に適していない位置で呼び出された場合 (たとえば、現在の位置<xref:System.Windows.Documents.Hyperlink>が要素内にある場合)、例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このメソッドが新しい段落を作るために分割することができない位置 (<see cref="T:System.Windows.Documents.Hyperlink" /> や <see cref="T:System.Windows.Documents.InlineUIContainer" /> のスコープ内など) で呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertTextInRun">
      <MemberSignature Language="C#" Value="public void InsertTextInRun (string textData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertTextInRun(string textData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertTextInRun (textData As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertTextInRun(System::String ^ textData);" />
      <MemberSignature Language="F#" Value="member this.InsertTextInRun : string -&gt; unit" Usage="textPointer.InsertTextInRun textData" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.InsertTextInRun(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textData" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textData">挿入するテキスト。</param>
        <summary>現在の位置のテキスト <see cref="T:System.Windows.Documents.Run" /> に、指定されたテキストを挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が要素`textData`によってスコープされていない場合は、と共にが挿入されます。<xref:System.Windows.Documents.Run> <xref:System.Windows.Documents.Run> <xref:System.Windows.Documents.TextPointer>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在の位置が <see cref="T:System.Windows.Documents.Run" /> 要素内にありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="textData" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAtInsertionPosition">
      <MemberSignature Language="C#" Value="public bool IsAtInsertionPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAtInsertionPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAtInsertionPosition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAtInsertionPosition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAtInsertionPosition : bool" Usage="System.Windows.Documents.TextPointer.IsAtInsertionPosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.IsAtInsertionPosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の位置が挿入位置かどうかを示す値を取得します。</summary>
        <value>現在の位置が挿入位置の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 挿入位置は、関連付けられているコンテンツのセマンティックルールを破壊することなく、新しいコンテンツを追加できる位置です。  実際には、挿入位置は、キャレットが配置されているコンテンツ内の任意の場所にあります。  挿入位置ではない<xref:System.Windows.Documents.TextPointer>有効な位置の例として、隣接<xref:System.Windows.Documents.Paragraph>する2つのタグ (つまり、前の段落の終了タグと次の段落の開始タグの間) の位置があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <Member MemberName="IsAtLineStartPosition">
      <MemberSignature Language="C#" Value="public bool IsAtLineStartPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAtLineStartPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAtLineStartPosition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAtLineStartPosition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAtLineStartPosition : bool" Usage="System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の位置が行頭にあるかどうかを示す値を取得します。</summary>
        <value>現在の位置が行頭にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が<xref:System.Windows.Documents.TextPointer> 2 つの行の間など、あいまいな位置を指している場合は、 <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>プロパティで指定された方向の行が相対開始行として選択されます。  
  
 このプロパティによって実行される操作は、有効なレイアウトに依存します。  必要に応じて、このメソッドは、操作を続行する前に、有効なレイアウトを自動的に再生成しようとします。  レイアウトを再生成すると、比較的負荷のかかる操作になる可能性があります。  レイアウトを<xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>再生成する可能性のある操作を実行する前に、プロパティを使用して有効なレイアウトを確認してください。  詳細については、「[Layout](~/docs/framework/wpf/advanced/layout.md)」 (レイアウト) を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      </Docs>
    </Member>
    <Member MemberName="IsInSameDocument">
      <MemberSignature Language="C#" Value="public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInSameDocument(class System.Windows.Documents.TextPointer textPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInSameDocument (textPosition As TextPointer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInSameDocument(System::Windows::Documents::TextPointer ^ textPosition);" />
      <MemberSignature Language="F#" Value="member this.IsInSameDocument : System.Windows.Documents.TextPointer -&gt; bool" Usage="textPointer.IsInSameDocument textPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textPosition" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="textPosition">現在の位置と比較する位置を指定する <see cref="T:System.Windows.Documents.TextPointer" />。</param>
        <summary>指定された位置が現在の位置と同じテキスト コンテナーに含まれているかどうかを示します。</summary>
        <returns><paramref name="textPosition" /> が示す位置が現在の位置と同じテキスト コンテナー内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数<xref:System.Windows.Documents.TextPointer>のインスタンスに関連するほとんどの操作は、問題のインスタンスが同じテキストコンテナースコープ内の位置を示している場合にのみ有効です。  たとえば<xref:System.Windows.Documents.TextPointer.CompareTo%2A> 、メソッドと<xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>メソッドを、 <xref:System.Windows.Documents.TextPointer>現在の位置に関連付けられているテキストコンテナー外の位置に対して使用することはできません。  このメソッドを使用して、指定<xref:System.Windows.Documents.TextPointer>したが、このような操作の現在位置と互換性があることを確認します。  
  
   
  
## Examples  
 このメソッドの使用例を次に示します。  この例では<xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A> 、メソッドを使用して<xref:System.Windows.Documents.TextPointer> 、3つのすべての<xref:System.Windows.Documents.TextPointer>位置が同じテキストコンテナーに属しているという保証がない場合に、指定したが他の2つのインスタンス間に配置されているかどうかを確認します。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_isinsamedocument)]
 [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_isinsamedocument)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textPosition" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="LogicalDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.LogicalDirection LogicalDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Documents.LogicalDirection LogicalDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.LogicalDirection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogicalDirection As LogicalDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::LogicalDirection LogicalDirection { System::Windows::Documents::LogicalDirection get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalDirection : System.Windows.Documents.LogicalDirection" Usage="System.Windows.Documents.TextPointer.LogicalDirection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.LogicalDirection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.LogicalDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の位置に関連付けられている論理方向を取得します。論理方向は、現在の位置に関連付けられているコンテンツのあいまいさを解消するために使用されます。</summary>
        <value>現在の位置に関連付けられている <see cref="T:System.Windows.Documents.LogicalDirection" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用する方法の例として<xref:System.Windows.Documents.LogicalDirection> 、ヒット<xref:System.Windows.Documents.TextPointer>テストメソッドによって返されるのは、2文字のテキストの間のヒットを提供します。 論理方向では、2つの文字のうち、どれが左または右にヒットしたかを指定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paragraph">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.Paragraph Paragraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.Paragraph Paragraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.Paragraph" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Paragraph As Paragraph" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::Paragraph ^ Paragraph { System::Windows::Documents::Paragraph ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Paragraph : System.Windows.Documents.Paragraph" Usage="System.Windows.Documents.TextPointer.Paragraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Paragraph</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の位置のスコープとなる段落を取得します (存在する場合)。</summary>
        <value>現在の位置のスコープと<see langword="null" /> なる。そのような段落が存在しない場合は。<see cref="T:System.Windows.Documents.Paragraph" /></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Parent" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.Documents.TextPointer.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の位置のスコープとなる論理上の親を取得します (存在する場合)。</summary>
        <value>現在の位置のスコープとなる論理上の親。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Paragraph" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="textPointer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この型またはメンバーは、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
        <returns>オブジェクトを表す文字列。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
