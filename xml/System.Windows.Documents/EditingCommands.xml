<Type Name="EditingCommands" FullName="System.Windows.Documents.EditingCommands">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e548e08b556eb3bea554b24d86bbc3a1cc4dbe43" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70643874" /></Metadata><TypeSignature Language="C#" Value="public static class EditingCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EditingCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.EditingCommands" />
  <TypeSignature Language="VB.NET" Value="Public Class EditingCommands" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditingCommands abstract sealed" />
  <TypeSignature Language="F#" Value="type EditingCommands = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="54c58-101">一連の標準的な編集関連コマンドを提供します。</span><span class="sxs-lookup"><span data-stu-id="54c58-101">Provides a standard set of editing related commands.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-102">次の表に、編集コマンドと、関連付けられている既定のキージェスチャ<xref:System.Windows.Input.Key> ( <xref:System.Windows.Input.ModifierKeys>および列挙のキー名を含む) を示します。</span><span class="sxs-lookup"><span data-stu-id="54c58-102">The following table shows the editing commands and the associated default key gestures (with key names from the <xref:System.Windows.Input.Key> and <xref:System.Windows.Input.ModifierKeys> enumerations).</span></span>  
  
|<span data-ttu-id="54c58-103">編集コマンド</span><span class="sxs-lookup"><span data-stu-id="54c58-103">Editing command</span></span>|<span data-ttu-id="54c58-104">既定のキージェスチャ</span><span class="sxs-lookup"><span data-stu-id="54c58-104">Default key gesture</span></span>|  
|---------------------|-------------------------|  
|<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  
|<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  
|<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  
|<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|<span data-ttu-id="54c58-105">既定のキージェスチャはありません</span><span class="sxs-lookup"><span data-stu-id="54c58-105">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|<span data-ttu-id="54c58-106">既定のキージェスチャはありません</span><span class="sxs-lookup"><span data-stu-id="54c58-106">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|  
  
 <span data-ttu-id="54c58-107">キャレット移動コマンドと選択範囲の展開コマンドは、既定のキージェスチャの共通セットを共有します。一般的<xref:System.Windows.Input.ModifierKeys.Shift>な違いは、選択コマンドをキャレット移動コマンドから区別するためにキーを追加することです。</span><span class="sxs-lookup"><span data-stu-id="54c58-107">Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <xref:System.Windows.Input.ModifierKeys.Shift> key to differentiate selection commands from caret movement commands.</span></span>  <span data-ttu-id="54c58-108"><xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>たとえば<xref:System.Windows.Input.Key.Left>、コマンドの既定の<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> <xref:System.Windows.Input.Key.Left>キージェスチャはであり、対応するコマンドにはの既定の<xref:System.Windows.Input.ModifierKeys.Shift> +キージェスチャがあります。</span><span class="sxs-lookup"><span data-stu-id="54c58-108">For example, the <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.Key.Left>, and the corresponding <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.ModifierKeys.Shift>+<xref:System.Windows.Input.Key.Left>.</span></span>  
  
 <span data-ttu-id="54c58-109">一般に、 <xref:System.Windows.Documents.EditingCommands>クラスによって提供されるコマンド定義では、コマンドパラメーター `parameter` ( <xref:System.Windows.Input.ICommand.Execute%2A>メソッドによって予期されるパラメーター) は使用されません。</span><span class="sxs-lookup"><span data-stu-id="54c58-109">In general, the command definitions provided by the <xref:System.Windows.Documents.EditingCommands> class do not make use of command parameters (the `parameter` parameter expected by the <xref:System.Windows.Input.ICommand.Execute%2A> method).</span></span>  
  
 <span data-ttu-id="54c58-110">コマンドとコマンドの詳細については、「[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-110">For more information on commands and commanding, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54c58-111">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-111">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-112">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-112">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-113">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-113">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-114"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-114">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-115">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-115">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-116">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-116">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-117">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-117">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-118">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-118">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
    <altmember cref="T:System.Windows.Input.NavigationCommands" />
  </Docs>
  <Members>
    <Member MemberName="AlignCenter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignCenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignCenter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignCenter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignCenter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignCenter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-119">現在の段落または段落の選択範囲を中央揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-119">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> command, which requests that the current paragraph or a selection of paragraphs be centered.</span></span></summary>
        <value><span data-ttu-id="54c58-120">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-120">The requested command.</span></span>  <span data-ttu-id="54c58-121">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="E" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-121">The default key gesture for this command is <see langword="Ctrl" />+<see langword="E" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-122">このコマンドは、 <xref:System.Windows.Documents.Paragraph>レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="54c58-122">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="54c58-123">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-123">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="54c58-124">複数の段落にわたる選択に対してこのコマンドを呼び出すと、選択範囲に含まれる各段落の内容全体に効果が適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-124">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="54c58-125">次の図は、中央のコンテンツの例を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-125">The following figure shows an example of centered content.</span></span>  
  
 <span data-ttu-id="54c58-126">![スクリーンショット: 中央の TextAlign プロパティ値](~/add/media/flowdoc-textalign-center.png "スクリーンショット: 中央の TextAlign プロパティ値")</span><span class="sxs-lookup"><span data-stu-id="54c58-126">![Screenshot: TextAlign property value of Center](~/add/media/flowdoc-textalign-center.png "Screenshot: TextAlign property value of Center")</span></span>  
  
 <span data-ttu-id="54c58-127">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-127">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignCenter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-128">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-128">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignCenter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-129">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-129">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-130">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-130">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-131">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-131">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-132"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-132">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-133">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-133">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-134">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-134">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-135">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-135">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-136">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-136">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignJustify">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignJustify { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignJustify" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignJustify As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignJustify { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignJustify : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-137">現在の段落または段落の選択範囲を両端揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-137">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> command, which requests that the current paragraph or a selection of paragraphs be justified.</span></span></summary>
        <value><span data-ttu-id="54c58-138">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-138">The requested command.</span></span>  <span data-ttu-id="54c58-139">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="J" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-139">The default key gesture for this command is <see langword="Ctrl" />+<see langword="J" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-140">このコマンドは、 <xref:System.Windows.Documents.Paragraph>レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="54c58-140">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="54c58-141">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-141">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="54c58-142">複数の段落にまたがる選択範囲でこのコマンドが呼び出された場合、その効果は選択範囲内のすべての段落に適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-142">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.</span></span>  
  
 <span data-ttu-id="54c58-143">コンテンツが正当化されると、各コンテンツ行の左右の間隔が調整され、両端の幅が等しいか、またはほぼ同じになります。</span><span class="sxs-lookup"><span data-stu-id="54c58-143">When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.</span></span>  <span data-ttu-id="54c58-144">コンテンツは、通常、コンテンツの両側に滑らかなエッジを作成するために配置されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-144">Content is typically justified to create smooth edges on the sides of the content.</span></span>  
  
 <span data-ttu-id="54c58-145">多くの場合、このコマンドが呼び出されると、段落の最後の行が unjustified のままになる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-145">Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.</span></span>  
  
 <span data-ttu-id="54c58-146">次の図は、unjustified (左揃え) コンテンツを示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-146">The following figure shows unjustified (left-aligned) content.</span></span>  
  
 <span data-ttu-id="54c58-147">![スクリーンショット: コンテンツは unjustified](~/add/media/content-unjustified.png "スクリーンショット: コンテンツは unjustified")</span><span class="sxs-lookup"><span data-stu-id="54c58-147">![Screenshot: Content is unjustified](~/add/media/content-unjustified.png "Screenshot: Content is unjustified")</span></span>  
  
 <span data-ttu-id="54c58-148">次の図は、均等になった後の同じコンテンツを示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-148">The following figure shows the same content after it has been justified.</span></span>  
  
 <span data-ttu-id="54c58-149">![コンテンツの両端揃えのテキストのスクリーンショット](~/add/media/content-justified.png "コンテンツの両端揃えのテキストのスクリーンショット")</span><span class="sxs-lookup"><span data-stu-id="54c58-149">![Screenshot of content justified text](~/add/media/content-justified.png "Screenshot of content justified text")</span></span>  
  
 <span data-ttu-id="54c58-150">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-150">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-151">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-151">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignJustify"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-152">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-152">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignJustify"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-153">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-153">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-154">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-154">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-155">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-155">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-156"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-156">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-157">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-157">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-158">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-158">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-159">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-159">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-160">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-160">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignLeft">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignLeft As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignLeft { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignLeft : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-161">コンテンツの選択範囲を左揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-161">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> command, which requests that a selection of content be aligned left.</span></span></summary>
        <value><span data-ttu-id="54c58-162">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-162">The requested command.</span></span>  <span data-ttu-id="54c58-163">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="L" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-163">The default key gesture for this command is <see langword="Ctrl" />+<see langword="L" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-164">このコマンドは、 <xref:System.Windows.Documents.Paragraph>レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="54c58-164">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="54c58-165">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-165">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="54c58-166">複数の段落にわたる選択に対してこのコマンドを呼び出すと、選択範囲に含まれる各段落の内容全体に効果が適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-166">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="54c58-167">次の図は、左揃えのコンテンツの例を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-167">The following figure shows an example of left-aligned content.</span></span>  
  
 <span data-ttu-id="54c58-168">![スクリーンショット: Left の TextAlign プロパティ値](~/add/media/flowdoc-textalign-left.png "スクリーンショット: Left の TextAlign プロパティ値")</span><span class="sxs-lookup"><span data-stu-id="54c58-168">![Screenshot: TextAlign property value of Left](~/add/media/flowdoc-textalign-left.png "Screenshot: TextAlign property value of Left")</span></span>  
  
 <span data-ttu-id="54c58-169">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-169">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-170">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-170">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignLeft"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-171">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-171">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignLeft"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-172">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-172">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-173">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-173">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-174">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-174">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-175"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-175">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-176">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-176">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-177">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-177">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-178">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-178">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-179">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-179">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignRight">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignRight As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignRight { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignRight : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-180">コンテンツの選択範囲を右揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-180">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> command, which requests that a selection of content be aligned right.</span></span></summary>
        <value><span data-ttu-id="54c58-181">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-181">The requested command.</span></span>  <span data-ttu-id="54c58-182">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="R" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-182">The default key gesture for this command is <see langword="Ctrl" />+<see langword="R" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-183">このコマンドは、 <xref:System.Windows.Documents.Paragraph>レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="54c58-183">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="54c58-184">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-184">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="54c58-185">複数の段落にわたる選択に対してこのコマンドを呼び出すと、選択範囲に含まれる各段落の内容全体に効果が適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-185">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="54c58-186">次の図は、右上に並べられたコンテンツの例を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-186">The following figure shows an example of right-aligned content.</span></span>  
  
 <span data-ttu-id="54c58-187">![スクリーンショット: 右詰めの値](~/add/media/flowdoc-textalign-right.png "スクリーンショット: 右詰めの値")</span><span class="sxs-lookup"><span data-stu-id="54c58-187">![Screenshot: TextAlign value of Right](~/add/media/flowdoc-textalign-right.png "Screenshot: TextAlign value of Right")</span></span>  
  
 <span data-ttu-id="54c58-188">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-188">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-189">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-189">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignRight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-190">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-190">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignRight"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-191">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-191">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-192">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-192">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-193">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-193">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-194"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-194">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-195">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-195">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-196">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-196">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-197">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-197">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-198">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-198">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="Backspace">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Backspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Backspace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Backspace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Backspace As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Backspace { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Backspace : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Backspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-199">BackSpace を現在の位置または現在の選択範囲に対して入力するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-199">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> command, which requests that a backspace be entered at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="54c58-200">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-200">The requested command.</span></span>  <span data-ttu-id="54c58-201">このコマンドの既定のキー ジェスチャは、<see langword="Backspace" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-201">The default key gesture for this command is <see langword="Backspace" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-202">空の選択で呼び出された場合、このコマンドはカレットの直前にある文字または段落の区切り記号を削除します。</span><span class="sxs-lookup"><span data-stu-id="54c58-202">When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret.</span></span> <span data-ttu-id="54c58-203">空でない選択で呼び出されると、このコマンドによって選択が削除されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-203">When invoked on a non-empty selection, this command deletes the selection.</span></span>  
  
 <span data-ttu-id="54c58-204">このコマンドを実行すると、同じ場所に直ちに挿入されたコンテンツのすべての書式設定が削除されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-204">This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  <span data-ttu-id="54c58-205">前の書式<xref:System.Windows.Documents.EditingCommands.Delete%2A>設定を保持しないコマンドと比較します。</span><span class="sxs-lookup"><span data-stu-id="54c58-205">Contrast with the <xref:System.Windows.Documents.EditingCommands.Delete%2A> command, which does not retain previous formatting.</span></span>  
  
 <span data-ttu-id="54c58-206">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-206">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-207">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-207">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Backspace"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-208">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-208">XAML Attribute Usage</span></span>  
  
```  
<object property="Backspace"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-209">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-209">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-210">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-210">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-211">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-211">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-212"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-212">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-213">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-213">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-214">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-214">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-215">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-215">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-216">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-216">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrectSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand CorrectSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrectSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ CorrectSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorrectSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-217">現在の位置にあるスペル ミスの単語を修正するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-217">Represents the <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> command, which requests that any misspelled word at the current position be corrected.</span></span></summary>
        <value><span data-ttu-id="54c58-218">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-218">The requested command.</span></span>  <span data-ttu-id="54c58-219">このコマンドには、既定のキー ジェスチャはありません。</span><span class="sxs-lookup"><span data-stu-id="54c58-219">This command has no default key gesture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-220">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-220">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_CorrectSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-221">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-221">XAML Attribute Usage</span></span>  
  
```  
<object property="CorrectSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-222">現在の選択範囲のフォント サイズを 1 ポイント縮小するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-222">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> command, which requests that the font size for the current selection be decreased by 1 point.</span></span></summary>
        <value><span data-ttu-id="54c58-223">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-223">The requested command.</span></span>  <span data-ttu-id="54c58-224">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="OemOpenBrackets" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-224">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemOpenBrackets" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-225">カーソルが単語内にある空の選択に対してこのコマンドが呼び出された場合、その選択は自動的に展開され、単語全体にコマンドが適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-225">If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="54c58-226">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-226">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-227">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-227">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-228">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-228">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-229">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-229">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-230">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-230">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-231">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-231">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-232"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-232">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-233">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-233">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-234">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-234">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-235">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-235">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-236">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-236">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-237">現在の段落のインデントを 1 タブ位置分減らすよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-237">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> command, which requests that indentation for the current paragraph be decreased by one tab stop.</span></span></summary>
        <value><span data-ttu-id="54c58-238">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-238">The requested command.</span></span>  <span data-ttu-id="54c58-239">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + + <see langword="Shift" /> <see langword="T" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-239">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-240">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-240">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-241">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-241">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="54c58-242">このコマンドは、テキスト要素の<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>プロパティがに`true`設定されていない限り、テキスト要素には影響しません。</span><span class="sxs-lookup"><span data-stu-id="54c58-242">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-243">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-243">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-244">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-244">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-245">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-245">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-246">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-246">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-247"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-247">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-248">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-248">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-249">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-249">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-250">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-250">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-251">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-251">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Delete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Delete" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Delete As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Delete { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Delete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-252">現在の選択範囲を削除するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-252">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> command, which requests that the current selection be deleted.</span></span></summary>
        <value><span data-ttu-id="54c58-253">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-253">The requested command.</span></span>  <span data-ttu-id="54c58-254">このコマンドの既定のキー ジェスチャは、<see langword="Delete" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-254">The default key gesture for this command is <see langword="Delete" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-255">このコマンドは、削除された選択項目から書式設定を破棄します。</span><span class="sxs-lookup"><span data-stu-id="54c58-255">This command discards any formatting from the deleted selection.</span></span>  <span data-ttu-id="54c58-256"><xref:System.Windows.Documents.EditingCommands.Backspace%2A>コマンドとは対照的に、このコマンドが呼び出された後、同じ場所に直ちに挿入されたコンテンツに対して、削除された選択項目からの書式設定を保持します。</span><span class="sxs-lookup"><span data-stu-id="54c58-256">Contrast with the <xref:System.Windows.Documents.EditingCommands.Backspace%2A> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  
  
 <span data-ttu-id="54c58-257">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-257">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-258">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-258">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Delete"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-259">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-259">XAML Attribute Usage</span></span>  
  
```  
<object property="Delete"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-260">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-260">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-261">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-261">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-262">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-262">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-263"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-263">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-264">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-264">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-265">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-265">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-266">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-266">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-267">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-267">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNextWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeleteNextWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeleteNextWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeleteNextWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteNextWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-268">現在の位置から見て次の単語を削除するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-268">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> command, which requests that the next word (relative to a current position) be deleted.</span></span></summary>
        <value><span data-ttu-id="54c58-269">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-269">The requested command.</span></span>  <span data-ttu-id="54c58-270">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="Delete" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-270">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Delete" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-271">カーソルが単語内にある場合は、現在の位置と単語の末尾との間の単語の残りの部分が削除されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-271">If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.</span></span>  
  
 <span data-ttu-id="54c58-272">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-272">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-273">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-273">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeleteNextWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-274">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-274">XAML Attribute Usage</span></span>  
  
```  
<object property="DeleteNextWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-275">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-275">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-276">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-276">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-277">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-277">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-278"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-278">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-279">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-279">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-280">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-280">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-281">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-281">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-282">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-282">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="DeletePreviousWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeletePreviousWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeletePreviousWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeletePreviousWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeletePreviousWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-283">現在の位置から見て前の単語を削除するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-283">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> command, which requests that the previous word (relative to a current position) be deleted.</span></span></summary>
        <value><span data-ttu-id="54c58-284">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-284">The requested command.</span></span>  <span data-ttu-id="54c58-285">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="Backspace" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-285">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Backspace" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-286">カーソルが単語内にある場合は、現在位置と単語の先頭との間の単語の残りの部分が削除されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-286">If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.</span></span>  
  
 <span data-ttu-id="54c58-287">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-287">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-288">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-288">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeletePreviousWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-289">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-289">XAML Attribute Usage</span></span>  
  
```  
<object property="DeletePreviousWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-290">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-290">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-291">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-291">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-292">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-292">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-293"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-293">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-294">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-294">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-295">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-295">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-296">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-296">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-297">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-297">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="EnterLineBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterLineBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterLineBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterLineBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterLineBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-298">改行を現在の位置または現在の選択範囲に対して挿入するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-298">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> command, which requests that a line break be inserted at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="54c58-299">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-299">The requested command.</span></span>  <span data-ttu-id="54c58-300">このコマンドの既定のキージェスチャは<see langword="Shift" /> + <see langword="Enter" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-300">The default key gesture for this command is <see langword="Shift" />+<see langword="Enter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-301">などのフローコンテンツをサポートするエディターで<xref:System.Windows.Controls.RichTextBox>は、このコマンドに<xref:System.Windows.Documents.LineBreak>よって要素が現在の位置に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-301">For editors that support flow content, such as <xref:System.Windows.Controls.RichTextBox>, this command causes a <xref:System.Windows.Documents.LineBreak> element to be inserted at the current position.</span></span>  
  
 <span data-ttu-id="54c58-302">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-302">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-303">このコマンドは、および<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-303">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_EnterLineBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-304">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-304">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterLineBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-305">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-305">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-306">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-306">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-307">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-307">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-308"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-308">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-309">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-309">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-310">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-310">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-311">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-311">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-312">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-312">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      </Docs>
    </Member>
    <Member MemberName="EnterParagraphBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterParagraphBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterParagraphBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterParagraphBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterParagraphBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-313">段落区切りを現在の位置または現在の選択範囲を超えた位置に挿入するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-313">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> command, which requests that a paragraph break be inserted at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="54c58-314">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-314">The requested command.</span></span>  <span data-ttu-id="54c58-315">このコマンドの既定のキー ジェスチャは、<see langword="Enter" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-315">The default key gesture for this command is <see langword="Enter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-316">このコマンドは、ユーザーが ENTER キーを押すことに相当します。</span><span class="sxs-lookup"><span data-stu-id="54c58-316">This command is equivalent to the user pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="54c58-317">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-317">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-318">この<xref:System.Windows.Controls.RichTextBox>コマンドは、および<xref:System.Windows.Controls.TextBox>でネイティブにサポートされて`true`います ( <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>プロパティがの場合)。</span><span class="sxs-lookup"><span data-stu-id="54c58-318">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property is `true`).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="54c58-319">このコマンドは、テキスト要素の<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>プロパティがに`true`設定されていない限り、テキスト要素には影響しません。</span><span class="sxs-lookup"><span data-stu-id="54c58-319">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_EnterParagraphBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-320">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-320">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterParagraphBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-321">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-321">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-322">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-322">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-323">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-323">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-324"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-324">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-325">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-325">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-326">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-326">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-327">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-327">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-328">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-328">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IgnoreSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IgnoreSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IgnoreSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-329">現在の位置または現在の選択範囲内にあるスペル ミスの単語をすべて無視するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-329">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.</span></span></summary>
        <value><span data-ttu-id="54c58-330">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-330">The requested command.</span></span>  <span data-ttu-id="54c58-331">このコマンドには、既定のキー ジェスチャはありません。</span><span class="sxs-lookup"><span data-stu-id="54c58-331">This command has no default key gesture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-332">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-332">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_IgnoreSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-333">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-333">XAML Attribute Usage</span></span>  
  
```  
<object property="IgnoreSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-334">現在の選択範囲のフォント サイズを 1 ポイント拡大するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-334">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> command, which requests that the font size for the current selection be increased by 1 point.</span></span></summary>
        <value><span data-ttu-id="54c58-335">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-335">The requested command.</span></span>  <span data-ttu-id="54c58-336">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="OemCloseBrackets" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-336">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemCloseBrackets" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-337">カーソルが単語内にある空の選択に対してこのコマンドを呼び出すと、その選択内容が拡張され、単語全体にコマンドが適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-337">If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="54c58-338">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-338">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-339">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-339">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-340">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-340">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-341">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-341">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-342">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-342">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-343">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-343">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-344"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-344">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-345">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-345">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-346">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-346">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-347">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-347">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-348">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-348">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-349">現在の段落のインデントを 1 タブ位置分増やすよう要求する <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-349">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> command, which requests that indentation for the current paragraph be increased by one tab stop.</span></span></summary>
        <value><span data-ttu-id="54c58-350">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-350">The requested command.</span></span>  <span data-ttu-id="54c58-351">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="T" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-351">The default key gesture for this command is <see langword="Ctrl" />+<see langword="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-352">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-352">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-353">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-353">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="54c58-354">このコマンドは、テキスト要素の<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>プロパティがに`true`設定されていない限り、テキスト要素には影響しません。</span><span class="sxs-lookup"><span data-stu-id="54c58-354">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-355">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-355">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-356">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-356">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-357">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-357">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-358">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-358">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-359"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-359">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-360">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-360">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-361">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-361">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-362">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-362">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-363">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-363">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-364">キャレットを 1 行下に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-364">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> command, which requests that the caret move down by one line.</span></span></summary>
        <value><span data-ttu-id="54c58-365">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-365">The requested command.</span></span>  <span data-ttu-id="54c58-366">このコマンドの既定のキー ジェスチャは、<see langword="Down" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-366">The default key gesture for this command is <see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-367">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-367">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-368">このコマンドは、および<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-368">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-369">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-369">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-370">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-370">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-371">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-371">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-372">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-372">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-373"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-373">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-374">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-374">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-375">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-375">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-376">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-376">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-377">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-377">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-378">キャレットを 1 ページ下に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-378">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> command, which requests that the caret move down by one page.</span></span></summary>
        <value><span data-ttu-id="54c58-379">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-379">The requested command.</span></span>  <span data-ttu-id="54c58-380">このコマンドの既定のキー ジェスチャは、<see langword="PageDown" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-380">The default key gesture for this command is <see langword="PageDown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-381">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-381">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-382">このコマンドは、および<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-382">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-383">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-383">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-384">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-384">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-385">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-385">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-386">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-386">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-387"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-387">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-388">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-388">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-389">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-389">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-390">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-390">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-391">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-391">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-392">キャレットを 1 段落下に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-392">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> command, which requests that the caret move down by one paragraph.</span></span></summary>
        <value><span data-ttu-id="54c58-393">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-393">The requested command.</span></span>  <span data-ttu-id="54c58-394">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="Down" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-394">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-395">このコマンドは、次の段落の先頭にカレットを配置します。</span><span class="sxs-lookup"><span data-stu-id="54c58-395">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="54c58-396">このコマンドは、 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> <xref:System.Windows.Controls.TextBox>で呼び出された場合と同様に動作します。</span><span class="sxs-lookup"><span data-stu-id="54c58-396">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="54c58-397">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-397">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-398">このコマンドは、および<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-398">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-399">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-399">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-400">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-400">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-401">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-401">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-402">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-402">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-403"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-403">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-404">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-404">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-405">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-405">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-406">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-406">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-407">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-407">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-408">キャレットを 1 文字左に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-408">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> command, which requests that the caret move one character left.</span></span></summary>
        <value><span data-ttu-id="54c58-409">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-409">The requested command.</span></span>  <span data-ttu-id="54c58-410">このコマンドの既定のキー ジェスチャは、<see langword="Left" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-410">The default key gesture for this command is <see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-411">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-411">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-412">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-412">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-413">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-413">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-414">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-414">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-415">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-415">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-416">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-416">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-417"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-417">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-418">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-418">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-419">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-419">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-420">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-420">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-421">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-421">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-422">キャレットを 1 語左に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-422">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> command, which requests that the caret move one word left.</span></span></summary>
        <value><span data-ttu-id="54c58-423">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-423">The requested command.</span></span>  <span data-ttu-id="54c58-424">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="Left" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-424">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-425">カレットが単語内にある場合、このコマンドはカレットをその単語の先頭に移動します。</span><span class="sxs-lookup"><span data-stu-id="54c58-425">If the caret is within a word, this command moves the caret to the beginning of that word.</span></span>  <span data-ttu-id="54c58-426">それ以外の場合、このコマンドはカレットを前の単語の先頭に移動します。</span><span class="sxs-lookup"><span data-stu-id="54c58-426">Otherwise, this command moves the caret to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="54c58-427">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-427">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-428">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-428">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-429">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-429">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-430">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-430">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-431">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-431">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-432">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-432">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-433"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-433">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-434">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-434">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-435">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-435">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-436">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-436">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-437">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-437">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-438">キャレットを 1 文字右に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-438">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> command, which requests that the caret move one character right.</span></span></summary>
        <value><span data-ttu-id="54c58-439">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-439">The requested command.</span></span>  <span data-ttu-id="54c58-440">このコマンドの既定のキー ジェスチャは、<see langword="Right" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-440">The default key gesture for this command is <see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-441">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-441">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-442">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-442">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-443">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-443">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-444">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-444">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-445">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-445">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-446">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-446">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-447"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-447">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-448">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-448">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-449">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-449">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-450">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-450">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-451">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-451">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-452">キャレットを 1 語右に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-452">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> command, which requests that the caret move right by one word.</span></span></summary>
        <value><span data-ttu-id="54c58-453">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-453">The requested command.</span></span>  <span data-ttu-id="54c58-454">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="Right" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-454">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-455">カレットが単語内にある場合、このコマンドはカレットをその単語の末尾に移動します。</span><span class="sxs-lookup"><span data-stu-id="54c58-455">If the caret is within a word, this command moves the caret to the end of that word.</span></span>  <span data-ttu-id="54c58-456">それ以外の場合、このコマンドはカレットを次の単語の先頭に移動します。</span><span class="sxs-lookup"><span data-stu-id="54c58-456">Otherwise, this command moves the caret to the beginning of the next word.</span></span>  
  
 <span data-ttu-id="54c58-457">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-457">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-458">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-458">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-459">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-459">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-460">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-460">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-461">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-461">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-462">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-462">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-463"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-463">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-464">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-464">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-465">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-465">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-466">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-466">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-467">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-467">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-468">キャレットをコンテンツの末尾に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-468">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> command, which requests that the caret move to the very end of content.</span></span></summary>
        <value><span data-ttu-id="54c58-469">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-469">The requested command.</span></span>  <span data-ttu-id="54c58-470">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="End" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-470">The default key gesture for this command is <see langword="Ctrl" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-471">*テキストコンテナー*は、手動でコンテンツの最終的な境界線を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="54c58-471">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="54c58-472"><xref:System.Windows.Controls.TextBlock>と<xref:System.Windows.Documents.FlowDocument>は、テキストコンテナーの例です。</span><span class="sxs-lookup"><span data-stu-id="54c58-472"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="54c58-473">テキストコンテナー内にまとめて含まれるコンテンツは、*ドキュメント*と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="54c58-473">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="54c58-474">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-474">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-475">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-475">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-476">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-476">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-477">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-477">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-478">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-478">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-479">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-479">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-480"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-480">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-481">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-481">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-482">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-482">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-483">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-483">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-484">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-484">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-485">キャレットをコンテンツの先頭に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-485">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> command, which requests that the caret move to the very beginning of content.</span></span></summary>
        <value><span data-ttu-id="54c58-486">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-486">The requested command.</span></span>  <span data-ttu-id="54c58-487">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="Home" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-487">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-488">*テキストコンテナー*は、手動でコンテンツの最終的な境界線を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="54c58-488">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="54c58-489"><xref:System.Windows.Controls.TextBlock>と<xref:System.Windows.Documents.FlowDocument>は、テキストコンテナーの例です。</span><span class="sxs-lookup"><span data-stu-id="54c58-489"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="54c58-490">テキストコンテナー内にまとめて含まれるコンテンツは、*ドキュメント*と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="54c58-490">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="54c58-491">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-491">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-492">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-492">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-493">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-493">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-494">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-494">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-495">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-495">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-496">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-496">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-497"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-497">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-498">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-498">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-499">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-499">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-500">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-500">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-501">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-501">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-502">キャレットを現在の行の末尾に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-502">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> command, which requests that the caret move to the end of the current line.</span></span></summary>
        <value><span data-ttu-id="54c58-503">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-503">The requested command.</span></span>  <span data-ttu-id="54c58-504">このコマンドの既定のキー ジェスチャは、<see langword="End" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-504">The default key gesture for this command is <see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-505">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-505">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-506">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-506">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-507">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-507">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-508">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-508">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-509">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-509">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-510">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-510">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-511"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-511">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-512">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-512">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-513">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-513">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-514">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-514">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-515">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-515">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-516">キャレットを現在の行の先頭に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-516">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> command, which requests that the caret move to the beginning of the current line.</span></span></summary>
        <value><span data-ttu-id="54c58-517">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-517">The requested command.</span></span>  <span data-ttu-id="54c58-518">このコマンドの既定のキー ジェスチャは、<see langword="Home" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-518">The default key gesture for this command is <see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-519">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-519">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-520">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-520">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-521">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-521">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-522">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-522">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-523">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-523">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-524">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-524">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-525"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-525">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-526">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-526">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-527">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-527">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-528">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-528">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-529">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-529">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-530">キャレットを 1 行上に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-530">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> command, which requests that the caret move up by one line.</span></span></summary>
        <value><span data-ttu-id="54c58-531">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-531">The requested command.</span></span>  <span data-ttu-id="54c58-532">このコマンドの既定のキー ジェスチャは、<see langword="Up" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-532">The default key gesture for this command is <see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-533">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-533">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-534">このコマンドは、および<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-534">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-535">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-535">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-536">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-536">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-537">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-537">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-538">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-538">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-539"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-539">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-540">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-540">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-541">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-541">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-542">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-542">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-543">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-543">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-544">キャレットを 1 ページ上に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-544">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> command, which requests that the caret move up by one page.</span></span></summary>
        <value><span data-ttu-id="54c58-545">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-545">The requested command.</span></span>  <span data-ttu-id="54c58-546">このコマンドの既定のキー ジェスチャは、<see langword="PageUp" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-546">The default key gesture for this command is <see langword="PageUp" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-547">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-547">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-548">このコマンドは、および<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-548">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-549">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-549">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-550">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-550">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-551">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-551">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-552">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-552">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-553"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-553">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-554">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-554">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-555">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-555">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-556">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-556">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-557">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-557">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-558">キャレットを 1 段落上に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-558">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> command, which requests that the caret move up by one paragraph.</span></span></summary>
        <value><span data-ttu-id="54c58-559">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-559">The requested command.</span></span>  <span data-ttu-id="54c58-560">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="Up" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-560">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-561">このコマンドは、次の段落の先頭にカレットを配置します。</span><span class="sxs-lookup"><span data-stu-id="54c58-561">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="54c58-562">このコマンドは、 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> <xref:System.Windows.Controls.TextBox>で呼び出された場合と同様に動作します。</span><span class="sxs-lookup"><span data-stu-id="54c58-562">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="54c58-563">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-563">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-564">このコマンドは、および<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-564">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-565">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-565">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-566">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-566">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-567">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-567">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-568">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-568">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-569"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-569">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-570">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-570">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-571">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-571">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-572">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-572">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-573">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-573">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-574">現在の選択範囲を 1 行下に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-574">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> command, which requests that the current selection be expanded down by one line.</span></span></summary>
        <value><span data-ttu-id="54c58-575">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-575">The requested command.</span></span>  <span data-ttu-id="54c58-576">このコマンドの既定のキージェスチャは<see langword="Shift" /> + <see langword="Down" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-576">The default key gesture for this command is <see langword="Shift" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-577">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-577">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-578">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-578">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-579">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-579">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-580">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-580">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-581">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-581">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-582">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-582">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-583"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-583">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-584">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-584">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-585">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-585">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-586">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-586">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-587">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-587">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-588">現在の選択範囲を 1 ページ下に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-588">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> command, which requests that the current selection be expanded down by one page.</span></span></summary>
        <value><span data-ttu-id="54c58-589">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-589">The requested command.</span></span>  <span data-ttu-id="54c58-590">このコマンドの既定のキージェスチャは<see langword="Shift" /> + <see langword="PageDown" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-590">The default key gesture for this command is <see langword="Shift" />+<see langword="PageDown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-591">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-591">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-592">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-592">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-593">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-593">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-594">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-594">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-595">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-595">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-596">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-596">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-597"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-597">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-598">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-598">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-599">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-599">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-600">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-600">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-601">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-601">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-602">現在の選択範囲を 1 段落下に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-602">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> command, which requests that the current selection be expanded down by one paragraph.</span></span></summary>
        <value><span data-ttu-id="54c58-603">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-603">The requested command.</span></span>  <span data-ttu-id="54c58-604">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + + <see langword="Shift" /> <see langword="Down" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-604">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-605">このコマンドは、選択範囲を次の段落の先頭まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="54c58-605">This command expands the selection to the beginning of the next paragraph.</span></span>  <span data-ttu-id="54c58-606">それ以外の場合、このコマンドは選択範囲を現在の段落の最後まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="54c58-606">Otherwise, this command expands the selection to the end of the current paragraph.</span></span>  <span data-ttu-id="54c58-607">展開された選択範囲には、段落の末尾を示す段落区切りが含まれます。</span><span class="sxs-lookup"><span data-stu-id="54c58-607">The expanded selection includes the paragraph break that marks the end of the paragraph.</span></span>  
  
 <span data-ttu-id="54c58-608">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-608">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-609">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-609">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-610">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-610">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-611">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-611">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-612">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-612">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-613">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-613">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-614"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-614">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-615">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-615">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-616">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-616">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-617">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-617">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-618">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-618">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-619">現在の選択範囲を 1 文字左に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-619">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> command, which requests that the current selection be expanded left by one character.</span></span></summary>
        <value><span data-ttu-id="54c58-620">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-620">The requested command.</span></span>  <span data-ttu-id="54c58-621">このコマンドの既定のキージェスチャは<see langword="Shift" /> + <see langword="Left" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-621">The default key gesture for this command is <see langword="Shift" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-622">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-622">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-623">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-623">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-624">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-624">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-625">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-625">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-626">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-626">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-627">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-627">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-628"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-628">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-629">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-629">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-630">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-630">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-631">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-631">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-632">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-632">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-633">現在の選択範囲を 1 語左に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-633">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> command, which requests that the current selection be expanded left by one word.</span></span></summary>
        <value><span data-ttu-id="54c58-634">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-634">The requested command.</span></span>  <span data-ttu-id="54c58-635">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + + <see langword="Shift" /> <see langword="Left" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-635">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-636">カーソルが単語内にある場合、このコマンドは選択範囲をその単語の先頭まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="54c58-636">If the caret is within a word, this command expands the selection to the beginning of that word.</span></span>  <span data-ttu-id="54c58-637">それ以外の場合、このコマンドは選択範囲を前の単語の先頭まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="54c58-637">Otherwise, this command expands the selection to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="54c58-638">展開された選択範囲には、単語区切り記号は含まれません。</span><span class="sxs-lookup"><span data-stu-id="54c58-638">The expanded selection does not include the word delimiter.</span></span>  <span data-ttu-id="54c58-639">と<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>は対照的に、展開された選択範囲には単語区切り記号が含まれます。</span><span class="sxs-lookup"><span data-stu-id="54c58-639">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, which does include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="54c58-640">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-640">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-641">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-641">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-642">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-642">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-643">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-643">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-644">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-644">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-645">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-645">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-646"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-646">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-647">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-647">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-648">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-648">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-649">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-649">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-650">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-650">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-651">現在の選択範囲を 1 文字右に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-651">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> command, which requests that the current selection be expanded right by one character.</span></span></summary>
        <value><span data-ttu-id="54c58-652">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-652">The requested command.</span></span>  <span data-ttu-id="54c58-653">このコマンドの既定のキージェスチャは<see langword="Shift" /> + <see langword="Right" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-653">The default key gesture for this command is <see langword="Shift" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-654">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-654">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-655">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-655">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-656">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-656">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-657">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-657">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-658">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-658">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-659">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-659">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-660"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-660">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-661">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-661">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-662">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-662">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-663">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-663">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-664">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-664">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-665">現在の選択範囲を 1 語右に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-665">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> command, which requests that the current selection be expanded right by one word.</span></span></summary>
        <value><span data-ttu-id="54c58-666">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-666">The requested command.</span></span>  <span data-ttu-id="54c58-667">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + + <see langword="Shift" /> <see langword="Right" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-667">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-668">カーソルが単語内にある場合、このコマンドは選択範囲をその単語の末尾まで拡張します。</span><span class="sxs-lookup"><span data-stu-id="54c58-668">If the caret is within a word, this command expands the selection to the end of that word.</span></span>  <span data-ttu-id="54c58-669">それ以外の場合、このコマンドは選択範囲を次の単語の最後まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="54c58-669">Otherwise, this command expands the selection to the end of the next word.</span></span>  
  
 <span data-ttu-id="54c58-670">展開された選択範囲には、区切り記号が含まれます。</span><span class="sxs-lookup"><span data-stu-id="54c58-670">The expanded selection includes the word delimiter.</span></span>  <span data-ttu-id="54c58-671">で<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>は、展開された選択範囲に単語区切り記号が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="54c58-671">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> which does not include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="54c58-672">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-672">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-673">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-673">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-674">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-674">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-675">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-675">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-676">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-676">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-677">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-677">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-678"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-678">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-679">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-679">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-680">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-680">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-681">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-681">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-682">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-682">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-683">現在の選択範囲をコンテンツの末尾まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-683">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> command, which requests that the current selection be expanded to the very end of content.</span></span></summary>
        <value><span data-ttu-id="54c58-684">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-684">The requested command.</span></span>  <span data-ttu-id="54c58-685">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + + <see langword="Shift" /> <see langword="End" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-685">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-686">*テキストコンテナー*は、手動でコンテンツの最終的な境界線を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="54c58-686">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="54c58-687"><xref:System.Windows.Controls.TextBlock>と<xref:System.Windows.Documents.FlowDocument>は、テキストコンテナーの例です。</span><span class="sxs-lookup"><span data-stu-id="54c58-687"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="54c58-688">テキストコンテナー内にまとめて含まれるコンテンツは、*ドキュメント*と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="54c58-688">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="54c58-689">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-689">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-690">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-690">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-691">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-691">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-692">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-692">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-693">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-693">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-694">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-694">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-695"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-695">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-696">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-696">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-697">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-697">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-698">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-698">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-699">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-699">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-700">現在の選択範囲をコンテンツの先頭まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-700">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> command, which requests that the current selection be expanded to the very beginning of content.</span></span></summary>
        <value><span data-ttu-id="54c58-701">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-701">The requested command.</span></span>  <span data-ttu-id="54c58-702">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + + <see langword="Shift" /> <see langword="Home" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-702">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-703">*テキストコンテナー*は、手動でコンテンツの最終的な境界線を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="54c58-703">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="54c58-704"><xref:System.Windows.Controls.TextBlock>と<xref:System.Windows.Documents.FlowDocument>は、テキストコンテナーの例です。</span><span class="sxs-lookup"><span data-stu-id="54c58-704"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="54c58-705">テキストコンテナー内にまとめて含まれるコンテンツは、*ドキュメント*と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="54c58-705">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="54c58-706">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-706">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-707">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-707">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-708">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-708">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-709">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-709">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-710">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-710">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-711">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-711">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-712"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-712">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-713">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-713">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-714">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-714">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-715">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-715">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-716">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-716">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-717">現在の選択範囲を現在の行の末尾まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-717">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> command, which requests that the current selection be expanded to the end of the current line.</span></span></summary>
        <value><span data-ttu-id="54c58-718">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-718">The requested command.</span></span>  <span data-ttu-id="54c58-719">このコマンドの既定のキージェスチャは<see langword="Shift" /> + <see langword="End" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-719">The default key gesture for this command is <see langword="Shift" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-720">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-720">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-721">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-721">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-722">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-722">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-723">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-723">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-724">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-724">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-725">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-725">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-726"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-726">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-727">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-727">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-728">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-728">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-729">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-729">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-730">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-730">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-731">現在の選択範囲を現在の行の先頭まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-731">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> command, which requests that the current selection be expanded to the beginning of the current line.</span></span></summary>
        <value><span data-ttu-id="54c58-732">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-732">The requested command.</span></span>  <span data-ttu-id="54c58-733">このコマンドの既定のキージェスチャは<see langword="Shift" /> + <see langword="Home" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-733">The default key gesture for this command is <see langword="Shift" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-734">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-734">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-735">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-735">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-736">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-736">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-737">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-737">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-738">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-738">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-739">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-739">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-740"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-740">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-741">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-741">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-742">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-742">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-743">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-743">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-744">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-744">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-745">現在の選択範囲を 1 行上に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-745">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> command, which requests that the current selection be expanded up by one line.</span></span></summary>
        <value><span data-ttu-id="54c58-746">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-746">The requested command.</span></span>  <span data-ttu-id="54c58-747">このコマンドの既定のキージェスチャは<see langword="Shift" /> + <see langword="Up" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-747">The default key gesture for this command is <see langword="Shift" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-748">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-748">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-749">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-749">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-750">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-750">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-751">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-751">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-752">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-752">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-753">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-753">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-754"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-754">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-755">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-755">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-756">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-756">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-757">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-757">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-758">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-758">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-759">現在の選択範囲を 1 ページ上に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-759">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> command, which requests that the current selection be expanded  up by one page.</span></span></summary>
        <value><span data-ttu-id="54c58-760">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-760">The requested command.</span></span>  <span data-ttu-id="54c58-761">このコマンドの既定のキージェスチャは<see langword="Shift" /> + <see langword="PageUp" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-761">The default key gesture for this command is <see langword="Shift" />+<see langword="PageUp" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-762">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-762">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-763">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-763">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-764">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-764">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-765">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-765">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-766">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-766">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-767">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-767">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-768"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-768">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-769">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-769">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-770">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-770">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-771">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-771">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-772">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-772">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-773">現在の選択範囲を 1 段落上に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-773">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> command, which requests that the current selection be expanded up by one paragraph.</span></span></summary>
        <value><span data-ttu-id="54c58-774">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-774">The requested command.</span></span>  <span data-ttu-id="54c58-775">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + + <see langword="Shift" /> <see langword="Up" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-775">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-776">カーソルが段落の先頭にある場合、このコマンドは選択範囲を前の段落の先頭まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="54c58-776">If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.</span></span>  <span data-ttu-id="54c58-777">それ以外の場合、このコマンドは選択範囲を現在の段落の先頭まで拡大します。</span><span class="sxs-lookup"><span data-stu-id="54c58-777">Otherwise, this command expands the selection to the beginning of the current paragraph.</span></span>  
  
 <span data-ttu-id="54c58-778">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-778">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-779">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-779">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-780">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-780">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-781">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-781">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-782">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-782">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-783">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-783">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-784"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-784">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-785">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-785">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-786">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-786">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-787">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-787">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-788">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-788">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="TabBackward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabBackward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabBackward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabBackward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabBackward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabBackward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-789"><see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-789">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> command.</span></span></summary>
        <value><span data-ttu-id="54c58-790">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-790">The requested command.</span></span>  <span data-ttu-id="54c58-791">このコマンドの既定のキージェスチャは<see langword="Shift" /> + <see langword="Tab" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-791">The default key gesture for this command is <see langword="Shift" />+<see langword="Tab" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-792">このコマンドの動作は、現在選択されている内容によって異なります。</span><span class="sxs-lookup"><span data-stu-id="54c58-792">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="54c58-793">選択範囲が空でない場合、このコマンドはに<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>相当します。</span><span class="sxs-lookup"><span data-stu-id="54c58-793">If the selection is non-empty, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>.</span></span> <span data-ttu-id="54c58-794">カーソルが ( <xref:System.Windows.Documents.TableCell>要素で表される) テーブルセルにある場合、このコマンドはカレットを前のセルに移動します。</span><span class="sxs-lookup"><span data-stu-id="54c58-794">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the previous cell.</span></span> <span data-ttu-id="54c58-795">それ以外の場合は、現在位置にタブ文字が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-795">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="54c58-796">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-796">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-797">この<xref:System.Windows.Controls.RichTextBox>コマンドは、および<xref:System.Windows.Controls.TextBox>でネイティブにサポートされて`true`います ( <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>プロパティがの場合)。</span><span class="sxs-lookup"><span data-stu-id="54c58-797">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabBackward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-798">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-798">XAML Attribute Usage</span></span>  
  
```  
<object property="TabBackward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-799">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-799">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-800">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-800">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-801">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-801">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-802"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-802">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-803">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-803">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-804">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-804">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-805">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-805">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-806">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-806">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabForward" />
      </Docs>
    </Member>
    <Member MemberName="TabForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabForward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabForward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabForward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabForward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-807"><see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-807">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> command.</span></span></summary>
        <value><span data-ttu-id="54c58-808">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-808">The requested command.</span></span>  <span data-ttu-id="54c58-809">このコマンドの既定のキー ジェスチャは、<see langword="Tab" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-809">The default key gesture for this command is <see langword="Tab" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-810">このコマンドの動作は、現在選択されている内容によって異なります。</span><span class="sxs-lookup"><span data-stu-id="54c58-810">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="54c58-811">選択範囲が空でない場合、または選択範囲が空で、現在のキャレット位置が段落の先頭にある場合、このコマンドはに<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>相当します。</span><span class="sxs-lookup"><span data-stu-id="54c58-811">If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>.</span></span> <span data-ttu-id="54c58-812">カーソルが ( <xref:System.Windows.Documents.TableCell>要素で表される) テーブルセルにある場合、このコマンドはカレットを次のセルに移動します。</span><span class="sxs-lookup"><span data-stu-id="54c58-812">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the next cell.</span></span> <span data-ttu-id="54c58-813">カーソルがテーブルの最後のセルにある場合、このコマンドを実行すると新しい行がテーブルに追加され、カレットが新しい行の最初のセルに配置されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-813">If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.</span></span>  <span data-ttu-id="54c58-814">それ以外の場合は、現在位置にタブ文字が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-814">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="54c58-815">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-815">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-816">この<xref:System.Windows.Controls.RichTextBox>コマンドは、および<xref:System.Windows.Controls.TextBox>でネイティブにサポートされて`true`います ( <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>プロパティがの場合)。</span><span class="sxs-lookup"><span data-stu-id="54c58-816">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabForward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-817">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-817">XAML Attribute Usage</span></span>  
  
```  
<object property="TabForward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-818">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-818">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-819">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-819">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-820">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-820">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-821"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-821">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-822">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-822">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-823">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-823">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-824">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-824">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-825">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-825">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabBackward" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBold">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBold" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBold As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBold { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBold : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-826">現在の選択範囲に対して <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> の書式設定を切り替えるよう要求する <see cref="T:System.Windows.Documents.Bold" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-826">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> command, which requests that <see cref="T:System.Windows.Documents.Bold" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="54c58-827">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-827">The requested command.</span></span>  <span data-ttu-id="54c58-828">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="B" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-828">The default key gesture for this command is <see langword="Ctrl" />+<see langword="B" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-829">現在の選択範囲のがから<xref:System.Windows.FontWeights.Thin%2A>まで<xref:System.Windows.FontWeights.SemiBold%2A>の範囲内にある<xref:System.Windows.FontWeights.Bold%2A>場合、は現在の選択範囲に適用されます。 <xref:System.Windows.FontWeight></span><span class="sxs-lookup"><span data-stu-id="54c58-829">If the <xref:System.Windows.FontWeight> for the current selection is in the range from <xref:System.Windows.FontWeights.Thin%2A> to <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> is applied to the current selection.</span></span>  <span data-ttu-id="54c58-830">それ以外<xref:System.Windows.FontWeights.Normal%2A>の場合は、が適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-830">Otherwise, <xref:System.Windows.FontWeights.Normal%2A> is applied.</span></span>  <span data-ttu-id="54c58-831">値の<xref:System.Windows.FontWeight>比較リストについては<xref:System.Windows.FontWeights>、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-831">For a comparative list of <xref:System.Windows.FontWeight> values, see <xref:System.Windows.FontWeights>.</span></span>  
  
 <span data-ttu-id="54c58-832">選択範囲が空でカレットが単語内にある場合は、単語全体を含むように選択範囲が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-832">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="54c58-833">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-833">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-834">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-834">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBold"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-835">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-835">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBold"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-836">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-836">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-837">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-837">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-838">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-838">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-839"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-839">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-840">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-840">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-841">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-841">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-842">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-842">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-843">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-843">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBullets">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBullets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBullets As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBullets { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBullets : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-844">現在の選択範囲に対して順序の付いていないリスト (箇条書きリスト) の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-844">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="54c58-845">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-845">The requested command.</span></span>  <span data-ttu-id="54c58-846">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + + <see langword="Shift" /> <see langword="L" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-846">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="L" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-847">このコマンドは、 <xref:System.Windows.Documents.Paragraph>レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="54c58-847">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="54c58-848">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-848">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="54c58-849">複数の段落にわたる選択に対してこのコマンドを呼び出すと、選択範囲に含まれる各段落の内容全体に効果が適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-849">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="54c58-850">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-850">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-851">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-851">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBullets"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-852">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-852">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBullets"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-853">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-853">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-854">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-854">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-855">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-855">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-856"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-856">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-857">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-857">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-858">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-858">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-859">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-859">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-860">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-860">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      </Docs>
    </Member>
    <Member MemberName="ToggleInsert">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleInsert" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleInsert As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleInsert { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleInsert : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-861">挿入と上書きの入力モードを切り替える <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-861">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> command, which toggles the typing mode between Insert and Overtype.</span></span></summary>
        <value><span data-ttu-id="54c58-862">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-862">The requested command.</span></span>  <span data-ttu-id="54c58-863">このコマンドの既定のキー ジェスチャは、<see langword="Insert" /> です。</span><span class="sxs-lookup"><span data-stu-id="54c58-863">The default key gesture for this command is <see langword="Insert" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-864">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-864">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-865">このコマンドは、、 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>でネイティブにサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-865">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleInsert"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-866">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-866">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleInsert"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-867">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-867">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-868">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-868">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-869">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-869">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-870"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-870">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-871">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-871">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-872">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-872">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-873">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-873">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-874">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-874">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleItalic">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleItalic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleItalic As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleItalic { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleItalic : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-875">現在の選択範囲に対して <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> の書式設定を切り替えるよう要求する <see cref="T:System.Windows.Documents.Italic" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-875">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> command, which requests that <see cref="T:System.Windows.Documents.Italic" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="54c58-876">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-876">The requested command.</span></span>  <span data-ttu-id="54c58-877">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="I" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-877">The default key gesture for this command is <see langword="Ctrl" />+<see langword="I" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-878">現在の選択範囲<xref:System.Windows.FontStyle> <xref:System.Windows.FontStyles.Normal%2A>のがの場合は、現在の選択項目にが適用されます。 <xref:System.Windows.FontStyles.Italic%2A></span><span class="sxs-lookup"><span data-stu-id="54c58-878">If the <xref:System.Windows.FontStyle> for the current selection is <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> is applied to the current selection.</span></span>  <span data-ttu-id="54c58-879">それ以外<xref:System.Windows.FontStyles.Normal%2A>の場合は、が適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-879">Otherwise, <xref:System.Windows.FontStyles.Normal%2A> is applied.</span></span>  
  
 <span data-ttu-id="54c58-880">選択範囲が空でカレットが単語内にある場合は、単語全体を含むように選択範囲が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-880">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="54c58-881">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-881">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-882">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-882">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleItalic"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-883">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-883">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleItalic"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-884">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-884">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-885">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-885">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-886">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-886">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-887"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-887">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-888">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-888">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-889">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-889">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-890">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-890">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-891">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-891">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleNumbering">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleNumbering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleNumbering As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleNumbering { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleNumbering : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-892">現在の選択範囲に対して順序付きリスト (番号付きリスト) の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-892">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="54c58-893">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-893">The requested command.</span></span>  <span data-ttu-id="54c58-894">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + + <see langword="Shift" /> <see langword="N" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-894">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="N" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-895">このコマンドは、 <xref:System.Windows.Documents.Paragraph>レベルで動作します。</span><span class="sxs-lookup"><span data-stu-id="54c58-895">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="54c58-896">段落内のコンテンツを部分的に選択したときにこのコマンドが呼び出された場合 (キャレットが段落内にある場合は空の選択を含む)、要求された効果は段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-896">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="54c58-897">複数の段落にわたる選択に対してこのコマンドを呼び出すと、選択範囲に含まれる各段落の内容全体に効果が適用されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-897">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="54c58-898">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-898">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-899">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-899">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleNumbering"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-900">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-900">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleNumbering"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-901">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-901">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-902">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-902">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-903">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-903">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-904"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-904">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-905">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-905">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-906">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-906">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-907">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-907">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-908">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-908">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSubscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSubscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSubscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSubscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSubscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-909">現在の選択範囲に対して下付き文字の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-909">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> command, which requests that subscript formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="54c58-910">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-910">The requested command.</span></span>  <span data-ttu-id="54c58-911">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="OemPlus" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-911">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemPlus" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-912">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-912">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSubscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-913">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-913">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSubscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-914">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-914">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-915">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-915">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-916">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-916">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-917"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-917">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-918">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-918">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-919">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-919">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-920">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-920">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-921">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-921">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSuperscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSuperscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSuperscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSuperscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSuperscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-922">現在の選択範囲に対して上付き文字の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-922">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> command, which requests that superscript formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="54c58-923">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-923">The requested command.</span></span>  <span data-ttu-id="54c58-924">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + + <see langword="Shift" /> <see langword="OemPlus" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-924">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="OemPlus" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-925">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-925">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSuperscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-926">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-926">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSuperscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-927">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-927">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-928">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-928">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-929">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-929">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-930"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-930">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-931">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-931">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-932">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-932">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-933">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-933">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-934">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-934">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleUnderline">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleUnderline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleUnderline As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleUnderline { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleUnderline : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54c58-935">現在の選択範囲に対して <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> の書式設定を切り替えるよう要求する <see cref="T:System.Windows.Documents.Underline" /> コマンドを表します。</span><span class="sxs-lookup"><span data-stu-id="54c58-935">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> command, which requests that <see cref="T:System.Windows.Documents.Underline" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="54c58-936">要求されたコマンド。</span><span class="sxs-lookup"><span data-stu-id="54c58-936">The requested command.</span></span>  <span data-ttu-id="54c58-937">このコマンドの既定のキージェスチャは<see langword="Ctrl" /> + <see langword="U" />です。</span><span class="sxs-lookup"><span data-stu-id="54c58-937">The default key gesture for this command is <see langword="Ctrl" />+<see langword="U" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54c58-938">選択範囲が空でカレットが単語内にある場合は、単語全体を含むように選択範囲が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-938">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="54c58-939">特定のオブジェクトでは、このコマンドに応答する実際の実装は必ずしも必要ではありません。多くの場合、コマンドに応答する実装は、アプリケーションライターの役割です。</span><span class="sxs-lookup"><span data-stu-id="54c58-939">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="54c58-940">このコマンドは、によっ<xref:System.Windows.Controls.RichTextBox>てネイティブでサポートされています。</span><span class="sxs-lookup"><span data-stu-id="54c58-940">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleUnderline"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="54c58-941">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="54c58-941">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleUnderline"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="54c58-942">次の例は、コマンドをサポートするオブジェクトで編集コマンドを呼び出す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="54c58-942">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="54c58-943">この例では、 <xref:System.Windows.Controls.RichTextBox>はコマンドターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="54c58-943">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="54c58-944">で<xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.FrameworkElement>は<xref:System.Windows.IInputElement> 、インターフェイス (から継承) が実装されており、多くの編集コマンドがネイティブでサポートされていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="54c58-944">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="54c58-945"><xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドの最初の引数は、コマンドパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="54c58-945">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="54c58-946">ほとんどの編集コマンドは、コマンドパラメーターを無視します。一般に、このパラメーターは`null`編集コマンドに対してである必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-946">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="54c58-947">2番目の引数は、コマンドがルーティングされるオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="54c58-947">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="54c58-948">このオブジェクトは、 <xref:System.Windows.IInputElement>インターフェイスを実装する必要があります。また、指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="54c58-948">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="54c58-949">通常、コマンドを処理しないオブジェクトで呼び出されると、コマンドは無視されます。</span><span class="sxs-lookup"><span data-stu-id="54c58-949">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
  </Members>
</Type>
