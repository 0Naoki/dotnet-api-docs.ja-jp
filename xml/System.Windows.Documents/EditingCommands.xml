<Type Name="EditingCommands" FullName="System.Windows.Documents.EditingCommands">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="30b353139e00ffa86a542c259a68250718297ece" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30631396" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EditingCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EditingCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.EditingCommands" />
  <TypeSignature Language="VB.NET" Value="Public Class EditingCommands" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditingCommands abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="a1e53-101">一連の標準的な編集関連コマンドを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a1e53-101">Provides a standard set of editing related commands.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-102">次の表は編集コマンドと、関連付けられた既定のキー ジェスチャ (からキーの名前を持つ、<xref:System.Windows.Input.Key>と<xref:System.Windows.Input.ModifierKeys>列挙型)。</span><span class="sxs-lookup"><span data-stu-id="a1e53-102">The following table shows the editing commands and the associated default key gestures (with key names from the <xref:System.Windows.Input.Key> and <xref:System.Windows.Input.ModifierKeys> enumerations).</span></span>  
  
|<span data-ttu-id="a1e53-103">編集コマンド</span><span class="sxs-lookup"><span data-stu-id="a1e53-103">Editing command</span></span>|<span data-ttu-id="a1e53-104">既定のキー ジェスチャ</span><span class="sxs-lookup"><span data-stu-id="a1e53-104">Default key gesture</span></span>|  
|---------------------|-------------------------|  
|<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  
|<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  
|<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  
|<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|<span data-ttu-id="a1e53-105">既定のキー ジェスチャはありません。</span><span class="sxs-lookup"><span data-stu-id="a1e53-105">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|<span data-ttu-id="a1e53-106">既定のキー ジェスチャはありません。</span><span class="sxs-lookup"><span data-stu-id="a1e53-106">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|  
  
 <span data-ttu-id="a1e53-107">カーソル移動のコマンドとコマンドの展開の選択、共通のセットを共有既定のキー ジェスチャの追加、一般的な違い、<xref:System.Windows.Input.ModifierKeys.Shift>キャレット移動コマンドからの選択 コマンドを区別するためにキー。</span><span class="sxs-lookup"><span data-stu-id="a1e53-107">Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <xref:System.Windows.Input.ModifierKeys.Shift> key to differentiate selection commands from caret movement commands.</span></span>  <span data-ttu-id="a1e53-108">たとえば、<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>コマンドの既定のキー ジェスチャには<xref:System.Windows.Input.Key.Left>と、対応する<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>コマンドの既定のキー ジェスチャには<xref:System.Windows.Input.ModifierKeys.Shift> +<xref:System.Windows.Input.Key.Left>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-108">For example, the <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.Key.Left>, and the corresponding <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.ModifierKeys.Shift>+<xref:System.Windows.Input.Key.Left>.</span></span>  
  
 <span data-ttu-id="a1e53-109">コマンドの定義が一般に、によって提供される、<xref:System.Windows.Documents.EditingCommands>クラスを行わないコマンド パラメーターの使用 (、`parameter`で想定されているパラメーター、<xref:System.Windows.Input.ICommand.Execute%2A>メソッド)。</span><span class="sxs-lookup"><span data-stu-id="a1e53-109">In general, the command definitions provided by the <xref:System.Windows.Documents.EditingCommands> class do not make use of command parameters (the `parameter` parameter expected by the <xref:System.Windows.Input.ICommand.Execute%2A> method).</span></span>  
  
 <span data-ttu-id="a1e53-110">コマンドとコマンド実行の詳細については、次を参照してください。[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-110">For more information on commands and commanding, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-111">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-111">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-112">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-112">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-113">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-113">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-114">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-114">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-115">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-115">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-116">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-116">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-117">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-117">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-118">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-118">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
    <altmember cref="T:System.Windows.Input.NavigationCommands" />
  </Docs>
  <Members>
    <Member MemberName="AlignCenter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignCenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignCenter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignCenter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignCenter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-119">現在の段落または段落の選択範囲を中央揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-119">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> command, which requests that the current paragraph or a selection of paragraphs be centered.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-120">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-120">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-121">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="E" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-121">The default key gesture for this command is <see langword="Ctrl" />+<see langword="E" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-122">このコマンドは、<xref:System.Windows.Documents.Paragraph>レベル。</span><span class="sxs-lookup"><span data-stu-id="a1e53-122">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="a1e53-123">このコマンドが呼び出される場合 (カレットが段落内にある空の選択範囲を含む)、段落内のコンテンツの部分的な選択で、要求した効果が段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-123">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="a1e53-124">このコマンドは、複数の段落にわたる選択範囲で呼び出される場合、効果は、選択範囲に含まれる各段落の内容全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-124">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="a1e53-125">次の図は、中央揃えのコンテンツの例を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-125">The following figure shows an example of centered content.</span></span>  
  
 <span data-ttu-id="a1e53-126">![スクリーン ショット: 中央の TextAlign プロパティ値](~/add/media/flowdoc-textalign-center.png "スクリーン ショット: 中央の TextAlign プロパティ値")</span><span class="sxs-lookup"><span data-stu-id="a1e53-126">![Screenshot: TextAlign property value of Center](~/add/media/flowdoc-textalign-center.png "Screenshot: TextAlign property value of Center")</span></span>  
  
 <span data-ttu-id="a1e53-127">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-127">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignCenter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-128">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-128">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignCenter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-129">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-129">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-130">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-130">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-131">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-131">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-132">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-132">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-133">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-133">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-134">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-134">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-135">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-135">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-136">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-136">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignJustify">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignJustify { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignJustify" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignJustify As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignJustify { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-137">現在の段落または段落の選択範囲を両端揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-137">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> command, which requests that the current paragraph or a selection of paragraphs be justified.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-138">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-138">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-139">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="J" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-139">The default key gesture for this command is <see langword="Ctrl" />+<see langword="J" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-140">このコマンドは、<xref:System.Windows.Documents.Paragraph>レベル。</span><span class="sxs-lookup"><span data-stu-id="a1e53-140">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="a1e53-141">このコマンドが呼び出される場合 (カレットが段落内にある空の選択範囲を含む)、段落内のコンテンツの部分的な選択で、要求した効果が段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-141">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="a1e53-142">このコマンドは、複数の段落にわたる選択範囲で呼び出される場合、効果は、選択範囲内のすべての段落に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-142">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.</span></span>  
  
 <span data-ttu-id="a1e53-143">コンテンツの位置揃え、揃えの行が同じまたは等号の近くの幅になるよう、コンテンツの各行内の左右の間隔は調整されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-143">When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.</span></span>  <span data-ttu-id="a1e53-144">コンテンツのコンテンツの横の縁を滑らかを作成する通常位置揃え。</span><span class="sxs-lookup"><span data-stu-id="a1e53-144">Content is typically justified to create smooth edges on the sides of the content.</span></span>  
  
 <span data-ttu-id="a1e53-145">残りの部分よりも短いが多いため、段落の最後の行残る可能性があるいないこのコマンドが呼び出された後にします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-145">Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.</span></span>  
  
 <span data-ttu-id="a1e53-146">次の図は、両端の (左揃え) のコンテンツを示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-146">The following figure shows unjustified (left-aligned) content.</span></span>  
  
 <span data-ttu-id="a1e53-147">![スクリーン ショット: 内容が揃っていません](~/add/media/content-unjustified.png "スクリーン ショット: 内容が揃っていません")</span><span class="sxs-lookup"><span data-stu-id="a1e53-147">![Screenshot: Content is unjustified](~/add/media/content-unjustified.png "Screenshot: Content is unjustified")</span></span>  
  
 <span data-ttu-id="a1e53-148">次の図は、両端揃えが後に同じコンテンツを示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-148">The following figure shows the same content after it has been justified.</span></span>  
  
 <span data-ttu-id="a1e53-149">![コンテンツのスクリーン ショットの位置揃えテキスト](~/add/media/content-justified.png "正当化テキストのコンテンツのスクリーン ショット")</span><span class="sxs-lookup"><span data-stu-id="a1e53-149">![Screenshot of content justified text](~/add/media/content-justified.png "Screenshot of content justified text")</span></span>  
  
 <span data-ttu-id="a1e53-150">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-150">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-151">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-151">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignJustify"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-152">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-152">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignJustify"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-153">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-153">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-154">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-154">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-155">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-155">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-156">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-156">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-157">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-157">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-158">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-158">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-159">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-159">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-160">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-160">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignLeft">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignLeft As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignLeft { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-161">コンテンツの選択範囲を左揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-161">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> command, which requests that a selection of content be aligned left.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-162">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-162">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-163">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="L" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-163">The default key gesture for this command is <see langword="Ctrl" />+<see langword="L" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-164">このコマンドは、<xref:System.Windows.Documents.Paragraph>レベル。</span><span class="sxs-lookup"><span data-stu-id="a1e53-164">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="a1e53-165">このコマンドが呼び出される場合 (カレットが段落内にある空の選択範囲を含む)、段落内のコンテンツの部分的な選択で、要求した効果が段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-165">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="a1e53-166">このコマンドは、複数の段落にわたる選択範囲で呼び出される場合、効果は、選択範囲に含まれる各段落の内容全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-166">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="a1e53-167">次の図は、左揃えの内容の例を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-167">The following figure shows an example of left-aligned content.</span></span>  
  
 <span data-ttu-id="a1e53-168">![スクリーン ショット: 左の TextAlign プロパティ値](~/add/media/flowdoc-textalign-left.png "スクリーン ショット: 左の TextAlign プロパティ値")</span><span class="sxs-lookup"><span data-stu-id="a1e53-168">![Screenshot: TextAlign property value of Left](~/add/media/flowdoc-textalign-left.png "Screenshot: TextAlign property value of Left")</span></span>  
  
 <span data-ttu-id="a1e53-169">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-169">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-170">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-170">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignLeft"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-171">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-171">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignLeft"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-172">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-172">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-173">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-173">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-174">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-174">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-175">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-175">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-176">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-176">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-177">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-177">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-178">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-178">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-179">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-179">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignRight">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignRight As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignRight { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-180">コンテンツの選択範囲を右揃えで配置するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-180">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> command, which requests that a selection of content be aligned right.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-181">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-181">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-182">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="R" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-182">The default key gesture for this command is <see langword="Ctrl" />+<see langword="R" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-183">このコマンドは、<xref:System.Windows.Documents.Paragraph>レベル。</span><span class="sxs-lookup"><span data-stu-id="a1e53-183">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="a1e53-184">このコマンドが呼び出される場合 (カレットが段落内にある空の選択範囲を含む)、段落内のコンテンツの部分的な選択で、要求した効果が段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-184">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="a1e53-185">このコマンドは、複数の段落にわたる選択範囲で呼び出される場合、効果は、選択範囲に含まれる各段落の内容全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-185">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="a1e53-186">次の図は、右揃えの内容の例を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-186">The following figure shows an example of right-aligned content.</span></span>  
  
 <span data-ttu-id="a1e53-187">![スクリーン ショット: 右の TextAlign 値の](~/add/media/flowdoc-textalign-right.png "スクリーン ショット: 右の TextAlign 値")</span><span class="sxs-lookup"><span data-stu-id="a1e53-187">![Screenshot: TextAlign value of Right](~/add/media/flowdoc-textalign-right.png "Screenshot: TextAlign value of Right")</span></span>  
  
 <span data-ttu-id="a1e53-188">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-188">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-189">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-189">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignRight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-190">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-190">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignRight"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-191">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-191">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-192">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-192">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-193">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-193">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-194">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-194">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-195">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-195">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-196">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-196">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-197">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-197">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-198">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-198">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="Backspace">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Backspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Backspace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Backspace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Backspace As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Backspace { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-199">BackSpace を現在の位置または現在の選択範囲に対して入力するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-199">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> command, which requests that a backspace be entered at the current position or over the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-200">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-200">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-201">このコマンドの既定のキー ジェスチャは、<see langword="Backspace" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-201">The default key gesture for this command is <see langword="Backspace" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-202">空の選択範囲で呼び出されると、このコマンドは、カーソルの直前に、文字または段落区切り記号を削除します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-202">When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret.</span></span> <span data-ttu-id="a1e53-203">空でない選択時に呼び出されると、このコマンドは、選択範囲を削除します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-203">When invoked on a non-empty selection, this command deletes the selection.</span></span>  
  
 <span data-ttu-id="a1e53-204">このコマンドでは、このコマンドが呼び出された後ですぐに同じ場所に挿入されたコンテンツの削除された選択範囲の書式設定が保持されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-204">This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  <span data-ttu-id="a1e53-205">比較して、<xref:System.Windows.Documents.EditingCommands.Delete%2A>コマンドでは、以前の書式設定は保持されません。</span><span class="sxs-lookup"><span data-stu-id="a1e53-205">Contrast with the <xref:System.Windows.Documents.EditingCommands.Delete%2A> command, which does not retain previous formatting.</span></span>  
  
 <span data-ttu-id="a1e53-206">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-206">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-207">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-207">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Backspace"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-208">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-208">XAML Attribute Usage</span></span>  
  
```  
<object property="Backspace"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-209">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-209">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-210">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-210">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-211">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-211">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-212">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-212">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-213">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-213">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-214">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-214">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-215">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-215">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-216">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-216">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrectSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand CorrectSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrectSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ CorrectSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-217">現在の位置にあるスペル ミスの単語を修正するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-217">Represents the <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> command, which requests that any misspelled word at the current position be corrected.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-218">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-218">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-219">このコマンドには、既定のキー ジェスチャはありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-219">This command has no default key gesture.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-220">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-220">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_CorrectSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-221">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-221">XAML Attribute Usage</span></span>  
  
```  
<object property="CorrectSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-222">現在の選択範囲のフォント サイズを 1 ポイント縮小するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-222">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> command, which requests that the font size for the current selection be decreased by 1 point.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-223">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-223">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-224">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="OemOpenBrackets" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-224">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemOpenBrackets" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-225">このコマンドは、カーソルが単語内にある空の選択範囲で呼び出される場合、単語全体にコマンドを適用する選択範囲は自動的に展開します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-225">If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="a1e53-226">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-226">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-227">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-227">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-228">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-228">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-229">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-229">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-230">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-230">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-231">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-231">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-232">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-232">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-233">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-233">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-234">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-234">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-235">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-235">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-236">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-236">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-237">現在の段落のインデントを 1 タブ位置分減らすよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-237">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> command, which requests that indentation for the current paragraph be decreased by one tab stop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-238">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-238">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-239">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> + <see langword="Shift" /> +<see langword="T" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-239">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="T" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-240">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-240">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-241">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-241">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a1e53-242">このコマンドを持たないテキスト要素には影響しない限り、<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>テキスト要素のプロパティに設定されて`true`です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-242">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-243">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-243">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-244">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-244">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-245">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-245">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-246">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-246">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-247">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-247">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-248">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-248">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-249">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-249">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-250">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-250">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-251">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-251">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Delete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Delete" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Delete As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Delete { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-252">現在の選択範囲を削除するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-252">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> command, which requests that the current selection be deleted.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-253">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-253">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-254">このコマンドの既定のキー ジェスチャは、<see langword="Delete" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-254">The default key gesture for this command is <see langword="Delete" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-255">このコマンドは、削除された選択範囲の書式設定を破棄します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-255">This command discards any formatting from the deleted selection.</span></span>  <span data-ttu-id="a1e53-256">比較して、<xref:System.Windows.Documents.EditingCommands.Backspace%2A>コマンドをすぐにこのコマンドが呼び出された後に同じ場所に挿入するコンテンツの削除された選択範囲の書式設定を保持します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-256">Contrast with the <xref:System.Windows.Documents.EditingCommands.Backspace%2A> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  
  
 <span data-ttu-id="a1e53-257">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-257">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-258">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-258">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Delete"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-259">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-259">XAML Attribute Usage</span></span>  
  
```  
<object property="Delete"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-260">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-260">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-261">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-261">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-262">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-262">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-263">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-263">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-264">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-264">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-265">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-265">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-266">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-266">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-267">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-267">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNextWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeleteNextWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeleteNextWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeleteNextWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-268">現在の位置から見て次の単語を削除するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-268">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> command, which requests that the next word (relative to a current position) be deleted.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-269">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-269">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-270">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="Delete" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-270">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Delete" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-271">カレットが単語内にある場合は、現在の位置と、単語の末尾の間の残りの部分は削除されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-271">If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.</span></span>  
  
 <span data-ttu-id="a1e53-272">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-272">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-273">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-273">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeleteNextWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-274">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-274">XAML Attribute Usage</span></span>  
  
```  
<object property="DeleteNextWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-275">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-275">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-276">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-276">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-277">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-277">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-278">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-278">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-279">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-279">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-280">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-280">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-281">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-281">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-282">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-282">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="DeletePreviousWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeletePreviousWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeletePreviousWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeletePreviousWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-283">現在の位置から見て前の単語を削除するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-283">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> command, which requests that the previous word (relative to a current position) be deleted.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-284">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-284">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-285">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="Backspace" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-285">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Backspace" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-286">カレットが単語内にある場合は、現在の位置と、単語の先頭の間の残りの部分は削除されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-286">If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.</span></span>  
  
 <span data-ttu-id="a1e53-287">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-287">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-288">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-288">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeletePreviousWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-289">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-289">XAML Attribute Usage</span></span>  
  
```  
<object property="DeletePreviousWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-290">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-290">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-291">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-291">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-292">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-292">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-293">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-293">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-294">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-294">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-295">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-295">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-296">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-296">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-297">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-297">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="EnterLineBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterLineBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterLineBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterLineBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-298">改行を現在の位置または現在の選択範囲に対して挿入するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-298">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> command, which requests that a line break be inserted at the current position or over the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-299">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-299">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-300">このコマンドの既定のキー ジェスチャは<see langword="Shift" /> +<see langword="Enter" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-300">The default key gesture for this command is <see langword="Shift" />+<see langword="Enter" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-301">などのフロー コンテンツをサポートするエディターの<xref:System.Windows.Controls.RichTextBox>、このコマンドの原因、<xref:System.Windows.Documents.LineBreak>に現在の位置に挿入される要素。</span><span class="sxs-lookup"><span data-stu-id="a1e53-301">For editors that support flow content, such as <xref:System.Windows.Controls.RichTextBox>, this command causes a <xref:System.Windows.Documents.LineBreak> element to be inserted at the current position.</span></span>  
  
 <span data-ttu-id="a1e53-302">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-302">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-303">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>と<xref:System.Windows.Controls.TextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-303">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_EnterLineBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-304">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-304">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterLineBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-305">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-305">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-306">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-306">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-307">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-307">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-308">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-308">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-309">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-309">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-310">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-310">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-311">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-311">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-312">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-312">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      </Docs>
    </Member>
    <Member MemberName="EnterParagraphBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterParagraphBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterParagraphBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterParagraphBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-313">段落区切りを現在の位置または現在の選択範囲を超えた位置に挿入するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-313">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> command, which requests that a paragraph break be inserted at the current position or over the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-314">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-314">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-315">このコマンドの既定のキー ジェスチャは、<see langword="Enter" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-315">The default key gesture for this command is <see langword="Enter" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-316">このコマンドは、ユーザーが ENTER キーを押すことに相当します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-316">This command is equivalent to the user pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="a1e53-317">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-317">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-318">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>と<xref:System.Windows.Controls.TextBox>(ときに、<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>プロパティは`true`)。</span><span class="sxs-lookup"><span data-stu-id="a1e53-318">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property is `true`).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a1e53-319">このコマンドを持たないテキスト要素には影響しない限り、<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>テキスト要素のプロパティに設定されて`true`です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-319">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_EnterParagraphBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-320">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-320">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterParagraphBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-321">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-321">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-322">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-322">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-323">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-323">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-324">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-324">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-325">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-325">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-326">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-326">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-327">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-327">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-328">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-328">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IgnoreSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IgnoreSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IgnoreSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-329">現在の位置または現在の選択範囲内にあるスペル ミスの単語をすべて無視するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-329">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-330">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-330">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-331">このコマンドには、既定のキー ジェスチャはありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-331">This command has no default key gesture.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-332">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-332">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_IgnoreSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-333">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-333">XAML Attribute Usage</span></span>  
  
```  
<object property="IgnoreSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-334">現在の選択範囲のフォント サイズを 1 ポイント拡大するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-334">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> command, which requests that the font size for the current selection be increased by 1 point.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-335">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-335">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-336">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="OemCloseBrackets" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-336">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemCloseBrackets" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-337">カレットが単語内にある空の選択範囲に対してこのコマンドが呼び出される場合は、選択範囲が単語全体にコマンドを適用する拡張されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-337">If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="a1e53-338">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-338">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-339">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-339">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-340">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-340">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-341">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-341">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-342">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-342">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-343">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-343">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-344">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-344">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-345">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-345">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-346">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-346">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-347">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-347">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-348">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-348">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-349">現在の段落のインデントを 1 タブ位置分増やすよう要求する <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-349">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> command, which requests that indentation for the current paragraph be increased by one tab stop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-350">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-350">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-351">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="T" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-351">The default key gesture for this command is <see langword="Ctrl" />+<see langword="T" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-352">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-352">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-353">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-353">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a1e53-354">このコマンドを持たないテキスト要素には影響しない限り、<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>テキスト要素のプロパティに設定されて`true`です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-354">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-355">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-355">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-356">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-356">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-357">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-357">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-358">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-358">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-359">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-359">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-360">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-360">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-361">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-361">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-362">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-362">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-363">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-363">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-364">キャレットを 1 行下に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-364">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> command, which requests that the caret move down by one line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-365">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-365">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-366">このコマンドの既定のキー ジェスチャは、<see langword="Down" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-366">The default key gesture for this command is <see langword="Down" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-367">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-367">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-368">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>と<xref:System.Windows.Controls.TextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-368">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-369">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-369">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-370">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-370">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-371">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-371">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-372">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-372">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-373">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-373">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-374">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-374">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-375">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-375">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-376">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-376">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-377">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-377">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-378">キャレットを 1 ページ下に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-378">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> command, which requests that the caret move down by one page.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-379">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-379">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-380">このコマンドの既定のキー ジェスチャは、<see langword="PageDown" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-380">The default key gesture for this command is <see langword="PageDown" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-381">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-381">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-382">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>と<xref:System.Windows.Controls.TextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-382">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-383">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-383">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-384">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-384">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-385">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-385">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-386">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-386">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-387">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-387">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-388">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-388">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-389">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-389">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-390">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-390">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-391">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-391">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-392">キャレットを 1 段落下に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-392">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> command, which requests that the caret move down by one paragraph.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-393">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-393">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-394">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="Down" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-394">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Down" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-395">このコマンドは、次の段落の先頭のキャレットを配置します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-395">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="a1e53-396">このコマンドと同様に動作<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>で呼び出されると、<xref:System.Windows.Controls.TextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-396">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="a1e53-397">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-397">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-398">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>と<xref:System.Windows.Controls.TextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-398">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-399">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-399">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-400">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-400">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-401">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-401">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-402">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-402">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-403">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-403">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-404">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-404">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-405">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-405">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-406">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-406">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-407">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-407">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-408">キャレットを 1 文字左に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-408">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> command, which requests that the caret move one character left.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-409">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-409">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-410">このコマンドの既定のキー ジェスチャは、<see langword="Left" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-410">The default key gesture for this command is <see langword="Left" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-411">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-411">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-412">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-412">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-413">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-413">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-414">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-414">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-415">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-415">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-416">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-416">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-417">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-417">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-418">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-418">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-419">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-419">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-420">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-420">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-421">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-421">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-422">キャレットを 1 語左に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-422">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> command, which requests that the caret move one word left.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-423">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-423">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-424">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="Left" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-424">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Left" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-425">カレットが単語内にある場合は、このコマンドは、その単語の先頭にカーソルを移動します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-425">If the caret is within a word, this command moves the caret to the beginning of that word.</span></span>  <span data-ttu-id="a1e53-426">それ以外の場合、このコマンドは、前の単語の先頭にカーソルを移動します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-426">Otherwise, this command moves the caret to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="a1e53-427">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-427">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-428">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-428">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-429">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-429">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-430">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-430">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-431">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-431">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-432">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-432">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-433">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-433">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-434">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-434">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-435">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-435">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-436">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-436">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-437">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-437">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-438">キャレットを 1 文字右に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-438">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> command, which requests that the caret move one character right.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-439">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-439">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-440">このコマンドの既定のキー ジェスチャは、<see langword="Right" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-440">The default key gesture for this command is <see langword="Right" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-441">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-441">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-442">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-442">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-443">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-443">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-444">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-444">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-445">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-445">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-446">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-446">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-447">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-447">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-448">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-448">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-449">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-449">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-450">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-450">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-451">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-451">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-452">キャレットを 1 語右に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-452">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> command, which requests that the caret move right by one word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-453">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-453">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-454">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="Right" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-454">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Right" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-455">カレットが単語内にある場合は、このコマンドは、その単語の末尾にカーソルを移動します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-455">If the caret is within a word, this command moves the caret to the end of that word.</span></span>  <span data-ttu-id="a1e53-456">それ以外の場合、このコマンドは、次の単語の先頭にカーソルを移動します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-456">Otherwise, this command moves the caret to the beginning of the next word.</span></span>  
  
 <span data-ttu-id="a1e53-457">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-457">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-458">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-458">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-459">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-459">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-460">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-460">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-461">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-461">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-462">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-462">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-463">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-463">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-464">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-464">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-465">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-465">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-466">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-466">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-467">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-467">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-468">キャレットをコンテンツの末尾に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-468">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> command, which requests that the caret move to the very end of content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-469">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-469">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-470">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="End" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-470">The default key gesture for this command is <see langword="Ctrl" />+<see langword="End" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-471">A*テキスト コンテナー*最終的なコンテンツの境界を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-471">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="a1e53-472"><xref:System.Windows.Controls.TextBlock> <xref:System.Windows.Documents.FlowDocument>テキスト コンテナーの例を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-472"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="a1e53-473">テキスト コンテナーにまとめて格納されたコンテンツと呼びます、*ドキュメント*です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-473">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="a1e53-474">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-474">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-475">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-475">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-476">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-476">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-477">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-477">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-478">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-478">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-479">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-479">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-480">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-480">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-481">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-481">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-482">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-482">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-483">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-483">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-484">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-484">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-485">キャレットをコンテンツの先頭に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-485">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> command, which requests that the caret move to the very beginning of content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-486">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-486">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-487">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="Home" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-487">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Home" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-488">A*テキスト コンテナー*最終的なコンテンツの境界を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-488">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="a1e53-489"><xref:System.Windows.Controls.TextBlock> <xref:System.Windows.Documents.FlowDocument>テキスト コンテナーの例を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-489"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="a1e53-490">テキスト コンテナーにまとめて格納されたコンテンツと呼びます、*ドキュメント*です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-490">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="a1e53-491">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-491">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-492">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-492">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-493">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-493">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-494">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-494">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-495">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-495">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-496">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-496">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-497">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-497">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-498">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-498">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-499">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-499">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-500">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-500">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-501">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-501">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-502">キャレットを現在の行の末尾に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-502">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> command, which requests that the caret move to the end of the current line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-503">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-503">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-504">このコマンドの既定のキー ジェスチャは、<see langword="End" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-504">The default key gesture for this command is <see langword="End" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-505">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-505">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-506">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-506">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-507">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-507">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-508">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-508">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-509">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-509">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-510">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-510">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-511">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-511">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-512">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-512">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-513">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-513">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-514">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-514">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-515">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-515">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-516">キャレットを現在の行の先頭に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-516">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> command, which requests that the caret move to the beginning of the current line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-517">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-517">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-518">このコマンドの既定のキー ジェスチャは、<see langword="Home" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-518">The default key gesture for this command is <see langword="Home" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-519">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-519">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-520">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-520">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-521">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-521">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-522">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-522">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-523">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-523">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-524">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-524">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-525">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-525">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-526">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-526">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-527">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-527">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-528">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-528">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-529">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-529">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-530">キャレットを 1 行上に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-530">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> command, which requests that the caret move up by one line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-531">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-531">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-532">このコマンドの既定のキー ジェスチャは、<see langword="Up" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-532">The default key gesture for this command is <see langword="Up" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-533">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-533">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-534">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>と<xref:System.Windows.Controls.TextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-534">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-535">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-535">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-536">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-536">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-537">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-537">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-538">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-538">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-539">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-539">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-540">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-540">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-541">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-541">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-542">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-542">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-543">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-543">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-544">キャレットを 1 ページ上に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-544">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> command, which requests that the caret move up by one page.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-545">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-545">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-546">このコマンドの既定のキー ジェスチャは、<see langword="PageUp" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-546">The default key gesture for this command is <see langword="PageUp" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-547">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-547">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-548">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>と<xref:System.Windows.Controls.TextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-548">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-549">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-549">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-550">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-550">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-551">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-551">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-552">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-552">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-553">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-553">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-554">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-554">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-555">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-555">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-556">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-556">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-557">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-557">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-558">キャレットを 1 段落上に移動するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-558">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> command, which requests that the caret move up by one paragraph.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-559">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-559">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-560">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="Up" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-560">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Up" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-561">このコマンドは、次の段落の先頭のキャレットを配置します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-561">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="a1e53-562">このコマンドと同様に動作<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>で呼び出されると、<xref:System.Windows.Controls.TextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-562">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="a1e53-563">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-563">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-564">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>と<xref:System.Windows.Controls.TextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-564">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-565">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-565">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-566">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-566">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-567">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-567">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-568">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-568">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-569">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-569">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-570">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-570">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-571">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-571">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-572">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-572">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-573">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-573">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-574">現在の選択範囲を 1 行下に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-574">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> command, which requests that the current selection be expanded down by one line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-575">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-575">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-576">このコマンドの既定のキー ジェスチャは<see langword="Shift" /> +<see langword="Down" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-576">The default key gesture for this command is <see langword="Shift" />+<see langword="Down" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-577">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-577">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-578">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-578">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-579">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-579">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-580">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-580">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-581">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-581">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-582">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-582">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-583">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-583">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-584">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-584">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-585">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-585">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-586">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-586">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-587">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-587">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-588">現在の選択範囲を 1 ページ下に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-588">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> command, which requests that the current selection be expanded down by one page.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-589">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-589">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-590">このコマンドの既定のキー ジェスチャは<see langword="Shift" /> +<see langword="PageDown" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-590">The default key gesture for this command is <see langword="Shift" />+<see langword="PageDown" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-591">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-591">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-592">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-592">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-593">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-593">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-594">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-594">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-595">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-595">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-596">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-596">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-597">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-597">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-598">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-598">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-599">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-599">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-600">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-600">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-601">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-601">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-602">現在の選択範囲を 1 段落下に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-602">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> command, which requests that the current selection be expanded down by one paragraph.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-603">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-603">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-604">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> + <see langword="Shift" /> +<see langword="Down" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-604">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Down" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-605">このコマンドは、次の段落の先頭に、選択範囲を展開します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-605">This command expands the selection to the beginning of the next paragraph.</span></span>  <span data-ttu-id="a1e53-606">それ以外の場合、このコマンドは、現在の段落の末尾に、選択範囲を展開します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-606">Otherwise, this command expands the selection to the end of the current paragraph.</span></span>  <span data-ttu-id="a1e53-607">拡張された選択範囲には、段落区切り記号、段落の末尾をマークするが含まれています。</span><span class="sxs-lookup"><span data-stu-id="a1e53-607">The expanded selection includes the paragraph break that marks the end of the paragraph.</span></span>  
  
 <span data-ttu-id="a1e53-608">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-608">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-609">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-609">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-610">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-610">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-611">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-611">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-612">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-612">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-613">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-613">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-614">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-614">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-615">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-615">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-616">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-616">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-617">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-617">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-618">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-618">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-619">現在の選択範囲を 1 文字左に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-619">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> command, which requests that the current selection be expanded left by one character.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-620">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-620">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-621">このコマンドの既定のキー ジェスチャは<see langword="Shift" /> +<see langword="Left" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-621">The default key gesture for this command is <see langword="Shift" />+<see langword="Left" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-622">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-622">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-623">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-623">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-624">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-624">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-625">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-625">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-626">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-626">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-627">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-627">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-628">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-628">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-629">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-629">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-630">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-630">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-631">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-631">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-632">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-632">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-633">現在の選択範囲を 1 語左に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-633">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> command, which requests that the current selection be expanded left by one word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-634">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-634">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-635">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> + <see langword="Shift" /> +<see langword="Left" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-635">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Left" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-636">カレットが単語内にある場合は、このコマンドは、選択範囲をその単語の先頭まで拡張します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-636">If the caret is within a word, this command expands the selection to the beginning of that word.</span></span>  <span data-ttu-id="a1e53-637">それ以外の場合、このコマンドは、前の単語の先頭に、選択範囲を展開します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-637">Otherwise, this command expands the selection to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="a1e53-638">拡張された選択範囲では、単語区切り記号は含まれません。</span><span class="sxs-lookup"><span data-stu-id="a1e53-638">The expanded selection does not include the word delimiter.</span></span>  <span data-ttu-id="a1e53-639">比較して<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>、拡張された選択範囲で単語区切り記号が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-639">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, which does include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="a1e53-640">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-640">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-641">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-641">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-642">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-642">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-643">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-643">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-644">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-644">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-645">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-645">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-646">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-646">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-647">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-647">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-648">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-648">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-649">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-649">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-650">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-650">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-651">現在の選択範囲を 1 文字右に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-651">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> command, which requests that the current selection be expanded right by one character.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-652">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-652">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-653">このコマンドの既定のキー ジェスチャは<see langword="Shift" /> +<see langword="Right" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-653">The default key gesture for this command is <see langword="Shift" />+<see langword="Right" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-654">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-654">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-655">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-655">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-656">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-656">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-657">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-657">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-658">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-658">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-659">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-659">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-660">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-660">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-661">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-661">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-662">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-662">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-663">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-663">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-664">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-664">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-665">現在の選択範囲を 1 語右に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-665">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> command, which requests that the current selection be expanded right by one word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-666">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-666">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-667">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> + <see langword="Shift" /> +<see langword="Right" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-667">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Right" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-668">カレットが単語内にある場合は、このコマンドは、選択範囲をその単語の末尾まで拡張します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-668">If the caret is within a word, this command expands the selection to the end of that word.</span></span>  <span data-ttu-id="a1e53-669">それ以外の場合、このコマンドは、次の単語の末尾に、選択範囲を展開します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-669">Otherwise, this command expands the selection to the end of the next word.</span></span>  
  
 <span data-ttu-id="a1e53-670">拡張された選択範囲には、単語区切り記号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="a1e53-670">The expanded selection includes the word delimiter.</span></span>  <span data-ttu-id="a1e53-671">比較して<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>拡張された選択範囲で単語区切り記号は含まれませんがします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-671">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> which does not include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="a1e53-672">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-672">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-673">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-673">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-674">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-674">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-675">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-675">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-676">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-676">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-677">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-677">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-678">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-678">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-679">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-679">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-680">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-680">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-681">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-681">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-682">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-682">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-683">現在の選択範囲をコンテンツの末尾まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-683">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> command, which requests that the current selection be expanded to the very end of content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-684">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-684">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-685">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> + <see langword="Shift" /> +<see langword="End" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-685">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="End" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-686">A*テキスト コンテナー*最終的なコンテンツの境界を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-686">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="a1e53-687"><xref:System.Windows.Controls.TextBlock> <xref:System.Windows.Documents.FlowDocument>テキスト コンテナーの例を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-687"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="a1e53-688">テキスト コンテナーにまとめて格納されたコンテンツと呼びます、*ドキュメント*です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-688">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="a1e53-689">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-689">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-690">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-690">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-691">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-691">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-692">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-692">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-693">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-693">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-694">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-694">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-695">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-695">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-696">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-696">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-697">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-697">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-698">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-698">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-699">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-699">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-700">現在の選択範囲をコンテンツの先頭まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-700">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> command, which requests that the current selection be expanded to the very beginning of content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-701">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-701">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-702">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> + <see langword="Shift" /> +<see langword="Home" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-702">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Home" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-703">A*テキスト コンテナー*最終的なコンテンツの境界を形成する要素です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-703">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="a1e53-704"><xref:System.Windows.Controls.TextBlock> <xref:System.Windows.Documents.FlowDocument>テキスト コンテナーの例を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-704"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="a1e53-705">テキスト コンテナーにまとめて格納されたコンテンツと呼びます、*ドキュメント*です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-705">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="a1e53-706">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-706">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-707">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-707">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-708">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-708">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-709">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-709">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-710">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-710">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-711">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-711">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-712">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-712">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-713">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-713">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-714">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-714">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-715">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-715">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-716">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-716">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-717">現在の選択範囲を現在の行の末尾まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-717">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> command, which requests that the current selection be expanded to the end of the current line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-718">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-718">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-719">このコマンドの既定のキー ジェスチャは<see langword="Shift" /> +<see langword="End" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-719">The default key gesture for this command is <see langword="Shift" />+<see langword="End" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-720">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-720">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-721">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-721">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-722">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-722">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-723">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-723">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-724">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-724">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-725">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-725">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-726">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-726">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-727">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-727">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-728">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-728">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-729">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-729">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-730">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-730">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-731">現在の選択範囲を現在の行の先頭まで拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-731">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> command, which requests that the current selection be expanded to the beginning of the current line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-732">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-732">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-733">このコマンドの既定のキー ジェスチャは<see langword="Shift" /> +<see langword="Home" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-733">The default key gesture for this command is <see langword="Shift" />+<see langword="Home" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-734">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-734">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-735">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-735">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-736">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-736">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-737">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-737">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-738">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-738">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-739">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-739">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-740">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-740">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-741">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-741">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-742">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-742">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-743">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-743">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-744">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-744">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-745">現在の選択範囲を 1 行上に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-745">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> command, which requests that the current selection be expanded up by one line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-746">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-746">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-747">このコマンドの既定のキー ジェスチャは<see langword="Shift" /> +<see langword="Up" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-747">The default key gesture for this command is <see langword="Shift" />+<see langword="Up" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-748">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-748">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-749">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-749">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-750">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-750">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-751">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-751">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-752">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-752">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-753">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-753">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-754">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-754">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-755">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-755">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-756">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-756">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-757">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-757">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-758">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-758">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-759">現在の選択範囲を 1 ページ上に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-759">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> command, which requests that the current selection be expanded  up by one page.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-760">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-760">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-761">このコマンドの既定のキー ジェスチャは<see langword="Shift" /> +<see langword="PageUp" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-761">The default key gesture for this command is <see langword="Shift" />+<see langword="PageUp" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-762">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-762">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-763">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-763">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-764">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-764">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-765">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-765">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-766">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-766">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-767">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-767">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-768">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-768">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-769">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-769">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-770">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-770">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-771">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-771">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-772">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-772">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-773">現在の選択範囲を 1 段落上に拡張するよう要求する <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-773">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> command, which requests that the current selection be expanded up by one paragraph.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-774">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-774">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-775">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> + <see langword="Shift" /> +<see langword="Up" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-775">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Up" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-776">キャレットは、段落の先頭には、このコマンドは、前の段落の先頭に、選択範囲を展開します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-776">If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.</span></span>  <span data-ttu-id="a1e53-777">それ以外の場合、このコマンドは、現在の段落の先頭に、選択範囲を展開します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-777">Otherwise, this command expands the selection to the beginning of the current paragraph.</span></span>  
  
 <span data-ttu-id="a1e53-778">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-778">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-779">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-779">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-780">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-780">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-781">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-781">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-782">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-782">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-783">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-783">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-784">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-784">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-785">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-785">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-786">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-786">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-787">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-787">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-788">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-788">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="TabBackward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabBackward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabBackward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabBackward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabBackward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-789">
            <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-789">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-790">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-790">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-791">このコマンドの既定のキー ジェスチャは<see langword="Shift" /> +<see langword="Tab" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-791">The default key gesture for this command is <see langword="Shift" />+<see langword="Tab" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-792">このコマンドの動作は、現在の選択に依存します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-792">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="a1e53-793">選択範囲が空の場合は、このコマンドは<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-793">If the selection is non-empty, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>.</span></span> <span data-ttu-id="a1e53-794">キャレットのテーブルのセルにある場合 (によって表される、<xref:System.Windows.Documents.TableCell>要素)、このコマンドは、前のセルにカーソルを移動します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-794">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the previous cell.</span></span> <span data-ttu-id="a1e53-795">それ以外の場合、タブ文字は、現在の位置に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-795">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="a1e53-796">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-796">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-797">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>と<xref:System.Windows.Controls.TextBox>(ときに、<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>プロパティは`true`)。</span><span class="sxs-lookup"><span data-stu-id="a1e53-797">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabBackward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-798">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-798">XAML Attribute Usage</span></span>  
  
```  
<object property="TabBackward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-799">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-799">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-800">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-800">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-801">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-801">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-802">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-802">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-803">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-803">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-804">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-804">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-805">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-805">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-806">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-806">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabForward" />
      </Docs>
    </Member>
    <Member MemberName="TabForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabForward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabForward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabForward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-807">
            <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-807">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-808">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-808">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-809">このコマンドの既定のキー ジェスチャは、<see langword="Tab" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-809">The default key gesture for this command is <see langword="Tab" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-810">このコマンドの動作は、現在の選択に依存します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-810">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="a1e53-811">選択範囲が空でないか、このコマンドと同じ場合は、選択内容が空、段落の先頭には、現在のキャレット位置、<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-811">If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>.</span></span> <span data-ttu-id="a1e53-812">キャレットのテーブルのセルにある場合 (によって表される、<xref:System.Windows.Documents.TableCell>要素)、このコマンドは、次のセルにカーソルを移動します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-812">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the next cell.</span></span> <span data-ttu-id="a1e53-813">キャレットは、テーブルの最後のセルには、このコマンドは、キャレットを新しい行の最初のセルに置いた状態で、テーブルに追加される新しい行を実行します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-813">If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.</span></span>  <span data-ttu-id="a1e53-814">それ以外の場合、タブ文字は、現在の位置に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-814">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="a1e53-815">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-815">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-816">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>と<xref:System.Windows.Controls.TextBox>(ときに、<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>プロパティは`true`)。</span><span class="sxs-lookup"><span data-stu-id="a1e53-816">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabForward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-817">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-817">XAML Attribute Usage</span></span>  
  
```  
<object property="TabForward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-818">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-818">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-819">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-819">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-820">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-820">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-821">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-821">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-822">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-822">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-823">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-823">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-824">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-824">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-825">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-825">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabBackward" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBold">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBold" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBold As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBold { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-826">現在の選択範囲に対して <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> の書式設定を切り替えるよう要求する <see cref="T:System.Windows.Documents.Bold" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-826">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> command, which requests that <see cref="T:System.Windows.Documents.Bold" /> formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-827">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-827">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-828">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="B" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-828">The default key gesture for this command is <see langword="Ctrl" />+<see langword="B" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-829">場合、<xref:System.Windows.FontWeight>の範囲内では、現在の選択範囲の<xref:System.Windows.FontWeights.Thin%2A>に<xref:System.Windows.FontWeights.SemiBold%2A>、<xref:System.Windows.FontWeights.Bold%2A>は現在の選択範囲に適用します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-829">If the <xref:System.Windows.FontWeight> for the current selection is in the range from <xref:System.Windows.FontWeights.Thin%2A> to <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> is applied to the current selection.</span></span>  <span data-ttu-id="a1e53-830">それ以外の場合、<xref:System.Windows.FontWeights.Normal%2A>を適用します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-830">Otherwise, <xref:System.Windows.FontWeights.Normal%2A> is applied.</span></span>  <span data-ttu-id="a1e53-831">比較の一覧については<xref:System.Windows.FontWeight>値を参照してください<xref:System.Windows.FontWeights>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-831">For a comparative list of <xref:System.Windows.FontWeight> values, see <xref:System.Windows.FontWeights>.</span></span>  
  
 <span data-ttu-id="a1e53-832">選択範囲が空で、カーソルが単語内にあるがときに、単語全体を含める選択範囲が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-832">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="a1e53-833">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-833">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-834">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-834">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBold"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-835">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-835">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBold"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-836">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-836">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-837">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-837">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-838">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-838">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-839">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-839">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-840">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-840">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-841">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-841">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-842">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-842">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-843">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-843">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBullets">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBullets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBullets As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBullets { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-844">現在の選択範囲に対して順序の付いていないリスト (箇条書きリスト) の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-844">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-845">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-845">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-846">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> + <see langword="Shift" /> +<see langword="L" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-846">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="L" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-847">このコマンドは、<xref:System.Windows.Documents.Paragraph>レベル。</span><span class="sxs-lookup"><span data-stu-id="a1e53-847">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="a1e53-848">このコマンドが呼び出される場合 (カレットが段落内にある空の選択範囲を含む)、段落内のコンテンツの部分的な選択で、要求した効果が段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-848">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="a1e53-849">このコマンドは、複数の段落にわたる選択範囲で呼び出される場合、効果は、選択範囲に含まれる各段落の内容全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-849">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="a1e53-850">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-850">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-851">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-851">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBullets"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-852">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-852">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBullets"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-853">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-853">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-854">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-854">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-855">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-855">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-856">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-856">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-857">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-857">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-858">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-858">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-859">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-859">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-860">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-860">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      </Docs>
    </Member>
    <Member MemberName="ToggleInsert">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleInsert" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleInsert As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleInsert { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-861">挿入と上書きの入力モードを切り替える <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-861">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> command, which toggles the typing mode between Insert and Overtype.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-862">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-862">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-863">このコマンドの既定のキー ジェスチャは、<see langword="Insert" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-863">The default key gesture for this command is <see langword="Insert" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-864">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-864">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-865">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>、 <xref:System.Windows.Controls.TextBox>、および<xref:System.Windows.Controls.PasswordBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-865">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleInsert"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-866">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-866">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleInsert"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-867">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-867">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-868">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-868">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-869">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-869">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-870">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-870">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-871">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-871">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-872">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-872">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-873">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-873">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-874">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-874">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleItalic">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleItalic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleItalic As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleItalic { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-875">現在の選択範囲に対して <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> の書式設定を切り替えるよう要求する <see cref="T:System.Windows.Documents.Italic" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-875">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> command, which requests that <see cref="T:System.Windows.Documents.Italic" /> formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-876">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-876">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-877">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="I" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-877">The default key gesture for this command is <see langword="Ctrl" />+<see langword="I" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-878">場合、<xref:System.Windows.FontStyle>現在の選択範囲の<xref:System.Windows.FontStyles.Normal%2A>、<xref:System.Windows.FontStyles.Italic%2A>は現在の選択範囲に適用します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-878">If the <xref:System.Windows.FontStyle> for the current selection is <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> is applied to the current selection.</span></span>  <span data-ttu-id="a1e53-879">それ以外の場合、<xref:System.Windows.FontStyles.Normal%2A>を適用します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-879">Otherwise, <xref:System.Windows.FontStyles.Normal%2A> is applied.</span></span>  
  
 <span data-ttu-id="a1e53-880">選択範囲が空で、カーソルが単語内にあるがときに、単語全体を含める選択範囲が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-880">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="a1e53-881">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-881">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-882">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-882">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleItalic"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-883">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-883">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleItalic"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-884">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-884">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-885">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-885">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-886">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-886">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-887">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-887">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-888">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-888">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-889">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-889">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-890">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-890">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-891">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-891">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleNumbering">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleNumbering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleNumbering As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleNumbering { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-892">現在の選択範囲に対して順序付きリスト (番号付きリスト) の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-892">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-893">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-893">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-894">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> + <see langword="Shift" /> +<see langword="N" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-894">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="N" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-895">このコマンドは、<xref:System.Windows.Documents.Paragraph>レベル。</span><span class="sxs-lookup"><span data-stu-id="a1e53-895">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="a1e53-896">このコマンドが呼び出される場合 (カレットが段落内にある空の選択範囲を含む)、段落内のコンテンツの部分的な選択で、要求した効果が段落全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-896">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="a1e53-897">このコマンドは、複数の段落にわたる選択範囲で呼び出される場合、効果は、選択範囲に含まれる各段落の内容全体に適用されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-897">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="a1e53-898">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-898">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-899">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-899">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleNumbering"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-900">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-900">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleNumbering"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-901">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-901">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-902">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-902">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-903">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-903">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-904">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-904">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-905">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-905">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-906">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-906">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-907">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-907">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-908">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-908">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSubscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSubscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSubscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSubscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-909">現在の選択範囲に対して下付き文字の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-909">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> command, which requests that subscript formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-910">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-910">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-911">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="OemPlus" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-911">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemPlus" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-912">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-912">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSubscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-913">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-913">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSubscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-914">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-914">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-915">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-915">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-916">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-916">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-917">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-917">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-918">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-918">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-919">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-919">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-920">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-920">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-921">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-921">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSuperscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSuperscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSuperscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSuperscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-922">現在の選択範囲に対して上付き文字の書式設定を切り替えるよう要求する <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-922">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> command, which requests that superscript formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-923">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-923">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-924">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> + <see langword="Shift" /> +<see langword="OemPlus" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-924">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="OemPlus" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-925">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-925">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSuperscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-926">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-926">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSuperscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-927">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-927">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-928">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-928">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-929">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-929">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-930">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-930">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-931">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-931">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-932">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-932">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-933">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-933">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-934">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-934">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleUnderline">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleUnderline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleUnderline As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleUnderline { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e53-935">現在の選択範囲に対して <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> の書式設定を切り替えるよう要求する <see cref="T:System.Windows.Documents.Underline" /> コマンドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-935">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> command, which requests that <see cref="T:System.Windows.Documents.Underline" /> formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e53-936">要求されたコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-936">The requested command.</span>
          </span>
          <span data-ttu-id="a1e53-937">このコマンドの既定のキー ジェスチャは<see langword="Ctrl" /> +<see langword="U" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e53-937">The default key gesture for this command is <see langword="Ctrl" />+<see langword="U" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e53-938">選択範囲が空で、カーソルが単語内にあるがときに、単語全体を含める選択範囲が拡張されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-938">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="a1e53-939">必ずしも; 任意のオブジェクトでこのコマンドに応答する実際の実装がありません。多くの場合は、コマンドに応答する実装は、アプリケーション作成者の責任が。</span><span class="sxs-lookup"><span data-stu-id="a1e53-939">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="a1e53-940">このコマンドはネイティブにサポート<xref:System.Windows.Controls.RichTextBox>です。</span><span class="sxs-lookup"><span data-stu-id="a1e53-940">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleUnderline"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a1e53-941">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="a1e53-941">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleUnderline"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1e53-942">次の例では、コマンドをサポートするオブジェクトの編集のコマンドを呼び出す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-942">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="a1e53-943">この例で、<xref:System.Windows.Controls.RichTextBox>コマンド ターゲットとして機能します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-943">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="a1e53-944">注意してください<xref:System.Windows.Controls.RichTextBox>を実装する、<xref:System.Windows.IInputElement>インターフェイス (から継承された<xref:System.Windows.FrameworkElement>)、多くの編集コマンドに対するネイティブ サポートが含まれているとします。</span><span class="sxs-lookup"><span data-stu-id="a1e53-944">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-945">最初の引数、<xref:System.Windows.Input.RoutedCommand.Execute%2A>メソッドはコマンド パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a1e53-945">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="a1e53-946">ほとんどの編集コマンド、コマンド パラメーターを無視します。通常、このパラメーターは指定`null`コマンドを編集します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-946">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="a1e53-947">2 番目の引数は、コマンドをルーティングするオブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="a1e53-947">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="a1e53-948">このオブジェクトを実装する必要があります、<xref:System.Windows.IInputElement>インターフェイス、および指定したコマンドのハンドラーを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1e53-948">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="a1e53-949">一般に、コマンドには、コマンドを処理しないオブジェクトに対して呼び出されたときに無視されます。</span><span class="sxs-lookup"><span data-stu-id="a1e53-949">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
  </Members>
</Type>