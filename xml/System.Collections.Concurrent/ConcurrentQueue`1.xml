<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConcurrentQueue`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac592d93820173a88b490f4ddc7494e6c9e4d136c0c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92d93820173a88b490f4ddc7494e6c9e4d136c0c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>The type of the elements contained in the queue.</source>
          <target state="translated">キューに格納されている要素の型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>Represents a thread-safe first in-first out (FIFO) collection.</source>
          <target state="translated">スレッド セーフな先入れ先出し (FIFO) コレクションを表します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> interface starting with the <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>; in previous versions of the .NET Framework, the <ph id="ph4">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> class did not implement this interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> 実装する、<ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph>インターフェイスから始まる、<ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>以外の場合は、.NET Framework の以前のバージョンで、<ph id="ph4">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>クラスは、このインターフェイスを実装しませんでした。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> to enqueue and dequeue items:</source>
          <target state="translated">次の例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>エンキューする項目をデキューし、。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads.</source>
          <target state="translated">すべてのパブリックおよびプロテクト メンバー<ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>スレッド セーフでは、複数のスレッドから同時に使用される可能性があります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Collections.Concurrent.ConcurrentQueue`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements are copied to the new <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> に要素がコピーされたコレクション。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> class that contains elements copied from the specified collection</source>
          <target state="translated">指定したコレクションからコピーされた要素を格納する、<ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;paramref name="collection" /&gt;</ph> argument is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> 引数が null です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> からコピーされる要素のコピー先となる 1 次元の <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> には、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> elements to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> の要素を既存の 1 次元の <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> が null 参照 (Visual Basic では Nothing) です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -or- The number of elements in the source <ph id="ph3">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> is greater than the available space from <ph id="ph4">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;paramref name="array" /&gt;</ph> の長さ以上です。または、コピー元の <ph id="ph3">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> の要素数が、コピー先の <ph id="ph4">&lt;paramref name="index" /&gt;</ph> の <ph id="ph5">&lt;paramref name="array" /&gt;</ph> から最後までの領域を超えています。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> に格納されている要素の数を取得します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> に格納されている要素の数。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
          <source>For determining whether the collection contains any items, use of the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph> property is recommended rather than retrieving the number of items from the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph> property and comparing it to 0.</source>
          <target state="translated">すべての項目がコレクションに含まれているかどうかを決定するための使用、<ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph>プロパティが推奨項目の数を取得するのではなく、<ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph>プロパティおよび 0 と比較することです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
          <source>The object to add to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> の末尾に追加するオブジェクト。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
          <source>The value can be a null reference (Nothing in Visual Basic) for reference types.</source>
          <target state="translated">参照型の場合、この値は null 参照 (Visual Basic の場合は Nothing) でもかまいません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
          <source>Adds an object to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> の末尾にオブジェクトを追加します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> を反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>An enumerator for the contents of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> のコンテンツの列挙子。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>The enumeration represents a moment-in-time snapshot of the contents of the queue.</source>
          <target state="translated">この列挙体は、キューの内容の現在の時刻でスナップショットを表します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>It does not reflect any updates to the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.GetEnumerator%2A&gt;</ph> was called.</source>
          <target state="translated">後にコレクションに加えた変更は反映されません<ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.GetEnumerator%2A&gt;</ph>が呼び出されました。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>The enumerator is safe to use concurrently with reads from and writes to the queue.</source>
          <target state="translated">列挙子は、安全にからの読み取りと同時に使用し、キューに書き込みます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
          <source>The enumerator returns the collection elements in the order in which they were added, which is FIFO order (first-in, first-out).</source>
          <target state="translated">列挙子で追加された、FIFO (先入れ、先出し) の順序である順序でコレクションの要素を返します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> が空かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>true if the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> is empty; otherwise, false.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> が空の場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>For determining whether the collection contains any items, use of this property is recommended rather than retrieving the number of items from the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph> property and comparing it to 0.</source>
          <target state="translated">アイテムの数を取得するのではなく、このプロパティの使用は推奨されてコレクション項目が含まれているかどうかを決定するため、<ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A&gt;</ph>プロパティおよび 0 と比較することです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
          <source>However, as this collection is intended to be accessed concurrently, it may be the case that another thread will modify the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph> returns, thus invalidating the result.</source>
          <target state="translated">ただし、このコレクションに同時にアクセスして、予定どおりに場合があります別のスレッドの後にコレクションが変更されます<ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A&gt;</ph>を返します。 したがって、結果を無効にします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>The object to add to the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph> に追加するオブジェクト。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>The value can be a null reference (Nothing in Visual Basic) for reference types.</source>
          <target state="translated">参照型の場合、この値は null 参照 (Visual Basic の場合は Nothing) でもかまいません。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>Attempts to add an object to the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph> に対してオブジェクトの追加を試みます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>true if the object was added successfully; otherwise, false.</source>
          <target state="translated">オブジェクトが正常に追加された場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryAdd(`0)">
          <source>For <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, this operation will always add the object to the end of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> and return true.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>、この操作は、の末尾にオブジェクトを常に追加します。、<ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>し true を返します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>When this method returns, if the operation was successful, <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> contains the object removed.</source>
          <target state="translated">操作が正常に終了した場合は、このメソッドが返るときに、削除されたオブジェクトが <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> に含まれます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>If no object was available to be removed, the value is unspecified.</source>
          <target state="translated">削除できるオブジェクトがない場合、値は指定されません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>Attempts to remove and return an object from the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /&gt;</ph> からオブジェクトを削除して返そうと試みます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>true if an element was removed and returned succesfully; otherwise, false.</source>
          <target state="translated">要素が正常に削除されて返された場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&amp;lt;T&amp;gt;#TryTake(`0@)">
          <source>For <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, this operation will attempt to remove the object from the beginning of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>、この操作は、オブジェクトの先頭から削除しようとしています、<ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> からコピーされる要素のコピー先となる 1 次元の <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> には、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の要素を <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> にコピーします。コピーは特定の <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> のインデックスから開始されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> が null 参照 (Visual Basic では Nothing) です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> が多次元です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- <ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated">または、<ph id="ph1">&lt;paramref name="array" /&gt;</ph> に 0 から始まるインデックス番号がありません。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;paramref name="array" /&gt;</ph> -or- The number of elements in the source <ph id="ph3">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph4">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph5">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">-または- <ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;paramref name="array" /&gt;</ph> の長さ以上です。-または- コピー元の <ph id="ph3">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の要素数が、コピー先の <ph id="ph4">&lt;paramref name="index" /&gt;</ph> の <ph id="ph5">&lt;paramref name="array" /&gt;</ph> から最後までの領域を超えています。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or- The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">または、コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の型をコピー先の <ph id="ph2">&lt;paramref name="array" /&gt;</ph> の型に自動的にキャストすることはできません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized with the SyncRoot.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスが SyncRoot で同期されているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
          <source>true if access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized with the SyncRoot; otherwise, false.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスが SyncRoot で同期されている場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
          <source>For <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>, this property always returns false.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> の場合、このプロパティは常に false を返します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスを同期するために使用できるオブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>This property is not supported.</source>
          <target state="translated">このプロパティはサポートされていません。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>Returns null  (Nothing in Visual Basic).</source>
          <target state="translated">null (Visual Basic の場合は Nothing) を返します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
          <source>The SyncRoot property is not supported.</source>
          <target state="translated">SyncRoot プロパティはサポートされていません。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">コレクションを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">コレクションを反復処理するために使用できる <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
          <source>Copies the elements stored in the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> to a new array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> に格納されている要素を新しい配列にコピーします。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
          <source>A new array containing a snapshot of elements copied from the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> からコピーされた要素のスナップショットを格納する新しい配列。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>When this method returns, if the operation was successful, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains the object removed.</source>
          <target state="translated">操作が正常に終了した場合は、このメソッドが返るときに、削除されたオブジェクトが <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> に含まれます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If no object was available to be removed, the value is unspecified.</source>
          <target state="translated">削除できるオブジェクトがない場合、値は指定されません。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>Tries to remove and return the object at the beginning of the concurrent queue.</source>
          <target state="translated">同時実行キューの先頭にあるオブジェクトを削除して返そうと試みます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an element was removed and returned from the beginning of the <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の先頭から要素が正常に削除されて返された場合は <ph id="ph2">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> handles all synchronization internally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> すべての同期を内部的に処理します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If two threads call <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> at precisely the same moment, neither operation is blocked.</source>
          <target state="translated">2 つのスレッドの呼び出し場合<ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph>現時点では正確に同じ、どちらの操作がブロックされています。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>When a conflict is detected between two threads, one thread has to try again to retrieve the next element, and the synchronization is handled internally.</source>
          <target state="translated">2 つのスレッド間で競合が検出されると、1 つのスレッドは次の要素を取得する再試行し、同期が内部で処理されます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> tries to remove an element from the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> キューから要素を削除しようとしています。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If the method is successful, the item is removed and the method returns <ph id="ph1">`true`</ph>; otherwise, it returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">メソッドが成功した、項目が削除され、メソッドを返します<ph id="ph1">`true`</ph>、それ以外を返します<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>That happens atomically with respect to other operations on the queue.</source>
          <target state="translated">コレクションの発生をキューにその他の操作に関してはアトミックにします。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If the queue was populated with code such as <ph id="ph1">`q.Enqueue("a"); q.Enqueue("b"); q.Enqueue("c");`</ph> and two threads concurrently try to dequeue an element, one thread will dequeue <ph id="ph2">`a`</ph> and the other thread will dequeue <ph id="ph3">`b`</ph>.</source>
          <target state="translated">場合は、キューが設定されているコードなど<ph id="ph1">`q.Enqueue("a"); q.Enqueue("b"); q.Enqueue("c");`</ph>と要素をキューから削除する 2 つのスレッドが同時に実行してください、1 つのスレッドがデキュー<ph id="ph2">`a`</ph>およびその他のスレッドがデキュー<ph id="ph3">`b`</ph>です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>Both calls to <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph> will return <ph id="ph2">`true`</ph>, because they were both able to dequeue an element.</source>
          <target state="translated">呼び出しは両方とも<ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A&gt;</ph>戻ります<ph id="ph2">`true`</ph>は両方の要素をキューから削除することがあるため、します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
          <source>If each thread goes back to dequeue an additional element, one of the threads will dequeue <ph id="ph1">`c`</ph> and return <ph id="ph2">`true`</ph>, whereas the other thread will find the queue empty and will return <ph id="ph3">`false`</ph>.</source>
          <target state="translated">スレッドの 1 つデキューされますが、別の要素をデキューする各スレッドが戻る場合<ph id="ph1">`c`</ph>返す<ph id="ph2">`true`</ph>、他方のスレッドが空のキューを探しますが返されますが、<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
          <source>When this method returns, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains an object from the beginning of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> or an unspecified value if the operation failed.</source>
          <target state="translated">このメソッドが返るときに、<ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> の先頭にあるオブジェクトが <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> に含まれます。操作が失敗した場合、値は指定されません。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
          <source>Tries to return an object from the beginning of the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> without removing it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /&gt;</ph> の先頭にあるオブジェクトを削除せずに返そうと試みます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an object was returned successfully; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">オブジェクトが正常に返された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>