<Type Name="MutexSecurity" FullName="System.Security.AccessControl.MutexSecurity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8fca401f2cdcab98d79adc82ef9792e4adc6d88f" /><Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/12/2018" /><Meta Name="ms.locfileid" Value="49142289" /></Metadata><TypeSignature Language="C#" Value="public sealed class MutexSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MutexSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.MutexSecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MutexSecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class MutexSecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type MutexSecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>名前付きミューテックスの Windows アクセス制御セキュリティを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Security.AccessControl.MutexSecurity>オブジェクトを名前付きシステム ミュー テックスのアクセス権を指定およびもアクセス試行を監査する方法を指定します。 によって表される各アクセス規則と、規則で表される、ミュー テックスへのアクセス権を<xref:System.Security.AccessControl.MutexAccessRule>オブジェクト。 によって表される、各監査規則を<xref:System.Security.AccessControl.MutexAuditRule>オブジェクト。  
  
 これは図らずもをセキュリティ保護可能な各オブジェクトが最大で 1 つ随意アクセス制御リスト (DACL) をセキュリティで保護されたオブジェクトとで最もアクセスを指定する 1 つのシステム アクセス制御リスト (SACL) のアクセスを制御する、基になる Windows セキュリティ システム試行が監査されます。 DACL と SACL によっては、アクセスおよび監査ユーザーとグループを指定するアクセス制御エントリ (ACE) のリストが並べ替えられています。 A<xref:System.Security.AccessControl.MutexAccessRule>または<xref:System.Security.AccessControl.MutexAuditRule>オブジェクトは、1 つ以上の ACE を表すことができます。  
  
> [!NOTE]
>  A<xref:System.Threading.Mutex>オブジェクトは、ローカル ミュー テックスまたは名前付きシステム ミュー テックスを表すことができます。 Windows アクセス制御のセキュリティは、名前付きシステム ミュー テックスでのみ有効です。  
  
 <xref:System.Security.AccessControl.MutexSecurity>、 <xref:System.Security.AccessControl.MutexAccessRule>、および<xref:System.Security.AccessControl.MutexAuditRule>クラスは、Acl、Ace の実装の詳細を非表示にします。 17 個の異なる ACE 型と正しく維持するためのアクセス権の継承と反映の複雑さを無視できます。 これらのオブジェクトが、次の一般的なアクセス制御エラーを防ぐためにも設計されています。  
  
-   Null DACL のセキュリティ記述子を作成しています。 DACL を null 参照では、可能性のあるサービス拒否攻撃を作成、オブジェクトにアクセス規則を追加するすべてのユーザーを許可します。 新しい<xref:System.Security.AccessControl.MutexSecurity>オブジェクトは常にすべてのユーザーのすべてのアクセスを拒否する空の DACL で起動します。  
  
-   Ace の正規の順序に違反しています。 DACL の ACE リストが正規順序で維持されない場合ユーザーが誤ってアクセスが与えをセキュリティで保護されたオブジェクト。 たとえば、拒否されたアクセス権は必要があります許可されているアクセス権の前に常に表示されます。 <xref:System.Security.AccessControl.MutexSecurity> オブジェクトは、内部的に正しい順序を維持します。  
  
-   セキュリティ記述子フラグは、リソース マネージャーの管理だけ下にある必要がありますを操作します。  
  
-   ACE フラグの無効な組み合わせを作成します。  
  
-   継承された Ace を操作します。 継承と反映は、アクセスおよび監査規則に加えた変更に応じて、リソース マネージャーによって処理されます。  
  
-   Acl に無意味な Ace を挿入しています。  
  
 オブジェクトのセキュリティを .NET でサポートされていない唯一の機能は、アプリケーション開発者は、次などの大半を避ける必要がある危険なアクティビティ。  
  
-   通常、リソース マネージャーで実行される低レベルのタスク。  
  
-   追加または標準の順序を保持しない方法でアクセス制御エントリを削除します。  
  
 名前付きミュー テックスの Windows アクセス制御セキュリティを変更するには、使用、<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>を取得するメソッド、<xref:System.Security.AccessControl.MutexSecurity>オブジェクト。 追加し、ルールを削除するには、セキュリティ オブジェクトを変更し、<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>メソッドを再度アタッチします。  
  
> [!IMPORTANT]
>  加えた変更を<xref:System.Security.AccessControl.MutexSecurity>を呼び出すまでオブジェクトに名前付きミュー テックスのアクセス レベルは影響しません、<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>メソッドを名前付きミュー テックスに変更されたセキュリティ オブジェクトを割り当てます。  
  
 ミュー テックスの 1 つから別のアクセス制御セキュリティをコピーするには、使用、<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>を取得するメソッド、<xref:System.Security.AccessControl.MutexSecurity>最初のミュー テックスのアクセスおよび監査規則を表すオブジェクトし、を使用して、<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>メソッド、または、を受け取るコンストラクター<xref:System.Security.AccessControl.MutexSecurity>オブジェクト、2 つ目のミュー テックスにこれらのルールを割り当てる。  
  
 セキュリティ記述子定義言語 (SDDL) に投資してユーザーが使用できる、 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> 、名前付きミュー テックスのアクセス規則を設定するメソッドをおよび<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>SDDL 形式へのアクセス規則を表す文字列を取得するメソッド。 これは新規の開発は推奨されません。  
  
> [!NOTE]
>  Windows 98 または Windows Millennium Edition には、同期オブジェクトのセキュリティはサポートされていません。  
  
   
  
## Examples  
 次のコード例は、分離することを示します<xref:System.Security.AccessControl.AccessControlType.Allow>ルールと<xref:System.Security.AccessControl.AccessControlType.Deny>規則し、互換性のある規則の権限の組み合わせを示しています。 例は、作成、<xref:System.Security.AccessControl.MutexSecurity>オブジェクトが許可し、現在のユーザーのさまざまな権限を拒否する規則を追加し、ルールの結果のペアを表示します。 例では、現在のユーザーに対して新しい権限を許可し、新しい権限は、既存のマージされることを示す、結果を表示します<xref:System.Security.AccessControl.AccessControlType.Allow>ルール。  
  
> [!NOTE]
>  この例は、セキュリティ オブジェクトをアタッチできません、<xref:System.Threading.Mutex>オブジェクト。 セキュリティ オブジェクトをアタッチする例が記載<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>と<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.MutexAccessRule" />
    <altmember cref="T:System.Security.AccessControl.MutexAuditRule" />
    <altmember cref="T:System.Security.AccessControl.MutexRights" />
    <altmember cref="M:System.Threading.Mutex.GetAccessControl" />
    <altmember cref="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.MutexSecurity" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexSecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.MutexSecurity" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しい<xref:System.Security.AccessControl.MutexSecurity>オブジェクトは常にすべてのユーザーのすべてのアクセスを拒否する空の随意アクセス リスト (DACL) で始まります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このクラスは、Windows 98 および Windows Millennium Edition ではサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, includeSections As AccessControlSections)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexSecurity(System::String ^ name, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.MutexSecurity : string * System.Security.AccessControl.AccessControlSections -&gt; System.Security.AccessControl.MutexSecurity" Usage="new System.Security.AccessControl.MutexSecurity (name, includeSections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="name">アクセス制御セキュリティ規則の取得元となるシステム ミューテックスの名前。</param>
        <param name="includeSections">取得するセクションを指定する <see cref="T:System.Security.AccessControl.AccessControlSections" /> フラグの組み合わせ。</param>
        <summary>指定した名前を持つシステム ミューテックスのアクセス制御セキュリティ規則のセクションを指定して、<see cref="T:System.Security.AccessControl.MutexSecurity" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを使用すると、最初に作成せずに名前付きシステム ミュー テックスのアクセス制御セキュリティを取得、<xref:System.Threading.Mutex>オブジェクト。  
  
 名前付きシステム オブジェクトを使用する場合、十分に注意してください。 という名前のシステム オブジェクトがあるかどうかは`name`ミュー テックスでない、そのアクセス制御セキュリティを取得する可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定した名前のシステム オブジェクトがありません。</exception>
        <exception cref="T:System.NotSupportedException">このクラスは、Windows 98 および Windows Millennium Edition ではサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexSecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.MutexSecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.MutexSecurity" /> クラスでアクセス権を表すために使用する列挙体を取得します。</summary>
        <value><see cref="T:System.Type" /> 列挙体を表す <see cref="T:System.Security.AccessControl.MutexRights" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生するクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>プロパティと戻り値を使用してアクセス権を表す型。 配列または複数の種類のセキュリティ オブジェクトを含むコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な列挙型を判断します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="mutexSecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">規則の適用対象となるユーザーまたはグループを識別する <see cref="T:System.Security.Principal.IdentityReference" />。</param>
        <param name="accessMask">許可または拒否するアクセス権を指定し、整数にキャストされる <see cref="T:System.Security.AccessControl.MutexRights" /> 値のビットごとの組み合わせ。</param>
        <param name="isInherited">名前付きミューテックスには階層構造がないため何の効果もありません。</param>
        <param name="inheritanceFlags">名前付きミューテックスには階層構造がないため何の効果もありません。</param>
        <param name="propagationFlags">名前付きミューテックスには階層構造がないため何の効果もありません。</param>
        <param name="type">アクセス権が許可されているかどうかを指定する <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</param>
        <summary>アクセス権、アクセス制御、およびフラグを指定して、指定したユーザーに対して新しいアクセス制御規則を作成します。</summary>
        <returns>指定したユーザーの指定した権限を表す <see cref="T:System.Security.AccessControl.MutexAccessRule" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アクセス制御規則を作成することをお勧めの方法は、のコンス トラクターを使用する、<xref:System.Security.AccessControl.MutexAccessRule>クラス。  
  
> [!NOTE]
>  継承と反映フラグは、名前付きミュー テックスの意味は、それらを指定することも可能です。 これは推奨されません、不必要に複雑になる、ルールのメンテナンスなどは互換性がありますそれ以外の場合の規則の組み合わせに干渉するためです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" />、または <paramref name="type" /> に無効な値が指定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identityReference" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="accessMask" /> が 0 です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identityReference" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexSecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.MutexSecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.MutexSecurity" /> クラスでアクセス規則を表すために使用する型を取得します。</summary>
        <value><see cref="T:System.Type" /> クラスを表す <see cref="T:System.Security.AccessControl.MutexAccessRule" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生するクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>プロパティと戻り値を使用して、アクセス規則を表す型。 配列または複数の種類のセキュリティ オブジェクトを含むコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトを使用する適切なアクセス規則の種類を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加するアクセス制御規則。</param>
        <summary>新しい規則をマージできる、一致するアクセス制御規則を検索します。 見つからない場合は、新しい規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.MutexSecurity.AddAccessRule%2A>メソッドと同じユーザーまたはグループと同じ規則を検索<xref:System.Security.AccessControl.AccessControlType>として`rule`します。 何も見つからない場合`rule`が追加されます。 照合ルールが見つからないかどうか、rights in`rule`は既存の規則にマージされます。  
  
   
  
## Examples  
 次のコード例は、分離することを示します<xref:System.Security.AccessControl.AccessControlType.Allow>ルールと<xref:System.Security.AccessControl.AccessControlType.Deny>規則し、互換性のある規則の権限の組み合わせを示しています。 例は、作成、<xref:System.Security.AccessControl.MutexSecurity>オブジェクトが許可し、現在のユーザーのさまざまな権限を拒否する規則を追加し、ルールの結果のペアを表示します。 例では、現在のユーザーに対して新しい権限を許可し、新しい権限は、既存のマージされることを示す、結果を表示します<xref:System.Security.AccessControl.AccessControlType.Allow>ルール。  
  
> [!NOTE]
>  この例は、セキュリティ オブジェクトをアタッチできません、<xref:System.Threading.Mutex>オブジェクト。 セキュリティ オブジェクトをアタッチする例が記載<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType><xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.Principal.IdentityNotMappedException"><paramref name="rule" /> は既知の ID にマップできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する監査規則。 この規則に指定されているユーザーに基づいて検索されます。</param>
        <summary>新しい規則をマージできる監査規則を検索します。 見つからない場合は、新しい規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.MutexSecurity.AddAuditRule%2A>メソッドと同じユーザーまたはグループとして使用してルールを検索`rule`します。 何も見つからない場合`rule`が追加されます。 照合ルールが見つからないかどうかでフラグ`rule`既存のルールにマージされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="mutexSecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">規則の適用対象となるユーザーまたはグループを識別する <see cref="T:System.Security.Principal.IdentityReference" />。</param>
        <param name="accessMask">監査するアクセス権を指定し、整数にキャストされる <see cref="T:System.Security.AccessControl.MutexRights" /> 値のビットごとの組み合わせ。</param>
        <param name="isInherited">名前付き待機ハンドルには階層構造がないため何の効果もありません。</param>
        <param name="inheritanceFlags">名前付き待機ハンドルには階層構造がないため何の効果もありません。</param>
        <param name="propagationFlags">名前付き待機ハンドルには階層構造がないため何の効果もありません。</param>
        <param name="flags">成功したアクセス、失敗したアクセス、またはその両方のいずれを監査するかを示す <see cref="T:System.Security.AccessControl.AuditFlags" /> 値のビットごとの組み合わせ。</param>
        <summary>規則の適用対象となるユーザー、監査するアクセス権、および監査規則を発生させる結果を指定して、新しい監査規則を作成します。</summary>
        <returns>指定したユーザーの指定した監査規則を表す <see cref="T:System.Security.AccessControl.MutexAuditRule" /> オブジェクト。 メソッドの戻り値は基本クラス <see cref="T:System.Security.AccessControl.AuditRule" /> です。ただし、この戻り値を派生クラスに安全にキャストできます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 監査規則を作成することをお勧めの方法は、のコンス トラクターを使用する、<xref:System.Security.AccessControl.MutexAuditRule>クラス。  
  
> [!NOTE]
>  継承と反映フラグは、名前付きミュー テックスの意味は、それらを指定することも可能です。 これは推奨されません、不必要に複雑になる、ルールのメンテナンスなどは互換性がありますそれ以外の場合の規則の組み合わせに干渉するためです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" />、または <paramref name="flags" /> に無効な値が指定されています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identityReference" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="accessMask" /> が 0 です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identityReference" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexSecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.MutexSecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.MutexSecurity" /> クラスで監査規則を表すために使用する型を取得します。</summary>
        <value><see cref="T:System.Type" /> クラスを表す <see cref="T:System.Security.AccessControl.MutexAuditRule" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生するクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>プロパティと戻り値を使用して監査権限を表す型。 配列または複数の種類のセキュリティ オブジェクトを含むコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトを使用する適切な監査規則の種類を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As MutexAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; bool" Usage="mutexSecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">検索対象のユーザーと <see cref="T:System.Security.AccessControl.MutexAccessRule" />、および一致する規則が見つかった場合にその規則と互換性のある継承フラグと反映フラグのセットを指定する <see cref="T:System.Security.AccessControl.AccessControlType" />。 互換性のある規則が見つかった場合にその規則から削除する権限を指定します。</param>
        <summary>指定した規則と同じユーザーと <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否)、および互換性のある継承フラグと反映フラグが指定されたアクセス制御規則が検索されます。このような規則が見つかると、指定したアクセス規則に含まれる権限がその規則から削除されます。</summary>
        <returns>互換性のある規則が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Security.AccessControl.MutexSecurity>同じユーザーと同じであるルールが検索<xref:System.Security.AccessControl.AccessControlType>として値`rule`します。 このようなルールが見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`します。 指定されたフラグと互換性のため、継承との互換性フラグをチェック照合ルールが見つかった場合`rule`します。 互換性のある規則が存在しないかどうか、操作はありませんし、メソッドを返します`false`します。 権限がで指定された互換性フラグを含む規則が見つかった場合`rule`、互換性のある規則から削除されます、メソッドを返します`true`します。 場合`rule`互換性のある規則に含まれていない権限を指定します、それらの権利に関する操作はありません。 現在から全体の規則が削除される場合、すべての権限は、互換性のある規則から削除されます、<xref:System.Security.AccessControl.MutexSecurity>オブジェクト。  
  
> [!IMPORTANT]
>  作成とことにより、ミュー テックスのアクセス規則の継承と反映フラグを指定できますが、<xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A>メソッドでは、これは推奨されません。 継承と反映しないにとって意味のある名前付きミュー テックス、およびアクセス ルールのメンテナンスをさらに複雑なようにします。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRule%2A>から権利を削除する方法、<xref:System.Security.AccessControl.AccessControlType.Allow>でルールを<xref:System.Security.AccessControl.MutexSecurity>オブジェクト。 内の他の権利も示しています`rule`は無視されます。  
  
 例は、作成、<xref:System.Security.AccessControl.MutexSecurity>オブジェクトし、を許可して、現在のユーザーのさまざまな権限を拒否する規則を追加します。 権限の許可を含める<xref:System.Security.AccessControl.MutexRights.Modify>、 <xref:System.Security.AccessControl.MutexRights.ReadPermissions>、および<xref:System.Security.AccessControl.MutexRights.Synchronize>します。 現在のユーザーの新しい規則を作成しなど<xref:System.Security.AccessControl.MutexRights.ReadPermissions>と<xref:System.Security.AccessControl.MutexRights.TakeOwnership>、および権限には、そのルールを使用、<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRule%2A>を削除する<xref:System.Security.AccessControl.MutexRights.ReadPermissions>から、<xref:System.Security.AccessControl.AccessControlType.Allow>規則、<xref:System.Security.AccessControl.MutexSecurity>オブジェクト。 余分な<xref:System.Security.AccessControl.MutexRights.TakeOwnership>で右`rule`は無視されます。  
  
> [!NOTE]
>  この例は、セキュリティ オブジェクトをアタッチできません、<xref:System.Threading.Mutex>オブジェクト。 セキュリティ オブジェクトをアタッチする例が記載<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>と<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">検索対象のユーザーと <see cref="T:System.Security.AccessControl.MutexAccessRule" /> を指定する <see cref="T:System.Security.AccessControl.AccessControlType" />。 この規則によって指定された権限はすべて無視されます。</param>
        <summary>指定した規則と同じユーザーおよび同じ <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否) が指定されたアクセス制御規則をすべて検索し、一致する規則が見つかった場合は、その規則を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Security.AccessControl.MutexSecurity>オブジェクトを含む、同じユーザーと同じ規則が検索<xref:System.Security.AccessControl.AccessControlType>として値`rule`します。 によって指定された権限`rule`この検索を実行する場合は無視されます。 照合ルールが見つからない場合、アクションは行われません。  
  
   
  
## Examples  
 コード例を次に示します、<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll%2A>メソッドは、ユーザーに一致するすべての規則を削除および<xref:System.Security.AccessControl.AccessControlType>権限は無視されます。  
  
 例は、作成、<xref:System.Security.AccessControl.MutexSecurity>オブジェクト、許可し、現在のユーザーのさまざまな権限を拒否する規則を追加しますおよびに追加の権利をマージし、<xref:System.Security.AccessControl.AccessControlType.Allow>ルール。 所有権の現在のユーザーは、その規則を使用して、削除する新しいルールを作成し、<xref:System.Security.AccessControl.AccessControlType.Allow>からルール、<xref:System.Security.AccessControl.MutexSecurity>オブジェクト。  
  
> [!NOTE]
>  この例は、セキュリティ オブジェクトをアタッチできません、<xref:System.Threading.Mutex>オブジェクト。 セキュリティ オブジェクトをアタッチする例が記載<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>と<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">削除する <see cref="T:System.Security.AccessControl.MutexAccessRule" />。</param>
        <summary>指定した規則に正確に一致するアクセス制御規則を検索し、見つかった場合は、その規則を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完全に一致する場合にのみ、ルールが削除`rule`フラグを含むすべての詳細。 その他の規則と同じユーザーと<xref:System.Security.AccessControl.AccessControlType>は影響しません。  
  
> [!IMPORTANT]
>  ルールを表す 1 つまたは複数基になるアクセス制御エントリ (ACE) とこれらのエントリが分割またはユーザーのアクセスのセキュリティ規則を変更するときに、必要に応じて組み合わせます。 そのため、ルールが存在しなく、形式が追加されたときに、その場合、<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A>方法はそれを削除することはできません。  
  
   
  
## Examples  
 コード例を次に示します、<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A>メソッドは、ルールを削除するには完全に一致するを必要とし、許可し、権限を拒否する規則は、互いに独立しています。  
  
 例は、作成、<xref:System.Security.AccessControl.MutexSecurity>オブジェクト、許可し、現在のユーザーのさまざまな権限を拒否する規則を追加しますおよびに追加の権利をマージし、<xref:System.Security.AccessControl.AccessControlType.Allow>アクセス規則。 渡します元<xref:System.Security.AccessControl.AccessControlType.Allow>の規則を<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A>メソッド、および何が削除されたことを示す、結果が表示されます。 例では、一致する規則を作成、<xref:System.Security.AccessControl.AccessControlType.Allow>規則、<xref:System.Security.AccessControl.MutexSecurity>オブジェクト、正常に使用して、<xref:System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific%2A>メソッド規則を削除します。  
  
> [!NOTE]
>  この例は、セキュリティ オブジェクトをアタッチできません、<xref:System.Threading.Mutex>オブジェクト。 セキュリティ オブジェクトをアタッチする例が記載<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>と<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As MutexAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.MutexAuditRule -&gt; bool" Usage="mutexSecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">検索対象のユーザー、および一致する規則がある場合にその規則と互換性のある継承フラグと反映フラグのセットを指定する <see cref="T:System.Security.AccessControl.MutexAuditRule" />。 互換性のある規則が見つかった場合にその規則から削除する権限を指定します。</param>
        <summary>指定した規則と同じユーザー、および互換性のある継承フラグと反映フラグが指定された監査制御規則が検索されます。互換性のある規則が見つかると、指定した規則に含まれる権限がその規則から削除されます。</summary>
        <returns>互換性のある規則が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Security.AccessControl.MutexSecurity>と同じユーザーを含む監査規則の検索は`rule`します。 このようなルールが見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`します。 指定されたフラグと互換性のため、継承との互換性フラグをチェック照合ルールが見つかった場合`rule`します。 互換性のある規則が存在しないかどうか、操作はありませんし、メソッドを返します`false`します。 権限がで指定された互換性フラグを含む規則が見つかった場合`rule`、互換性のある規則から削除されます、メソッドを返します`true`します。 場合`rule`互換性のある規則に含まれていない権限を指定します、それらの権利に関する操作はありません。 現在から全体の規則が削除される場合、すべての権限は、互換性のある規則から削除されます、<xref:System.Security.AccessControl.MutexSecurity>オブジェクト。  
  
> [!IMPORTANT]
>  作成とことにより、ミュー テックスの監査規則の継承と反映フラグを指定できますが、<xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A>メソッドでは、これは推奨されません。 継承と反映しないにとって意味のある名前付きミュー テックス、および監査規則の保守をさらに複雑なようにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">検索対象のユーザーを指定する <see cref="T:System.Security.AccessControl.MutexAuditRule" />。 この規則によって指定された権限はすべて無視されます。</param>
        <summary>指定した規則と同じユーザーが設定されているすべての監査規則を検索し、見つかった場合はそれらの規則を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Security.AccessControl.MutexSecurity>と同じユーザーの監査規則が検索`rule`します。 によって指定された権限`rule`この検索を実行する場合は無視されます。 すべての照合ルールが削除されます。 照合ルールが見つからない場合、アクションは行われません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">削除する <see cref="T:System.Security.AccessControl.MutexAuditRule" />。</param>
        <summary>指定した規則に正確に一致する監査規則を検索し、見つかった場合は、その規則を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完全に一致する場合にのみ、ルールが削除`rule`フラグを含むすべての詳細。 同じユーザーの場合は、その他の監査規則には影響しません。  
  
> [!IMPORTANT]
>  ルールを表す 1 つまたは複数基になるアクセス制御エントリ (ACE) とこれらのエントリが分割またはユーザーのセキュリティの監査規則を変更するときに、必要に応じて組み合わせます。 そのため、ルールが存在しなく、形式が追加されたときに、その場合、<xref:System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific%2A>方法はそれを削除することはできません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.MutexAccessRule" />。 この規則で指定されたユーザーによって、この規則を追加する前に削除する規則が判断されます。</param>
        <summary><see cref="T:System.Security.AccessControl.AccessControlType" /> に関係なく、指定した規則と同じユーザーが指定されたすべてのアクセス制御規則を削除し、指定した規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが指定されたルールに一致するアクセス規則がない場合`rule`が追加されます。  
  
   
  
## Examples  
 次のコード例に示す方法、<xref:System.Security.AccessControl.MutexSecurity.ResetAccessRule%2A>メソッドは、一致する指定された規則に一致するユーザーのすべての規則を置き換えます。  
  
 例は、作成、<xref:System.Security.AccessControl.MutexSecurity>オブジェクトし、を許可して、現在のユーザーのさまざまな権限を拒否する規則を追加します。 により、現在のユーザーのフル コントロールを使用して新しいルールを作成し、<xref:System.Security.AccessControl.MutexSecurity.ResetAccessRule%2A>メソッドを新しい規則の両方の既存の規則を置き換えます。  
  
> [!NOTE]
>  この例は、セキュリティ オブジェクトをアタッチできません、<xref:System.Threading.Mutex>オブジェクト。 セキュリティ オブジェクトをアタッチする例が記載<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>と<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.MutexAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As MutexAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::MutexAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.MutexAccessRule -&gt; unit" Usage="mutexSecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.MutexAccessRule" />。 この規則のユーザーと <see cref="T:System.Security.AccessControl.AccessControlType" /> によって、この規則を追加する前に削除する規則が判断されます。</param>
        <summary>指定した規則と同じユーザーおよび同じ <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否) が指定されたすべてのアクセス制御規則を削除し、指定した規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたルールがある場合<xref:System.Security.AccessControl.AccessControlType.Allow>、このメソッドの効果は、すべてを削除する<xref:System.Security.AccessControl.AccessControlType.Allow>指定されたルールに置き換えて、指定したユーザーの規則。 指定されたルールがある場合<xref:System.Security.AccessControl.AccessControlType.Deny>すべて、<xref:System.Security.AccessControl.AccessControlType.Deny>指定したユーザーの規則は、指定されたルールに置き換えられます。  
  
 規則がないユーザーの場合と<xref:System.Security.AccessControl.AccessControlType>指定の規則と一致`rule`が追加されます。  
  
   
  
## Examples  
 次のコード例に示す方法、<xref:System.Security.AccessControl.MutexSecurity.SetAccessRule%2A>メソッドは、ユーザーの両方に一致するすべての規則を削除、<xref:System.Security.AccessControl.AccessControlType>の`rule`に置き換えられます`rule`します。  
  
 例は、作成、<xref:System.Security.AccessControl.MutexSecurity>オブジェクトし、を許可して、現在のユーザーのさまざまな権限を拒否する規則を追加します。 により、現在のユーザーのフル コントロールを使用して新しいルールを作成し、<xref:System.Security.AccessControl.MutexSecurity.SetAccessRule%2A>既存のメソッドが新しいルールとルールを許可します。 アクセスを拒否する規則が影響を受けません。  
  
> [!NOTE]
>  この例は、セキュリティ オブジェクトをアタッチできません、<xref:System.Threading.Mutex>オブジェクト。 セキュリティ オブジェクトをアタッチする例が記載<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType>と<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.MutexAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As MutexAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::MutexAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.MutexAuditRule -&gt; unit" Usage="mutexSecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.MutexAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.MutexAuditRule" />。 この規則で指定されたユーザーによって、この規則を追加する前に削除する規則が判断されます。</param>
        <summary><see cref="T:System.Security.AccessControl.AuditFlags" /> 値に関係なく、指定した規則と同じユーザーが指定されたすべての監査規則を削除し、指定した規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが指定されたルールに一致する監査規則がない場合`rule`が追加されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>