<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RegistrySecurity.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e52f3b248c05ba047d59c24d923733a12bfa7839.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e52f3b248c05ba047d59c24d923733a12bfa7839</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Represents the Windows access control security for a registry key.</source>
          <target state="translated">レジストリ キーの Windows アクセス制御セキュリティを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>A <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object specifies access rights for a registry key, and also specifies how access attempts are audited.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトが、レジストリ キーのアクセス権を指定しも アクセスの試行を監査する方法を指定します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Access rights to the registry key are expressed as rules, with each access rule represented by a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> object.</source>
          <target state="translated">レジストリ キーへのアクセス権がによって表される各アクセス規則と、規則で表される、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Each auditing rule is represented by a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> object.</source>
          <target state="translated">によって表される各監査規則、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited.</source>
          <target state="translated">これには、セキュリティ保護可能なオブジェクトごとに最大で 1 つ随意アクセス制御リスト (DACL) に最大で 1 つシステム アクセス制御リスト (SACL) を指定するアクセス試行を監査する、セキュリティで保護されたオブジェクトとのアクセスを制御する、基になる Windows セキュリティ システムがミラー化します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups.</source>
          <target state="translated">DACL および SACL は、アクセスおよび監査のユーザーとグループを指定するアクセス制御エントリ (ACE) の一覧を並べ替えられています。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>A <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> object might represent more than one ACE.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>または<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph>オブジェクトは、1 つ以上の ACE を表す場合があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Windows access control security can only be applied to registry keys.</source>
          <target state="translated">Windows のアクセス制御セキュリティは、レジストリ キーにのみ適用できます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>It cannot be applied to individual key/value pairs stored in a key.</source>
          <target state="translated">キーに格納されている個別のキー/値ペアを適用することはできません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>, and <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> classes hide the implementation details of ACLs and ACEs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>、 <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>、および<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph>クラスは、Acl や Ace の実装の詳細を非表示にします。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights.</source>
          <target state="translated">これらによって、17 個の異なる ACE 型との継承とアクセス権の伝達を正しく維持するための複雑さの制約を無視できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>These objects are also designed to prevent the following common access control errors:</source>
          <target state="translated">これらのオブジェクトは、次の一般的なアクセス制御エラーを防ぐためにも設計されています。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Creating a security descriptor with a null DACL.</source>
          <target state="translated">Null DACL のセキュリティ記述子を作成しています。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack.</source>
          <target state="translated">DACL を null 参照では、可能性のあるサービス拒否攻撃を作成する、オブジェクトへのアクセス ルールを追加するすべてのユーザーを許可します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>A new <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object always starts with an empty DACL, which denies all access for all users.</source>
          <target state="translated">新しい<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトは常にすべてのユーザーのすべてのアクセスを拒否する空の DACL で起動します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Violating the canonical ordering of ACEs.</source>
          <target state="translated">Ace の正規の順序に違反します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object.</source>
          <target state="translated">DACL の ACE リストが正規の順序で維持されない場合ユーザー誤ってを付与するアクセス セキュリティで保護されたオブジェクト。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>For example, denied access rights must always appear before allowed access rights.</source>
          <target state="translated">たとえば、拒否されたアクセス権は必要があります許可されるアクセス権の前に常に表示されます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> objects maintain the correct order internally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> オブジェクトは、内部的に正しい順序を維持します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Manipulating security descriptor flags, which should be under resource manager control only.</source>
          <target state="translated">操作に使用するセキュリティ記述子のフラグ、リソース マネージャーの制御だけである必要があります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Creating invalid combinations of ACE flags.</source>
          <target state="translated">ACE フラグの無効な組み合わせを作成します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Manipulating inherited ACEs.</source>
          <target state="translated">継承された Ace を操作します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.</source>
          <target state="translated">継承と伝達は、アクセスおよび監査規則に対して行った変更への応答で、リソース マネージャーによって処理されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Inserting meaningless ACEs into ACLs.</source>
          <target state="translated">Acl に無意味な Ace を挿入します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:</source>
          <target state="translated">.NET セキュリティ オブジェクトでサポートされていませんのみの機能は、次のようなアプリケーションの開発者の過半数によって避ける必要がある危険なアクティビティが。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Low-level tasks that are normally performed by the resource manager.</source>
          <target state="translated">通常、リソース マネージャーで実行される低レベルのタスクです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Adding or removing access control entries in ways that do not maintain the canonical ordering.</source>
          <target state="translated">追加または正規の順序を保持しない方法でアクセス制御エントリを削除します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>To modify Windows access control security for a registry key, use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to get the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">レジストリ キーの Windows アクセス制御セキュリティを変更するには、使用、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>取得するメソッド、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Modify the security object by adding and removing rules, and then use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to reattach it.</source>
          <target state="translated">追加し、ルールを削除して、セキュリティ オブジェクトを変更し、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>に再接続します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Changes you make to a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object do not affect the access levels of the registry key until you call the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to assign the altered security object to the registry key.</source>
          <target state="translated">変更を加える、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトには影響しません、レジストリ キーのアクセス レベルが呼び出されるまで、<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>レジストリ キーには、変更されたセキュリティ オブジェクトを割り当てる方法です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>To copy access control security from one registry key to another, use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object representing the access and audit rules for the first registry key, and then use the <ph id="ph3">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to assign those rules to the second registry key.</source>
          <target state="translated">1 つのレジストリ キーから別のアクセス制御セキュリティをコピーするには、使用、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>取得するメソッド、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>最初のレジストリ キーのアクセスおよび監査規則を表すオブジェクトをクリックして、 <ph id="ph3">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> 2 番目のレジストリ キーにこれらの規則を割り当てる方法です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>You can also assign the rules to a second registry key with an <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType&gt;</ph> method that takes a <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object parameter.</source>
          <target state="translated">規則を 2 番目のレジストリ キーを割り当てることも、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType&gt;</ph>を受け取るメソッド、<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクト パラメーターです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Users with an investment in the security descriptor definition language (SDDL) can use the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt;</ph> method to set access rules for a registry key, and the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt;</ph> method to obtain a string that represents the access rules in SDDL format.</source>
          <target state="translated">セキュリティ記述子定義言語 (SDDL) で、初期投資をユーザーが使用できる、<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt;</ph>レジストリ キーのアクセス規則を設定するメソッドと<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt;</ph>SDDL 形式でのアクセス規則を表す文字列を取得するメソッド。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>This is not recommended for new development.</source>
          <target state="translated">これは、説明は、新規の開発は推奨されません。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>This section contains two code examples.</source>
          <target state="translated">このセクションには、2 つのコード例が含まれています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The first example shows how compatible rules merge when added and removed, and the second shows how inheritance and propagation flags affect the addition and deletion of rules.</source>
          <target state="translated">最初の例は追加、削除、ときに、互換性のあるルール マージし、2 番目に示すの追加と削除の規則の継承と伝達のフラグの影響します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Example 1</source>
          <target state="translated">例 1</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method removes rights from a compatible rule, and how the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> method merges rights with compatible rules.</source>
          <target state="translated">次のコード例に示す方法、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>メソッドは、互換性のある規則からの権利を削除方法、および<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph>メソッドは、互換性のあるルールに権限をマージします。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object and adds a rule that allows the current user <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType&gt;</ph> rights.</source>
          <target state="translated">例は、作成、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトし、現在のユーザーを許可する規則を追加<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType&gt;</ph>権限です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The example then creates a rule that grants the user <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType&gt;</ph>, with the same inheritance and propagation rights as the first rule, and uses the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method to remove this new rule from the <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">ユーザーを許可するルールを作成し<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType&gt;</ph>同じ継承および使用して最初のルールと伝達の権限を指定して、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>からこの新しいルールを削除する方法、<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> is a constituent of <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>, so it is removed from the compatible rule.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> 構成要素は、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>のため、互換性のある規則から削除されます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The rules in the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object are displayed, showing the remaining constituents of <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>.</source>
          <target state="translated">内のルール、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトが表示されの残りの構成要素を示す<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The example code then calls the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> method to merge the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> right back into the rule in the <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">コード例は、呼び出し、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph>にマージするメソッド、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph>内のルールに戻す右、<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">この例では、セキュリティ オブジェクトはアタッチされません、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The second example in this section attaches a security object, and so do the examples in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このセクションでは、2 番目の例は、セキュリティ オブジェクトをアタッチし、例は<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Example 2</source>
          <target state="translated">例 2</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The following code example demonstrates access rules with inheritance and propagation.</source>
          <target state="translated">次のコード例では、継承や伝達を行うアクセス規則を示します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, then creates and adds two rules that have the <ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> flag.</source>
          <target state="translated">例は、作成、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトを作成し、持つ 2 つの規則を追加、、<ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The first rule has no propagation flags, while the second has <ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>.</source>
          <target state="translated">最初の規則には伝達フラグがありません、2 つ目があるときに<ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph>と<ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The program displays the rules in the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, and then uses the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object to create a subkey.</source>
          <target state="translated">プログラムは、表示内のルール、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクト、および、使用、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>サブキーを作成するオブジェクト。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>The program creates a child subkey and a grandchild subkey, then displays the security for each subkey.</source>
          <target state="translated">プログラムは、子サブキーと孫サブキーを作成し、各サブキーのセキュリティを表示します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistrySecurity">
          <source>Finally, the program deletes the test keys.</source>
          <target state="translated">最後に、プログラムは、テスト キーを削除します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> class with default values.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> クラスの新しいインスタンスを既定値で初期化します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.#ctor">
          <source>A new <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</source>
          <target state="translated">新しい<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトは常に空の随意アクセス リスト (DACL)、すべてのユーザーのすべてのアクセスを拒否するで起動します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRightType">
          <source>Gets the enumeration type that the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> class uses to represent access rights.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> クラスでアクセス権を表すために使用する列挙型を取得します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRightType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 列挙体を表す <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRightType">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A&gt;</ph> property and return the type they use to represent access rights.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph>クラスのオーバーライド、<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A&gt;</ph>プロパティと戻り値のアクセス権を表すために使用する型。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRightType">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</source>
          <target state="translated">配列または複数の種類のセキュリティ オブジェクトを格納するコレクションを操作するときは、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な列挙型を判断します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph> that identifies the user or group the rule applies to.</source>
          <target state="translated">規則の適用対象となるユーザーまたはグループを識別する <ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> values specifying the access rights to allow or deny, cast to an integer.</source>
          <target state="translated">許可または拒否するアクセス権を指定し、整数にキャストされる <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> 値のビットごとの組み合わせ。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A Boolean value specifying whether the rule is inherited.</source>
          <target state="translated">規則が継承されるかどうかを示すブール値。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> values specifying how the rule is inherited by subkeys.</source>
          <target state="translated">サブキーによって規則を継承する方法を示す <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> 値のビットごとの組み合わせ。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> values that modify the way the rule is inherited by subkeys.</source>
          <target state="translated">サブキーによって規則を継承する方法を変更する <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> 値のビットごとの組み合わせ。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Meaningless if the value of <bpt id="p1">&lt;c&gt;</bpt>inheritanceFlags<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.InheritanceFlags.None" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>inheritanceFlags<ept id="p1">&lt;/c&gt;</ept> の値が <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.InheritanceFlags.None" /&gt;</ph> の場合、無効です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> values specifying whether the rights are allowed or denied.</source>
          <target state="translated">アクセス権が許可されているかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 値の 1 つ。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</source>
          <target state="translated">アクセス権、アクセス制御、およびフラグを指定して、指定したユーザーに対して新しいアクセス制御規則を作成します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> object representing the specified rights for the specified user.</source>
          <target state="translated">指定したユーザーの指定した権限を表す <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The recommended way to create access control rules is to use the constructors of the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> class.</source>
          <target state="translated">アクセス制御規則を作成することをお勧めはのコンス トラクターを使用する、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Although you can specify the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph> flag, there is no point in doing so.</source>
          <target state="translated">指定できますが、<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph>フラグは、これにはポイントがないです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>For the purposes of access control, the name/value pairs in a subkey are not separate objects.</source>
          <target state="translated">アクセス制御のため、サブキーの名前と値のペアは別個のオブジェクト</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The access rights to name/value pairs are controlled by the rights of the subkey.</source>
          <target state="translated">名前/値のペアにアクセス権は、サブキーの権限によって制御されます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag.</source>
          <target state="translated">さらに、すべてのサブキーがコンテナーであるため (つまり、ことが含まれているその他のサブキーには) を受けない、<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Finally, specifying the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</source>
          <target state="translated">最後に、指定する、<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph>互換性のあるルールの通常の組み合わせに支障があるためにフラグが、ルールのメンテナンスに不必要に複雑にできます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>, <ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="type" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>、<ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>、<ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph>、または <ph id="ph4">&lt;paramref name="type" /&gt;</ph> に無効な値が指定されています。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> が 0 です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is neither of type <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>, nor of a type such as <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> that can be converted to type <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> 型ではなく、<ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> 型に変換できる <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> などの型でもありません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType">
          <source>Gets the type that the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> class uses to represent access rules.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> クラスでアクセス規則を表すために使用する型を取得します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> クラスを表す <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A&gt;</ph> property and return the type they use to represent access rules.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph>クラスのオーバーライド、<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A&gt;</ph>プロパティと戻り値のアクセス規則を表すために使用する型。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</source>
          <target state="translated">配列または複数の種類のセキュリティ オブジェクトを格納するコレクションを操作するときは、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切なアクセス ルールの種類を決定します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The access control rule to add.</source>
          <target state="translated">追加するアクセス制御規則。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Searches for a matching access control with which the new rule can be merged.</source>
          <target state="translated">新しい規則をマージできる、一致するアクセス制御を検索します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If none are found, adds the new rule.</source>
          <target state="translated">見つからない場合は、新しい規則を追加します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> method searches for rules with the same user or group and the same <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> as <ph id="ph3">`rule`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph>メソッドは、同じユーザーまたはグループと同じ規則を検索<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>として<ph id="ph3">`rule`</ph>です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If none are found, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">見つからない場合は、<ph id="ph1">`rule`</ph>を追加します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If a matching rule is found, the rights in <ph id="ph1">`rule`</ph> are merged with the existing rule.</source>
          <target state="translated">照合ルールが見つからないかどうかは、rights in<ph id="ph1">`rule`</ph>既存の規則とマージされます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Rules cannot be merged if they have different inheritance flags.</source>
          <target state="translated">別の継承フラグが設定されている場合は、ルールをマージすることはできません。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>For example, if a user is allowed read access with no inheritance flags, and <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> is used to add a rule giving the user write access with inheritance for subkeys (<ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph>), the two rules cannot be merged.</source>
          <target state="translated">たとえば、ユーザーには、継承フラグなしで読み取りアクセスが許可された場合と<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph>サブキーの継承を持つユーザーの書き込みアクセスを許可規則を追加するために使用 (<ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph>)、2 つのルールをマージすることはできません。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Rules with different <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> values are never merged.</source>
          <target state="translated">異なるルール<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>値はマージされません。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Rules express rights in the most economical way.</source>
          <target state="translated">ルールは、最も経済的な方法で権限を高速です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>For example, if a user has <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.QueryValues&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.Notify&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistryRights.ReadPermissions&gt;</ph> rights, and you add a rule allowing <ph id="ph4">&lt;xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys&gt;</ph> rights, the user has all the constituent parts of <ph id="ph5">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph> rights.</source>
          <target state="translated">たとえば、ユーザーが持っている場合<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.QueryValues&gt;</ph>、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.Notify&gt;</ph>と<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistryRights.ReadPermissions&gt;</ph>権限、および、許可する規則を追加<ph id="ph4">&lt;xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys&gt;</ph>権限、ユーザーがすべてを構成する各部<ph id="ph5">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>権限です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If you query the user's rights, you will see a rule containing <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph> rights.</source>
          <target state="translated">ユーザーの権限をクエリする場合が表示されます、ルールを含む<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>権限です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Similarly, if you remove <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys&gt;</ph> rights, the other constituents of <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph> rights will reappear.</source>
          <target state="translated">同様に、削除する場合<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys&gt;</ph>rights、他の構成要素の<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>権利が表示されます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example creates registry access rules and adds them to a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.</source>
          <target state="translated">次のコード例は、レジストリのアクセス ルールを作成、追加して、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>許可し、権限を拒否する規則は、同じの互換性のあるルールの中には別方法の種類を表示、オブジェクトがマージされます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">この例では、セキュリティ オブジェクトはアタッチされません、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Examples that attach security objects can be found in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">セキュリティ オブジェクトをアタッチする例は含まれて<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>A code example that demonstrates inheritance and propagation flags can be found in the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> class.</source>
          <target state="translated">継承と伝達のフラグを示すコード例は含まれて、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The audit rule to add.</source>
          <target state="translated">追加する監査規則。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The user specified by this rule determines the search.</source>
          <target state="translated">この規則に指定されているユーザーに基づいて検索されます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>Searches for an audit rule with which the new rule can be merged.</source>
          <target state="translated">新しい規則をマージできる監査規則を検索します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If none are found, adds the new rule.</source>
          <target state="translated">見つからない場合は、新しい規則を追加します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A&gt;</ph> method searches for rules with the same user or group as <ph id="ph2">`rule`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A&gt;</ph>メソッド検索ルールと同じユーザーまたはグループとして<ph id="ph2">`rule`</ph>です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If none are found, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">見つからない場合は、<ph id="ph1">`rule`</ph>を追加します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If a matching rule is found, the flags in <ph id="ph1">`rule`</ph> are merged into the existing rule.</source>
          <target state="translated">照合ルールが見つからないかどうかでフラグ<ph id="ph1">`rule`</ph>既存のルールにマージされます。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>Rules cannot be merged if they have different inheritance flags.</source>
          <target state="translated">別の継承フラグが設定されている場合は、ルールをマージすることはできません。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A&gt;</ph> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph>), the two rules cannot be merged.</source>
          <target state="translated">継承フラグなしでの特定のユーザーのキーへの書き込み試行が失敗した場合の監査などと<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A&gt;</ph>アクセス許可を変更する試行が失敗がサブキーの継承ですが、同じユーザーを監査することを指定するルールを追加するために使用 (<ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph>)、2 つのルールをマージすることはできません。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph> that identifies the user or group the rule applies to.</source>
          <target state="translated">規則の適用対象となるユーザーまたはグループを識別する <ph id="ph1">&lt;see cref="T:System.Security.Principal.IdentityReference" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> values specifying the access rights to audit, cast to an integer.</source>
          <target state="translated">監査するアクセス権を指定し、整数にキャストされる <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> 値のビットごとの組み合わせ。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A Boolean value specifying whether the rule is inherited.</source>
          <target state="translated">規則が継承されるかどうかを示すブール値。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> values specifying how the rule is inherited by subkeys.</source>
          <target state="translated">サブキーによって規則を継承する方法を示す <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> 値のビットごとの組み合わせ。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> values that modify the way the rule is inherited by subkeys.</source>
          <target state="translated">サブキーによって規則を継承する方法を変更する <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> 値のビットごとの組み合わせ。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Meaningless if the value of <bpt id="p1">&lt;c&gt;</bpt>inheritanceFlags<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.InheritanceFlags.None" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>inheritanceFlags<ept id="p1">&lt;/c&gt;</ept> の値が <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.InheritanceFlags.None" /&gt;</ph> の場合、無効です。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> values specifying whether to audit successful access, failed access, or both.</source>
          <target state="translated">成功したアクセス、失敗したアクセス、またはその両方のいずれを監査するかを示す <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> 値のビットごとの組み合わせ。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.</source>
          <target state="translated">規則の適用対象となるユーザー、監査するアクセス権、規則の継承と反映、および規則を発生させる結果を指定して、新しい監査規則を作成します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> object representing the specified audit rule for the specified user, with the specified flags.</source>
          <target state="translated">指定したユーザーに対する、指定した監査規則と指定したフラグを表す <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>The return type of the method is the base class, <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditRule" /&gt;</ph>, but the return value can be cast safely to the derived class.</source>
          <target state="translated">メソッドの戻り値は基本クラス <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditRule" /&gt;</ph> です。ただし、この戻り値を派生クラスに安全にキャストできます。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>The recommended way to create audit rules is to use the constructors of the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> class.</source>
          <target state="translated">コンス トラクターを使用するのには、監査規則を作成することをお勧め、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Although you can specify the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph> flag, there is no point in doing so.</source>
          <target state="translated">指定できますが、<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph>フラグは、これにはポイントがないです。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>For the purposes of audit control, the name/value pairs in a subkey are not separate objects.</source>
          <target state="translated">監査コントロールの目的で、サブキーの名前と値のペアは別個のオブジェクト</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>The audit rights to name/value pairs are controlled by the rights of the subkey.</source>
          <target state="translated">名前と値のペアに対する監査権限は、サブキーの権限によって制御されます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag.</source>
          <target state="translated">さらに、すべてのサブキーがコンテナーであるため (つまり、ことが含まれているその他のサブキーには) を受けない、<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>Finally, specifying the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</source>
          <target state="translated">最後に、指定する、<ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph>互換性のあるルールの通常の組み合わせに支障があるためにフラグが、ルールのメンテナンスに不必要に複雑にできます。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>, <ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="flags" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph>、<ph id="ph2">&lt;paramref name="inheritanceFlags" /&gt;</ph>、<ph id="ph3">&lt;paramref name="propagationFlags" /&gt;</ph>、または <ph id="ph4">&lt;paramref name="flags" /&gt;</ph> に無効な値が指定されています。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="accessMask" /&gt;</ph> が 0 です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
          <source><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> is neither of type <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>, nor of a type such as <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> that can be converted to type <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identityReference" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> 型ではなく、<ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> 型に変換できる <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> などの型でもありません。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType">
          <source>Gets the type that the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> class uses to represent audit rules.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistrySecurity" /&gt;</ph> クラスで監査規則を表すために使用する型を取得します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> クラスを表す <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A&gt;</ph> property and return the type they use to represent audit rights.</source>
          <target state="translated">派生したクラス、<ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph>クラスのオーバーライド、<ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A&gt;</ph>プロパティと監査権限を表すために使用する型を戻り値。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</source>
          <target state="translated">配列または複数の種類のセキュリティ オブジェクトを格納するコレクションを操作するときは、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な監査規則の種類を決定します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> that specifies the user and <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</source>
          <target state="translated">検索対象のユーザーと <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph>、および一致する規則が見つかった場合にその規則と互換性のある継承フラグと反映フラグのセットを指定する <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Specifies the rights to remove from the compatible rule, if found.</source>
          <target state="translated">互換性のある規則が見つかった場合にその規則から削除する権限を指定します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Searches for an access control rule with the same user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</source>
          <target state="translated">指定したアクセス規則と同じユーザーと <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (許可または拒否)、および互換性がある継承フラグと反映フラグが指定されたアクセス制御規則が検索されます。このような規則が見つかると、指定したアクセス規則に含まれる権限がその規則から削除されます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a compatible rule is found; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">互換性のある規則が見つかった場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for a rule that has the same user and the same <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> value as <ph id="ph3">`rule`</ph>.</source>
          <target state="translated">現在<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>は同じユーザーと同じを持つルールの検索は<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>として値<ph id="ph3">`rule`</ph>です。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If no such rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">このような規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <ph id="ph1">`rule`</ph>.</source>
          <target state="translated">指定されたフラグと互換性のための継承との互換性フラグをチェック照合ルールが見つかった場合、<ph id="ph1">`rule`</ph>です。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If no compatible rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">互換性のある規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If a rule with compatible flags is found, the rights specified in <ph id="ph1">`rule`</ph> are removed from the compatible rule, and the method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">権限がで指定された互換性フラグを含むルールが見つかった場合、 <ph id="ph1">`rule`</ph> 、互換性のあるルールから削除されますが返されます<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If <ph id="ph1">`rule`</ph> specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</source>
          <target state="translated">場合<ph id="ph1">`rule`</ph>互換性のあるルールに含まれていない権限を指定、それらの権利に関するアクションは実行されません。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If all rights are removed from the compatible rule, the entire rule is removed from the current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">現在の全体の規則が削除される場合は、すべての権限は、互換性のある規則から削除されます、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method removes rights from a compatible rule, and how the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph> method merges rights with compatible rules.</source>
          <target state="translated">次のコード例に示す方法、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>メソッドは、互換性のある規則からの権利を削除方法、および<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A&gt;</ph>メソッドは、互換性のあるルールに権限をマージします。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object and adds a rule that allows the current user <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType&gt;</ph> rights.</source>
          <target state="translated">例は、作成、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトし、現在のユーザーを許可する規則を追加<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType&gt;</ph>権限です。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example then creates a rule that grants the user <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType&gt;</ph>, with the same inheritance and propagation rights as the first rule, and uses the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method to remove this new rule from the <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">ユーザーを許可するルールを作成し<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType&gt;</ph>同じ継承および使用して最初のルールと伝達の権限を指定して、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>からこの新しいルールを削除する方法、<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> is a constituent of <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>, so it is removed from the compatible rule.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> 構成要素は、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>のため、互換性のある規則から削除されます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The rules in the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object are displayed, showing the remaining constituents of <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>.</source>
          <target state="translated">内のルール、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトが表示されの残りの構成要素を示す<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.ReadKey&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example code then calls the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method to merge the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph> right back into the rule in the <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">コード例は、呼び出し、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>にマージするメソッド、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistryRights.SetValue&gt;</ph>内のルールに戻す右、<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">この例では、セキュリティ オブジェクトはアタッチされません、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The second example in this section attaches a security object, and so do the examples in <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph><ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このセクションでは、2 番目の例は、セキュリティ オブジェクトをアタッチし、例は<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph><ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> that specifies the user and <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> to search for.</source>
          <target state="translated">検索対象のユーザーと <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> を指定する <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</source>
          <target state="translated">この規則で指定する権限、継承フラグ、または反映フラグは、無視されます。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>Searches for all access control rules with the same user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (allow or deny) as the specified rule and, if found, removes them.</source>
          <target state="translated">指定した規則と同じユーザーおよび同じ <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (許可または拒否) が指定されたアクセス制御規則をすべて検索し、一致する規則が見つかった場合は、その規則を削除します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for rules that have the same user and the same <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> value as <ph id="ph3">`rule`</ph>.</source>
          <target state="translated">現在<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>は同じユーザーと同じであるルールの検索は<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>として値<ph id="ph3">`rule`</ph>です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>Any rights, inheritance flags, or propagation flags specified by <ph id="ph1">`rule`</ph> are ignored when performing this search.</source>
          <target state="translated">すべての権利、継承フラグ、または伝達フラグで指定された<ph id="ph1">`rule`</ph>この検索を実行する場合は無視されます。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>If no matching rules are found, no action is taken.</source>
          <target state="translated">照合ルールが見つからない場合、処理は行われません。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> object that specifies the user and <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType&gt;</ph>, with any arbitrary rights and flags, and passing that rule to the <ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph> method.</source>
          <target state="translated">たとえば、ユーザーは、別の継承と伝達フラグのさまざまな権限を許可する複数のルールは、削除できますそれらすべてのルールを作成して、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph>ユーザーを指定するオブジェクトと<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType&gt;</ph>では、任意の権限とフラグ、および受け渡しするルールを、<ph id="ph3">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example shows that the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph> method removes all rules that match user and <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>, ignoring rights and flags.</source>
          <target state="translated">次のコード例はことを示しています、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph>メソッドは、ユーザーに一致するすべての規則を削除および<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>権限とフラグは無視されます。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</source>
          <target state="translated">例は、作成、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトを許可して、別の継承と伝達のフラグを使って、現在のユーザーのさまざまな権限を拒否する規則を追加します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example then creates a new rule that allows the current user to take ownership, and passes that rule to the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph> method to remove the two rules that allow access.</source>
          <target state="translated">所有権を取得する現在のユーザーを許可し、その規則を渡す新しいルールを作成し、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A&gt;</ph>アクセスを許可する 2 つの規則を削除する方法です。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">この例では、セキュリティ オブジェクトはアタッチされません、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source>See the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">参照してください、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> to remove.</source>
          <target state="translated">削除する <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</source>
          <target state="translated">指定した規則に正確に一致するアクセス制御規則を検索し、見つかった場合は、その規則を削除します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The rule is removed only if it exactly matches <ph id="ph1">`rule`</ph> in all details, including flags.</source>
          <target state="translated">ルールが削除されるは、完全に一致する場合にのみ<ph id="ph1">`rule`</ph>フラグを含むすべての詳細。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>Other rules with the same user and <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> are not affected.</source>
          <target state="translated">同じユーザーがその他の規則と<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>には影響しません。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user.</source>
          <target state="translated">以上基になるアクセス制御エントリ (ACE) およびこれらのエントリが分割またはユーザーのアクセスのセキュリティ ルールを変更する場合に、必要に応じて、結合またはルールが 1 つを表します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method cannot remove it.</source>
          <target state="translated">このため、ルールがあります存在しなくおよびそのケースがあったが追加されると、特定のフォームで、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph>方法はそれを削除することはできません。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example shows that the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method removes a rule only if it matches exactly.</source>
          <target state="translated">次のコード例はことを示しています、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph>メソッドが正確に一致した場合にのみ、ルールを削除します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example creates two rules that allow different rights.</source>
          <target state="translated">この例では、異なる権限を許可する 2 つのルールを作成します。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The rules have compatible inheritance and propagation flags, so when the second rule is added it merges with the first.</source>
          <target state="translated">ルールが互換性の継承と伝達のフラグであるため、最初と 2 番目のルールが追加されたときにマージします。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method, specifying the first rule, but because the rules are merged there is no rule that matches.</source>
          <target state="translated">呼び出しの例、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph>最初の規則を指定して、メソッドと一致するルールがないため、ルールがマージされます。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example then calls the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph> method to the remove the second rule from the merged rule, and finally calls the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph> method to remove the first rule.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A&gt;</ph>結合ルール、および最後に呼び出しから 2 番目のルールの削除にするメソッド、<ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A&gt;</ph>最初の規則を削除する方法です。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">この例では、セキュリティ オブジェクトはアタッチされません、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source>See the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">参照してください、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</source>
          <target state="translated">検索対象のユーザー、および一致する規則がある場合にその規則と互換性のある継承フラグと反映フラグのセットを指定する <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>Specifies the rights to remove from the compatible rule, if found.</source>
          <target state="translated">互換性のある規則が見つかった場合にその規則から削除する権限を指定します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</source>
          <target state="translated">指定した規則と同じユーザー、および互換性のある継承フラグと反映フラグが指定された監査制御規則が検索されます。互換性のある規則が見つかると、指定した規則に含まれる権限がその規則から削除されます。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a compatible rule is found; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">互換性のある規則が見つかった場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for an audit rule that has the same user as <ph id="ph2">`rule`</ph>.</source>
          <target state="translated">現在<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>を同一のユーザーを持つ監査規則の検索<ph id="ph2">`rule`</ph>です。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If no such rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">このような規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <ph id="ph1">`rule`</ph>.</source>
          <target state="translated">指定されたフラグと互換性のための継承との互換性フラグをチェック照合ルールが見つかった場合、<ph id="ph1">`rule`</ph>です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If no compatible rule is found, no action is taken, and the method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">互換性のある規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If a rule with compatible flags is found, the rights specified in <ph id="ph1">`rule`</ph> are removed from the compatible rule, and the method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">権限がで指定された互換性フラグを含むルールが見つかった場合、 <ph id="ph1">`rule`</ph> 、互換性のあるルールから削除されますが返されます<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If <ph id="ph1">`rule`</ph> specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</source>
          <target state="translated">場合<ph id="ph1">`rule`</ph>互換性のあるルールに含まれていない権限を指定、それらの権利に関するアクションは実行されません。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If all rights are removed from the compatible rule, the entire rule is removed from the current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">現在の全体の規則が削除される場合は、すべての権限は、互換性のある規則から削除されます、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> that specifies the user to search for.</source>
          <target state="translated">検索対象のユーザーを指定する <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</source>
          <target state="translated">この規則で指定する権限、継承フラグ、または反映フラグは、無視されます。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</source>
          <target state="translated">指定した規則と同じユーザーが設定されているすべての監査規則を検索し、見つかった場合はそれらの規則を削除します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>The current <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> is searched for audit rules that have the same user as <ph id="ph2">`rule`</ph>.</source>
          <target state="translated">現在<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>監査規則を持つと同じユーザーが検索<ph id="ph2">`rule`</ph>です。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>Any rights, inheritance flags, or propagation flags specified by <ph id="ph1">`rule`</ph> are ignored when performing this search.</source>
          <target state="translated">すべての権利、継承フラグ、または伝達フラグで指定された<ph id="ph1">`rule`</ph>この検索を実行する場合は無視されます。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source>If no matching rules are found, no action is taken.</source>
          <target state="translated">照合ルールが見つからない場合、処理は行われません。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> to be removed.</source>
          <target state="translated">削除する <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</source>
          <target state="translated">指定した規則に正確に一致する監査規則を検索し、見つかった場合は、その規則を削除します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>The rule is removed only if it exactly matches <ph id="ph1">`rule`</ph> in all details, including flags.</source>
          <target state="translated">ルールが削除されるは、完全に一致する場合にのみ<ph id="ph1">`rule`</ph>フラグを含むすべての詳細。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>Other audit rules for the same user are not affected.</source>
          <target state="translated">同じユーザーの場合は、その他の監査規則には影響しません。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user.</source>
          <target state="translated">以上基になるアクセス制御エントリ (ACE) およびこれらのエントリが分割またはユーザーの監査のセキュリティ ルールを変更する場合に、必要に応じて、結合またはルールが 1 つを表します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source>Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A&gt;</ph> method cannot remove it.</source>
          <target state="translated">このため、ルールがあります存在しなくおよびそのケースがあったが追加されると、特定のフォームで、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A&gt;</ph>方法はそれを削除することはできません。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> to add.</source>
          <target state="translated">追加する <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The user specified by this rule determines the rules to remove before this rule is added.</source>
          <target state="translated">この規則で指定されたユーザーによって、この規則を追加する前に削除する規則が判断されます。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Removes all access control rules with the same user as the specified rule, regardless of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph>, and then adds the specified rule.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> に関係なく、指定した規則と同じユーザーが指定されたすべてのアクセス制御規則を削除し、指定した規則を追加します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If there are no access rules whose user matches the specified rule, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">ユーザーが、指定されたルールに一致するアクセス規則がない場合<ph id="ph1">`rule`</ph>を追加します。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example shows how the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A&gt;</ph> method replaces all rules for the matching user with the rule specified for the match.</source>
          <target state="translated">次のコード例に示す方法、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A&gt;</ph>メソッドは、一致する指定された規則に一致するユーザーのすべての規則を置き換えます。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</source>
          <target state="translated">例は、作成、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトを許可して、別の継承と伝達のフラグを使って、現在のユーザーのさまざまな権限を拒否する規則を追加します。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example then creates a new rule that allows the current user only to read the key, and uses the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A&gt;</ph> method to remove the all rules for the user and replace them with the new rule.</source>
          <target state="translated">使用して、キーを読み取る場合にのみ、現在のユーザーは、新しいルールを作成し、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A&gt;</ph>メソッドをユーザーのすべての規則を削除して、新しいルールに置き換えます。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">この例では、セキュリティ オブジェクトはアタッチされません、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>See the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">参照してください、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> to add.</source>
          <target state="translated">追加する <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> of this rule determine the rules to remove before this rule is added.</source>
          <target state="translated">この規則のユーザーと <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> によって、この規則を追加する前に削除する規則が判断されます。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>Removes all access control rules with the same user and <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (allow or deny) as the specified rule, and then adds the specified rule.</source>
          <target state="translated">指定した規則と同じユーザーおよび同じ <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> (許可または拒否) が指定されたすべてのアクセス制御規則を削除し、指定した規則を追加します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If the specified rule has <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>, the effect of this method is to remove all <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> rules for the specified user, replacing them with the specified rule.</source>
          <target state="translated">場合は、指定されたルール<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>をすべて削除するのには、このメソッドの効果<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph>指定されたルールに置き換える、指定したユーザーのルール。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If the specified rule has <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>, all <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> rules for the specified user are replaced with the specified rule.</source>
          <target state="translated">指定されたルールがある場合<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>すべて、<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph>指定したユーザーのルールは、指定されたルールに置き換えられます。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>If there are no rules whose user and <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> match the specified rule, <ph id="ph2">`rule`</ph> is added.</source>
          <target state="translated">規則がないユーザーの場合と<ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>指定の規則に一致<ph id="ph2">`rule`</ph>を追加します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The following code example shows that the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A&gt;</ph> method removes all rules that match both the user and the <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph> of <ph id="ph3">`rule`</ph>, ignoring rights and flags, and replaces them with <ph id="ph4">`rule`</ph>.</source>
          <target state="translated">次のコード例はことを示しています、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A&gt;</ph>メソッドは、ユーザーの両方に一致するすべての規則を削除、<ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>の<ph id="ph3">`rule`</ph>権限と、フラグは無視されます、およびそれらに置き換えます<ph id="ph4">`rule`</ph>です。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</source>
          <target state="translated">例は、作成、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>オブジェクトを許可して、別の継承と伝達のフラグを使って、現在のユーザーのさまざまな権限を拒否する規則を追加します。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The example then creates a new rule that allows the current user only to read the key, and uses the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A&gt;</ph> method to remove the two rules that allow access and to replace them with the new rule.</source>
          <target state="translated">使用して、キーを読み取る場合にのみ、現在のユーザーは、新しいルールを作成し、<ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A&gt;</ph>メソッド アクセスを許可する 2 つの規則を削除して、新しいルールに置き換えます。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>The rule that denies access is not affected.</source>
          <target state="translated">アクセスを拒否する規則が影響を受けません。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>This example does not attach the security object to a <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> object.</source>
          <target state="translated">この例では、セキュリティ オブジェクトはアタッチされません、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source>See the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">参照してください、<ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph> to add.</source>
          <target state="translated">追加する <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAuditRule" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>The user specified by this rule determines the rules to remove before this rule is added.</source>
          <target state="translated">この規則で指定されたユーザーによって、この規則を追加する前に削除する規則が判断されます。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>Removes all audit rules with the same user as the specified rule, regardless of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> value, and then adds the specified rule.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AuditFlags" /&gt;</ph> 値に関係なく、指定した規則と同じユーザーが指定されたすべての監査規則を削除し、指定した規則を追加します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source>If there are no audit rules whose user matches the specified rule, <ph id="ph1">`rule`</ph> is added.</source>
          <target state="translated">ユーザーが、指定されたルールに一致する監査規則がない場合<ph id="ph1">`rule`</ph>を追加します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
          <source><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rule" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>