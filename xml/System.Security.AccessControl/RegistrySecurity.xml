<Type Name="RegistrySecurity" FullName="System.Security.AccessControl.RegistrySecurity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="20e6ca27f0c7f35c41fc87bb56a0a016466f58b9" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46693129" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistrySecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistrySecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistrySecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistrySecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type RegistrySecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a0001-101">レジストリ キーの Windows アクセス制御セキュリティを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a0001-101">Represents the Windows access control security for a registry key.</span>
      </span>
      <span data-ttu-id="a0001-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a0001-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-103">A<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト、レジストリ キーのアクセス権を指定しもアクセス試行を監査する方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="a0001-103">A <xref:System.Security.AccessControl.RegistrySecurity> object specifies access rights for a registry key, and also specifies how access attempts are audited.</span></span> <span data-ttu-id="a0001-104">によって表される各アクセス規則と、規則で表されるレジストリ キーへのアクセス権を<xref:System.Security.AccessControl.RegistryAccessRule>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-104">Access rights to the registry key are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.RegistryAccessRule> object.</span></span> <span data-ttu-id="a0001-105">によって表される、各監査規則を<xref:System.Security.AccessControl.RegistryAuditRule>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-105">Each auditing rule is represented by a <xref:System.Security.AccessControl.RegistryAuditRule> object.</span></span>  
  
 <span data-ttu-id="a0001-106">これは図らずもをセキュリティ保護可能な各オブジェクトが最大で 1 つ随意アクセス制御リスト (DACL) をセキュリティで保護されたオブジェクトとで最もアクセスを指定する 1 つのシステム アクセス制御リスト (SACL) のアクセスを制御する、基になる Windows セキュリティ システム試行が監査されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-106">This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited.</span></span> <span data-ttu-id="a0001-107">DACL と SACL によっては、アクセスおよび監査ユーザーとグループを指定するアクセス制御エントリ (ACE) のリストが並べ替えられています。</span><span class="sxs-lookup"><span data-stu-id="a0001-107">The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups.</span></span> <span data-ttu-id="a0001-108">A<xref:System.Security.AccessControl.RegistryAccessRule>または<xref:System.Security.AccessControl.RegistryAuditRule>オブジェクトは、1 つ以上の ACE を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="a0001-108">A <xref:System.Security.AccessControl.RegistryAccessRule> or <xref:System.Security.AccessControl.RegistryAuditRule> object might represent more than one ACE.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0001-109">Windows アクセス制御のセキュリティは、レジストリ キーにのみ適用できます。</span><span class="sxs-lookup"><span data-stu-id="a0001-109">Windows access control security can only be applied to registry keys.</span></span> <span data-ttu-id="a0001-110">キーに格納されている個別のキー/値ペアに適用できません。</span><span class="sxs-lookup"><span data-stu-id="a0001-110">It cannot be applied to individual key/value pairs stored in a key.</span></span>  
  
 <span data-ttu-id="a0001-111"><xref:System.Security.AccessControl.RegistrySecurity>、 <xref:System.Security.AccessControl.RegistryAccessRule>、および<xref:System.Security.AccessControl.RegistryAuditRule>クラスは、Acl、Ace の実装の詳細を非表示にします。</span><span class="sxs-lookup"><span data-stu-id="a0001-111">The <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, and <xref:System.Security.AccessControl.RegistryAuditRule> classes hide the implementation details of ACLs and ACEs.</span></span> <span data-ttu-id="a0001-112">17 個の異なる ACE 型と正しく維持するためのアクセス権の継承と反映の複雑さを無視できます。</span><span class="sxs-lookup"><span data-stu-id="a0001-112">They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights.</span></span> <span data-ttu-id="a0001-113">これらのオブジェクトが、次の一般的なアクセス制御エラーを防ぐためにも設計されています。</span><span class="sxs-lookup"><span data-stu-id="a0001-113">These objects are also designed to prevent the following common access control errors:</span></span>  
  
-   <span data-ttu-id="a0001-114">Null DACL のセキュリティ記述子を作成しています。</span><span class="sxs-lookup"><span data-stu-id="a0001-114">Creating a security descriptor with a null DACL.</span></span> <span data-ttu-id="a0001-115">DACL を null 参照では、可能性のあるサービス拒否攻撃を作成、オブジェクトにアクセス規則を追加するすべてのユーザーを許可します。</span><span class="sxs-lookup"><span data-stu-id="a0001-115">A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack.</span></span> <span data-ttu-id="a0001-116">新しい<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトは常にすべてのユーザーのすべてのアクセスを拒否する空の DACL で起動します。</span><span class="sxs-lookup"><span data-stu-id="a0001-116">A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty DACL, which denies all access for all users.</span></span>  
  
-   <span data-ttu-id="a0001-117">Ace の正規の順序に違反しています。</span><span class="sxs-lookup"><span data-stu-id="a0001-117">Violating the canonical ordering of ACEs.</span></span> <span data-ttu-id="a0001-118">DACL の ACE リストが正規順序で維持されない場合ユーザーが誤ってアクセスが与えをセキュリティで保護されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-118">If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object.</span></span> <span data-ttu-id="a0001-119">たとえば、拒否されたアクセス権は必要があります許可されているアクセス権の前に常に表示されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-119">For example, denied access rights must always appear before allowed access rights.</span></span> <span data-ttu-id="a0001-120"><xref:System.Security.AccessControl.RegistrySecurity> オブジェクトは、内部的に正しい順序を維持します。</span><span class="sxs-lookup"><span data-stu-id="a0001-120"><xref:System.Security.AccessControl.RegistrySecurity> objects maintain the correct order internally.</span></span>  
  
-   <span data-ttu-id="a0001-121">セキュリティ記述子フラグは、リソース マネージャーの管理だけ下にある必要がありますを操作します。</span><span class="sxs-lookup"><span data-stu-id="a0001-121">Manipulating security descriptor flags, which should be under resource manager control only.</span></span>  
  
-   <span data-ttu-id="a0001-122">ACE フラグの無効な組み合わせを作成します。</span><span class="sxs-lookup"><span data-stu-id="a0001-122">Creating invalid combinations of ACE flags.</span></span>  
  
-   <span data-ttu-id="a0001-123">継承された Ace を操作します。</span><span class="sxs-lookup"><span data-stu-id="a0001-123">Manipulating inherited ACEs.</span></span> <span data-ttu-id="a0001-124">継承と反映は、アクセスおよび監査規則に加えた変更に応じて、リソース マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-124">Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.</span></span>  
  
-   <span data-ttu-id="a0001-125">Acl に無意味な Ace を挿入しています。</span><span class="sxs-lookup"><span data-stu-id="a0001-125">Inserting meaningless ACEs into ACLs.</span></span>  
  
 <span data-ttu-id="a0001-126">オブジェクトのセキュリティを .NET でサポートされていない唯一の機能は、アプリケーション開発者は、次などの大半を避ける必要がある危険なアクティビティ。</span><span class="sxs-lookup"><span data-stu-id="a0001-126">The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:</span></span>  
  
-   <span data-ttu-id="a0001-127">通常、リソース マネージャーで実行される低レベルのタスク。</span><span class="sxs-lookup"><span data-stu-id="a0001-127">Low-level tasks that are normally performed by the resource manager.</span></span>  
  
-   <span data-ttu-id="a0001-128">追加または標準の順序を保持しない方法でアクセス制御エントリを削除します。</span><span class="sxs-lookup"><span data-stu-id="a0001-128">Adding or removing access control entries in ways that do not maintain the canonical ordering.</span></span>  
  
 <span data-ttu-id="a0001-129">レジストリ キーの Windows アクセス制御セキュリティを変更するには、使用、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>を取得するメソッド、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-129">To modify Windows access control security for a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="a0001-130">追加し、ルールを削除するには、セキュリティ オブジェクトを変更し、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>メソッドを再度アタッチします。</span><span class="sxs-lookup"><span data-stu-id="a0001-130">Modify the security object by adding and removing rules, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to reattach it.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a0001-131">加えた変更を<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトには影響しません、レジストリ キーのアクセス レベルを呼び出すまで、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>メソッドをレジストリ キーに変更されたセキュリティ オブジェクトを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="a0001-131">Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to assign the altered security object to the registry key.</span></span>  
  
 <span data-ttu-id="a0001-132">1 つのレジストリ キーから別のアクセス制御セキュリティをコピーするには、使用、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>を取得するメソッド、<xref:System.Security.AccessControl.RegistrySecurity>最初のレジストリ キーのアクセスおよび監査規則を表すオブジェクトし、を使用して、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>それらの規則を割り当てるメソッドを2 番目のレジストリ キー。</span><span class="sxs-lookup"><span data-stu-id="a0001-132">To copy access control security from one registry key to another, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object representing the access and audit rules for the first registry key, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to assign those rules to the second registry key.</span></span> <span data-ttu-id="a0001-133">規則を 2 番目のレジストリ キーを割り当てることも、<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType>または<xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType>を受け取るメソッドを<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a0001-133">You can also assign the rules to a second registry key with an <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType> or <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType> method that takes a <xref:System.Security.AccessControl.RegistrySecurity> object parameter.</span></span>  
  
 <span data-ttu-id="a0001-134">セキュリティ記述子定義言語 (SDDL) に投資してユーザーが使用できる、 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> 、レジストリ キーのアクセス規則を設定するメソッドをおよび<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>SDDL 形式へのアクセス規則を表す文字列を取得するメソッド。</span><span class="sxs-lookup"><span data-stu-id="a0001-134">Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a registry key, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format.</span></span> <span data-ttu-id="a0001-135">これは新規の開発は推奨されません。</span><span class="sxs-lookup"><span data-stu-id="a0001-135">This is not recommended for new development.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0001-136">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="a0001-136">This section contains two code examples.</span></span> <span data-ttu-id="a0001-137">最初の例は互換性のある規則のマージ追加し、削除、および、2 番目に示す追加と削除の規則の継承と反映フラグの影響します。</span><span class="sxs-lookup"><span data-stu-id="a0001-137">The first example shows how compatible rules merge when added and removed, and the second shows how inheritance and propagation flags affect the addition and deletion of rules.</span></span>  
  
 <span data-ttu-id="a0001-138">例 1</span><span class="sxs-lookup"><span data-stu-id="a0001-138">Example 1</span></span>  
  
 <span data-ttu-id="a0001-139">次のコード例に示す方法、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>メソッドは、互換性のある規則から権利を削除する方法と、<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>メソッドは、互換性のある規則の権限をマージします。</span><span class="sxs-lookup"><span data-stu-id="a0001-139">The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method removes rights from a compatible rule, and how the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method merges rights with compatible rules.</span></span>  
  
 <span data-ttu-id="a0001-140">例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトし、現在のユーザーを許可する規則を追加します。<xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType>権限。</span><span class="sxs-lookup"><span data-stu-id="a0001-140">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds a rule that allows the current user <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> rights.</span></span> <span data-ttu-id="a0001-141">ユーザーを許可するルールを作成し<xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>同じ継承および使用して最初のルールと伝達の権限を指定して、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>からこの新しいルールを削除する方法、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-141">The example then creates a rule that grants the user <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>, with the same inheritance and propagation rights as the first rule, and uses the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to remove this new rule from the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="a0001-142"><xref:System.Security.AccessControl.RegistryRights.SetValue> 構成要素は、<xref:System.Security.AccessControl.RegistryRights.ReadKey>ので、互換性のある規則から削除されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-142"><xref:System.Security.AccessControl.RegistryRights.SetValue> is a constituent of <xref:System.Security.AccessControl.RegistryRights.ReadKey>, so it is removed from the compatible rule.</span></span> <span data-ttu-id="a0001-143">内のルール、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトに表示されるの残りの構成要素を示す<xref:System.Security.AccessControl.RegistryRights.ReadKey>します。</span><span class="sxs-lookup"><span data-stu-id="a0001-143">The rules in the <xref:System.Security.AccessControl.RegistrySecurity> object are displayed, showing the remaining constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey>.</span></span>  
  
 <span data-ttu-id="a0001-144">コード例を呼び出して、<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>にマージするメソッド、<xref:System.Security.AccessControl.RegistryRights.SetValue>内のルールに戻す、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-144">The example code then calls the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method to merge the <xref:System.Security.AccessControl.RegistryRights.SetValue> right back into the rule in the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0001-145">この例は、セキュリティ オブジェクトをアタッチできません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-145">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="a0001-146">このセクションでは、2 番目の例は、セキュリティ オブジェクトをアタッチおよびは<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>と<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="a0001-146">The second example in this section attaches a security object, and so do the examples in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> and <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 <span data-ttu-id="a0001-147">例 2</span><span class="sxs-lookup"><span data-stu-id="a0001-147">Example 2</span></span>  
  
 <span data-ttu-id="a0001-148">次のコード例では、継承と反映によるアクセス規則を示します。</span><span class="sxs-lookup"><span data-stu-id="a0001-148">The following code example demonstrates access rules with inheritance and propagation.</span></span> <span data-ttu-id="a0001-149">例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトを作成しを持つ 2 つの規則を追加します、<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>フラグ。</span><span class="sxs-lookup"><span data-stu-id="a0001-149">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag.</span></span> <span data-ttu-id="a0001-150">最初の規則にはフラグと反映フラグがない、2 つ目は<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>と<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>します。</span><span class="sxs-lookup"><span data-stu-id="a0001-150">The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> and <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.</span></span>  
  
 <span data-ttu-id="a0001-151">プログラム内のルールを表示する、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト、および、使用、<xref:System.Security.AccessControl.RegistrySecurity>サブキーを作成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-151">The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey.</span></span> <span data-ttu-id="a0001-152">プログラムは、子サブキーと孫サブキーを作成し、各サブキーのセキュリティを表示します。</span><span class="sxs-lookup"><span data-stu-id="a0001-152">The program creates a child subkey and a grandchild subkey, then displays the security for each subkey.</span></span> <span data-ttu-id="a0001-153">最後に、プログラムは、テスト キーを削除します。</span><span class="sxs-lookup"><span data-stu-id="a0001-153">Finally, the program deletes the test keys.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistrySecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistrySecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a0001-154">
            <see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスの新しいインスタンスを既定値で初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-154">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class with default values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-155">新しい<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトは常にすべてのユーザーのすべてのアクセスを拒否する空の随意アクセス リスト (DACL) で始まります。</span><span class="sxs-lookup"><span data-stu-id="a0001-155">A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a0001-156">
            <see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスでアクセス権を表すために使用する列挙型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-156">Gets the enumeration type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent access rights.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a0001-157">
            <see cref="T:System.Type" /> 列挙体を表す <see cref="T:System.Security.AccessControl.RegistryRights" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-157">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryRights" /> enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-158">派生するクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>プロパティと戻り値を使用してアクセス権を表す型。</span><span class="sxs-lookup"><span data-stu-id="a0001-158">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights.</span></span> <span data-ttu-id="a0001-159">配列または複数の種類のセキュリティ オブジェクトを含むコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な列挙型を判断します。</span><span class="sxs-lookup"><span data-stu-id="a0001-159">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="registrySecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <span data-ttu-id="a0001-160">規則の適用対象となるユーザーまたはグループを識別する <see cref="T:System.Security.Principal.IdentityReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-160">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</span>
          </span>
        </param>
        <param name="accessMask">
          <span data-ttu-id="a0001-161">許可または拒否するアクセス権を指定し、整数にキャストされる <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-161">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the access rights to allow or deny, cast to an integer.</span>
          </span>
        </param>
        <param name="isInherited">
          <span data-ttu-id="a0001-162">規則が継承されるかどうかを示すブール値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-162">A Boolean value specifying whether the rule is inherited.</span>
          </span>
        </param>
        <param name="inheritanceFlags">
          <span data-ttu-id="a0001-163">サブキーによって規則を継承する方法を示す <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-163">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values specifying how the rule is inherited by subkeys.</span>
          </span>
        </param>
        <param name="propagationFlags">
          <span data-ttu-id="a0001-164">サブキーによって規則を継承する方法を変更する <see cref="T:System.Security.AccessControl.PropagationFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-164">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that modify the way the rule is inherited by subkeys.</span>
          </span>
          <span data-ttu-id="a0001-165">
            <c>inheritanceFlags</c> の値が <see cref="F:System.Security.AccessControl.InheritanceFlags.None" /> の場合、無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-165">Meaningless if the value of <c>inheritanceFlags</c> is <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="a0001-166">アクセス権が許可されているかどうかを指定する <see cref="T:System.Security.AccessControl.AccessControlType" /> 値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-166">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-167">アクセス権、アクセス制御、およびフラグを指定して、指定したユーザーに対して新しいアクセス制御規則を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-167">Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0001-168">指定したユーザーの指定した権限を表す <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-168">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> object representing the specified rights for the specified user.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-169">アクセス制御規則を作成することをお勧めの方法は、のコンス トラクターを使用する、<xref:System.Security.AccessControl.RegistryAccessRule>クラス。</span><span class="sxs-lookup"><span data-stu-id="a0001-169">The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAccessRule> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0001-170">指定することができますが、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType>フラグは、その際に意味がありません。</span><span class="sxs-lookup"><span data-stu-id="a0001-170">Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag, there is no point in doing so.</span></span> <span data-ttu-id="a0001-171">アクセス制御のためには、サブキーの名前/値ペアは別個のオブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="a0001-171">For the purposes of access control, the name/value pairs in a subkey are not separate objects.</span></span> <span data-ttu-id="a0001-172">名前/値ペアへのアクセス権は、サブキーの権限によって制御されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-172">The access rights to name/value pairs are controlled by the rights of the subkey.</span></span> <span data-ttu-id="a0001-173">さらに、すべてのサブキーはコンテナーであるため (つまり、ことが含まれているその他のサブキーには) は影響しない、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>フラグ。</span><span class="sxs-lookup"><span data-stu-id="a0001-173">Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag.</span></span> <span data-ttu-id="a0001-174">最後に、指定する、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>互換性のある規則の標準の組み合わせに干渉するためにフラグが、ルールのメンテナンスに不必要に複雑にします。</span><span class="sxs-lookup"><span data-stu-id="a0001-174">Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a0001-175">
            <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" />、または <paramref name="type" /> に無効な値が指定されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-175">
              <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="type" /> specifies an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-176">
            <paramref name="identityReference" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-176">
              <paramref name="identityReference" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="a0001-177">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-177">-or-</span>
          </span>
          <span data-ttu-id="a0001-178">
            <paramref name="accessMask" /> が 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-178">
              <paramref name="accessMask" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a0001-179">
            <paramref name="identityReference" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-179">
              <paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a0001-180">
            <see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスでアクセス規則を表すために使用する型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-180">Gets the type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent access rules.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a0001-181">
            <see cref="T:System.Type" /> クラスを表す <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-181">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-182">派生するクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>プロパティと戻り値を使用して、アクセス規則を表す型。</span><span class="sxs-lookup"><span data-stu-id="a0001-182">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules.</span></span> <span data-ttu-id="a0001-183">配列または複数の種類のセキュリティ オブジェクトを含むコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトを使用する適切なアクセス規則の種類を決定します。</span><span class="sxs-lookup"><span data-stu-id="a0001-183">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-184">追加するアクセス制御規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-184">The access control rule to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-185">新しい規則をマージできる、一致するアクセス制御を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-185">Searches for a matching access control with which the new rule can be merged.</span>
          </span>
          <span data-ttu-id="a0001-186">見つからない場合は、新しい規則を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-186">If none are found, adds the new rule.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-187"><xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>メソッドと同じユーザーまたはグループと同じ規則を検索<xref:System.Security.AccessControl.AccessControlType>として`rule`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-187">The <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`.</span></span> <span data-ttu-id="a0001-188">何も見つからない場合`rule`が追加されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-188">If none are found, `rule` is added.</span></span> <span data-ttu-id="a0001-189">照合ルールが見つからないかどうか、rights in`rule`は既存の規則にマージされます。</span><span class="sxs-lookup"><span data-stu-id="a0001-189">If a matching rule is found, the rights in `rule` are merged with the existing rule.</span></span>  
  
 <span data-ttu-id="a0001-190">別の継承フラグがある場合、規則をマージできません。</span><span class="sxs-lookup"><span data-stu-id="a0001-190">Rules cannot be merged if they have different inheritance flags.</span></span> <span data-ttu-id="a0001-191">たとえば、ユーザーには、継承フラグなしで読み取りアクセスが許可された場合と<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>サブキーの継承を持つユーザーの書き込みアクセス権を付与する規則を追加するために使用 (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>)、2 つの規則をマージすることはできません。</span><span class="sxs-lookup"><span data-stu-id="a0001-191">For example, if a user is allowed read access with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> is used to add a rule giving the user write access with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), the two rules cannot be merged.</span></span>  
  
 <span data-ttu-id="a0001-192">さまざまなルール<xref:System.Security.AccessControl.AccessControlType>値がマージされることはありません。</span><span class="sxs-lookup"><span data-stu-id="a0001-192">Rules with different <xref:System.Security.AccessControl.AccessControlType> values are never merged.</span></span>  
  
 <span data-ttu-id="a0001-193">ルールは、最も経済的な方法で権限を express します。</span><span class="sxs-lookup"><span data-stu-id="a0001-193">Rules express rights in the most economical way.</span></span> <span data-ttu-id="a0001-194">たとえば、ユーザーがある<xref:System.Security.AccessControl.RegistryRights.QueryValues>、<xref:System.Security.AccessControl.RegistryRights.Notify>と<xref:System.Security.AccessControl.RegistryRights.ReadPermissions>権限、およびを許可する規則を追加<xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys>権、ユーザーがの構成要素をすべて<xref:System.Security.AccessControl.RegistryRights.ReadKey>権限。</span><span class="sxs-lookup"><span data-stu-id="a0001-194">For example, if a user has <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> and <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> rights, and you add a rule allowing <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the user has all the constituent parts of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights.</span></span> <span data-ttu-id="a0001-195">ユーザーの権限を照会する場合を含むルールが表示されます<xref:System.Security.AccessControl.RegistryRights.ReadKey>権限。</span><span class="sxs-lookup"><span data-stu-id="a0001-195">If you query the user's rights, you will see a rule containing <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights.</span></span> <span data-ttu-id="a0001-196">同様に、削除する場合<xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys>の他の構成要素の権限<xref:System.Security.AccessControl.RegistryRights.ReadKey>権限が再表示されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-196">Similarly, if you remove <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the other constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights will reappear.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0001-197">次のコード例は、レジストリ アクセス規則を作成しに追加されます、<xref:System.Security.AccessControl.RegistrySecurity>許可し、権限を拒否するルールは、同じの互換性のあるルールの中に、個別のまま方法の種類を示すオブジェクトがマージされます。</span><span class="sxs-lookup"><span data-stu-id="a0001-197">The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0001-198">この例は、セキュリティ オブジェクトをアタッチできません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-198">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="a0001-199">セキュリティ オブジェクトをアタッチする例が記載<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>と<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="a0001-199">Examples that attach security objects can be found in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> and <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="a0001-200">継承と反映フラグを示すコード例が記載されて、<xref:System.Security.AccessControl.RegistryAccessRule>クラス。</span><span class="sxs-lookup"><span data-stu-id="a0001-200">A code example that demonstrates inheritance and propagation flags can be found in the <xref:System.Security.AccessControl.RegistryAccessRule> class.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-201">
            <paramref name="rule" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-201">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-202">追加する監査規則。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-202">The audit rule to add.</span>
          </span>
          <span data-ttu-id="a0001-203">この規則に指定されているユーザーに基づいて検索されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-203">The user specified by this rule determines the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-204">新しい規則をマージできる監査規則を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-204">Searches for an audit rule with which the new rule can be merged.</span>
          </span>
          <span data-ttu-id="a0001-205">見つからない場合は、新しい規則を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-205">If none are found, adds the new rule.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-206"><xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A>メソッドと同じユーザーまたはグループとして使用してルールを検索`rule`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-206">The <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> method searches for rules with the same user or group as `rule`.</span></span> <span data-ttu-id="a0001-207">何も見つからない場合`rule`が追加されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-207">If none are found, `rule` is added.</span></span> <span data-ttu-id="a0001-208">照合ルールが見つからないかどうかでフラグ`rule`既存のルールにマージされます。</span><span class="sxs-lookup"><span data-stu-id="a0001-208">If a matching rule is found, the flags in `rule` are merged into the existing rule.</span></span>  
  
 <span data-ttu-id="a0001-209">別の継承フラグがある場合、規則をマージできません。</span><span class="sxs-lookup"><span data-stu-id="a0001-209">Rules cannot be merged if they have different inheritance flags.</span></span> <span data-ttu-id="a0001-210">、継承フラグなしで、特定のユーザーのキーへの書き込み試行が失敗した場合の監査などと<xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A>ことを指定するアクセス許可の変更に失敗した試行の継承を持つが、同じユーザーの監査規則を追加するために使用サブキー (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>)、2 つの規則をマージすることはできません。</span><span class="sxs-lookup"><span data-stu-id="a0001-210">For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), the two rules cannot be merged.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="registrySecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <span data-ttu-id="a0001-211">規則の適用対象となるユーザーまたはグループを識別する <see cref="T:System.Security.Principal.IdentityReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-211">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</span>
          </span>
        </param>
        <param name="accessMask">
          <span data-ttu-id="a0001-212">監査するアクセス権を指定し、整数にキャストされる <see cref="T:System.Security.AccessControl.RegistryRights" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-212">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the access rights to audit, cast to an integer.</span>
          </span>
        </param>
        <param name="isInherited">
          <span data-ttu-id="a0001-213">規則が継承されるかどうかを示すブール値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-213">A Boolean value specifying whether the rule is inherited.</span>
          </span>
        </param>
        <param name="inheritanceFlags">
          <span data-ttu-id="a0001-214">サブキーによって規則を継承する方法を示す <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-214">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values specifying how the rule is inherited by subkeys.</span>
          </span>
        </param>
        <param name="propagationFlags">
          <span data-ttu-id="a0001-215">サブキーによって規則を継承する方法を変更する <see cref="T:System.Security.AccessControl.PropagationFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-215">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that modify the way the rule is inherited by subkeys.</span>
          </span>
          <span data-ttu-id="a0001-216">
            <c>inheritanceFlags</c> の値が <see cref="F:System.Security.AccessControl.InheritanceFlags.None" /> の場合、無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-216">Meaningless if the value of <c>inheritanceFlags</c> is <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="a0001-217">成功したアクセス、失敗したアクセス、またはその両方のいずれを監査するかを示す <see cref="T:System.Security.AccessControl.AuditFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-217">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags" /> values specifying whether to audit successful access, failed access, or both.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-218">規則の適用対象となるユーザー、監査するアクセス権、規則の継承と反映、および規則を発生させる結果を指定して、新しい監査規則を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-218">Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0001-219">指定したユーザーに対する、指定した監査規則と指定したフラグを表す <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-219">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> object representing the specified audit rule for the specified user, with the specified flags.</span>
          </span>
          <span data-ttu-id="a0001-220">メソッドの戻り値は基本クラス <see cref="T:System.Security.AccessControl.AuditRule" /> です。ただし、この戻り値を派生クラスに安全にキャストできます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-220">The return type of the method is the base class, <see cref="T:System.Security.AccessControl.AuditRule" />, but the return value can be cast safely to the derived class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-221">監査規則を作成することをお勧めの方法は、のコンス トラクターを使用する、<xref:System.Security.AccessControl.RegistryAuditRule>クラス。</span><span class="sxs-lookup"><span data-stu-id="a0001-221">The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAuditRule> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0001-222">指定することができますが、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType>フラグは、その際に意味がありません。</span><span class="sxs-lookup"><span data-stu-id="a0001-222">Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag, there is no point in doing so.</span></span> <span data-ttu-id="a0001-223">監査の管理のためは、サブキーの名前/値ペアと、別のオブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="a0001-223">For the purposes of audit control, the name/value pairs in a subkey are not separate objects.</span></span> <span data-ttu-id="a0001-224">名前/値ペアを監査権限は、サブキーの権限によって制御されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-224">The audit rights to name/value pairs are controlled by the rights of the subkey.</span></span> <span data-ttu-id="a0001-225">さらに、すべてのサブキーはコンテナーであるため (つまり、ことが含まれているその他のサブキーには) は影響しない、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>フラグ。</span><span class="sxs-lookup"><span data-stu-id="a0001-225">Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag.</span></span> <span data-ttu-id="a0001-226">最後に、指定する、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>互換性のある規則の標準の組み合わせに干渉するためにフラグが、ルールのメンテナンスに不必要に複雑にします。</span><span class="sxs-lookup"><span data-stu-id="a0001-226">Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a0001-227">
            <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" />、または <paramref name="flags" /> に無効な値が指定されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-227">
              <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="flags" /> specifies an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-228">
            <paramref name="identityReference" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-228">
              <paramref name="identityReference" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="a0001-229">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-229">-or-</span>
          </span>
          <span data-ttu-id="a0001-230">
            <paramref name="accessMask" /> が 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-230">
              <paramref name="accessMask" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a0001-231">
            <paramref name="identityReference" /> が <see cref="T:System.Security.Principal.SecurityIdentifier" /> 型ではなく、<see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" /> などの型でもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-231">
              <paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a0001-232">
            <see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスで監査規則を表すために使用する型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-232">Gets the type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent audit rules.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a0001-233">
            <see cref="T:System.Type" /> クラスを表す <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-233">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> class.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-234">派生するクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>プロパティと戻り値を使用して監査権限を表す型。</span><span class="sxs-lookup"><span data-stu-id="a0001-234">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights.</span></span> <span data-ttu-id="a0001-235">配列または複数の種類のセキュリティ オブジェクトを含むコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトを使用する適切な監査規則の種類を決定します。</span><span class="sxs-lookup"><span data-stu-id="a0001-235">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As RegistryAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; bool" Usage="registrySecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-236">検索対象のユーザーと <see cref="T:System.Security.AccessControl.RegistryAccessRule" />、および一致する規則が見つかった場合にその規則と互換性のある継承フラグと反映フラグのセットを指定する <see cref="T:System.Security.AccessControl.AccessControlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-236">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</span>
          </span>
          <span data-ttu-id="a0001-237">互換性のある規則が見つかった場合にその規則から削除する権限を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-237">Specifies the rights to remove from the compatible rule, if found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-238">指定したアクセス規則と同じユーザーと <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否)、および互換性がある継承フラグと反映フラグが指定されたアクセス制御規則が検索されます。このような規則が見つかると、指定したアクセス規則に含まれる権限がその規則から削除されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-238">Searches for an access control rule with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0001-239">互換性のある規則が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-239">
              <see langword="true" /> if a compatible rule is found; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-240">現在<xref:System.Security.AccessControl.RegistrySecurity>同じユーザーと同じであるルールが検索<xref:System.Security.AccessControl.AccessControlType>として値`rule`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-240">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`.</span></span> <span data-ttu-id="a0001-241">このようなルールが見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-241">If no such rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="a0001-242">指定されたフラグと互換性のため、継承との互換性フラグをチェック照合ルールが見つかった場合`rule`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-242">If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`.</span></span> <span data-ttu-id="a0001-243">互換性のある規則が存在しないかどうか、操作はありませんし、メソッドを返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-243">If no compatible rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="a0001-244">権限がで指定された互換性フラグを含む規則が見つかった場合`rule`、互換性のある規則から削除されます、メソッドを返します`true`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-244">If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`.</span></span> <span data-ttu-id="a0001-245">場合`rule`互換性のある規則に含まれていない権限を指定します、それらの権利に関する操作はありません。</span><span class="sxs-lookup"><span data-stu-id="a0001-245">If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</span></span> <span data-ttu-id="a0001-246">現在から全体の規則が削除される場合、すべての権限は、互換性のある規則から削除されます、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-246">If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0001-247">次のコード例に示す方法、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>メソッドは、互換性のある規則から権利を削除する方法と、<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>メソッドは、互換性のある規則の権限をマージします。</span><span class="sxs-lookup"><span data-stu-id="a0001-247">The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method removes rights from a compatible rule, and how the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method merges rights with compatible rules.</span></span>  
  
 <span data-ttu-id="a0001-248">例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトし、現在のユーザーを許可する規則を追加します。<xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType>権限。</span><span class="sxs-lookup"><span data-stu-id="a0001-248">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds a rule that allows the current user <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> rights.</span></span> <span data-ttu-id="a0001-249">ユーザーを許可するルールを作成し<xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>同じ継承および使用して最初のルールと伝達の権限を指定して、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>からこの新しいルールを削除する方法、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-249">The example then creates a rule that grants the user <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>, with the same inheritance and propagation rights as the first rule, and uses the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to remove this new rule from the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="a0001-250"><xref:System.Security.AccessControl.RegistryRights.SetValue> 構成要素は、<xref:System.Security.AccessControl.RegistryRights.ReadKey>ので、互換性のある規則から削除されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-250"><xref:System.Security.AccessControl.RegistryRights.SetValue> is a constituent of <xref:System.Security.AccessControl.RegistryRights.ReadKey>, so it is removed from the compatible rule.</span></span> <span data-ttu-id="a0001-251">内のルール、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトに表示されるの残りの構成要素を示す<xref:System.Security.AccessControl.RegistryRights.ReadKey>します。</span><span class="sxs-lookup"><span data-stu-id="a0001-251">The rules in the <xref:System.Security.AccessControl.RegistrySecurity> object are displayed, showing the remaining constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey>.</span></span>  
  
 <span data-ttu-id="a0001-252">コード例を呼び出して、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>にマージするメソッド、<xref:System.Security.AccessControl.RegistryRights.SetValue>内のルールに戻す、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-252">The example code then calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to merge the <xref:System.Security.AccessControl.RegistryRights.SetValue> right back into the rule in the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0001-253">この例は、セキュリティ オブジェクトをアタッチできません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-253">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="a0001-254">このセクションでは、2 番目の例は、セキュリティ オブジェクトをアタッチおよびは<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType><xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="a0001-254">The second example in this section attaches a security object, and so do the examples in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType><xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-255">
            <paramref name="rule" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-255">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-256">検索対象のユーザーと <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> を指定する <see cref="T:System.Security.AccessControl.AccessControlType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-256">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for.</span>
          </span>
          <span data-ttu-id="a0001-257">この規則で指定する権限、継承フラグ、または反映フラグは、無視されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-257">Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-258">指定した規則と同じユーザーおよび同じ <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否) が指定されたアクセス制御規則をすべて検索し、一致する規則が見つかった場合は、その規則を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-258">Searches for all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule and, if found, removes them.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-259">現在<xref:System.Security.AccessControl.RegistrySecurity>を含む、同じユーザーと同じ規則が検索<xref:System.Security.AccessControl.AccessControlType>として値`rule`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-259">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`.</span></span> <span data-ttu-id="a0001-260">権限、継承フラグ、またはフラグと反映フラグで指定された`rule`この検索を実行する場合は無視されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-260">Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search.</span></span> <span data-ttu-id="a0001-261">照合ルールが見つからない場合、アクションは行われません。</span><span class="sxs-lookup"><span data-stu-id="a0001-261">If no matching rules are found, no action is taken.</span></span>  
  
 <span data-ttu-id="a0001-262">たとえば、ユーザーに別の継承と反映フラグのさまざまな権限を許可する複数のルールがある場合は、削除できますこれらすべてのルールを作成して、 <xref:System.Security.AccessControl.RegistryAccessRule> 、ユーザーを指定するオブジェクトと<xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType>フラグ、および任意の権限を持つそのルールを渡すと、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a0001-262">For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <xref:System.Security.AccessControl.RegistryAccessRule> object that specifies the user and <xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType>, with any arbitrary rights and flags, and passing that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0001-263">コード例を次に示します、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A>メソッドは、ユーザーに一致するすべての規則を削除し、 <xref:System.Security.AccessControl.AccessControlType>、権およびフラグは無視されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-263">The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights and flags.</span></span>  
  
 <span data-ttu-id="a0001-264">例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトし、許可し、異なる継承と反映フラグで、現在のユーザーのさまざまな権限を拒否する規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="a0001-264">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</span></span> <span data-ttu-id="a0001-265">所有権を取得する現在のユーザーを許可しするには、そのルールを渡す新しいルールを作成し、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A>アクセスを許可する 2 つの規則を削除するメソッド。</span><span class="sxs-lookup"><span data-stu-id="a0001-265">The example then creates a new rule that allows the current user to take ownership, and passes that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method to remove the two rules that allow access.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0001-266">この例は、セキュリティ オブジェクトをアタッチできません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-266">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="a0001-267">参照してください、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>メソッドと<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a0001-267">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-268">
            <paramref name="rule" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-268">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-269">削除する <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-269">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-270">指定した規則に正確に一致するアクセス制御規則を検索し、見つかった場合は、その規則を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-270">Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-271">完全に一致する場合にのみ、ルールが削除`rule`フラグを含むすべての詳細。</span><span class="sxs-lookup"><span data-stu-id="a0001-271">The rule is removed only if it exactly matches `rule` in all details, including flags.</span></span> <span data-ttu-id="a0001-272">その他の規則と同じユーザーと<xref:System.Security.AccessControl.AccessControlType>は影響しません。</span><span class="sxs-lookup"><span data-stu-id="a0001-272">Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a0001-273">ルールを表す 1 つまたは複数基になるアクセス制御エントリ (ACE) とこれらのエントリが分割またはユーザーのアクセスのセキュリティ規則を変更するときに、必要に応じて組み合わせます。</span><span class="sxs-lookup"><span data-stu-id="a0001-273">A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user.</span></span> <span data-ttu-id="a0001-274">そのため、ルールが存在しなく、形式が追加されたときに、その場合、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>方法はそれを削除することはできません。</span><span class="sxs-lookup"><span data-stu-id="a0001-274">Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method cannot remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0001-275">コード例を次に示します、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>メソッドが正確に一致した場合にのみ、ルールを削除します。</span><span class="sxs-lookup"><span data-stu-id="a0001-275">The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method removes a rule only if it matches exactly.</span></span>  
  
 <span data-ttu-id="a0001-276">この例は、異なる権限を許可する 2 つのルールを作成します。</span><span class="sxs-lookup"><span data-stu-id="a0001-276">The example creates two rules that allow different rights.</span></span> <span data-ttu-id="a0001-277">ルールはあるので、最初の 2 番目のルールが追加されたときにマージの互換性のある継承フラグと反映フラグ、です。</span><span class="sxs-lookup"><span data-stu-id="a0001-277">The rules have compatible inheritance and propagation flags, so when the second rule is added it merges with the first.</span></span> <span data-ttu-id="a0001-278">例では、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>最初の規則を指定して、メソッド、規則は、マージするために一致する規則はありませんが。</span><span class="sxs-lookup"><span data-stu-id="a0001-278">The example calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method, specifying the first rule, but because the rules are merged there is no rule that matches.</span></span> <span data-ttu-id="a0001-279">例を呼び出して、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>結合規則、および最後に呼び出しから 2 番目のルールの削除するメソッド、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>最初の規則を削除する方法。</span><span class="sxs-lookup"><span data-stu-id="a0001-279">The example then calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to the remove the second rule from the merged rule, and finally calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method to remove the first rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0001-280">この例は、セキュリティ オブジェクトをアタッチできません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-280">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="a0001-281">参照してください、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>メソッドと<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a0001-281">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-282">
            <paramref name="rule" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-282">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As RegistryAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; bool" Usage="registrySecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-283">検索対象のユーザー、および一致する規則がある場合にその規則と互換性のある継承フラグと反映フラグのセットを指定する <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-283">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</span>
          </span>
          <span data-ttu-id="a0001-284">互換性のある規則が見つかった場合にその規則から削除する権限を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-284">Specifies the rights to remove from the compatible rule, if found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-285">指定した規則と同じユーザー、および互換性のある継承フラグと反映フラグが指定された監査制御規則が検索されます。互換性のある規則が見つかると、指定した規則に含まれる権限がその規則から削除されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-285">Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0001-286">互換性のある規則が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-286">
              <see langword="true" /> if a compatible rule is found; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-287">現在<xref:System.Security.AccessControl.RegistrySecurity>と同じユーザーを含む監査規則の検索は`rule`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-287">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for an audit rule that has the same user as `rule`.</span></span> <span data-ttu-id="a0001-288">このようなルールが見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-288">If no such rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="a0001-289">指定されたフラグと互換性のため、継承との互換性フラグをチェック照合ルールが見つかった場合`rule`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-289">If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`.</span></span> <span data-ttu-id="a0001-290">互換性のある規則が存在しないかどうか、操作はありませんし、メソッドを返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-290">If no compatible rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="a0001-291">権限がで指定された互換性フラグを含む規則が見つかった場合`rule`、互換性のある規則から削除されます、メソッドを返します`true`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-291">If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`.</span></span> <span data-ttu-id="a0001-292">場合`rule`互換性のある規則に含まれていない権限を指定します、それらの権利に関する操作はありません。</span><span class="sxs-lookup"><span data-stu-id="a0001-292">If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</span></span> <span data-ttu-id="a0001-293">現在から全体の規則が削除される場合、すべての権限は、互換性のある規則から削除されます、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-293">If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-294">
            <paramref name="rule" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-294">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-295">検索対象のユーザーを指定する <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-295">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> that specifies the user to search for.</span>
          </span>
          <span data-ttu-id="a0001-296">この規則で指定する権限、継承フラグ、または反映フラグは、無視されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-296">Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-297">指定した規則と同じユーザーが設定されているすべての監査規則を検索し、見つかった場合はそれらの規則を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-297">Searches for all audit rules with the same user as the specified rule and, if found, removes them.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-298">現在<xref:System.Security.AccessControl.RegistrySecurity>と同じユーザーの監査規則が検索`rule`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-298">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for audit rules that have the same user as `rule`.</span></span> <span data-ttu-id="a0001-299">権限、継承フラグ、またはフラグと反映フラグで指定された`rule`この検索を実行する場合は無視されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-299">Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search.</span></span> <span data-ttu-id="a0001-300">照合ルールが見つからない場合、アクションは行われません。</span><span class="sxs-lookup"><span data-stu-id="a0001-300">If no matching rules are found, no action is taken.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-301">
            <paramref name="rule" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-301">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-302">削除する <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-302">The <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> to be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-303">指定した規則に正確に一致する監査規則を検索し、見つかった場合は、その規則を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-303">Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-304">完全に一致する場合にのみ、ルールが削除`rule`フラグを含むすべての詳細。</span><span class="sxs-lookup"><span data-stu-id="a0001-304">The rule is removed only if it exactly matches `rule` in all details, including flags.</span></span> <span data-ttu-id="a0001-305">同じユーザーの場合は、その他の監査規則には影響しません。</span><span class="sxs-lookup"><span data-stu-id="a0001-305">Other audit rules for the same user are not affected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a0001-306">ルールを表す 1 つまたは複数基になるアクセス制御エントリ (ACE) とこれらのエントリが分割またはユーザーのセキュリティの監査規則を変更するときに、必要に応じて組み合わせます。</span><span class="sxs-lookup"><span data-stu-id="a0001-306">A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user.</span></span> <span data-ttu-id="a0001-307">そのため、ルールが存在しなく、形式が追加されたときに、その場合、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A>方法はそれを削除することはできません。</span><span class="sxs-lookup"><span data-stu-id="a0001-307">Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> method cannot remove it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-308">
            <paramref name="rule" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-308">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-309">追加する <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-309">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to add.</span>
          </span>
          <span data-ttu-id="a0001-310">この規則で指定されたユーザーによって、この規則を追加する前に削除する規則が判断されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-310">The user specified by this rule determines the rules to remove before this rule is added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-311">
            <see cref="T:System.Security.AccessControl.AccessControlType" /> に関係なく、指定した規則と同じユーザーが指定されたすべてのアクセス制御規則を削除し、指定した規則を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-311">Removes all access control rules with the same user as the specified rule, regardless of <see cref="T:System.Security.AccessControl.AccessControlType" />, and then adds the specified rule.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-312">ユーザーが指定されたルールに一致するアクセス規則がない場合`rule`が追加されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-312">If there are no access rules whose user matches the specified rule, `rule` is added.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0001-313">次のコード例に示す方法、<xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A>メソッドは、一致する指定された規則に一致するユーザーのすべての規則を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="a0001-313">The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> method replaces all rules for the matching user with the rule specified for the match.</span></span>  
  
 <span data-ttu-id="a0001-314">例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトし、許可し、異なる継承と反映フラグで、現在のユーザーのさまざまな権限を拒否する規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="a0001-314">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</span></span> <span data-ttu-id="a0001-315">使用して、キーを読み取る場合にのみ、現在のユーザーは、新しいルールを作成し、<xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A>メソッドをユーザーのすべての規則を削除し、新しい規則に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="a0001-315">The example then creates a new rule that allows the current user only to read the key, and uses the <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> method to remove the all rules for the user and replace them with the new rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0001-316">この例は、セキュリティ オブジェクトをアタッチできません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-316">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="a0001-317">参照してください、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>メソッドと<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a0001-317">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-318">追加する <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-318">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to add.</span>
          </span>
          <span data-ttu-id="a0001-319">この規則のユーザーと <see cref="T:System.Security.AccessControl.AccessControlType" /> によって、この規則を追加する前に削除する規則が判断されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-319">The user and <see cref="T:System.Security.AccessControl.AccessControlType" /> of this rule determine the rules to remove before this rule is added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-320">指定した規則と同じユーザーおよび同じ <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否) が指定されたすべてのアクセス制御規則を削除し、指定した規則を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-320">Removes all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule, and then adds the specified rule.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-321">指定されたルールがある場合<xref:System.Security.AccessControl.AccessControlType.Allow>、このメソッドの効果は、すべてを削除する<xref:System.Security.AccessControl.AccessControlType.Allow>指定されたルールに置き換えて、指定したユーザーの規則。</span><span class="sxs-lookup"><span data-stu-id="a0001-321">If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Allow>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType.Allow> rules for the specified user, replacing them with the specified rule.</span></span> <span data-ttu-id="a0001-322">指定されたルールがある場合<xref:System.Security.AccessControl.AccessControlType.Deny>すべて、<xref:System.Security.AccessControl.AccessControlType.Deny>指定したユーザーの規則は、指定されたルールに置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="a0001-322">If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Deny>, all <xref:System.Security.AccessControl.AccessControlType.Deny> rules for the specified user are replaced with the specified rule.</span></span>  
  
 <span data-ttu-id="a0001-323">規則がないユーザーの場合と<xref:System.Security.AccessControl.AccessControlType>指定の規則と一致`rule`が追加されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-323">If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0001-324">コード例を次に示します、<xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A>メソッドは、ユーザーの両方に一致するすべての規則を削除し、<xref:System.Security.AccessControl.AccessControlType>の`rule`権限と、フラグを無視しで置き換え、`rule`します。</span><span class="sxs-lookup"><span data-stu-id="a0001-324">The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, ignoring rights and flags, and replaces them with `rule`.</span></span>  
  
 <span data-ttu-id="a0001-325">例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトし、許可し、異なる継承と反映フラグで、現在のユーザーのさまざまな権限を拒否する規則を追加します。</span><span class="sxs-lookup"><span data-stu-id="a0001-325">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</span></span> <span data-ttu-id="a0001-326">使用して、キーを読み取る場合にのみ、現在のユーザーは、新しいルールを作成し、<xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A>メソッド アクセスを許可する 2 つの規則を削除して、新しい規則に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="a0001-326">The example then creates a new rule that allows the current user only to read the key, and uses the <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> method to remove the two rules that allow access and to replace them with the new rule.</span></span> <span data-ttu-id="a0001-327">アクセスを拒否する規則が影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="a0001-327">The rule that denies access is not affected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0001-328">この例は、セキュリティ オブジェクトをアタッチできません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0001-328">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="a0001-329">参照してください、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>メソッドと<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a0001-329">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-330">
            <paramref name="rule" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-330">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">
          <span data-ttu-id="a0001-331">追加する <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-331">The <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> to add.</span>
          </span>
          <span data-ttu-id="a0001-332">この規則で指定されたユーザーによって、この規則を追加する前に削除する規則が判断されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-332">The user specified by this rule determines the rules to remove before this rule is added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0001-333">
            <see cref="T:System.Security.AccessControl.AuditFlags" /> 値に関係なく、指定した規則と同じユーザーが指定されたすべての監査規則を削除し、指定した規則を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-333">Removes all audit rules with the same user as the specified rule, regardless of the <see cref="T:System.Security.AccessControl.AuditFlags" /> value, and then adds the specified rule.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0001-334">ユーザーが指定されたルールに一致する監査規則がない場合`rule`が追加されます。</span><span class="sxs-lookup"><span data-stu-id="a0001-334">If there are no audit rules whose user matches the specified rule, `rule` is added.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0001-335">
            <paramref name="rule" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0001-335">
              <paramref name="rule" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>